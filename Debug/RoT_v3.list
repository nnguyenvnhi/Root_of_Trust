
RoT_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a0c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e64  0801a258  0801a258  0002a258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b0bc  0801b0bc  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b0bc  0801b0bc  0002b0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b0c4  0801b0c4  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b0c4  0801b0c4  0002b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b0c8  0801b0c8  0002b0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801b0cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301fc  2**0
                  CONTENTS
 10 .bss          00000800  200001fc  200001fc  000301fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009fc  200009fc  000301fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fbd3  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000407f  00000000  00000000  0004fdff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  00053e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001570  00000000  00000000  000555a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005faa  00000000  00000000  00056b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e830  00000000  00000000  0005cac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d539f  00000000  00000000  0007b2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00150691  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072b4  00000000  00000000  001506e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a240 	.word	0x0801a240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0801a240 	.word	0x0801a240

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <Chacha20_Xor>:
FUNC(void, CHACHA20_PUBLIC_FUNCTION) Chacha20_Xor(uint8 keyStream[],
						  uint32 cell[],
						  uint8 textInput[],
						  uint16 size,
						  uint8 textOutput[])
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
	// C: call setCell
	ChaCha20_SetCell(cell, Gb_sulConstant, Gb_sculChachaKey, \
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <Chacha20_Xor+0x38>)
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <Chacha20_Xor+0x3c>)
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <Chacha20_Xor+0x40>)
 8000eb6:	490b      	ldr	r1, [pc, #44]	; (8000ee4 <Chacha20_Xor+0x44>)
 8000eb8:	68b8      	ldr	r0, [r7, #8]
 8000eba:	f000 f815 	bl	8000ee8 <ChaCha20_SetCell>
	                 Gb_sulBlockNumber, Gb_sulNonce);

	ChaCha20_FinalXor((uint8*)keyStream, (uint8*)cell, \
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f000 fa97 	bl	80013fc <ChaCha20_FinalXor>
	                  (uint8*)textInput, size, (uint8*)textOutput);
} /* END ChaCha20_Xor */
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000018 	.word	0x20000018
 8000edc:	20000010 	.word	0x20000010
 8000ee0:	0801a554 	.word	0x0801a554
 8000ee4:	20000000 	.word	0x20000000

08000ee8 <ChaCha20_SetCell>:
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_SetCell(uint32 cell[],
						       uint32 constant[],
						       const uint32 key[],
						       uint32 blockNumber[],
						       uint32 nonce[])
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]

	// L: setConstant, i = 0 -> 3
	for (uint8 i = 0; i < 4; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	75fb      	strb	r3, [r7, #23]
 8000efa:	e00c      	b.n	8000f16 <ChaCha20_SetCell+0x2e>
		// C: Assign cell[i] = constant[i]
		cell[i] = constant[i];
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	441a      	add	r2, r3
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	68f9      	ldr	r1, [r7, #12]
 8000f0a:	440b      	add	r3, r1
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	601a      	str	r2, [r3, #0]
	for (uint8 i = 0; i < 4; i++)
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	3301      	adds	r3, #1
 8000f14:	75fb      	strb	r3, [r7, #23]
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d9ef      	bls.n	8000efc <ChaCha20_SetCell+0x14>

	// L: setkey, i = 4 -> 11
	for (uint8 i = 4; i < 12; i++)
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	75bb      	strb	r3, [r7, #22]
 8000f20:	e00f      	b.n	8000f42 <ChaCha20_SetCell+0x5a>

		// C: Assign cell[i] = key[i - 4]
		cell[i] = key[i - 4];
 8000f22:	7dbb      	ldrb	r3, [r7, #22]
 8000f24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f28:	3b04      	subs	r3, #4
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	441a      	add	r2, r3
 8000f30:	7dbb      	ldrb	r3, [r7, #22]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	68f9      	ldr	r1, [r7, #12]
 8000f36:	440b      	add	r3, r1
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	601a      	str	r2, [r3, #0]
	for (uint8 i = 4; i < 12; i++)
 8000f3c:	7dbb      	ldrb	r3, [r7, #22]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	75bb      	strb	r3, [r7, #22]
 8000f42:	7dbb      	ldrb	r3, [r7, #22]
 8000f44:	2b0b      	cmp	r3, #11
 8000f46:	d9ec      	bls.n	8000f22 <ChaCha20_SetCell+0x3a>

	// L: setBlockNumber, i = 12 -> 13
	for (uint8 i = 12; i < 14; i++)
 8000f48:	230c      	movs	r3, #12
 8000f4a:	757b      	strb	r3, [r7, #21]
 8000f4c:	e00f      	b.n	8000f6e <ChaCha20_SetCell+0x86>

		// C: Assign cell[i] = blockNumber[i - 12]
		cell[i] = blockNumber[i - 12];
 8000f4e:	7d7b      	ldrb	r3, [r7, #21]
 8000f50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f54:	3b0c      	subs	r3, #12
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	441a      	add	r2, r3
 8000f5c:	7d7b      	ldrb	r3, [r7, #21]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	440b      	add	r3, r1
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	601a      	str	r2, [r3, #0]
	for (uint8 i = 12; i < 14; i++)
 8000f68:	7d7b      	ldrb	r3, [r7, #21]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	757b      	strb	r3, [r7, #21]
 8000f6e:	7d7b      	ldrb	r3, [r7, #21]
 8000f70:	2b0d      	cmp	r3, #13
 8000f72:	d9ec      	bls.n	8000f4e <ChaCha20_SetCell+0x66>

	// L: setBlockNumber, i = 14 -> 15
	for (uint8 i = 14; i < 16; i++)
 8000f74:	230e      	movs	r3, #14
 8000f76:	753b      	strb	r3, [r7, #20]
 8000f78:	e00f      	b.n	8000f9a <ChaCha20_SetCell+0xb2>

		// C: Assign cell[i] = nonce[i - 12]
		cell[i] = nonce[i - 14];
 8000f7a:	7d3b      	ldrb	r3, [r7, #20]
 8000f7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f80:	3b0e      	subs	r3, #14
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	6a3a      	ldr	r2, [r7, #32]
 8000f86:	441a      	add	r2, r3
 8000f88:	7d3b      	ldrb	r3, [r7, #20]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	440b      	add	r3, r1
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	601a      	str	r2, [r3, #0]
	for (uint8 i = 14; i < 16; i++)
 8000f94:	7d3b      	ldrb	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	753b      	strb	r3, [r7, #20]
 8000f9a:	7d3b      	ldrb	r3, [r7, #20]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d9ec      	bls.n	8000f7a <ChaCha20_SetCell+0x92>
}/* END ChaCha20_SetCell */
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	371c      	adds	r7, #28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <ChaCha20_Round>:
**
** Functions Invoked     : None
***********************************************************************************/
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_Round(uint8 keyStream[],
						     uint32 cell[])
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b095      	sub	sp, #84	; 0x54
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
	// C-DE: x-array for storing 16 cells KSG input
	uint32 x[16];

	//L: for storing 16 cells KSG input
	for (uint8 i = 0; i < 16; i++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000fbe:	e012      	b.n	8000fe6 <ChaCha20_Round+0x38>
		x[i] = cell[i];
 8000fc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	441a      	add	r2, r3
 8000fca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f843 2c44 	str.w	r2, [r3, #-68]
	for (uint8 i = 0; i < 16; i++)
 8000fdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000fe6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d9e8      	bls.n	8000fc0 <ChaCha20_Round+0x12>

	//Loop for mixing in Round function-------------
	for (uint8 i = 0; i < ROUNDS; i += 2)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000ff4:	e184      	b.n	8001300 <ChaCha20_Round+0x352>
	{
		//Odd rounds------------------------------
		QR(x[0], x[4], x[8], x[12]);
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4053      	eors	r3, r2
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001008:	ea4f 4333 	mov.w	r3, r3, ror #16
 800100c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800100e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001012:	4413      	add	r3, r2
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	4053      	eors	r3, r2
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	ea4f 5333 	mov.w	r3, r3, ror #20
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4053      	eors	r3, r2
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001038:	ea4f 6333 	mov.w	r3, r3, ror #24
 800103c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800103e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001042:	4413      	add	r3, r2
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104a:	4053      	eors	r3, r2
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001054:	61fb      	str	r3, [r7, #28]
		QR(x[1], x[5], x[9], x[13]);
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	4413      	add	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4053      	eors	r3, r2
 8001064:	643b      	str	r3, [r7, #64]	; 0x40
 8001066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001068:	ea4f 4333 	mov.w	r3, r3, ror #16
 800106c:	643b      	str	r3, [r7, #64]	; 0x40
 800106e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001072:	4413      	add	r3, r2
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
 8001076:	6a3a      	ldr	r2, [r7, #32]
 8001078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107a:	4053      	eors	r3, r2
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	ea4f 5333 	mov.w	r3, r3, ror #20
 8001084:	623b      	str	r3, [r7, #32]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	4413      	add	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4053      	eors	r3, r2
 8001094:	643b      	str	r3, [r7, #64]	; 0x40
 8001096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001098:	ea4f 6333 	mov.w	r3, r3, ror #24
 800109c:	643b      	str	r3, [r7, #64]	; 0x40
 800109e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010a2:	4413      	add	r3, r2
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
 80010a6:	6a3a      	ldr	r2, [r7, #32]
 80010a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010aa:	4053      	eors	r3, r2
 80010ac:	623b      	str	r3, [r7, #32]
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80010b4:	623b      	str	r3, [r7, #32]
		QR(x[2], x[6], x[10], x[14]);
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	4413      	add	r3, r2
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	4053      	eors	r3, r2
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
 80010c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
 80010ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010d2:	4413      	add	r3, r2
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
 80010d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010da:	4053      	eors	r3, r2
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	4413      	add	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4053      	eors	r3, r2
 80010f4:	647b      	str	r3, [r7, #68]	; 0x44
 80010f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010f8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
 80010fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001102:	4413      	add	r3, r2
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
 8001106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	4053      	eors	r3, r2
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
		QR(x[3], x[7], x[11], x[15]);
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	4413      	add	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4053      	eors	r3, r2
 8001124:	64bb      	str	r3, [r7, #72]	; 0x48
 8001126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001128:	ea4f 4333 	mov.w	r3, r3, ror #16
 800112c:	64bb      	str	r3, [r7, #72]	; 0x48
 800112e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001132:	4413      	add	r3, r2
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
 8001136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800113a:	4053      	eors	r3, r2
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	ea4f 5333 	mov.w	r3, r3, ror #20
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114a:	4413      	add	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	4053      	eors	r3, r2
 8001154:	64bb      	str	r3, [r7, #72]	; 0x48
 8001156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001158:	ea4f 6333 	mov.w	r3, r3, ror #24
 800115c:	64bb      	str	r3, [r7, #72]	; 0x48
 800115e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001162:	4413      	add	r3, r2
 8001164:	63bb      	str	r3, [r7, #56]	; 0x38
 8001166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800116a:	4053      	eors	r3, r2
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
 800116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001170:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
		//Even rounds-------------------------
		QR(x[0], x[5], x[10], x[15]);
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4053      	eors	r3, r2
 8001184:	64bb      	str	r3, [r7, #72]	; 0x48
 8001186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001188:	ea4f 4333 	mov.w	r3, r3, ror #16
 800118c:	64bb      	str	r3, [r7, #72]	; 0x48
 800118e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001192:	4413      	add	r3, r2
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
 8001196:	6a3a      	ldr	r2, [r7, #32]
 8001198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119a:	4053      	eors	r3, r2
 800119c:	623b      	str	r3, [r7, #32]
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80011a4:	623b      	str	r3, [r7, #32]
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4053      	eors	r3, r2
 80011b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80011b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011b8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80011bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80011be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011c2:	4413      	add	r3, r2
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
 80011c6:	6a3a      	ldr	r2, [r7, #32]
 80011c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ca:	4053      	eors	r3, r2
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80011d4:	623b      	str	r3, [r7, #32]
		QR(x[1], x[6], x[11], x[12]);
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	4413      	add	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4053      	eors	r3, r2
 80011e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011e8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80011ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011f2:	4413      	add	r3, r2
 80011f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80011f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fa:	4053      	eors	r3, r2
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	ea4f 5333 	mov.w	r3, r3, ror #20
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	4413      	add	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4053      	eors	r3, r2
 8001214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001218:	ea4f 6333 	mov.w	r3, r3, ror #24
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800121e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001222:	4413      	add	r3, r2
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
 8001226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800122a:	4053      	eors	r3, r2
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
		QR(x[2], x[7], x[8], x[13]);
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	4413      	add	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	4053      	eors	r3, r2
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
 8001246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001248:	ea4f 4333 	mov.w	r3, r3, ror #16
 800124c:	643b      	str	r3, [r7, #64]	; 0x40
 800124e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001252:	4413      	add	r3, r2
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125a:	4053      	eors	r3, r2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	ea4f 5333 	mov.w	r3, r3, ror #20
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126a:	4413      	add	r3, r2
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	4053      	eors	r3, r2
 8001274:	643b      	str	r3, [r7, #64]	; 0x40
 8001276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001278:	ea4f 6333 	mov.w	r3, r3, ror #24
 800127c:	643b      	str	r3, [r7, #64]	; 0x40
 800127e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001282:	4413      	add	r3, r2
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128a:	4053      	eors	r3, r2
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
		QR(x[3], x[4], x[9], x[14]);
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4413      	add	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	4053      	eors	r3, r2
 80012a4:	647b      	str	r3, [r7, #68]	; 0x44
 80012a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012a8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
 80012ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012b2:	4413      	add	r3, r2
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ba:	4053      	eors	r3, r2
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	4413      	add	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	4053      	eors	r3, r2
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
 80012d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012d8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80012dc:	647b      	str	r3, [r7, #68]	; 0x44
 80012de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012e2:	4413      	add	r3, r2
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
 80012e6:	69fa      	ldr	r2, [r7, #28]
 80012e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ea:	4053      	eors	r3, r2
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80012f4:	61fb      	str	r3, [r7, #28]
	for (uint8 i = 0; i < ROUNDS; i += 2)
 80012f6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80012fa:	3302      	adds	r3, #2
 80012fc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001300:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001304:	2b13      	cmp	r3, #19
 8001306:	f67f ae76 	bls.w	8000ff6 <ChaCha20_Round+0x48>
	}

	//Loop for adding KSG table input with output table of Round function
	for (uint8 i = 0, b = 0; i < 16; i++)
 800130a:	2300      	movs	r3, #0
 800130c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001310:	2300      	movs	r3, #0
 8001312:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001316:	e066      	b.n	80013e6 <ChaCha20_Round+0x438>
	{
		x[i] += cell[i];
 8001318:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001322:	4413      	add	r3, r2
 8001324:	f853 1c44 	ldr.w	r1, [r3, #-68]
 8001328:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4413      	add	r3, r2
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001338:	440a      	add	r2, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001340:	440b      	add	r3, r1
 8001342:	f843 2c44 	str.w	r2, [r3, #-68]

		// Store keystream
		keyStream[b++] = x[i] & 0xFF;
 8001346:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001350:	4413      	add	r3, r2
 8001352:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8001356:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800135a:	1c59      	adds	r1, r3, #1
 800135c:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 8001360:	4619      	mov	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	440b      	add	r3, r1
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 8) & 0xFF;
 800136a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001374:	4413      	add	r3, r2
 8001376:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800137a:	0a1a      	lsrs	r2, r3, #8
 800137c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001380:	1c59      	adds	r1, r3, #1
 8001382:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 8001386:	4619      	mov	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	440b      	add	r3, r1
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 16) & 0xFF;
 8001390:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800139a:	4413      	add	r3, r2
 800139c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80013a0:	0c1a      	lsrs	r2, r3, #16
 80013a2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80013a6:	1c59      	adds	r1, r3, #1
 80013a8:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 80013ac:	4619      	mov	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	440b      	add	r3, r1
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 24) & 0xFF;
 80013b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013c0:	4413      	add	r3, r2
 80013c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80013c6:	0e1a      	lsrs	r2, r3, #24
 80013c8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80013cc:	1c59      	adds	r1, r3, #1
 80013ce:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 80013d2:	4619      	mov	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	440b      	add	r3, r1
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	701a      	strb	r2, [r3, #0]
	for (uint8 i = 0, b = 0; i < 16; i++)
 80013dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013e0:	3301      	adds	r3, #1
 80013e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80013e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	d994      	bls.n	8001318 <ChaCha20_Round+0x36a>
	}
}/* END ChaCha20_Round */
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3754      	adds	r7, #84	; 0x54
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <ChaCha20_FinalXor>:
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_FinalXor(uint8 keyStream[],
							uint8 cell[],
							uint8 textInput[],
							uint16 size,
							uint8 textOutput[])
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
	// C: roundFunction
	ChaCha20_Round(keyStream, (uint32*)cell);
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f7ff fdce 	bl	8000fae <ChaCha20_Round>

	// L: textInput and textOutput
	uint16 j = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
	uint16 round = size/64;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	613b      	str	r3, [r7, #16]
		   round += (size%64!=0)?1:0;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <ChaCha20_FinalXor+0x2e>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <ChaCha20_FinalXor+0x30>
 800142a:	2300      	movs	r3, #0
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4413      	add	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
//	while (textInput[j])
//	{
	for(int16 r = 0; r < round; r++){
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	e020      	b.n	800147a <ChaCha20_FinalXor+0x7e>
		// L: keyStream
		for (uint8 i = 0; i < 64&&j<size; i++)
 8001438:	2300      	movs	r3, #0
 800143a:	75fb      	strb	r3, [r7, #23]
 800143c:	e013      	b.n	8001466 <ChaCha20_FinalXor+0x6a>
		{
			// C: xor cell8 and textInput8
			textOutput[j] = (keyStream[i] ^ textInput[j]);
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	7819      	ldrb	r1, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4413      	add	r3, r2
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4403      	add	r3, r0
 8001454:	404a      	eors	r2, r1
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
			j++;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
		for (uint8 i = 0; i < 64&&j<size; i++)
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	3301      	adds	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	2b3f      	cmp	r3, #63	; 0x3f
 800146a:	d803      	bhi.n	8001474 <ChaCha20_FinalXor+0x78>
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3e4      	bcc.n	800143e <ChaCha20_FinalXor+0x42>
	for(int16 r = 0; r < round; r++){
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	3301      	adds	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	429a      	cmp	r2, r3
 8001480:	d8da      	bhi.n	8001438 <ChaCha20_FinalXor+0x3c>
		}
	}

//	}
}/* END ChaCha20_FinalXor */
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <load_3>:


/*
    helper functions
*/
static uint64_t load_3(const unsigned char *in) {
 800148c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
    uint64_t result;

    result = (uint64_t) in[0];
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result |= ((uint64_t) in[1]) << 8;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3301      	adds	r3, #1
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2d8      	uxtb	r0, r3
 80014ac:	f04f 0100 	mov.w	r1, #0
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	020b      	lsls	r3, r1, #8
 80014ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80014be:	0202      	lsls	r2, r0, #8
 80014c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014c4:	ea40 0802 	orr.w	r8, r0, r2
 80014c8:	ea41 0903 	orr.w	r9, r1, r3
 80014cc:	e9c7 8902 	strd	r8, r9, [r7, #8]
    result |= ((uint64_t) in[2]) << 16;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3302      	adds	r3, #2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b2d8      	uxtb	r0, r3
 80014d8:	f04f 0100 	mov.w	r1, #0
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	040b      	lsls	r3, r1, #16
 80014e6:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80014ea:	0402      	lsls	r2, r0, #16
 80014ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f0:	ea40 0402 	orr.w	r4, r0, r2
 80014f4:	ea41 0503 	orr.w	r5, r1, r3
 80014f8:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return result;
 80014fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800150c:	4770      	bx	lr

0800150e <load_4>:

static uint64_t load_4(const unsigned char *in) {
 800150e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
    uint64_t result;

    result = (uint64_t) in[0];
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[1]) << 8;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3301      	adds	r3, #1
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	f04f 0100 	mov.w	r1, #0
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	020b      	lsls	r3, r1, #8
 800153c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001540:	0202      	lsls	r2, r0, #8
 8001542:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001546:	ea40 0602 	orr.w	r6, r0, r2
 800154a:	603e      	str	r6, [r7, #0]
 800154c:	430b      	orrs	r3, r1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001554:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[2]) << 16;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3302      	adds	r3, #2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b2d8      	uxtb	r0, r3
 8001560:	f04f 0100 	mov.w	r1, #0
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	040b      	lsls	r3, r1, #16
 800156e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001572:	0402      	lsls	r2, r0, #16
 8001574:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001578:	ea40 0a02 	orr.w	sl, r0, r2
 800157c:	ea41 0b03 	orr.w	fp, r1, r3
 8001580:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    result |= ((uint64_t) in[3]) << 24;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3303      	adds	r3, #3
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	0a15      	lsrs	r5, r2, #8
 8001592:	0614      	lsls	r4, r2, #24
 8001594:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001598:	ea42 0804 	orr.w	r8, r2, r4
 800159c:	ea43 0905 	orr.w	r9, r3, r5
 80015a0:	e9c7 8904 	strd	r8, r9, [r7, #16]
    
    return result;
 80015a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015b4:	4770      	bx	lr

080015b6 <fe_0>:

/*
    h = 0
*/

void fe_0(fe h) {
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
    h[0] = 0;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
    h[1] = 0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3304      	adds	r3, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
    h[2] = 0;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3308      	adds	r3, #8
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
    h[3] = 0;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	330c      	adds	r3, #12
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
    h[4] = 0;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3310      	adds	r3, #16
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
    h[5] = 0;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3314      	adds	r3, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
    h[6] = 0;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3318      	adds	r3, #24
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
    h[7] = 0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	331c      	adds	r3, #28
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
    h[8] = 0;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3320      	adds	r3, #32
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
    h[9] = 0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3324      	adds	r3, #36	; 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <fe_1>:

/*
    h = 1
*/

void fe_1(fe h) {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    h[0] = 1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]
    h[1] = 0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3304      	adds	r3, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
    h[2] = 0;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3308      	adds	r3, #8
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
    h[3] = 0;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	330c      	adds	r3, #12
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
    h[4] = 0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3310      	adds	r3, #16
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
    h[5] = 0;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3314      	adds	r3, #20
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
    h[6] = 0;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3318      	adds	r3, #24
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
    h[7] = 0;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	331c      	adds	r3, #28
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
    h[8] = 0;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3320      	adds	r3, #32
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
    h[9] = 0;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3324      	adds	r3, #36	; 0x24
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <fe_add>:

    Postconditions:
       |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_add(fe h, const fe f, const fe g) {
 800167a:	b480      	push	{r7}
 800167c:	b0a3      	sub	sp, #140	; 0x8c
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
    int32_t f0 = f[0];
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    int32_t f1 = f[1];
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t f2 = f[2];
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t f3 = f[3];
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t f4 = f[4];
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t f5 = f[5];
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	673b      	str	r3, [r7, #112]	; 0x70
    int32_t f6 = f[6];
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t f7 = f[7];
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t f8 = f[8];
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t f9 = f[9];
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	663b      	str	r3, [r7, #96]	; 0x60
    int32_t g0 = g[0];
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t g1 = g[1];
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t g2 = g[2];
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t g3 = g[3];
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t g4 = g[4];
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t g5 = g[5];
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t g6 = g[6];
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t g7 = g[7];
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t g8 = g[8];
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t g9 = g[9];
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h0 = f0 + g0;
 8001702:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001708:	4413      	add	r3, r2
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t h1 = f1 + g1;
 800170c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001712:	4413      	add	r3, r2
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h2 = f2 + g2;
 8001716:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171a:	4413      	add	r3, r2
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h3 = f3 + g3;
 800171e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001722:	4413      	add	r3, r2
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h4 = f4 + g4;
 8001726:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172a:	4413      	add	r3, r2
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h5 = f5 + g5;
 800172e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001732:	4413      	add	r3, r2
 8001734:	623b      	str	r3, [r7, #32]
    int32_t h6 = f6 + g6;
 8001736:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173a:	4413      	add	r3, r2
 800173c:	61fb      	str	r3, [r7, #28]
    int32_t h7 = f7 + g7;
 800173e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001742:	4413      	add	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
    int32_t h8 = f8 + g8;
 8001746:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800174a:	4413      	add	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
    int32_t h9 = f9 + g9;
 800174e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001752:	4413      	add	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
    
    h[0] = h0;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800175a:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3304      	adds	r3, #4
 8001760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001762:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3308      	adds	r3, #8
 8001768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800176a:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	330c      	adds	r3, #12
 8001770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001772:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3310      	adds	r3, #16
 8001778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177a:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3314      	adds	r3, #20
 8001780:	6a3a      	ldr	r2, [r7, #32]
 8001782:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3318      	adds	r3, #24
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	331c      	adds	r3, #28
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3320      	adds	r3, #32
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3324      	adds	r3, #36	; 0x24
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	601a      	str	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	378c      	adds	r7, #140	; 0x8c
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <fe_copy>:

/*
    h = f
*/

void fe_copy(fe h, const fe f) {
 80017b0:	b480      	push	{r7}
 80017b2:	b08d      	sub	sp, #52	; 0x34
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
    int32_t f0 = f[0];
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t f1 = f[1];
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t f2 = f[2];
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t f3 = f[3];
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	623b      	str	r3, [r7, #32]
    int32_t f4 = f[4];
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	61fb      	str	r3, [r7, #28]
    int32_t f5 = f[5];
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	61bb      	str	r3, [r7, #24]
    int32_t f6 = f[6];
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	617b      	str	r3, [r7, #20]
    int32_t f7 = f[7];
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	613b      	str	r3, [r7, #16]
    int32_t f8 = f[8];
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	60fb      	str	r3, [r7, #12]
    int32_t f9 = f[9];
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	60bb      	str	r3, [r7, #8]
    
    h[0] = f0;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fa:	601a      	str	r2, [r3, #0]
    h[1] = f1;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3304      	adds	r3, #4
 8001800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001802:	601a      	str	r2, [r3, #0]
    h[2] = f2;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3308      	adds	r3, #8
 8001808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180a:	601a      	str	r2, [r3, #0]
    h[3] = f3;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	330c      	adds	r3, #12
 8001810:	6a3a      	ldr	r2, [r7, #32]
 8001812:	601a      	str	r2, [r3, #0]
    h[4] = f4;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3310      	adds	r3, #16
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	601a      	str	r2, [r3, #0]
    h[5] = f5;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3314      	adds	r3, #20
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	601a      	str	r2, [r3, #0]
    h[6] = f6;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3318      	adds	r3, #24
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	601a      	str	r2, [r3, #0]
    h[7] = f7;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	331c      	adds	r3, #28
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	601a      	str	r2, [r3, #0]
    h[8] = f8;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3320      	adds	r3, #32
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	601a      	str	r2, [r3, #0]
    h[9] = f9;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3324      	adds	r3, #36	; 0x24
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	3734      	adds	r7, #52	; 0x34
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <fe_frombytes>:

/*
    Ignores top bit of h.
*/

void fe_frombytes(fe h, const unsigned char *s) {
 8001850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001854:	b0e7      	sub	sp, #412	; 0x19c
 8001856:	af00      	add	r7, sp, #0
 8001858:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800185c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
    int64_t h0 = load_4(s);
 8001860:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001864:	f7ff fe53 	bl	800150e <load_4>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
    int64_t h1 = load_3(s + 4) << 6;
 8001870:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001874:	3304      	adds	r3, #4
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fe08 	bl	800148c <load_3>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	f04f 0000 	mov.w	r0, #0
 8001884:	f04f 0100 	mov.w	r1, #0
 8001888:	0199      	lsls	r1, r3, #6
 800188a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800188e:	0190      	lsls	r0, r2, #6
 8001890:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
    int64_t h2 = load_3(s + 7) << 5;
 8001894:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001898:	3307      	adds	r3, #7
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fdf6 	bl	800148c <load_3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	0159      	lsls	r1, r3, #5
 80018ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b2:	0150      	lsls	r0, r2, #5
 80018b4:	e9c7 0160 	strd	r0, r1, [r7, #384]	; 0x180
    int64_t h3 = load_3(s + 10) << 3;
 80018b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80018bc:	330a      	adds	r3, #10
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fde4 	bl	800148c <load_3>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	f04f 0000 	mov.w	r0, #0
 80018cc:	f04f 0100 	mov.w	r1, #0
 80018d0:	00d9      	lsls	r1, r3, #3
 80018d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018d6:	00d0      	lsls	r0, r2, #3
 80018d8:	e9c7 015e 	strd	r0, r1, [r7, #376]	; 0x178
    int64_t h4 = load_3(s + 13) << 2;
 80018dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80018e0:	330d      	adds	r3, #13
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fdd2 	bl	800148c <load_3>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	f04f 0000 	mov.w	r0, #0
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	0099      	lsls	r1, r3, #2
 80018f6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80018fa:	0090      	lsls	r0, r2, #2
 80018fc:	e9c7 015c 	strd	r0, r1, [r7, #368]	; 0x170
    int64_t h5 = load_4(s + 16);
 8001900:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001904:	3310      	adds	r3, #16
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fe01 	bl	800150e <load_4>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    int64_t h6 = load_3(s + 20) << 7;
 8001914:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001918:	3314      	adds	r3, #20
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fdb6 	bl	800148c <load_3>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	f04f 0000 	mov.w	r0, #0
 8001928:	f04f 0100 	mov.w	r1, #0
 800192c:	01d9      	lsls	r1, r3, #7
 800192e:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8001932:	01d0      	lsls	r0, r2, #7
 8001934:	e9c7 0158 	strd	r0, r1, [r7, #352]	; 0x160
    int64_t h7 = load_3(s + 23) << 5;
 8001938:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800193c:	3317      	adds	r3, #23
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fda4 	bl	800148c <load_3>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	0159      	lsls	r1, r3, #5
 8001952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001956:	0150      	lsls	r0, r2, #5
 8001958:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
    int64_t h8 = load_3(s + 26) << 4;
 800195c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001960:	331a      	adds	r3, #26
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fd92 	bl	800148c <load_3>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	f04f 0000 	mov.w	r0, #0
 8001970:	f04f 0100 	mov.w	r1, #0
 8001974:	0119      	lsls	r1, r3, #4
 8001976:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800197a:	0110      	lsls	r0, r2, #4
 800197c:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    int64_t h9 = (load_3(s + 29) & 8388607) << 2;
 8001980:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001984:	331d      	adds	r3, #29
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fd80 	bl	800148c <load_3>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	f04f 0000 	mov.w	r0, #0
 8001994:	f04f 0100 	mov.w	r1, #0
 8001998:	0099      	lsls	r1, r3, #2
 800199a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800199e:	0090      	lsls	r0, r2, #2
 80019a0:	4aeb      	ldr	r2, [pc, #940]	; (8001d50 <fe_frombytes+0x500>)
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	ea00 0602 	and.w	r6, r0, r2
 80019aa:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 80019ae:	400b      	ands	r3, r1
 80019b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80019b4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80019b8:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;

    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 80019bc:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80019c0:	f112 7480 	adds.w	r4, r2, #16777216	; 0x1000000
 80019c4:	f143 0500 	adc.w	r5, r3, #0
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	0e62      	lsrs	r2, r4, #25
 80019d2:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
 80019d6:	166b      	asrs	r3, r5, #25
 80019d8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    h0 += carry9 * 19;
 80019dc:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 80019e0:	4622      	mov	r2, r4
 80019e2:	462b      	mov	r3, r5
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	00d9      	lsls	r1, r3, #3
 80019ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019f2:	00d0      	lsls	r0, r2, #3
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	1912      	adds	r2, r2, r4
 80019fa:	eb45 0303 	adc.w	r3, r5, r3
 80019fe:	1891      	adds	r1, r2, r2
 8001a00:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001a04:	415b      	adcs	r3, r3
 8001a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a0a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001a0e:	eb12 0a04 	adds.w	sl, r2, r4
 8001a12:	eb43 0b05 	adc.w	fp, r3, r5
 8001a16:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001a1a:	eb12 010a 	adds.w	r1, r2, sl
 8001a1e:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001a22:	eb43 030b 	adc.w	r3, r3, fp
 8001a26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a2a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8001a2e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
    h9 -= carry9 << 25;
 8001a32:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001a36:	f04f 0000 	mov.w	r0, #0
 8001a3a:	f04f 0100 	mov.w	r1, #0
 8001a3e:	0659      	lsls	r1, r3, #25
 8001a40:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8001a44:	0650      	lsls	r0, r2, #25
 8001a46:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001a4a:	1a14      	subs	r4, r2, r0
 8001a4c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001a50:	eb63 0301 	sbc.w	r3, r3, r1
 8001a54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a58:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001a5c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 8001a60:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001a64:	f112 7880 	adds.w	r8, r2, #16777216	; 0x1000000
 8001a68:	f143 0900 	adc.w	r9, r3, #0
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	ea4f 6258 	mov.w	r2, r8, lsr #25
 8001a78:	ea42 12c9 	orr.w	r2, r2, r9, lsl #7
 8001a7c:	ea4f 6369 	mov.w	r3, r9, asr #25
 8001a80:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
    h2 += carry1;
 8001a84:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8001a88:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001a8c:	1884      	adds	r4, r0, r2
 8001a8e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8001a92:	eb41 0303 	adc.w	r3, r1, r3
 8001a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a9a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8001a9e:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
    h1 -= carry1 << 25;
 8001aa2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	0659      	lsls	r1, r3, #25
 8001ab0:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8001ab4:	0650      	lsls	r0, r2, #25
 8001ab6:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001aba:	1a14      	subs	r4, r2, r0
 8001abc:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8001ac0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ac8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8001acc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8001ad0:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001ad4:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8001ad8:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8001adc:	f143 0300 	adc.w	r3, r3, #0
 8001ae0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001af0:	4621      	mov	r1, r4
 8001af2:	0e4a      	lsrs	r2, r1, #25
 8001af4:	4629      	mov	r1, r5
 8001af6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001afa:	4629      	mov	r1, r5
 8001afc:	164b      	asrs	r3, r1, #25
 8001afe:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
    h4 += carry3;
 8001b02:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001b06:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001b0a:	1884      	adds	r4, r0, r2
 8001b0c:	67bc      	str	r4, [r7, #120]	; 0x78
 8001b0e:	eb41 0303 	adc.w	r3, r1, r3
 8001b12:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b14:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8001b18:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
    h3 -= carry3 << 25;
 8001b1c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001b20:	f04f 0000 	mov.w	r0, #0
 8001b24:	f04f 0100 	mov.w	r1, #0
 8001b28:	0659      	lsls	r1, r3, #25
 8001b2a:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8001b2e:	0650      	lsls	r0, r2, #25
 8001b30:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001b34:	1a14      	subs	r4, r2, r0
 8001b36:	673c      	str	r4, [r7, #112]	; 0x70
 8001b38:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3c:	677b      	str	r3, [r7, #116]	; 0x74
 8001b3e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8001b42:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 8001b46:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001b4a:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8001b4e:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8001b52:	f143 0300 	adc.w	r3, r3, #0
 8001b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001b66:	4621      	mov	r1, r4
 8001b68:	0e4a      	lsrs	r2, r1, #25
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001b70:	4629      	mov	r1, r5
 8001b72:	164b      	asrs	r3, r1, #25
 8001b74:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    h6 += carry5;
 8001b78:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8001b7c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001b80:	1884      	adds	r4, r0, r2
 8001b82:	66bc      	str	r4, [r7, #104]	; 0x68
 8001b84:	eb41 0303 	adc.w	r3, r1, r3
 8001b88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b8a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8001b8e:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
    h5 -= carry5 << 25;
 8001b92:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001b96:	f04f 0000 	mov.w	r0, #0
 8001b9a:	f04f 0100 	mov.w	r1, #0
 8001b9e:	0659      	lsls	r1, r3, #25
 8001ba0:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8001ba4:	0650      	lsls	r0, r2, #25
 8001ba6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001baa:	1a14      	subs	r4, r2, r0
 8001bac:	663c      	str	r4, [r7, #96]	; 0x60
 8001bae:	eb63 0301 	sbc.w	r3, r3, r1
 8001bb2:	667b      	str	r3, [r7, #100]	; 0x64
 8001bb4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001bb8:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 8001bbc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001bc0:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8001bc4:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8001bc8:	f143 0300 	adc.w	r3, r3, #0
 8001bcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001bdc:	4621      	mov	r1, r4
 8001bde:	0e4a      	lsrs	r2, r1, #25
 8001be0:	4629      	mov	r1, r5
 8001be2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001be6:	4629      	mov	r1, r5
 8001be8:	164b      	asrs	r3, r1, #25
 8001bea:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    h8 += carry7;
 8001bee:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8001bf2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001bf6:	1884      	adds	r4, r0, r2
 8001bf8:	65bc      	str	r4, [r7, #88]	; 0x58
 8001bfa:	eb41 0303 	adc.w	r3, r1, r3
 8001bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c00:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001c04:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    h7 -= carry7 << 25;
 8001c08:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c0c:	f04f 0000 	mov.w	r0, #0
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	0659      	lsls	r1, r3, #25
 8001c16:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8001c1a:	0650      	lsls	r0, r2, #25
 8001c1c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001c20:	1a14      	subs	r4, r2, r0
 8001c22:	653c      	str	r4, [r7, #80]	; 0x50
 8001c24:	eb63 0301 	sbc.w	r3, r3, r1
 8001c28:	657b      	str	r3, [r7, #84]	; 0x54
 8001c2a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001c2e:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8001c32:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001c36:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8001c3a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001c3e:	f143 0300 	adc.w	r3, r3, #0
 8001c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001c52:	4621      	mov	r1, r4
 8001c54:	0e8a      	lsrs	r2, r1, #26
 8001c56:	4629      	mov	r1, r5
 8001c58:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	168b      	asrs	r3, r1, #26
 8001c60:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
    h1 += carry0;
 8001c64:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001c68:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c6c:	1884      	adds	r4, r0, r2
 8001c6e:	64bc      	str	r4, [r7, #72]	; 0x48
 8001c70:	eb41 0303 	adc.w	r3, r1, r3
 8001c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c76:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001c7a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
    h0 -= carry0 << 26;
 8001c7e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c82:	f04f 0000 	mov.w	r0, #0
 8001c86:	f04f 0100 	mov.w	r1, #0
 8001c8a:	0699      	lsls	r1, r3, #26
 8001c8c:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8001c90:	0690      	lsls	r0, r2, #26
 8001c92:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001c96:	1a14      	subs	r4, r2, r0
 8001c98:	643c      	str	r4, [r7, #64]	; 0x40
 8001c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001ca0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001ca4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 8001ca8:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8001cac:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8001cb0:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001cb4:	f143 0300 	adc.w	r3, r3, #0
 8001cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001cc8:	4621      	mov	r1, r4
 8001cca:	0e8a      	lsrs	r2, r1, #26
 8001ccc:	4629      	mov	r1, r5
 8001cce:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	168b      	asrs	r3, r1, #26
 8001cd6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    h3 += carry2;
 8001cda:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8001cde:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001ce2:	1884      	adds	r4, r0, r2
 8001ce4:	63bc      	str	r4, [r7, #56]	; 0x38
 8001ce6:	eb41 0303 	adc.w	r3, r1, r3
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cec:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001cf0:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
    h2 -= carry2 << 26;
 8001cf4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001cf8:	f04f 0000 	mov.w	r0, #0
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	0699      	lsls	r1, r3, #26
 8001d02:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8001d06:	0690      	lsls	r0, r2, #26
 8001d08:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8001d0c:	1a14      	subs	r4, r2, r0
 8001d0e:	633c      	str	r4, [r7, #48]	; 0x30
 8001d10:	eb63 0301 	sbc.w	r3, r3, r1
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
 8001d16:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001d1a:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8001d1e:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8001d22:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8001d26:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001d2a:	f143 0300 	adc.w	r3, r3, #0
 8001d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001d3e:	4621      	mov	r1, r4
 8001d40:	0e8a      	lsrs	r2, r1, #26
 8001d42:	4629      	mov	r1, r5
 8001d44:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8001d48:	4629      	mov	r1, r5
 8001d4a:	168b      	asrs	r3, r1, #26
 8001d4c:	e002      	b.n	8001d54 <fe_frombytes+0x504>
 8001d4e:	bf00      	nop
 8001d50:	01fffffc 	.word	0x01fffffc
 8001d54:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
    h5 += carry4;
 8001d58:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8001d5c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8001d60:	1884      	adds	r4, r0, r2
 8001d62:	62bc      	str	r4, [r7, #40]	; 0x28
 8001d64:	eb41 0303 	adc.w	r3, r1, r3
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001d6e:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
    h4 -= carry4 << 26;
 8001d72:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8001d76:	f04f 0000 	mov.w	r0, #0
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	0699      	lsls	r1, r3, #26
 8001d80:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8001d84:	0690      	lsls	r0, r2, #26
 8001d86:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8001d8a:	1a14      	subs	r4, r2, r0
 8001d8c:	623c      	str	r4, [r7, #32]
 8001d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d98:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 8001d9c:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8001da0:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8001da4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001da8:	f143 0300 	adc.w	r3, r3, #0
 8001dac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	0e8a      	lsrs	r2, r1, #26
 8001dc0:	4629      	mov	r1, r5
 8001dc2:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	168b      	asrs	r3, r1, #26
 8001dca:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
    h7 += carry6;
 8001dce:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001dd2:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001dd6:	1884      	adds	r4, r0, r2
 8001dd8:	61bc      	str	r4, [r7, #24]
 8001dda:	eb41 0303 	adc.w	r3, r1, r3
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001de4:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
    h6 -= carry6 << 26;
 8001de8:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	068b      	lsls	r3, r1, #26
 8001df6:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8001dfa:	0682      	lsls	r2, r0, #26
 8001dfc:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8001e00:	1a84      	subs	r4, r0, r2
 8001e02:	613c      	str	r4, [r7, #16]
 8001e04:	eb61 0303 	sbc.w	r3, r1, r3
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e0e:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 8001e12:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001e16:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8001e1a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001e1e:	f143 0300 	adc.w	r3, r3, #0
 8001e22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001e32:	4621      	mov	r1, r4
 8001e34:	0e8a      	lsrs	r2, r1, #26
 8001e36:	4629      	mov	r1, r5
 8001e38:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	168b      	asrs	r3, r1, #26
 8001e40:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    h9 += carry8;
 8001e44:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8001e48:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001e4c:	1884      	adds	r4, r0, r2
 8001e4e:	60bc      	str	r4, [r7, #8]
 8001e50:	eb41 0303 	adc.w	r3, r1, r3
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e5a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    h8 -= carry8 << 26;
 8001e5e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	068b      	lsls	r3, r1, #26
 8001e6c:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8001e70:	0682      	lsls	r2, r0, #26
 8001e72:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8001e76:	1a84      	subs	r4, r0, r2
 8001e78:	603c      	str	r4, [r7, #0]
 8001e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e84:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150

    h[0] = (int32_t) h0;
 8001e88:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8001e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e90:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 8001e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e96:	3304      	adds	r3, #4
 8001e98:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8001e9c:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 8001e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea2:	3308      	adds	r3, #8
 8001ea4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001ea8:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 8001eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eae:	330c      	adds	r3, #12
 8001eb0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001eb4:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 8001eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eba:	3310      	adds	r3, #16
 8001ebc:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8001ec0:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 8001ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec6:	3314      	adds	r3, #20
 8001ec8:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8001ecc:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 8001ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed2:	3318      	adds	r3, #24
 8001ed4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8001ed8:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 8001eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ede:	331c      	adds	r3, #28
 8001ee0:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001ee4:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 8001ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eea:	3320      	adds	r3, #32
 8001eec:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001ef0:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 8001ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef6:	3324      	adds	r3, #36	; 0x24
 8001ef8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001efc:	601a      	str	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8001f04:	46bd      	mov	sp, r7
 8001f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f0a:	bf00      	nop

08001f0c <fe_invert>:



void fe_invert(fe out, const fe z) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0ac      	sub	sp, #176	; 0xb0
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
    fe t1;
    fe t2;
    fe t3;
    int i;

    fe_sq(t0, z);
 8001f16:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f1a:	6839      	ldr	r1, [r7, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 f99a 	bl	8005256 <fe_sq>

    for (i = 1; i < 1; ++i) {
 8001f22:	2301      	movs	r3, #1
 8001f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f28:	e00c      	b.n	8001f44 <fe_invert+0x38>
        fe_sq(t0, t0);
 8001f2a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f2e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 f98e 	bl	8005256 <fe_sq>
    for (i = 1; i < 1; ++i) {
 8001f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	ddee      	ble.n	8001f2a <fe_invert+0x1e>
    }

    fe_sq(t1, t0);
 8001f4c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 f97d 	bl	8005256 <fe_sq>

    for (i = 1; i < 2; ++i) {
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f62:	e00c      	b.n	8001f7e <fe_invert+0x72>
        fe_sq(t1, t1);
 8001f64:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 f971 	bl	8005256 <fe_sq>
    for (i = 1; i < 2; ++i) {
 8001f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	ddee      	ble.n	8001f64 <fe_invert+0x58>
    }

    fe_mul(t1, z, t1);
 8001f86:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f8e:	6839      	ldr	r1, [r7, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fa51 	bl	8002438 <fe_mul>
    fe_mul(t0, t0, t1);
 8001f96:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f9a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001f9e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fa48 	bl	8002438 <fe_mul>
    fe_sq(t2, t0);
 8001fa8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001fac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 f94f 	bl	8005256 <fe_sq>

    for (i = 1; i < 1; ++i) {
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001fbe:	e00c      	b.n	8001fda <fe_invert+0xce>
        fe_sq(t2, t2);
 8001fc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 f943 	bl	8005256 <fe_sq>
    for (i = 1; i < 1; ++i) {
 8001fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	ddee      	ble.n	8001fc0 <fe_invert+0xb4>
    }

    fe_mul(t1, t1, t2);
 8001fe2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fe6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001fea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fa22 	bl	8002438 <fe_mul>
    fe_sq(t2, t1);
 8001ff4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ff8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 f929 	bl	8005256 <fe_sq>

    for (i = 1; i < 5; ++i) {
 8002004:	2301      	movs	r3, #1
 8002006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800200a:	e00c      	b.n	8002026 <fe_invert+0x11a>
        fe_sq(t2, t2);
 800200c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002010:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f003 f91d 	bl	8005256 <fe_sq>
    for (i = 1; i < 5; ++i) {
 800201c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002020:	3301      	adds	r3, #1
 8002022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800202a:	2b04      	cmp	r3, #4
 800202c:	ddee      	ble.n	800200c <fe_invert+0x100>
    }

    fe_mul(t1, t2, t1);
 800202e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002032:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002036:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f9fc 	bl	8002438 <fe_mul>
    fe_sq(t2, t1);
 8002040:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002044:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f003 f903 	bl	8005256 <fe_sq>

    for (i = 1; i < 10; ++i) {
 8002050:	2301      	movs	r3, #1
 8002052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002056:	e00c      	b.n	8002072 <fe_invert+0x166>
        fe_sq(t2, t2);
 8002058:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800205c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f003 f8f7 	bl	8005256 <fe_sq>
    for (i = 1; i < 10; ++i) {
 8002068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800206c:	3301      	adds	r3, #1
 800206e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002076:	2b09      	cmp	r3, #9
 8002078:	ddee      	ble.n	8002058 <fe_invert+0x14c>
    }

    fe_mul(t2, t2, t1);
 800207a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800207e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002082:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f9d6 	bl	8002438 <fe_mul>
    fe_sq(t3, t2);
 800208c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f003 f8dd 	bl	8005256 <fe_sq>

    for (i = 1; i < 20; ++i) {
 800209c:	2301      	movs	r3, #1
 800209e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020a2:	e00c      	b.n	80020be <fe_invert+0x1b2>
        fe_sq(t3, t3);
 80020a4:	f107 020c 	add.w	r2, r7, #12
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 f8d1 	bl	8005256 <fe_sq>
    for (i = 1; i < 20; ++i) {
 80020b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020b8:	3301      	adds	r3, #1
 80020ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020c2:	2b13      	cmp	r3, #19
 80020c4:	ddee      	ble.n	80020a4 <fe_invert+0x198>
    }

    fe_mul(t2, t3, t2);
 80020c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80020ca:	f107 010c 	add.w	r1, r7, #12
 80020ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f9b0 	bl	8002438 <fe_mul>
    fe_sq(t2, t2);
 80020d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80020dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 f8b7 	bl	8005256 <fe_sq>

    for (i = 1; i < 10; ++i) {
 80020e8:	2301      	movs	r3, #1
 80020ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020ee:	e00c      	b.n	800210a <fe_invert+0x1fe>
        fe_sq(t2, t2);
 80020f0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80020f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 f8ab 	bl	8005256 <fe_sq>
    for (i = 1; i < 10; ++i) {
 8002100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002104:	3301      	adds	r3, #1
 8002106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800210a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800210e:	2b09      	cmp	r3, #9
 8002110:	ddee      	ble.n	80020f0 <fe_invert+0x1e4>
    }

    fe_mul(t1, t2, t1);
 8002112:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002116:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800211a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f98a 	bl	8002438 <fe_mul>
    fe_sq(t2, t1);
 8002124:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002128:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f003 f891 	bl	8005256 <fe_sq>

    for (i = 1; i < 50; ++i) {
 8002134:	2301      	movs	r3, #1
 8002136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800213a:	e00c      	b.n	8002156 <fe_invert+0x24a>
        fe_sq(t2, t2);
 800213c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002140:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f003 f885 	bl	8005256 <fe_sq>
    for (i = 1; i < 50; ++i) {
 800214c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002150:	3301      	adds	r3, #1
 8002152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800215a:	2b31      	cmp	r3, #49	; 0x31
 800215c:	ddee      	ble.n	800213c <fe_invert+0x230>
    }

    fe_mul(t2, t2, t1);
 800215e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002162:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002166:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f964 	bl	8002438 <fe_mul>
    fe_sq(t3, t2);
 8002170:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f003 f86b 	bl	8005256 <fe_sq>

    for (i = 1; i < 100; ++i) {
 8002180:	2301      	movs	r3, #1
 8002182:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002186:	e00c      	b.n	80021a2 <fe_invert+0x296>
        fe_sq(t3, t3);
 8002188:	f107 020c 	add.w	r2, r7, #12
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f003 f85f 	bl	8005256 <fe_sq>
    for (i = 1; i < 100; ++i) {
 8002198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800219c:	3301      	adds	r3, #1
 800219e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80021a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021a6:	2b63      	cmp	r3, #99	; 0x63
 80021a8:	ddee      	ble.n	8002188 <fe_invert+0x27c>
    }

    fe_mul(t2, t3, t2);
 80021aa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021ae:	f107 010c 	add.w	r1, r7, #12
 80021b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f93e 	bl	8002438 <fe_mul>
    fe_sq(t2, t2);
 80021bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 f845 	bl	8005256 <fe_sq>

    for (i = 1; i < 50; ++i) {
 80021cc:	2301      	movs	r3, #1
 80021ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80021d2:	e00c      	b.n	80021ee <fe_invert+0x2e2>
        fe_sq(t2, t2);
 80021d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80021d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 f839 	bl	8005256 <fe_sq>
    for (i = 1; i < 50; ++i) {
 80021e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021e8:	3301      	adds	r3, #1
 80021ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80021ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021f2:	2b31      	cmp	r3, #49	; 0x31
 80021f4:	ddee      	ble.n	80021d4 <fe_invert+0x2c8>
    }

    fe_mul(t1, t2, t1);
 80021f6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80021fa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80021fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f918 	bl	8002438 <fe_mul>
    fe_sq(t1, t1);
 8002208:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800220c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f003 f81f 	bl	8005256 <fe_sq>

    for (i = 1; i < 5; ++i) {
 8002218:	2301      	movs	r3, #1
 800221a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800221e:	e00c      	b.n	800223a <fe_invert+0x32e>
        fe_sq(t1, t1);
 8002220:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002224:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f003 f813 	bl	8005256 <fe_sq>
    for (i = 1; i < 5; ++i) {
 8002230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002234:	3301      	adds	r3, #1
 8002236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800223a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800223e:	2b04      	cmp	r3, #4
 8002240:	ddee      	ble.n	8002220 <fe_invert+0x314>
    }

    fe_mul(out, t1, t0);
 8002242:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002246:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800224a:	4619      	mov	r1, r3
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f8f3 	bl	8002438 <fe_mul>
}
 8002252:	bf00      	nop
 8002254:	37b0      	adds	r7, #176	; 0xb0
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <fe_isnegative>:

    Preconditions:
       |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

int fe_isnegative(const fe f) {
 800225a:	b580      	push	{r7, lr}
 800225c:	b08a      	sub	sp, #40	; 0x28
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
    unsigned char s[32];

    fe_tobytes(s, f);
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4618      	mov	r0, r3
 800226a:	f006 f8e2 	bl	8008432 <fe_tobytes>
    
    return s[0] & 1;
 800226e:	7a3b      	ldrb	r3, [r7, #8]
 8002270:	f003 0301 	and.w	r3, r3, #1
}
 8002274:	4618      	mov	r0, r3
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <fe_isnonzero>:

    Preconditions:
       |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

int fe_isnonzero(const fe f) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    unsigned char s[32];
    unsigned char r;

    fe_tobytes(s, f);
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4618      	mov	r0, r3
 800228c:	f006 f8d1 	bl	8008432 <fe_tobytes>

    r = s[0];
 8002290:	7b3b      	ldrb	r3, [r7, #12]
 8002292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    #define F(i) r |= s[i]
    F(1);
 8002296:	7b7a      	ldrb	r2, [r7, #13]
 8002298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800229c:	4313      	orrs	r3, r2
 800229e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(2);
 80022a2:	7bba      	ldrb	r2, [r7, #14]
 80022a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(3);
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(4);
 80022ba:	7c3a      	ldrb	r2, [r7, #16]
 80022bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(5);
 80022c6:	7c7a      	ldrb	r2, [r7, #17]
 80022c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(6);
 80022d2:	7cba      	ldrb	r2, [r7, #18]
 80022d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022d8:	4313      	orrs	r3, r2
 80022da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(7);
 80022de:	7cfa      	ldrb	r2, [r7, #19]
 80022e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(8);
 80022ea:	7d3a      	ldrb	r2, [r7, #20]
 80022ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(9);
 80022f6:	7d7a      	ldrb	r2, [r7, #21]
 80022f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(10);
 8002302:	7dba      	ldrb	r2, [r7, #22]
 8002304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002308:	4313      	orrs	r3, r2
 800230a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(11);
 800230e:	7dfa      	ldrb	r2, [r7, #23]
 8002310:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002314:	4313      	orrs	r3, r2
 8002316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(12);
 800231a:	7e3a      	ldrb	r2, [r7, #24]
 800231c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002320:	4313      	orrs	r3, r2
 8002322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(13);
 8002326:	7e7a      	ldrb	r2, [r7, #25]
 8002328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800232c:	4313      	orrs	r3, r2
 800232e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(14);
 8002332:	7eba      	ldrb	r2, [r7, #26]
 8002334:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002338:	4313      	orrs	r3, r2
 800233a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(15);
 800233e:	7efa      	ldrb	r2, [r7, #27]
 8002340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002344:	4313      	orrs	r3, r2
 8002346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(16);
 800234a:	7f3a      	ldrb	r2, [r7, #28]
 800234c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002350:	4313      	orrs	r3, r2
 8002352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(17);
 8002356:	7f7a      	ldrb	r2, [r7, #29]
 8002358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800235c:	4313      	orrs	r3, r2
 800235e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(18);
 8002362:	7fba      	ldrb	r2, [r7, #30]
 8002364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002368:	4313      	orrs	r3, r2
 800236a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(19);
 800236e:	7ffa      	ldrb	r2, [r7, #31]
 8002370:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002374:	4313      	orrs	r3, r2
 8002376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(20);
 800237a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800237e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002382:	4313      	orrs	r3, r2
 8002384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(21);
 8002388:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800238c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002390:	4313      	orrs	r3, r2
 8002392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(22);
 8002396:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800239a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800239e:	4313      	orrs	r3, r2
 80023a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(23);
 80023a4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(24);
 80023b2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80023b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(25);
 80023c0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80023c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(26);
 80023ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80023d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(27);
 80023dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80023e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(28);
 80023ea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80023ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(29);
 80023f8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80023fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002400:	4313      	orrs	r3, r2
 8002402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(30);
 8002406:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800240a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800240e:	4313      	orrs	r3, r2
 8002410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(31);
 8002414:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800241c:	4313      	orrs	r3, r2
 800241e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    #undef F

    return r != 0;
 8002422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002426:	2b00      	cmp	r3, #0
 8002428:	bf14      	ite	ne
 800242a:	2301      	movne	r3, #1
 800242c:	2300      	moveq	r3, #0
 800242e:	b2db      	uxtb	r3, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	3730      	adds	r7, #48	; 0x30
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <fe_mul>:
    Can get away with 11 carries, but then data flow is much deeper.

    With tighter constraints on inputs can squeeze carries into int32.
*/

void fe_mul(fe h, const fe f, const fe g) {
 8002438:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800243c:	f6ad 0d4c 	subw	sp, sp, #2124	; 0x84c
 8002440:	af00      	add	r7, sp, #0
 8002442:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8002446:	6018      	str	r0, [r3, #0]
 8002448:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800244c:	6019      	str	r1, [r3, #0]
 800244e:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002452:	601a      	str	r2, [r3, #0]
    int32_t f0 = f[0];
 8002454:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
    int32_t f1 = f[1];
 8002460:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
    int32_t f2 = f[2];
 800246c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
    int32_t f3 = f[3];
 8002478:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
    int32_t f4 = f[4];
 8002484:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
    int32_t f5 = f[5];
 8002490:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
    int32_t f6 = f[6];
 800249c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
    int32_t f7 = f[7];
 80024a8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
    int32_t f8 = f[8];
 80024b4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
    int32_t f9 = f[9];
 80024c0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
    int32_t g0 = g[0];
 80024cc:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
    int32_t g1 = g[1];
 80024d8:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
    int32_t g2 = g[2];
 80024e4:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
    int32_t g3 = g[3];
 80024f0:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
    int32_t g4 = g[4];
 80024fc:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
    int32_t g5 = g[5];
 8002508:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    int32_t g6 = g[6];
 8002514:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
    int32_t g7 = g[7];
 8002520:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
    int32_t g8 = g[8];
 800252c:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
    int32_t g9 = g[9];
 8002538:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
    int32_t g1_19 = 19 * g1; /* 1.959375*2^29 */
 8002544:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
    int32_t g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 8002556:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
    int32_t g3_19 = 19 * g3;
 8002568:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
    int32_t g4_19 = 19 * g4;
 800257a:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
    int32_t g5_19 = 19 * g5;
 800258c:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
    int32_t g6_19 = 19 * g6;
 800259e:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0
    int32_t g7_19 = 19 * g7;
 80025b0:	f8d7 2800 	ldr.w	r2, [r7, #2048]	; 0x800
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
    int32_t g8_19 = 19 * g8;
 80025c2:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
    int32_t g9_19 = 19 * g9;
 80025d4:	f8d7 27f8 	ldr.w	r2, [r7, #2040]	; 0x7f8
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
    int32_t f1_2 = 2 * f1;
 80025e6:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
    int32_t f3_2 = 2 * f3;
 80025f0:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
    int32_t f5_2 = 2 * f5;
 80025fa:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
    int32_t f7_2 = 2 * f7;
 8002604:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
    int32_t f9_2 = 2 * f9;
 800260e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
    int64_t f0g0    = f0   * (int64_t) g0;
 8002618:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 800261c:	4618      	mov	r0, r3
 800261e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002622:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002626:	461a      	mov	r2, r3
 8002628:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800262c:	fb02 f501 	mul.w	r5, r2, r1
 8002630:	fb00 f403 	mul.w	r4, r0, r3
 8002634:	442c      	add	r4, r5
 8002636:	fba0 2302 	umull	r2, r3, r0, r2
 800263a:	18e1      	adds	r1, r4, r3
 800263c:	460b      	mov	r3, r1
 800263e:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8002642:	e9c1 2300 	strd	r2, r3, [r1]
 8002646:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 800264a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g1    = f0   * (int64_t) g1;
 800264e:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002652:	4618      	mov	r0, r3
 8002654:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002658:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800265c:	461a      	mov	r2, r3
 800265e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002662:	fb02 f501 	mul.w	r5, r2, r1
 8002666:	fb00 f403 	mul.w	r4, r0, r3
 800266a:	442c      	add	r4, r5
 800266c:	fba0 2302 	umull	r2, r3, r0, r2
 8002670:	18e1      	adds	r1, r4, r3
 8002672:	460b      	mov	r3, r1
 8002674:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 8002678:	e9c1 2300 	strd	r2, r3, [r1]
 800267c:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 8002680:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g2    = f0   * (int64_t) g2;
 8002684:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002688:	4618      	mov	r0, r3
 800268a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800268e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002692:	461a      	mov	r2, r3
 8002694:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002698:	fb02 f501 	mul.w	r5, r2, r1
 800269c:	fb00 f403 	mul.w	r4, r0, r3
 80026a0:	442c      	add	r4, r5
 80026a2:	fba0 2302 	umull	r2, r3, r0, r2
 80026a6:	18e1      	adds	r1, r4, r3
 80026a8:	460b      	mov	r3, r1
 80026aa:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 80026ae:	e9c1 2300 	strd	r2, r3, [r1]
 80026b2:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 80026b6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g3    = f0   * (int64_t) g3;
 80026ba:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80026be:	4618      	mov	r0, r3
 80026c0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80026c4:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80026c8:	461a      	mov	r2, r3
 80026ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80026ce:	fb02 f501 	mul.w	r5, r2, r1
 80026d2:	fb00 f403 	mul.w	r4, r0, r3
 80026d6:	442c      	add	r4, r5
 80026d8:	fba0 2302 	umull	r2, r3, r0, r2
 80026dc:	18e1      	adds	r1, r4, r3
 80026de:	460b      	mov	r3, r1
 80026e0:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 80026e4:	e9c1 2300 	strd	r2, r3, [r1]
 80026e8:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 80026ec:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g4    = f0   * (int64_t) g4;
 80026f0:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80026f4:	4618      	mov	r0, r3
 80026f6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80026fa:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80026fe:	461a      	mov	r2, r3
 8002700:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002704:	fb02 f501 	mul.w	r5, r2, r1
 8002708:	fb00 f403 	mul.w	r4, r0, r3
 800270c:	442c      	add	r4, r5
 800270e:	fba0 2302 	umull	r2, r3, r0, r2
 8002712:	18e1      	adds	r1, r4, r3
 8002714:	460b      	mov	r3, r1
 8002716:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 800271a:	e9c1 2300 	strd	r2, r3, [r1]
 800271e:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 8002722:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g5    = f0   * (int64_t) g5;
 8002726:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 800272a:	4618      	mov	r0, r3
 800272c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002730:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002734:	461a      	mov	r2, r3
 8002736:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800273a:	fb02 f501 	mul.w	r5, r2, r1
 800273e:	fb00 f403 	mul.w	r4, r0, r3
 8002742:	442c      	add	r4, r5
 8002744:	fba0 2302 	umull	r2, r3, r0, r2
 8002748:	18e1      	adds	r1, r4, r3
 800274a:	460b      	mov	r3, r1
 800274c:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 8002750:	e9c1 2300 	strd	r2, r3, [r1]
 8002754:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 8002758:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g6    = f0   * (int64_t) g6;
 800275c:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002760:	4618      	mov	r0, r3
 8002762:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002766:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800276a:	461a      	mov	r2, r3
 800276c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002770:	fb02 f501 	mul.w	r5, r2, r1
 8002774:	fb00 f403 	mul.w	r4, r0, r3
 8002778:	442c      	add	r4, r5
 800277a:	fba0 2302 	umull	r2, r3, r0, r2
 800277e:	18e1      	adds	r1, r4, r3
 8002780:	460b      	mov	r3, r1
 8002782:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 8002786:	e9c1 2300 	strd	r2, r3, [r1]
 800278a:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 800278e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g7    = f0   * (int64_t) g7;
 8002792:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002796:	4618      	mov	r0, r3
 8002798:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800279c:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 80027a0:	461a      	mov	r2, r3
 80027a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80027a6:	fb02 f501 	mul.w	r5, r2, r1
 80027aa:	fb00 f403 	mul.w	r4, r0, r3
 80027ae:	442c      	add	r4, r5
 80027b0:	fba0 2302 	umull	r2, r3, r0, r2
 80027b4:	18e1      	adds	r1, r4, r3
 80027b6:	460b      	mov	r3, r1
 80027b8:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 80027bc:	e9c1 2300 	strd	r2, r3, [r1]
 80027c0:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 80027c4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g8    = f0   * (int64_t) g8;
 80027c8:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80027cc:	4618      	mov	r0, r3
 80027ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80027d2:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 80027d6:	461a      	mov	r2, r3
 80027d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80027dc:	fb02 f501 	mul.w	r5, r2, r1
 80027e0:	fb00 f403 	mul.w	r4, r0, r3
 80027e4:	442c      	add	r4, r5
 80027e6:	fba0 2302 	umull	r2, r3, r0, r2
 80027ea:	18e1      	adds	r1, r4, r3
 80027ec:	460b      	mov	r3, r1
 80027ee:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 80027f2:	e9c1 2300 	strd	r2, r3, [r1]
 80027f6:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 80027fa:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g9    = f0   * (int64_t) g9;
 80027fe:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002802:	4618      	mov	r0, r3
 8002804:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002808:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 800280c:	461a      	mov	r2, r3
 800280e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002812:	fb02 f501 	mul.w	r5, r2, r1
 8002816:	fb00 f403 	mul.w	r4, r0, r3
 800281a:	442c      	add	r4, r5
 800281c:	fba0 2302 	umull	r2, r3, r0, r2
 8002820:	18e1      	adds	r1, r4, r3
 8002822:	460b      	mov	r3, r1
 8002824:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8002828:	e9c1 2300 	strd	r2, r3, [r1]
 800282c:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8002830:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g0    = f1   * (int64_t) g0;
 8002834:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002838:	4618      	mov	r0, r3
 800283a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800283e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002842:	461a      	mov	r2, r3
 8002844:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002848:	fb02 f501 	mul.w	r5, r2, r1
 800284c:	fb00 f403 	mul.w	r4, r0, r3
 8002850:	442c      	add	r4, r5
 8002852:	fba0 2302 	umull	r2, r3, r0, r2
 8002856:	18e1      	adds	r1, r4, r3
 8002858:	460b      	mov	r3, r1
 800285a:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800285e:	e9c1 2300 	strd	r2, r3, [r1]
 8002862:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8002866:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g1_2  = f1_2 * (int64_t) g1;
 800286a:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 800286e:	4618      	mov	r0, r3
 8002870:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002874:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002878:	461a      	mov	r2, r3
 800287a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800287e:	fb02 f501 	mul.w	r5, r2, r1
 8002882:	fb00 f403 	mul.w	r4, r0, r3
 8002886:	442c      	add	r4, r5
 8002888:	fba0 2302 	umull	r2, r3, r0, r2
 800288c:	18e1      	adds	r1, r4, r3
 800288e:	460b      	mov	r3, r1
 8002890:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 8002894:	e9c1 2300 	strd	r2, r3, [r1]
 8002898:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 800289c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g2    = f1   * (int64_t) g2;
 80028a0:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80028a4:	4618      	mov	r0, r3
 80028a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80028aa:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80028ae:	461a      	mov	r2, r3
 80028b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028b4:	fb02 f501 	mul.w	r5, r2, r1
 80028b8:	fb00 f403 	mul.w	r4, r0, r3
 80028bc:	442c      	add	r4, r5
 80028be:	fba0 2302 	umull	r2, r3, r0, r2
 80028c2:	18e1      	adds	r1, r4, r3
 80028c4:	460b      	mov	r3, r1
 80028c6:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 80028ca:	e9c1 2300 	strd	r2, r3, [r1]
 80028ce:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 80028d2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g3_2  = f1_2 * (int64_t) g3;
 80028d6:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 80028da:	4618      	mov	r0, r3
 80028dc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80028e0:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80028e4:	461a      	mov	r2, r3
 80028e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028ea:	fb02 f501 	mul.w	r5, r2, r1
 80028ee:	fb00 f403 	mul.w	r4, r0, r3
 80028f2:	442c      	add	r4, r5
 80028f4:	fba0 2302 	umull	r2, r3, r0, r2
 80028f8:	18e1      	adds	r1, r4, r3
 80028fa:	460b      	mov	r3, r1
 80028fc:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 8002900:	e9c1 2300 	strd	r2, r3, [r1]
 8002904:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 8002908:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g4    = f1   * (int64_t) g4;
 800290c:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002910:	4618      	mov	r0, r3
 8002912:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002916:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800291a:	461a      	mov	r2, r3
 800291c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002920:	fb02 f501 	mul.w	r5, r2, r1
 8002924:	fb00 f403 	mul.w	r4, r0, r3
 8002928:	442c      	add	r4, r5
 800292a:	fba0 2302 	umull	r2, r3, r0, r2
 800292e:	18e1      	adds	r1, r4, r3
 8002930:	460b      	mov	r3, r1
 8002932:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 8002936:	e9c1 2300 	strd	r2, r3, [r1]
 800293a:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 800293e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g5_2  = f1_2 * (int64_t) g5;
 8002942:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8002946:	4618      	mov	r0, r3
 8002948:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800294c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002950:	461a      	mov	r2, r3
 8002952:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002956:	fb02 f501 	mul.w	r5, r2, r1
 800295a:	fb00 f403 	mul.w	r4, r0, r3
 800295e:	442c      	add	r4, r5
 8002960:	fba0 2302 	umull	r2, r3, r0, r2
 8002964:	18e1      	adds	r1, r4, r3
 8002966:	460b      	mov	r3, r1
 8002968:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 800296c:	e9c1 2300 	strd	r2, r3, [r1]
 8002970:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 8002974:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g6    = f1   * (int64_t) g6;
 8002978:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 800297c:	4618      	mov	r0, r3
 800297e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002982:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002986:	461a      	mov	r2, r3
 8002988:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800298c:	fb02 f501 	mul.w	r5, r2, r1
 8002990:	fb00 f403 	mul.w	r4, r0, r3
 8002994:	442c      	add	r4, r5
 8002996:	fba0 2302 	umull	r2, r3, r0, r2
 800299a:	18e1      	adds	r1, r4, r3
 800299c:	460b      	mov	r3, r1
 800299e:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 80029a2:	e9c1 2300 	strd	r2, r3, [r1]
 80029a6:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 80029aa:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g7_2  = f1_2 * (int64_t) g7;
 80029ae:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 80029b2:	4618      	mov	r0, r3
 80029b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80029b8:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 80029bc:	461a      	mov	r2, r3
 80029be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80029c2:	fb02 f501 	mul.w	r5, r2, r1
 80029c6:	fb00 f403 	mul.w	r4, r0, r3
 80029ca:	442c      	add	r4, r5
 80029cc:	fba0 2302 	umull	r2, r3, r0, r2
 80029d0:	18e1      	adds	r1, r4, r3
 80029d2:	460b      	mov	r3, r1
 80029d4:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 80029d8:	e9c1 2300 	strd	r2, r3, [r1]
 80029dc:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 80029e0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g8    = f1   * (int64_t) g8;
 80029e4:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80029e8:	4618      	mov	r0, r3
 80029ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80029ee:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 80029f2:	461a      	mov	r2, r3
 80029f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80029f8:	fb02 f501 	mul.w	r5, r2, r1
 80029fc:	fb00 f403 	mul.w	r4, r0, r3
 8002a00:	442c      	add	r4, r5
 8002a02:	fba0 2302 	umull	r2, r3, r0, r2
 8002a06:	18e1      	adds	r1, r4, r3
 8002a08:	460b      	mov	r3, r1
 8002a0a:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 8002a0e:	e9c1 2300 	strd	r2, r3, [r1]
 8002a12:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 8002a16:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g9_38 = f1_2 * (int64_t) g9_19;
 8002a1a:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002a24:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8002a28:	461a      	mov	r2, r3
 8002a2a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a2e:	fb02 f501 	mul.w	r5, r2, r1
 8002a32:	fb00 f403 	mul.w	r4, r0, r3
 8002a36:	442c      	add	r4, r5
 8002a38:	fba0 2302 	umull	r2, r3, r0, r2
 8002a3c:	18e1      	adds	r1, r4, r3
 8002a3e:	460b      	mov	r3, r1
 8002a40:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8002a44:	e9c1 2300 	strd	r2, r3, [r1]
 8002a48:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8002a4c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g0    = f2   * (int64_t) g0;
 8002a50:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002a54:	4618      	mov	r0, r3
 8002a56:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002a5a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002a5e:	461a      	mov	r2, r3
 8002a60:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a64:	fb02 f501 	mul.w	r5, r2, r1
 8002a68:	fb00 f403 	mul.w	r4, r0, r3
 8002a6c:	442c      	add	r4, r5
 8002a6e:	fba0 2302 	umull	r2, r3, r0, r2
 8002a72:	18e1      	adds	r1, r4, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 8002a7a:	e9c1 2300 	strd	r2, r3, [r1]
 8002a7e:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 8002a82:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g1    = f2   * (int64_t) g1;
 8002a86:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002a90:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002a94:	461a      	mov	r2, r3
 8002a96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a9a:	fb02 f501 	mul.w	r5, r2, r1
 8002a9e:	fb00 f403 	mul.w	r4, r0, r3
 8002aa2:	442c      	add	r4, r5
 8002aa4:	fba0 2302 	umull	r2, r3, r0, r2
 8002aa8:	18e1      	adds	r1, r4, r3
 8002aaa:	460b      	mov	r3, r1
 8002aac:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 8002ab0:	e9c1 2300 	strd	r2, r3, [r1]
 8002ab4:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 8002ab8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g2    = f2   * (int64_t) g2;
 8002abc:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002ac6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002aca:	461a      	mov	r2, r3
 8002acc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ad0:	fb02 f501 	mul.w	r5, r2, r1
 8002ad4:	fb00 f403 	mul.w	r4, r0, r3
 8002ad8:	442c      	add	r4, r5
 8002ada:	fba0 2302 	umull	r2, r3, r0, r2
 8002ade:	18e1      	adds	r1, r4, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8002ae6:	e9c1 2300 	strd	r2, r3, [r1]
 8002aea:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8002aee:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g3    = f2   * (int64_t) g3;
 8002af2:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002af6:	4618      	mov	r0, r3
 8002af8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002afc:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8002b00:	461a      	mov	r2, r3
 8002b02:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b06:	fb02 f501 	mul.w	r5, r2, r1
 8002b0a:	fb00 f403 	mul.w	r4, r0, r3
 8002b0e:	442c      	add	r4, r5
 8002b10:	fba0 2302 	umull	r2, r3, r0, r2
 8002b14:	18e1      	adds	r1, r4, r3
 8002b16:	460b      	mov	r3, r1
 8002b18:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 8002b1c:	e9c1 2300 	strd	r2, r3, [r1]
 8002b20:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 8002b24:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g4    = f2   * (int64_t) g4;
 8002b28:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002b32:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002b36:	461a      	mov	r2, r3
 8002b38:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b3c:	fb02 f501 	mul.w	r5, r2, r1
 8002b40:	fb00 f403 	mul.w	r4, r0, r3
 8002b44:	442c      	add	r4, r5
 8002b46:	fba0 2302 	umull	r2, r3, r0, r2
 8002b4a:	18e1      	adds	r1, r4, r3
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 8002b52:	e9c1 2300 	strd	r2, r3, [r1]
 8002b56:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 8002b5a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g5    = f2   * (int64_t) g5;
 8002b5e:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002b62:	4618      	mov	r0, r3
 8002b64:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002b68:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b72:	fb02 f501 	mul.w	r5, r2, r1
 8002b76:	fb00 f403 	mul.w	r4, r0, r3
 8002b7a:	442c      	add	r4, r5
 8002b7c:	fba0 2302 	umull	r2, r3, r0, r2
 8002b80:	18e1      	adds	r1, r4, r3
 8002b82:	460b      	mov	r3, r1
 8002b84:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8002b88:	e9c1 2300 	strd	r2, r3, [r1]
 8002b8c:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8002b90:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g6    = f2   * (int64_t) g6;
 8002b94:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002b98:	4618      	mov	r0, r3
 8002b9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002b9e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ba8:	fb02 f501 	mul.w	r5, r2, r1
 8002bac:	fb00 f403 	mul.w	r4, r0, r3
 8002bb0:	442c      	add	r4, r5
 8002bb2:	fba0 2302 	umull	r2, r3, r0, r2
 8002bb6:	18e1      	adds	r1, r4, r3
 8002bb8:	460b      	mov	r3, r1
 8002bba:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 8002bbe:	e9c1 2300 	strd	r2, r3, [r1]
 8002bc2:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 8002bc6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g7    = f2   * (int64_t) g7;
 8002bca:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002bce:	4618      	mov	r0, r3
 8002bd0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002bd4:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8002bd8:	461a      	mov	r2, r3
 8002bda:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002bde:	fb02 f501 	mul.w	r5, r2, r1
 8002be2:	fb00 f403 	mul.w	r4, r0, r3
 8002be6:	442c      	add	r4, r5
 8002be8:	fba0 2302 	umull	r2, r3, r0, r2
 8002bec:	18e1      	adds	r1, r4, r3
 8002bee:	460b      	mov	r3, r1
 8002bf0:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8002bf4:	e9c1 2300 	strd	r2, r3, [r1]
 8002bf8:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8002bfc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g8_19 = f2   * (int64_t) g8_19;
 8002c00:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002c04:	4618      	mov	r0, r3
 8002c06:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c0a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8002c0e:	461a      	mov	r2, r3
 8002c10:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c14:	fb02 f501 	mul.w	r5, r2, r1
 8002c18:	fb00 f403 	mul.w	r4, r0, r3
 8002c1c:	442c      	add	r4, r5
 8002c1e:	fba0 2302 	umull	r2, r3, r0, r2
 8002c22:	18e1      	adds	r1, r4, r3
 8002c24:	460b      	mov	r3, r1
 8002c26:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8002c2a:	e9c1 2300 	strd	r2, r3, [r1]
 8002c2e:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8002c32:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g9_19 = f2   * (int64_t) g9_19;
 8002c36:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c40:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8002c44:	461a      	mov	r2, r3
 8002c46:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c4a:	fb02 f501 	mul.w	r5, r2, r1
 8002c4e:	fb00 f403 	mul.w	r4, r0, r3
 8002c52:	442c      	add	r4, r5
 8002c54:	fba0 2302 	umull	r2, r3, r0, r2
 8002c58:	18e1      	adds	r1, r4, r3
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8002c60:	e9c1 2300 	strd	r2, r3, [r1]
 8002c64:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8002c68:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g0    = f3   * (int64_t) g0;
 8002c6c:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8002c70:	4618      	mov	r0, r3
 8002c72:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c76:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c80:	fb02 f501 	mul.w	r5, r2, r1
 8002c84:	fb00 f403 	mul.w	r4, r0, r3
 8002c88:	442c      	add	r4, r5
 8002c8a:	fba0 2302 	umull	r2, r3, r0, r2
 8002c8e:	18e1      	adds	r1, r4, r3
 8002c90:	460b      	mov	r3, r1
 8002c92:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 8002c96:	e9c1 2300 	strd	r2, r3, [r1]
 8002c9a:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 8002c9e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g1_2  = f3_2 * (int64_t) g1;
 8002ca2:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002cac:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002cb6:	fb02 f501 	mul.w	r5, r2, r1
 8002cba:	fb00 f403 	mul.w	r4, r0, r3
 8002cbe:	442c      	add	r4, r5
 8002cc0:	fba0 2302 	umull	r2, r3, r0, r2
 8002cc4:	18e1      	adds	r1, r4, r3
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 8002ccc:	e9c1 2300 	strd	r2, r3, [r1]
 8002cd0:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 8002cd4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g2    = f3   * (int64_t) g2;
 8002cd8:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8002cdc:	4618      	mov	r0, r3
 8002cde:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002ce2:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002cec:	fb02 f501 	mul.w	r5, r2, r1
 8002cf0:	fb00 f403 	mul.w	r4, r0, r3
 8002cf4:	442c      	add	r4, r5
 8002cf6:	fba0 2302 	umull	r2, r3, r0, r2
 8002cfa:	18e1      	adds	r1, r4, r3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8002d02:	e9c1 2300 	strd	r2, r3, [r1]
 8002d06:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8002d0a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g3_2  = f3_2 * (int64_t) g3;
 8002d0e:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8002d12:	4618      	mov	r0, r3
 8002d14:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002d18:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d22:	fb02 f501 	mul.w	r5, r2, r1
 8002d26:	fb00 f403 	mul.w	r4, r0, r3
 8002d2a:	442c      	add	r4, r5
 8002d2c:	fba0 2302 	umull	r2, r3, r0, r2
 8002d30:	18e1      	adds	r1, r4, r3
 8002d32:	460b      	mov	r3, r1
 8002d34:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8002d38:	e9c1 2300 	strd	r2, r3, [r1]
 8002d3c:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8002d40:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g4    = f3   * (int64_t) g4;
 8002d44:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8002d48:	4618      	mov	r0, r3
 8002d4a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002d4e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002d52:	461a      	mov	r2, r3
 8002d54:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d58:	fb02 f501 	mul.w	r5, r2, r1
 8002d5c:	fb00 f403 	mul.w	r4, r0, r3
 8002d60:	442c      	add	r4, r5
 8002d62:	fba0 2302 	umull	r2, r3, r0, r2
 8002d66:	18e1      	adds	r1, r4, r3
 8002d68:	460b      	mov	r3, r1
 8002d6a:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 8002d6e:	e9c1 2300 	strd	r2, r3, [r1]
 8002d72:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 8002d76:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g5_2  = f3_2 * (int64_t) g5;
 8002d7a:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8002d7e:	4618      	mov	r0, r3
 8002d80:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002d84:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002d88:	461a      	mov	r2, r3
 8002d8a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d8e:	fb02 f501 	mul.w	r5, r2, r1
 8002d92:	fb00 f403 	mul.w	r4, r0, r3
 8002d96:	442c      	add	r4, r5
 8002d98:	fba0 2302 	umull	r2, r3, r0, r2
 8002d9c:	18e1      	adds	r1, r4, r3
 8002d9e:	460b      	mov	r3, r1
 8002da0:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8002da4:	e9c1 2300 	strd	r2, r3, [r1]
 8002da8:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8002dac:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g6    = f3   * (int64_t) g6;
 8002db0:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8002db4:	4618      	mov	r0, r3
 8002db6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002dba:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002dc4:	fb02 f501 	mul.w	r5, r2, r1
 8002dc8:	fb00 f403 	mul.w	r4, r0, r3
 8002dcc:	442c      	add	r4, r5
 8002dce:	fba0 2302 	umull	r2, r3, r0, r2
 8002dd2:	18e1      	adds	r1, r4, r3
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8002dda:	e9c1 2300 	strd	r2, r3, [r1]
 8002dde:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8002de2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g7_38 = f3_2 * (int64_t) g7_19;
 8002de6:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8002dea:	4618      	mov	r0, r3
 8002dec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002df0:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8002df4:	461a      	mov	r2, r3
 8002df6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002dfa:	fb02 f501 	mul.w	r5, r2, r1
 8002dfe:	fb00 f403 	mul.w	r4, r0, r3
 8002e02:	442c      	add	r4, r5
 8002e04:	fba0 2302 	umull	r2, r3, r0, r2
 8002e08:	18e1      	adds	r1, r4, r3
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 8002e10:	e9c1 2300 	strd	r2, r3, [r1]
 8002e14:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 8002e18:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g8_19 = f3   * (int64_t) g8_19;
 8002e1c:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8002e20:	4618      	mov	r0, r3
 8002e22:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e26:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e30:	fb02 f501 	mul.w	r5, r2, r1
 8002e34:	fb00 f403 	mul.w	r4, r0, r3
 8002e38:	442c      	add	r4, r5
 8002e3a:	fba0 2302 	umull	r2, r3, r0, r2
 8002e3e:	18e1      	adds	r1, r4, r3
 8002e40:	460b      	mov	r3, r1
 8002e42:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8002e46:	e9c1 2300 	strd	r2, r3, [r1]
 8002e4a:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8002e4e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g9_38 = f3_2 * (int64_t) g9_19;
 8002e52:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8002e56:	4618      	mov	r0, r3
 8002e58:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e5c:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8002e60:	461a      	mov	r2, r3
 8002e62:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e66:	fb02 f501 	mul.w	r5, r2, r1
 8002e6a:	fb00 f403 	mul.w	r4, r0, r3
 8002e6e:	442c      	add	r4, r5
 8002e70:	fba0 2302 	umull	r2, r3, r0, r2
 8002e74:	18e1      	adds	r1, r4, r3
 8002e76:	460b      	mov	r3, r1
 8002e78:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 8002e7c:	e9c1 2300 	strd	r2, r3, [r1]
 8002e80:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 8002e84:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g0    = f4   * (int64_t) g0;
 8002e88:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e92:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002e96:	461a      	mov	r2, r3
 8002e98:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e9c:	fb02 f501 	mul.w	r5, r2, r1
 8002ea0:	fb00 f403 	mul.w	r4, r0, r3
 8002ea4:	442c      	add	r4, r5
 8002ea6:	fba0 2302 	umull	r2, r3, r0, r2
 8002eaa:	18e1      	adds	r1, r4, r3
 8002eac:	460b      	mov	r3, r1
 8002eae:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8002eb2:	e9c1 2300 	strd	r2, r3, [r1]
 8002eb6:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8002eba:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g1    = f4   * (int64_t) g1;
 8002ebe:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002ec8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002ecc:	461a      	mov	r2, r3
 8002ece:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ed2:	fb02 f501 	mul.w	r5, r2, r1
 8002ed6:	fb00 f403 	mul.w	r4, r0, r3
 8002eda:	442c      	add	r4, r5
 8002edc:	fba0 2302 	umull	r2, r3, r0, r2
 8002ee0:	18e1      	adds	r1, r4, r3
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8002ee8:	e9c1 2300 	strd	r2, r3, [r1]
 8002eec:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8002ef0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g2    = f4   * (int64_t) g2;
 8002ef4:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002ef8:	4618      	mov	r0, r3
 8002efa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002efe:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002f02:	461a      	mov	r2, r3
 8002f04:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f08:	fb02 f501 	mul.w	r5, r2, r1
 8002f0c:	fb00 f403 	mul.w	r4, r0, r3
 8002f10:	442c      	add	r4, r5
 8002f12:	fba0 2302 	umull	r2, r3, r0, r2
 8002f16:	18e1      	adds	r1, r4, r3
 8002f18:	460b      	mov	r3, r1
 8002f1a:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8002f1e:	e9c1 2300 	strd	r2, r3, [r1]
 8002f22:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8002f26:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g3    = f4   * (int64_t) g3;
 8002f2a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002f2e:	4618      	mov	r0, r3
 8002f30:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002f34:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8002f38:	461a      	mov	r2, r3
 8002f3a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f3e:	fb02 f501 	mul.w	r5, r2, r1
 8002f42:	fb00 f403 	mul.w	r4, r0, r3
 8002f46:	442c      	add	r4, r5
 8002f48:	fba0 2302 	umull	r2, r3, r0, r2
 8002f4c:	18e1      	adds	r1, r4, r3
 8002f4e:	460b      	mov	r3, r1
 8002f50:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8002f54:	e9c1 2300 	strd	r2, r3, [r1]
 8002f58:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8002f5c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g4    = f4   * (int64_t) g4;
 8002f60:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002f64:	4618      	mov	r0, r3
 8002f66:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002f6a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002f6e:	461a      	mov	r2, r3
 8002f70:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f74:	fb02 f501 	mul.w	r5, r2, r1
 8002f78:	fb00 f403 	mul.w	r4, r0, r3
 8002f7c:	442c      	add	r4, r5
 8002f7e:	fba0 2302 	umull	r2, r3, r0, r2
 8002f82:	18e1      	adds	r1, r4, r3
 8002f84:	460b      	mov	r3, r1
 8002f86:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8002f8a:	e9c1 2300 	strd	r2, r3, [r1]
 8002f8e:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8002f92:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g5    = f4   * (int64_t) g5;
 8002f96:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002fa0:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002faa:	fb02 f501 	mul.w	r5, r2, r1
 8002fae:	fb00 f403 	mul.w	r4, r0, r3
 8002fb2:	442c      	add	r4, r5
 8002fb4:	fba0 2302 	umull	r2, r3, r0, r2
 8002fb8:	18e1      	adds	r1, r4, r3
 8002fba:	460b      	mov	r3, r1
 8002fbc:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8002fc0:	e9c1 2300 	strd	r2, r3, [r1]
 8002fc4:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8002fc8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g6_19 = f4   * (int64_t) g6_19;
 8002fcc:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002fd6:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fe0:	fb02 f501 	mul.w	r5, r2, r1
 8002fe4:	fb00 f403 	mul.w	r4, r0, r3
 8002fe8:	442c      	add	r4, r5
 8002fea:	fba0 2302 	umull	r2, r3, r0, r2
 8002fee:	18e1      	adds	r1, r4, r3
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8002ff6:	e9c1 2300 	strd	r2, r3, [r1]
 8002ffa:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8002ffe:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g7_19 = f4   * (int64_t) g7_19;
 8003002:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8003006:	4618      	mov	r0, r3
 8003008:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800300c:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8003010:	461a      	mov	r2, r3
 8003012:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003016:	fb02 f501 	mul.w	r5, r2, r1
 800301a:	fb00 f403 	mul.w	r4, r0, r3
 800301e:	442c      	add	r4, r5
 8003020:	fba0 2302 	umull	r2, r3, r0, r2
 8003024:	18e1      	adds	r1, r4, r3
 8003026:	460b      	mov	r3, r1
 8003028:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 800302c:	e9c1 2300 	strd	r2, r3, [r1]
 8003030:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8003034:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g8_19 = f4   * (int64_t) g8_19;
 8003038:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800303c:	4618      	mov	r0, r3
 800303e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003042:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8003046:	461a      	mov	r2, r3
 8003048:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800304c:	fb02 f501 	mul.w	r5, r2, r1
 8003050:	fb00 f403 	mul.w	r4, r0, r3
 8003054:	442c      	add	r4, r5
 8003056:	fba0 2302 	umull	r2, r3, r0, r2
 800305a:	18e1      	adds	r1, r4, r3
 800305c:	460b      	mov	r3, r1
 800305e:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 8003062:	e9c1 2300 	strd	r2, r3, [r1]
 8003066:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 800306a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g9_19 = f4   * (int64_t) g9_19;
 800306e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8003072:	4618      	mov	r0, r3
 8003074:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003078:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 800307c:	461a      	mov	r2, r3
 800307e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003082:	fb02 f501 	mul.w	r5, r2, r1
 8003086:	fb00 f403 	mul.w	r4, r0, r3
 800308a:	442c      	add	r4, r5
 800308c:	fba0 2302 	umull	r2, r3, r0, r2
 8003090:	18e1      	adds	r1, r4, r3
 8003092:	460b      	mov	r3, r1
 8003094:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8003098:	e9c1 2300 	strd	r2, r3, [r1]
 800309c:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80030a0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g0    = f5   * (int64_t) g0;
 80030a4:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 80030a8:	4618      	mov	r0, r3
 80030aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80030ae:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80030b2:	461a      	mov	r2, r3
 80030b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030b8:	fb02 f501 	mul.w	r5, r2, r1
 80030bc:	fb00 f403 	mul.w	r4, r0, r3
 80030c0:	442c      	add	r4, r5
 80030c2:	fba0 2302 	umull	r2, r3, r0, r2
 80030c6:	18e1      	adds	r1, r4, r3
 80030c8:	460b      	mov	r3, r1
 80030ca:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 80030ce:	e9c1 2300 	strd	r2, r3, [r1]
 80030d2:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 80030d6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g1_2  = f5_2 * (int64_t) g1;
 80030da:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 80030de:	4618      	mov	r0, r3
 80030e0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80030e4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80030e8:	461a      	mov	r2, r3
 80030ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030ee:	fb02 f501 	mul.w	r5, r2, r1
 80030f2:	fb00 f403 	mul.w	r4, r0, r3
 80030f6:	442c      	add	r4, r5
 80030f8:	fba0 2302 	umull	r2, r3, r0, r2
 80030fc:	18e1      	adds	r1, r4, r3
 80030fe:	460b      	mov	r3, r1
 8003100:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8003104:	e9c1 2300 	strd	r2, r3, [r1]
 8003108:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 800310c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g2    = f5   * (int64_t) g2;
 8003110:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8003114:	4618      	mov	r0, r3
 8003116:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800311a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800311e:	461a      	mov	r2, r3
 8003120:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003124:	fb02 f501 	mul.w	r5, r2, r1
 8003128:	fb00 f403 	mul.w	r4, r0, r3
 800312c:	442c      	add	r4, r5
 800312e:	fba0 2302 	umull	r2, r3, r0, r2
 8003132:	18e1      	adds	r1, r4, r3
 8003134:	460b      	mov	r3, r1
 8003136:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800313a:	e9c1 2300 	strd	r2, r3, [r1]
 800313e:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 8003142:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g3_2  = f5_2 * (int64_t) g3;
 8003146:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 800314a:	4618      	mov	r0, r3
 800314c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003150:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8003154:	461a      	mov	r2, r3
 8003156:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800315a:	fb02 f501 	mul.w	r5, r2, r1
 800315e:	fb00 f403 	mul.w	r4, r0, r3
 8003162:	442c      	add	r4, r5
 8003164:	fba0 2302 	umull	r2, r3, r0, r2
 8003168:	18e1      	adds	r1, r4, r3
 800316a:	460b      	mov	r3, r1
 800316c:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8003170:	e9c1 2300 	strd	r2, r3, [r1]
 8003174:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8003178:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g4    = f5   * (int64_t) g4;
 800317c:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8003180:	4618      	mov	r0, r3
 8003182:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003186:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800318a:	461a      	mov	r2, r3
 800318c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003190:	fb02 f501 	mul.w	r5, r2, r1
 8003194:	fb00 f403 	mul.w	r4, r0, r3
 8003198:	442c      	add	r4, r5
 800319a:	fba0 2302 	umull	r2, r3, r0, r2
 800319e:	18e1      	adds	r1, r4, r3
 80031a0:	460b      	mov	r3, r1
 80031a2:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 80031a6:	e9c1 2300 	strd	r2, r3, [r1]
 80031aa:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 80031ae:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g5_38 = f5_2 * (int64_t) g5_19;
 80031b2:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 80031b6:	4618      	mov	r0, r3
 80031b8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80031bc:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 80031c0:	461a      	mov	r2, r3
 80031c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80031c6:	fb02 f501 	mul.w	r5, r2, r1
 80031ca:	fb00 f403 	mul.w	r4, r0, r3
 80031ce:	442c      	add	r4, r5
 80031d0:	fba0 2302 	umull	r2, r3, r0, r2
 80031d4:	18e1      	adds	r1, r4, r3
 80031d6:	460b      	mov	r3, r1
 80031d8:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 80031dc:	e9c1 2300 	strd	r2, r3, [r1]
 80031e0:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 80031e4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g6_19 = f5   * (int64_t) g6_19;
 80031e8:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 80031ec:	4618      	mov	r0, r3
 80031ee:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80031f2:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 80031f6:	461a      	mov	r2, r3
 80031f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80031fc:	fb02 f501 	mul.w	r5, r2, r1
 8003200:	fb00 f403 	mul.w	r4, r0, r3
 8003204:	442c      	add	r4, r5
 8003206:	fba0 2302 	umull	r2, r3, r0, r2
 800320a:	18e1      	adds	r1, r4, r3
 800320c:	460b      	mov	r3, r1
 800320e:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 8003212:	e9c1 2300 	strd	r2, r3, [r1]
 8003216:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 800321a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g7_38 = f5_2 * (int64_t) g7_19;
 800321e:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8003222:	4618      	mov	r0, r3
 8003224:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003228:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 800322c:	461a      	mov	r2, r3
 800322e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003232:	fb02 f501 	mul.w	r5, r2, r1
 8003236:	fb00 f403 	mul.w	r4, r0, r3
 800323a:	442c      	add	r4, r5
 800323c:	fba0 2302 	umull	r2, r3, r0, r2
 8003240:	18e1      	adds	r1, r4, r3
 8003242:	460b      	mov	r3, r1
 8003244:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8003248:	e9c1 2300 	strd	r2, r3, [r1]
 800324c:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8003250:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g8_19 = f5   * (int64_t) g8_19;
 8003254:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8003258:	4618      	mov	r0, r3
 800325a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800325e:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8003262:	461a      	mov	r2, r3
 8003264:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003268:	fb02 f501 	mul.w	r5, r2, r1
 800326c:	fb00 f403 	mul.w	r4, r0, r3
 8003270:	442c      	add	r4, r5
 8003272:	fba0 2302 	umull	r2, r3, r0, r2
 8003276:	18e1      	adds	r1, r4, r3
 8003278:	460b      	mov	r3, r1
 800327a:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 800327e:	e9c1 2300 	strd	r2, r3, [r1]
 8003282:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8003286:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g9_38 = f5_2 * (int64_t) g9_19;
 800328a:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 800328e:	4618      	mov	r0, r3
 8003290:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003294:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8003298:	461a      	mov	r2, r3
 800329a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800329e:	fb02 f501 	mul.w	r5, r2, r1
 80032a2:	fb00 f403 	mul.w	r4, r0, r3
 80032a6:	442c      	add	r4, r5
 80032a8:	fba0 2302 	umull	r2, r3, r0, r2
 80032ac:	18e1      	adds	r1, r4, r3
 80032ae:	460b      	mov	r3, r1
 80032b0:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 80032b4:	e9c1 2300 	strd	r2, r3, [r1]
 80032b8:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 80032bc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g0    = f6   * (int64_t) g0;
 80032c0:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80032c4:	4618      	mov	r0, r3
 80032c6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80032ca:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80032ce:	461a      	mov	r2, r3
 80032d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80032d4:	fb02 f501 	mul.w	r5, r2, r1
 80032d8:	fb00 f403 	mul.w	r4, r0, r3
 80032dc:	442c      	add	r4, r5
 80032de:	fba0 2302 	umull	r2, r3, r0, r2
 80032e2:	18e1      	adds	r1, r4, r3
 80032e4:	460b      	mov	r3, r1
 80032e6:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 80032ea:	e9c1 2300 	strd	r2, r3, [r1]
 80032ee:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 80032f2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g1    = f6   * (int64_t) g1;
 80032f6:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80032fa:	4618      	mov	r0, r3
 80032fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003300:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8003304:	461a      	mov	r2, r3
 8003306:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800330a:	fb02 f501 	mul.w	r5, r2, r1
 800330e:	fb00 f403 	mul.w	r4, r0, r3
 8003312:	442c      	add	r4, r5
 8003314:	fba0 2302 	umull	r2, r3, r0, r2
 8003318:	18e1      	adds	r1, r4, r3
 800331a:	460b      	mov	r3, r1
 800331c:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 8003320:	e9c1 2300 	strd	r2, r3, [r1]
 8003324:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 8003328:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g2    = f6   * (int64_t) g2;
 800332c:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8003330:	4618      	mov	r0, r3
 8003332:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003336:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800333a:	461a      	mov	r2, r3
 800333c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003340:	fb02 f501 	mul.w	r5, r2, r1
 8003344:	fb00 f403 	mul.w	r4, r0, r3
 8003348:	442c      	add	r4, r5
 800334a:	fba0 2302 	umull	r2, r3, r0, r2
 800334e:	18e1      	adds	r1, r4, r3
 8003350:	460b      	mov	r3, r1
 8003352:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 8003356:	e9c1 2300 	strd	r2, r3, [r1]
 800335a:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 800335e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g3    = f6   * (int64_t) g3;
 8003362:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8003366:	4618      	mov	r0, r3
 8003368:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800336c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8003370:	461a      	mov	r2, r3
 8003372:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003376:	fb02 f501 	mul.w	r5, r2, r1
 800337a:	fb00 f403 	mul.w	r4, r0, r3
 800337e:	442c      	add	r4, r5
 8003380:	fba0 2302 	umull	r2, r3, r0, r2
 8003384:	18e1      	adds	r1, r4, r3
 8003386:	460b      	mov	r3, r1
 8003388:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 800338c:	e9c1 2300 	strd	r2, r3, [r1]
 8003390:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 8003394:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g4_19 = f6   * (int64_t) g4_19;
 8003398:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800339c:	4618      	mov	r0, r3
 800339e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80033a2:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80033a6:	461a      	mov	r2, r3
 80033a8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80033ac:	fb02 f501 	mul.w	r5, r2, r1
 80033b0:	fb00 f403 	mul.w	r4, r0, r3
 80033b4:	442c      	add	r4, r5
 80033b6:	fba0 2302 	umull	r2, r3, r0, r2
 80033ba:	18e1      	adds	r1, r4, r3
 80033bc:	460b      	mov	r3, r1
 80033be:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80033c2:	e9c1 2300 	strd	r2, r3, [r1]
 80033c6:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80033ca:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g5_19 = f6   * (int64_t) g5_19;
 80033ce:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80033d2:	4618      	mov	r0, r3
 80033d4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80033d8:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 80033dc:	461a      	mov	r2, r3
 80033de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80033e2:	fb02 f501 	mul.w	r5, r2, r1
 80033e6:	fb00 f403 	mul.w	r4, r0, r3
 80033ea:	442c      	add	r4, r5
 80033ec:	fba0 2302 	umull	r2, r3, r0, r2
 80033f0:	18e1      	adds	r1, r4, r3
 80033f2:	460b      	mov	r3, r1
 80033f4:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 80033f8:	e9c1 2300 	strd	r2, r3, [r1]
 80033fc:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8003400:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g6_19 = f6   * (int64_t) g6_19;
 8003404:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8003408:	4618      	mov	r0, r3
 800340a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800340e:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8003412:	461a      	mov	r2, r3
 8003414:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003418:	fb02 f501 	mul.w	r5, r2, r1
 800341c:	fb00 f403 	mul.w	r4, r0, r3
 8003420:	442c      	add	r4, r5
 8003422:	fba0 2302 	umull	r2, r3, r0, r2
 8003426:	18e1      	adds	r1, r4, r3
 8003428:	460b      	mov	r3, r1
 800342a:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 800342e:	e9c1 2300 	strd	r2, r3, [r1]
 8003432:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 8003436:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g7_19 = f6   * (int64_t) g7_19;
 800343a:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800343e:	4618      	mov	r0, r3
 8003440:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003444:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8003448:	461a      	mov	r2, r3
 800344a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800344e:	fb02 f501 	mul.w	r5, r2, r1
 8003452:	fb00 f403 	mul.w	r4, r0, r3
 8003456:	442c      	add	r4, r5
 8003458:	fba0 2302 	umull	r2, r3, r0, r2
 800345c:	18e1      	adds	r1, r4, r3
 800345e:	460b      	mov	r3, r1
 8003460:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8003464:	e9c1 2300 	strd	r2, r3, [r1]
 8003468:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 800346c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g8_19 = f6   * (int64_t) g8_19;
 8003470:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8003474:	4618      	mov	r0, r3
 8003476:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800347a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 800347e:	461a      	mov	r2, r3
 8003480:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003484:	fb02 f501 	mul.w	r5, r2, r1
 8003488:	fb00 f403 	mul.w	r4, r0, r3
 800348c:	442c      	add	r4, r5
 800348e:	fba0 2302 	umull	r2, r3, r0, r2
 8003492:	18e1      	adds	r1, r4, r3
 8003494:	460b      	mov	r3, r1
 8003496:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 800349a:	e9c1 2300 	strd	r2, r3, [r1]
 800349e:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80034a2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g9_19 = f6   * (int64_t) g9_19;
 80034a6:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80034aa:	4618      	mov	r0, r3
 80034ac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80034b0:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 80034b4:	461a      	mov	r2, r3
 80034b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80034ba:	fb02 f501 	mul.w	r5, r2, r1
 80034be:	fb00 f403 	mul.w	r4, r0, r3
 80034c2:	442c      	add	r4, r5
 80034c4:	fba0 2302 	umull	r2, r3, r0, r2
 80034c8:	18e1      	adds	r1, r4, r3
 80034ca:	460b      	mov	r3, r1
 80034cc:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80034d0:	e9c1 2300 	strd	r2, r3, [r1]
 80034d4:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80034d8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g0    = f7   * (int64_t) g0;
 80034dc:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80034e0:	4618      	mov	r0, r3
 80034e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80034e6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80034ea:	461a      	mov	r2, r3
 80034ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80034f0:	fb02 f501 	mul.w	r5, r2, r1
 80034f4:	fb00 f403 	mul.w	r4, r0, r3
 80034f8:	442c      	add	r4, r5
 80034fa:	fba0 2302 	umull	r2, r3, r0, r2
 80034fe:	18e1      	adds	r1, r4, r3
 8003500:	460b      	mov	r3, r1
 8003502:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8003506:	e9c1 2300 	strd	r2, r3, [r1]
 800350a:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 800350e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g1_2  = f7_2 * (int64_t) g1;
 8003512:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8003516:	4618      	mov	r0, r3
 8003518:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800351c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8003520:	461a      	mov	r2, r3
 8003522:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003526:	fb02 f501 	mul.w	r5, r2, r1
 800352a:	fb00 f403 	mul.w	r4, r0, r3
 800352e:	442c      	add	r4, r5
 8003530:	fba0 2302 	umull	r2, r3, r0, r2
 8003534:	18e1      	adds	r1, r4, r3
 8003536:	460b      	mov	r3, r1
 8003538:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 800353c:	e9c1 2300 	strd	r2, r3, [r1]
 8003540:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8003544:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g2    = f7   * (int64_t) g2;
 8003548:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 800354c:	4618      	mov	r0, r3
 800354e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003552:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8003556:	461a      	mov	r2, r3
 8003558:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800355c:	fb02 f501 	mul.w	r5, r2, r1
 8003560:	fb00 f403 	mul.w	r4, r0, r3
 8003564:	442c      	add	r4, r5
 8003566:	fba0 2302 	umull	r2, r3, r0, r2
 800356a:	18e1      	adds	r1, r4, r3
 800356c:	460b      	mov	r3, r1
 800356e:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8003572:	e9c1 2300 	strd	r2, r3, [r1]
 8003576:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 800357a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g3_38 = f7_2 * (int64_t) g3_19;
 800357e:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8003582:	4618      	mov	r0, r3
 8003584:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003588:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800358c:	461a      	mov	r2, r3
 800358e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003592:	fb02 f501 	mul.w	r5, r2, r1
 8003596:	fb00 f403 	mul.w	r4, r0, r3
 800359a:	442c      	add	r4, r5
 800359c:	fba0 2302 	umull	r2, r3, r0, r2
 80035a0:	18e1      	adds	r1, r4, r3
 80035a2:	460b      	mov	r3, r1
 80035a4:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 80035a8:	e9c1 2300 	strd	r2, r3, [r1]
 80035ac:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 80035b0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g4_19 = f7   * (int64_t) g4_19;
 80035b4:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80035b8:	4618      	mov	r0, r3
 80035ba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80035be:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80035c2:	461a      	mov	r2, r3
 80035c4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80035c8:	fb02 f501 	mul.w	r5, r2, r1
 80035cc:	fb00 f403 	mul.w	r4, r0, r3
 80035d0:	442c      	add	r4, r5
 80035d2:	fba0 2302 	umull	r2, r3, r0, r2
 80035d6:	18e1      	adds	r1, r4, r3
 80035d8:	460b      	mov	r3, r1
 80035da:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 80035de:	e9c1 2300 	strd	r2, r3, [r1]
 80035e2:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 80035e6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g5_38 = f7_2 * (int64_t) g5_19;
 80035ea:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 80035ee:	4618      	mov	r0, r3
 80035f0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80035f4:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 80035f8:	461a      	mov	r2, r3
 80035fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80035fe:	fb02 f501 	mul.w	r5, r2, r1
 8003602:	fb00 f403 	mul.w	r4, r0, r3
 8003606:	442c      	add	r4, r5
 8003608:	fba0 2302 	umull	r2, r3, r0, r2
 800360c:	18e1      	adds	r1, r4, r3
 800360e:	460b      	mov	r3, r1
 8003610:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8003614:	e9c1 2300 	strd	r2, r3, [r1]
 8003618:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 800361c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g6_19 = f7   * (int64_t) g6_19;
 8003620:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8003624:	4618      	mov	r0, r3
 8003626:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800362a:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 800362e:	461a      	mov	r2, r3
 8003630:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003634:	fb02 f501 	mul.w	r5, r2, r1
 8003638:	fb00 f403 	mul.w	r4, r0, r3
 800363c:	442c      	add	r4, r5
 800363e:	fba0 2302 	umull	r2, r3, r0, r2
 8003642:	18e1      	adds	r1, r4, r3
 8003644:	460b      	mov	r3, r1
 8003646:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800364a:	e9c1 2300 	strd	r2, r3, [r1]
 800364e:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8003652:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g7_38 = f7_2 * (int64_t) g7_19;
 8003656:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 800365a:	4618      	mov	r0, r3
 800365c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003660:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8003664:	461a      	mov	r2, r3
 8003666:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800366a:	fb02 f501 	mul.w	r5, r2, r1
 800366e:	fb00 f403 	mul.w	r4, r0, r3
 8003672:	442c      	add	r4, r5
 8003674:	fba0 2302 	umull	r2, r3, r0, r2
 8003678:	18e1      	adds	r1, r4, r3
 800367a:	460b      	mov	r3, r1
 800367c:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8003680:	e9c1 2300 	strd	r2, r3, [r1]
 8003684:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8003688:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g8_19 = f7   * (int64_t) g8_19;
 800368c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8003690:	4618      	mov	r0, r3
 8003692:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003696:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 800369a:	461a      	mov	r2, r3
 800369c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036a0:	fb02 f501 	mul.w	r5, r2, r1
 80036a4:	fb00 f403 	mul.w	r4, r0, r3
 80036a8:	442c      	add	r4, r5
 80036aa:	fba0 2302 	umull	r2, r3, r0, r2
 80036ae:	18e1      	adds	r1, r4, r3
 80036b0:	460b      	mov	r3, r1
 80036b2:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 80036b6:	e9c1 2300 	strd	r2, r3, [r1]
 80036ba:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 80036be:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g9_38 = f7_2 * (int64_t) g9_19;
 80036c2:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 80036c6:	4618      	mov	r0, r3
 80036c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80036cc:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 80036d0:	461a      	mov	r2, r3
 80036d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036d6:	fb02 f501 	mul.w	r5, r2, r1
 80036da:	fb00 f403 	mul.w	r4, r0, r3
 80036de:	442c      	add	r4, r5
 80036e0:	fba0 2302 	umull	r2, r3, r0, r2
 80036e4:	18e1      	adds	r1, r4, r3
 80036e6:	460b      	mov	r3, r1
 80036e8:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 80036ec:	e9c1 2300 	strd	r2, r3, [r1]
 80036f0:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 80036f4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g0    = f8   * (int64_t) g0;
 80036f8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80036fc:	4618      	mov	r0, r3
 80036fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003702:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8003706:	461a      	mov	r2, r3
 8003708:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800370c:	fb02 f501 	mul.w	r5, r2, r1
 8003710:	fb00 f403 	mul.w	r4, r0, r3
 8003714:	442c      	add	r4, r5
 8003716:	fba0 2302 	umull	r2, r3, r0, r2
 800371a:	18e1      	adds	r1, r4, r3
 800371c:	460b      	mov	r3, r1
 800371e:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8003722:	e9c1 2300 	strd	r2, r3, [r1]
 8003726:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 800372a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g1    = f8   * (int64_t) g1;
 800372e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003732:	4618      	mov	r0, r3
 8003734:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003738:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800373c:	461a      	mov	r2, r3
 800373e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003742:	fb02 f501 	mul.w	r5, r2, r1
 8003746:	fb00 f403 	mul.w	r4, r0, r3
 800374a:	442c      	add	r4, r5
 800374c:	fba0 2302 	umull	r2, r3, r0, r2
 8003750:	18e1      	adds	r1, r4, r3
 8003752:	460b      	mov	r3, r1
 8003754:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8003758:	e9c1 2300 	strd	r2, r3, [r1]
 800375c:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8003760:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g2_19 = f8   * (int64_t) g2_19;
 8003764:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003768:	4618      	mov	r0, r3
 800376a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800376e:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8003772:	461a      	mov	r2, r3
 8003774:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003778:	fb02 f501 	mul.w	r5, r2, r1
 800377c:	fb00 f403 	mul.w	r4, r0, r3
 8003780:	442c      	add	r4, r5
 8003782:	fba0 2302 	umull	r2, r3, r0, r2
 8003786:	18e1      	adds	r1, r4, r3
 8003788:	460b      	mov	r3, r1
 800378a:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 800378e:	e9c1 2300 	strd	r2, r3, [r1]
 8003792:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8003796:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g3_19 = f8   * (int64_t) g3_19;
 800379a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 800379e:	4618      	mov	r0, r3
 80037a0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80037a4:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80037a8:	461a      	mov	r2, r3
 80037aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037ae:	fb02 f501 	mul.w	r5, r2, r1
 80037b2:	fb00 f403 	mul.w	r4, r0, r3
 80037b6:	442c      	add	r4, r5
 80037b8:	fba0 2302 	umull	r2, r3, r0, r2
 80037bc:	18e1      	adds	r1, r4, r3
 80037be:	460b      	mov	r3, r1
 80037c0:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 80037c4:	e9c1 2300 	strd	r2, r3, [r1]
 80037c8:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 80037cc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g4_19 = f8   * (int64_t) g4_19;
 80037d0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80037d4:	4618      	mov	r0, r3
 80037d6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80037da:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80037de:	461a      	mov	r2, r3
 80037e0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037e4:	fb02 f501 	mul.w	r5, r2, r1
 80037e8:	fb00 f403 	mul.w	r4, r0, r3
 80037ec:	442c      	add	r4, r5
 80037ee:	fba0 2302 	umull	r2, r3, r0, r2
 80037f2:	18e1      	adds	r1, r4, r3
 80037f4:	460b      	mov	r3, r1
 80037f6:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 80037fa:	e9c1 2300 	strd	r2, r3, [r1]
 80037fe:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8003802:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g5_19 = f8   * (int64_t) g5_19;
 8003806:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 800380a:	4618      	mov	r0, r3
 800380c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003810:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8003814:	461a      	mov	r2, r3
 8003816:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800381a:	fb02 f501 	mul.w	r5, r2, r1
 800381e:	fb00 f403 	mul.w	r4, r0, r3
 8003822:	442c      	add	r4, r5
 8003824:	fba0 2302 	umull	r2, r3, r0, r2
 8003828:	18e1      	adds	r1, r4, r3
 800382a:	460b      	mov	r3, r1
 800382c:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8003830:	e9c1 2300 	strd	r2, r3, [r1]
 8003834:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8003838:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g6_19 = f8   * (int64_t) g6_19;
 800383c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003840:	4618      	mov	r0, r3
 8003842:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003846:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 800384a:	461a      	mov	r2, r3
 800384c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003850:	fb02 f501 	mul.w	r5, r2, r1
 8003854:	fb00 f403 	mul.w	r4, r0, r3
 8003858:	442c      	add	r4, r5
 800385a:	fba0 2302 	umull	r2, r3, r0, r2
 800385e:	18e1      	adds	r1, r4, r3
 8003860:	460b      	mov	r3, r1
 8003862:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8003866:	e9c1 2300 	strd	r2, r3, [r1]
 800386a:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 800386e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g7_19 = f8   * (int64_t) g7_19;
 8003872:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003876:	4618      	mov	r0, r3
 8003878:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800387c:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8003880:	461a      	mov	r2, r3
 8003882:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003886:	fb02 f501 	mul.w	r5, r2, r1
 800388a:	fb00 f403 	mul.w	r4, r0, r3
 800388e:	442c      	add	r4, r5
 8003890:	fba0 2302 	umull	r2, r3, r0, r2
 8003894:	18e1      	adds	r1, r4, r3
 8003896:	460b      	mov	r3, r1
 8003898:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 800389c:	e9c1 2300 	strd	r2, r3, [r1]
 80038a0:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 80038a4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g8_19 = f8   * (int64_t) g8_19;
 80038a8:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80038ac:	4618      	mov	r0, r3
 80038ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80038b2:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 80038b6:	461a      	mov	r2, r3
 80038b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80038bc:	fb02 f501 	mul.w	r5, r2, r1
 80038c0:	fb00 f403 	mul.w	r4, r0, r3
 80038c4:	442c      	add	r4, r5
 80038c6:	fba0 2302 	umull	r2, r3, r0, r2
 80038ca:	18e1      	adds	r1, r4, r3
 80038cc:	460b      	mov	r3, r1
 80038ce:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 80038d2:	e9c1 2300 	strd	r2, r3, [r1]
 80038d6:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 80038da:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g9_19 = f8   * (int64_t) g9_19;
 80038de:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80038e2:	4618      	mov	r0, r3
 80038e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80038e8:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 80038ec:	461a      	mov	r2, r3
 80038ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80038f2:	fb02 f501 	mul.w	r5, r2, r1
 80038f6:	fb00 f403 	mul.w	r4, r0, r3
 80038fa:	442c      	add	r4, r5
 80038fc:	fba0 2302 	umull	r2, r3, r0, r2
 8003900:	18e1      	adds	r1, r4, r3
 8003902:	460b      	mov	r3, r1
 8003904:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8003908:	e9c1 2300 	strd	r2, r3, [r1]
 800390c:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8003910:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g0    = f9   * (int64_t) g0;
 8003914:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8003918:	4618      	mov	r0, r3
 800391a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800391e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8003922:	461a      	mov	r2, r3
 8003924:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003928:	fb02 f501 	mul.w	r5, r2, r1
 800392c:	fb00 f403 	mul.w	r4, r0, r3
 8003930:	442c      	add	r4, r5
 8003932:	fba0 2302 	umull	r2, r3, r0, r2
 8003936:	18e1      	adds	r1, r4, r3
 8003938:	460b      	mov	r3, r1
 800393a:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 800393e:	e9c1 2300 	strd	r2, r3, [r1]
 8003942:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8003946:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g1_38 = f9_2 * (int64_t) g1_19;
 800394a:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 800394e:	4618      	mov	r0, r3
 8003950:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003954:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	; 0x7f4
 8003958:	461a      	mov	r2, r3
 800395a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800395e:	fb02 f501 	mul.w	r5, r2, r1
 8003962:	fb00 f403 	mul.w	r4, r0, r3
 8003966:	442c      	add	r4, r5
 8003968:	fba0 2302 	umull	r2, r3, r0, r2
 800396c:	18e1      	adds	r1, r4, r3
 800396e:	460b      	mov	r3, r1
 8003970:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8003974:	e9c1 2300 	strd	r2, r3, [r1]
 8003978:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 800397c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g2_19 = f9   * (int64_t) g2_19;
 8003980:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8003984:	4618      	mov	r0, r3
 8003986:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800398a:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 800398e:	461a      	mov	r2, r3
 8003990:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003994:	fb02 f501 	mul.w	r5, r2, r1
 8003998:	fb00 f403 	mul.w	r4, r0, r3
 800399c:	442c      	add	r4, r5
 800399e:	fba0 2302 	umull	r2, r3, r0, r2
 80039a2:	18e1      	adds	r1, r4, r3
 80039a4:	460b      	mov	r3, r1
 80039a6:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80039aa:	e9c1 2300 	strd	r2, r3, [r1]
 80039ae:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80039b2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g3_38 = f9_2 * (int64_t) g3_19;
 80039b6:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 80039ba:	4618      	mov	r0, r3
 80039bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80039c0:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80039c4:	461a      	mov	r2, r3
 80039c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80039ca:	fb02 f501 	mul.w	r5, r2, r1
 80039ce:	fb00 f403 	mul.w	r4, r0, r3
 80039d2:	442c      	add	r4, r5
 80039d4:	fba0 2302 	umull	r2, r3, r0, r2
 80039d8:	18e1      	adds	r1, r4, r3
 80039da:	460b      	mov	r3, r1
 80039dc:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 80039e0:	e9c1 2300 	strd	r2, r3, [r1]
 80039e4:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 80039e8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g4_19 = f9   * (int64_t) g4_19;
 80039ec:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80039f0:	4618      	mov	r0, r3
 80039f2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80039f6:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80039fa:	461a      	mov	r2, r3
 80039fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003a00:	fb02 f501 	mul.w	r5, r2, r1
 8003a04:	fb00 f403 	mul.w	r4, r0, r3
 8003a08:	442c      	add	r4, r5
 8003a0a:	fba0 2302 	umull	r2, r3, r0, r2
 8003a0e:	18e1      	adds	r1, r4, r3
 8003a10:	460b      	mov	r3, r1
 8003a12:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8003a16:	e9c1 2300 	strd	r2, r3, [r1]
 8003a1a:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8003a1e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g5_38 = f9_2 * (int64_t) g5_19;
 8003a22:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8003a26:	4618      	mov	r0, r3
 8003a28:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003a2c:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8003a30:	461a      	mov	r2, r3
 8003a32:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003a36:	fb02 f501 	mul.w	r5, r2, r1
 8003a3a:	fb00 f403 	mul.w	r4, r0, r3
 8003a3e:	442c      	add	r4, r5
 8003a40:	fba0 2302 	umull	r2, r3, r0, r2
 8003a44:	18e1      	adds	r1, r4, r3
 8003a46:	460b      	mov	r3, r1
 8003a48:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8003a4c:	e9c1 2300 	strd	r2, r3, [r1]
 8003a50:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8003a54:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g6_19 = f9   * (int64_t) g6_19;
 8003a58:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003a62:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8003a66:	461a      	mov	r2, r3
 8003a68:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003a6c:	fb02 f501 	mul.w	r5, r2, r1
 8003a70:	fb00 f403 	mul.w	r4, r0, r3
 8003a74:	442c      	add	r4, r5
 8003a76:	fba0 2302 	umull	r2, r3, r0, r2
 8003a7a:	18e1      	adds	r1, r4, r3
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8003a82:	e9c1 2300 	strd	r2, r3, [r1]
 8003a86:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8003a8a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g7_38 = f9_2 * (int64_t) g7_19;
 8003a8e:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8003a92:	4618      	mov	r0, r3
 8003a94:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003a98:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003aa2:	fb02 f501 	mul.w	r5, r2, r1
 8003aa6:	fb00 f403 	mul.w	r4, r0, r3
 8003aaa:	442c      	add	r4, r5
 8003aac:	fba0 2302 	umull	r2, r3, r0, r2
 8003ab0:	18e1      	adds	r1, r4, r3
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8003ab8:	e9c1 2300 	strd	r2, r3, [r1]
 8003abc:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8003ac0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g8_19 = f9   * (int64_t) g8_19;
 8003ac4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8003ac8:	4618      	mov	r0, r3
 8003aca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003ace:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003ad8:	fb02 f501 	mul.w	r5, r2, r1
 8003adc:	fb00 f403 	mul.w	r4, r0, r3
 8003ae0:	442c      	add	r4, r5
 8003ae2:	fba0 2302 	umull	r2, r3, r0, r2
 8003ae6:	18e1      	adds	r1, r4, r3
 8003ae8:	460b      	mov	r3, r1
 8003aea:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8003aee:	e9c1 2300 	strd	r2, r3, [r1]
 8003af2:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8003af6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g9_38 = f9_2 * (int64_t) g9_19;
 8003afa:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8003afe:	4618      	mov	r0, r3
 8003b00:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003b04:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8003b08:	461a      	mov	r2, r3
 8003b0a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003b0e:	fb02 f501 	mul.w	r5, r2, r1
 8003b12:	fb00 f403 	mul.w	r4, r0, r3
 8003b16:	442c      	add	r4, r5
 8003b18:	fba0 2302 	umull	r2, r3, r0, r2
 8003b1c:	18e1      	adds	r1, r4, r3
 8003b1e:	460b      	mov	r3, r1
 8003b20:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8003b24:	e9c1 2300 	strd	r2, r3, [r1]
 8003b28:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8003b2c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t h0 = f0g0 + f1g9_38 + f2g8_19 + f3g7_38 + f4g6_19 + f5g5_38 + f6g4_19 + f7g3_38 + f8g2_19 + f9g1_38;
 8003b30:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8003b34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b38:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	1884      	adds	r4, r0, r2
 8003b42:	f8c7 43e8 	str.w	r4, [r7, #1000]	; 0x3e8
 8003b46:	eb41 0303 	adc.w	r3, r1, r3
 8003b4a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8003b4e:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	; 0x3e8
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	1889      	adds	r1, r1, r2
 8003b5e:	f8c7 13e0 	str.w	r1, [r7, #992]	; 0x3e0
 8003b62:	4629      	mov	r1, r5
 8003b64:	eb43 0101 	adc.w	r1, r3, r1
 8003b68:	f8c7 13e4 	str.w	r1, [r7, #996]	; 0x3e4
 8003b6c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	e9d7 45f8 	ldrd	r4, r5, [r7, #992]	; 0x3e0
 8003b78:	4621      	mov	r1, r4
 8003b7a:	1889      	adds	r1, r1, r2
 8003b7c:	f8c7 13d8 	str.w	r1, [r7, #984]	; 0x3d8
 8003b80:	4629      	mov	r1, r5
 8003b82:	eb43 0101 	adc.w	r1, r3, r1
 8003b86:	f8c7 13dc 	str.w	r1, [r7, #988]	; 0x3dc
 8003b8a:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 8003b96:	4621      	mov	r1, r4
 8003b98:	1889      	adds	r1, r1, r2
 8003b9a:	f8c7 13d0 	str.w	r1, [r7, #976]	; 0x3d0
 8003b9e:	4629      	mov	r1, r5
 8003ba0:	eb43 0101 	adc.w	r1, r3, r1
 8003ba4:	f8c7 13d4 	str.w	r1, [r7, #980]	; 0x3d4
 8003ba8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	1889      	adds	r1, r1, r2
 8003bb8:	f8c7 13c8 	str.w	r1, [r7, #968]	; 0x3c8
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	eb43 0101 	adc.w	r1, r3, r1
 8003bc2:	f8c7 13cc 	str.w	r1, [r7, #972]	; 0x3cc
 8003bc6:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8003bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bce:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	; 0x3c8
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	1889      	adds	r1, r1, r2
 8003bd6:	f8c7 13c0 	str.w	r1, [r7, #960]	; 0x3c0
 8003bda:	4629      	mov	r1, r5
 8003bdc:	eb43 0101 	adc.w	r1, r3, r1
 8003be0:	f8c7 13c4 	str.w	r1, [r7, #964]	; 0x3c4
 8003be4:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	1889      	adds	r1, r1, r2
 8003bf4:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	eb43 0101 	adc.w	r1, r3, r1
 8003bfe:	f8c7 13bc 	str.w	r1, [r7, #956]	; 0x3bc
 8003c02:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 8003c0e:	4621      	mov	r1, r4
 8003c10:	1889      	adds	r1, r1, r2
 8003c12:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 8003c16:	4629      	mov	r1, r5
 8003c18:	eb43 0101 	adc.w	r1, r3, r1
 8003c1c:	f8c7 13b4 	str.w	r1, [r7, #948]	; 0x3b4
 8003c20:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	; 0x3b0
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	1851      	adds	r1, r2, r1
 8003c30:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8003c34:	4629      	mov	r1, r5
 8003c36:	eb43 0101 	adc.w	r1, r3, r1
 8003c3a:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8003c3e:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003c42:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003c46:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h1 = f0g1 + f1g0   + f2g9_19 + f3g8_19 + f4g7_19 + f5g6_19 + f6g5_19 + f7g4_19 + f8g3_19 + f9g2_19;
 8003c4a:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8003c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c52:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	1884      	adds	r4, r0, r2
 8003c5c:	f8c7 43a8 	str.w	r4, [r7, #936]	; 0x3a8
 8003c60:	eb41 0303 	adc.w	r3, r1, r3
 8003c64:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8003c68:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 8003c74:	4621      	mov	r1, r4
 8003c76:	1889      	adds	r1, r1, r2
 8003c78:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	eb43 0101 	adc.w	r1, r3, r1
 8003c82:	f8c7 13a4 	str.w	r1, [r7, #932]	; 0x3a4
 8003c86:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 8003c92:	4621      	mov	r1, r4
 8003c94:	1889      	adds	r1, r1, r2
 8003c96:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	eb43 0101 	adc.w	r1, r3, r1
 8003ca0:	f8c7 139c 	str.w	r1, [r7, #924]	; 0x39c
 8003ca4:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	1889      	adds	r1, r1, r2
 8003cb4:	f8c7 1390 	str.w	r1, [r7, #912]	; 0x390
 8003cb8:	4629      	mov	r1, r5
 8003cba:	eb43 0101 	adc.w	r1, r3, r1
 8003cbe:	f8c7 1394 	str.w	r1, [r7, #916]	; 0x394
 8003cc2:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 8003cce:	4621      	mov	r1, r4
 8003cd0:	1889      	adds	r1, r1, r2
 8003cd2:	f8c7 1388 	str.w	r1, [r7, #904]	; 0x388
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	eb43 0101 	adc.w	r1, r3, r1
 8003cdc:	f8c7 138c 	str.w	r1, [r7, #908]	; 0x38c
 8003ce0:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 8003cec:	4621      	mov	r1, r4
 8003cee:	1889      	adds	r1, r1, r2
 8003cf0:	f8c7 1380 	str.w	r1, [r7, #896]	; 0x380
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	eb43 0101 	adc.w	r1, r3, r1
 8003cfa:	f8c7 1384 	str.w	r1, [r7, #900]	; 0x384
 8003cfe:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	1889      	adds	r1, r1, r2
 8003d0e:	f8c7 1378 	str.w	r1, [r7, #888]	; 0x378
 8003d12:	4629      	mov	r1, r5
 8003d14:	eb43 0101 	adc.w	r1, r3, r1
 8003d18:	f8c7 137c 	str.w	r1, [r7, #892]	; 0x37c
 8003d1c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 8003d28:	4621      	mov	r1, r4
 8003d2a:	1889      	adds	r1, r1, r2
 8003d2c:	f8c7 1370 	str.w	r1, [r7, #880]	; 0x370
 8003d30:	4629      	mov	r1, r5
 8003d32:	eb43 0101 	adc.w	r1, r3, r1
 8003d36:	f8c7 1374 	str.w	r1, [r7, #884]	; 0x374
 8003d3a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	; 0x370
 8003d46:	4621      	mov	r1, r4
 8003d48:	1851      	adds	r1, r2, r1
 8003d4a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8003d4e:	4629      	mov	r1, r5
 8003d50:	eb43 0101 	adc.w	r1, r3, r1
 8003d54:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8003d58:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8003d5c:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8003d60:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h2 = f0g2 + f1g1_2 + f2g0   + f3g9_38 + f4g8_19 + f5g7_38 + f6g6_19 + f7g5_38 + f8g4_19 + f9g3_38;
 8003d64:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8003d68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d6c:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	1884      	adds	r4, r0, r2
 8003d76:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 8003d7a:	eb41 0303 	adc.w	r3, r1, r3
 8003d7e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8003d82:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 8003d8e:	4621      	mov	r1, r4
 8003d90:	1889      	adds	r1, r1, r2
 8003d92:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 8003d96:	4629      	mov	r1, r5
 8003d98:	eb43 0101 	adc.w	r1, r3, r1
 8003d9c:	f8c7 1364 	str.w	r1, [r7, #868]	; 0x364
 8003da0:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 8003dac:	4621      	mov	r1, r4
 8003dae:	1889      	adds	r1, r1, r2
 8003db0:	f8c7 1358 	str.w	r1, [r7, #856]	; 0x358
 8003db4:	4629      	mov	r1, r5
 8003db6:	eb43 0101 	adc.w	r1, r3, r1
 8003dba:	f8c7 135c 	str.w	r1, [r7, #860]	; 0x35c
 8003dbe:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	; 0x358
 8003dca:	4621      	mov	r1, r4
 8003dcc:	1889      	adds	r1, r1, r2
 8003dce:	f8c7 1350 	str.w	r1, [r7, #848]	; 0x350
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	eb43 0101 	adc.w	r1, r3, r1
 8003dd8:	f8c7 1354 	str.w	r1, [r7, #852]	; 0x354
 8003ddc:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8003de8:	4621      	mov	r1, r4
 8003dea:	1889      	adds	r1, r1, r2
 8003dec:	f8c7 1348 	str.w	r1, [r7, #840]	; 0x348
 8003df0:	4629      	mov	r1, r5
 8003df2:	eb43 0101 	adc.w	r1, r3, r1
 8003df6:	f8c7 134c 	str.w	r1, [r7, #844]	; 0x34c
 8003dfa:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 8003e06:	4621      	mov	r1, r4
 8003e08:	1889      	adds	r1, r1, r2
 8003e0a:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 8003e0e:	4629      	mov	r1, r5
 8003e10:	eb43 0101 	adc.w	r1, r3, r1
 8003e14:	f8c7 1344 	str.w	r1, [r7, #836]	; 0x344
 8003e18:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 8003e24:	4621      	mov	r1, r4
 8003e26:	1889      	adds	r1, r1, r2
 8003e28:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	eb43 0101 	adc.w	r1, r3, r1
 8003e32:	f8c7 133c 	str.w	r1, [r7, #828]	; 0x33c
 8003e36:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 8003e42:	4621      	mov	r1, r4
 8003e44:	1889      	adds	r1, r1, r2
 8003e46:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	eb43 0101 	adc.w	r1, r3, r1
 8003e50:	f8c7 1334 	str.w	r1, [r7, #820]	; 0x334
 8003e54:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 8003e60:	4621      	mov	r1, r4
 8003e62:	1851      	adds	r1, r2, r1
 8003e64:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8003e68:	4629      	mov	r1, r5
 8003e6a:	eb43 0101 	adc.w	r1, r3, r1
 8003e6e:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8003e72:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003e76:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8003e7a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h3 = f0g3 + f1g2   + f2g1   + f3g0   + f4g9_19 + f5g8_19 + f6g7_19 + f7g6_19 + f8g5_19 + f9g4_19;
 8003e7e:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8003e82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e86:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	1884      	adds	r4, r0, r2
 8003e90:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 8003e94:	eb41 0303 	adc.w	r3, r1, r3
 8003e98:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8003e9c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	1889      	adds	r1, r1, r2
 8003eac:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	eb43 0101 	adc.w	r1, r3, r1
 8003eb6:	f8c7 1324 	str.w	r1, [r7, #804]	; 0x324
 8003eba:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	e9d7 45c8 	ldrd	r4, r5, [r7, #800]	; 0x320
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	1889      	adds	r1, r1, r2
 8003eca:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 8003ece:	4629      	mov	r1, r5
 8003ed0:	eb43 0101 	adc.w	r1, r3, r1
 8003ed4:	f8c7 131c 	str.w	r1, [r7, #796]	; 0x31c
 8003ed8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	; 0x318
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	1889      	adds	r1, r1, r2
 8003ee8:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 8003eec:	4629      	mov	r1, r5
 8003eee:	eb43 0101 	adc.w	r1, r3, r1
 8003ef2:	f8c7 1314 	str.w	r1, [r7, #788]	; 0x314
 8003ef6:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efe:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 8003f02:	4621      	mov	r1, r4
 8003f04:	1889      	adds	r1, r1, r2
 8003f06:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	eb43 0101 	adc.w	r1, r3, r1
 8003f10:	f8c7 130c 	str.w	r1, [r7, #780]	; 0x30c
 8003f14:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	; 0x308
 8003f20:	4621      	mov	r1, r4
 8003f22:	1889      	adds	r1, r1, r2
 8003f24:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 8003f28:	4629      	mov	r1, r5
 8003f2a:	eb43 0101 	adc.w	r1, r3, r1
 8003f2e:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
 8003f32:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	e9d7 45c0 	ldrd	r4, r5, [r7, #768]	; 0x300
 8003f3e:	4621      	mov	r1, r4
 8003f40:	1889      	adds	r1, r1, r2
 8003f42:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 8003f46:	4629      	mov	r1, r5
 8003f48:	eb43 0101 	adc.w	r1, r3, r1
 8003f4c:	f8c7 12fc 	str.w	r1, [r7, #764]	; 0x2fc
 8003f50:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 8003f5c:	4621      	mov	r1, r4
 8003f5e:	1889      	adds	r1, r1, r2
 8003f60:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 8003f64:	4629      	mov	r1, r5
 8003f66:	eb43 0101 	adc.w	r1, r3, r1
 8003f6a:	f8c7 12f4 	str.w	r1, [r7, #756]	; 0x2f4
 8003f6e:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	1851      	adds	r1, r2, r1
 8003f7e:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003f82:	4629      	mov	r1, r5
 8003f84:	eb43 0101 	adc.w	r1, r3, r1
 8003f88:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8003f8c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8003f90:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8003f94:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h4 = f0g4 + f1g3_2 + f2g2   + f3g1_2 + f4g0   + f5g9_38 + f6g8_19 + f7g7_38 + f8g6_19 + f9g5_38;
 8003f98:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 8003f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fa0:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	1884      	adds	r4, r0, r2
 8003faa:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 8003fae:	eb41 0303 	adc.w	r3, r1, r3
 8003fb2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8003fb6:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	; 0x2e8
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	1889      	adds	r1, r1, r2
 8003fc6:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 8003fca:	4629      	mov	r1, r5
 8003fcc:	eb43 0101 	adc.w	r1, r3, r1
 8003fd0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 8003fd4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8003fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fdc:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	1889      	adds	r1, r1, r2
 8003fe4:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 8003fe8:	4629      	mov	r1, r5
 8003fea:	eb43 0101 	adc.w	r1, r3, r1
 8003fee:	f8c7 12dc 	str.w	r1, [r7, #732]	; 0x2dc
 8003ff2:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	; 0x2d8
 8003ffe:	4621      	mov	r1, r4
 8004000:	1889      	adds	r1, r1, r2
 8004002:	f8c7 12d0 	str.w	r1, [r7, #720]	; 0x2d0
 8004006:	4629      	mov	r1, r5
 8004008:	eb43 0101 	adc.w	r1, r3, r1
 800400c:	f8c7 12d4 	str.w	r1, [r7, #724]	; 0x2d4
 8004010:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 800401c:	4621      	mov	r1, r4
 800401e:	1889      	adds	r1, r1, r2
 8004020:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8004024:	4629      	mov	r1, r5
 8004026:	eb43 0101 	adc.w	r1, r3, r1
 800402a:	f8c7 12cc 	str.w	r1, [r7, #716]	; 0x2cc
 800402e:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 800403a:	4621      	mov	r1, r4
 800403c:	1889      	adds	r1, r1, r2
 800403e:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8004042:	4629      	mov	r1, r5
 8004044:	eb43 0101 	adc.w	r1, r3, r1
 8004048:	f8c7 12c4 	str.w	r1, [r7, #708]	; 0x2c4
 800404c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 8004058:	4621      	mov	r1, r4
 800405a:	1889      	adds	r1, r1, r2
 800405c:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 8004060:	4629      	mov	r1, r5
 8004062:	eb43 0101 	adc.w	r1, r3, r1
 8004066:	f8c7 12bc 	str.w	r1, [r7, #700]	; 0x2bc
 800406a:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 8004076:	4621      	mov	r1, r4
 8004078:	1889      	adds	r1, r1, r2
 800407a:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 800407e:	4629      	mov	r1, r5
 8004080:	eb43 0101 	adc.w	r1, r3, r1
 8004084:	f8c7 12b4 	str.w	r1, [r7, #692]	; 0x2b4
 8004088:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 8004094:	4621      	mov	r1, r4
 8004096:	1851      	adds	r1, r2, r1
 8004098:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800409c:	4629      	mov	r1, r5
 800409e:	eb43 0101 	adc.w	r1, r3, r1
 80040a2:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80040a6:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80040aa:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 80040ae:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h5 = f0g5 + f1g4   + f2g3   + f3g2   + f4g1   + f5g0   + f6g9_19 + f7g8_19 + f8g7_19 + f9g6_19;
 80040b2:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 80040b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040ba:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	1884      	adds	r4, r0, r2
 80040c4:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 80040c8:	eb41 0303 	adc.w	r3, r1, r3
 80040cc:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80040d0:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	; 0x2a8
 80040dc:	4621      	mov	r1, r4
 80040de:	1889      	adds	r1, r1, r2
 80040e0:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 80040e4:	4629      	mov	r1, r5
 80040e6:	eb43 0101 	adc.w	r1, r3, r1
 80040ea:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 80040ee:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 80040fa:	4621      	mov	r1, r4
 80040fc:	1889      	adds	r1, r1, r2
 80040fe:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8004102:	4629      	mov	r1, r5
 8004104:	eb43 0101 	adc.w	r1, r3, r1
 8004108:	f8c7 129c 	str.w	r1, [r7, #668]	; 0x29c
 800410c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8004118:	4621      	mov	r1, r4
 800411a:	1889      	adds	r1, r1, r2
 800411c:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8004120:	4629      	mov	r1, r5
 8004122:	eb43 0101 	adc.w	r1, r3, r1
 8004126:	f8c7 1294 	str.w	r1, [r7, #660]	; 0x294
 800412a:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 8004136:	4621      	mov	r1, r4
 8004138:	1889      	adds	r1, r1, r2
 800413a:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 800413e:	4629      	mov	r1, r5
 8004140:	eb43 0101 	adc.w	r1, r3, r1
 8004144:	f8c7 128c 	str.w	r1, [r7, #652]	; 0x28c
 8004148:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 8004154:	4621      	mov	r1, r4
 8004156:	1889      	adds	r1, r1, r2
 8004158:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 800415c:	4629      	mov	r1, r5
 800415e:	eb43 0101 	adc.w	r1, r3, r1
 8004162:	f8c7 1284 	str.w	r1, [r7, #644]	; 0x284
 8004166:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 8004172:	4621      	mov	r1, r4
 8004174:	1889      	adds	r1, r1, r2
 8004176:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800417a:	4629      	mov	r1, r5
 800417c:	eb43 0101 	adc.w	r1, r3, r1
 8004180:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8004184:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 8004190:	4621      	mov	r1, r4
 8004192:	1889      	adds	r1, r1, r2
 8004194:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 8004198:	4629      	mov	r1, r5
 800419a:	eb43 0101 	adc.w	r1, r3, r1
 800419e:	f8c7 1274 	str.w	r1, [r7, #628]	; 0x274
 80041a2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 80041ae:	4621      	mov	r1, r4
 80041b0:	1851      	adds	r1, r2, r1
 80041b2:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80041b6:	4629      	mov	r1, r5
 80041b8:	eb43 0101 	adc.w	r1, r3, r1
 80041bc:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80041c0:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80041c4:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80041c8:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h6 = f0g6 + f1g5_2 + f2g4   + f3g3_2 + f4g2   + f5g1_2 + f6g0   + f7g9_38 + f8g8_19 + f9g7_38;
 80041cc:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 80041d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041d4:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	1884      	adds	r4, r0, r2
 80041de:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 80041e2:	eb41 0303 	adc.w	r3, r1, r3
 80041e6:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80041ea:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 80041f6:	4621      	mov	r1, r4
 80041f8:	1889      	adds	r1, r1, r2
 80041fa:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 80041fe:	4629      	mov	r1, r5
 8004200:	eb43 0101 	adc.w	r1, r3, r1
 8004204:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 8004208:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 8004214:	4621      	mov	r1, r4
 8004216:	1889      	adds	r1, r1, r2
 8004218:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 800421c:	4629      	mov	r1, r5
 800421e:	eb43 0101 	adc.w	r1, r3, r1
 8004222:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 8004226:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8004232:	4621      	mov	r1, r4
 8004234:	1889      	adds	r1, r1, r2
 8004236:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 800423a:	4629      	mov	r1, r5
 800423c:	eb43 0101 	adc.w	r1, r3, r1
 8004240:	f8c7 1254 	str.w	r1, [r7, #596]	; 0x254
 8004244:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 8004250:	4621      	mov	r1, r4
 8004252:	1889      	adds	r1, r1, r2
 8004254:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8004258:	4629      	mov	r1, r5
 800425a:	eb43 0101 	adc.w	r1, r3, r1
 800425e:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8004262:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 800426e:	4621      	mov	r1, r4
 8004270:	1889      	adds	r1, r1, r2
 8004272:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 8004276:	4629      	mov	r1, r5
 8004278:	eb43 0101 	adc.w	r1, r3, r1
 800427c:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 8004280:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 800428c:	4621      	mov	r1, r4
 800428e:	1889      	adds	r1, r1, r2
 8004290:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8004294:	4629      	mov	r1, r5
 8004296:	eb43 0101 	adc.w	r1, r3, r1
 800429a:	f8c7 123c 	str.w	r1, [r7, #572]	; 0x23c
 800429e:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 80042aa:	4621      	mov	r1, r4
 80042ac:	1889      	adds	r1, r1, r2
 80042ae:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 80042b2:	4629      	mov	r1, r5
 80042b4:	eb43 0101 	adc.w	r1, r3, r1
 80042b8:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 80042bc:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 80042c8:	4621      	mov	r1, r4
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80042d0:	4629      	mov	r1, r5
 80042d2:	eb43 0101 	adc.w	r1, r3, r1
 80042d6:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80042da:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80042de:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80042e2:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h7 = f0g7 + f1g6   + f2g5   + f3g4   + f4g3   + f5g2   + f6g1   + f7g0   + f8g9_19 + f9g8_19;
 80042e6:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80042ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042ee:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	1884      	adds	r4, r0, r2
 80042f8:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 80042fc:	eb41 0303 	adc.w	r3, r1, r3
 8004300:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8004304:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 8004310:	4621      	mov	r1, r4
 8004312:	1889      	adds	r1, r1, r2
 8004314:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8004318:	4629      	mov	r1, r5
 800431a:	eb43 0101 	adc.w	r1, r3, r1
 800431e:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 8004322:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 800432e:	4621      	mov	r1, r4
 8004330:	1889      	adds	r1, r1, r2
 8004332:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8004336:	4629      	mov	r1, r5
 8004338:	eb43 0101 	adc.w	r1, r3, r1
 800433c:	f8c7 121c 	str.w	r1, [r7, #540]	; 0x21c
 8004340:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 800434c:	4621      	mov	r1, r4
 800434e:	1889      	adds	r1, r1, r2
 8004350:	f8c7 1210 	str.w	r1, [r7, #528]	; 0x210
 8004354:	4629      	mov	r1, r5
 8004356:	eb43 0101 	adc.w	r1, r3, r1
 800435a:	f8c7 1214 	str.w	r1, [r7, #532]	; 0x214
 800435e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 800436a:	4621      	mov	r1, r4
 800436c:	1889      	adds	r1, r1, r2
 800436e:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8004372:	4629      	mov	r1, r5
 8004374:	eb43 0101 	adc.w	r1, r3, r1
 8004378:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 800437c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 8004388:	4621      	mov	r1, r4
 800438a:	1889      	adds	r1, r1, r2
 800438c:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 8004390:	4629      	mov	r1, r5
 8004392:	eb43 0101 	adc.w	r1, r3, r1
 8004396:	f8c7 1204 	str.w	r1, [r7, #516]	; 0x204
 800439a:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80043a6:	4621      	mov	r1, r4
 80043a8:	1889      	adds	r1, r1, r2
 80043aa:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 80043ae:	4629      	mov	r1, r5
 80043b0:	eb43 0101 	adc.w	r1, r3, r1
 80043b4:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 80043b8:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 80043c4:	4621      	mov	r1, r4
 80043c6:	1889      	adds	r1, r1, r2
 80043c8:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 80043cc:	4629      	mov	r1, r5
 80043ce:	eb43 0101 	adc.w	r1, r3, r1
 80043d2:	f8c7 11f4 	str.w	r1, [r7, #500]	; 0x1f4
 80043d6:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80043da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043de:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80043e2:	4621      	mov	r1, r4
 80043e4:	1851      	adds	r1, r2, r1
 80043e6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80043ea:	4629      	mov	r1, r5
 80043ec:	eb43 0101 	adc.w	r1, r3, r1
 80043f0:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80043f4:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80043f8:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 80043fc:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h8 = f0g8 + f1g7_2 + f2g6   + f3g5_2 + f4g4   + f5g3_2 + f6g2   + f7g1_2 + f8g0   + f9g9_38;
 8004400:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 8004404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004408:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	1884      	adds	r4, r0, r2
 8004412:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 8004416:	eb41 0303 	adc.w	r3, r1, r3
 800441a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800441e:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 800442a:	4621      	mov	r1, r4
 800442c:	1889      	adds	r1, r1, r2
 800442e:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8004432:	4629      	mov	r1, r5
 8004434:	eb43 0101 	adc.w	r1, r3, r1
 8004438:	f8c7 11e4 	str.w	r1, [r7, #484]	; 0x1e4
 800443c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8004448:	4621      	mov	r1, r4
 800444a:	1889      	adds	r1, r1, r2
 800444c:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 8004450:	4629      	mov	r1, r5
 8004452:	eb43 0101 	adc.w	r1, r3, r1
 8004456:	f8c7 11dc 	str.w	r1, [r7, #476]	; 0x1dc
 800445a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8004466:	4621      	mov	r1, r4
 8004468:	1889      	adds	r1, r1, r2
 800446a:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 800446e:	4629      	mov	r1, r5
 8004470:	eb43 0101 	adc.w	r1, r3, r1
 8004474:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 8004478:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 8004484:	4621      	mov	r1, r4
 8004486:	1889      	adds	r1, r1, r2
 8004488:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 800448c:	4629      	mov	r1, r5
 800448e:	eb43 0101 	adc.w	r1, r3, r1
 8004492:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 8004496:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 80044a2:	4621      	mov	r1, r4
 80044a4:	1889      	adds	r1, r1, r2
 80044a6:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 80044aa:	4629      	mov	r1, r5
 80044ac:	eb43 0101 	adc.w	r1, r3, r1
 80044b0:	f8c7 11c4 	str.w	r1, [r7, #452]	; 0x1c4
 80044b4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 80044c0:	4621      	mov	r1, r4
 80044c2:	1889      	adds	r1, r1, r2
 80044c4:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 80044c8:	4629      	mov	r1, r5
 80044ca:	eb43 0101 	adc.w	r1, r3, r1
 80044ce:	f8c7 11bc 	str.w	r1, [r7, #444]	; 0x1bc
 80044d2:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 80044de:	4621      	mov	r1, r4
 80044e0:	1889      	adds	r1, r1, r2
 80044e2:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 80044e6:	4629      	mov	r1, r5
 80044e8:	eb43 0101 	adc.w	r1, r3, r1
 80044ec:	f8c7 11b4 	str.w	r1, [r7, #436]	; 0x1b4
 80044f0:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80044f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f8:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 80044fc:	4621      	mov	r1, r4
 80044fe:	1851      	adds	r1, r2, r1
 8004500:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004504:	4629      	mov	r1, r5
 8004506:	eb43 0101 	adc.w	r1, r3, r1
 800450a:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800450e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8004512:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8004516:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h9 = f0g9 + f1g8   + f2g7   + f3g6   + f4g5   + f5g4   + f6g3   + f7g2   + f8g1   + f9g0   ;
 800451a:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800451e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004522:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	1884      	adds	r4, r0, r2
 800452c:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8004530:	eb41 0303 	adc.w	r3, r1, r3
 8004534:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8004538:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004544:	4621      	mov	r1, r4
 8004546:	1889      	adds	r1, r1, r2
 8004548:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 800454c:	4629      	mov	r1, r5
 800454e:	eb43 0101 	adc.w	r1, r3, r1
 8004552:	f8c7 11a4 	str.w	r1, [r7, #420]	; 0x1a4
 8004556:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8004562:	4621      	mov	r1, r4
 8004564:	1889      	adds	r1, r1, r2
 8004566:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800456a:	4629      	mov	r1, r5
 800456c:	eb43 0101 	adc.w	r1, r3, r1
 8004570:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 8004574:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 8004580:	4621      	mov	r1, r4
 8004582:	1889      	adds	r1, r1, r2
 8004584:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8004588:	4629      	mov	r1, r5
 800458a:	eb43 0101 	adc.w	r1, r3, r1
 800458e:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8004592:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 800459e:	4621      	mov	r1, r4
 80045a0:	1889      	adds	r1, r1, r2
 80045a2:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 80045a6:	4629      	mov	r1, r5
 80045a8:	eb43 0101 	adc.w	r1, r3, r1
 80045ac:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
 80045b0:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 80045bc:	4621      	mov	r1, r4
 80045be:	1889      	adds	r1, r1, r2
 80045c0:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 80045c4:	4629      	mov	r1, r5
 80045c6:	eb43 0101 	adc.w	r1, r3, r1
 80045ca:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 80045ce:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 80045da:	4621      	mov	r1, r4
 80045dc:	1889      	adds	r1, r1, r2
 80045de:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 80045e2:	4629      	mov	r1, r5
 80045e4:	eb43 0101 	adc.w	r1, r3, r1
 80045e8:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 80045ec:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 80045f8:	4621      	mov	r1, r4
 80045fa:	1889      	adds	r1, r1, r2
 80045fc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8004600:	4629      	mov	r1, r5
 8004602:	eb43 0101 	adc.w	r1, r3, r1
 8004606:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 800460a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8004616:	4621      	mov	r1, r4
 8004618:	1851      	adds	r1, r2, r1
 800461a:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800461e:	4629      	mov	r1, r5
 8004620:	eb43 0101 	adc.w	r1, r3, r1
 8004624:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8004628:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800462c:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8004630:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;

    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8004634:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f112 7800 	adds.w	r8, r2, #33554432	; 0x2000000
 8004640:	f143 0900 	adc.w	r9, r3, #0
 8004644:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	ea4f 6298 	mov.w	r2, r8, lsr #26
 8004654:	ea42 1289 	orr.w	r2, r2, r9, lsl #6
 8004658:	ea4f 63a9 	mov.w	r3, r9, asr #26
 800465c:	e9c1 2300 	strd	r2, r3, [r1]
    h1 += carry0;
 8004660:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004664:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8004668:	e9d2 0100 	ldrd	r0, r1, [r2]
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	1884      	adds	r4, r0, r2
 8004672:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8004676:	eb41 0303 	adc.w	r3, r1, r3
 800467a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800467e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8004682:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8004686:	e9c2 3400 	strd	r3, r4, [r2]
    h0 -= carry0 << 26;
 800468a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f04f 0100 	mov.w	r1, #0
 800469a:	0699      	lsls	r1, r3, #26
 800469c:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80046a0:	0690      	lsls	r0, r2, #26
 80046a2:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	1a14      	subs	r4, r2, r0
 80046ac:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80046b0:	eb63 0301 	sbc.w	r3, r3, r1
 80046b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80046b8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80046bc:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80046c0:	e9c2 3400 	strd	r3, r4, [r2]
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 80046c4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f112 7a00 	adds.w	sl, r2, #33554432	; 0x2000000
 80046d0:	f143 0b00 	adc.w	fp, r3, #0
 80046d4:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	ea4f 629a 	mov.w	r2, sl, lsr #26
 80046e4:	ea42 128b 	orr.w	r2, r2, fp, lsl #6
 80046e8:	ea4f 63ab 	mov.w	r3, fp, asr #26
 80046ec:	e9c1 2300 	strd	r2, r3, [r1]
    h5 += carry4;
 80046f0:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80046f4:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80046f8:	e9d2 0100 	ldrd	r0, r1, [r2]
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	1884      	adds	r4, r0, r2
 8004702:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004706:	eb41 0303 	adc.w	r3, r1, r3
 800470a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800470e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8004712:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8004716:	e9c2 3400 	strd	r3, r4, [r2]
    h4 -= carry4 << 26;
 800471a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f04f 0100 	mov.w	r1, #0
 800472a:	0699      	lsls	r1, r3, #26
 800472c:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8004730:	0690      	lsls	r0, r2, #26
 8004732:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	1a14      	subs	r4, r2, r0
 800473c:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004740:	eb63 0301 	sbc.w	r3, r3, r1
 8004744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004748:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800474c:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8004750:	e9c2 3400 	strd	r3, r4, [r2]

    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 8004754:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8004760:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8004764:	f143 0300 	adc.w	r3, r3, #0
 8004768:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800476c:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8004770:	f04f 0200 	mov.w	r2, #0
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 800477c:	4620      	mov	r0, r4
 800477e:	0e42      	lsrs	r2, r0, #25
 8004780:	4628      	mov	r0, r5
 8004782:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8004786:	4628      	mov	r0, r5
 8004788:	1643      	asrs	r3, r0, #25
 800478a:	e9c1 2300 	strd	r2, r3, [r1]
    h2 += carry1;
 800478e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8004792:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8004796:	e9d2 0100 	ldrd	r0, r1, [r2]
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	1884      	adds	r4, r0, r2
 80047a0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80047a4:	eb41 0303 	adc.w	r3, r1, r3
 80047a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047ac:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80047b0:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80047b4:	e9c2 3400 	strd	r3, r4, [r2]
    h1 -= carry1 << 25;
 80047b8:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f04f 0000 	mov.w	r0, #0
 80047c4:	f04f 0100 	mov.w	r1, #0
 80047c8:	0659      	lsls	r1, r3, #25
 80047ca:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80047ce:	0650      	lsls	r0, r2, #25
 80047d0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	1a14      	subs	r4, r2, r0
 80047da:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80047de:	eb63 0301 	sbc.w	r3, r3, r1
 80047e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047e6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80047ea:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 80047ee:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 80047f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80047f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fa:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80047fe:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8004802:	f143 0300 	adc.w	r3, r3, #0
 8004806:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800480a:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800481a:	4620      	mov	r0, r4
 800481c:	0e42      	lsrs	r2, r0, #25
 800481e:	4628      	mov	r0, r5
 8004820:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8004824:	4628      	mov	r0, r5
 8004826:	1643      	asrs	r3, r0, #25
 8004828:	e9c1 2300 	strd	r2, r3, [r1]
    h6 += carry5;
 800482c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004830:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8004834:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	1884      	adds	r4, r0, r2
 800483e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004842:	eb41 0303 	adc.w	r3, r1, r3
 8004846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800484a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800484e:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8004852:	e9c2 3400 	strd	r3, r4, [r2]
    h5 -= carry5 << 25;
 8004856:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f04f 0000 	mov.w	r0, #0
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	0659      	lsls	r1, r3, #25
 8004868:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 800486c:	0650      	lsls	r0, r2, #25
 800486e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	1a14      	subs	r4, r2, r0
 8004878:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800487c:	eb63 0301 	sbc.w	r3, r3, r1
 8004880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004884:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8004888:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800488c:	e9c2 3400 	strd	r3, r4, [r2]

    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 8004890:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 800489c:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80048a0:	f143 0300 	adc.w	r3, r3, #0
 80048a4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80048a8:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80048b8:	4620      	mov	r0, r4
 80048ba:	0e82      	lsrs	r2, r0, #26
 80048bc:	4628      	mov	r0, r5
 80048be:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80048c2:	4628      	mov	r0, r5
 80048c4:	1683      	asrs	r3, r0, #26
 80048c6:	e9c1 2300 	strd	r2, r3, [r1]
    h3 += carry2;
 80048ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80048ce:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 80048d2:	e9d2 0100 	ldrd	r0, r1, [r2]
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	1884      	adds	r4, r0, r2
 80048dc:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80048e0:	eb41 0303 	adc.w	r3, r1, r3
 80048e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048e8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80048ec:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 80048f0:	e9c2 3400 	strd	r3, r4, [r2]
    h2 -= carry2 << 26;
 80048f4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f04f 0000 	mov.w	r0, #0
 8004900:	f04f 0100 	mov.w	r1, #0
 8004904:	0699      	lsls	r1, r3, #26
 8004906:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 800490a:	0690      	lsls	r0, r2, #26
 800490c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004914:	1a14      	subs	r4, r2, r0
 8004916:	67bc      	str	r4, [r7, #120]	; 0x78
 8004918:	eb63 0301 	sbc.w	r3, r3, r1
 800491c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800491e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004922:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8004926:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 800492a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8004936:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800493a:	f143 0300 	adc.w	r3, r3, #0
 800493e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004942:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004952:	4620      	mov	r0, r4
 8004954:	0e82      	lsrs	r2, r0, #26
 8004956:	4628      	mov	r0, r5
 8004958:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800495c:	4628      	mov	r0, r5
 800495e:	1683      	asrs	r3, r0, #26
 8004960:	e9c1 2300 	strd	r2, r3, [r1]
    h7 += carry6;
 8004964:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004968:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800496c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	1884      	adds	r4, r0, r2
 8004976:	673c      	str	r4, [r7, #112]	; 0x70
 8004978:	eb41 0303 	adc.w	r3, r1, r3
 800497c:	677b      	str	r3, [r7, #116]	; 0x74
 800497e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8004982:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8004986:	e9c2 3400 	strd	r3, r4, [r2]
    h6 -= carry6 << 26;
 800498a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f04f 0100 	mov.w	r1, #0
 800499a:	0699      	lsls	r1, r3, #26
 800499c:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80049a0:	0690      	lsls	r0, r2, #26
 80049a2:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	1a14      	subs	r4, r2, r0
 80049ac:	66bc      	str	r4, [r7, #104]	; 0x68
 80049ae:	eb63 0301 	sbc.w	r3, r3, r1
 80049b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049b4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80049b8:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80049bc:	e9c2 3400 	strd	r3, r4, [r2]

    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 80049c0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80049cc:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80049d0:	f143 0300 	adc.w	r3, r3, #0
 80049d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80049d8:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 80049e8:	4620      	mov	r0, r4
 80049ea:	0e42      	lsrs	r2, r0, #25
 80049ec:	4628      	mov	r0, r5
 80049ee:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 80049f2:	4628      	mov	r0, r5
 80049f4:	1643      	asrs	r3, r0, #25
 80049f6:	e9c1 2300 	strd	r2, r3, [r1]
    h4 += carry3;
 80049fa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80049fe:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8004a02:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	1884      	adds	r4, r0, r2
 8004a0c:	663c      	str	r4, [r7, #96]	; 0x60
 8004a0e:	eb41 0303 	adc.w	r3, r1, r3
 8004a12:	667b      	str	r3, [r7, #100]	; 0x64
 8004a14:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004a18:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8004a1c:	e9c2 3400 	strd	r3, r4, [r2]
    h3 -= carry3 << 25;
 8004a20:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	f04f 0000 	mov.w	r0, #0
 8004a2c:	f04f 0100 	mov.w	r1, #0
 8004a30:	0659      	lsls	r1, r3, #25
 8004a32:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8004a36:	0650      	lsls	r0, r2, #25
 8004a38:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	1a14      	subs	r4, r2, r0
 8004a42:	65bc      	str	r4, [r7, #88]	; 0x58
 8004a44:	eb63 0301 	sbc.w	r3, r3, r1
 8004a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a4a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004a4e:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8004a52:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 8004a56:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8004a62:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8004a66:	f143 0300 	adc.w	r3, r3, #0
 8004a6a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004a6e:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8004a7e:	4620      	mov	r0, r4
 8004a80:	0e42      	lsrs	r2, r0, #25
 8004a82:	4628      	mov	r0, r5
 8004a84:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8004a88:	4628      	mov	r0, r5
 8004a8a:	1643      	asrs	r3, r0, #25
 8004a8c:	e9c1 2300 	strd	r2, r3, [r1]
    h8 += carry7;
 8004a90:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004a94:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8004a98:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	1884      	adds	r4, r0, r2
 8004aa2:	653c      	str	r4, [r7, #80]	; 0x50
 8004aa4:	eb41 0303 	adc.w	r3, r1, r3
 8004aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8004aaa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004aae:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8004ab2:	e9c2 3400 	strd	r3, r4, [r2]
    h7 -= carry7 << 25;
 8004ab6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f04f 0000 	mov.w	r0, #0
 8004ac2:	f04f 0100 	mov.w	r1, #0
 8004ac6:	0659      	lsls	r1, r3, #25
 8004ac8:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8004acc:	0650      	lsls	r0, r2, #25
 8004ace:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	1a14      	subs	r4, r2, r0
 8004ad8:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ada:	eb63 0301 	sbc.w	r3, r3, r1
 8004ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004ae4:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8004ae8:	e9c2 3400 	strd	r3, r4, [r2]

    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8004aec:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8004af8:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8004afc:	f143 0300 	adc.w	r3, r3, #0
 8004b00:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8004b04:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8004b14:	4620      	mov	r0, r4
 8004b16:	0e82      	lsrs	r2, r0, #26
 8004b18:	4628      	mov	r0, r5
 8004b1a:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004b1e:	4628      	mov	r0, r5
 8004b20:	1683      	asrs	r3, r0, #26
 8004b22:	e9c1 2300 	strd	r2, r3, [r1]
    h5 += carry4;
 8004b26:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8004b2a:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8004b2e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	1884      	adds	r4, r0, r2
 8004b38:	643c      	str	r4, [r7, #64]	; 0x40
 8004b3a:	eb41 0303 	adc.w	r3, r1, r3
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b40:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004b44:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8004b48:	e9c2 3400 	strd	r3, r4, [r2]
    h4 -= carry4 << 26;
 8004b4c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f04f 0000 	mov.w	r0, #0
 8004b58:	f04f 0100 	mov.w	r1, #0
 8004b5c:	0699      	lsls	r1, r3, #26
 8004b5e:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8004b62:	0690      	lsls	r0, r2, #26
 8004b64:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	1a14      	subs	r4, r2, r0
 8004b6e:	63bc      	str	r4, [r7, #56]	; 0x38
 8004b70:	eb63 0301 	sbc.w	r3, r3, r1
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b76:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004b7a:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8004b7e:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 8004b82:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8004b8e:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8004b92:	f143 0300 	adc.w	r3, r3, #0
 8004b96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004b9a:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8004baa:	4620      	mov	r0, r4
 8004bac:	0e82      	lsrs	r2, r0, #26
 8004bae:	4628      	mov	r0, r5
 8004bb0:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	1683      	asrs	r3, r0, #26
 8004bb8:	e9c1 2300 	strd	r2, r3, [r1]
    h9 += carry8;
 8004bbc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8004bc0:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8004bc4:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	1884      	adds	r4, r0, r2
 8004bce:	633c      	str	r4, [r7, #48]	; 0x30
 8004bd0:	eb41 0303 	adc.w	r3, r1, r3
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004bda:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8004bde:	e9c2 3400 	strd	r3, r4, [r2]
    h8 -= carry8 << 26;
 8004be2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f04f 0000 	mov.w	r0, #0
 8004bee:	f04f 0100 	mov.w	r1, #0
 8004bf2:	0699      	lsls	r1, r3, #26
 8004bf4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8004bf8:	0690      	lsls	r0, r2, #26
 8004bfa:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	1a14      	subs	r4, r2, r0
 8004c04:	62bc      	str	r4, [r7, #40]	; 0x28
 8004c06:	eb63 0301 	sbc.w	r3, r3, r1
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004c10:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8004c14:	e9c2 3400 	strd	r3, r4, [r2]

    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 8004c18:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8004c24:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8004c28:	f143 0300 	adc.w	r3, r3, #0
 8004c2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c30:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8004c40:	4620      	mov	r0, r4
 8004c42:	0e42      	lsrs	r2, r0, #25
 8004c44:	4628      	mov	r0, r5
 8004c46:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	1643      	asrs	r3, r0, #25
 8004c4e:	e9c1 2300 	strd	r2, r3, [r1]
    h0 += carry9 * 19;
 8004c52:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8004c56:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	462b      	mov	r3, r5
 8004c5e:	f04f 0000 	mov.w	r0, #0
 8004c62:	f04f 0100 	mov.w	r1, #0
 8004c66:	00d9      	lsls	r1, r3, #3
 8004c68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c6c:	00d0      	lsls	r0, r2, #3
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	1912      	adds	r2, r2, r4
 8004c74:	eb45 0303 	adc.w	r3, r5, r3
 8004c78:	1891      	adds	r1, r2, r2
 8004c7a:	6239      	str	r1, [r7, #32]
 8004c7c:	415b      	adcs	r3, r3
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c84:	1911      	adds	r1, r2, r4
 8004c86:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8004c8a:	416b      	adcs	r3, r5
 8004c8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c90:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	1851      	adds	r1, r2, r1
 8004ca0:	61b9      	str	r1, [r7, #24]
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	eb43 0101 	adc.w	r1, r3, r1
 8004ca8:	61f9      	str	r1, [r7, #28]
 8004caa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004cae:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004cb2:	e9c2 3400 	strd	r3, r4, [r2]
    h9 -= carry9 << 25;
 8004cb6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8004cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	064b      	lsls	r3, r1, #25
 8004cc8:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8004ccc:	0642      	lsls	r2, r0, #25
 8004cce:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8004cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cd6:	1a84      	subs	r4, r0, r2
 8004cd8:	613c      	str	r4, [r7, #16]
 8004cda:	eb61 0303 	sbc.w	r3, r1, r3
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004ce4:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8004ce8:	e9c2 3400 	strd	r3, r4, [r2]

    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8004cec:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8004cf8:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8004cfc:	f143 0300 	adc.w	r3, r3, #0
 8004d00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d04:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8004d14:	4620      	mov	r0, r4
 8004d16:	0e82      	lsrs	r2, r0, #26
 8004d18:	4628      	mov	r0, r5
 8004d1a:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	1683      	asrs	r3, r0, #26
 8004d22:	e9c1 2300 	strd	r2, r3, [r1]
    h1 += carry0;
 8004d26:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d2a:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8004d2e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	1884      	adds	r4, r0, r2
 8004d38:	60bc      	str	r4, [r7, #8]
 8004d3a:	eb41 0303 	adc.w	r3, r1, r3
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004d44:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8004d48:	e9c2 3400 	strd	r3, r4, [r2]
    h0 -= carry0 << 26;
 8004d4c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004d50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	068b      	lsls	r3, r1, #26
 8004d5e:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8004d62:	0682      	lsls	r2, r0, #26
 8004d64:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8004d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d6c:	1a84      	subs	r4, r0, r2
 8004d6e:	603c      	str	r4, [r7, #0]
 8004d70:	eb61 0303 	sbc.w	r3, r1, r3
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d7a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004d7e:	e9c2 3400 	strd	r3, r4, [r2]

    h[0] = (int32_t) h0;
 8004d82:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 8004d90:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3304      	adds	r3, #4
 8004d98:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 8004da0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3308      	adds	r3, #8
 8004da8:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 8004db0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	330c      	adds	r3, #12
 8004db8:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 8004dc0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3310      	adds	r3, #16
 8004dc8:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8004dcc:	6812      	ldr	r2, [r2, #0]
 8004dce:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 8004dd0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 8004de0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3318      	adds	r3, #24
 8004de8:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 8004df0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	331c      	adds	r3, #28
 8004df8:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 8004e00:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3320      	adds	r3, #32
 8004e08:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 8004e10:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3324      	adds	r3, #36	; 0x24
 8004e18:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	601a      	str	r2, [r3, #0]
}
 8004e20:	bf00      	nop
 8004e22:	f607 074c 	addw	r7, r7, #2124	; 0x84c
 8004e26:	46bd      	mov	sp, r7
 8004e28:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004e2c:	4770      	bx	lr

08004e2e <fe_neg>:

Postconditions:
   |h| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.
*/

void fe_neg(fe h, const fe f) {
 8004e2e:	b480      	push	{r7}
 8004e30:	b097      	sub	sp, #92	; 0x5c
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]
    int32_t f0 = f[0];
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t f1 = f[1];
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t f2 = f[2];
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t f3 = f[3];
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t f4 = f[4];
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t f5 = f[5];
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t f6 = f[6];
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t f7 = f[7];
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t f8 = f[8];
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t f9 = f[9];
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h0 = -f0;
 8004e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e76:	425b      	negs	r3, r3
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h1 = -f1;
 8004e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7c:	425b      	negs	r3, r3
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h2 = -f2;
 8004e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e82:	425b      	negs	r3, r3
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h3 = -f3;
 8004e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e88:	425b      	negs	r3, r3
 8004e8a:	623b      	str	r3, [r7, #32]
    int32_t h4 = -f4;
 8004e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e8e:	425b      	negs	r3, r3
 8004e90:	61fb      	str	r3, [r7, #28]
    int32_t h5 = -f5;
 8004e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e94:	425b      	negs	r3, r3
 8004e96:	61bb      	str	r3, [r7, #24]
    int32_t h6 = -f6;
 8004e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9a:	425b      	negs	r3, r3
 8004e9c:	617b      	str	r3, [r7, #20]
    int32_t h7 = -f7;
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	425b      	negs	r3, r3
 8004ea2:	613b      	str	r3, [r7, #16]
    int32_t h8 = -f8;
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea6:	425b      	negs	r3, r3
 8004ea8:	60fb      	str	r3, [r7, #12]
    int32_t h9 = -f9;
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	425b      	negs	r3, r3
 8004eae:	60bb      	str	r3, [r7, #8]

    h[0] = h0;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb4:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ebc:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec4:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	6a3a      	ldr	r2, [r7, #32]
 8004ecc:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3310      	adds	r3, #16
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3314      	adds	r3, #20
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3318      	adds	r3, #24
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	331c      	adds	r3, #28
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3320      	adds	r3, #32
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3324      	adds	r3, #36	; 0x24
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	601a      	str	r2, [r3, #0]
}
 8004efe:	bf00      	nop
 8004f00:	375c      	adds	r7, #92	; 0x5c
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <fe_pow22523>:


void fe_pow22523(fe out, const fe z) {
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b0a2      	sub	sp, #136	; 0x88
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
    fe t0;
    fe t1;
    fe t2;
    int i;
    fe_sq(t0, z);
 8004f14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 f99b 	bl	8005256 <fe_sq>

    for (i = 1; i < 1; ++i) {
 8004f20:	2301      	movs	r3, #1
 8004f22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f26:	e00c      	b.n	8004f42 <fe_pow22523+0x38>
        fe_sq(t0, t0);
 8004f28:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004f2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 f98f 	bl	8005256 <fe_sq>
    for (i = 1; i < 1; ++i) {
 8004f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	ddee      	ble.n	8004f28 <fe_pow22523+0x1e>
    }

    fe_sq(t1, t0);
 8004f4a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004f4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f52:	4611      	mov	r1, r2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f97e 	bl	8005256 <fe_sq>

    for (i = 1; i < 2; ++i) {
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f60:	e00c      	b.n	8004f7c <fe_pow22523+0x72>
        fe_sq(t1, t1);
 8004f62:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 f972 	bl	8005256 <fe_sq>
    for (i = 1; i < 2; ++i) {
 8004f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f76:	3301      	adds	r3, #1
 8004f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	ddee      	ble.n	8004f62 <fe_pow22523+0x58>
    }

    fe_mul(t1, z, t1);
 8004f84:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f8c:	6839      	ldr	r1, [r7, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd fa52 	bl	8002438 <fe_mul>
    fe_mul(t0, t0, t1);
 8004f94:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004f98:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004f9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fd fa49 	bl	8002438 <fe_mul>
    fe_sq(t0, t0);
 8004fa6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004faa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f950 	bl	8005256 <fe_sq>

    for (i = 1; i < 1; ++i) {
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fbc:	e00c      	b.n	8004fd8 <fe_pow22523+0xce>
        fe_sq(t0, t0);
 8004fbe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004fc2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 f944 	bl	8005256 <fe_sq>
    for (i = 1; i < 1; ++i) {
 8004fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	ddee      	ble.n	8004fbe <fe_pow22523+0xb4>
    }

    fe_mul(t0, t1, t0);
 8004fe0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004fe4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004fe8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fd fa23 	bl	8002438 <fe_mul>
    fe_sq(t1, t0);
 8004ff2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004ff6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f92a 	bl	8005256 <fe_sq>

    for (i = 1; i < 5; ++i) {
 8005002:	2301      	movs	r3, #1
 8005004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005008:	e00c      	b.n	8005024 <fe_pow22523+0x11a>
        fe_sq(t1, t1);
 800500a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800500e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f000 f91e 	bl	8005256 <fe_sq>
    for (i = 1; i < 5; ++i) {
 800501a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800501e:	3301      	adds	r3, #1
 8005020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005028:	2b04      	cmp	r3, #4
 800502a:	ddee      	ble.n	800500a <fe_pow22523+0x100>
    }

    fe_mul(t0, t1, t0);
 800502c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005030:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005034:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005038:	4618      	mov	r0, r3
 800503a:	f7fd f9fd 	bl	8002438 <fe_mul>
    fe_sq(t1, t0);
 800503e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005042:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f000 f904 	bl	8005256 <fe_sq>

    for (i = 1; i < 10; ++i) {
 800504e:	2301      	movs	r3, #1
 8005050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005054:	e00c      	b.n	8005070 <fe_pow22523+0x166>
        fe_sq(t1, t1);
 8005056:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800505a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f000 f8f8 	bl	8005256 <fe_sq>
    for (i = 1; i < 10; ++i) {
 8005066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800506a:	3301      	adds	r3, #1
 800506c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005074:	2b09      	cmp	r3, #9
 8005076:	ddee      	ble.n	8005056 <fe_pow22523+0x14c>
    }

    fe_mul(t1, t1, t0);
 8005078:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800507c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005080:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005084:	4618      	mov	r0, r3
 8005086:	f7fd f9d7 	bl	8002438 <fe_mul>
    fe_sq(t2, t1);
 800508a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800508e:	f107 030c 	add.w	r3, r7, #12
 8005092:	4611      	mov	r1, r2
 8005094:	4618      	mov	r0, r3
 8005096:	f000 f8de 	bl	8005256 <fe_sq>

    for (i = 1; i < 20; ++i) {
 800509a:	2301      	movs	r3, #1
 800509c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050a0:	e00c      	b.n	80050bc <fe_pow22523+0x1b2>
        fe_sq(t2, t2);
 80050a2:	f107 020c 	add.w	r2, r7, #12
 80050a6:	f107 030c 	add.w	r3, r7, #12
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 f8d2 	bl	8005256 <fe_sq>
    for (i = 1; i < 20; ++i) {
 80050b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050b6:	3301      	adds	r3, #1
 80050b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050c0:	2b13      	cmp	r3, #19
 80050c2:	ddee      	ble.n	80050a2 <fe_pow22523+0x198>
    }

    fe_mul(t1, t2, t1);
 80050c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80050c8:	f107 010c 	add.w	r1, r7, #12
 80050cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fd f9b1 	bl	8002438 <fe_mul>
    fe_sq(t1, t1);
 80050d6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80050da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050de:	4611      	mov	r1, r2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 f8b8 	bl	8005256 <fe_sq>

    for (i = 1; i < 10; ++i) {
 80050e6:	2301      	movs	r3, #1
 80050e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050ec:	e00c      	b.n	8005108 <fe_pow22523+0x1fe>
        fe_sq(t1, t1);
 80050ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80050f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 f8ac 	bl	8005256 <fe_sq>
    for (i = 1; i < 10; ++i) {
 80050fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005102:	3301      	adds	r3, #1
 8005104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800510c:	2b09      	cmp	r3, #9
 800510e:	ddee      	ble.n	80050ee <fe_pow22523+0x1e4>
    }

    fe_mul(t0, t1, t0);
 8005110:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005114:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005118:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800511c:	4618      	mov	r0, r3
 800511e:	f7fd f98b 	bl	8002438 <fe_mul>
    fe_sq(t1, t0);
 8005122:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005126:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800512a:	4611      	mov	r1, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f000 f892 	bl	8005256 <fe_sq>

    for (i = 1; i < 50; ++i) {
 8005132:	2301      	movs	r3, #1
 8005134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005138:	e00c      	b.n	8005154 <fe_pow22523+0x24a>
        fe_sq(t1, t1);
 800513a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800513e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f000 f886 	bl	8005256 <fe_sq>
    for (i = 1; i < 50; ++i) {
 800514a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800514e:	3301      	adds	r3, #1
 8005150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005158:	2b31      	cmp	r3, #49	; 0x31
 800515a:	ddee      	ble.n	800513a <fe_pow22523+0x230>
    }

    fe_mul(t1, t1, t0);
 800515c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005160:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005164:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005168:	4618      	mov	r0, r3
 800516a:	f7fd f965 	bl	8002438 <fe_mul>
    fe_sq(t2, t1);
 800516e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005172:	f107 030c 	add.w	r3, r7, #12
 8005176:	4611      	mov	r1, r2
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f86c 	bl	8005256 <fe_sq>

    for (i = 1; i < 100; ++i) {
 800517e:	2301      	movs	r3, #1
 8005180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005184:	e00c      	b.n	80051a0 <fe_pow22523+0x296>
        fe_sq(t2, t2);
 8005186:	f107 020c 	add.w	r2, r7, #12
 800518a:	f107 030c 	add.w	r3, r7, #12
 800518e:	4611      	mov	r1, r2
 8005190:	4618      	mov	r0, r3
 8005192:	f000 f860 	bl	8005256 <fe_sq>
    for (i = 1; i < 100; ++i) {
 8005196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800519a:	3301      	adds	r3, #1
 800519c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051a4:	2b63      	cmp	r3, #99	; 0x63
 80051a6:	ddee      	ble.n	8005186 <fe_pow22523+0x27c>
    }

    fe_mul(t1, t2, t1);
 80051a8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80051ac:	f107 010c 	add.w	r1, r7, #12
 80051b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fd f93f 	bl	8002438 <fe_mul>
    fe_sq(t1, t1);
 80051ba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80051be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f846 	bl	8005256 <fe_sq>

    for (i = 1; i < 50; ++i) {
 80051ca:	2301      	movs	r3, #1
 80051cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051d0:	e00c      	b.n	80051ec <fe_pow22523+0x2e2>
        fe_sq(t1, t1);
 80051d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80051d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 f83a 	bl	8005256 <fe_sq>
    for (i = 1; i < 50; ++i) {
 80051e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051e6:	3301      	adds	r3, #1
 80051e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051f0:	2b31      	cmp	r3, #49	; 0x31
 80051f2:	ddee      	ble.n	80051d2 <fe_pow22523+0x2c8>
    }

    fe_mul(t0, t1, t0);
 80051f4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80051f8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80051fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005200:	4618      	mov	r0, r3
 8005202:	f7fd f919 	bl	8002438 <fe_mul>
    fe_sq(t0, t0);
 8005206:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800520a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800520e:	4611      	mov	r1, r2
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f820 	bl	8005256 <fe_sq>

    for (i = 1; i < 2; ++i) {
 8005216:	2301      	movs	r3, #1
 8005218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800521c:	e00c      	b.n	8005238 <fe_pow22523+0x32e>
        fe_sq(t0, t0);
 800521e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005222:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005226:	4611      	mov	r1, r2
 8005228:	4618      	mov	r0, r3
 800522a:	f000 f814 	bl	8005256 <fe_sq>
    for (i = 1; i < 2; ++i) {
 800522e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005232:	3301      	adds	r3, #1
 8005234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800523c:	2b01      	cmp	r3, #1
 800523e:	ddee      	ble.n	800521e <fe_pow22523+0x314>
    }

    fe_mul(out, t0, z);
 8005240:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7fd f8f5 	bl	8002438 <fe_mul>
    return;
 800524e:	bf00      	nop
}
 8005250:	3788      	adds	r7, #136	; 0x88
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <fe_sq>:

/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq(fe h, const fe f) {
 8005256:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800525a:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
 800525e:	af00      	add	r7, sp, #0
 8005260:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8005264:	6018      	str	r0, [r3, #0]
 8005266:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800526a:	6019      	str	r1, [r3, #0]
    int32_t f0 = f[0];
 800526c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
    int32_t f1 = f[1];
 8005278:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
    int32_t f2 = f[2];
 8005284:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    int32_t f3 = f[3];
 8005290:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    int32_t f4 = f[4];
 800529c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    int32_t f5 = f[5];
 80052a8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    int32_t f6 = f[6];
 80052b4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    int32_t f7 = f[7];
 80052c0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
    int32_t f8 = f[8];
 80052cc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    int32_t f9 = f[9];
 80052d8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    int32_t f0_2 = 2 * f0;
 80052e4:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
    int32_t f1_2 = 2 * f1;
 80052ee:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
    int32_t f2_2 = 2 * f2;
 80052f8:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    int32_t f3_2 = 2 * f3;
 8005302:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
    int32_t f4_2 = 2 * f4;
 800530c:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    int32_t f5_2 = 2 * f5;
 8005316:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    int32_t f6_2 = 2 * f6;
 8005320:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
    int32_t f7_2 = 2 * f7;
 800532a:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    int32_t f5_38 = 38 * f5; /* 1.959375*2^30 */
 8005334:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 8005338:	2326      	movs	r3, #38	; 0x26
 800533a:	fb03 f302 	mul.w	r3, r3, r2
 800533e:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
    int32_t f6_19 = 19 * f6; /* 1.959375*2^30 */
 8005342:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 8005346:	4613      	mov	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	4413      	add	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
    int32_t f7_38 = 38 * f7; /* 1.959375*2^30 */
 8005354:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 8005358:	2326      	movs	r3, #38	; 0x26
 800535a:	fb03 f302 	mul.w	r3, r3, r2
 800535e:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
    int32_t f8_19 = 19 * f8; /* 1.959375*2^30 */
 8005362:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8005366:	4613      	mov	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4413      	add	r3, r2
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	4413      	add	r3, r2
 8005370:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
    int32_t f9_38 = 38 * f9; /* 1.959375*2^30 */
 8005374:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 8005378:	2326      	movs	r3, #38	; 0x26
 800537a:	fb03 f302 	mul.w	r3, r3, r2
 800537e:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
    int64_t f0f0    = f0   * (int64_t) f0;
 8005382:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8005386:	4618      	mov	r0, r3
 8005388:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800538c:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8005390:	461a      	mov	r2, r3
 8005392:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005396:	fb02 f501 	mul.w	r5, r2, r1
 800539a:	fb00 f403 	mul.w	r4, r0, r3
 800539e:	442c      	add	r4, r5
 80053a0:	fba0 2302 	umull	r2, r3, r0, r2
 80053a4:	18e1      	adds	r1, r4, r3
 80053a6:	460b      	mov	r3, r1
 80053a8:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80053ac:	e9c1 2300 	strd	r2, r3, [r1]
 80053b0:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80053b4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f1_2  = f0_2 * (int64_t) f1;
 80053b8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80053bc:	4618      	mov	r0, r3
 80053be:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80053c2:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80053c6:	461a      	mov	r2, r3
 80053c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80053cc:	fb02 f501 	mul.w	r5, r2, r1
 80053d0:	fb00 f403 	mul.w	r4, r0, r3
 80053d4:	442c      	add	r4, r5
 80053d6:	fba0 2302 	umull	r2, r3, r0, r2
 80053da:	18e1      	adds	r1, r4, r3
 80053dc:	460b      	mov	r3, r1
 80053de:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80053e2:	e9c1 2300 	strd	r2, r3, [r1]
 80053e6:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80053ea:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f2_2  = f0_2 * (int64_t) f2;
 80053ee:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80053f2:	4618      	mov	r0, r3
 80053f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80053f8:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80053fc:	461a      	mov	r2, r3
 80053fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005402:	fb02 f501 	mul.w	r5, r2, r1
 8005406:	fb00 f403 	mul.w	r4, r0, r3
 800540a:	442c      	add	r4, r5
 800540c:	fba0 2302 	umull	r2, r3, r0, r2
 8005410:	18e1      	adds	r1, r4, r3
 8005412:	460b      	mov	r3, r1
 8005414:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8005418:	e9c1 2300 	strd	r2, r3, [r1]
 800541c:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8005420:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f3_2  = f0_2 * (int64_t) f3;
 8005424:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005428:	4618      	mov	r0, r3
 800542a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800542e:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8005432:	461a      	mov	r2, r3
 8005434:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005438:	fb02 f501 	mul.w	r5, r2, r1
 800543c:	fb00 f403 	mul.w	r4, r0, r3
 8005440:	442c      	add	r4, r5
 8005442:	fba0 2302 	umull	r2, r3, r0, r2
 8005446:	18e1      	adds	r1, r4, r3
 8005448:	460b      	mov	r3, r1
 800544a:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 800544e:	e9c1 2300 	strd	r2, r3, [r1]
 8005452:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8005456:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f4_2  = f0_2 * (int64_t) f4;
 800545a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800545e:	4618      	mov	r0, r3
 8005460:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005464:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005468:	461a      	mov	r2, r3
 800546a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800546e:	fb02 f501 	mul.w	r5, r2, r1
 8005472:	fb00 f403 	mul.w	r4, r0, r3
 8005476:	442c      	add	r4, r5
 8005478:	fba0 2302 	umull	r2, r3, r0, r2
 800547c:	18e1      	adds	r1, r4, r3
 800547e:	460b      	mov	r3, r1
 8005480:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8005484:	e9c1 2300 	strd	r2, r3, [r1]
 8005488:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 800548c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f5_2  = f0_2 * (int64_t) f5;
 8005490:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005494:	4618      	mov	r0, r3
 8005496:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800549a:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800549e:	461a      	mov	r2, r3
 80054a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80054a4:	fb02 f501 	mul.w	r5, r2, r1
 80054a8:	fb00 f403 	mul.w	r4, r0, r3
 80054ac:	442c      	add	r4, r5
 80054ae:	fba0 2302 	umull	r2, r3, r0, r2
 80054b2:	18e1      	adds	r1, r4, r3
 80054b4:	460b      	mov	r3, r1
 80054b6:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80054ba:	e9c1 2300 	strd	r2, r3, [r1]
 80054be:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80054c2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f6_2  = f0_2 * (int64_t) f6;
 80054c6:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80054ca:	4618      	mov	r0, r3
 80054cc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80054d0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80054d4:	461a      	mov	r2, r3
 80054d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80054da:	fb02 f501 	mul.w	r5, r2, r1
 80054de:	fb00 f403 	mul.w	r4, r0, r3
 80054e2:	442c      	add	r4, r5
 80054e4:	fba0 2302 	umull	r2, r3, r0, r2
 80054e8:	18e1      	adds	r1, r4, r3
 80054ea:	460b      	mov	r3, r1
 80054ec:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 80054f0:	e9c1 2300 	strd	r2, r3, [r1]
 80054f4:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 80054f8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f7_2  = f0_2 * (int64_t) f7;
 80054fc:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005500:	4618      	mov	r0, r3
 8005502:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005506:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 800550a:	461a      	mov	r2, r3
 800550c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005510:	fb02 f501 	mul.w	r5, r2, r1
 8005514:	fb00 f403 	mul.w	r4, r0, r3
 8005518:	442c      	add	r4, r5
 800551a:	fba0 2302 	umull	r2, r3, r0, r2
 800551e:	18e1      	adds	r1, r4, r3
 8005520:	460b      	mov	r3, r1
 8005522:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8005526:	e9c1 2300 	strd	r2, r3, [r1]
 800552a:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 800552e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f8_2  = f0_2 * (int64_t) f8;
 8005532:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005536:	4618      	mov	r0, r3
 8005538:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800553c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8005540:	461a      	mov	r2, r3
 8005542:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005546:	fb02 f501 	mul.w	r5, r2, r1
 800554a:	fb00 f403 	mul.w	r4, r0, r3
 800554e:	442c      	add	r4, r5
 8005550:	fba0 2302 	umull	r2, r3, r0, r2
 8005554:	18e1      	adds	r1, r4, r3
 8005556:	460b      	mov	r3, r1
 8005558:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 800555c:	e9c1 2300 	strd	r2, r3, [r1]
 8005560:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8005564:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f9_2  = f0_2 * (int64_t) f9;
 8005568:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800556c:	4618      	mov	r0, r3
 800556e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005572:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005576:	461a      	mov	r2, r3
 8005578:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800557c:	fb02 f501 	mul.w	r5, r2, r1
 8005580:	fb00 f403 	mul.w	r4, r0, r3
 8005584:	442c      	add	r4, r5
 8005586:	fba0 2302 	umull	r2, r3, r0, r2
 800558a:	18e1      	adds	r1, r4, r3
 800558c:	460b      	mov	r3, r1
 800558e:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8005592:	e9c1 2300 	strd	r2, r3, [r1]
 8005596:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 800559a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f1_2  = f1_2 * (int64_t) f1;
 800559e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80055a2:	4618      	mov	r0, r3
 80055a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80055a8:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80055ac:	461a      	mov	r2, r3
 80055ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80055b2:	fb02 f501 	mul.w	r5, r2, r1
 80055b6:	fb00 f403 	mul.w	r4, r0, r3
 80055ba:	442c      	add	r4, r5
 80055bc:	fba0 2302 	umull	r2, r3, r0, r2
 80055c0:	18e1      	adds	r1, r4, r3
 80055c2:	460b      	mov	r3, r1
 80055c4:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 80055c8:	e9c1 2300 	strd	r2, r3, [r1]
 80055cc:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 80055d0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f2_2  = f1_2 * (int64_t) f2;
 80055d4:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80055d8:	4618      	mov	r0, r3
 80055da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80055de:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80055e2:	461a      	mov	r2, r3
 80055e4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80055e8:	fb02 f501 	mul.w	r5, r2, r1
 80055ec:	fb00 f403 	mul.w	r4, r0, r3
 80055f0:	442c      	add	r4, r5
 80055f2:	fba0 2302 	umull	r2, r3, r0, r2
 80055f6:	18e1      	adds	r1, r4, r3
 80055f8:	460b      	mov	r3, r1
 80055fa:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 80055fe:	e9c1 2300 	strd	r2, r3, [r1]
 8005602:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8005606:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f3_4  = f1_2 * (int64_t) f3_2;
 800560a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800560e:	4618      	mov	r0, r3
 8005610:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005614:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005618:	461a      	mov	r2, r3
 800561a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800561e:	fb02 f501 	mul.w	r5, r2, r1
 8005622:	fb00 f403 	mul.w	r4, r0, r3
 8005626:	442c      	add	r4, r5
 8005628:	fba0 2302 	umull	r2, r3, r0, r2
 800562c:	18e1      	adds	r1, r4, r3
 800562e:	460b      	mov	r3, r1
 8005630:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8005634:	e9c1 2300 	strd	r2, r3, [r1]
 8005638:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 800563c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f4_2  = f1_2 * (int64_t) f4;
 8005640:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005644:	4618      	mov	r0, r3
 8005646:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800564a:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800564e:	461a      	mov	r2, r3
 8005650:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005654:	fb02 f501 	mul.w	r5, r2, r1
 8005658:	fb00 f403 	mul.w	r4, r0, r3
 800565c:	442c      	add	r4, r5
 800565e:	fba0 2302 	umull	r2, r3, r0, r2
 8005662:	18e1      	adds	r1, r4, r3
 8005664:	460b      	mov	r3, r1
 8005666:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 800566a:	e9c1 2300 	strd	r2, r3, [r1]
 800566e:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8005672:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f5_4  = f1_2 * (int64_t) f5_2;
 8005676:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800567a:	4618      	mov	r0, r3
 800567c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005680:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8005684:	461a      	mov	r2, r3
 8005686:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800568a:	fb02 f501 	mul.w	r5, r2, r1
 800568e:	fb00 f403 	mul.w	r4, r0, r3
 8005692:	442c      	add	r4, r5
 8005694:	fba0 2302 	umull	r2, r3, r0, r2
 8005698:	18e1      	adds	r1, r4, r3
 800569a:	460b      	mov	r3, r1
 800569c:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 80056a0:	e9c1 2300 	strd	r2, r3, [r1]
 80056a4:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 80056a8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f6_2  = f1_2 * (int64_t) f6;
 80056ac:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80056b0:	4618      	mov	r0, r3
 80056b2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80056b6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80056ba:	461a      	mov	r2, r3
 80056bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80056c0:	fb02 f501 	mul.w	r5, r2, r1
 80056c4:	fb00 f403 	mul.w	r4, r0, r3
 80056c8:	442c      	add	r4, r5
 80056ca:	fba0 2302 	umull	r2, r3, r0, r2
 80056ce:	18e1      	adds	r1, r4, r3
 80056d0:	460b      	mov	r3, r1
 80056d2:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80056d6:	e9c1 2300 	strd	r2, r3, [r1]
 80056da:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80056de:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f7_4  = f1_2 * (int64_t) f7_2;
 80056e2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80056e6:	4618      	mov	r0, r3
 80056e8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80056ec:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80056f0:	461a      	mov	r2, r3
 80056f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80056f6:	fb02 f501 	mul.w	r5, r2, r1
 80056fa:	fb00 f403 	mul.w	r4, r0, r3
 80056fe:	442c      	add	r4, r5
 8005700:	fba0 2302 	umull	r2, r3, r0, r2
 8005704:	18e1      	adds	r1, r4, r3
 8005706:	460b      	mov	r3, r1
 8005708:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 800570c:	e9c1 2300 	strd	r2, r3, [r1]
 8005710:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8005714:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f8_2  = f1_2 * (int64_t) f8;
 8005718:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 800571c:	4618      	mov	r0, r3
 800571e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005722:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8005726:	461a      	mov	r2, r3
 8005728:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800572c:	fb02 f501 	mul.w	r5, r2, r1
 8005730:	fb00 f403 	mul.w	r4, r0, r3
 8005734:	442c      	add	r4, r5
 8005736:	fba0 2302 	umull	r2, r3, r0, r2
 800573a:	18e1      	adds	r1, r4, r3
 800573c:	460b      	mov	r3, r1
 800573e:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8005742:	e9c1 2300 	strd	r2, r3, [r1]
 8005746:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 800574a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f9_76 = f1_2 * (int64_t) f9_38;
 800574e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005752:	4618      	mov	r0, r3
 8005754:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005758:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800575c:	461a      	mov	r2, r3
 800575e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005762:	fb02 f501 	mul.w	r5, r2, r1
 8005766:	fb00 f403 	mul.w	r4, r0, r3
 800576a:	442c      	add	r4, r5
 800576c:	fba0 2302 	umull	r2, r3, r0, r2
 8005770:	18e1      	adds	r1, r4, r3
 8005772:	460b      	mov	r3, r1
 8005774:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8005778:	e9c1 2300 	strd	r2, r3, [r1]
 800577c:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8005780:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f2    = f2   * (int64_t) f2;
 8005784:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8005788:	4618      	mov	r0, r3
 800578a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800578e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8005792:	461a      	mov	r2, r3
 8005794:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005798:	fb02 f501 	mul.w	r5, r2, r1
 800579c:	fb00 f403 	mul.w	r4, r0, r3
 80057a0:	442c      	add	r4, r5
 80057a2:	fba0 2302 	umull	r2, r3, r0, r2
 80057a6:	18e1      	adds	r1, r4, r3
 80057a8:	460b      	mov	r3, r1
 80057aa:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80057ae:	e9c1 2300 	strd	r2, r3, [r1]
 80057b2:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80057b6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f3_2  = f2_2 * (int64_t) f3;
 80057ba:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80057be:	4618      	mov	r0, r3
 80057c0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80057c4:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 80057c8:	461a      	mov	r2, r3
 80057ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80057ce:	fb02 f501 	mul.w	r5, r2, r1
 80057d2:	fb00 f403 	mul.w	r4, r0, r3
 80057d6:	442c      	add	r4, r5
 80057d8:	fba0 2302 	umull	r2, r3, r0, r2
 80057dc:	18e1      	adds	r1, r4, r3
 80057de:	460b      	mov	r3, r1
 80057e0:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 80057e4:	e9c1 2300 	strd	r2, r3, [r1]
 80057e8:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 80057ec:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f4_2  = f2_2 * (int64_t) f4;
 80057f0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80057f4:	4618      	mov	r0, r3
 80057f6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80057fa:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80057fe:	461a      	mov	r2, r3
 8005800:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005804:	fb02 f501 	mul.w	r5, r2, r1
 8005808:	fb00 f403 	mul.w	r4, r0, r3
 800580c:	442c      	add	r4, r5
 800580e:	fba0 2302 	umull	r2, r3, r0, r2
 8005812:	18e1      	adds	r1, r4, r3
 8005814:	460b      	mov	r3, r1
 8005816:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 800581a:	e9c1 2300 	strd	r2, r3, [r1]
 800581e:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8005822:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f5_2  = f2_2 * (int64_t) f5;
 8005826:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800582a:	4618      	mov	r0, r3
 800582c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005830:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8005834:	461a      	mov	r2, r3
 8005836:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800583a:	fb02 f501 	mul.w	r5, r2, r1
 800583e:	fb00 f403 	mul.w	r4, r0, r3
 8005842:	442c      	add	r4, r5
 8005844:	fba0 2302 	umull	r2, r3, r0, r2
 8005848:	18e1      	adds	r1, r4, r3
 800584a:	460b      	mov	r3, r1
 800584c:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8005850:	e9c1 2300 	strd	r2, r3, [r1]
 8005854:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8005858:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f6_2  = f2_2 * (int64_t) f6;
 800585c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005860:	4618      	mov	r0, r3
 8005862:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005866:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800586a:	461a      	mov	r2, r3
 800586c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005870:	fb02 f501 	mul.w	r5, r2, r1
 8005874:	fb00 f403 	mul.w	r4, r0, r3
 8005878:	442c      	add	r4, r5
 800587a:	fba0 2302 	umull	r2, r3, r0, r2
 800587e:	18e1      	adds	r1, r4, r3
 8005880:	460b      	mov	r3, r1
 8005882:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8005886:	e9c1 2300 	strd	r2, r3, [r1]
 800588a:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 800588e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f7_2  = f2_2 * (int64_t) f7;
 8005892:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005896:	4618      	mov	r0, r3
 8005898:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800589c:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80058a0:	461a      	mov	r2, r3
 80058a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80058a6:	fb02 f501 	mul.w	r5, r2, r1
 80058aa:	fb00 f403 	mul.w	r4, r0, r3
 80058ae:	442c      	add	r4, r5
 80058b0:	fba0 2302 	umull	r2, r3, r0, r2
 80058b4:	18e1      	adds	r1, r4, r3
 80058b6:	460b      	mov	r3, r1
 80058b8:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80058bc:	e9c1 2300 	strd	r2, r3, [r1]
 80058c0:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80058c4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f8_38 = f2_2 * (int64_t) f8_19;
 80058c8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80058cc:	4618      	mov	r0, r3
 80058ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80058d2:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 80058d6:	461a      	mov	r2, r3
 80058d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80058dc:	fb02 f501 	mul.w	r5, r2, r1
 80058e0:	fb00 f403 	mul.w	r4, r0, r3
 80058e4:	442c      	add	r4, r5
 80058e6:	fba0 2302 	umull	r2, r3, r0, r2
 80058ea:	18e1      	adds	r1, r4, r3
 80058ec:	460b      	mov	r3, r1
 80058ee:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80058f2:	e9c1 2300 	strd	r2, r3, [r1]
 80058f6:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80058fa:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f9_38 = f2   * (int64_t) f9_38;
 80058fe:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8005902:	4618      	mov	r0, r3
 8005904:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005908:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800590c:	461a      	mov	r2, r3
 800590e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005912:	fb02 f501 	mul.w	r5, r2, r1
 8005916:	fb00 f403 	mul.w	r4, r0, r3
 800591a:	442c      	add	r4, r5
 800591c:	fba0 2302 	umull	r2, r3, r0, r2
 8005920:	18e1      	adds	r1, r4, r3
 8005922:	460b      	mov	r3, r1
 8005924:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8005928:	e9c1 2300 	strd	r2, r3, [r1]
 800592c:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8005930:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f3_2  = f3_2 * (int64_t) f3;
 8005934:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005938:	4618      	mov	r0, r3
 800593a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800593e:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8005942:	461a      	mov	r2, r3
 8005944:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005948:	fb02 f501 	mul.w	r5, r2, r1
 800594c:	fb00 f403 	mul.w	r4, r0, r3
 8005950:	442c      	add	r4, r5
 8005952:	fba0 2302 	umull	r2, r3, r0, r2
 8005956:	18e1      	adds	r1, r4, r3
 8005958:	460b      	mov	r3, r1
 800595a:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800595e:	e9c1 2300 	strd	r2, r3, [r1]
 8005962:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8005966:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f4_2  = f3_2 * (int64_t) f4;
 800596a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800596e:	4618      	mov	r0, r3
 8005970:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005974:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005978:	461a      	mov	r2, r3
 800597a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800597e:	fb02 f501 	mul.w	r5, r2, r1
 8005982:	fb00 f403 	mul.w	r4, r0, r3
 8005986:	442c      	add	r4, r5
 8005988:	fba0 2302 	umull	r2, r3, r0, r2
 800598c:	18e1      	adds	r1, r4, r3
 800598e:	460b      	mov	r3, r1
 8005990:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8005994:	e9c1 2300 	strd	r2, r3, [r1]
 8005998:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800599c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f5_4  = f3_2 * (int64_t) f5_2;
 80059a0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80059a4:	4618      	mov	r0, r3
 80059a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80059aa:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 80059ae:	461a      	mov	r2, r3
 80059b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80059b4:	fb02 f501 	mul.w	r5, r2, r1
 80059b8:	fb00 f403 	mul.w	r4, r0, r3
 80059bc:	442c      	add	r4, r5
 80059be:	fba0 2302 	umull	r2, r3, r0, r2
 80059c2:	18e1      	adds	r1, r4, r3
 80059c4:	460b      	mov	r3, r1
 80059c6:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
 80059ca:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
    int64_t f3f6_2  = f3_2 * (int64_t) f6;
 80059ce:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80059d2:	4618      	mov	r0, r3
 80059d4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80059d8:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80059dc:	461a      	mov	r2, r3
 80059de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80059e2:	fb02 f501 	mul.w	r5, r2, r1
 80059e6:	fb00 f403 	mul.w	r4, r0, r3
 80059ea:	442c      	add	r4, r5
 80059ec:	fba0 2302 	umull	r2, r3, r0, r2
 80059f0:	18e1      	adds	r1, r4, r3
 80059f2:	460b      	mov	r3, r1
 80059f4:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
 80059f8:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    int64_t f3f7_76 = f3_2 * (int64_t) f7_38;
 80059fc:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005a00:	4618      	mov	r0, r3
 8005a02:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005a06:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005a10:	fb02 f501 	mul.w	r5, r2, r1
 8005a14:	fb00 f403 	mul.w	r4, r0, r3
 8005a18:	442c      	add	r4, r5
 8005a1a:	fba0 2302 	umull	r2, r3, r0, r2
 8005a1e:	18e1      	adds	r1, r4, r3
 8005a20:	460b      	mov	r3, r1
 8005a22:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
 8005a26:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
    int64_t f3f8_38 = f3_2 * (int64_t) f8_19;
 8005a2a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005a2e:	4618      	mov	r0, r3
 8005a30:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005a34:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8005a38:	461a      	mov	r2, r3
 8005a3a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005a3e:	fb02 f501 	mul.w	r5, r2, r1
 8005a42:	fb00 f403 	mul.w	r4, r0, r3
 8005a46:	442c      	add	r4, r5
 8005a48:	fba0 2302 	umull	r2, r3, r0, r2
 8005a4c:	18e1      	adds	r1, r4, r3
 8005a4e:	460b      	mov	r3, r1
 8005a50:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
 8005a54:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
    int64_t f3f9_76 = f3_2 * (int64_t) f9_38;
 8005a58:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005a62:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8005a66:	461a      	mov	r2, r3
 8005a68:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005a6c:	fb02 f501 	mul.w	r5, r2, r1
 8005a70:	fb00 f403 	mul.w	r4, r0, r3
 8005a74:	442c      	add	r4, r5
 8005a76:	fba0 2302 	umull	r2, r3, r0, r2
 8005a7a:	18e1      	adds	r1, r4, r3
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
 8005a82:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
    int64_t f4f4    = f4   * (int64_t) f4;
 8005a86:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005a90:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005a94:	461a      	mov	r2, r3
 8005a96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005a9a:	fb02 f501 	mul.w	r5, r2, r1
 8005a9e:	fb00 f403 	mul.w	r4, r0, r3
 8005aa2:	442c      	add	r4, r5
 8005aa4:	fba0 2302 	umull	r2, r3, r0, r2
 8005aa8:	18e1      	adds	r1, r4, r3
 8005aaa:	460b      	mov	r3, r1
 8005aac:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
 8005ab0:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    int64_t f4f5_2  = f4_2 * (int64_t) f5;
 8005ab4:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8005ab8:	4618      	mov	r0, r3
 8005aba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005abe:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005ac8:	fb02 f501 	mul.w	r5, r2, r1
 8005acc:	fb00 f403 	mul.w	r4, r0, r3
 8005ad0:	442c      	add	r4, r5
 8005ad2:	fba0 2302 	umull	r2, r3, r0, r2
 8005ad6:	18e1      	adds	r1, r4, r3
 8005ad8:	460b      	mov	r3, r1
 8005ada:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
 8005ade:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
    int64_t f4f6_38 = f4_2 * (int64_t) f6_19;
 8005ae2:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005aec:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8005af0:	461a      	mov	r2, r3
 8005af2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005af6:	fb02 f501 	mul.w	r5, r2, r1
 8005afa:	fb00 f403 	mul.w	r4, r0, r3
 8005afe:	442c      	add	r4, r5
 8005b00:	fba0 2302 	umull	r2, r3, r0, r2
 8005b04:	18e1      	adds	r1, r4, r3
 8005b06:	460b      	mov	r3, r1
 8005b08:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
 8005b0c:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
    int64_t f4f7_38 = f4   * (int64_t) f7_38;
 8005b10:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005b14:	4618      	mov	r0, r3
 8005b16:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005b1a:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8005b1e:	461a      	mov	r2, r3
 8005b20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005b24:	fb02 f501 	mul.w	r5, r2, r1
 8005b28:	fb00 f403 	mul.w	r4, r0, r3
 8005b2c:	442c      	add	r4, r5
 8005b2e:	fba0 2302 	umull	r2, r3, r0, r2
 8005b32:	18e1      	adds	r1, r4, r3
 8005b34:	460b      	mov	r3, r1
 8005b36:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
 8005b3a:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    int64_t f4f8_38 = f4_2 * (int64_t) f8_19;
 8005b3e:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8005b42:	4618      	mov	r0, r3
 8005b44:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005b48:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005b52:	fb02 f501 	mul.w	r5, r2, r1
 8005b56:	fb00 f403 	mul.w	r4, r0, r3
 8005b5a:	442c      	add	r4, r5
 8005b5c:	fba0 2302 	umull	r2, r3, r0, r2
 8005b60:	18e1      	adds	r1, r4, r3
 8005b62:	460b      	mov	r3, r1
 8005b64:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
 8005b68:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
    int64_t f4f9_38 = f4   * (int64_t) f9_38;
 8005b6c:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005b70:	4618      	mov	r0, r3
 8005b72:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005b76:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005b80:	fb02 f501 	mul.w	r5, r2, r1
 8005b84:	fb00 f403 	mul.w	r4, r0, r3
 8005b88:	442c      	add	r4, r5
 8005b8a:	fba0 2302 	umull	r2, r3, r0, r2
 8005b8e:	18e1      	adds	r1, r4, r3
 8005b90:	460b      	mov	r3, r1
 8005b92:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
 8005b96:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
    int64_t f5f5_38 = f5   * (int64_t) f5_38;
 8005b9a:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005ba4:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8005ba8:	461a      	mov	r2, r3
 8005baa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005bae:	fb02 f501 	mul.w	r5, r2, r1
 8005bb2:	fb00 f403 	mul.w	r4, r0, r3
 8005bb6:	442c      	add	r4, r5
 8005bb8:	fba0 2302 	umull	r2, r3, r0, r2
 8005bbc:	18e1      	adds	r1, r4, r3
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
 8005bc4:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
    int64_t f5f6_38 = f5_2 * (int64_t) f6_19;
 8005bc8:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8005bcc:	4618      	mov	r0, r3
 8005bce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005bd2:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005bdc:	fb02 f501 	mul.w	r5, r2, r1
 8005be0:	fb00 f403 	mul.w	r4, r0, r3
 8005be4:	442c      	add	r4, r5
 8005be6:	fba0 2302 	umull	r2, r3, r0, r2
 8005bea:	18e1      	adds	r1, r4, r3
 8005bec:	460b      	mov	r3, r1
 8005bee:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
 8005bf2:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
    int64_t f5f7_76 = f5_2 * (int64_t) f7_38;
 8005bf6:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005c00:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8005c04:	461a      	mov	r2, r3
 8005c06:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005c0a:	fb02 f501 	mul.w	r5, r2, r1
 8005c0e:	fb00 f403 	mul.w	r4, r0, r3
 8005c12:	442c      	add	r4, r5
 8005c14:	fba0 2302 	umull	r2, r3, r0, r2
 8005c18:	18e1      	adds	r1, r4, r3
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
 8005c20:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
    int64_t f5f8_38 = f5_2 * (int64_t) f8_19;
 8005c24:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8005c28:	4618      	mov	r0, r3
 8005c2a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005c2e:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8005c32:	461a      	mov	r2, r3
 8005c34:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005c38:	fb02 f501 	mul.w	r5, r2, r1
 8005c3c:	fb00 f403 	mul.w	r4, r0, r3
 8005c40:	442c      	add	r4, r5
 8005c42:	fba0 2302 	umull	r2, r3, r0, r2
 8005c46:	18e1      	adds	r1, r4, r3
 8005c48:	460b      	mov	r3, r1
 8005c4a:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
 8005c4e:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    int64_t f5f9_76 = f5_2 * (int64_t) f9_38;
 8005c52:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8005c56:	4618      	mov	r0, r3
 8005c58:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005c5c:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8005c60:	461a      	mov	r2, r3
 8005c62:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005c66:	fb02 f501 	mul.w	r5, r2, r1
 8005c6a:	fb00 f403 	mul.w	r4, r0, r3
 8005c6e:	442c      	add	r4, r5
 8005c70:	fba0 2302 	umull	r2, r3, r0, r2
 8005c74:	18e1      	adds	r1, r4, r3
 8005c76:	460b      	mov	r3, r1
 8005c78:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
 8005c7c:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
    int64_t f6f6_19 = f6   * (int64_t) f6_19;
 8005c80:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8005c84:	4618      	mov	r0, r3
 8005c86:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005c8a:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8005c8e:	461a      	mov	r2, r3
 8005c90:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005c94:	fb02 f501 	mul.w	r5, r2, r1
 8005c98:	fb00 f403 	mul.w	r4, r0, r3
 8005c9c:	442c      	add	r4, r5
 8005c9e:	fba0 2302 	umull	r2, r3, r0, r2
 8005ca2:	18e1      	adds	r1, r4, r3
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	e9c7 23de 	strd	r2, r3, [r7, #888]	; 0x378
 8005caa:	e9c7 23de 	strd	r2, r3, [r7, #888]	; 0x378
    int64_t f6f7_38 = f6   * (int64_t) f7_38;
 8005cae:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005cb8:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005cc2:	fb02 f501 	mul.w	r5, r2, r1
 8005cc6:	fb00 f403 	mul.w	r4, r0, r3
 8005cca:	442c      	add	r4, r5
 8005ccc:	fba0 2302 	umull	r2, r3, r0, r2
 8005cd0:	18e1      	adds	r1, r4, r3
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
 8005cd8:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
    int64_t f6f8_38 = f6_2 * (int64_t) f8_19;
 8005cdc:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005ce6:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8005cea:	461a      	mov	r2, r3
 8005cec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005cf0:	fb02 f501 	mul.w	r5, r2, r1
 8005cf4:	fb00 f403 	mul.w	r4, r0, r3
 8005cf8:	442c      	add	r4, r5
 8005cfa:	fba0 2302 	umull	r2, r3, r0, r2
 8005cfe:	18e1      	adds	r1, r4, r3
 8005d00:	460b      	mov	r3, r1
 8005d02:	e9c7 23da 	strd	r2, r3, [r7, #872]	; 0x368
 8005d06:	e9c7 23da 	strd	r2, r3, [r7, #872]	; 0x368
    int64_t f6f9_38 = f6   * (int64_t) f9_38;
 8005d0a:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8005d0e:	4618      	mov	r0, r3
 8005d10:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005d14:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8005d18:	461a      	mov	r2, r3
 8005d1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005d1e:	fb02 f501 	mul.w	r5, r2, r1
 8005d22:	fb00 f403 	mul.w	r4, r0, r3
 8005d26:	442c      	add	r4, r5
 8005d28:	fba0 2302 	umull	r2, r3, r0, r2
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	460b      	mov	r3, r1
 8005d30:	e9c7 23d8 	strd	r2, r3, [r7, #864]	; 0x360
 8005d34:	e9c7 23d8 	strd	r2, r3, [r7, #864]	; 0x360
    int64_t f7f7_38 = f7   * (int64_t) f7_38;
 8005d38:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005d42:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8005d46:	461a      	mov	r2, r3
 8005d48:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005d4c:	fb02 f501 	mul.w	r5, r2, r1
 8005d50:	fb00 f403 	mul.w	r4, r0, r3
 8005d54:	442c      	add	r4, r5
 8005d56:	fba0 2302 	umull	r2, r3, r0, r2
 8005d5a:	18e1      	adds	r1, r4, r3
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
 8005d62:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
    int64_t f7f8_38 = f7_2 * (int64_t) f8_19;
 8005d66:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005d70:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8005d74:	461a      	mov	r2, r3
 8005d76:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005d7a:	fb02 f501 	mul.w	r5, r2, r1
 8005d7e:	fb00 f403 	mul.w	r4, r0, r3
 8005d82:	442c      	add	r4, r5
 8005d84:	fba0 2302 	umull	r2, r3, r0, r2
 8005d88:	18e1      	adds	r1, r4, r3
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	e9c7 23d4 	strd	r2, r3, [r7, #848]	; 0x350
 8005d90:	e9c7 23d4 	strd	r2, r3, [r7, #848]	; 0x350
    int64_t f7f9_76 = f7_2 * (int64_t) f9_38;
 8005d94:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8005d98:	4618      	mov	r0, r3
 8005d9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005d9e:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8005da2:	461a      	mov	r2, r3
 8005da4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005da8:	fb02 f501 	mul.w	r5, r2, r1
 8005dac:	fb00 f403 	mul.w	r4, r0, r3
 8005db0:	442c      	add	r4, r5
 8005db2:	fba0 2302 	umull	r2, r3, r0, r2
 8005db6:	18e1      	adds	r1, r4, r3
 8005db8:	460b      	mov	r3, r1
 8005dba:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
 8005dbe:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
    int64_t f8f8_19 = f8   * (int64_t) f8_19;
 8005dc2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005dcc:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005dd6:	fb02 f501 	mul.w	r5, r2, r1
 8005dda:	fb00 f403 	mul.w	r4, r0, r3
 8005dde:	442c      	add	r4, r5
 8005de0:	fba0 2302 	umull	r2, r3, r0, r2
 8005de4:	18e1      	adds	r1, r4, r3
 8005de6:	460b      	mov	r3, r1
 8005de8:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
 8005dec:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
    int64_t f8f9_38 = f8   * (int64_t) f9_38;
 8005df0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8005df4:	4618      	mov	r0, r3
 8005df6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005dfa:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8005dfe:	461a      	mov	r2, r3
 8005e00:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005e04:	fb02 f501 	mul.w	r5, r2, r1
 8005e08:	fb00 f403 	mul.w	r4, r0, r3
 8005e0c:	442c      	add	r4, r5
 8005e0e:	fba0 2302 	umull	r2, r3, r0, r2
 8005e12:	18e1      	adds	r1, r4, r3
 8005e14:	460b      	mov	r3, r1
 8005e16:	e9c7 23ce 	strd	r2, r3, [r7, #824]	; 0x338
 8005e1a:	e9c7 23ce 	strd	r2, r3, [r7, #824]	; 0x338
    int64_t f9f9_38 = f9   * (int64_t) f9_38;
 8005e1e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005e22:	4618      	mov	r0, r3
 8005e24:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005e28:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005e32:	fb02 f501 	mul.w	r5, r2, r1
 8005e36:	fb00 f403 	mul.w	r4, r0, r3
 8005e3a:	442c      	add	r4, r5
 8005e3c:	fba0 2302 	umull	r2, r3, r0, r2
 8005e40:	18e1      	adds	r1, r4, r3
 8005e42:	460b      	mov	r3, r1
 8005e44:	e9c7 23cc 	strd	r2, r3, [r7, #816]	; 0x330
 8005e48:	e9c7 23cc 	strd	r2, r3, [r7, #816]	; 0x330
    int64_t h0 = f0f0  + f1f9_76 + f2f8_38 + f3f7_76 + f4f6_38 + f5f5_38;
 8005e4c:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8005e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e54:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	1884      	adds	r4, r0, r2
 8005e5e:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 8005e62:	eb41 0303 	adc.w	r3, r1, r3
 8005e66:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8005e6a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 8005e76:	4621      	mov	r1, r4
 8005e78:	1889      	adds	r1, r1, r2
 8005e7a:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8005e7e:	4629      	mov	r1, r5
 8005e80:	eb43 0101 	adc.w	r1, r3, r1
 8005e84:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8005e88:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 8005e8c:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 8005e90:	4621      	mov	r1, r4
 8005e92:	1889      	adds	r1, r1, r2
 8005e94:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 8005e98:	4629      	mov	r1, r5
 8005e9a:	eb43 0101 	adc.w	r1, r3, r1
 8005e9e:	f8c7 1274 	str.w	r1, [r7, #628]	; 0x274
 8005ea2:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 8005ea6:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 8005eaa:	4621      	mov	r1, r4
 8005eac:	1889      	adds	r1, r1, r2
 8005eae:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	eb43 0101 	adc.w	r1, r3, r1
 8005eb8:	f8c7 126c 	str.w	r1, [r7, #620]	; 0x26c
 8005ebc:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 8005ec0:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	1851      	adds	r1, r2, r1
 8005ec8:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8005ecc:	4629      	mov	r1, r5
 8005ece:	eb43 0101 	adc.w	r1, r3, r1
 8005ed2:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8005ed6:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8005eda:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    int64_t h1 = f0f1_2 + f2f9_38 + f3f8_38 + f4f7_38 + f5f6_38;
 8005ede:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8005ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ee6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	1884      	adds	r4, r0, r2
 8005ef0:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 8005ef4:	eb41 0303 	adc.w	r3, r1, r3
 8005ef8:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8005efc:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8005f00:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 8005f04:	4621      	mov	r1, r4
 8005f06:	1889      	adds	r1, r1, r2
 8005f08:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	eb43 0101 	adc.w	r1, r3, r1
 8005f12:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 8005f16:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8005f1a:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8005f1e:	4621      	mov	r1, r4
 8005f20:	1889      	adds	r1, r1, r2
 8005f22:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 8005f26:	4629      	mov	r1, r5
 8005f28:	eb43 0101 	adc.w	r1, r3, r1
 8005f2c:	f8c7 1254 	str.w	r1, [r7, #596]	; 0x254
 8005f30:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 8005f34:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 8005f38:	4621      	mov	r1, r4
 8005f3a:	1851      	adds	r1, r2, r1
 8005f3c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8005f40:	4629      	mov	r1, r5
 8005f42:	eb43 0101 	adc.w	r1, r3, r1
 8005f46:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8005f4a:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8005f4e:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    int64_t h2 = f0f2_2 + f1f1_2 + f3f9_76 + f4f8_38 + f5f7_76 + f6f6_19;
 8005f52:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8005f56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f5a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f62:	1884      	adds	r4, r0, r2
 8005f64:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 8005f68:	eb41 0303 	adc.w	r3, r1, r3
 8005f6c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005f70:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 8005f74:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 8005f78:	4621      	mov	r1, r4
 8005f7a:	1889      	adds	r1, r1, r2
 8005f7c:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 8005f80:	4629      	mov	r1, r5
 8005f82:	eb43 0101 	adc.w	r1, r3, r1
 8005f86:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 8005f8a:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 8005f8e:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8005f92:	4621      	mov	r1, r4
 8005f94:	1889      	adds	r1, r1, r2
 8005f96:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	eb43 0101 	adc.w	r1, r3, r1
 8005fa0:	f8c7 123c 	str.w	r1, [r7, #572]	; 0x23c
 8005fa4:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 8005fa8:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 8005fac:	4621      	mov	r1, r4
 8005fae:	1889      	adds	r1, r1, r2
 8005fb0:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	eb43 0101 	adc.w	r1, r3, r1
 8005fba:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 8005fbe:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8005fc2:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	1851      	adds	r1, r2, r1
 8005fca:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8005fce:	4629      	mov	r1, r5
 8005fd0:	eb43 0101 	adc.w	r1, r3, r1
 8005fd4:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8005fd8:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8005fdc:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    int64_t h3 = f0f3_2 + f1f2_2 + f4f9_38 + f5f8_38 + f6f7_38;
 8005fe0:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8005fe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fe8:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	1884      	adds	r4, r0, r2
 8005ff2:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 8005ff6:	eb41 0303 	adc.w	r3, r1, r3
 8005ffa:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8005ffe:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 8006002:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 8006006:	4621      	mov	r1, r4
 8006008:	1889      	adds	r1, r1, r2
 800600a:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800600e:	4629      	mov	r1, r5
 8006010:	eb43 0101 	adc.w	r1, r3, r1
 8006014:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 8006018:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 800601c:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 8006020:	4621      	mov	r1, r4
 8006022:	1889      	adds	r1, r1, r2
 8006024:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8006028:	4629      	mov	r1, r5
 800602a:	eb43 0101 	adc.w	r1, r3, r1
 800602e:	f8c7 121c 	str.w	r1, [r7, #540]	; 0x21c
 8006032:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8006036:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 800603a:	4621      	mov	r1, r4
 800603c:	1851      	adds	r1, r2, r1
 800603e:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8006042:	4629      	mov	r1, r5
 8006044:	eb43 0101 	adc.w	r1, r3, r1
 8006048:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800604c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8006050:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    int64_t h4 = f0f4_2 + f1f3_4 + f2f2   + f5f9_76 + f6f8_38 + f7f7_38;
 8006054:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8006058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800605c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	1884      	adds	r4, r0, r2
 8006066:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 800606a:	eb41 0303 	adc.w	r3, r1, r3
 800606e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8006072:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 800607e:	4621      	mov	r1, r4
 8006080:	1889      	adds	r1, r1, r2
 8006082:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8006086:	4629      	mov	r1, r5
 8006088:	eb43 0101 	adc.w	r1, r3, r1
 800608c:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8006090:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8006094:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 8006098:	4621      	mov	r1, r4
 800609a:	1889      	adds	r1, r1, r2
 800609c:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80060a0:	4629      	mov	r1, r5
 80060a2:	eb43 0101 	adc.w	r1, r3, r1
 80060a6:	f8c7 1204 	str.w	r1, [r7, #516]	; 0x204
 80060aa:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 80060ae:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80060b2:	4621      	mov	r1, r4
 80060b4:	1889      	adds	r1, r1, r2
 80060b6:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 80060ba:	4629      	mov	r1, r5
 80060bc:	eb43 0101 	adc.w	r1, r3, r1
 80060c0:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 80060c4:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 80060c8:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 80060cc:	4621      	mov	r1, r4
 80060ce:	1851      	adds	r1, r2, r1
 80060d0:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80060d4:	4629      	mov	r1, r5
 80060d6:	eb43 0101 	adc.w	r1, r3, r1
 80060da:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80060de:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80060e2:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    int64_t h5 = f0f5_2 + f1f4_2 + f2f3_2 + f6f9_38 + f7f8_38;
 80060e6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80060ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060ee:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	1884      	adds	r4, r0, r2
 80060f8:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 80060fc:	eb41 0303 	adc.w	r3, r1, r3
 8006100:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8006104:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8006110:	4621      	mov	r1, r4
 8006112:	1889      	adds	r1, r1, r2
 8006114:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8006118:	4629      	mov	r1, r5
 800611a:	eb43 0101 	adc.w	r1, r3, r1
 800611e:	f8c7 11ec 	str.w	r1, [r7, #492]	; 0x1ec
 8006122:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8006126:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 800612a:	4621      	mov	r1, r4
 800612c:	1889      	adds	r1, r1, r2
 800612e:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8006132:	4629      	mov	r1, r5
 8006134:	eb43 0101 	adc.w	r1, r3, r1
 8006138:	f8c7 11e4 	str.w	r1, [r7, #484]	; 0x1e4
 800613c:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8006140:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8006144:	4621      	mov	r1, r4
 8006146:	1851      	adds	r1, r2, r1
 8006148:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800614c:	4629      	mov	r1, r5
 800614e:	eb43 0101 	adc.w	r1, r3, r1
 8006152:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8006156:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800615a:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    int64_t h6 = f0f6_2 + f1f5_4 + f2f4_2 + f3f3_2 + f7f9_76 + f8f8_19;
 800615e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8006162:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006166:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	1884      	adds	r4, r0, r2
 8006170:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 8006174:	eb41 0303 	adc.w	r3, r1, r3
 8006178:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800617c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8006188:	4621      	mov	r1, r4
 800618a:	1889      	adds	r1, r1, r2
 800618c:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8006190:	4629      	mov	r1, r5
 8006192:	eb43 0101 	adc.w	r1, r3, r1
 8006196:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 800619a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 80061a6:	4621      	mov	r1, r4
 80061a8:	1889      	adds	r1, r1, r2
 80061aa:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 80061ae:	4629      	mov	r1, r5
 80061b0:	eb43 0101 	adc.w	r1, r3, r1
 80061b4:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 80061b8:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 80061bc:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 80061c0:	4621      	mov	r1, r4
 80061c2:	1889      	adds	r1, r1, r2
 80061c4:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 80061c8:	4629      	mov	r1, r5
 80061ca:	eb43 0101 	adc.w	r1, r3, r1
 80061ce:	f8c7 11c4 	str.w	r1, [r7, #452]	; 0x1c4
 80061d2:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 80061d6:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 80061da:	4621      	mov	r1, r4
 80061dc:	1851      	adds	r1, r2, r1
 80061de:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80061e2:	4629      	mov	r1, r5
 80061e4:	eb43 0101 	adc.w	r1, r3, r1
 80061e8:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80061ec:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80061f0:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    int64_t h7 = f0f7_2 + f1f6_2 + f2f5_2 + f3f4_2 + f8f9_38;
 80061f4:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80061f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061fc:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	1884      	adds	r4, r0, r2
 8006206:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 800620a:	eb41 0303 	adc.w	r3, r1, r3
 800620e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006212:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 800621e:	4621      	mov	r1, r4
 8006220:	1889      	adds	r1, r1, r2
 8006222:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8006226:	4629      	mov	r1, r5
 8006228:	eb43 0101 	adc.w	r1, r3, r1
 800622c:	f8c7 11b4 	str.w	r1, [r7, #436]	; 0x1b4
 8006230:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 800623c:	4621      	mov	r1, r4
 800623e:	1889      	adds	r1, r1, r2
 8006240:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8006244:	4629      	mov	r1, r5
 8006246:	eb43 0101 	adc.w	r1, r3, r1
 800624a:	f8c7 11ac 	str.w	r1, [r7, #428]	; 0x1ac
 800624e:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8006252:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8006256:	4621      	mov	r1, r4
 8006258:	1851      	adds	r1, r2, r1
 800625a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800625e:	4629      	mov	r1, r5
 8006260:	eb43 0101 	adc.w	r1, r3, r1
 8006264:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8006268:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800626c:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    int64_t h8 = f0f8_2 + f1f7_4 + f2f6_2 + f3f5_4 + f4f4   + f9f9_38;
 8006270:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8006274:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006278:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	1884      	adds	r4, r0, r2
 8006282:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 8006286:	eb41 0303 	adc.w	r3, r1, r3
 800628a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800628e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 800629a:	4621      	mov	r1, r4
 800629c:	1889      	adds	r1, r1, r2
 800629e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80062a2:	4629      	mov	r1, r5
 80062a4:	eb43 0101 	adc.w	r1, r3, r1
 80062a8:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 80062ac:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 80062b0:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 80062b4:	4621      	mov	r1, r4
 80062b6:	1889      	adds	r1, r1, r2
 80062b8:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 80062bc:	4629      	mov	r1, r5
 80062be:	eb43 0101 	adc.w	r1, r3, r1
 80062c2:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 80062c6:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 80062ca:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80062ce:	4621      	mov	r1, r4
 80062d0:	1889      	adds	r1, r1, r2
 80062d2:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 80062d6:	4629      	mov	r1, r5
 80062d8:	eb43 0101 	adc.w	r1, r3, r1
 80062dc:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
 80062e0:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 80062e4:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 80062e8:	4621      	mov	r1, r4
 80062ea:	1851      	adds	r1, r2, r1
 80062ec:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80062f0:	4629      	mov	r1, r5
 80062f2:	eb43 0101 	adc.w	r1, r3, r1
 80062f6:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80062fa:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80062fe:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    int64_t h9 = f0f9_2 + f1f8_2 + f2f7_2 + f3f6_2 + f4f5_2;
 8006302:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8006306:	e9d3 0100 	ldrd	r0, r1, [r3]
 800630a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	1884      	adds	r4, r0, r2
 8006314:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 8006318:	eb41 0303 	adc.w	r3, r1, r3
 800631c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006320:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 800632c:	4621      	mov	r1, r4
 800632e:	1889      	adds	r1, r1, r2
 8006330:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8006334:	4629      	mov	r1, r5
 8006336:	eb43 0101 	adc.w	r1, r3, r1
 800633a:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 800633e:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8006342:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8006346:	4621      	mov	r1, r4
 8006348:	1889      	adds	r1, r1, r2
 800634a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800634e:	4629      	mov	r1, r5
 8006350:	eb43 0101 	adc.w	r1, r3, r1
 8006354:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8006358:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800635c:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8006360:	4621      	mov	r1, r4
 8006362:	1851      	adds	r1, r2, r1
 8006364:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8006368:	4629      	mov	r1, r5
 800636a:	eb43 0101 	adc.w	r1, r3, r1
 800636e:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8006372:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006376:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    int64_t carry5;
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 800637a:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800637e:	f112 7800 	adds.w	r8, r2, #33554432	; 0x2000000
 8006382:	f143 0900 	adc.w	r9, r3, #0
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	f04f 0300 	mov.w	r3, #0
 800638e:	ea4f 6298 	mov.w	r2, r8, lsr #26
 8006392:	ea42 1289 	orr.w	r2, r2, r9, lsl #6
 8006396:	ea4f 63a9 	mov.w	r3, r9, asr #26
 800639a:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
    h1 += carry0;
 800639e:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 80063a2:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80063a6:	1884      	adds	r4, r0, r2
 80063a8:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80063ac:	eb41 0303 	adc.w	r3, r1, r3
 80063b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063b4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80063b8:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    h0 -= carry0 << 26;
 80063bc:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80063c0:	f04f 0000 	mov.w	r0, #0
 80063c4:	f04f 0100 	mov.w	r1, #0
 80063c8:	0699      	lsls	r1, r3, #26
 80063ca:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80063ce:	0690      	lsls	r0, r2, #26
 80063d0:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80063d4:	1a14      	subs	r4, r2, r0
 80063d6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80063da:	eb63 0301 	sbc.w	r3, r3, r1
 80063de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063e2:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80063e6:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 80063ea:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80063ee:	f112 7a00 	adds.w	sl, r2, #33554432	; 0x2000000
 80063f2:	f143 0b00 	adc.w	fp, r3, #0
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	ea4f 629a 	mov.w	r2, sl, lsr #26
 8006402:	ea42 128b 	orr.w	r2, r2, fp, lsl #6
 8006406:	ea4f 63ab 	mov.w	r3, fp, asr #26
 800640a:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
    h5 += carry4;
 800640e:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8006412:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8006416:	1884      	adds	r4, r0, r2
 8006418:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800641c:	eb41 0303 	adc.w	r3, r1, r3
 8006420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006424:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8006428:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    h4 -= carry4 << 26;
 800642c:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8006430:	f04f 0000 	mov.w	r0, #0
 8006434:	f04f 0100 	mov.w	r1, #0
 8006438:	0699      	lsls	r1, r3, #26
 800643a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 800643e:	0690      	lsls	r0, r2, #26
 8006440:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8006444:	1a14      	subs	r4, r2, r0
 8006446:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800644a:	eb63 0301 	sbc.w	r3, r3, r1
 800644e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006452:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8006456:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 800645a:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800645e:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8006462:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8006466:	f143 0300 	adc.w	r3, r3, #0
 800646a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800646e:	f04f 0200 	mov.w	r2, #0
 8006472:	f04f 0300 	mov.w	r3, #0
 8006476:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 800647a:	4621      	mov	r1, r4
 800647c:	0e4a      	lsrs	r2, r1, #25
 800647e:	4629      	mov	r1, r5
 8006480:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8006484:	4629      	mov	r1, r5
 8006486:	164b      	asrs	r3, r1, #25
 8006488:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
    h2 += carry1;
 800648c:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 8006490:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8006494:	1884      	adds	r4, r0, r2
 8006496:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800649a:	eb41 0303 	adc.w	r3, r1, r3
 800649e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064a2:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80064a6:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    h1 -= carry1 << 25;
 80064aa:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 80064ae:	f04f 0000 	mov.w	r0, #0
 80064b2:	f04f 0100 	mov.w	r1, #0
 80064b6:	0659      	lsls	r1, r3, #25
 80064b8:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80064bc:	0650      	lsls	r0, r2, #25
 80064be:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 80064c2:	1a14      	subs	r4, r2, r0
 80064c4:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80064c8:	eb63 0301 	sbc.w	r3, r3, r1
 80064cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064d0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80064d4:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 80064d8:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 80064dc:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80064e0:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 80064e4:	f143 0300 	adc.w	r3, r3, #0
 80064e8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80064f8:	4621      	mov	r1, r4
 80064fa:	0e4a      	lsrs	r2, r1, #25
 80064fc:	4629      	mov	r1, r5
 80064fe:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8006502:	4629      	mov	r1, r5
 8006504:	164b      	asrs	r3, r1, #25
 8006506:	e9c7 23b0 	strd	r2, r3, [r7, #704]	; 0x2c0
    h6 += carry5;
 800650a:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	; 0x2f8
 800650e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8006512:	1884      	adds	r4, r0, r2
 8006514:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006518:	eb41 0303 	adc.w	r3, r1, r3
 800651c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006520:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8006524:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    h5 -= carry5 << 25;
 8006528:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800652c:	f04f 0000 	mov.w	r0, #0
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	0659      	lsls	r1, r3, #25
 8006536:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 800653a:	0650      	lsls	r0, r2, #25
 800653c:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8006540:	1a14      	subs	r4, r2, r0
 8006542:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8006546:	eb63 0301 	sbc.w	r3, r3, r1
 800654a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800654e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006552:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 8006556:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 800655a:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 800655e:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8006562:	f143 0300 	adc.w	r3, r3, #0
 8006566:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800656a:	f04f 0200 	mov.w	r2, #0
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8006576:	4621      	mov	r1, r4
 8006578:	0e8a      	lsrs	r2, r1, #26
 800657a:	4629      	mov	r1, r5
 800657c:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8006580:	4629      	mov	r1, r5
 8006582:	168b      	asrs	r3, r1, #26
 8006584:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
    h3 += carry2;
 8006588:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	; 0x310
 800658c:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8006590:	1884      	adds	r4, r0, r2
 8006592:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8006596:	eb41 0303 	adc.w	r3, r1, r3
 800659a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800659e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80065a2:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    h2 -= carry2 << 26;
 80065a6:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80065aa:	f04f 0000 	mov.w	r0, #0
 80065ae:	f04f 0100 	mov.w	r1, #0
 80065b2:	0699      	lsls	r1, r3, #26
 80065b4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80065b8:	0690      	lsls	r0, r2, #26
 80065ba:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 80065be:	1a14      	subs	r4, r2, r0
 80065c0:	67bc      	str	r4, [r7, #120]	; 0x78
 80065c2:	eb63 0301 	sbc.w	r3, r3, r1
 80065c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065c8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80065cc:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 80065d0:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 80065d4:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80065d8:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80065dc:	f143 0300 	adc.w	r3, r3, #0
 80065e0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80065f0:	4621      	mov	r1, r4
 80065f2:	0e8a      	lsrs	r2, r1, #26
 80065f4:	4629      	mov	r1, r5
 80065f6:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80065fa:	4629      	mov	r1, r5
 80065fc:	168b      	asrs	r3, r1, #26
 80065fe:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    h7 += carry6;
 8006602:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	; 0x2f0
 8006606:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800660a:	1884      	adds	r4, r0, r2
 800660c:	673c      	str	r4, [r7, #112]	; 0x70
 800660e:	eb41 0303 	adc.w	r3, r1, r3
 8006612:	677b      	str	r3, [r7, #116]	; 0x74
 8006614:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006618:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    h6 -= carry6 << 26;
 800661c:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8006620:	f04f 0000 	mov.w	r0, #0
 8006624:	f04f 0100 	mov.w	r1, #0
 8006628:	0699      	lsls	r1, r3, #26
 800662a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 800662e:	0690      	lsls	r0, r2, #26
 8006630:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8006634:	1a14      	subs	r4, r2, r0
 8006636:	66bc      	str	r4, [r7, #104]	; 0x68
 8006638:	eb63 0301 	sbc.w	r3, r3, r1
 800663c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800663e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006642:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8006646:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 800664a:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 800664e:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8006652:	f143 0300 	adc.w	r3, r3, #0
 8006656:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800665a:	f04f 0200 	mov.w	r2, #0
 800665e:	f04f 0300 	mov.w	r3, #0
 8006662:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8006666:	4621      	mov	r1, r4
 8006668:	0e4a      	lsrs	r2, r1, #25
 800666a:	4629      	mov	r1, r5
 800666c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8006670:	4629      	mov	r1, r5
 8006672:	164b      	asrs	r3, r1, #25
 8006674:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
    h4 += carry3;
 8006678:	e9d7 01c2 	ldrd	r0, r1, [r7, #776]	; 0x308
 800667c:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8006680:	1884      	adds	r4, r0, r2
 8006682:	663c      	str	r4, [r7, #96]	; 0x60
 8006684:	eb41 0303 	adc.w	r3, r1, r3
 8006688:	667b      	str	r3, [r7, #100]	; 0x64
 800668a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800668e:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    h3 -= carry3 << 25;
 8006692:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8006696:	f04f 0000 	mov.w	r0, #0
 800669a:	f04f 0100 	mov.w	r1, #0
 800669e:	0659      	lsls	r1, r3, #25
 80066a0:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80066a4:	0650      	lsls	r0, r2, #25
 80066a6:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 80066aa:	1a14      	subs	r4, r2, r0
 80066ac:	65bc      	str	r4, [r7, #88]	; 0x58
 80066ae:	eb63 0301 	sbc.w	r3, r3, r1
 80066b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066b4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80066b8:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 80066bc:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 80066c0:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80066c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80066c8:	f143 0300 	adc.w	r3, r3, #0
 80066cc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 80066dc:	4621      	mov	r1, r4
 80066de:	0e4a      	lsrs	r2, r1, #25
 80066e0:	4629      	mov	r1, r5
 80066e2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80066e6:	4629      	mov	r1, r5
 80066e8:	164b      	asrs	r3, r1, #25
 80066ea:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
    h8 += carry7;
 80066ee:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 80066f2:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80066f6:	1884      	adds	r4, r0, r2
 80066f8:	653c      	str	r4, [r7, #80]	; 0x50
 80066fa:	eb41 0303 	adc.w	r3, r1, r3
 80066fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006700:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006704:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    h7 -= carry7 << 25;
 8006708:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800670c:	f04f 0000 	mov.w	r0, #0
 8006710:	f04f 0100 	mov.w	r1, #0
 8006714:	0659      	lsls	r1, r3, #25
 8006716:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 800671a:	0650      	lsls	r0, r2, #25
 800671c:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8006720:	1a14      	subs	r4, r2, r0
 8006722:	64bc      	str	r4, [r7, #72]	; 0x48
 8006724:	eb63 0301 	sbc.w	r3, r3, r1
 8006728:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800672e:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8006732:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8006736:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 800673a:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800673e:	f143 0300 	adc.w	r3, r3, #0
 8006742:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8006752:	4621      	mov	r1, r4
 8006754:	0e8a      	lsrs	r2, r1, #26
 8006756:	4629      	mov	r1, r5
 8006758:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800675c:	4629      	mov	r1, r5
 800675e:	168b      	asrs	r3, r1, #26
 8006760:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
    h5 += carry4;
 8006764:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8006768:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800676c:	1884      	adds	r4, r0, r2
 800676e:	643c      	str	r4, [r7, #64]	; 0x40
 8006770:	eb41 0303 	adc.w	r3, r1, r3
 8006774:	647b      	str	r3, [r7, #68]	; 0x44
 8006776:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800677a:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    h4 -= carry4 << 26;
 800677e:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f04f 0100 	mov.w	r1, #0
 800678a:	0699      	lsls	r1, r3, #26
 800678c:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8006790:	0690      	lsls	r0, r2, #26
 8006792:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8006796:	1a14      	subs	r4, r2, r0
 8006798:	63bc      	str	r4, [r7, #56]	; 0x38
 800679a:	eb63 0301 	sbc.w	r3, r3, r1
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80067a4:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 80067a8:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 80067ac:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80067b0:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80067b4:	f143 0300 	adc.w	r3, r3, #0
 80067b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80067c8:	4621      	mov	r1, r4
 80067ca:	0e8a      	lsrs	r2, r1, #26
 80067cc:	4629      	mov	r1, r5
 80067ce:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80067d2:	4629      	mov	r1, r5
 80067d4:	168b      	asrs	r3, r1, #26
 80067d6:	e9c7 23a6 	strd	r2, r3, [r7, #664]	; 0x298
    h9 += carry8;
 80067da:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 80067de:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 80067e2:	1884      	adds	r4, r0, r2
 80067e4:	633c      	str	r4, [r7, #48]	; 0x30
 80067e6:	eb41 0303 	adc.w	r3, r1, r3
 80067ea:	637b      	str	r3, [r7, #52]	; 0x34
 80067ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80067f0:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    h8 -= carry8 << 26;
 80067f4:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 80067f8:	f04f 0000 	mov.w	r0, #0
 80067fc:	f04f 0100 	mov.w	r1, #0
 8006800:	0699      	lsls	r1, r3, #26
 8006802:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8006806:	0690      	lsls	r0, r2, #26
 8006808:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 800680c:	1a14      	subs	r4, r2, r0
 800680e:	62bc      	str	r4, [r7, #40]	; 0x28
 8006810:	eb63 0301 	sbc.w	r3, r3, r1
 8006814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006816:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800681a:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 800681e:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8006822:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8006826:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800682a:	f143 0300 	adc.w	r3, r3, #0
 800682e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800683e:	4621      	mov	r1, r4
 8006840:	0e4a      	lsrs	r2, r1, #25
 8006842:	4629      	mov	r1, r5
 8006844:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8006848:	4629      	mov	r1, r5
 800684a:	164b      	asrs	r3, r1, #25
 800684c:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
    h0 += carry9 * 19;
 8006850:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 8006854:	4622      	mov	r2, r4
 8006856:	462b      	mov	r3, r5
 8006858:	f04f 0000 	mov.w	r0, #0
 800685c:	f04f 0100 	mov.w	r1, #0
 8006860:	00d9      	lsls	r1, r3, #3
 8006862:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006866:	00d0      	lsls	r0, r2, #3
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	1912      	adds	r2, r2, r4
 800686e:	eb45 0303 	adc.w	r3, r5, r3
 8006872:	1891      	adds	r1, r2, r2
 8006874:	6239      	str	r1, [r7, #32]
 8006876:	415b      	adcs	r3, r3
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
 800687a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800687e:	1911      	adds	r1, r2, r4
 8006880:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8006884:	416b      	adcs	r3, r5
 8006886:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800688a:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800688e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8006892:	4621      	mov	r1, r4
 8006894:	1851      	adds	r1, r2, r1
 8006896:	61b9      	str	r1, [r7, #24]
 8006898:	4629      	mov	r1, r5
 800689a:	eb43 0101 	adc.w	r1, r3, r1
 800689e:	61f9      	str	r1, [r7, #28]
 80068a0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80068a4:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    h9 -= carry9 << 25;
 80068a8:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	; 0x290
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	f04f 0300 	mov.w	r3, #0
 80068b4:	064b      	lsls	r3, r1, #25
 80068b6:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 80068ba:	0642      	lsls	r2, r0, #25
 80068bc:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 80068c0:	1a84      	subs	r4, r0, r2
 80068c2:	613c      	str	r4, [r7, #16]
 80068c4:	eb61 0303 	sbc.w	r3, r1, r3
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80068ce:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 80068d2:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80068d6:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80068da:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80068de:	f143 0300 	adc.w	r3, r3, #0
 80068e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80068e6:	f04f 0200 	mov.w	r2, #0
 80068ea:	f04f 0300 	mov.w	r3, #0
 80068ee:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80068f2:	4621      	mov	r1, r4
 80068f4:	0e8a      	lsrs	r2, r1, #26
 80068f6:	4629      	mov	r1, r5
 80068f8:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80068fc:	4629      	mov	r1, r5
 80068fe:	168b      	asrs	r3, r1, #26
 8006900:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
    h1 += carry0;
 8006904:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8006908:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 800690c:	1884      	adds	r4, r0, r2
 800690e:	60bc      	str	r4, [r7, #8]
 8006910:	eb41 0303 	adc.w	r3, r1, r3
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800691a:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    h0 -= carry0 << 26;
 800691e:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	; 0x2d8
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	068b      	lsls	r3, r1, #26
 800692c:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8006930:	0682      	lsls	r2, r0, #26
 8006932:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8006936:	1a84      	subs	r4, r0, r2
 8006938:	603c      	str	r4, [r7, #0]
 800693a:	eb61 0303 	sbc.w	r3, r1, r3
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006944:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    h[0] = (int32_t) h0;
 8006948:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 8006956:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3304      	adds	r3, #4
 800695e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 8006966:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3308      	adds	r3, #8
 800696e:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 8006976:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 8006986:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3310      	adds	r3, #16
 800698e:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 8006996:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3314      	adds	r3, #20
 800699e:	f507 7240 	add.w	r2, r7, #768	; 0x300
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 80069a6:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3318      	adds	r3, #24
 80069ae:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 80069b6:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	331c      	adds	r3, #28
 80069be:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 80069c6:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3320      	adds	r3, #32
 80069ce:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 80069d6:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3324      	adds	r3, #36	; 0x24
 80069de:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80069e2:	6812      	ldr	r2, [r2, #0]
 80069e4:	601a      	str	r2, [r3, #0]
}
 80069e6:	bf00      	nop
 80069e8:	f207 574c 	addw	r7, r7, #1356	; 0x54c
 80069ec:	46bd      	mov	sp, r7
 80069ee:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80069f2:	4770      	bx	lr

080069f4 <fe_sq2>:

/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq2(fe h, const fe f) {
 80069f4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80069f8:	f2ad 5d9c 	subw	sp, sp, #1436	; 0x59c
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8006a02:	6018      	str	r0, [r3, #0]
 8006a04:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006a08:	6019      	str	r1, [r3, #0]
    int32_t f0 = f[0];
 8006a0a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
    int32_t f1 = f[1];
 8006a16:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
    int32_t f2 = f[2];
 8006a22:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
    int32_t f3 = f[3];
 8006a2e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
    int32_t f4 = f[4];
 8006a3a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
    int32_t f5 = f[5];
 8006a46:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    int32_t f6 = f[6];
 8006a52:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
    int32_t f7 = f[7];
 8006a5e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
    int32_t f8 = f[8];
 8006a6a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
    int32_t f9 = f[9];
 8006a76:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7e:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    int32_t f0_2 = 2 * f0;
 8006a82:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    int32_t f1_2 = 2 * f1;
 8006a8c:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
    int32_t f2_2 = 2 * f2;
 8006a96:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    int32_t f3_2 = 2 * f3;
 8006aa0:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
    int32_t f4_2 = 2 * f4;
 8006aaa:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
    int32_t f5_2 = 2 * f5;
 8006ab4:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    int32_t f6_2 = 2 * f6;
 8006abe:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    int32_t f7_2 = 2 * f7;
 8006ac8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
    int32_t f5_38 = 38 * f5; /* 1.959375*2^30 */
 8006ad2:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 8006ad6:	2326      	movs	r3, #38	; 0x26
 8006ad8:	fb03 f302 	mul.w	r3, r3, r2
 8006adc:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
    int32_t f6_19 = 19 * f6; /* 1.959375*2^30 */
 8006ae0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4413      	add	r3, r2
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	4413      	add	r3, r2
 8006aee:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    int32_t f7_38 = 38 * f7; /* 1.959375*2^30 */
 8006af2:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8006af6:	2326      	movs	r3, #38	; 0x26
 8006af8:	fb03 f302 	mul.w	r3, r3, r2
 8006afc:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
    int32_t f8_19 = 19 * f8; /* 1.959375*2^30 */
 8006b00:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8006b04:	4613      	mov	r3, r2
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	4413      	add	r3, r2
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
    int32_t f9_38 = 38 * f9; /* 1.959375*2^30 */
 8006b12:	f8d7 2570 	ldr.w	r2, [r7, #1392]	; 0x570
 8006b16:	2326      	movs	r3, #38	; 0x26
 8006b18:	fb03 f302 	mul.w	r3, r3, r2
 8006b1c:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    int64_t f0f0    = f0   * (int64_t) f0;
 8006b20:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8006b24:	4618      	mov	r0, r3
 8006b26:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006b2a:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8006b2e:	461a      	mov	r2, r3
 8006b30:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006b34:	fb02 f501 	mul.w	r5, r2, r1
 8006b38:	fb00 f403 	mul.w	r4, r0, r3
 8006b3c:	442c      	add	r4, r5
 8006b3e:	fba0 2302 	umull	r2, r3, r0, r2
 8006b42:	18e1      	adds	r1, r4, r3
 8006b44:	460b      	mov	r3, r1
 8006b46:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8006b4a:	e9c1 2300 	strd	r2, r3, [r1]
 8006b4e:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8006b52:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f1_2  = f0_2 * (int64_t) f1;
 8006b56:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006b60:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8006b64:	461a      	mov	r2, r3
 8006b66:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006b6a:	fb02 f501 	mul.w	r5, r2, r1
 8006b6e:	fb00 f403 	mul.w	r4, r0, r3
 8006b72:	442c      	add	r4, r5
 8006b74:	fba0 2302 	umull	r2, r3, r0, r2
 8006b78:	18e1      	adds	r1, r4, r3
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8006b80:	e9c1 2300 	strd	r2, r3, [r1]
 8006b84:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8006b88:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f2_2  = f0_2 * (int64_t) f2;
 8006b8c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8006b90:	4618      	mov	r0, r3
 8006b92:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006b96:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006ba0:	fb02 f501 	mul.w	r5, r2, r1
 8006ba4:	fb00 f403 	mul.w	r4, r0, r3
 8006ba8:	442c      	add	r4, r5
 8006baa:	fba0 2302 	umull	r2, r3, r0, r2
 8006bae:	18e1      	adds	r1, r4, r3
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8006bb6:	e9c1 2300 	strd	r2, r3, [r1]
 8006bba:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8006bbe:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f3_2  = f0_2 * (int64_t) f3;
 8006bc2:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006bcc:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006bd6:	fb02 f501 	mul.w	r5, r2, r1
 8006bda:	fb00 f403 	mul.w	r4, r0, r3
 8006bde:	442c      	add	r4, r5
 8006be0:	fba0 2302 	umull	r2, r3, r0, r2
 8006be4:	18e1      	adds	r1, r4, r3
 8006be6:	460b      	mov	r3, r1
 8006be8:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8006bec:	e9c1 2300 	strd	r2, r3, [r1]
 8006bf0:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8006bf4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f4_2  = f0_2 * (int64_t) f4;
 8006bf8:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006c02:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8006c06:	461a      	mov	r2, r3
 8006c08:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006c0c:	fb02 f501 	mul.w	r5, r2, r1
 8006c10:	fb00 f403 	mul.w	r4, r0, r3
 8006c14:	442c      	add	r4, r5
 8006c16:	fba0 2302 	umull	r2, r3, r0, r2
 8006c1a:	18e1      	adds	r1, r4, r3
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8006c22:	e9c1 2300 	strd	r2, r3, [r1]
 8006c26:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8006c2a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f5_2  = f0_2 * (int64_t) f5;
 8006c2e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8006c32:	4618      	mov	r0, r3
 8006c34:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006c38:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006c42:	fb02 f501 	mul.w	r5, r2, r1
 8006c46:	fb00 f403 	mul.w	r4, r0, r3
 8006c4a:	442c      	add	r4, r5
 8006c4c:	fba0 2302 	umull	r2, r3, r0, r2
 8006c50:	18e1      	adds	r1, r4, r3
 8006c52:	460b      	mov	r3, r1
 8006c54:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8006c58:	e9c1 2300 	strd	r2, r3, [r1]
 8006c5c:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8006c60:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f6_2  = f0_2 * (int64_t) f6;
 8006c64:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8006c68:	4618      	mov	r0, r3
 8006c6a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006c6e:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8006c72:	461a      	mov	r2, r3
 8006c74:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006c78:	fb02 f501 	mul.w	r5, r2, r1
 8006c7c:	fb00 f403 	mul.w	r4, r0, r3
 8006c80:	442c      	add	r4, r5
 8006c82:	fba0 2302 	umull	r2, r3, r0, r2
 8006c86:	18e1      	adds	r1, r4, r3
 8006c88:	460b      	mov	r3, r1
 8006c8a:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8006c8e:	e9c1 2300 	strd	r2, r3, [r1]
 8006c92:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8006c96:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f7_2  = f0_2 * (int64_t) f7;
 8006c9a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006ca4:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8006ca8:	461a      	mov	r2, r3
 8006caa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006cae:	fb02 f501 	mul.w	r5, r2, r1
 8006cb2:	fb00 f403 	mul.w	r4, r0, r3
 8006cb6:	442c      	add	r4, r5
 8006cb8:	fba0 2302 	umull	r2, r3, r0, r2
 8006cbc:	18e1      	adds	r1, r4, r3
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8006cc4:	e9c1 2300 	strd	r2, r3, [r1]
 8006cc8:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8006ccc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f8_2  = f0_2 * (int64_t) f8;
 8006cd0:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006cda:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8006cde:	461a      	mov	r2, r3
 8006ce0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006ce4:	fb02 f501 	mul.w	r5, r2, r1
 8006ce8:	fb00 f403 	mul.w	r4, r0, r3
 8006cec:	442c      	add	r4, r5
 8006cee:	fba0 2302 	umull	r2, r3, r0, r2
 8006cf2:	18e1      	adds	r1, r4, r3
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8006cfa:	e9c1 2300 	strd	r2, r3, [r1]
 8006cfe:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8006d02:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f9_2  = f0_2 * (int64_t) f9;
 8006d06:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006d10:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8006d14:	461a      	mov	r2, r3
 8006d16:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006d1a:	fb02 f501 	mul.w	r5, r2, r1
 8006d1e:	fb00 f403 	mul.w	r4, r0, r3
 8006d22:	442c      	add	r4, r5
 8006d24:	fba0 2302 	umull	r2, r3, r0, r2
 8006d28:	18e1      	adds	r1, r4, r3
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8006d30:	e9c1 2300 	strd	r2, r3, [r1]
 8006d34:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8006d38:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f1_2  = f1_2 * (int64_t) f1;
 8006d3c:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8006d40:	4618      	mov	r0, r3
 8006d42:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006d46:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006d50:	fb02 f501 	mul.w	r5, r2, r1
 8006d54:	fb00 f403 	mul.w	r4, r0, r3
 8006d58:	442c      	add	r4, r5
 8006d5a:	fba0 2302 	umull	r2, r3, r0, r2
 8006d5e:	18e1      	adds	r1, r4, r3
 8006d60:	460b      	mov	r3, r1
 8006d62:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8006d66:	e9c1 2300 	strd	r2, r3, [r1]
 8006d6a:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8006d6e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f2_2  = f1_2 * (int64_t) f2;
 8006d72:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8006d76:	4618      	mov	r0, r3
 8006d78:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006d7c:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8006d80:	461a      	mov	r2, r3
 8006d82:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006d86:	fb02 f501 	mul.w	r5, r2, r1
 8006d8a:	fb00 f403 	mul.w	r4, r0, r3
 8006d8e:	442c      	add	r4, r5
 8006d90:	fba0 2302 	umull	r2, r3, r0, r2
 8006d94:	18e1      	adds	r1, r4, r3
 8006d96:	460b      	mov	r3, r1
 8006d98:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8006d9c:	e9c1 2300 	strd	r2, r3, [r1]
 8006da0:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8006da4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f3_4  = f1_2 * (int64_t) f3_2;
 8006da8:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8006dac:	4618      	mov	r0, r3
 8006dae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006db2:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8006db6:	461a      	mov	r2, r3
 8006db8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006dbc:	fb02 f501 	mul.w	r5, r2, r1
 8006dc0:	fb00 f403 	mul.w	r4, r0, r3
 8006dc4:	442c      	add	r4, r5
 8006dc6:	fba0 2302 	umull	r2, r3, r0, r2
 8006dca:	18e1      	adds	r1, r4, r3
 8006dcc:	460b      	mov	r3, r1
 8006dce:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8006dd2:	e9c1 2300 	strd	r2, r3, [r1]
 8006dd6:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8006dda:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f4_2  = f1_2 * (int64_t) f4;
 8006dde:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8006de2:	4618      	mov	r0, r3
 8006de4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006de8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8006dec:	461a      	mov	r2, r3
 8006dee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006df2:	fb02 f501 	mul.w	r5, r2, r1
 8006df6:	fb00 f403 	mul.w	r4, r0, r3
 8006dfa:	442c      	add	r4, r5
 8006dfc:	fba0 2302 	umull	r2, r3, r0, r2
 8006e00:	18e1      	adds	r1, r4, r3
 8006e02:	460b      	mov	r3, r1
 8006e04:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8006e08:	e9c1 2300 	strd	r2, r3, [r1]
 8006e0c:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8006e10:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f5_4  = f1_2 * (int64_t) f5_2;
 8006e14:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8006e18:	4618      	mov	r0, r3
 8006e1a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006e1e:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8006e22:	461a      	mov	r2, r3
 8006e24:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006e28:	fb02 f501 	mul.w	r5, r2, r1
 8006e2c:	fb00 f403 	mul.w	r4, r0, r3
 8006e30:	442c      	add	r4, r5
 8006e32:	fba0 2302 	umull	r2, r3, r0, r2
 8006e36:	18e1      	adds	r1, r4, r3
 8006e38:	460b      	mov	r3, r1
 8006e3a:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8006e3e:	e9c1 2300 	strd	r2, r3, [r1]
 8006e42:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8006e46:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f6_2  = f1_2 * (int64_t) f6;
 8006e4a:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8006e4e:	4618      	mov	r0, r3
 8006e50:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006e54:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8006e58:	461a      	mov	r2, r3
 8006e5a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006e5e:	fb02 f501 	mul.w	r5, r2, r1
 8006e62:	fb00 f403 	mul.w	r4, r0, r3
 8006e66:	442c      	add	r4, r5
 8006e68:	fba0 2302 	umull	r2, r3, r0, r2
 8006e6c:	18e1      	adds	r1, r4, r3
 8006e6e:	460b      	mov	r3, r1
 8006e70:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8006e74:	e9c1 2300 	strd	r2, r3, [r1]
 8006e78:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8006e7c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f7_4  = f1_2 * (int64_t) f7_2;
 8006e80:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8006e84:	4618      	mov	r0, r3
 8006e86:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006e8a:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8006e8e:	461a      	mov	r2, r3
 8006e90:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006e94:	fb02 f501 	mul.w	r5, r2, r1
 8006e98:	fb00 f403 	mul.w	r4, r0, r3
 8006e9c:	442c      	add	r4, r5
 8006e9e:	fba0 2302 	umull	r2, r3, r0, r2
 8006ea2:	18e1      	adds	r1, r4, r3
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8006eaa:	e9c1 2300 	strd	r2, r3, [r1]
 8006eae:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8006eb2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f8_2  = f1_2 * (int64_t) f8;
 8006eb6:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8006eba:	4618      	mov	r0, r3
 8006ebc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006ec0:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006eca:	fb02 f501 	mul.w	r5, r2, r1
 8006ece:	fb00 f403 	mul.w	r4, r0, r3
 8006ed2:	442c      	add	r4, r5
 8006ed4:	fba0 2302 	umull	r2, r3, r0, r2
 8006ed8:	18e1      	adds	r1, r4, r3
 8006eda:	460b      	mov	r3, r1
 8006edc:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8006ee0:	e9c1 2300 	strd	r2, r3, [r1]
 8006ee4:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8006ee8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f9_76 = f1_2 * (int64_t) f9_38;
 8006eec:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006ef6:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8006efa:	461a      	mov	r2, r3
 8006efc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006f00:	fb02 f501 	mul.w	r5, r2, r1
 8006f04:	fb00 f403 	mul.w	r4, r0, r3
 8006f08:	442c      	add	r4, r5
 8006f0a:	fba0 2302 	umull	r2, r3, r0, r2
 8006f0e:	18e1      	adds	r1, r4, r3
 8006f10:	460b      	mov	r3, r1
 8006f12:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8006f16:	e9c1 2300 	strd	r2, r3, [r1]
 8006f1a:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8006f1e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f2    = f2   * (int64_t) f2;
 8006f22:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8006f26:	4618      	mov	r0, r3
 8006f28:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006f2c:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8006f30:	461a      	mov	r2, r3
 8006f32:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006f36:	fb02 f501 	mul.w	r5, r2, r1
 8006f3a:	fb00 f403 	mul.w	r4, r0, r3
 8006f3e:	442c      	add	r4, r5
 8006f40:	fba0 2302 	umull	r2, r3, r0, r2
 8006f44:	18e1      	adds	r1, r4, r3
 8006f46:	460b      	mov	r3, r1
 8006f48:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8006f4c:	e9c1 2300 	strd	r2, r3, [r1]
 8006f50:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8006f54:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f3_2  = f2_2 * (int64_t) f3;
 8006f58:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006f62:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8006f66:	461a      	mov	r2, r3
 8006f68:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006f6c:	fb02 f501 	mul.w	r5, r2, r1
 8006f70:	fb00 f403 	mul.w	r4, r0, r3
 8006f74:	442c      	add	r4, r5
 8006f76:	fba0 2302 	umull	r2, r3, r0, r2
 8006f7a:	18e1      	adds	r1, r4, r3
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8006f82:	e9c1 2300 	strd	r2, r3, [r1]
 8006f86:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8006f8a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f4_2  = f2_2 * (int64_t) f4;
 8006f8e:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8006f92:	4618      	mov	r0, r3
 8006f94:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006f98:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006fa2:	fb02 f501 	mul.w	r5, r2, r1
 8006fa6:	fb00 f403 	mul.w	r4, r0, r3
 8006faa:	442c      	add	r4, r5
 8006fac:	fba0 2302 	umull	r2, r3, r0, r2
 8006fb0:	18e1      	adds	r1, r4, r3
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8006fb8:	e9c1 2300 	strd	r2, r3, [r1]
 8006fbc:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8006fc0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f5_2  = f2_2 * (int64_t) f5;
 8006fc4:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8006fc8:	4618      	mov	r0, r3
 8006fca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006fce:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006fd8:	fb02 f501 	mul.w	r5, r2, r1
 8006fdc:	fb00 f403 	mul.w	r4, r0, r3
 8006fe0:	442c      	add	r4, r5
 8006fe2:	fba0 2302 	umull	r2, r3, r0, r2
 8006fe6:	18e1      	adds	r1, r4, r3
 8006fe8:	460b      	mov	r3, r1
 8006fea:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8006fee:	e9c1 2300 	strd	r2, r3, [r1]
 8006ff2:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8006ff6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f6_2  = f2_2 * (int64_t) f6;
 8006ffa:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8006ffe:	4618      	mov	r0, r3
 8007000:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007004:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8007008:	461a      	mov	r2, r3
 800700a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800700e:	fb02 f501 	mul.w	r5, r2, r1
 8007012:	fb00 f403 	mul.w	r4, r0, r3
 8007016:	442c      	add	r4, r5
 8007018:	fba0 2302 	umull	r2, r3, r0, r2
 800701c:	18e1      	adds	r1, r4, r3
 800701e:	460b      	mov	r3, r1
 8007020:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8007024:	e9c1 2300 	strd	r2, r3, [r1]
 8007028:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 800702c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f7_2  = f2_2 * (int64_t) f7;
 8007030:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8007034:	4618      	mov	r0, r3
 8007036:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800703a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 800703e:	461a      	mov	r2, r3
 8007040:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007044:	fb02 f501 	mul.w	r5, r2, r1
 8007048:	fb00 f403 	mul.w	r4, r0, r3
 800704c:	442c      	add	r4, r5
 800704e:	fba0 2302 	umull	r2, r3, r0, r2
 8007052:	18e1      	adds	r1, r4, r3
 8007054:	460b      	mov	r3, r1
 8007056:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 800705a:	e9c1 2300 	strd	r2, r3, [r1]
 800705e:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8007062:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f8_38 = f2_2 * (int64_t) f8_19;
 8007066:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800706a:	4618      	mov	r0, r3
 800706c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007070:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007074:	461a      	mov	r2, r3
 8007076:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800707a:	fb02 f501 	mul.w	r5, r2, r1
 800707e:	fb00 f403 	mul.w	r4, r0, r3
 8007082:	442c      	add	r4, r5
 8007084:	fba0 2302 	umull	r2, r3, r0, r2
 8007088:	18e1      	adds	r1, r4, r3
 800708a:	460b      	mov	r3, r1
 800708c:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8007090:	e9c1 2300 	strd	r2, r3, [r1]
 8007094:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8007098:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f9_38 = f2   * (int64_t) f9_38;
 800709c:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80070a0:	4618      	mov	r0, r3
 80070a2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80070a6:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80070aa:	461a      	mov	r2, r3
 80070ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80070b0:	fb02 f501 	mul.w	r5, r2, r1
 80070b4:	fb00 f403 	mul.w	r4, r0, r3
 80070b8:	442c      	add	r4, r5
 80070ba:	fba0 2302 	umull	r2, r3, r0, r2
 80070be:	18e1      	adds	r1, r4, r3
 80070c0:	460b      	mov	r3, r1
 80070c2:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 80070c6:	e9c1 2300 	strd	r2, r3, [r1]
 80070ca:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 80070ce:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f3_2  = f3_2 * (int64_t) f3;
 80070d2:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80070d6:	4618      	mov	r0, r3
 80070d8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80070dc:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80070e0:	461a      	mov	r2, r3
 80070e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80070e6:	fb02 f501 	mul.w	r5, r2, r1
 80070ea:	fb00 f403 	mul.w	r4, r0, r3
 80070ee:	442c      	add	r4, r5
 80070f0:	fba0 2302 	umull	r2, r3, r0, r2
 80070f4:	18e1      	adds	r1, r4, r3
 80070f6:	460b      	mov	r3, r1
 80070f8:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 80070fc:	e9c1 2300 	strd	r2, r3, [r1]
 8007100:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8007104:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f4_2  = f3_2 * (int64_t) f4;
 8007108:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800710c:	4618      	mov	r0, r3
 800710e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007112:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8007116:	461a      	mov	r2, r3
 8007118:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800711c:	fb02 f501 	mul.w	r5, r2, r1
 8007120:	fb00 f403 	mul.w	r4, r0, r3
 8007124:	442c      	add	r4, r5
 8007126:	fba0 2302 	umull	r2, r3, r0, r2
 800712a:	18e1      	adds	r1, r4, r3
 800712c:	460b      	mov	r3, r1
 800712e:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8007132:	e9c1 2300 	strd	r2, r3, [r1]
 8007136:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 800713a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f5_4  = f3_2 * (int64_t) f5_2;
 800713e:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8007142:	4618      	mov	r0, r3
 8007144:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007148:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800714c:	461a      	mov	r2, r3
 800714e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007152:	fb02 f501 	mul.w	r5, r2, r1
 8007156:	fb00 f403 	mul.w	r4, r0, r3
 800715a:	442c      	add	r4, r5
 800715c:	fba0 2302 	umull	r2, r3, r0, r2
 8007160:	18e1      	adds	r1, r4, r3
 8007162:	460b      	mov	r3, r1
 8007164:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8007168:	e9c1 2300 	strd	r2, r3, [r1]
 800716c:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8007170:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f6_2  = f3_2 * (int64_t) f6;
 8007174:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8007178:	4618      	mov	r0, r3
 800717a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800717e:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8007182:	461a      	mov	r2, r3
 8007184:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007188:	fb02 f501 	mul.w	r5, r2, r1
 800718c:	fb00 f403 	mul.w	r4, r0, r3
 8007190:	442c      	add	r4, r5
 8007192:	fba0 2302 	umull	r2, r3, r0, r2
 8007196:	18e1      	adds	r1, r4, r3
 8007198:	460b      	mov	r3, r1
 800719a:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 800719e:	e9c1 2300 	strd	r2, r3, [r1]
 80071a2:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 80071a6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f7_76 = f3_2 * (int64_t) f7_38;
 80071aa:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80071ae:	4618      	mov	r0, r3
 80071b0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80071b4:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80071b8:	461a      	mov	r2, r3
 80071ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80071be:	fb02 f501 	mul.w	r5, r2, r1
 80071c2:	fb00 f403 	mul.w	r4, r0, r3
 80071c6:	442c      	add	r4, r5
 80071c8:	fba0 2302 	umull	r2, r3, r0, r2
 80071cc:	18e1      	adds	r1, r4, r3
 80071ce:	460b      	mov	r3, r1
 80071d0:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 80071d4:	e9c1 2300 	strd	r2, r3, [r1]
 80071d8:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 80071dc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f8_38 = f3_2 * (int64_t) f8_19;
 80071e0:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80071e4:	4618      	mov	r0, r3
 80071e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80071ea:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80071ee:	461a      	mov	r2, r3
 80071f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80071f4:	fb02 f501 	mul.w	r5, r2, r1
 80071f8:	fb00 f403 	mul.w	r4, r0, r3
 80071fc:	442c      	add	r4, r5
 80071fe:	fba0 2302 	umull	r2, r3, r0, r2
 8007202:	18e1      	adds	r1, r4, r3
 8007204:	460b      	mov	r3, r1
 8007206:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 800720a:	e9c1 2300 	strd	r2, r3, [r1]
 800720e:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8007212:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f9_76 = f3_2 * (int64_t) f9_38;
 8007216:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800721a:	4618      	mov	r0, r3
 800721c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007220:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007224:	461a      	mov	r2, r3
 8007226:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800722a:	fb02 f501 	mul.w	r5, r2, r1
 800722e:	fb00 f403 	mul.w	r4, r0, r3
 8007232:	442c      	add	r4, r5
 8007234:	fba0 2302 	umull	r2, r3, r0, r2
 8007238:	18e1      	adds	r1, r4, r3
 800723a:	460b      	mov	r3, r1
 800723c:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8007240:	e9c1 2300 	strd	r2, r3, [r1]
 8007244:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8007248:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f4    = f4   * (int64_t) f4;
 800724c:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8007250:	4618      	mov	r0, r3
 8007252:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007256:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800725a:	461a      	mov	r2, r3
 800725c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007260:	fb02 f501 	mul.w	r5, r2, r1
 8007264:	fb00 f403 	mul.w	r4, r0, r3
 8007268:	442c      	add	r4, r5
 800726a:	fba0 2302 	umull	r2, r3, r0, r2
 800726e:	18e1      	adds	r1, r4, r3
 8007270:	460b      	mov	r3, r1
 8007272:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8007276:	e9c1 2300 	strd	r2, r3, [r1]
 800727a:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800727e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f5_2  = f4_2 * (int64_t) f5;
 8007282:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8007286:	4618      	mov	r0, r3
 8007288:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800728c:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8007290:	461a      	mov	r2, r3
 8007292:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007296:	fb02 f501 	mul.w	r5, r2, r1
 800729a:	fb00 f403 	mul.w	r4, r0, r3
 800729e:	442c      	add	r4, r5
 80072a0:	fba0 2302 	umull	r2, r3, r0, r2
 80072a4:	18e1      	adds	r1, r4, r3
 80072a6:	460b      	mov	r3, r1
 80072a8:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80072ac:	e9c1 2300 	strd	r2, r3, [r1]
 80072b0:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80072b4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f6_38 = f4_2 * (int64_t) f6_19;
 80072b8:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80072bc:	4618      	mov	r0, r3
 80072be:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80072c2:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 80072c6:	461a      	mov	r2, r3
 80072c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80072cc:	fb02 f501 	mul.w	r5, r2, r1
 80072d0:	fb00 f403 	mul.w	r4, r0, r3
 80072d4:	442c      	add	r4, r5
 80072d6:	fba0 2302 	umull	r2, r3, r0, r2
 80072da:	18e1      	adds	r1, r4, r3
 80072dc:	460b      	mov	r3, r1
 80072de:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80072e2:	e9c1 2300 	strd	r2, r3, [r1]
 80072e6:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80072ea:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f7_38 = f4   * (int64_t) f7_38;
 80072ee:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80072f2:	4618      	mov	r0, r3
 80072f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80072f8:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80072fc:	461a      	mov	r2, r3
 80072fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007302:	fb02 f501 	mul.w	r5, r2, r1
 8007306:	fb00 f403 	mul.w	r4, r0, r3
 800730a:	442c      	add	r4, r5
 800730c:	fba0 2302 	umull	r2, r3, r0, r2
 8007310:	18e1      	adds	r1, r4, r3
 8007312:	460b      	mov	r3, r1
 8007314:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8007318:	e9c1 2300 	strd	r2, r3, [r1]
 800731c:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8007320:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f8_38 = f4_2 * (int64_t) f8_19;
 8007324:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8007328:	4618      	mov	r0, r3
 800732a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800732e:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007332:	461a      	mov	r2, r3
 8007334:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007338:	fb02 f501 	mul.w	r5, r2, r1
 800733c:	fb00 f403 	mul.w	r4, r0, r3
 8007340:	442c      	add	r4, r5
 8007342:	fba0 2302 	umull	r2, r3, r0, r2
 8007346:	18e1      	adds	r1, r4, r3
 8007348:	460b      	mov	r3, r1
 800734a:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800734e:	e9c1 2300 	strd	r2, r3, [r1]
 8007352:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8007356:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f9_38 = f4   * (int64_t) f9_38;
 800735a:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800735e:	4618      	mov	r0, r3
 8007360:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007364:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007368:	461a      	mov	r2, r3
 800736a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800736e:	fb02 f501 	mul.w	r5, r2, r1
 8007372:	fb00 f403 	mul.w	r4, r0, r3
 8007376:	442c      	add	r4, r5
 8007378:	fba0 2302 	umull	r2, r3, r0, r2
 800737c:	18e1      	adds	r1, r4, r3
 800737e:	460b      	mov	r3, r1
 8007380:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
 8007384:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
    int64_t f5f5_38 = f5   * (int64_t) f5_38;
 8007388:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800738c:	4618      	mov	r0, r3
 800738e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007392:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8007396:	461a      	mov	r2, r3
 8007398:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800739c:	fb02 f501 	mul.w	r5, r2, r1
 80073a0:	fb00 f403 	mul.w	r4, r0, r3
 80073a4:	442c      	add	r4, r5
 80073a6:	fba0 2302 	umull	r2, r3, r0, r2
 80073aa:	18e1      	adds	r1, r4, r3
 80073ac:	460b      	mov	r3, r1
 80073ae:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
 80073b2:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    int64_t f5f6_38 = f5_2 * (int64_t) f6_19;
 80073b6:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80073ba:	4618      	mov	r0, r3
 80073bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80073c0:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 80073c4:	461a      	mov	r2, r3
 80073c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80073ca:	fb02 f501 	mul.w	r5, r2, r1
 80073ce:	fb00 f403 	mul.w	r4, r0, r3
 80073d2:	442c      	add	r4, r5
 80073d4:	fba0 2302 	umull	r2, r3, r0, r2
 80073d8:	18e1      	adds	r1, r4, r3
 80073da:	460b      	mov	r3, r1
 80073dc:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
 80073e0:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
    int64_t f5f7_76 = f5_2 * (int64_t) f7_38;
 80073e4:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80073e8:	4618      	mov	r0, r3
 80073ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80073ee:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80073f2:	461a      	mov	r2, r3
 80073f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80073f8:	fb02 f501 	mul.w	r5, r2, r1
 80073fc:	fb00 f403 	mul.w	r4, r0, r3
 8007400:	442c      	add	r4, r5
 8007402:	fba0 2302 	umull	r2, r3, r0, r2
 8007406:	18e1      	adds	r1, r4, r3
 8007408:	460b      	mov	r3, r1
 800740a:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
 800740e:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
    int64_t f5f8_38 = f5_2 * (int64_t) f8_19;
 8007412:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8007416:	4618      	mov	r0, r3
 8007418:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800741c:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007420:	461a      	mov	r2, r3
 8007422:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007426:	fb02 f501 	mul.w	r5, r2, r1
 800742a:	fb00 f403 	mul.w	r4, r0, r3
 800742e:	442c      	add	r4, r5
 8007430:	fba0 2302 	umull	r2, r3, r0, r2
 8007434:	18e1      	adds	r1, r4, r3
 8007436:	460b      	mov	r3, r1
 8007438:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
 800743c:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
    int64_t f5f9_76 = f5_2 * (int64_t) f9_38;
 8007440:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8007444:	4618      	mov	r0, r3
 8007446:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800744a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800744e:	461a      	mov	r2, r3
 8007450:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007454:	fb02 f501 	mul.w	r5, r2, r1
 8007458:	fb00 f403 	mul.w	r4, r0, r3
 800745c:	442c      	add	r4, r5
 800745e:	fba0 2302 	umull	r2, r3, r0, r2
 8007462:	18e1      	adds	r1, r4, r3
 8007464:	460b      	mov	r3, r1
 8007466:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
 800746a:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    int64_t f6f6_19 = f6   * (int64_t) f6_19;
 800746e:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8007472:	4618      	mov	r0, r3
 8007474:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007478:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800747c:	461a      	mov	r2, r3
 800747e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007482:	fb02 f501 	mul.w	r5, r2, r1
 8007486:	fb00 f403 	mul.w	r4, r0, r3
 800748a:	442c      	add	r4, r5
 800748c:	fba0 2302 	umull	r2, r3, r0, r2
 8007490:	18e1      	adds	r1, r4, r3
 8007492:	460b      	mov	r3, r1
 8007494:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
 8007498:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
    int64_t f6f7_38 = f6   * (int64_t) f7_38;
 800749c:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80074a0:	4618      	mov	r0, r3
 80074a2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80074a6:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80074aa:	461a      	mov	r2, r3
 80074ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80074b0:	fb02 f501 	mul.w	r5, r2, r1
 80074b4:	fb00 f403 	mul.w	r4, r0, r3
 80074b8:	442c      	add	r4, r5
 80074ba:	fba0 2302 	umull	r2, r3, r0, r2
 80074be:	18e1      	adds	r1, r4, r3
 80074c0:	460b      	mov	r3, r1
 80074c2:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
 80074c6:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
    int64_t f6f8_38 = f6_2 * (int64_t) f8_19;
 80074ca:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 80074ce:	4618      	mov	r0, r3
 80074d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80074d4:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80074d8:	461a      	mov	r2, r3
 80074da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80074de:	fb02 f501 	mul.w	r5, r2, r1
 80074e2:	fb00 f403 	mul.w	r4, r0, r3
 80074e6:	442c      	add	r4, r5
 80074e8:	fba0 2302 	umull	r2, r3, r0, r2
 80074ec:	18e1      	adds	r1, r4, r3
 80074ee:	460b      	mov	r3, r1
 80074f0:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
 80074f4:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    int64_t f6f9_38 = f6   * (int64_t) f9_38;
 80074f8:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80074fc:	4618      	mov	r0, r3
 80074fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007502:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007506:	461a      	mov	r2, r3
 8007508:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800750c:	fb02 f501 	mul.w	r5, r2, r1
 8007510:	fb00 f403 	mul.w	r4, r0, r3
 8007514:	442c      	add	r4, r5
 8007516:	fba0 2302 	umull	r2, r3, r0, r2
 800751a:	18e1      	adds	r1, r4, r3
 800751c:	460b      	mov	r3, r1
 800751e:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
 8007522:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
    int64_t f7f7_38 = f7   * (int64_t) f7_38;
 8007526:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 800752a:	4618      	mov	r0, r3
 800752c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007530:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8007534:	461a      	mov	r2, r3
 8007536:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800753a:	fb02 f501 	mul.w	r5, r2, r1
 800753e:	fb00 f403 	mul.w	r4, r0, r3
 8007542:	442c      	add	r4, r5
 8007544:	fba0 2302 	umull	r2, r3, r0, r2
 8007548:	18e1      	adds	r1, r4, r3
 800754a:	460b      	mov	r3, r1
 800754c:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
 8007550:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
    int64_t f7f8_38 = f7_2 * (int64_t) f8_19;
 8007554:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8007558:	4618      	mov	r0, r3
 800755a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800755e:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007562:	461a      	mov	r2, r3
 8007564:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007568:	fb02 f501 	mul.w	r5, r2, r1
 800756c:	fb00 f403 	mul.w	r4, r0, r3
 8007570:	442c      	add	r4, r5
 8007572:	fba0 2302 	umull	r2, r3, r0, r2
 8007576:	18e1      	adds	r1, r4, r3
 8007578:	460b      	mov	r3, r1
 800757a:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
 800757e:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
    int64_t f7f9_76 = f7_2 * (int64_t) f9_38;
 8007582:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8007586:	4618      	mov	r0, r3
 8007588:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800758c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007590:	461a      	mov	r2, r3
 8007592:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007596:	fb02 f501 	mul.w	r5, r2, r1
 800759a:	fb00 f403 	mul.w	r4, r0, r3
 800759e:	442c      	add	r4, r5
 80075a0:	fba0 2302 	umull	r2, r3, r0, r2
 80075a4:	18e1      	adds	r1, r4, r3
 80075a6:	460b      	mov	r3, r1
 80075a8:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
 80075ac:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
    int64_t f8f8_19 = f8   * (int64_t) f8_19;
 80075b0:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80075b4:	4618      	mov	r0, r3
 80075b6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80075ba:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80075be:	461a      	mov	r2, r3
 80075c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80075c4:	fb02 f501 	mul.w	r5, r2, r1
 80075c8:	fb00 f403 	mul.w	r4, r0, r3
 80075cc:	442c      	add	r4, r5
 80075ce:	fba0 2302 	umull	r2, r3, r0, r2
 80075d2:	18e1      	adds	r1, r4, r3
 80075d4:	460b      	mov	r3, r1
 80075d6:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
 80075da:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
    int64_t f8f9_38 = f8   * (int64_t) f9_38;
 80075de:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80075e2:	4618      	mov	r0, r3
 80075e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80075e8:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80075ec:	461a      	mov	r2, r3
 80075ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80075f2:	fb02 f501 	mul.w	r5, r2, r1
 80075f6:	fb00 f403 	mul.w	r4, r0, r3
 80075fa:	442c      	add	r4, r5
 80075fc:	fba0 2302 	umull	r2, r3, r0, r2
 8007600:	18e1      	adds	r1, r4, r3
 8007602:	460b      	mov	r3, r1
 8007604:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
 8007608:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    int64_t f9f9_38 = f9   * (int64_t) f9_38;
 800760c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8007610:	4618      	mov	r0, r3
 8007612:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007616:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800761a:	461a      	mov	r2, r3
 800761c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007620:	fb02 f501 	mul.w	r5, r2, r1
 8007624:	fb00 f403 	mul.w	r4, r0, r3
 8007628:	442c      	add	r4, r5
 800762a:	fba0 2302 	umull	r2, r3, r0, r2
 800762e:	18e1      	adds	r1, r4, r3
 8007630:	460b      	mov	r3, r1
 8007632:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
 8007636:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
    int64_t h0 = f0f0  + f1f9_76 + f2f8_38 + f3f7_76 + f4f6_38 + f5f5_38;
 800763a:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800763e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007642:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	eb10 0802 	adds.w	r8, r0, r2
 800764e:	eb41 0903 	adc.w	r9, r1, r3
 8007652:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	eb18 0a02 	adds.w	sl, r8, r2
 800765e:	eb49 0b03 	adc.w	fp, r9, r3
 8007662:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	eb1a 0102 	adds.w	r1, sl, r2
 800766e:	f8c7 12d0 	str.w	r1, [r7, #720]	; 0x2d0
 8007672:	eb4b 0303 	adc.w	r3, fp, r3
 8007676:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800767a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8007686:	4621      	mov	r1, r4
 8007688:	1889      	adds	r1, r1, r2
 800768a:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 800768e:	4629      	mov	r1, r5
 8007690:	eb43 0101 	adc.w	r1, r3, r1
 8007694:	f8c7 12cc 	str.w	r1, [r7, #716]	; 0x2cc
 8007698:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800769c:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 80076a0:	4621      	mov	r1, r4
 80076a2:	1851      	adds	r1, r2, r1
 80076a4:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 80076a8:	4629      	mov	r1, r5
 80076aa:	eb43 0101 	adc.w	r1, r3, r1
 80076ae:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 80076b2:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 80076b6:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    int64_t h1 = f0f1_2 + f2f9_38 + f3f8_38 + f4f7_38 + f5f6_38;
 80076ba:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80076be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076c2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	1884      	adds	r4, r0, r2
 80076cc:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 80076d0:	eb41 0303 	adc.w	r3, r1, r3
 80076d4:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80076d8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 80076e4:	4621      	mov	r1, r4
 80076e6:	1889      	adds	r1, r1, r2
 80076e8:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 80076ec:	4629      	mov	r1, r5
 80076ee:	eb43 0101 	adc.w	r1, r3, r1
 80076f2:	f8c7 12bc 	str.w	r1, [r7, #700]	; 0x2bc
 80076f6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 8007702:	4621      	mov	r1, r4
 8007704:	1889      	adds	r1, r1, r2
 8007706:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 800770a:	4629      	mov	r1, r5
 800770c:	eb43 0101 	adc.w	r1, r3, r1
 8007710:	f8c7 12b4 	str.w	r1, [r7, #692]	; 0x2b4
 8007714:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 8007718:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 800771c:	4621      	mov	r1, r4
 800771e:	1851      	adds	r1, r2, r1
 8007720:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8007724:	4629      	mov	r1, r5
 8007726:	eb43 0101 	adc.w	r1, r3, r1
 800772a:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
 800772e:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8007732:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    int64_t h2 = f0f2_2 + f1f1_2 + f3f9_76 + f4f8_38 + f5f7_76 + f6f6_19;
 8007736:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800773a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800773e:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	1884      	adds	r4, r0, r2
 8007748:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 800774c:	eb41 0303 	adc.w	r3, r1, r3
 8007750:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007754:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	; 0x2a8
 8007760:	4621      	mov	r1, r4
 8007762:	1889      	adds	r1, r1, r2
 8007764:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8007768:	4629      	mov	r1, r5
 800776a:	eb43 0101 	adc.w	r1, r3, r1
 800776e:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 8007772:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8007776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777a:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 800777e:	4621      	mov	r1, r4
 8007780:	1889      	adds	r1, r1, r2
 8007782:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8007786:	4629      	mov	r1, r5
 8007788:	eb43 0101 	adc.w	r1, r3, r1
 800778c:	f8c7 129c 	str.w	r1, [r7, #668]	; 0x29c
 8007790:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8007794:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8007798:	4621      	mov	r1, r4
 800779a:	1889      	adds	r1, r1, r2
 800779c:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 80077a0:	4629      	mov	r1, r5
 80077a2:	eb43 0101 	adc.w	r1, r3, r1
 80077a6:	f8c7 1294 	str.w	r1, [r7, #660]	; 0x294
 80077aa:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 80077ae:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 80077b2:	4621      	mov	r1, r4
 80077b4:	1851      	adds	r1, r2, r1
 80077b6:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80077ba:	4629      	mov	r1, r5
 80077bc:	eb43 0101 	adc.w	r1, r3, r1
 80077c0:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 80077c4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80077c8:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    int64_t h3 = f0f3_2 + f1f2_2 + f4f9_38 + f5f8_38 + f6f7_38;
 80077cc:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80077d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077d4:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	1884      	adds	r4, r0, r2
 80077de:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 80077e2:	eb41 0303 	adc.w	r3, r1, r3
 80077e6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80077ea:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 80077ee:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 80077f2:	4621      	mov	r1, r4
 80077f4:	1889      	adds	r1, r1, r2
 80077f6:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 80077fa:	4629      	mov	r1, r5
 80077fc:	eb43 0101 	adc.w	r1, r3, r1
 8007800:	f8c7 1284 	str.w	r1, [r7, #644]	; 0x284
 8007804:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 8007808:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 800780c:	4621      	mov	r1, r4
 800780e:	1889      	adds	r1, r1, r2
 8007810:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8007814:	4629      	mov	r1, r5
 8007816:	eb43 0101 	adc.w	r1, r3, r1
 800781a:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 800781e:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 8007822:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 8007826:	4621      	mov	r1, r4
 8007828:	1851      	adds	r1, r2, r1
 800782a:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800782e:	4629      	mov	r1, r5
 8007830:	eb43 0101 	adc.w	r1, r3, r1
 8007834:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8007838:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800783c:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    int64_t h4 = f0f4_2 + f1f3_4 + f2f2   + f5f9_76 + f6f8_38 + f7f7_38;
 8007840:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8007844:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007848:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	1884      	adds	r4, r0, r2
 8007852:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 8007856:	eb41 0303 	adc.w	r3, r1, r3
 800785a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800785e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 800786a:	4621      	mov	r1, r4
 800786c:	1889      	adds	r1, r1, r2
 800786e:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8007872:	4629      	mov	r1, r5
 8007874:	eb43 0101 	adc.w	r1, r3, r1
 8007878:	f8c7 126c 	str.w	r1, [r7, #620]	; 0x26c
 800787c:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8007880:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 8007884:	4621      	mov	r1, r4
 8007886:	1889      	adds	r1, r1, r2
 8007888:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 800788c:	4629      	mov	r1, r5
 800788e:	eb43 0101 	adc.w	r1, r3, r1
 8007892:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 8007896:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800789a:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 800789e:	4621      	mov	r1, r4
 80078a0:	1889      	adds	r1, r1, r2
 80078a2:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 80078a6:	4629      	mov	r1, r5
 80078a8:	eb43 0101 	adc.w	r1, r3, r1
 80078ac:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 80078b0:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 80078b4:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 80078b8:	4621      	mov	r1, r4
 80078ba:	1851      	adds	r1, r2, r1
 80078bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80078c0:	4629      	mov	r1, r5
 80078c2:	eb43 0101 	adc.w	r1, r3, r1
 80078c6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 80078ca:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80078ce:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    int64_t h5 = f0f5_2 + f1f4_2 + f2f3_2 + f6f9_38 + f7f8_38;
 80078d2:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 80078d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078da:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	1884      	adds	r4, r0, r2
 80078e4:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 80078e8:	eb41 0303 	adc.w	r3, r1, r3
 80078ec:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80078f0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 80078fc:	4621      	mov	r1, r4
 80078fe:	1889      	adds	r1, r1, r2
 8007900:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8007904:	4629      	mov	r1, r5
 8007906:	eb43 0101 	adc.w	r1, r3, r1
 800790a:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 800790e:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 8007912:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 8007916:	4621      	mov	r1, r4
 8007918:	1889      	adds	r1, r1, r2
 800791a:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 800791e:	4629      	mov	r1, r5
 8007920:	eb43 0101 	adc.w	r1, r3, r1
 8007924:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 8007928:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 800792c:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8007930:	4621      	mov	r1, r4
 8007932:	1851      	adds	r1, r2, r1
 8007934:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8007938:	4629      	mov	r1, r5
 800793a:	eb43 0101 	adc.w	r1, r3, r1
 800793e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 8007942:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8007946:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    int64_t h6 = f0f6_2 + f1f5_4 + f2f4_2 + f3f3_2 + f7f9_76 + f8f8_19;
 800794a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800794e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007952:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	1884      	adds	r4, r0, r2
 800795c:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 8007960:	eb41 0303 	adc.w	r3, r1, r3
 8007964:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8007968:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 8007974:	4621      	mov	r1, r4
 8007976:	1889      	adds	r1, r1, r2
 8007978:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 800797c:	4629      	mov	r1, r5
 800797e:	eb43 0101 	adc.w	r1, r3, r1
 8007982:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 8007986:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 8007992:	4621      	mov	r1, r4
 8007994:	1889      	adds	r1, r1, r2
 8007996:	f8c7 1228 	str.w	r1, [r7, #552]	; 0x228
 800799a:	4629      	mov	r1, r5
 800799c:	eb43 0101 	adc.w	r1, r3, r1
 80079a0:	f8c7 122c 	str.w	r1, [r7, #556]	; 0x22c
 80079a4:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 80079a8:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 80079ac:	4621      	mov	r1, r4
 80079ae:	1889      	adds	r1, r1, r2
 80079b0:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 80079b4:	4629      	mov	r1, r5
 80079b6:	eb43 0101 	adc.w	r1, r3, r1
 80079ba:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 80079be:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 80079c2:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 80079c6:	4621      	mov	r1, r4
 80079c8:	1851      	adds	r1, r2, r1
 80079ca:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80079ce:	4629      	mov	r1, r5
 80079d0:	eb43 0101 	adc.w	r1, r3, r1
 80079d4:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80079d8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80079dc:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    int64_t h7 = f0f7_2 + f1f6_2 + f2f5_2 + f3f4_2 + f8f9_38;
 80079e0:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80079e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079e8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	1884      	adds	r4, r0, r2
 80079f2:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 80079f6:	eb41 0303 	adc.w	r3, r1, r3
 80079fa:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80079fe:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	1889      	adds	r1, r1, r2
 8007a0e:	f8c7 1210 	str.w	r1, [r7, #528]	; 0x210
 8007a12:	4629      	mov	r1, r5
 8007a14:	eb43 0101 	adc.w	r1, r3, r1
 8007a18:	f8c7 1214 	str.w	r1, [r7, #532]	; 0x214
 8007a1c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 8007a28:	4621      	mov	r1, r4
 8007a2a:	1889      	adds	r1, r1, r2
 8007a2c:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8007a30:	4629      	mov	r1, r5
 8007a32:	eb43 0101 	adc.w	r1, r3, r1
 8007a36:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8007a3a:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8007a3e:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 8007a42:	4621      	mov	r1, r4
 8007a44:	1851      	adds	r1, r2, r1
 8007a46:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	eb43 0101 	adc.w	r1, r3, r1
 8007a50:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8007a54:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8007a58:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    int64_t h8 = f0f8_2 + f1f7_4 + f2f6_2 + f3f5_4 + f4f4   + f9f9_38;
 8007a5c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8007a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a64:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	1884      	adds	r4, r0, r2
 8007a6e:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8007a72:	eb41 0303 	adc.w	r3, r1, r3
 8007a76:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8007a7a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 8007a86:	4621      	mov	r1, r4
 8007a88:	1889      	adds	r1, r1, r2
 8007a8a:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 8007a8e:	4629      	mov	r1, r5
 8007a90:	eb43 0101 	adc.w	r1, r3, r1
 8007a94:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 8007a98:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	1889      	adds	r1, r1, r2
 8007aa8:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8007aac:	4629      	mov	r1, r5
 8007aae:	eb43 0101 	adc.w	r1, r3, r1
 8007ab2:	f8c7 11f4 	str.w	r1, [r7, #500]	; 0x1f4
 8007ab6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	1889      	adds	r1, r1, r2
 8007ac6:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8007aca:	4629      	mov	r1, r5
 8007acc:	eb43 0101 	adc.w	r1, r3, r1
 8007ad0:	f8c7 11ec 	str.w	r1, [r7, #492]	; 0x1ec
 8007ad4:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8007ad8:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8007adc:	4621      	mov	r1, r4
 8007ade:	1851      	adds	r1, r2, r1
 8007ae0:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	eb43 0101 	adc.w	r1, r3, r1
 8007aea:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8007aee:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8007af2:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    int64_t h9 = f0f9_2 + f1f8_2 + f2f7_2 + f3f6_2 + f4f5_2;
 8007af6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8007afa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007afe:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	1884      	adds	r4, r0, r2
 8007b08:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 8007b0c:	eb41 0303 	adc.w	r3, r1, r3
 8007b10:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007b14:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8007b20:	4621      	mov	r1, r4
 8007b22:	1889      	adds	r1, r1, r2
 8007b24:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 8007b28:	4629      	mov	r1, r5
 8007b2a:	eb43 0101 	adc.w	r1, r3, r1
 8007b2e:	f8c7 11dc 	str.w	r1, [r7, #476]	; 0x1dc
 8007b32:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8007b3e:	4621      	mov	r1, r4
 8007b40:	1889      	adds	r1, r1, r2
 8007b42:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8007b46:	4629      	mov	r1, r5
 8007b48:	eb43 0101 	adc.w	r1, r3, r1
 8007b4c:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 8007b50:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	1851      	adds	r1, r2, r1
 8007b60:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8007b64:	4629      	mov	r1, r5
 8007b66:	eb43 0101 	adc.w	r1, r3, r1
 8007b6a:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8007b6e:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8007b72:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    int64_t carry5;
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;
    h0 += h0;
 8007b76:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8007b7a:	1891      	adds	r1, r2, r2
 8007b7c:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8007b80:	415b      	adcs	r3, r3
 8007b82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007b86:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8007b8a:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h1 += h1;
 8007b8e:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8007b92:	1891      	adds	r1, r2, r2
 8007b94:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8007b98:	415b      	adcs	r3, r3
 8007b9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b9e:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8007ba2:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h2 += h2;
 8007ba6:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8007baa:	1891      	adds	r1, r2, r2
 8007bac:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8007bb0:	415b      	adcs	r3, r3
 8007bb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007bb6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8007bba:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    h3 += h3;
 8007bbe:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8007bc2:	1891      	adds	r1, r2, r2
 8007bc4:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8007bc8:	415b      	adcs	r3, r3
 8007bca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007bce:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8007bd2:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    h4 += h4;
 8007bd6:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8007bda:	1891      	adds	r1, r2, r2
 8007bdc:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8007be0:	415b      	adcs	r3, r3
 8007be2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007be6:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8007bea:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    h5 += h5;
 8007bee:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8007bf2:	1891      	adds	r1, r2, r2
 8007bf4:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8007bf8:	415b      	adcs	r3, r3
 8007bfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bfe:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8007c02:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h6 += h6;
 8007c06:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8007c0a:	1891      	adds	r1, r2, r2
 8007c0c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8007c10:	415b      	adcs	r3, r3
 8007c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c16:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007c1a:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    h7 += h7;
 8007c1e:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8007c22:	1891      	adds	r1, r2, r2
 8007c24:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8007c28:	415b      	adcs	r3, r3
 8007c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007c2e:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007c32:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    h8 += h8;
 8007c36:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8007c3a:	1891      	adds	r1, r2, r2
 8007c3c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007c40:	415b      	adcs	r3, r3
 8007c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007c46:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8007c4a:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    h9 += h9;
 8007c4e:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8007c52:	1891      	adds	r1, r2, r2
 8007c54:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8007c58:	415b      	adcs	r3, r3
 8007c5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c5e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8007c62:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8007c66:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8007c6a:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8007c6e:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8007c72:	f143 0300 	adc.w	r3, r3, #0
 8007c76:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007c7a:	f04f 0200 	mov.w	r2, #0
 8007c7e:	f04f 0300 	mov.w	r3, #0
 8007c82:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 8007c86:	4621      	mov	r1, r4
 8007c88:	0e8a      	lsrs	r2, r1, #26
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8007c90:	4629      	mov	r1, r5
 8007c92:	168b      	asrs	r3, r1, #26
 8007c94:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    h1 += carry0;
 8007c98:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	; 0x370
 8007c9c:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8007ca0:	1884      	adds	r4, r0, r2
 8007ca2:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8007ca6:	eb41 0303 	adc.w	r3, r1, r3
 8007caa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cae:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8007cb2:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h0 -= carry0 << 26;
 8007cb6:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8007cba:	f04f 0000 	mov.w	r0, #0
 8007cbe:	f04f 0100 	mov.w	r1, #0
 8007cc2:	0699      	lsls	r1, r3, #26
 8007cc4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8007cc8:	0690      	lsls	r0, r2, #26
 8007cca:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8007cce:	1a14      	subs	r4, r2, r0
 8007cd0:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8007cd4:	eb63 0301 	sbc.w	r3, r3, r1
 8007cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007cdc:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8007ce0:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8007ce4:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8007ce8:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8007cec:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 8007cf0:	f143 0300 	adc.w	r3, r3, #0
 8007cf4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 8007d04:	4621      	mov	r1, r4
 8007d06:	0e8a      	lsrs	r2, r1, #26
 8007d08:	4629      	mov	r1, r5
 8007d0a:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8007d0e:	4629      	mov	r1, r5
 8007d10:	168b      	asrs	r3, r1, #26
 8007d12:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
    h5 += carry4;
 8007d16:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	; 0x350
 8007d1a:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8007d1e:	1884      	adds	r4, r0, r2
 8007d20:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8007d24:	eb41 0303 	adc.w	r3, r1, r3
 8007d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d2c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8007d30:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h4 -= carry4 << 26;
 8007d34:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8007d38:	f04f 0000 	mov.w	r0, #0
 8007d3c:	f04f 0100 	mov.w	r1, #0
 8007d40:	0699      	lsls	r1, r3, #26
 8007d42:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8007d46:	0690      	lsls	r0, r2, #26
 8007d48:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8007d4c:	1a14      	subs	r4, r2, r0
 8007d4e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8007d52:	eb63 0301 	sbc.w	r3, r3, r1
 8007d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d5a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007d5e:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 8007d62:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8007d66:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8007d6a:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8007d6e:	f143 0300 	adc.w	r3, r3, #0
 8007d72:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	f04f 0300 	mov.w	r3, #0
 8007d7e:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8007d82:	4621      	mov	r1, r4
 8007d84:	0e4a      	lsrs	r2, r1, #25
 8007d86:	4629      	mov	r1, r5
 8007d88:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	164b      	asrs	r3, r1, #25
 8007d90:	e9c7 23c6 	strd	r2, r3, [r7, #792]	; 0x318
    h2 += carry1;
 8007d94:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	; 0x368
 8007d98:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8007d9c:	1884      	adds	r4, r0, r2
 8007d9e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8007da2:	eb41 0303 	adc.w	r3, r1, r3
 8007da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007daa:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8007dae:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    h1 -= carry1 << 25;
 8007db2:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8007db6:	f04f 0000 	mov.w	r0, #0
 8007dba:	f04f 0100 	mov.w	r1, #0
 8007dbe:	0659      	lsls	r1, r3, #25
 8007dc0:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8007dc4:	0650      	lsls	r0, r2, #25
 8007dc6:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8007dca:	1a14      	subs	r4, r2, r0
 8007dcc:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8007dd0:	eb63 0301 	sbc.w	r3, r3, r1
 8007dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dd8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8007ddc:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 8007de0:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8007de4:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8007de8:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8007dec:	f143 0300 	adc.w	r3, r3, #0
 8007df0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8007e00:	4621      	mov	r1, r4
 8007e02:	0e4a      	lsrs	r2, r1, #25
 8007e04:	4629      	mov	r1, r5
 8007e06:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	164b      	asrs	r3, r1, #25
 8007e0e:	e9c7 23c4 	strd	r2, r3, [r7, #784]	; 0x310
    h6 += carry5;
 8007e12:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 8007e16:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8007e1a:	1884      	adds	r4, r0, r2
 8007e1c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8007e20:	eb41 0303 	adc.w	r3, r1, r3
 8007e24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e28:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8007e2c:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    h5 -= carry5 << 25;
 8007e30:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8007e34:	f04f 0000 	mov.w	r0, #0
 8007e38:	f04f 0100 	mov.w	r1, #0
 8007e3c:	0659      	lsls	r1, r3, #25
 8007e3e:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8007e42:	0650      	lsls	r0, r2, #25
 8007e44:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8007e48:	1a14      	subs	r4, r2, r0
 8007e4a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8007e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007e56:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8007e5a:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 8007e5e:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8007e62:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8007e66:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8007e6a:	f143 0300 	adc.w	r3, r3, #0
 8007e6e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8007e7e:	4621      	mov	r1, r4
 8007e80:	0e8a      	lsrs	r2, r1, #26
 8007e82:	4629      	mov	r1, r5
 8007e84:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8007e88:	4629      	mov	r1, r5
 8007e8a:	168b      	asrs	r3, r1, #26
 8007e8c:	e9c7 23c2 	strd	r2, r3, [r7, #776]	; 0x308
    h3 += carry2;
 8007e90:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8007e94:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8007e98:	1884      	adds	r4, r0, r2
 8007e9a:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8007e9e:	eb41 0303 	adc.w	r3, r1, r3
 8007ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ea6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8007eaa:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    h2 -= carry2 << 26;
 8007eae:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f04f 0100 	mov.w	r1, #0
 8007eba:	0699      	lsls	r1, r3, #26
 8007ebc:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8007ec0:	0690      	lsls	r0, r2, #26
 8007ec2:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8007ec6:	1a14      	subs	r4, r2, r0
 8007ec8:	67bc      	str	r4, [r7, #120]	; 0x78
 8007eca:	eb63 0301 	sbc.w	r3, r3, r1
 8007ece:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ed0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8007ed4:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 8007ed8:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8007edc:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8007ee0:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8007ee4:	f143 0300 	adc.w	r3, r3, #0
 8007ee8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007eec:	f04f 0200 	mov.w	r2, #0
 8007ef0:	f04f 0300 	mov.w	r3, #0
 8007ef4:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8007ef8:	4621      	mov	r1, r4
 8007efa:	0e8a      	lsrs	r2, r1, #26
 8007efc:	4629      	mov	r1, r5
 8007efe:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8007f02:	4629      	mov	r1, r5
 8007f04:	168b      	asrs	r3, r1, #26
 8007f06:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
    h7 += carry6;
 8007f0a:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8007f0e:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8007f12:	1884      	adds	r4, r0, r2
 8007f14:	673c      	str	r4, [r7, #112]	; 0x70
 8007f16:	eb41 0303 	adc.w	r3, r1, r3
 8007f1a:	677b      	str	r3, [r7, #116]	; 0x74
 8007f1c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8007f20:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    h6 -= carry6 << 26;
 8007f24:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8007f28:	f04f 0000 	mov.w	r0, #0
 8007f2c:	f04f 0100 	mov.w	r1, #0
 8007f30:	0699      	lsls	r1, r3, #26
 8007f32:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8007f36:	0690      	lsls	r0, r2, #26
 8007f38:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8007f3c:	1a14      	subs	r4, r2, r0
 8007f3e:	66bc      	str	r4, [r7, #104]	; 0x68
 8007f40:	eb63 0301 	sbc.w	r3, r3, r1
 8007f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f46:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8007f4a:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8007f4e:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8007f52:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8007f56:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8007f5a:	f143 0300 	adc.w	r3, r3, #0
 8007f5e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007f62:	f04f 0200 	mov.w	r2, #0
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 8007f6e:	4621      	mov	r1, r4
 8007f70:	0e4a      	lsrs	r2, r1, #25
 8007f72:	4629      	mov	r1, r5
 8007f74:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8007f78:	4629      	mov	r1, r5
 8007f7a:	164b      	asrs	r3, r1, #25
 8007f7c:	e9c7 23be 	strd	r2, r3, [r7, #760]	; 0x2f8
    h4 += carry3;
 8007f80:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	; 0x358
 8007f84:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8007f88:	1884      	adds	r4, r0, r2
 8007f8a:	663c      	str	r4, [r7, #96]	; 0x60
 8007f8c:	eb41 0303 	adc.w	r3, r1, r3
 8007f90:	667b      	str	r3, [r7, #100]	; 0x64
 8007f92:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8007f96:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    h3 -= carry3 << 25;
 8007f9a:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8007f9e:	f04f 0000 	mov.w	r0, #0
 8007fa2:	f04f 0100 	mov.w	r1, #0
 8007fa6:	0659      	lsls	r1, r3, #25
 8007fa8:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8007fac:	0650      	lsls	r0, r2, #25
 8007fae:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8007fb2:	1a14      	subs	r4, r2, r0
 8007fb4:	65bc      	str	r4, [r7, #88]	; 0x58
 8007fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8007fba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fbc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8007fc0:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 8007fc4:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8007fc8:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8007fcc:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8007fd0:	f143 0300 	adc.w	r3, r3, #0
 8007fd4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	0e4a      	lsrs	r2, r1, #25
 8007fe8:	4629      	mov	r1, r5
 8007fea:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8007fee:	4629      	mov	r1, r5
 8007ff0:	164b      	asrs	r3, r1, #25
 8007ff2:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
    h8 += carry7;
 8007ff6:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8007ffa:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8007ffe:	1884      	adds	r4, r0, r2
 8008000:	653c      	str	r4, [r7, #80]	; 0x50
 8008002:	eb41 0303 	adc.w	r3, r1, r3
 8008006:	657b      	str	r3, [r7, #84]	; 0x54
 8008008:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800800c:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    h7 -= carry7 << 25;
 8008010:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8008014:	f04f 0000 	mov.w	r0, #0
 8008018:	f04f 0100 	mov.w	r1, #0
 800801c:	0659      	lsls	r1, r3, #25
 800801e:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8008022:	0650      	lsls	r0, r2, #25
 8008024:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8008028:	1a14      	subs	r4, r2, r0
 800802a:	64bc      	str	r4, [r7, #72]	; 0x48
 800802c:	eb63 0301 	sbc.w	r3, r3, r1
 8008030:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008032:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8008036:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 800803a:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 800803e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8008042:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8008046:	f143 0300 	adc.w	r3, r3, #0
 800804a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800804e:	f04f 0200 	mov.w	r2, #0
 8008052:	f04f 0300 	mov.w	r3, #0
 8008056:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 800805a:	4621      	mov	r1, r4
 800805c:	0e8a      	lsrs	r2, r1, #26
 800805e:	4629      	mov	r1, r5
 8008060:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8008064:	4629      	mov	r1, r5
 8008066:	168b      	asrs	r3, r1, #26
 8008068:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
    h5 += carry4;
 800806c:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	; 0x350
 8008070:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8008074:	1884      	adds	r4, r0, r2
 8008076:	643c      	str	r4, [r7, #64]	; 0x40
 8008078:	eb41 0303 	adc.w	r3, r1, r3
 800807c:	647b      	str	r3, [r7, #68]	; 0x44
 800807e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008082:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h4 -= carry4 << 26;
 8008086:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800808a:	f04f 0000 	mov.w	r0, #0
 800808e:	f04f 0100 	mov.w	r1, #0
 8008092:	0699      	lsls	r1, r3, #26
 8008094:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8008098:	0690      	lsls	r0, r2, #26
 800809a:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 800809e:	1a14      	subs	r4, r2, r0
 80080a0:	63bc      	str	r4, [r7, #56]	; 0x38
 80080a2:	eb63 0301 	sbc.w	r3, r3, r1
 80080a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80080ac:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 80080b0:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 80080b4:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80080b8:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 80080bc:	f143 0300 	adc.w	r3, r3, #0
 80080c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80080c4:	f04f 0200 	mov.w	r2, #0
 80080c8:	f04f 0300 	mov.w	r3, #0
 80080cc:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 80080d0:	4621      	mov	r1, r4
 80080d2:	0e8a      	lsrs	r2, r1, #26
 80080d4:	4629      	mov	r1, r5
 80080d6:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80080da:	4629      	mov	r1, r5
 80080dc:	168b      	asrs	r3, r1, #26
 80080de:	e9c7 23ba 	strd	r2, r3, [r7, #744]	; 0x2e8
    h9 += carry8;
 80080e2:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 80080e6:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 80080ea:	1884      	adds	r4, r0, r2
 80080ec:	633c      	str	r4, [r7, #48]	; 0x30
 80080ee:	eb41 0303 	adc.w	r3, r1, r3
 80080f2:	637b      	str	r3, [r7, #52]	; 0x34
 80080f4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80080f8:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    h8 -= carry8 << 26;
 80080fc:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8008100:	f04f 0000 	mov.w	r0, #0
 8008104:	f04f 0100 	mov.w	r1, #0
 8008108:	0699      	lsls	r1, r3, #26
 800810a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 800810e:	0690      	lsls	r0, r2, #26
 8008110:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8008114:	1a14      	subs	r4, r2, r0
 8008116:	62bc      	str	r4, [r7, #40]	; 0x28
 8008118:	eb63 0301 	sbc.w	r3, r3, r1
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800811e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008122:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 8008126:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 800812a:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 800812e:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8008132:	f143 0300 	adc.w	r3, r3, #0
 8008136:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800813a:	f04f 0200 	mov.w	r2, #0
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8008146:	4621      	mov	r1, r4
 8008148:	0e4a      	lsrs	r2, r1, #25
 800814a:	4629      	mov	r1, r5
 800814c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8008150:	4629      	mov	r1, r5
 8008152:	164b      	asrs	r3, r1, #25
 8008154:	e9c7 23b8 	strd	r2, r3, [r7, #736]	; 0x2e0
    h0 += carry9 * 19;
 8008158:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 800815c:	4622      	mov	r2, r4
 800815e:	462b      	mov	r3, r5
 8008160:	f04f 0000 	mov.w	r0, #0
 8008164:	f04f 0100 	mov.w	r1, #0
 8008168:	00d9      	lsls	r1, r3, #3
 800816a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800816e:	00d0      	lsls	r0, r2, #3
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	1912      	adds	r2, r2, r4
 8008176:	eb45 0303 	adc.w	r3, r5, r3
 800817a:	1891      	adds	r1, r2, r2
 800817c:	6239      	str	r1, [r7, #32]
 800817e:	415b      	adcs	r3, r3
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
 8008182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008186:	1911      	adds	r1, r2, r4
 8008188:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800818c:	416b      	adcs	r3, r5
 800818e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8008192:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8008196:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 800819a:	4621      	mov	r1, r4
 800819c:	1851      	adds	r1, r2, r1
 800819e:	61b9      	str	r1, [r7, #24]
 80081a0:	4629      	mov	r1, r5
 80081a2:	eb43 0101 	adc.w	r1, r3, r1
 80081a6:	61f9      	str	r1, [r7, #28]
 80081a8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80081ac:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h9 -= carry9 << 25;
 80081b0:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	f04f 0300 	mov.w	r3, #0
 80081bc:	064b      	lsls	r3, r1, #25
 80081be:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 80081c2:	0642      	lsls	r2, r0, #25
 80081c4:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 80081c8:	1a84      	subs	r4, r0, r2
 80081ca:	613c      	str	r4, [r7, #16]
 80081cc:	eb61 0303 	sbc.w	r3, r1, r3
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80081d6:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 80081da:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 80081de:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80081e2:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 80081e6:	f143 0300 	adc.w	r3, r3, #0
 80081ea:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80081ee:	f04f 0200 	mov.w	r2, #0
 80081f2:	f04f 0300 	mov.w	r3, #0
 80081f6:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80081fa:	4621      	mov	r1, r4
 80081fc:	0e8a      	lsrs	r2, r1, #26
 80081fe:	4629      	mov	r1, r5
 8008200:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8008204:	4629      	mov	r1, r5
 8008206:	168b      	asrs	r3, r1, #26
 8008208:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    h1 += carry0;
 800820c:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	; 0x370
 8008210:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8008214:	1884      	adds	r4, r0, r2
 8008216:	60bc      	str	r4, [r7, #8]
 8008218:	eb41 0303 	adc.w	r3, r1, r3
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008222:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h0 -= carry0 << 26;
 8008226:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 800822a:	f04f 0200 	mov.w	r2, #0
 800822e:	f04f 0300 	mov.w	r3, #0
 8008232:	068b      	lsls	r3, r1, #26
 8008234:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8008238:	0682      	lsls	r2, r0, #26
 800823a:	e9d7 01de 	ldrd	r0, r1, [r7, #888]	; 0x378
 800823e:	1a84      	subs	r4, r0, r2
 8008240:	603c      	str	r4, [r7, #0]
 8008242:	eb61 0303 	sbc.w	r3, r1, r3
 8008246:	607b      	str	r3, [r7, #4]
 8008248:	e9d7 3400 	ldrd	r3, r4, [r7]
 800824c:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h[0] = (int32_t) h0;
 8008250:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 800825e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3304      	adds	r3, #4
 8008266:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800826a:	6812      	ldr	r2, [r2, #0]
 800826c:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 800826e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3308      	adds	r3, #8
 8008276:	f507 725a 	add.w	r2, r7, #872	; 0x368
 800827a:	6812      	ldr	r2, [r2, #0]
 800827c:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 800827e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	330c      	adds	r3, #12
 8008286:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800828a:	6812      	ldr	r2, [r2, #0]
 800828c:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 800828e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3310      	adds	r3, #16
 8008296:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800829a:	6812      	ldr	r2, [r2, #0]
 800829c:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 800829e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3314      	adds	r3, #20
 80082a6:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80082aa:	6812      	ldr	r2, [r2, #0]
 80082ac:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 80082ae:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3318      	adds	r3, #24
 80082b6:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80082ba:	6812      	ldr	r2, [r2, #0]
 80082bc:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 80082be:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	331c      	adds	r3, #28
 80082c6:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80082ca:	6812      	ldr	r2, [r2, #0]
 80082cc:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 80082ce:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3320      	adds	r3, #32
 80082d6:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80082da:	6812      	ldr	r2, [r2, #0]
 80082dc:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 80082de:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3324      	adds	r3, #36	; 0x24
 80082e6:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	601a      	str	r2, [r3, #0]
}
 80082ee:	bf00      	nop
 80082f0:	f207 579c 	addw	r7, r7, #1436	; 0x59c
 80082f4:	46bd      	mov	sp, r7
 80082f6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80082fa:	4770      	bx	lr

080082fc <fe_sub>:

Postconditions:
   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_sub(fe h, const fe f, const fe g) {
 80082fc:	b480      	push	{r7}
 80082fe:	b0a3      	sub	sp, #140	; 0x8c
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
    int32_t f0 = f[0];
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    int32_t f1 = f[1];
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t f2 = f[2];
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t f3 = f[3];
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t f4 = f[4];
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t f5 = f[5];
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	673b      	str	r3, [r7, #112]	; 0x70
    int32_t f6 = f[6];
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t f7 = f[7];
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t f8 = f[8];
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t f9 = f[9];
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	663b      	str	r3, [r7, #96]	; 0x60
    int32_t g0 = g[0];
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t g1 = g[1];
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t g2 = g[2];
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t g3 = g[3];
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t g4 = g[4];
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t g5 = g[5];
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t g6 = g[6];
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t g7 = g[7];
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t g8 = g[8];
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t g9 = g[9];
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h0 = f0 - g0;
 8008384:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t h1 = f1 - g1;
 800838e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h2 = f2 - g2;
 8008398:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800839a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h3 = f3 - g3;
 80083a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80083a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h4 = f4 - g4;
 80083a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80083aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h5 = f5 - g5;
 80083b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80083b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	623b      	str	r3, [r7, #32]
    int32_t h6 = f6 - g6;
 80083b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	61fb      	str	r3, [r7, #28]
    int32_t h7 = f7 - g7;
 80083c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	61bb      	str	r3, [r7, #24]
    int32_t h8 = f8 - g8;
 80083c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80083ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	617b      	str	r3, [r7, #20]
    int32_t h9 = f9 - g9;
 80083d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	613b      	str	r3, [r7, #16]

    h[0] = h0;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083dc:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3304      	adds	r3, #4
 80083e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e4:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3308      	adds	r3, #8
 80083ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ec:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	330c      	adds	r3, #12
 80083f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083f4:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3310      	adds	r3, #16
 80083fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fc:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3314      	adds	r3, #20
 8008402:	6a3a      	ldr	r2, [r7, #32]
 8008404:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3318      	adds	r3, #24
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	331c      	adds	r3, #28
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3320      	adds	r3, #32
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3324      	adds	r3, #36	; 0x24
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	601a      	str	r2, [r3, #0]
}
 8008426:	bf00      	nop
 8008428:	378c      	adds	r7, #140	; 0x8c
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <fe_tobytes>:

  Have q+2^(-255)x = 2^(-255)(h + 19 2^(-25) h9 + 2^(-1))
  so floor(2^(-255)(h + 19 2^(-25) h9 + 2^(-1))) = q.
*/

void fe_tobytes(unsigned char *s, const fe h) {
 8008432:	b480      	push	{r7}
 8008434:	b099      	sub	sp, #100	; 0x64
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	6039      	str	r1, [r7, #0]
    int32_t h0 = h[0];
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t h1 = h[1];
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t h2 = h[2];
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t h3 = h[3];
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t h4 = h[4];
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t h5 = h[5];
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t h6 = h[6];
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t h7 = h[7];
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t h8 = h[8];
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	6a1b      	ldr	r3, [r3, #32]
 8008470:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t h9 = h[9];
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t carry5;
    int32_t carry6;
    int32_t carry7;
    int32_t carry8;
    int32_t carry9;
    q = (19 * h9 + (((int32_t) 1) << 24)) >> 25;
 8008478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800847a:	4613      	mov	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	4413      	add	r3, r2
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	4413      	add	r3, r2
 8008484:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8008488:	165b      	asrs	r3, r3, #25
 800848a:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h0 + q) >> 26;
 800848c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800848e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008490:	4413      	add	r3, r2
 8008492:	169b      	asrs	r3, r3, #26
 8008494:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h1 + q) >> 25;
 8008496:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849a:	4413      	add	r3, r2
 800849c:	165b      	asrs	r3, r3, #25
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h2 + q) >> 26;
 80084a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a4:	4413      	add	r3, r2
 80084a6:	169b      	asrs	r3, r3, #26
 80084a8:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h3 + q) >> 25;
 80084aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ae:	4413      	add	r3, r2
 80084b0:	165b      	asrs	r3, r3, #25
 80084b2:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h4 + q) >> 26;
 80084b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b8:	4413      	add	r3, r2
 80084ba:	169b      	asrs	r3, r3, #26
 80084bc:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h5 + q) >> 25;
 80084be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c2:	4413      	add	r3, r2
 80084c4:	165b      	asrs	r3, r3, #25
 80084c6:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h6 + q) >> 26;
 80084c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	4413      	add	r3, r2
 80084ce:	169b      	asrs	r3, r3, #26
 80084d0:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h7 + q) >> 25;
 80084d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d6:	4413      	add	r3, r2
 80084d8:	165b      	asrs	r3, r3, #25
 80084da:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h8 + q) >> 26;
 80084dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80084de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e0:	4413      	add	r3, r2
 80084e2:	169b      	asrs	r3, r3, #26
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h9 + q) >> 25;
 80084e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ea:	4413      	add	r3, r2
 80084ec:	165b      	asrs	r3, r3, #25
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34
    /* Goal: Output h-(2^255-19)q, which is between 0 and 2^255-20. */
    h0 += 19 * q;
 80084f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084f2:	4613      	mov	r3, r2
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	4413      	add	r3, r2
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	4413      	add	r3, r2
 80084fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084fe:	4413      	add	r3, r2
 8008500:	65fb      	str	r3, [r7, #92]	; 0x5c
    /* Goal: Output h-2^255 q, which is between 0 and 2^255-20. */
    carry0 = h0 >> 26;
 8008502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008504:	169b      	asrs	r3, r3, #26
 8008506:	633b      	str	r3, [r7, #48]	; 0x30
    h1 += carry0;
 8008508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	4413      	add	r3, r2
 800850e:	65bb      	str	r3, [r7, #88]	; 0x58
    h0 -= carry0 << 26;
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	069b      	lsls	r3, r3, #26
 8008514:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	65fb      	str	r3, [r7, #92]	; 0x5c
    carry1 = h1 >> 25;
 800851a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800851c:	165b      	asrs	r3, r3, #25
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
    h2 += carry1;
 8008520:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	4413      	add	r3, r2
 8008526:	657b      	str	r3, [r7, #84]	; 0x54
    h1 -= carry1 << 25;
 8008528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852a:	065b      	lsls	r3, r3, #25
 800852c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	65bb      	str	r3, [r7, #88]	; 0x58
    carry2 = h2 >> 26;
 8008532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008534:	169b      	asrs	r3, r3, #26
 8008536:	62bb      	str	r3, [r7, #40]	; 0x28
    h3 += carry2;
 8008538:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	4413      	add	r3, r2
 800853e:	653b      	str	r3, [r7, #80]	; 0x50
    h2 -= carry2 << 26;
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	069b      	lsls	r3, r3, #26
 8008544:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	657b      	str	r3, [r7, #84]	; 0x54
    carry3 = h3 >> 25;
 800854a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800854c:	165b      	asrs	r3, r3, #25
 800854e:	627b      	str	r3, [r7, #36]	; 0x24
    h4 += carry3;
 8008550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	4413      	add	r3, r2
 8008556:	64fb      	str	r3, [r7, #76]	; 0x4c
    h3 -= carry3 << 25;
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	065b      	lsls	r3, r3, #25
 800855c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	653b      	str	r3, [r7, #80]	; 0x50
    carry4 = h4 >> 26;
 8008562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008564:	169b      	asrs	r3, r3, #26
 8008566:	623b      	str	r3, [r7, #32]
    h5 += carry4;
 8008568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	4413      	add	r3, r2
 800856e:	64bb      	str	r3, [r7, #72]	; 0x48
    h4 -= carry4 << 26;
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	069b      	lsls	r3, r3, #26
 8008574:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	64fb      	str	r3, [r7, #76]	; 0x4c
    carry5 = h5 >> 25;
 800857a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800857c:	165b      	asrs	r3, r3, #25
 800857e:	61fb      	str	r3, [r7, #28]
    h6 += carry5;
 8008580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	4413      	add	r3, r2
 8008586:	647b      	str	r3, [r7, #68]	; 0x44
    h5 -= carry5 << 25;
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	065b      	lsls	r3, r3, #25
 800858c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	64bb      	str	r3, [r7, #72]	; 0x48
    carry6 = h6 >> 26;
 8008592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008594:	169b      	asrs	r3, r3, #26
 8008596:	61bb      	str	r3, [r7, #24]
    h7 += carry6;
 8008598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	4413      	add	r3, r2
 800859e:	643b      	str	r3, [r7, #64]	; 0x40
    h6 -= carry6 << 26;
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	069b      	lsls	r3, r3, #26
 80085a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	647b      	str	r3, [r7, #68]	; 0x44
    carry7 = h7 >> 25;
 80085aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ac:	165b      	asrs	r3, r3, #25
 80085ae:	617b      	str	r3, [r7, #20]
    h8 += carry7;
 80085b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	4413      	add	r3, r2
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    h7 -= carry7 << 25;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	065b      	lsls	r3, r3, #25
 80085bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	643b      	str	r3, [r7, #64]	; 0x40
    carry8 = h8 >> 26;
 80085c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c4:	169b      	asrs	r3, r3, #26
 80085c6:	613b      	str	r3, [r7, #16]
    h9 += carry8;
 80085c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	4413      	add	r3, r2
 80085ce:	63bb      	str	r3, [r7, #56]	; 0x38
    h8 -= carry8 << 26;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	069b      	lsls	r3, r3, #26
 80085d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    carry9 = h9 >> 25;
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	165b      	asrs	r3, r3, #25
 80085de:	60fb      	str	r3, [r7, #12]
    h9 -= carry9 << 25;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	065b      	lsls	r3, r3, #25
 80085e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	63bb      	str	r3, [r7, #56]	; 0x38
    Goal: Output h0+...+2^255 h10-2^255 q, which is between 0 and 2^255-20.
    Have h0+...+2^230 h9 between 0 and 2^255-1;
    evidently 2^255 h10-2^255 q = 0.
    Goal: Output h0+...+2^230 h9.
    */
    s[0] = (unsigned char) (h0 >> 0);
 80085ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	701a      	strb	r2, [r3, #0]
    s[1] = (unsigned char) (h0 >> 8);
 80085f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085f4:	121a      	asrs	r2, r3, #8
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3301      	adds	r3, #1
 80085fa:	b2d2      	uxtb	r2, r2
 80085fc:	701a      	strb	r2, [r3, #0]
    s[2] = (unsigned char) (h0 >> 16);
 80085fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008600:	141a      	asrs	r2, r3, #16
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3302      	adds	r3, #2
 8008606:	b2d2      	uxtb	r2, r2
 8008608:	701a      	strb	r2, [r3, #0]
    s[3] = (unsigned char) ((h0 >> 24) | (h1 << 2));
 800860a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800860c:	161b      	asrs	r3, r3, #24
 800860e:	b25a      	sxtb	r2, r3
 8008610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	b25b      	sxtb	r3, r3
 8008616:	4313      	orrs	r3, r2
 8008618:	b25a      	sxtb	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3303      	adds	r3, #3
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	701a      	strb	r2, [r3, #0]
    s[4] = (unsigned char) (h1 >> 6);
 8008622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008624:	119a      	asrs	r2, r3, #6
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3304      	adds	r3, #4
 800862a:	b2d2      	uxtb	r2, r2
 800862c:	701a      	strb	r2, [r3, #0]
    s[5] = (unsigned char) (h1 >> 14);
 800862e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008630:	139a      	asrs	r2, r3, #14
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3305      	adds	r3, #5
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	701a      	strb	r2, [r3, #0]
    s[6] = (unsigned char) ((h1 >> 22) | (h2 << 3));
 800863a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800863c:	159b      	asrs	r3, r3, #22
 800863e:	b25a      	sxtb	r2, r3
 8008640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	b25b      	sxtb	r3, r3
 8008646:	4313      	orrs	r3, r2
 8008648:	b25a      	sxtb	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3306      	adds	r3, #6
 800864e:	b2d2      	uxtb	r2, r2
 8008650:	701a      	strb	r2, [r3, #0]
    s[7] = (unsigned char) (h2 >> 5);
 8008652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008654:	115a      	asrs	r2, r3, #5
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	3307      	adds	r3, #7
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	701a      	strb	r2, [r3, #0]
    s[8] = (unsigned char) (h2 >> 13);
 800865e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008660:	135a      	asrs	r2, r3, #13
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3308      	adds	r3, #8
 8008666:	b2d2      	uxtb	r2, r2
 8008668:	701a      	strb	r2, [r3, #0]
    s[9] = (unsigned char) ((h2 >> 21) | (h3 << 5));
 800866a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800866c:	155b      	asrs	r3, r3, #21
 800866e:	b25a      	sxtb	r2, r3
 8008670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008672:	015b      	lsls	r3, r3, #5
 8008674:	b25b      	sxtb	r3, r3
 8008676:	4313      	orrs	r3, r2
 8008678:	b25a      	sxtb	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	3309      	adds	r3, #9
 800867e:	b2d2      	uxtb	r2, r2
 8008680:	701a      	strb	r2, [r3, #0]
    s[10] = (unsigned char) (h3 >> 3);
 8008682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008684:	10da      	asrs	r2, r3, #3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	330a      	adds	r3, #10
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	701a      	strb	r2, [r3, #0]
    s[11] = (unsigned char) (h3 >> 11);
 800868e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008690:	12da      	asrs	r2, r3, #11
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	330b      	adds	r3, #11
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	701a      	strb	r2, [r3, #0]
    s[12] = (unsigned char) ((h3 >> 19) | (h4 << 6));
 800869a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800869c:	14db      	asrs	r3, r3, #19
 800869e:	b25a      	sxtb	r2, r3
 80086a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a2:	019b      	lsls	r3, r3, #6
 80086a4:	b25b      	sxtb	r3, r3
 80086a6:	4313      	orrs	r3, r2
 80086a8:	b25a      	sxtb	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	330c      	adds	r3, #12
 80086ae:	b2d2      	uxtb	r2, r2
 80086b0:	701a      	strb	r2, [r3, #0]
    s[13] = (unsigned char) (h4 >> 2);
 80086b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b4:	109a      	asrs	r2, r3, #2
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	330d      	adds	r3, #13
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	701a      	strb	r2, [r3, #0]
    s[14] = (unsigned char) (h4 >> 10);
 80086be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c0:	129a      	asrs	r2, r3, #10
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	330e      	adds	r3, #14
 80086c6:	b2d2      	uxtb	r2, r2
 80086c8:	701a      	strb	r2, [r3, #0]
    s[15] = (unsigned char) (h4 >> 18);
 80086ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086cc:	149a      	asrs	r2, r3, #18
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	330f      	adds	r3, #15
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	701a      	strb	r2, [r3, #0]
    s[16] = (unsigned char) (h5 >> 0);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3310      	adds	r3, #16
 80086da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086dc:	b2d2      	uxtb	r2, r2
 80086de:	701a      	strb	r2, [r3, #0]
    s[17] = (unsigned char) (h5 >> 8);
 80086e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e2:	121a      	asrs	r2, r3, #8
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	3311      	adds	r3, #17
 80086e8:	b2d2      	uxtb	r2, r2
 80086ea:	701a      	strb	r2, [r3, #0]
    s[18] = (unsigned char) (h5 >> 16);
 80086ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ee:	141a      	asrs	r2, r3, #16
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3312      	adds	r3, #18
 80086f4:	b2d2      	uxtb	r2, r2
 80086f6:	701a      	strb	r2, [r3, #0]
    s[19] = (unsigned char) ((h5 >> 24) | (h6 << 1));
 80086f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086fa:	161b      	asrs	r3, r3, #24
 80086fc:	b25a      	sxtb	r2, r3
 80086fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	b25b      	sxtb	r3, r3
 8008704:	4313      	orrs	r3, r2
 8008706:	b25a      	sxtb	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3313      	adds	r3, #19
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	701a      	strb	r2, [r3, #0]
    s[20] = (unsigned char) (h6 >> 7);
 8008710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008712:	11da      	asrs	r2, r3, #7
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3314      	adds	r3, #20
 8008718:	b2d2      	uxtb	r2, r2
 800871a:	701a      	strb	r2, [r3, #0]
    s[21] = (unsigned char) (h6 >> 15);
 800871c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871e:	13da      	asrs	r2, r3, #15
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3315      	adds	r3, #21
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]
    s[22] = (unsigned char) ((h6 >> 23) | (h7 << 3));
 8008728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800872a:	15db      	asrs	r3, r3, #23
 800872c:	b25a      	sxtb	r2, r3
 800872e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	b25b      	sxtb	r3, r3
 8008734:	4313      	orrs	r3, r2
 8008736:	b25a      	sxtb	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3316      	adds	r3, #22
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]
    s[23] = (unsigned char) (h7 >> 5);
 8008740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008742:	115a      	asrs	r2, r3, #5
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3317      	adds	r3, #23
 8008748:	b2d2      	uxtb	r2, r2
 800874a:	701a      	strb	r2, [r3, #0]
    s[24] = (unsigned char) (h7 >> 13);
 800874c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800874e:	135a      	asrs	r2, r3, #13
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3318      	adds	r3, #24
 8008754:	b2d2      	uxtb	r2, r2
 8008756:	701a      	strb	r2, [r3, #0]
    s[25] = (unsigned char) ((h7 >> 21) | (h8 << 4));
 8008758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800875a:	155b      	asrs	r3, r3, #21
 800875c:	b25a      	sxtb	r2, r3
 800875e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	b25b      	sxtb	r3, r3
 8008764:	4313      	orrs	r3, r2
 8008766:	b25a      	sxtb	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3319      	adds	r3, #25
 800876c:	b2d2      	uxtb	r2, r2
 800876e:	701a      	strb	r2, [r3, #0]
    s[26] = (unsigned char) (h8 >> 4);
 8008770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008772:	111a      	asrs	r2, r3, #4
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	331a      	adds	r3, #26
 8008778:	b2d2      	uxtb	r2, r2
 800877a:	701a      	strb	r2, [r3, #0]
    s[27] = (unsigned char) (h8 >> 12);
 800877c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877e:	131a      	asrs	r2, r3, #12
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	331b      	adds	r3, #27
 8008784:	b2d2      	uxtb	r2, r2
 8008786:	701a      	strb	r2, [r3, #0]
    s[28] = (unsigned char) ((h8 >> 20) | (h9 << 6));
 8008788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800878a:	151b      	asrs	r3, r3, #20
 800878c:	b25a      	sxtb	r2, r3
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	019b      	lsls	r3, r3, #6
 8008792:	b25b      	sxtb	r3, r3
 8008794:	4313      	orrs	r3, r2
 8008796:	b25a      	sxtb	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	331c      	adds	r3, #28
 800879c:	b2d2      	uxtb	r2, r2
 800879e:	701a      	strb	r2, [r3, #0]
    s[29] = (unsigned char) (h9 >> 2);
 80087a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a2:	109a      	asrs	r2, r3, #2
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	331d      	adds	r3, #29
 80087a8:	b2d2      	uxtb	r2, r2
 80087aa:	701a      	strb	r2, [r3, #0]
    s[30] = (unsigned char) (h9 >> 10);
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	129a      	asrs	r2, r3, #10
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	331e      	adds	r3, #30
 80087b4:	b2d2      	uxtb	r2, r2
 80087b6:	701a      	strb	r2, [r3, #0]
    s[31] = (unsigned char) (h9 >> 18);
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	149a      	asrs	r2, r3, #18
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	331f      	adds	r3, #31
 80087c0:	b2d2      	uxtb	r2, r2
 80087c2:	701a      	strb	r2, [r3, #0]
}
 80087c4:	bf00      	nop
 80087c6:	3764      	adds	r7, #100	; 0x64
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <ge_add>:

/*
r = p + q
*/

void ge_add(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08e      	sub	sp, #56	; 0x38
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
    fe t0;
    fe_add(r->X, p->Y, p->X);
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	3328      	adds	r3, #40	; 0x28
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	4619      	mov	r1, r3
 80087e6:	f7f8 ff48 	bl	800167a <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	3328      	adds	r3, #40	; 0x28
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	4619      	mov	r1, r3
 80087f8:	f7ff fd80 	bl	80082fc <fe_sub>
    fe_mul(r->Z, r->X, q->YplusX);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3350      	adds	r3, #80	; 0x50
 8008800:	68f9      	ldr	r1, [r7, #12]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	4618      	mov	r0, r3
 8008806:	f7f9 fe17 	bl	8002438 <fe_mul>
    fe_mul(r->Y, r->Y, q->YminusX);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	3328      	adds	r3, #40	; 0x28
 800881a:	461a      	mov	r2, r3
 800881c:	f7f9 fe0c 	bl	8002438 <fe_mul>
    fe_mul(r->T, q->T2d, p->T);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	3378      	adds	r3, #120	; 0x78
 8008830:	461a      	mov	r2, r3
 8008832:	f7f9 fe01 	bl	8002438 <fe_mul>
    fe_mul(r->X, p->Z, q->Z);
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3350      	adds	r3, #80	; 0x50
 8008842:	461a      	mov	r2, r3
 8008844:	f7f9 fdf8 	bl	8002438 <fe_mul>
    fe_add(t0, r->X, r->X);
 8008848:	68f9      	ldr	r1, [r7, #12]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	f107 0310 	add.w	r3, r7, #16
 8008850:	4618      	mov	r0, r3
 8008852:	f7f8 ff12 	bl	800167a <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3328      	adds	r3, #40	; 0x28
 8008862:	461a      	mov	r2, r3
 8008864:	f7ff fd4a 	bl	80082fc <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3328      	adds	r3, #40	; 0x28
 8008878:	461a      	mov	r2, r3
 800887a:	f7f8 fefe 	bl	800167a <fe_add>
    fe_add(r->Z, t0, r->T);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800888a:	f107 0310 	add.w	r3, r7, #16
 800888e:	4619      	mov	r1, r3
 8008890:	f7f8 fef3 	bl	800167a <fe_add>
    fe_sub(r->T, t0, r->T);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80088a0:	f107 0310 	add.w	r3, r7, #16
 80088a4:	4619      	mov	r1, r3
 80088a6:	f7ff fd29 	bl	80082fc <fe_sub>
}
 80088aa:	bf00      	nop
 80088ac:	3738      	adds	r7, #56	; 0x38
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <slide>:


static void slide(signed char *r, const unsigned char *a) {
 80088b2:	b480      	push	{r7}
 80088b4:	b087      	sub	sp, #28
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	6039      	str	r1, [r7, #0]
    int i;
    int b;
    int k;

    for (i = 0; i < 256; ++i) {
 80088bc:	2300      	movs	r3, #0
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	e016      	b.n	80088f0 <slide+0x3e>
        r[i] = 1 & (a[i >> 3] >> (i & 7));
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	10db      	asrs	r3, r3, #3
 80088c6:	461a      	mov	r2, r3
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	4413      	add	r3, r2
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f003 0307 	and.w	r3, r3, #7
 80088d6:	fa42 f303 	asr.w	r3, r2, r3
 80088da:	b25a      	sxtb	r2, r3
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	440b      	add	r3, r1
 80088e2:	f002 0201 	and.w	r2, r2, #1
 80088e6:	b252      	sxtb	r2, r2
 80088e8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 256; ++i) {
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	3301      	adds	r3, #1
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2bff      	cmp	r3, #255	; 0xff
 80088f4:	dde5      	ble.n	80088c2 <slide+0x10>
    }

    for (i = 0; i < 256; ++i)
 80088f6:	2300      	movs	r3, #0
 80088f8:	617b      	str	r3, [r7, #20]
 80088fa:	e0ab      	b.n	8008a54 <slide+0x1a2>
        if (r[i]) {
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	4413      	add	r3, r2
 8008902:	f993 3000 	ldrsb.w	r3, [r3]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 80a1 	beq.w	8008a4e <slide+0x19c>
            for (b = 1; b <= 6 && i + b < 256; ++b) {
 800890c:	2301      	movs	r3, #1
 800890e:	613b      	str	r3, [r7, #16]
 8008910:	e092      	b.n	8008a38 <slide+0x186>
                if (r[i + b]) {
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	4413      	add	r3, r2
 8008918:	461a      	mov	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4413      	add	r3, r2
 800891e:	f993 3000 	ldrsb.w	r3, [r3]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 8085 	beq.w	8008a32 <slide+0x180>
                    if (r[i] + (r[i + b] << b) <= 15) {
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	4413      	add	r3, r2
 800892e:	f993 3000 	ldrsb.w	r3, [r3]
 8008932:	4619      	mov	r1, r3
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	4413      	add	r3, r2
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4413      	add	r3, r2
 8008940:	f993 3000 	ldrsb.w	r3, [r3]
 8008944:	461a      	mov	r2, r3
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	fa02 f303 	lsl.w	r3, r2, r3
 800894c:	440b      	add	r3, r1
 800894e:	2b0f      	cmp	r3, #15
 8008950:	dc22      	bgt.n	8008998 <slide+0xe6>
                        r[i] += r[i + b] << b;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	4413      	add	r3, r2
 8008958:	f993 3000 	ldrsb.w	r3, [r3]
 800895c:	b2da      	uxtb	r2, r3
 800895e:	6979      	ldr	r1, [r7, #20]
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	440b      	add	r3, r1
 8008964:	4619      	mov	r1, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	440b      	add	r3, r1
 800896a:	f993 3000 	ldrsb.w	r3, [r3]
 800896e:	4619      	mov	r1, r3
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	fa01 f303 	lsl.w	r3, r1, r3
 8008976:	b2db      	uxtb	r3, r3
 8008978:	4413      	add	r3, r2
 800897a:	b2d9      	uxtb	r1, r3
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	4413      	add	r3, r2
 8008982:	b24a      	sxtb	r2, r1
 8008984:	701a      	strb	r2, [r3, #0]
                        r[i + b] = 0;
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	4413      	add	r3, r2
 800898c:	461a      	mov	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	2200      	movs	r2, #0
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e04c      	b.n	8008a32 <slide+0x180>
                    } else if (r[i] - (r[i + b] << b) >= -15) {
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	4413      	add	r3, r2
 800899e:	f993 3000 	ldrsb.w	r3, [r3]
 80089a2:	4619      	mov	r1, r3
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	4413      	add	r3, r2
 80089aa:	461a      	mov	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4413      	add	r3, r2
 80089b0:	f993 3000 	ldrsb.w	r3, [r3]
 80089b4:	461a      	mov	r2, r3
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	1acb      	subs	r3, r1, r3
 80089be:	f113 0f0f 	cmn.w	r3, #15
 80089c2:	db43      	blt.n	8008a4c <slide+0x19a>
                        r[i] -= r[i + b] << b;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	4413      	add	r3, r2
 80089ca:	f993 3000 	ldrsb.w	r3, [r3]
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	6979      	ldr	r1, [r7, #20]
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	440b      	add	r3, r1
 80089d6:	4619      	mov	r1, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	440b      	add	r3, r1
 80089dc:	f993 3000 	ldrsb.w	r3, [r3]
 80089e0:	4619      	mov	r1, r3
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	fa01 f303 	lsl.w	r3, r1, r3
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	b2d9      	uxtb	r1, r3
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	4413      	add	r3, r2
 80089f4:	b24a      	sxtb	r2, r1
 80089f6:	701a      	strb	r2, [r3, #0]

                        for (k = i + b; k < 256; ++k) {
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	4413      	add	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	e014      	b.n	8008a2c <slide+0x17a>
                            if (!r[k]) {
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	4413      	add	r3, r2
 8008a08:	f993 3000 	ldrsb.w	r3, [r3]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d105      	bne.n	8008a1c <slide+0x16a>
                                r[k] = 1;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	4413      	add	r3, r2
 8008a16:	2201      	movs	r2, #1
 8008a18:	701a      	strb	r2, [r3, #0]
                                break;
 8008a1a:	e00a      	b.n	8008a32 <slide+0x180>
                            }

                            r[k] = 0;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	4413      	add	r3, r2
 8008a22:	2200      	movs	r2, #0
 8008a24:	701a      	strb	r2, [r3, #0]
                        for (k = i + b; k < 256; ++k) {
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2bff      	cmp	r3, #255	; 0xff
 8008a30:	dde7      	ble.n	8008a02 <slide+0x150>
            for (b = 1; b <= 6 && i + b < 256; ++b) {
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	3301      	adds	r3, #1
 8008a36:	613b      	str	r3, [r7, #16]
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	2b06      	cmp	r3, #6
 8008a3c:	dc07      	bgt.n	8008a4e <slide+0x19c>
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	4413      	add	r3, r2
 8008a44:	2bff      	cmp	r3, #255	; 0xff
 8008a46:	f77f af64 	ble.w	8008912 <slide+0x60>
 8008a4a:	e000      	b.n	8008a4e <slide+0x19c>
                        }
                    } else {
                        break;
 8008a4c:	bf00      	nop
    for (i = 0; i < 256; ++i)
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	3301      	adds	r3, #1
 8008a52:	617b      	str	r3, [r7, #20]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	2bff      	cmp	r3, #255	; 0xff
 8008a58:	f77f af50 	ble.w	80088fc <slide+0x4a>
                    }
                }
            }
        }
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
	...

08008a6c <ge_double_scalarmult_vartime>:
where a = a[0]+256*a[1]+...+256^31 a[31].
and b = b[0]+256*b[1]+...+256^31 b[31].
B is the Ed25519 base point (x,4/5) with x positive.
*/

void ge_double_scalarmult_vartime(ge_p2 *r, const unsigned char *a, const ge_p3 *A, const unsigned char *b) {
 8008a6c:	b590      	push	{r4, r7, lr}
 8008a6e:	f6ad 0dfc 	subw	sp, sp, #2300	; 0x8fc
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	f107 040c 	add.w	r4, r7, #12
 8008a78:	6020      	str	r0, [r4, #0]
 8008a7a:	f107 0008 	add.w	r0, r7, #8
 8008a7e:	6001      	str	r1, [r0, #0]
 8008a80:	1d39      	adds	r1, r7, #4
 8008a82:	600a      	str	r2, [r1, #0]
 8008a84:	463a      	mov	r2, r7
 8008a86:	6013      	str	r3, [r2, #0]
    ge_cached Ai[8]; /* A,3A,5A,7A,9A,11A,13A,15A */
    ge_p1p1 t;
    ge_p3 u;
    ge_p3 A2;
    int i;
    slide(aslide, a);
 8008a88:	f107 0308 	add.w	r3, r7, #8
 8008a8c:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8008a90:	6819      	ldr	r1, [r3, #0]
 8008a92:	4610      	mov	r0, r2
 8008a94:	f7ff ff0d 	bl	80088b2 <slide>
    slide(bslide, b);
 8008a98:	463b      	mov	r3, r7
 8008a9a:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8008a9e:	6819      	ldr	r1, [r3, #0]
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f7ff ff06 	bl	80088b2 <slide>
    ge_p3_to_cached(&Ai[0], A);
 8008aa6:	1d3b      	adds	r3, r7, #4
 8008aa8:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8008aac:	6819      	ldr	r1, [r3, #0]
 8008aae:	4610      	mov	r0, r2
 8008ab0:	f000 fc4c 	bl	800934c <ge_p3_to_cached>
    ge_p3_dbl(&t, A);
 8008ab4:	1d3b      	adds	r3, r7, #4
 8008ab6:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008aba:	6819      	ldr	r1, [r3, #0]
 8008abc:	4610      	mov	r0, r2
 8008abe:	f000 fc2f 	bl	8009320 <ge_p3_dbl>
    ge_p1p1_to_p3(&A2, &t);
 8008ac2:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008ac6:	f107 0314 	add.w	r3, r7, #20
 8008aca:	4611      	mov	r1, r2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 fb89 	bl	80091e4 <ge_p1p1_to_p3>
    ge_add(&t, &A2, &Ai[0]);
 8008ad2:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8008ad6:	f107 0114 	add.w	r1, r7, #20
 8008ada:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7ff fe76 	bl	80087d0 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8008ae4:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008ae8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008aec:	4611      	mov	r1, r2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fb78 	bl	80091e4 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[1], &u);
 8008af4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8008af8:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008afc:	33a0      	adds	r3, #160	; 0xa0
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 fc23 	bl	800934c <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[1]);
 8008b06:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008b0a:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8008b0e:	f107 0114 	add.w	r1, r7, #20
 8008b12:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7ff fe5a 	bl	80087d0 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8008b1c:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008b20:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008b24:	4611      	mov	r1, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fb5c 	bl	80091e4 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[2], &u);
 8008b2c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8008b30:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008b34:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fc06 	bl	800934c <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[2]);
 8008b40:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008b44:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8008b48:	f107 0114 	add.w	r1, r7, #20
 8008b4c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff fe3d 	bl	80087d0 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8008b56:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008b5a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 fb3f 	bl	80091e4 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[3], &u);
 8008b66:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8008b6a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008b6e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8008b72:	4611      	mov	r1, r2
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 fbe9 	bl	800934c <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[3]);
 8008b7a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008b7e:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8008b82:	f107 0114 	add.w	r1, r7, #20
 8008b86:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff fe20 	bl	80087d0 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8008b90:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008b94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fb22 	bl	80091e4 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[4], &u);
 8008ba0:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8008ba4:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008ba8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008bac:	4611      	mov	r1, r2
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fbcc 	bl	800934c <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[4]);
 8008bb4:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008bb8:	f503 7220 	add.w	r2, r3, #640	; 0x280
 8008bbc:	f107 0114 	add.w	r1, r7, #20
 8008bc0:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff fe03 	bl	80087d0 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8008bca:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008bce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fb05 	bl	80091e4 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[5], &u);
 8008bda:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8008bde:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008be2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fbaf 	bl	800934c <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[5]);
 8008bee:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008bf2:	f503 7248 	add.w	r2, r3, #800	; 0x320
 8008bf6:	f107 0114 	add.w	r1, r7, #20
 8008bfa:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fde6 	bl	80087d0 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8008c04:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008c08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fae8 	bl	80091e4 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[6], &u);
 8008c14:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8008c18:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008c1c:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8008c20:	4611      	mov	r1, r2
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fb92 	bl	800934c <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[6]);
 8008c28:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008c2c:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 8008c30:	f107 0114 	add.w	r1, r7, #20
 8008c34:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7ff fdc9 	bl	80087d0 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8008c3e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008c42:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008c46:	4611      	mov	r1, r2
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f000 facb 	bl	80091e4 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[7], &u);
 8008c4e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8008c52:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8008c56:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 fb75 	bl	800934c <ge_p3_to_cached>
    ge_p2_0(r);
 8008c62:	f107 030c 	add.w	r3, r7, #12
 8008c66:	6818      	ldr	r0, [r3, #0]
 8008c68:	f000 faeb 	bl	8009242 <ge_p2_0>

    for (i = 255; i >= 0; --i) {
 8008c6c:	23ff      	movs	r3, #255	; 0xff
 8008c6e:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8008c72:	e018      	b.n	8008ca6 <ge_double_scalarmult_vartime+0x23a>
        if (aslide[i] || bslide[i]) {
 8008c74:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8008c78:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f993 3000 	ldrsb.w	r3, [r3]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f040 80d5 	bne.w	8008e32 <ge_double_scalarmult_vartime+0x3c6>
 8008c88:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8008c8c:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008c90:	4413      	add	r3, r2
 8008c92:	f993 3000 	ldrsb.w	r3, [r3]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f040 80cb 	bne.w	8008e32 <ge_double_scalarmult_vartime+0x3c6>
    for (i = 255; i >= 0; --i) {
 8008c9c:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8008ca6:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	dae2      	bge.n	8008c74 <ge_double_scalarmult_vartime+0x208>
            break;
        }
    }

    for (; i >= 0; --i) {
 8008cae:	e0c0      	b.n	8008e32 <ge_double_scalarmult_vartime+0x3c6>
        ge_p2_dbl(&t, r);
 8008cb0:	f107 030c 	add.w	r3, r7, #12
 8008cb4:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008cb8:	6819      	ldr	r1, [r3, #0]
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f000 fad7 	bl	800926e <ge_p2_dbl>

        if (aslide[i] > 0) {
 8008cc0:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8008cc4:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008cc8:	4413      	add	r3, r2
 8008cca:	f993 3000 	ldrsb.w	r3, [r3]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dd22      	ble.n	8008d18 <ge_double_scalarmult_vartime+0x2ac>
            ge_p1p1_to_p3(&u, &t);
 8008cd2:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008cd6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008cda:	4611      	mov	r1, r2
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fa81 	bl	80091e4 <ge_p1p1_to_p3>
            ge_add(&t, &u, &Ai[aslide[i] / 2]);
 8008ce2:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8008ce6:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008cea:	4413      	add	r3, r2
 8008cec:	f993 3000 	ldrsb.w	r3, [r3]
 8008cf0:	0fda      	lsrs	r2, r3, #31
 8008cf2:	4413      	add	r3, r2
 8008cf4:	105b      	asrs	r3, r3, #1
 8008cf6:	b25b      	sxtb	r3, r3
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8008cfe:	460b      	mov	r3, r1
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	440b      	add	r3, r1
 8008d04:	015b      	lsls	r3, r3, #5
 8008d06:	441a      	add	r2, r3
 8008d08:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8008d0c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7ff fd5d 	bl	80087d0 <ge_add>
 8008d16:	e02a      	b.n	8008d6e <ge_double_scalarmult_vartime+0x302>
        } else if (aslide[i] < 0) {
 8008d18:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8008d1c:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008d20:	4413      	add	r3, r2
 8008d22:	f993 3000 	ldrsb.w	r3, [r3]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	da21      	bge.n	8008d6e <ge_double_scalarmult_vartime+0x302>
            ge_p1p1_to_p3(&u, &t);
 8008d2a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008d2e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008d32:	4611      	mov	r1, r2
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fa55 	bl	80091e4 <ge_p1p1_to_p3>
            ge_sub(&t, &u, &Ai[(-aslide[i]) / 2]);
 8008d3a:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8008d3e:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008d42:	4413      	add	r3, r2
 8008d44:	f993 3000 	ldrsb.w	r3, [r3]
 8008d48:	0fda      	lsrs	r2, r3, #31
 8008d4a:	4413      	add	r3, r2
 8008d4c:	105b      	asrs	r3, r3, #1
 8008d4e:	425b      	negs	r3, r3
 8008d50:	4619      	mov	r1, r3
 8008d52:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8008d56:	460b      	mov	r3, r1
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	015b      	lsls	r3, r3, #5
 8008d5e:	441a      	add	r2, r3
 8008d60:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8008d64:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 fb3e 	bl	80093ea <ge_sub>
        }

        if (bslide[i] > 0) {
 8008d6e:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8008d72:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008d76:	4413      	add	r3, r2
 8008d78:	f993 3000 	ldrsb.w	r3, [r3]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dd21      	ble.n	8008dc4 <ge_double_scalarmult_vartime+0x358>
            ge_p1p1_to_p3(&u, &t);
 8008d80:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008d84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008d88:	4611      	mov	r1, r2
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f000 fa2a 	bl	80091e4 <ge_p1p1_to_p3>
            ge_madd(&t, &u, &Bi[bslide[i] / 2]);
 8008d90:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8008d94:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008d98:	4413      	add	r3, r2
 8008d9a:	f993 3000 	ldrsb.w	r3, [r3]
 8008d9e:	0fda      	lsrs	r2, r3, #31
 8008da0:	4413      	add	r3, r2
 8008da2:	105b      	asrs	r3, r3, #1
 8008da4:	b25b      	sxtb	r3, r3
 8008da6:	461a      	mov	r2, r3
 8008da8:	4613      	mov	r3, r2
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	4a25      	ldr	r2, [pc, #148]	; (8008e48 <ge_double_scalarmult_vartime+0x3dc>)
 8008db2:	441a      	add	r2, r3
 8008db4:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8008db8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 f913 	bl	8008fe8 <ge_madd>
 8008dc2:	e029      	b.n	8008e18 <ge_double_scalarmult_vartime+0x3ac>
        } else if (bslide[i] < 0) {
 8008dc4:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8008dc8:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008dcc:	4413      	add	r3, r2
 8008dce:	f993 3000 	ldrsb.w	r3, [r3]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	da20      	bge.n	8008e18 <ge_double_scalarmult_vartime+0x3ac>
            ge_p1p1_to_p3(&u, &t);
 8008dd6:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008dda:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008dde:	4611      	mov	r1, r2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 f9ff 	bl	80091e4 <ge_p1p1_to_p3>
            ge_msub(&t, &u, &Bi[(-bslide[i]) / 2]);
 8008de6:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8008dea:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008dee:	4413      	add	r3, r2
 8008df0:	f993 3000 	ldrsb.w	r3, [r3]
 8008df4:	0fda      	lsrs	r2, r3, #31
 8008df6:	4413      	add	r3, r2
 8008df8:	105b      	asrs	r3, r3, #1
 8008dfa:	425b      	negs	r3, r3
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	4613      	mov	r3, r2
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	00db      	lsls	r3, r3, #3
 8008e06:	4a10      	ldr	r2, [pc, #64]	; (8008e48 <ge_double_scalarmult_vartime+0x3dc>)
 8008e08:	441a      	add	r2, r3
 8008e0a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8008e0e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f954 	bl	80090c0 <ge_msub>
        }

        ge_p1p1_to_p2(r, &t);
 8008e18:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008e1c:	f107 030c 	add.w	r3, r7, #12
 8008e20:	4611      	mov	r1, r2
 8008e22:	6818      	ldr	r0, [r3, #0]
 8008e24:	f000 f9b8 	bl	8009198 <ge_p1p1_to_p2>
    for (; i >= 0; --i) {
 8008e28:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8008e32:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f6bf af3a 	bge.w	8008cb0 <ge_double_scalarmult_vartime+0x244>
    }
}
 8008e3c:	bf00      	nop
 8008e3e:	bf00      	nop
 8008e40:	f607 07fc 	addw	r7, r7, #2300	; 0x8fc
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd90      	pop	{r4, r7, pc}
 8008e48:	0801a574 	.word	0x0801a574

08008e4c <ge_frombytes_negate_vartime>:

static const fe sqrtm1 = {
    -32595792, -7943725, 9377950, 3500415, 12389472, -272473, -25146209, -2005654, 326686, 11406482
};

int ge_frombytes_negate_vartime(ge_p3 *h, const unsigned char *s) {
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b0b4      	sub	sp, #208	; 0xd0
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
    fe u;
    fe v;
    fe v3;
    fe vxx;
    fe check;
    fe_frombytes(h->Y, s);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3328      	adds	r3, #40	; 0x28
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7f8 fcf7 	bl	8001850 <fe_frombytes>
    fe_1(h->Z);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	3350      	adds	r3, #80	; 0x50
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7f8 fbd6 	bl	8001618 <fe_1>
    fe_sq(u, h->Y);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8008e72:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008e76:	4611      	mov	r1, r2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fc f9ec 	bl	8005256 <fe_sq>
    fe_mul(v, u, d);
 8008e7e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8008e82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008e86:	4a56      	ldr	r2, [pc, #344]	; (8008fe0 <ge_frombytes_negate_vartime+0x194>)
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7f9 fad5 	bl	8002438 <fe_mul>
    fe_sub(u, u, h->Z);     /* u = y^2-1 */
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8008e94:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8008e98:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7ff fa2d 	bl	80082fc <fe_sub>
    fe_add(v, v, h->Z);     /* v = dy^2+1 */
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8008ea8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8008eac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7f8 fbe2 	bl	800167a <fe_add>
    fe_sq(v3, v);
 8008eb6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008eba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fc f9c8 	bl	8005256 <fe_sq>
    fe_mul(v3, v3, v);      /* v3 = v^3 */
 8008ec6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008eca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008ece:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7f9 fab0 	bl	8002438 <fe_mul>
    fe_sq(h->X, v3);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008ede:	4611      	mov	r1, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fc f9b8 	bl	8005256 <fe_sq>
    fe_mul(h->X, h->X, v);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f9 faa2 	bl	8002438 <fe_mul>
    fe_mul(h->X, h->X, u);  /* x = uv^7 */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7f9 fa9b 	bl	8002438 <fe_mul>
    fe_pow22523(h->X, h->X); /* x = (uv^7)^((q-5)/8) */
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	4611      	mov	r1, r2
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fb fffe 	bl	8004f0a <fe_pow22523>
    fe_mul(h->X, h->X, v3);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f9 fa8e 	bl	8002438 <fe_mul>
    fe_mul(h->X, h->X, u);  /* x = uv^3(uv^7)^((q-5)/8) */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008f24:	4618      	mov	r0, r3
 8008f26:	f7f9 fa87 	bl	8002438 <fe_mul>
    fe_sq(vxx, h->X);
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f30:	4611      	mov	r1, r2
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fc f98f 	bl	8005256 <fe_sq>
    fe_mul(vxx, vxx, v);
 8008f38:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008f3c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008f40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7f9 fa77 	bl	8002438 <fe_mul>
    fe_sub(check, vxx, u);  /* vx^2-u */
 8008f4a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008f4e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008f52:	f107 0308 	add.w	r3, r7, #8
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff f9d0 	bl	80082fc <fe_sub>

    if (fe_isnonzero(check)) {
 8008f5c:	f107 0308 	add.w	r3, r7, #8
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7f9 f98b 	bl	800227c <fe_isnonzero>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d019      	beq.n	8008fa0 <ge_frombytes_negate_vartime+0x154>
        fe_add(check, vxx, u); /* vx^2+u */
 8008f6c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008f70:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008f74:	f107 0308 	add.w	r3, r7, #8
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7f8 fb7e 	bl	800167a <fe_add>

        if (fe_isnonzero(check)) {
 8008f7e:	f107 0308 	add.w	r3, r7, #8
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7f9 f97a 	bl	800227c <fe_isnonzero>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <ge_frombytes_negate_vartime+0x148>
            return -1;
 8008f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f92:	e021      	b.n	8008fd8 <ge_frombytes_negate_vartime+0x18c>
        }

        fe_mul(h->X, h->X, sqrtm1);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	4a12      	ldr	r2, [pc, #72]	; (8008fe4 <ge_frombytes_negate_vartime+0x198>)
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7f9 fa4c 	bl	8002438 <fe_mul>
    }

    if (fe_isnegative(h->X) == (s[31] >> 7)) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7f9 f959 	bl	800225a <fe_isnegative>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	331f      	adds	r3, #31
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	09db      	lsrs	r3, r3, #7
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d105      	bne.n	8008fc4 <ge_frombytes_negate_vartime+0x178>
        fe_neg(h->X, h->X);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fb ff35 	bl	8004e2e <fe_neg>
    }

    fe_mul(h->T, h->X, h->Y);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3328      	adds	r3, #40	; 0x28
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	f7f9 fa31 	bl	8002438 <fe_mul>
    return 0;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	37d0      	adds	r7, #208	; 0xd0
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	0801a934 	.word	0x0801a934
 8008fe4:	0801a95c 	.word	0x0801a95c

08008fe8 <ge_madd>:

/*
r = p + q
*/

void ge_madd(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08e      	sub	sp, #56	; 0x38
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
    fe t0;
    fe_add(r->X, p->Y, p->X);
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	3328      	adds	r3, #40	; 0x28
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	f7f8 fb3c 	bl	800167a <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	3328      	adds	r3, #40	; 0x28
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	4619      	mov	r1, r3
 8009010:	f7ff f974 	bl	80082fc <fe_sub>
    fe_mul(r->Z, r->X, q->yplusx);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3350      	adds	r3, #80	; 0x50
 8009018:	68f9      	ldr	r1, [r7, #12]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	4618      	mov	r0, r3
 800901e:	f7f9 fa0b 	bl	8002438 <fe_mul>
    fe_mul(r->Y, r->Y, q->yminusx);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3328      	adds	r3, #40	; 0x28
 8009032:	461a      	mov	r2, r3
 8009034:	f7f9 fa00 	bl	8002438 <fe_mul>
    fe_mul(r->T, q->xy2d, p->T);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	3378      	adds	r3, #120	; 0x78
 8009048:	461a      	mov	r2, r3
 800904a:	f7f9 f9f5 	bl	8002438 <fe_mul>
    fe_add(t0, p->Z, p->Z);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800905a:	f107 0310 	add.w	r3, r7, #16
 800905e:	4618      	mov	r0, r3
 8009060:	f7f8 fb0b 	bl	800167a <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	3328      	adds	r3, #40	; 0x28
 8009070:	461a      	mov	r2, r3
 8009072:	f7ff f943 	bl	80082fc <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3328      	adds	r3, #40	; 0x28
 8009086:	461a      	mov	r2, r3
 8009088:	f7f8 faf7 	bl	800167a <fe_add>
    fe_add(r->Z, t0, r->T);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8009098:	f107 0310 	add.w	r3, r7, #16
 800909c:	4619      	mov	r1, r3
 800909e:	f7f8 faec 	bl	800167a <fe_add>
    fe_sub(r->T, t0, r->T);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80090ae:	f107 0310 	add.w	r3, r7, #16
 80090b2:	4619      	mov	r1, r3
 80090b4:	f7ff f922 	bl	80082fc <fe_sub>
}
 80090b8:	bf00      	nop
 80090ba:	3738      	adds	r7, #56	; 0x38
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <ge_msub>:

/*
r = p - q
*/

void ge_msub(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b08e      	sub	sp, #56	; 0x38
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
    fe t0;

    fe_add(r->X, p->Y, p->X);
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	3328      	adds	r3, #40	; 0x28
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	4619      	mov	r1, r3
 80090d6:	f7f8 fad0 	bl	800167a <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	3328      	adds	r3, #40	; 0x28
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	4619      	mov	r1, r3
 80090e8:	f7ff f908 	bl	80082fc <fe_sub>
    fe_mul(r->Z, r->X, q->yminusx);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	3328      	adds	r3, #40	; 0x28
 80090f8:	461a      	mov	r2, r3
 80090fa:	f7f9 f99d 	bl	8002438 <fe_mul>
    fe_mul(r->Y, r->Y, q->yplusx);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3328      	adds	r3, #40	; 0x28
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	4619      	mov	r1, r3
 800910c:	f7f9 f994 	bl	8002438 <fe_mul>
    fe_mul(r->T, q->xy2d, p->T);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	3378      	adds	r3, #120	; 0x78
 8009120:	461a      	mov	r2, r3
 8009122:	f7f9 f989 	bl	8002438 <fe_mul>
    fe_add(t0, p->Z, p->Z);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009132:	f107 0310 	add.w	r3, r7, #16
 8009136:	4618      	mov	r0, r3
 8009138:	f7f8 fa9f 	bl	800167a <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3328      	adds	r3, #40	; 0x28
 8009148:	461a      	mov	r2, r3
 800914a:	f7ff f8d7 	bl	80082fc <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3328      	adds	r3, #40	; 0x28
 800915e:	461a      	mov	r2, r3
 8009160:	f7f8 fa8b 	bl	800167a <fe_add>
    fe_sub(r->Z, t0, r->T);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8009170:	f107 0310 	add.w	r3, r7, #16
 8009174:	4619      	mov	r1, r3
 8009176:	f7ff f8c1 	bl	80082fc <fe_sub>
    fe_add(r->T, t0, r->T);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8009186:	f107 0310 	add.w	r3, r7, #16
 800918a:	4619      	mov	r1, r3
 800918c:	f7f8 fa75 	bl	800167a <fe_add>
}
 8009190:	bf00      	nop
 8009192:	3738      	adds	r7, #56	; 0x38
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <ge_p1p1_to_p2>:

/*
r = p
*/

void ge_p1p1_to_p2(ge_p2 *r, const ge_p1p1 *p) {
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
    fe_mul(r->X, p->X, p->T);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	3378      	adds	r3, #120	; 0x78
 80091aa:	461a      	mov	r2, r3
 80091ac:	f7f9 f944 	bl	8002438 <fe_mul>
    fe_mul(r->Y, p->Y, p->Z);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	3350      	adds	r3, #80	; 0x50
 80091c0:	461a      	mov	r2, r3
 80091c2:	f7f9 f939 	bl	8002438 <fe_mul>
    fe_mul(r->Z, p->Z, p->T);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	3378      	adds	r3, #120	; 0x78
 80091d6:	461a      	mov	r2, r3
 80091d8:	f7f9 f92e 	bl	8002438 <fe_mul>
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <ge_p1p1_to_p3>:

/*
r = p
*/

void ge_p1p1_to_p3(ge_p3 *r, const ge_p1p1 *p) {
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
    fe_mul(r->X, p->X, p->T);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	3378      	adds	r3, #120	; 0x78
 80091f6:	461a      	mov	r2, r3
 80091f8:	f7f9 f91e 	bl	8002438 <fe_mul>
    fe_mul(r->Y, p->Y, p->Z);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	3350      	adds	r3, #80	; 0x50
 800920c:	461a      	mov	r2, r3
 800920e:	f7f9 f913 	bl	8002438 <fe_mul>
    fe_mul(r->Z, p->Z, p->T);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	3378      	adds	r3, #120	; 0x78
 8009222:	461a      	mov	r2, r3
 8009224:	f7f9 f908 	bl	8002438 <fe_mul>
    fe_mul(r->T, p->X, p->Y);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	3328      	adds	r3, #40	; 0x28
 8009234:	461a      	mov	r2, r3
 8009236:	f7f9 f8ff 	bl	8002438 <fe_mul>
}
 800923a:	bf00      	nop
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <ge_p2_0>:


void ge_p2_0(ge_p2 *h) {
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
    fe_0(h->X);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4618      	mov	r0, r3
 800924e:	f7f8 f9b2 	bl	80015b6 <fe_0>
    fe_1(h->Y);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3328      	adds	r3, #40	; 0x28
 8009256:	4618      	mov	r0, r3
 8009258:	f7f8 f9de 	bl	8001618 <fe_1>
    fe_1(h->Z);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	3350      	adds	r3, #80	; 0x50
 8009260:	4618      	mov	r0, r3
 8009262:	f7f8 f9d9 	bl	8001618 <fe_1>
}
 8009266:	bf00      	nop
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <ge_p2_dbl>:

/*
r = 2 * p
*/

void ge_p2_dbl(ge_p1p1 *r, const ge_p2 *p) {
 800926e:	b580      	push	{r7, lr}
 8009270:	b08c      	sub	sp, #48	; 0x30
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	6039      	str	r1, [r7, #0]
    fe t0;

    fe_sq(r->X, p->X);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4611      	mov	r1, r2
 800927e:	4618      	mov	r0, r3
 8009280:	f7fb ffe9 	bl	8005256 <fe_sq>
    fe_sq(r->Z, p->Y);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	3328      	adds	r3, #40	; 0x28
 800928e:	4619      	mov	r1, r3
 8009290:	4610      	mov	r0, r2
 8009292:	f7fb ffe0 	bl	8005256 <fe_sq>
    fe_sq2(r->T, p->Z);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	3350      	adds	r3, #80	; 0x50
 80092a0:	4619      	mov	r1, r3
 80092a2:	4610      	mov	r0, r2
 80092a4:	f7fd fba6 	bl	80069f4 <fe_sq2>
    fe_add(r->Y, p->X, p->Y);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	3328      	adds	r3, #40	; 0x28
 80092b4:	461a      	mov	r2, r3
 80092b6:	f7f8 f9e0 	bl	800167a <fe_add>
    fe_sq(t0, r->Y);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80092c0:	f107 0308 	add.w	r3, r7, #8
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fb ffc5 	bl	8005256 <fe_sq>
    fe_add(r->Y, r->Z, r->X);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	3350      	adds	r3, #80	; 0x50
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	4619      	mov	r1, r3
 80092da:	f7f8 f9ce 	bl	800167a <fe_add>
    fe_sub(r->Z, r->Z, r->X);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3350      	adds	r3, #80	; 0x50
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	4619      	mov	r1, r3
 80092ec:	f7ff f806 	bl	80082fc <fe_sub>
    fe_sub(r->X, t0, r->Y);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80092f8:	f107 0308 	add.w	r3, r7, #8
 80092fc:	4619      	mov	r1, r3
 80092fe:	f7fe fffd 	bl	80082fc <fe_sub>
    fe_sub(r->T, r->T, r->Z);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3350      	adds	r3, #80	; 0x50
 8009312:	461a      	mov	r2, r3
 8009314:	f7fe fff2 	bl	80082fc <fe_sub>
}
 8009318:	bf00      	nop
 800931a:	3730      	adds	r7, #48	; 0x30
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <ge_p3_dbl>:

/*
r = 2 * p
*/

void ge_p3_dbl(ge_p1p1 *r, const ge_p3 *p) {
 8009320:	b580      	push	{r7, lr}
 8009322:	b0a0      	sub	sp, #128	; 0x80
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
    ge_p2 q;
    ge_p3_to_p2(&q, p);
 800932a:	f107 0308 	add.w	r3, r7, #8
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	4618      	mov	r0, r3
 8009332:	f000 f839 	bl	80093a8 <ge_p3_to_p2>
    ge_p2_dbl(r, &q);
 8009336:	f107 0308 	add.w	r3, r7, #8
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff ff96 	bl	800926e <ge_p2_dbl>
}
 8009342:	bf00      	nop
 8009344:	3780      	adds	r7, #128	; 0x80
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
	...

0800934c <ge_p3_to_cached>:

static const fe d2 = {
    -21827239, -5839606, -30745221, 13898782, 229458, 15978800, -12551817, -6495438, 29715968, 9444199
};

void ge_p3_to_cached(ge_cached *r, const ge_p3 *p) {
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
    fe_add(r->YplusX, p->Y, p->X);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	3328      	adds	r3, #40	; 0x28
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	4619      	mov	r1, r3
 8009360:	f7f8 f98b 	bl	800167a <fe_add>
    fe_sub(r->YminusX, p->Y, p->X);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	3328      	adds	r3, #40	; 0x28
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	4619      	mov	r1, r3
 8009372:	f7fe ffc3 	bl	80082fc <fe_sub>
    fe_copy(r->Z, p->Z);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	3350      	adds	r3, #80	; 0x50
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f7f8 fa14 	bl	80017b0 <fe_copy>
    fe_mul(r->T2d, p->T, d2);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	3378      	adds	r3, #120	; 0x78
 8009392:	4a04      	ldr	r2, [pc, #16]	; (80093a4 <ge_p3_to_cached+0x58>)
 8009394:	4619      	mov	r1, r3
 8009396:	f7f9 f84f 	bl	8002438 <fe_mul>
}
 800939a:	bf00      	nop
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	0801a984 	.word	0x0801a984

080093a8 <ge_p3_to_p2>:

/*
r = p
*/

void ge_p3_to_p2(ge_p2 *r, const ge_p3 *p) {
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
    fe_copy(r->X, p->X);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	4611      	mov	r1, r2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7f8 f9f9 	bl	80017b0 <fe_copy>
    fe_copy(r->Y, p->Y);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	3328      	adds	r3, #40	; 0x28
 80093c8:	4619      	mov	r1, r3
 80093ca:	4610      	mov	r0, r2
 80093cc:	f7f8 f9f0 	bl	80017b0 <fe_copy>
    fe_copy(r->Z, p->Z);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	3350      	adds	r3, #80	; 0x50
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f7f8 f9e7 	bl	80017b0 <fe_copy>
}
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <ge_sub>:

/*
r = p - q
*/

void ge_sub(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b08e      	sub	sp, #56	; 0x38
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	607a      	str	r2, [r7, #4]
    fe t0;
    
    fe_add(r->X, p->Y, p->X);
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	3328      	adds	r3, #40	; 0x28
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	4619      	mov	r1, r3
 8009400:	f7f8 f93b 	bl	800167a <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	3328      	adds	r3, #40	; 0x28
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	4619      	mov	r1, r3
 8009412:	f7fe ff73 	bl	80082fc <fe_sub>
    fe_mul(r->Z, r->X, q->YminusX);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800941c:	68f9      	ldr	r1, [r7, #12]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3328      	adds	r3, #40	; 0x28
 8009422:	461a      	mov	r2, r3
 8009424:	f7f9 f808 	bl	8002438 <fe_mul>
    fe_mul(r->Y, r->Y, q->YplusX);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3328      	adds	r3, #40	; 0x28
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	4619      	mov	r1, r3
 8009436:	f7f8 ffff 	bl	8002438 <fe_mul>
    fe_mul(r->T, q->T2d, p->T);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	3378      	adds	r3, #120	; 0x78
 800944a:	461a      	mov	r2, r3
 800944c:	f7f8 fff4 	bl	8002438 <fe_mul>
    fe_mul(r->X, p->Z, q->Z);
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3350      	adds	r3, #80	; 0x50
 800945c:	461a      	mov	r2, r3
 800945e:	f7f8 ffeb 	bl	8002438 <fe_mul>
    fe_add(t0, r->X, r->X);
 8009462:	68f9      	ldr	r1, [r7, #12]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	f107 0310 	add.w	r3, r7, #16
 800946a:	4618      	mov	r0, r3
 800946c:	f7f8 f905 	bl	800167a <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3328      	adds	r3, #40	; 0x28
 800947c:	461a      	mov	r2, r3
 800947e:	f7fe ff3d 	bl	80082fc <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3328      	adds	r3, #40	; 0x28
 8009492:	461a      	mov	r2, r3
 8009494:	f7f8 f8f1 	bl	800167a <fe_add>
    fe_sub(r->Z, t0, r->T);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80094a4:	f107 0310 	add.w	r3, r7, #16
 80094a8:	4619      	mov	r1, r3
 80094aa:	f7fe ff27 	bl	80082fc <fe_sub>
    fe_add(r->T, t0, r->T);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80094ba:	f107 0310 	add.w	r3, r7, #16
 80094be:	4619      	mov	r1, r3
 80094c0:	f7f8 f8db 	bl	800167a <fe_add>
}
 80094c4:	bf00      	nop
 80094c6:	3738      	adds	r7, #56	; 0x38
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <ge_tobytes>:


void ge_tobytes(unsigned char *s, const ge_p2 *h) {
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b0a0      	sub	sp, #128	; 0x80
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
    fe recip;
    fe x;
    fe y;
    fe_invert(recip, h->Z);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80094dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80094e0:	4611      	mov	r1, r2
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7f8 fd12 	bl	8001f0c <fe_invert>
    fe_mul(x, h->X, recip);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80094ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7f8 ffa0 	bl	8002438 <fe_mul>
    fe_mul(y, h->Y, recip);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80094fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009502:	f107 0308 	add.w	r3, r7, #8
 8009506:	4618      	mov	r0, r3
 8009508:	f7f8 ff96 	bl	8002438 <fe_mul>
    fe_tobytes(s, y);
 800950c:	f107 0308 	add.w	r3, r7, #8
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7fe ff8d 	bl	8008432 <fe_tobytes>
    s[31] ^= fe_isnegative(x) << 7;
 8009518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800951c:	4618      	mov	r0, r3
 800951e:	f7f8 fe9c 	bl	800225a <fe_isnegative>
 8009522:	4603      	mov	r3, r0
 8009524:	01d9      	lsls	r1, r3, #7
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	331f      	adds	r3, #31
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	b25a      	sxtb	r2, r3
 800952e:	b24b      	sxtb	r3, r1
 8009530:	4053      	eors	r3, r2
 8009532:	b25a      	sxtb	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	331f      	adds	r3, #31
 8009538:	b2d2      	uxtb	r2, r2
 800953a:	701a      	strb	r2, [r3, #0]
}
 800953c:	bf00      	nop
 800953e:	3780      	adds	r7, #128	; 0x80
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <goto_application>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void goto_application(uint32_t slotadd)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
//  printf("Gonna Jump to Application\r\n");

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (slotadd + 4U)));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3304      	adds	r3, #4
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60fb      	str	r3, [r7, #12]

//  __set_MSP(*(volatile uint32_t*) 0x08020000);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
  app_reset_handler();    //call the app reset handler
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4798      	blx	r3
}
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <sd_init>:


HAL_StatusTypeDef sd_init(){
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
	if(BSP_SD_Init() == MSD_OK ) return HAL_OK;
 8009564:	f00b fcbc 	bl	8014ee0 <BSP_SD_Init>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <sd_init+0x12>
 800956e:	2300      	movs	r3, #0
 8009570:	e000      	b.n	8009574 <sd_init+0x14>
	else return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
}
 8009574:	4618      	mov	r0, r3
 8009576:	bd80      	pop	{r7, pc}

08009578 <sd_mount>:

FRESULT sd_mount(FATFS *fatfs){
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
	return f_mount(fatfs, "", 1);
 8009580:	2201      	movs	r2, #1
 8009582:	4904      	ldr	r1, [pc, #16]	; (8009594 <sd_mount+0x1c>)
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f00d fb4d 	bl	8016c24 <f_mount>
 800958a:	4603      	mov	r3, r0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	0801a258 	.word	0x0801a258

08009598 <sd_open>:

FRESULT sd_open(FIL *myfile, const char *file_name, uint8_t mode){
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	71fb      	strb	r3, [r7, #7]
	return f_open(myfile, file_name, mode);
 80095a6:	79fb      	ldrb	r3, [r7, #7]
 80095a8:	461a      	mov	r2, r3
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f00d fb7f 	bl	8016cb0 <f_open>
 80095b2:	4603      	mov	r3, r0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <sd_read>:
		UINT bw;
		f_write (myfile, write_buf, size, &bw);
		return bw;
}

uint32_t sd_read(FIL *myfile, uint8_t *read_buf, uint32_t size){
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
	uint32_t br = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	617b      	str	r3, [r7, #20]
	f_read(myfile, read_buf, size,(UINT*) &br);
 80095cc:	f107 0314 	add.w	r3, r7, #20
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	68b9      	ldr	r1, [r7, #8]
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f00d fd29 	bl	801702c <f_read>
	return br;
 80095da:	697b      	ldr	r3, [r7, #20]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3718      	adds	r7, #24
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <sd_close>:

void sd_close(FIL *myfile){
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
	f_close(myfile);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f00d feda 	bl	80173a6 <f_close>
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <store_into_flash>:

void store_into_flash(uint8_t* buffer, uint32_t address, uint16_t size){
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b086      	sub	sp, #24
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	4613      	mov	r3, r2
 8009606:	80fb      	strh	r3, [r7, #6]
	for(uint16_t s = 0; s < size; s++){
 8009608:	2300      	movs	r3, #0
 800960a:	82fb      	strh	r3, [r7, #22]
 800960c:	e011      	b.n	8009632 <store_into_flash+0x38>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, *(buffer));
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	b2da      	uxtb	r2, r3
 8009614:	f04f 0300 	mov.w	r3, #0
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	2000      	movs	r0, #0
 800961c:	f008 f842 	bl	80116a4 <HAL_FLASH_Program>
		address++;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	3301      	adds	r3, #1
 8009624:	60bb      	str	r3, [r7, #8]
		buffer++;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3301      	adds	r3, #1
 800962a:	60fb      	str	r3, [r7, #12]
	for(uint16_t s = 0; s < size; s++){
 800962c:	8afb      	ldrh	r3, [r7, #22]
 800962e:	3301      	adds	r3, #1
 8009630:	82fb      	strh	r3, [r7, #22]
 8009632:	8afa      	ldrh	r2, [r7, #22]
 8009634:	88fb      	ldrh	r3, [r7, #6]
 8009636:	429a      	cmp	r2, r3
 8009638:	d3e9      	bcc.n	800960e <store_into_flash+0x14>
	}
}
 800963a:	bf00      	nop
 800963c:	bf00      	nop
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <init_flash>:

defReturnType init_flash(uint8_t slot){
 8009644:	b580      	push	{r7, lr}
 8009646:	b08a      	sub	sp, #40	; 0x28
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	71fb      	strb	r3, [r7, #7]
	defReturnType ret;

	ret = HAL_FLASH_Unlock();
 800964e:	f008 f87d 	bl	801174c <HAL_FLASH_Unlock>
 8009652:	4603      	mov	r3, r0
 8009654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(ret != (uint8_t)HAL_OK){
 8009658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <init_flash+0x20>
		return HANDLE_FAILED;
 8009660:	2301      	movs	r3, #1
 8009662:	e028      	b.n	80096b6 <init_flash+0x72>
	}

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8009664:	2300      	movs	r3, #0
 8009666:	613b      	str	r3, [r7, #16]

	if(slot == 0x00){
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d102      	bne.n	8009674 <init_flash+0x30>
		EraseInitStruct.Sector        = FLASH_SECTOR_5;
 800966e:	2305      	movs	r3, #5
 8009670:	61bb      	str	r3, [r7, #24]
 8009672:	e00a      	b.n	800968a <init_flash+0x46>
	}
	else if(slot == 0x01){
 8009674:	79fb      	ldrb	r3, [r7, #7]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d102      	bne.n	8009680 <init_flash+0x3c>
		EraseInitStruct.Sector        = FLASH_SECTOR_7;
 800967a:	2307      	movs	r3, #7
 800967c:	61bb      	str	r3, [r7, #24]
 800967e:	e004      	b.n	800968a <init_flash+0x46>
	}
	else if(slot == 0x02){
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	2b02      	cmp	r3, #2
 8009684:	d101      	bne.n	800968a <init_flash+0x46>
		EraseInitStruct.Sector        = FLASH_SECTOR_9;
 8009686:	2309      	movs	r3, #9
 8009688:	61bb      	str	r3, [r7, #24]
	}
	EraseInitStruct.NbSectors     = 2;           //erase 2 sectors
 800968a:	2302      	movs	r3, #2
 800968c:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800968e:	2302      	movs	r3, #2
 8009690:	623b      	str	r3, [r7, #32]

	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8009692:	f107 020c 	add.w	r2, r7, #12
 8009696:	f107 0310 	add.w	r3, r7, #16
 800969a:	4611      	mov	r1, r2
 800969c:	4618      	mov	r0, r3
 800969e:	f008 f9b7 	bl	8011a10 <HAL_FLASHEx_Erase>
 80096a2:	4603      	mov	r3, r0
 80096a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if( ret != (uint8_t)HAL_OK )
 80096a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <init_flash+0x70>
	{
		return HANDLE_FAILED;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e000      	b.n	80096b6 <init_flash+0x72>
	}

	return HANDLE_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3728      	adds	r7, #40	; 0x28
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <read_file_and_store_into_flash>:
uint32_t read_file_and_store_into_flash(FATFS *fatfs, FIL *myfile, const char *file_name, uint8_t mode, defFlashSlot slot, uint8_t *signature, uint8_t *publickey, uint8_t *hashvalue){
 80096c0:	b590      	push	{r4, r7, lr}
 80096c2:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
 80096c6:	af02      	add	r7, sp, #8
 80096c8:	f107 040c 	add.w	r4, r7, #12
 80096cc:	6020      	str	r0, [r4, #0]
 80096ce:	f107 0008 	add.w	r0, r7, #8
 80096d2:	6001      	str	r1, [r0, #0]
 80096d4:	1d39      	adds	r1, r7, #4
 80096d6:	600a      	str	r2, [r1, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	1cfb      	adds	r3, r7, #3
 80096dc:	701a      	strb	r2, [r3, #0]

	uint32_t BaseAddress;
	if(sd_init() == HAL_ERROR) return HAL_ERROR;
 80096de:	f7ff ff3f 	bl	8009560 <sd_init>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <read_file_and_store_into_flash+0x2c>
 80096e8:	2301      	movs	r3, #1
 80096ea:	e116      	b.n	800991a <read_file_and_store_into_flash+0x25a>
//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
	if(sd_mount(fatfs) != FR_OK) return HAL_ERROR;
 80096ec:	f107 030c 	add.w	r3, r7, #12
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	f7ff ff41 	bl	8009578 <sd_mount>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <read_file_and_store_into_flash+0x40>
 80096fc:	2301      	movs	r3, #1
 80096fe:	e10c      	b.n	800991a <read_file_and_store_into_flash+0x25a>
//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
	if(sd_open(myfile, file_name, mode) != FR_OK) return HAL_ERROR;
 8009700:	1cfb      	adds	r3, r7, #3
 8009702:	781a      	ldrb	r2, [r3, #0]
 8009704:	1d39      	adds	r1, r7, #4
 8009706:	f107 0308 	add.w	r3, r7, #8
 800970a:	6809      	ldr	r1, [r1, #0]
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	f7ff ff43 	bl	8009598 <sd_open>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <read_file_and_store_into_flash+0x5c>
 8009718:	2301      	movs	r3, #1
 800971a:	e0fe      	b.n	800991a <read_file_and_store_into_flash+0x25a>
//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
	uint32_t size_file = f_size(myfile) - 160;
 800971c:	f107 0308 	add.w	r3, r7, #8
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	3ba0      	subs	r3, #160	; 0xa0
 8009726:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814

	if(init_flash(slot) != HANDLE_OK) return HAL_ERROR;
 800972a:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff ff88 	bl	8009644 <init_flash>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <read_file_and_store_into_flash+0x7e>
 800973a:	2301      	movs	r3, #1
 800973c:	e0ed      	b.n	800991a <read_file_and_store_into_flash+0x25a>
//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);

	if(slot == FLASH_SLOT_0) BaseAddress = FLASH_SLOT_0_ADD;
 800973e:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8009742:	2b00      	cmp	r3, #0
 8009744:	d103      	bne.n	800974e <read_file_and_store_into_flash+0x8e>
 8009746:	4b77      	ldr	r3, [pc, #476]	; (8009924 <read_file_and_store_into_flash+0x264>)
 8009748:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 800974c:	e00e      	b.n	800976c <read_file_and_store_into_flash+0xac>
	else if(slot == FLASH_SLOT_1) BaseAddress = FLASH_SLOT_1_ADD;
 800974e:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8009752:	2b01      	cmp	r3, #1
 8009754:	d103      	bne.n	800975e <read_file_and_store_into_flash+0x9e>
 8009756:	4b74      	ldr	r3, [pc, #464]	; (8009928 <read_file_and_store_into_flash+0x268>)
 8009758:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 800975c:	e006      	b.n	800976c <read_file_and_store_into_flash+0xac>
	else if(slot == FLASH_SLOT_2) BaseAddress = FLASH_SLOT_2_ADD;
 800975e:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8009762:	2b02      	cmp	r3, #2
 8009764:	d102      	bne.n	800976c <read_file_and_store_into_flash+0xac>
 8009766:	4b71      	ldr	r3, [pc, #452]	; (800992c <read_file_and_store_into_flash+0x26c>)
 8009768:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	else{}

//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
	uint16_t round = size_file/1024; round += (size_file%1024 != 0)?1:0;
 800976c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8009770:	0a9b      	lsrs	r3, r3, #10
 8009772:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812
 8009776:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800977a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800977e:	2b00      	cmp	r3, #0
 8009780:	bf14      	ite	ne
 8009782:	2301      	movne	r3, #1
 8009784:	2300      	moveq	r3, #0
 8009786:	b2db      	uxtb	r3, r3
 8009788:	b29a      	uxth	r2, r3
 800978a:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 800978e:	4413      	add	r3, r2
 8009790:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812

	uint8_t buffer_cipher[1024] = {0,};
 8009794:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	3304      	adds	r3, #4
 800979e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80097a2:	2100      	movs	r1, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f00e f8dd 	bl	8017964 <memset>
	uint8_t buffer_plaintext[1024] = {0,};
 80097aa:	f107 0310 	add.w	r3, r7, #16
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	3304      	adds	r3, #4
 80097b4:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80097b8:	2100      	movs	r1, #0
 80097ba:	4618      	mov	r0, r3
 80097bc:	f00e f8d2 	bl	8017964 <memset>

	if(sd_read(myfile, signature, 64) != 64) return HAL_ERROR;
 80097c0:	f107 0308 	add.w	r3, r7, #8
 80097c4:	2240      	movs	r2, #64	; 0x40
 80097c6:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 80097ca:	6818      	ldr	r0, [r3, #0]
 80097cc:	f7ff fef6 	bl	80095bc <sd_read>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b40      	cmp	r3, #64	; 0x40
 80097d4:	d001      	beq.n	80097da <read_file_and_store_into_flash+0x11a>
 80097d6:	2301      	movs	r3, #1
 80097d8:	e09f      	b.n	800991a <read_file_and_store_into_flash+0x25a>
	if(sd_read(myfile, publickey, 32) != 32) return HAL_ERROR;
 80097da:	f107 0308 	add.w	r3, r7, #8
 80097de:	2220      	movs	r2, #32
 80097e0:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	f7ff fee9 	bl	80095bc <sd_read>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b20      	cmp	r3, #32
 80097ee:	d001      	beq.n	80097f4 <read_file_and_store_into_flash+0x134>
 80097f0:	2301      	movs	r3, #1
 80097f2:	e092      	b.n	800991a <read_file_and_store_into_flash+0x25a>
	if(sd_read(myfile, hashvalue, 64) != 64) return HAL_ERROR;
 80097f4:	f107 0308 	add.w	r3, r7, #8
 80097f8:	2240      	movs	r2, #64	; 0x40
 80097fa:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	f7ff fedc 	bl	80095bc <sd_read>
 8009804:	4603      	mov	r3, r0
 8009806:	2b40      	cmp	r3, #64	; 0x40
 8009808:	d001      	beq.n	800980e <read_file_and_store_into_flash+0x14e>
 800980a:	2301      	movs	r3, #1
 800980c:	e085      	b.n	800991a <read_file_and_store_into_flash+0x25a>

	for(uint16_t r = 0; r < round - 1; r++){
 800980e:	2300      	movs	r3, #0
 8009810:	f8a7 381a 	strh.w	r3, [r7, #2074]	; 0x81a
 8009814:	e03c      	b.n	8009890 <read_file_and_store_into_flash+0x1d0>
		if(sd_read(myfile, buffer_cipher, 1024) != 1024) return HAL_ERROR;
 8009816:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800981a:	f107 0308 	add.w	r3, r7, #8
 800981e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	f7ff feca 	bl	80095bc <sd_read>
 8009828:	4603      	mov	r3, r0
 800982a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800982e:	d001      	beq.n	8009834 <read_file_and_store_into_flash+0x174>
 8009830:	2301      	movs	r3, #1
 8009832:	e072      	b.n	800991a <read_file_and_store_into_flash+0x25a>
		Chacha20_Xor(Gb_scKeyStream, Gb_sulCell, buffer_cipher, 1024, buffer_plaintext);
 8009834:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8009838:	f107 0310 	add.w	r3, r7, #16
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009842:	493b      	ldr	r1, [pc, #236]	; (8009930 <read_file_and_store_into_flash+0x270>)
 8009844:	483b      	ldr	r0, [pc, #236]	; (8009934 <read_file_and_store_into_flash+0x274>)
 8009846:	f7f7 fb2b 	bl	8000ea0 <Chacha20_Xor>
		store_into_flash(buffer_plaintext, BaseAddress + r*1024, 1024);
 800984a:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	; 0x81a
 800984e:	029b      	lsls	r3, r3, #10
 8009850:	461a      	mov	r2, r3
 8009852:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8009856:	18d1      	adds	r1, r2, r3
 8009858:	f107 0310 	add.w	r3, r7, #16
 800985c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff feca 	bl	80095fa <store_into_flash>
		memset(buffer_cipher,0,1024);
 8009866:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800986a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800986e:	2100      	movs	r1, #0
 8009870:	4618      	mov	r0, r3
 8009872:	f00e f877 	bl	8017964 <memset>
		memset(buffer_plaintext,0,1024);
 8009876:	f107 0310 	add.w	r3, r7, #16
 800987a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800987e:	2100      	movs	r1, #0
 8009880:	4618      	mov	r0, r3
 8009882:	f00e f86f 	bl	8017964 <memset>
	for(uint16_t r = 0; r < round - 1; r++){
 8009886:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	; 0x81a
 800988a:	3301      	adds	r3, #1
 800988c:	f8a7 381a 	strh.w	r3, [r7, #2074]	; 0x81a
 8009890:	f8b7 281a 	ldrh.w	r2, [r7, #2074]	; 0x81a
 8009894:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8009898:	3b01      	subs	r3, #1
 800989a:	429a      	cmp	r2, r3
 800989c:	dbbb      	blt.n	8009816 <read_file_and_store_into_flash+0x156>
	}

//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);

	if(sd_read(myfile, buffer_cipher, size_file%1024) != size_file%1024) return HAL_ERROR;
 800989e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80098a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80098a6:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80098aa:	f107 0308 	add.w	r3, r7, #8
 80098ae:	6818      	ldr	r0, [r3, #0]
 80098b0:	f7ff fe84 	bl	80095bc <sd_read>
 80098b4:	4602      	mov	r2, r0
 80098b6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80098ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098be:	429a      	cmp	r2, r3
 80098c0:	d001      	beq.n	80098c6 <read_file_and_store_into_flash+0x206>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e029      	b.n	800991a <read_file_and_store_into_flash+0x25a>
	Chacha20_Xor(Gb_scKeyStream, Gb_sulCell, buffer_cipher, size_file%1024, buffer_plaintext);
 80098c6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80098ca:	f3c3 0109 	ubfx	r1, r3, #0, #10
 80098ce:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80098d2:	f107 0310 	add.w	r3, r7, #16
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	460b      	mov	r3, r1
 80098da:	4915      	ldr	r1, [pc, #84]	; (8009930 <read_file_and_store_into_flash+0x270>)
 80098dc:	4815      	ldr	r0, [pc, #84]	; (8009934 <read_file_and_store_into_flash+0x274>)
 80098de:	f7f7 fadf 	bl	8000ea0 <Chacha20_Xor>
	store_into_flash(buffer_plaintext, BaseAddress + (round - 1)*1024, size_file%1024);
 80098e2:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 80098e6:	3b01      	subs	r3, #1
 80098e8:	029b      	lsls	r3, r3, #10
 80098ea:	461a      	mov	r2, r3
 80098ec:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80098f0:	18d1      	adds	r1, r2, r3
 80098f2:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	f107 0310 	add.w	r3, r7, #16
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff fe79 	bl	80095fa <store_into_flash>
//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);

	sd_close(myfile);
 8009908:	f107 0308 	add.w	r3, r7, #8
 800990c:	6818      	ldr	r0, [r3, #0]
 800990e:	f7ff fe69 	bl	80095e4 <sd_close>
	HAL_FLASH_Lock();
 8009912:	f007 ff3d 	bl	8011790 <HAL_FLASH_Lock>

	return size_file;
 8009916:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
}
 800991a:	4618      	mov	r0, r3
 800991c:	f607 0724 	addw	r7, r7, #2084	; 0x824
 8009920:	46bd      	mov	sp, r7
 8009922:	bd90      	pop	{r4, r7, pc}
 8009924:	08020000 	.word	0x08020000
 8009928:	08060000 	.word	0x08060000
 800992c:	080a0000 	.word	0x080a0000
 8009930:	20000218 	.word	0x20000218
 8009934:	20000258 	.word	0x20000258

08009938 <read_chunk_data_in_flash>:

void read_chunk_data_in_flash(uint8_t *buf, uint32_t address, uint16_t size){
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	4613      	mov	r3, r2
 8009944:	80fb      	strh	r3, [r7, #6]
	for(uint32_t index = 0; index< size ; index++){
 8009946:	2300      	movs	r3, #0
 8009948:	617b      	str	r3, [r7, #20]
 800994a:	e00c      	b.n	8009966 <read_chunk_data_in_flash+0x2e>
		*buf = *(__IO uint8_t *)(address + index);
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	4413      	add	r3, r2
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	b2da      	uxtb	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	701a      	strb	r2, [r3, #0]
		buf++;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3301      	adds	r3, #1
 800995e:	60fb      	str	r3, [r7, #12]
	for(uint32_t index = 0; index< size ; index++){
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	3301      	adds	r3, #1
 8009964:	617b      	str	r3, [r7, #20]
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	429a      	cmp	r2, r3
 800996c:	d3ee      	bcc.n	800994c <read_chunk_data_in_flash+0x14>
	}
}
 800996e:	bf00      	nop
 8009970:	bf00      	nop
 8009972:	371c      	adds	r7, #28
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <tree_hash_on_flash>:

HAL_StatusTypeDef tree_hash_on_flash(defFlashSlot slot, uint8_t* md, uint32_t size){
 800997c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800997e:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
 8009982:	af00      	add	r7, sp, #0
 8009984:	f107 0308 	add.w	r3, r7, #8
 8009988:	6019      	str	r1, [r3, #0]
 800998a:	1d3b      	adds	r3, r7, #4
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	f107 030f 	add.w	r3, r7, #15
 8009992:	4602      	mov	r2, r0
 8009994:	701a      	strb	r2, [r3, #0]
 8009996:	466b      	mov	r3, sp
 8009998:	461d      	mov	r5, r3
	uint16 round = size/1024; round += (size%64 != 0)?1:0;
 800999a:	1d3b      	adds	r3, r7, #4
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	0a9b      	lsrs	r3, r3, #10
 80099a0:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 80099a4:	1d3b      	adds	r3, r7, #4
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <tree_hash_on_flash+0x38>
 80099b0:	2301      	movs	r3, #1
 80099b2:	e000      	b.n	80099b6 <tree_hash_on_flash+0x3a>
 80099b4:	2300      	movs	r3, #0
 80099b6:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 80099ba:	4413      	add	r3, r2
 80099bc:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	uint8_t buff_hash[round][64];
 80099c0:	f8d7 4824 	ldr.w	r4, [r7, #2084]	; 0x824
 80099c4:	4623      	mov	r3, r4
 80099c6:	3b01      	subs	r3, #1
 80099c8:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 80099cc:	4620      	mov	r0, r4
 80099ce:	f04f 0100 	mov.w	r1, #0
 80099d2:	f04f 0200 	mov.w	r2, #0
 80099d6:	f04f 0300 	mov.w	r3, #0
 80099da:	024b      	lsls	r3, r1, #9
 80099dc:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80099e0:	0242      	lsls	r2, r0, #9
 80099e2:	4620      	mov	r0, r4
 80099e4:	f04f 0100 	mov.w	r1, #0
 80099e8:	f04f 0200 	mov.w	r2, #0
 80099ec:	f04f 0300 	mov.w	r3, #0
 80099f0:	024b      	lsls	r3, r1, #9
 80099f2:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80099f6:	0242      	lsls	r2, r0, #9
 80099f8:	01a3      	lsls	r3, r4, #6
 80099fa:	3307      	adds	r3, #7
 80099fc:	08db      	lsrs	r3, r3, #3
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	ebad 0d03 	sub.w	sp, sp, r3
 8009a04:	466b      	mov	r3, sp
 8009a06:	3300      	adds	r3, #0
 8009a08:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	uint32_t BaseAddress;

	if(slot == FLASH_SLOT_0) BaseAddress = FLASH_SLOT_0_ADD;
 8009a0c:	f107 030f 	add.w	r3, r7, #15
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d103      	bne.n	8009a1e <tree_hash_on_flash+0xa2>
 8009a16:	4b70      	ldr	r3, [pc, #448]	; (8009bd8 <tree_hash_on_flash+0x25c>)
 8009a18:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8009a1c:	e010      	b.n	8009a40 <tree_hash_on_flash+0xc4>
	else if(slot == FLASH_SLOT_1) BaseAddress = FLASH_SLOT_1_ADD;
 8009a1e:	f107 030f 	add.w	r3, r7, #15
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d103      	bne.n	8009a30 <tree_hash_on_flash+0xb4>
 8009a28:	4b6c      	ldr	r3, [pc, #432]	; (8009bdc <tree_hash_on_flash+0x260>)
 8009a2a:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8009a2e:	e007      	b.n	8009a40 <tree_hash_on_flash+0xc4>
	else if(slot == FLASH_SLOT_2) BaseAddress = FLASH_SLOT_2_ADD;
 8009a30:	f107 030f 	add.w	r3, r7, #15
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d102      	bne.n	8009a40 <tree_hash_on_flash+0xc4>
 8009a3a:	4b69      	ldr	r3, [pc, #420]	; (8009be0 <tree_hash_on_flash+0x264>)
 8009a3c:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
	else{}


	for(uint16 i = 0;i<round - 1;i++){
 8009a40:	2300      	movs	r3, #0
 8009a42:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8009a46:	e029      	b.n	8009a9c <tree_hash_on_flash+0x120>
		uint8 buff_file[1024] = {0,};
 8009a48:	f107 0314 	add.w	r3, r7, #20
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	3304      	adds	r3, #4
 8009a52:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8009a56:	2100      	movs	r1, #0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f00d ff83 	bl	8017964 <memset>
		read_chunk_data_in_flash(buff_file, BaseAddress + i*1024, 1024);
 8009a5e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8009a62:	029a      	lsls	r2, r3, #10
 8009a64:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8009a68:	18d1      	adds	r1, r2, r3
 8009a6a:	f107 0314 	add.w	r3, r7, #20
 8009a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff ff60 	bl	8009938 <read_chunk_data_in_flash>
		sha3(buff_file,1024, &buff_hash[i], 64);
 8009a78:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8009a7c:	019b      	lsls	r3, r3, #6
 8009a7e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 8009a82:	441a      	add	r2, r3
 8009a84:	f107 0014 	add.w	r0, r7, #20
 8009a88:	2340      	movs	r3, #64	; 0x40
 8009a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a8e:	f004 fed4 	bl	800e83a <sha3>
	for(uint16 i = 0;i<round - 1;i++){
 8009a92:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8009a96:	3301      	adds	r3, #1
 8009a98:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8009a9c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d3ce      	bcc.n	8009a48 <tree_hash_on_flash+0xcc>
	}

	uint8_t buff_file[1024] = {0,};
 8009aaa:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8009aae:	2200      	movs	r2, #0
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8009ab8:	2100      	movs	r1, #0
 8009aba:	4618      	mov	r0, r3
 8009abc:	f00d ff52 	bl	8017964 <memset>
	read_chunk_data_in_flash(buff_file, BaseAddress + (round-1)*1024, size%1024);
 8009ac0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	029a      	lsls	r2, r3, #10
 8009ac8:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8009acc:	18d1      	adds	r1, r2, r3
 8009ace:	1d3b      	adds	r3, r7, #4
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff ff2a 	bl	8009938 <read_chunk_data_in_flash>

	sha3(buff_file, size%1024, &buff_hash[round-1], 64);
 8009ae4:	1d3b      	adds	r3, r7, #4
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f3c3 0109 	ubfx	r1, r3, #0, #10
 8009aec:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8009af0:	3b01      	subs	r3, #1
 8009af2:	019b      	lsls	r3, r3, #6
 8009af4:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 8009af8:	441a      	add	r2, r3
 8009afa:	f207 4014 	addw	r0, r7, #1044	; 0x414
 8009afe:	2340      	movs	r3, #64	; 0x40
 8009b00:	f004 fe9b 	bl	800e83a <sha3>


	uint8_t all_of_hash[round*64];
 8009b04:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8009b08:	019c      	lsls	r4, r3, #6
 8009b0a:	466b      	mov	r3, sp
 8009b0c:	461e      	mov	r6, r3
 8009b0e:	4623      	mov	r3, r4
 8009b10:	3b01      	subs	r3, #1
 8009b12:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 8009b16:	4620      	mov	r0, r4
 8009b18:	f04f 0100 	mov.w	r1, #0
 8009b1c:	f04f 0200 	mov.w	r2, #0
 8009b20:	f04f 0300 	mov.w	r3, #0
 8009b24:	00cb      	lsls	r3, r1, #3
 8009b26:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009b2a:	00c2      	lsls	r2, r0, #3
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f04f 0100 	mov.w	r1, #0
 8009b32:	f04f 0200 	mov.w	r2, #0
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	00cb      	lsls	r3, r1, #3
 8009b3c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009b40:	00c2      	lsls	r2, r0, #3
 8009b42:	1de3      	adds	r3, r4, #7
 8009b44:	08db      	lsrs	r3, r3, #3
 8009b46:	00db      	lsls	r3, r3, #3
 8009b48:	ebad 0d03 	sub.w	sp, sp, r3
 8009b4c:	466b      	mov	r3, sp
 8009b4e:	3300      	adds	r3, #0
 8009b50:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	for(uint16 i = 0; i< round; i++){
 8009b54:	2300      	movs	r3, #0
 8009b56:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 8009b5a:	e024      	b.n	8009ba6 <tree_hash_on_flash+0x22a>
		for(uint16 j = 0;j<64;j++){
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8009b62:	e017      	b.n	8009b94 <tree_hash_on_flash+0x218>
			all_of_hash[i*64+j] = buff_hash[i][j];
 8009b64:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8009b68:	019a      	lsls	r2, r3, #6
 8009b6a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8009b6e:	4413      	add	r3, r2
 8009b70:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 8009b74:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 8009b78:	0192      	lsls	r2, r2, #6
 8009b7a:	4411      	add	r1, r2
 8009b7c:	f8d7 2834 	ldr.w	r2, [r7, #2100]	; 0x834
 8009b80:	440a      	add	r2, r1
 8009b82:	7811      	ldrb	r1, [r2, #0]
 8009b84:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8009b88:	54d1      	strb	r1, [r2, r3]
		for(uint16 j = 0;j<64;j++){
 8009b8a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8009b8e:	3301      	adds	r3, #1
 8009b90:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8009b94:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8009b98:	2b3f      	cmp	r3, #63	; 0x3f
 8009b9a:	d9e3      	bls.n	8009b64 <tree_hash_on_flash+0x1e8>
	for(uint16 i = 0; i< round; i++){
 8009b9c:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 8009ba6:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 8009baa:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d3d4      	bcc.n	8009b5c <tree_hash_on_flash+0x1e0>
		}
	}

	sha3(all_of_hash, round*64, md, 64);
 8009bb2:	f8d7 0814 	ldr.w	r0, [r7, #2068]	; 0x814
 8009bb6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8009bba:	0199      	lsls	r1, r3, #6
 8009bbc:	f107 0208 	add.w	r2, r7, #8
 8009bc0:	2340      	movs	r3, #64	; 0x40
 8009bc2:	6812      	ldr	r2, [r2, #0]
 8009bc4:	f004 fe39 	bl	800e83a <sha3>


	return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	46b5      	mov	sp, r6
 8009bcc:	46ad      	mov	sp, r5
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f607 073c 	addw	r7, r7, #2108	; 0x83c
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bd8:	08020000 	.word	0x08020000
 8009bdc:	08060000 	.word	0x08060000
 8009be0:	080a0000 	.word	0x080a0000

08009be4 <read_reset_cause>:

uint8_t read_reset_cause(){
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8009bea:	f007 fdaf 	bl	801174c <HAL_FLASH_Unlock>
	uint8_t reset_cause = ((*((__IO uint32 *)0x080E0000))&0x00000100)>>8;
 8009bee:	4b07      	ldr	r3, [pc, #28]	; (8009c0c <read_reset_cause+0x28>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	0a1b      	lsrs	r3, r3, #8
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	71fb      	strb	r3, [r7, #7]
	HAL_FLASH_Lock();
 8009bfc:	f007 fdc8 	bl	8011790 <HAL_FLASH_Lock>
	return reset_cause;
 8009c00:	79fb      	ldrb	r3, [r7, #7]

}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	080e0000 	.word	0x080e0000

08009c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009c10:	b590      	push	{r4, r7, lr}
 8009c12:	f2ad 4de4 	subw	sp, sp, #1252	; 0x4e4
 8009c16:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009c18:	f007 fbc8 	bl	80113ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009c1c:	f000 f952 	bl	8009ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009c20:	f000 faaa 	bl	800a178 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8009c24:	f000 f9b8 	bl	8009f98 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8009c28:	f00b f940 	bl	8014eac <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8009c2c:	f000 fa50 	bl	800a0d0 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8009c30:	f000 fa24 	bl	800a07c <MX_UART4_Init>
  MX_USART2_UART_Init();
 8009c34:	f000 fa76 	bl	800a124 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8009c38:	f000 f9ce 	bl	8009fd8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8009c3c:	488e      	ldr	r0, [pc, #568]	; (8009e78 <main+0x268>)
 8009c3e:	f009 fe07 	bl	8013850 <HAL_TIM_Base_Start>
  uint16_t time = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
  uint32_t total_time = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8

  if(read_reset_cause()) {
 8009c4e:	f7ff ffc9 	bl	8009be4 <read_reset_cause>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d008      	beq.n	8009c6a <main+0x5a>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009c5e:	4887      	ldr	r0, [pc, #540]	; (8009e7c <main+0x26c>)
 8009c60:	f008 f994 	bl	8011f8c <HAL_GPIO_WritePin>
	  goto_application(FLASH_SLOT_0_ADD);
 8009c64:	4886      	ldr	r0, [pc, #536]	; (8009e80 <main+0x270>)
 8009c66:	f7ff fc6d 	bl	8009544 <goto_application>
  }
  HAL_UART_Transmit(&huart2, "\r*****THIS IS ROT PROGRAM*****\n\r", 32, 1000);
 8009c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c6e:	2220      	movs	r2, #32
 8009c70:	4984      	ldr	r1, [pc, #528]	; (8009e84 <main+0x274>)
 8009c72:	4885      	ldr	r0, [pc, #532]	; (8009e88 <main+0x278>)
 8009c74:	f00a f91f 	bl	8013eb6 <HAL_UART_Transmit>
  FATFS fatfs; FIL myfile;
  uint8_t buffer[100] = {0,};
 8009c78:	1d3b      	adds	r3, r7, #4
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	2260      	movs	r2, #96	; 0x60
 8009c82:	2100      	movs	r1, #0
 8009c84:	4618      	mov	r0, r3
 8009c86:	f00d fe6d 	bl	8017964 <memset>
  TIM1->CNT = 0;
 8009c8a:	4b80      	ldr	r3, [pc, #512]	; (8009e8c <main+0x27c>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	625a      	str	r2, [r3, #36]	; 0x24
  size = read_file_and_store_into_flash(&fatfs, &myfile, "boot.bin", FA_READ, FLASH_SLOT_0, signature, publickey, hashvaluer);
 8009c90:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8009c94:	f507 7026 	add.w	r0, r7, #664	; 0x298
 8009c98:	4b7d      	ldr	r3, [pc, #500]	; (8009e90 <main+0x280>)
 8009c9a:	9303      	str	r3, [sp, #12]
 8009c9c:	4b7d      	ldr	r3, [pc, #500]	; (8009e94 <main+0x284>)
 8009c9e:	9302      	str	r3, [sp, #8]
 8009ca0:	4b7d      	ldr	r3, [pc, #500]	; (8009e98 <main+0x288>)
 8009ca2:	9301      	str	r3, [sp, #4]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	2301      	movs	r3, #1
 8009caa:	4a7c      	ldr	r2, [pc, #496]	; (8009e9c <main+0x28c>)
 8009cac:	f7ff fd08 	bl	80096c0 <read_file_and_store_into_flash>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	4a7b      	ldr	r2, [pc, #492]	; (8009ea0 <main+0x290>)
 8009cb4:	6013      	str	r3, [r2, #0]
  time = TIM1->CNT;
 8009cb6:	4b75      	ldr	r3, [pc, #468]	; (8009e8c <main+0x27c>)
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cba:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
  total_time += time;
 8009cbe:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 8009cc2:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
  HAL_UART_Transmit(&huart2, "\r       -READ BOOTLOADER AND STORE IN FLASH\n\r", 50, 1000);
 8009ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cd0:	2232      	movs	r2, #50	; 0x32
 8009cd2:	4974      	ldr	r1, [pc, #464]	; (8009ea4 <main+0x294>)
 8009cd4:	486c      	ldr	r0, [pc, #432]	; (8009e88 <main+0x278>)
 8009cd6:	f00a f8ee 	bl	8013eb6 <HAL_UART_Transmit>
  sprintf(buffer, "\r              +SIZE: %d BYTES\n\r              +TIME: %.2f(MS)\n\r", size, (float)time/5.0);
 8009cda:	4b71      	ldr	r3, [pc, #452]	; (8009ea0 <main+0x290>)
 8009cdc:	681c      	ldr	r4, [r3, #0]
 8009cde:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cea:	ee17 0a90 	vmov	r0, s15
 8009cee:	f7f6 fc2b 	bl	8000548 <__aeabi_f2d>
 8009cf2:	f04f 0200 	mov.w	r2, #0
 8009cf6:	4b6c      	ldr	r3, [pc, #432]	; (8009ea8 <main+0x298>)
 8009cf8:	f7f6 fda8 	bl	800084c <__aeabi_ddiv>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	1d38      	adds	r0, r7, #4
 8009d02:	e9cd 2300 	strd	r2, r3, [sp]
 8009d06:	4622      	mov	r2, r4
 8009d08:	4968      	ldr	r1, [pc, #416]	; (8009eac <main+0x29c>)
 8009d0a:	f00e fb57 	bl	80183bc <siprintf>
  HAL_UART_Transmit(&huart2, buffer, 100, 1000);
 8009d0e:	1d39      	adds	r1, r7, #4
 8009d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d14:	2264      	movs	r2, #100	; 0x64
 8009d16:	485c      	ldr	r0, [pc, #368]	; (8009e88 <main+0x278>)
 8009d18:	f00a f8cd 	bl	8013eb6 <HAL_UART_Transmit>
  memset(buffer, 0, 100);
 8009d1c:	1d3b      	adds	r3, r7, #4
 8009d1e:	2264      	movs	r2, #100	; 0x64
 8009d20:	2100      	movs	r1, #0
 8009d22:	4618      	mov	r0, r3
 8009d24:	f00d fe1e 	bl	8017964 <memset>
  TIM1->CNT = 0;
 8009d28:	4b58      	ldr	r3, [pc, #352]	; (8009e8c <main+0x27c>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	625a      	str	r2, [r3, #36]	; 0x24
  tree_hash_on_flash(FLASH_SLOT_0, md, size);
 8009d2e:	4b5c      	ldr	r3, [pc, #368]	; (8009ea0 <main+0x290>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	495e      	ldr	r1, [pc, #376]	; (8009eb0 <main+0x2a0>)
 8009d36:	2000      	movs	r0, #0
 8009d38:	f7ff fe20 	bl	800997c <tree_hash_on_flash>
  time = TIM1->CNT;
 8009d3c:	4b53      	ldr	r3, [pc, #332]	; (8009e8c <main+0x27c>)
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
  total_time += time;
 8009d44:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 8009d48:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
  HAL_UART_Transmit(&huart2, "\r       -TREE HASH IN FLASH\n\r", 28, 1000);
 8009d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d56:	221c      	movs	r2, #28
 8009d58:	4956      	ldr	r1, [pc, #344]	; (8009eb4 <main+0x2a4>)
 8009d5a:	484b      	ldr	r0, [pc, #300]	; (8009e88 <main+0x278>)
 8009d5c:	f00a f8ab 	bl	8013eb6 <HAL_UART_Transmit>
  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 8009d60:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 8009d64:	ee07 3a90 	vmov	s15, r3
 8009d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6c:	ee17 0a90 	vmov	r0, s15
 8009d70:	f7f6 fbea 	bl	8000548 <__aeabi_f2d>
 8009d74:	f04f 0200 	mov.w	r2, #0
 8009d78:	4b4b      	ldr	r3, [pc, #300]	; (8009ea8 <main+0x298>)
 8009d7a:	f7f6 fd67 	bl	800084c <__aeabi_ddiv>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	1d38      	adds	r0, r7, #4
 8009d84:	494c      	ldr	r1, [pc, #304]	; (8009eb8 <main+0x2a8>)
 8009d86:	f00e fb19 	bl	80183bc <siprintf>
  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 8009d8a:	1d39      	adds	r1, r7, #4
 8009d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d90:	2228      	movs	r2, #40	; 0x28
 8009d92:	483d      	ldr	r0, [pc, #244]	; (8009e88 <main+0x278>)
 8009d94:	f00a f88f 	bl	8013eb6 <HAL_UART_Transmit>
  memset(buffer, 0, 100);
 8009d98:	1d3b      	adds	r3, r7, #4
 8009d9a:	2264      	movs	r2, #100	; 0x64
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f00d fde0 	bl	8017964 <memset>
  TIM1->CNT = 0;
 8009da4:	4b39      	ldr	r3, [pc, #228]	; (8009e8c <main+0x27c>)
 8009da6:	2200      	movs	r2, #0
 8009da8:	625a      	str	r2, [r3, #36]	; 0x24
  if (ed25519_verify(signature, md, 64, publickey)) {
 8009daa:	4b3a      	ldr	r3, [pc, #232]	; (8009e94 <main+0x284>)
 8009dac:	2240      	movs	r2, #64	; 0x40
 8009dae:	4940      	ldr	r1, [pc, #256]	; (8009eb0 <main+0x2a0>)
 8009db0:	4839      	ldr	r0, [pc, #228]	; (8009e98 <main+0x288>)
 8009db2:	f007 fa53 	bl	801125c <ed25519_verify>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d053      	beq.n	8009e64 <main+0x254>
	  time = TIM1->CNT;
 8009dbc:	4b33      	ldr	r3, [pc, #204]	; (8009e8c <main+0x27c>)
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
	  total_time += time;
 8009dc4:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 8009dc8:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 8009dcc:	4413      	add	r3, r2
 8009dce:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
	  HAL_UART_Transmit(&huart2, "\r       -VERIFY BOOTLOADER SUCCESSFULL\n\r", 50, 1000);
 8009dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009dd6:	2232      	movs	r2, #50	; 0x32
 8009dd8:	4938      	ldr	r1, [pc, #224]	; (8009ebc <main+0x2ac>)
 8009dda:	482b      	ldr	r0, [pc, #172]	; (8009e88 <main+0x278>)
 8009ddc:	f00a f86b 	bl	8013eb6 <HAL_UART_Transmit>
	  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 8009de0:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 8009de4:	ee07 3a90 	vmov	s15, r3
 8009de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dec:	ee17 0a90 	vmov	r0, s15
 8009df0:	f7f6 fbaa 	bl	8000548 <__aeabi_f2d>
 8009df4:	f04f 0200 	mov.w	r2, #0
 8009df8:	4b2b      	ldr	r3, [pc, #172]	; (8009ea8 <main+0x298>)
 8009dfa:	f7f6 fd27 	bl	800084c <__aeabi_ddiv>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	1d38      	adds	r0, r7, #4
 8009e04:	492c      	ldr	r1, [pc, #176]	; (8009eb8 <main+0x2a8>)
 8009e06:	f00e fad9 	bl	80183bc <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 8009e0a:	1d39      	adds	r1, r7, #4
 8009e0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e10:	2228      	movs	r2, #40	; 0x28
 8009e12:	481d      	ldr	r0, [pc, #116]	; (8009e88 <main+0x278>)
 8009e14:	f00a f84f 	bl	8013eb6 <HAL_UART_Transmit>
	  sprintf(buffer, "\r       -TOTAL TIME: %.2f(MS)\n\r", (float)total_time/5.0);
 8009e18:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8009e1c:	ee07 3a90 	vmov	s15, r3
 8009e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e24:	ee17 0a90 	vmov	r0, s15
 8009e28:	f7f6 fb8e 	bl	8000548 <__aeabi_f2d>
 8009e2c:	f04f 0200 	mov.w	r2, #0
 8009e30:	4b1d      	ldr	r3, [pc, #116]	; (8009ea8 <main+0x298>)
 8009e32:	f7f6 fd0b 	bl	800084c <__aeabi_ddiv>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	1d38      	adds	r0, r7, #4
 8009e3c:	4920      	ldr	r1, [pc, #128]	; (8009ec0 <main+0x2b0>)
 8009e3e:	f00e fabd 	bl	80183bc <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 8009e42:	1d39      	adds	r1, r7, #4
 8009e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e48:	2228      	movs	r2, #40	; 0x28
 8009e4a:	480f      	ldr	r0, [pc, #60]	; (8009e88 <main+0x278>)
 8009e4c:	f00a f833 	bl	8013eb6 <HAL_UART_Transmit>
	  goto_application(FLASH_SLOT_0_ADD);
 8009e50:	480b      	ldr	r0, [pc, #44]	; (8009e80 <main+0x270>)
 8009e52:	f7ff fb77 	bl	8009544 <goto_application>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8009e56:	2201      	movs	r2, #1
 8009e58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e5c:	4807      	ldr	r0, [pc, #28]	; (8009e7c <main+0x26c>)
 8009e5e:	f008 f895 	bl	8011f8c <HAL_GPIO_WritePin>
 8009e62:	e007      	b.n	8009e74 <main+0x264>
  } else {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8009e64:	2201      	movs	r2, #1
 8009e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e6a:	4804      	ldr	r0, [pc, #16]	; (8009e7c <main+0x26c>)
 8009e6c:	f008 f88e 	bl	8011f8c <HAL_GPIO_WritePin>
	  Error_Handler();
 8009e70:	f000 f9e2 	bl	800a238 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009e74:	e7fe      	b.n	8009e74 <main+0x264>
 8009e76:	bf00      	nop
 8009e78:	20000408 	.word	0x20000408
 8009e7c:	40020c00 	.word	0x40020c00
 8009e80:	08020000 	.word	0x08020000
 8009e84:	0801a25c 	.word	0x0801a25c
 8009e88:	2000051c 	.word	0x2000051c
 8009e8c:	40010000 	.word	0x40010000
 8009e90:	200002dc 	.word	0x200002dc
 8009e94:	200003a0 	.word	0x200003a0
 8009e98:	2000031c 	.word	0x2000031c
 8009e9c:	0801a280 	.word	0x0801a280
 8009ea0:	20000298 	.word	0x20000298
 8009ea4:	0801a28c 	.word	0x0801a28c
 8009ea8:	40140000 	.word	0x40140000
 8009eac:	0801a2bc 	.word	0x0801a2bc
 8009eb0:	2000035c 	.word	0x2000035c
 8009eb4:	0801a2fc 	.word	0x0801a2fc
 8009eb8:	0801a31c 	.word	0x0801a31c
 8009ebc:	0801a340 	.word	0x0801a340
 8009ec0:	0801a36c 	.word	0x0801a36c

08009ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b094      	sub	sp, #80	; 0x50
 8009ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009eca:	f107 0320 	add.w	r3, r7, #32
 8009ece:	2230      	movs	r2, #48	; 0x30
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f00d fd46 	bl	8017964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009ed8:	f107 030c 	add.w	r3, r7, #12
 8009edc:	2200      	movs	r2, #0
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	605a      	str	r2, [r3, #4]
 8009ee2:	609a      	str	r2, [r3, #8]
 8009ee4:	60da      	str	r2, [r3, #12]
 8009ee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009ee8:	2300      	movs	r3, #0
 8009eea:	60bb      	str	r3, [r7, #8]
 8009eec:	4b28      	ldr	r3, [pc, #160]	; (8009f90 <SystemClock_Config+0xcc>)
 8009eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef0:	4a27      	ldr	r2, [pc, #156]	; (8009f90 <SystemClock_Config+0xcc>)
 8009ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8009ef8:	4b25      	ldr	r3, [pc, #148]	; (8009f90 <SystemClock_Config+0xcc>)
 8009efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f00:	60bb      	str	r3, [r7, #8]
 8009f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009f04:	2300      	movs	r3, #0
 8009f06:	607b      	str	r3, [r7, #4]
 8009f08:	4b22      	ldr	r3, [pc, #136]	; (8009f94 <SystemClock_Config+0xd0>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a21      	ldr	r2, [pc, #132]	; (8009f94 <SystemClock_Config+0xd0>)
 8009f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f12:	6013      	str	r3, [r2, #0]
 8009f14:	4b1f      	ldr	r3, [pc, #124]	; (8009f94 <SystemClock_Config+0xd0>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f1c:	607b      	str	r3, [r7, #4]
 8009f1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009f20:	2302      	movs	r3, #2
 8009f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009f24:	2301      	movs	r3, #1
 8009f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009f28:	2310      	movs	r3, #16
 8009f2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009f30:	2300      	movs	r3, #0
 8009f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009f34:	2308      	movs	r3, #8
 8009f36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009f38:	23a8      	movs	r3, #168	; 0xa8
 8009f3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009f40:	2304      	movs	r3, #4
 8009f42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009f44:	f107 0320 	add.w	r3, r7, #32
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f008 f839 	bl	8011fc0 <HAL_RCC_OscConfig>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009f54:	f000 f970 	bl	800a238 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009f58:	230f      	movs	r3, #15
 8009f5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009f64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009f68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009f70:	f107 030c 	add.w	r3, r7, #12
 8009f74:	2105      	movs	r1, #5
 8009f76:	4618      	mov	r0, r3
 8009f78:	f008 fa9a 	bl	80124b0 <HAL_RCC_ClockConfig>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8009f82:	f000 f959 	bl	800a238 <Error_Handler>
  }
}
 8009f86:	bf00      	nop
 8009f88:	3750      	adds	r7, #80	; 0x50
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	40023800 	.word	0x40023800
 8009f94:	40007000 	.word	0x40007000

08009f98 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8009f9c:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <MX_SDIO_SD_Init+0x38>)
 8009f9e:	4a0d      	ldr	r2, [pc, #52]	; (8009fd4 <MX_SDIO_SD_Init+0x3c>)
 8009fa0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8009fa2:	4b0b      	ldr	r3, [pc, #44]	; (8009fd0 <MX_SDIO_SD_Init+0x38>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8009fa8:	4b09      	ldr	r3, [pc, #36]	; (8009fd0 <MX_SDIO_SD_Init+0x38>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009fae:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <MX_SDIO_SD_Init+0x38>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8009fb4:	4b06      	ldr	r3, [pc, #24]	; (8009fd0 <MX_SDIO_SD_Init+0x38>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009fba:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <MX_SDIO_SD_Init+0x38>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8009fc0:	4b03      	ldr	r3, [pc, #12]	; (8009fd0 <MX_SDIO_SD_Init+0x38>)
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8009fc6:	bf00      	nop
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	20000450 	.word	0x20000450
 8009fd4:	40012c00 	.word	0x40012c00

08009fd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fde:	f107 0308 	add.w	r3, r7, #8
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]
 8009fe6:	605a      	str	r2, [r3, #4]
 8009fe8:	609a      	str	r2, [r3, #8]
 8009fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009fec:	463b      	mov	r3, r7
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009ff4:	4b1f      	ldr	r3, [pc, #124]	; (800a074 <MX_TIM1_Init+0x9c>)
 8009ff6:	4a20      	ldr	r2, [pc, #128]	; (800a078 <MX_TIM1_Init+0xa0>)
 8009ff8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 33600-1;
 8009ffa:	4b1e      	ldr	r3, [pc, #120]	; (800a074 <MX_TIM1_Init+0x9c>)
 8009ffc:	f248 323f 	movw	r2, #33599	; 0x833f
 800a000:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a002:	4b1c      	ldr	r3, [pc, #112]	; (800a074 <MX_TIM1_Init+0x9c>)
 800a004:	2200      	movs	r2, #0
 800a006:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800a008:	4b1a      	ldr	r3, [pc, #104]	; (800a074 <MX_TIM1_Init+0x9c>)
 800a00a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a00e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a010:	4b18      	ldr	r3, [pc, #96]	; (800a074 <MX_TIM1_Init+0x9c>)
 800a012:	2200      	movs	r2, #0
 800a014:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a016:	4b17      	ldr	r3, [pc, #92]	; (800a074 <MX_TIM1_Init+0x9c>)
 800a018:	2200      	movs	r2, #0
 800a01a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a01c:	4b15      	ldr	r3, [pc, #84]	; (800a074 <MX_TIM1_Init+0x9c>)
 800a01e:	2200      	movs	r2, #0
 800a020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a022:	4814      	ldr	r0, [pc, #80]	; (800a074 <MX_TIM1_Init+0x9c>)
 800a024:	f009 fbc4 	bl	80137b0 <HAL_TIM_Base_Init>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800a02e:	f000 f903 	bl	800a238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a036:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a038:	f107 0308 	add.w	r3, r7, #8
 800a03c:	4619      	mov	r1, r3
 800a03e:	480d      	ldr	r0, [pc, #52]	; (800a074 <MX_TIM1_Init+0x9c>)
 800a040:	f009 fc6e 	bl	8013920 <HAL_TIM_ConfigClockSource>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800a04a:	f000 f8f5 	bl	800a238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a04e:	2300      	movs	r3, #0
 800a050:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a052:	2300      	movs	r3, #0
 800a054:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a056:	463b      	mov	r3, r7
 800a058:	4619      	mov	r1, r3
 800a05a:	4806      	ldr	r0, [pc, #24]	; (800a074 <MX_TIM1_Init+0x9c>)
 800a05c:	f009 fe62 	bl	8013d24 <HAL_TIMEx_MasterConfigSynchronization>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800a066:	f000 f8e7 	bl	800a238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a06a:	bf00      	nop
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20000408 	.word	0x20000408
 800a078:	40010000 	.word	0x40010000

0800a07c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800a080:	4b11      	ldr	r3, [pc, #68]	; (800a0c8 <MX_UART4_Init+0x4c>)
 800a082:	4a12      	ldr	r2, [pc, #72]	; (800a0cc <MX_UART4_Init+0x50>)
 800a084:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800a086:	4b10      	ldr	r3, [pc, #64]	; (800a0c8 <MX_UART4_Init+0x4c>)
 800a088:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a08c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a08e:	4b0e      	ldr	r3, [pc, #56]	; (800a0c8 <MX_UART4_Init+0x4c>)
 800a090:	2200      	movs	r2, #0
 800a092:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a094:	4b0c      	ldr	r3, [pc, #48]	; (800a0c8 <MX_UART4_Init+0x4c>)
 800a096:	2200      	movs	r2, #0
 800a098:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a09a:	4b0b      	ldr	r3, [pc, #44]	; (800a0c8 <MX_UART4_Init+0x4c>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a0a0:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <MX_UART4_Init+0x4c>)
 800a0a2:	220c      	movs	r2, #12
 800a0a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a0a6:	4b08      	ldr	r3, [pc, #32]	; (800a0c8 <MX_UART4_Init+0x4c>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a0ac:	4b06      	ldr	r3, [pc, #24]	; (800a0c8 <MX_UART4_Init+0x4c>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a0b2:	4805      	ldr	r0, [pc, #20]	; (800a0c8 <MX_UART4_Init+0x4c>)
 800a0b4:	f009 feb2 	bl	8013e1c <HAL_UART_Init>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800a0be:	f000 f8bb 	bl	800a238 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a0c2:	bf00      	nop
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	200004d4 	.word	0x200004d4
 800a0cc:	40004c00 	.word	0x40004c00

0800a0d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a0d4:	4b11      	ldr	r3, [pc, #68]	; (800a11c <MX_USART1_UART_Init+0x4c>)
 800a0d6:	4a12      	ldr	r2, [pc, #72]	; (800a120 <MX_USART1_UART_Init+0x50>)
 800a0d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800a0da:	4b10      	ldr	r3, [pc, #64]	; (800a11c <MX_USART1_UART_Init+0x4c>)
 800a0dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a0e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a0e2:	4b0e      	ldr	r3, [pc, #56]	; (800a11c <MX_USART1_UART_Init+0x4c>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a0e8:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <MX_USART1_UART_Init+0x4c>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a0ee:	4b0b      	ldr	r3, [pc, #44]	; (800a11c <MX_USART1_UART_Init+0x4c>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a0f4:	4b09      	ldr	r3, [pc, #36]	; (800a11c <MX_USART1_UART_Init+0x4c>)
 800a0f6:	220c      	movs	r2, #12
 800a0f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a0fa:	4b08      	ldr	r3, [pc, #32]	; (800a11c <MX_USART1_UART_Init+0x4c>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a100:	4b06      	ldr	r3, [pc, #24]	; (800a11c <MX_USART1_UART_Init+0x4c>)
 800a102:	2200      	movs	r2, #0
 800a104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a106:	4805      	ldr	r0, [pc, #20]	; (800a11c <MX_USART1_UART_Init+0x4c>)
 800a108:	f009 fe88 	bl	8013e1c <HAL_UART_Init>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a112:	f000 f891 	bl	800a238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a116:	bf00      	nop
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	200003c4 	.word	0x200003c4
 800a120:	40011000 	.word	0x40011000

0800a124 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a128:	4b11      	ldr	r3, [pc, #68]	; (800a170 <MX_USART2_UART_Init+0x4c>)
 800a12a:	4a12      	ldr	r2, [pc, #72]	; (800a174 <MX_USART2_UART_Init+0x50>)
 800a12c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800a12e:	4b10      	ldr	r3, [pc, #64]	; (800a170 <MX_USART2_UART_Init+0x4c>)
 800a130:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a136:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <MX_USART2_UART_Init+0x4c>)
 800a138:	2200      	movs	r2, #0
 800a13a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a13c:	4b0c      	ldr	r3, [pc, #48]	; (800a170 <MX_USART2_UART_Init+0x4c>)
 800a13e:	2200      	movs	r2, #0
 800a140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a142:	4b0b      	ldr	r3, [pc, #44]	; (800a170 <MX_USART2_UART_Init+0x4c>)
 800a144:	2200      	movs	r2, #0
 800a146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a148:	4b09      	ldr	r3, [pc, #36]	; (800a170 <MX_USART2_UART_Init+0x4c>)
 800a14a:	220c      	movs	r2, #12
 800a14c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a14e:	4b08      	ldr	r3, [pc, #32]	; (800a170 <MX_USART2_UART_Init+0x4c>)
 800a150:	2200      	movs	r2, #0
 800a152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a154:	4b06      	ldr	r3, [pc, #24]	; (800a170 <MX_USART2_UART_Init+0x4c>)
 800a156:	2200      	movs	r2, #0
 800a158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a15a:	4805      	ldr	r0, [pc, #20]	; (800a170 <MX_USART2_UART_Init+0x4c>)
 800a15c:	f009 fe5e 	bl	8013e1c <HAL_UART_Init>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a166:	f000 f867 	bl	800a238 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a16a:	bf00      	nop
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	2000051c 	.word	0x2000051c
 800a174:	40004400 	.word	0x40004400

0800a178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08a      	sub	sp, #40	; 0x28
 800a17c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a17e:	f107 0314 	add.w	r3, r7, #20
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
 800a186:	605a      	str	r2, [r3, #4]
 800a188:	609a      	str	r2, [r3, #8]
 800a18a:	60da      	str	r2, [r3, #12]
 800a18c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a18e:	2300      	movs	r3, #0
 800a190:	613b      	str	r3, [r7, #16]
 800a192:	4b27      	ldr	r3, [pc, #156]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a196:	4a26      	ldr	r2, [pc, #152]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19c:	6313      	str	r3, [r2, #48]	; 0x30
 800a19e:	4b24      	ldr	r3, [pc, #144]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a6:	613b      	str	r3, [r7, #16]
 800a1a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60fb      	str	r3, [r7, #12]
 800a1ae:	4b20      	ldr	r3, [pc, #128]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b2:	4a1f      	ldr	r2, [pc, #124]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a1b4:	f043 0301 	orr.w	r3, r3, #1
 800a1b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a1ba:	4b1d      	ldr	r3, [pc, #116]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60bb      	str	r3, [r7, #8]
 800a1ca:	4b19      	ldr	r3, [pc, #100]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ce:	4a18      	ldr	r2, [pc, #96]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a1d0:	f043 0308 	orr.w	r3, r3, #8
 800a1d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a1d6:	4b16      	ldr	r3, [pc, #88]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1da:	f003 0308 	and.w	r3, r3, #8
 800a1de:	60bb      	str	r3, [r7, #8]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	607b      	str	r3, [r7, #4]
 800a1e6:	4b12      	ldr	r3, [pc, #72]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ea:	4a11      	ldr	r2, [pc, #68]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a1ec:	f043 0304 	orr.w	r3, r3, #4
 800a1f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a1f2:	4b0f      	ldr	r3, [pc, #60]	; (800a230 <MX_GPIO_Init+0xb8>)
 800a1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f6:	f003 0304 	and.w	r3, r3, #4
 800a1fa:	607b      	str	r3, [r7, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800a1fe:	2200      	movs	r2, #0
 800a200:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800a204:	480b      	ldr	r0, [pc, #44]	; (800a234 <MX_GPIO_Init+0xbc>)
 800a206:	f007 fec1 	bl	8011f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800a20a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a20e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a210:	2301      	movs	r3, #1
 800a212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a214:	2300      	movs	r3, #0
 800a216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a218:	2300      	movs	r3, #0
 800a21a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a21c:	f107 0314 	add.w	r3, r7, #20
 800a220:	4619      	mov	r1, r3
 800a222:	4804      	ldr	r0, [pc, #16]	; (800a234 <MX_GPIO_Init+0xbc>)
 800a224:	f007 fd16 	bl	8011c54 <HAL_GPIO_Init>

}
 800a228:	bf00      	nop
 800a22a:	3728      	adds	r7, #40	; 0x28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	40023800 	.word	0x40023800
 800a234:	40020c00 	.word	0x40020c00

0800a238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a238:	b480      	push	{r7}
 800a23a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a23c:	b672      	cpsid	i
}
 800a23e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a240:	e7fe      	b.n	800a240 <Error_Handler+0x8>

0800a242 <load_3>:
#include "fixedint.h"
#include "sc.h"

static uint64_t load_3(const unsigned char *in) {
 800a242:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
    uint64_t result;

    result = (uint64_t) in[0];
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	b2da      	uxtb	r2, r3
 800a252:	f04f 0300 	mov.w	r3, #0
 800a256:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result |= ((uint64_t) in[1]) << 8;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3301      	adds	r3, #1
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	b2d8      	uxtb	r0, r3
 800a262:	f04f 0100 	mov.w	r1, #0
 800a266:	f04f 0200 	mov.w	r2, #0
 800a26a:	f04f 0300 	mov.w	r3, #0
 800a26e:	020b      	lsls	r3, r1, #8
 800a270:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a274:	0202      	lsls	r2, r0, #8
 800a276:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a27a:	ea40 0802 	orr.w	r8, r0, r2
 800a27e:	ea41 0903 	orr.w	r9, r1, r3
 800a282:	e9c7 8902 	strd	r8, r9, [r7, #8]
    result |= ((uint64_t) in[2]) << 16;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	3302      	adds	r3, #2
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	b2d8      	uxtb	r0, r3
 800a28e:	f04f 0100 	mov.w	r1, #0
 800a292:	f04f 0200 	mov.w	r2, #0
 800a296:	f04f 0300 	mov.w	r3, #0
 800a29a:	040b      	lsls	r3, r1, #16
 800a29c:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800a2a0:	0402      	lsls	r2, r0, #16
 800a2a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2a6:	ea40 0402 	orr.w	r4, r0, r2
 800a2aa:	ea41 0503 	orr.w	r5, r1, r3
 800a2ae:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return result;
 800a2b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800a2c2:	4770      	bx	lr

0800a2c4 <load_4>:

static uint64_t load_4(const unsigned char *in) {
 800a2c4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a2c8:	b086      	sub	sp, #24
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	60f8      	str	r0, [r7, #12]
    uint64_t result;

    result = (uint64_t) in[0];
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	f04f 0300 	mov.w	r3, #0
 800a2d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[1]) << 8;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	b2d8      	uxtb	r0, r3
 800a2e4:	f04f 0100 	mov.w	r1, #0
 800a2e8:	f04f 0200 	mov.w	r2, #0
 800a2ec:	f04f 0300 	mov.w	r3, #0
 800a2f0:	020b      	lsls	r3, r1, #8
 800a2f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2f6:	0202      	lsls	r2, r0, #8
 800a2f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a2fc:	ea40 0602 	orr.w	r6, r0, r2
 800a300:	603e      	str	r6, [r7, #0]
 800a302:	430b      	orrs	r3, r1
 800a304:	607b      	str	r3, [r7, #4]
 800a306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a30a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[2]) << 16;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3302      	adds	r3, #2
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	b2d8      	uxtb	r0, r3
 800a316:	f04f 0100 	mov.w	r1, #0
 800a31a:	f04f 0200 	mov.w	r2, #0
 800a31e:	f04f 0300 	mov.w	r3, #0
 800a322:	040b      	lsls	r3, r1, #16
 800a324:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800a328:	0402      	lsls	r2, r0, #16
 800a32a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a32e:	ea40 0a02 	orr.w	sl, r0, r2
 800a332:	ea41 0b03 	orr.w	fp, r1, r3
 800a336:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    result |= ((uint64_t) in[3]) << 24;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3303      	adds	r3, #3
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	b2da      	uxtb	r2, r3
 800a342:	f04f 0300 	mov.w	r3, #0
 800a346:	0a15      	lsrs	r5, r2, #8
 800a348:	0614      	lsls	r4, r2, #24
 800a34a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a34e:	ea42 0804 	orr.w	r8, r2, r4
 800a352:	ea43 0905 	orr.w	r9, r3, r5
 800a356:	e9c7 8904 	strd	r8, r9, [r7, #16]
    
    return result;
 800a35a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800a35e:	4610      	mov	r0, r2
 800a360:	4619      	mov	r1, r3
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a36a:	4770      	bx	lr

0800a36c <sc_reduce>:
  s[0]+256*s[1]+...+256^31*s[31] = s mod l
  where l = 2^252 + 27742317777372353535851937790883648493.
  Overwrites s in place.
*/

void sc_reduce(unsigned char *s) {
 800a36c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a370:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 800a374:	af00      	add	r7, sp, #0
 800a376:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a37a:	6018      	str	r0, [r3, #0]
    int64_t s0 = 2097151 & load_3(s);
 800a37c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a380:	6818      	ldr	r0, [r3, #0]
 800a382:	f7ff ff5e 	bl	800a242 <load_3>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4610      	mov	r0, r2
 800a38c:	4619      	mov	r1, r3
 800a38e:	4af0      	ldr	r2, [pc, #960]	; (800a750 <sc_reduce+0x3e4>)
 800a390:	f04f 0300 	mov.w	r3, #0
 800a394:	ea00 0402 	and.w	r4, r0, r2
 800a398:	ea01 0503 	and.w	r5, r1, r3
 800a39c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800a3a0:	e9c3 4500 	strd	r4, r5, [r3]
    int64_t s1 = 2097151 & (load_4(s + 2) >> 5);
 800a3a4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3302      	adds	r3, #2
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff ff89 	bl	800a2c4 <load_4>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	f04f 0000 	mov.w	r0, #0
 800a3ba:	f04f 0100 	mov.w	r1, #0
 800a3be:	0950      	lsrs	r0, r2, #5
 800a3c0:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 800a3c4:	0959      	lsrs	r1, r3, #5
 800a3c6:	4ae2      	ldr	r2, [pc, #904]	; (800a750 <sc_reduce+0x3e4>)
 800a3c8:	f04f 0300 	mov.w	r3, #0
 800a3cc:	ea00 0802 	and.w	r8, r0, r2
 800a3d0:	ea01 0903 	and.w	r9, r1, r3
 800a3d4:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800a3d8:	e9c3 8900 	strd	r8, r9, [r3]
    int64_t s2 = 2097151 & (load_3(s + 5) >> 2);
 800a3dc:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3305      	adds	r3, #5
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7ff ff2c 	bl	800a242 <load_3>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	f04f 0000 	mov.w	r0, #0
 800a3f2:	f04f 0100 	mov.w	r1, #0
 800a3f6:	0890      	lsrs	r0, r2, #2
 800a3f8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800a3fc:	0899      	lsrs	r1, r3, #2
 800a3fe:	4ad4      	ldr	r2, [pc, #848]	; (800a750 <sc_reduce+0x3e4>)
 800a400:	f04f 0300 	mov.w	r3, #0
 800a404:	ea00 0a02 	and.w	sl, r0, r2
 800a408:	ea01 0b03 	and.w	fp, r1, r3
 800a40c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800a410:	e9c3 ab00 	strd	sl, fp, [r3]
    int64_t s3 = 2097151 & (load_4(s + 7) >> 7);
 800a414:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3307      	adds	r3, #7
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff ff51 	bl	800a2c4 <load_4>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	f04f 0000 	mov.w	r0, #0
 800a42a:	f04f 0100 	mov.w	r1, #0
 800a42e:	09d0      	lsrs	r0, r2, #7
 800a430:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800a434:	09d9      	lsrs	r1, r3, #7
 800a436:	4ac6      	ldr	r2, [pc, #792]	; (800a750 <sc_reduce+0x3e4>)
 800a438:	f04f 0300 	mov.w	r3, #0
 800a43c:	ea00 0402 	and.w	r4, r0, r2
 800a440:	f8c7 4620 	str.w	r4, [r7, #1568]	; 0x620
 800a444:	400b      	ands	r3, r1
 800a446:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 800a44a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800a44e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a452:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800a456:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s4 = 2097151 & (load_4(s + 10) >> 4);
 800a45a:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	330a      	adds	r3, #10
 800a462:	4618      	mov	r0, r3
 800a464:	f7ff ff2e 	bl	800a2c4 <load_4>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	f04f 0000 	mov.w	r0, #0
 800a470:	f04f 0100 	mov.w	r1, #0
 800a474:	0910      	lsrs	r0, r2, #4
 800a476:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800a47a:	0919      	lsrs	r1, r3, #4
 800a47c:	4ab4      	ldr	r2, [pc, #720]	; (800a750 <sc_reduce+0x3e4>)
 800a47e:	f04f 0300 	mov.w	r3, #0
 800a482:	ea00 0402 	and.w	r4, r0, r2
 800a486:	f8c7 4618 	str.w	r4, [r7, #1560]	; 0x618
 800a48a:	400b      	ands	r3, r1
 800a48c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800a490:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800a494:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a498:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800a49c:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s5 = 2097151 & (load_3(s + 13) >> 1);
 800a4a0:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	330d      	adds	r3, #13
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7ff feca 	bl	800a242 <load_3>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	f04f 0000 	mov.w	r0, #0
 800a4b6:	f04f 0100 	mov.w	r1, #0
 800a4ba:	0850      	lsrs	r0, r2, #1
 800a4bc:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800a4c0:	0859      	lsrs	r1, r3, #1
 800a4c2:	4aa3      	ldr	r2, [pc, #652]	; (800a750 <sc_reduce+0x3e4>)
 800a4c4:	f04f 0300 	mov.w	r3, #0
 800a4c8:	ea00 0402 	and.w	r4, r0, r2
 800a4cc:	f8c7 4610 	str.w	r4, [r7, #1552]	; 0x610
 800a4d0:	400b      	ands	r3, r1
 800a4d2:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 800a4d6:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800a4da:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4de:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800a4e2:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s6 = 2097151 & (load_4(s + 15) >> 6);
 800a4e6:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	330f      	adds	r3, #15
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff fee8 	bl	800a2c4 <load_4>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	f04f 0000 	mov.w	r0, #0
 800a4fc:	f04f 0100 	mov.w	r1, #0
 800a500:	0990      	lsrs	r0, r2, #6
 800a502:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800a506:	0999      	lsrs	r1, r3, #6
 800a508:	4a91      	ldr	r2, [pc, #580]	; (800a750 <sc_reduce+0x3e4>)
 800a50a:	f04f 0300 	mov.w	r3, #0
 800a50e:	ea00 0402 	and.w	r4, r0, r2
 800a512:	f8c7 4608 	str.w	r4, [r7, #1544]	; 0x608
 800a516:	400b      	ands	r3, r1
 800a518:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800a51c:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 800a520:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a524:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800a528:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s7 = 2097151 & (load_3(s + 18) >> 3);
 800a52c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3312      	adds	r3, #18
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff fe84 	bl	800a242 <load_3>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	f04f 0000 	mov.w	r0, #0
 800a542:	f04f 0100 	mov.w	r1, #0
 800a546:	08d0      	lsrs	r0, r2, #3
 800a548:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800a54c:	08d9      	lsrs	r1, r3, #3
 800a54e:	4a80      	ldr	r2, [pc, #512]	; (800a750 <sc_reduce+0x3e4>)
 800a550:	f04f 0300 	mov.w	r3, #0
 800a554:	ea00 0402 	and.w	r4, r0, r2
 800a558:	f8c7 4600 	str.w	r4, [r7, #1536]	; 0x600
 800a55c:	400b      	ands	r3, r1
 800a55e:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800a562:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a566:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a56a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800a56e:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s8 = 2097151 & load_3(s + 21);
 800a572:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3315      	adds	r3, #21
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7ff fe61 	bl	800a242 <load_3>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4610      	mov	r0, r2
 800a586:	4619      	mov	r1, r3
 800a588:	4a71      	ldr	r2, [pc, #452]	; (800a750 <sc_reduce+0x3e4>)
 800a58a:	f04f 0300 	mov.w	r3, #0
 800a58e:	ea00 0402 	and.w	r4, r0, r2
 800a592:	f8c7 45f8 	str.w	r4, [r7, #1528]	; 0x5f8
 800a596:	400b      	ands	r3, r1
 800a598:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800a59c:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800a5a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5a4:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800a5a8:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s9 = 2097151 & (load_4(s + 23) >> 5);
 800a5ac:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3317      	adds	r3, #23
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7ff fe85 	bl	800a2c4 <load_4>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	f04f 0000 	mov.w	r0, #0
 800a5c2:	f04f 0100 	mov.w	r1, #0
 800a5c6:	0950      	lsrs	r0, r2, #5
 800a5c8:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 800a5cc:	0959      	lsrs	r1, r3, #5
 800a5ce:	4a60      	ldr	r2, [pc, #384]	; (800a750 <sc_reduce+0x3e4>)
 800a5d0:	f04f 0300 	mov.w	r3, #0
 800a5d4:	ea00 0402 	and.w	r4, r0, r2
 800a5d8:	f8c7 45f0 	str.w	r4, [r7, #1520]	; 0x5f0
 800a5dc:	400b      	ands	r3, r1
 800a5de:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800a5e2:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a5e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5ea:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800a5ee:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s10 = 2097151 & (load_3(s + 26) >> 2);
 800a5f2:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	331a      	adds	r3, #26
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff fe21 	bl	800a242 <load_3>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	f04f 0000 	mov.w	r0, #0
 800a608:	f04f 0100 	mov.w	r1, #0
 800a60c:	0890      	lsrs	r0, r2, #2
 800a60e:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800a612:	0899      	lsrs	r1, r3, #2
 800a614:	4a4e      	ldr	r2, [pc, #312]	; (800a750 <sc_reduce+0x3e4>)
 800a616:	f04f 0300 	mov.w	r3, #0
 800a61a:	ea00 0402 	and.w	r4, r0, r2
 800a61e:	f8c7 45e8 	str.w	r4, [r7, #1512]	; 0x5e8
 800a622:	400b      	ands	r3, r1
 800a624:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 800a628:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800a62c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a630:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800a634:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s11 = 2097151 & (load_4(s + 28) >> 7);
 800a638:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	331c      	adds	r3, #28
 800a640:	4618      	mov	r0, r3
 800a642:	f7ff fe3f 	bl	800a2c4 <load_4>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	f04f 0000 	mov.w	r0, #0
 800a64e:	f04f 0100 	mov.w	r1, #0
 800a652:	09d0      	lsrs	r0, r2, #7
 800a654:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800a658:	09d9      	lsrs	r1, r3, #7
 800a65a:	4a3d      	ldr	r2, [pc, #244]	; (800a750 <sc_reduce+0x3e4>)
 800a65c:	f04f 0300 	mov.w	r3, #0
 800a660:	ea00 0402 	and.w	r4, r0, r2
 800a664:	f8c7 45e0 	str.w	r4, [r7, #1504]	; 0x5e0
 800a668:	400b      	ands	r3, r1
 800a66a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 800a66e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a672:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a676:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800a67a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s12 = 2097151 & (load_4(s + 31) >> 4);
 800a67e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	331f      	adds	r3, #31
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff fe1c 	bl	800a2c4 <load_4>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	f04f 0000 	mov.w	r0, #0
 800a694:	f04f 0100 	mov.w	r1, #0
 800a698:	0910      	lsrs	r0, r2, #4
 800a69a:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800a69e:	0919      	lsrs	r1, r3, #4
 800a6a0:	4a2b      	ldr	r2, [pc, #172]	; (800a750 <sc_reduce+0x3e4>)
 800a6a2:	f04f 0300 	mov.w	r3, #0
 800a6a6:	ea00 0402 	and.w	r4, r0, r2
 800a6aa:	f8c7 45d8 	str.w	r4, [r7, #1496]	; 0x5d8
 800a6ae:	400b      	ands	r3, r1
 800a6b0:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800a6b4:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800a6b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6bc:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800a6c0:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s13 = 2097151 & (load_3(s + 34) >> 1);
 800a6c4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3322      	adds	r3, #34	; 0x22
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7ff fdb8 	bl	800a242 <load_3>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	f04f 0000 	mov.w	r0, #0
 800a6da:	f04f 0100 	mov.w	r1, #0
 800a6de:	0850      	lsrs	r0, r2, #1
 800a6e0:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800a6e4:	0859      	lsrs	r1, r3, #1
 800a6e6:	4a1a      	ldr	r2, [pc, #104]	; (800a750 <sc_reduce+0x3e4>)
 800a6e8:	f04f 0300 	mov.w	r3, #0
 800a6ec:	ea00 0402 	and.w	r4, r0, r2
 800a6f0:	f8c7 45d0 	str.w	r4, [r7, #1488]	; 0x5d0
 800a6f4:	400b      	ands	r3, r1
 800a6f6:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800a6fa:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a6fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a702:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800a706:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s14 = 2097151 & (load_4(s + 36) >> 6);
 800a70a:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3324      	adds	r3, #36	; 0x24
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff fdd6 	bl	800a2c4 <load_4>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	f04f 0000 	mov.w	r0, #0
 800a720:	f04f 0100 	mov.w	r1, #0
 800a724:	0990      	lsrs	r0, r2, #6
 800a726:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800a72a:	0999      	lsrs	r1, r3, #6
 800a72c:	4a08      	ldr	r2, [pc, #32]	; (800a750 <sc_reduce+0x3e4>)
 800a72e:	f04f 0300 	mov.w	r3, #0
 800a732:	ea00 0402 	and.w	r4, r0, r2
 800a736:	f8c7 45c8 	str.w	r4, [r7, #1480]	; 0x5c8
 800a73a:	400b      	ands	r3, r1
 800a73c:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800a740:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800a744:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a748:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800a74c:	e002      	b.n	800a754 <sc_reduce+0x3e8>
 800a74e:	bf00      	nop
 800a750:	001fffff 	.word	0x001fffff
 800a754:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s15 = 2097151 & (load_3(s + 39) >> 3);
 800a758:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3327      	adds	r3, #39	; 0x27
 800a760:	4618      	mov	r0, r3
 800a762:	f7ff fd6e 	bl	800a242 <load_3>
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	f04f 0000 	mov.w	r0, #0
 800a76e:	f04f 0100 	mov.w	r1, #0
 800a772:	08d0      	lsrs	r0, r2, #3
 800a774:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800a778:	08d9      	lsrs	r1, r3, #3
 800a77a:	4aec      	ldr	r2, [pc, #944]	; (800ab2c <sc_reduce+0x7c0>)
 800a77c:	f04f 0300 	mov.w	r3, #0
 800a780:	ea00 0402 	and.w	r4, r0, r2
 800a784:	f8c7 45c0 	str.w	r4, [r7, #1472]	; 0x5c0
 800a788:	400b      	ands	r3, r1
 800a78a:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800a78e:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800a792:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a796:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 800a79a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s16 = 2097151 & load_3(s + 42);
 800a79e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	332a      	adds	r3, #42	; 0x2a
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7ff fd4b 	bl	800a242 <load_3>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4add      	ldr	r2, [pc, #884]	; (800ab2c <sc_reduce+0x7c0>)
 800a7b6:	f04f 0300 	mov.w	r3, #0
 800a7ba:	ea00 0402 	and.w	r4, r0, r2
 800a7be:	f8c7 45b8 	str.w	r4, [r7, #1464]	; 0x5b8
 800a7c2:	400b      	ands	r3, r1
 800a7c4:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800a7c8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800a7cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7d0:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800a7d4:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s17 = 2097151 & (load_4(s + 44) >> 5);
 800a7d8:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	332c      	adds	r3, #44	; 0x2c
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7ff fd6f 	bl	800a2c4 <load_4>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	f04f 0000 	mov.w	r0, #0
 800a7ee:	f04f 0100 	mov.w	r1, #0
 800a7f2:	0950      	lsrs	r0, r2, #5
 800a7f4:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 800a7f8:	0959      	lsrs	r1, r3, #5
 800a7fa:	4acc      	ldr	r2, [pc, #816]	; (800ab2c <sc_reduce+0x7c0>)
 800a7fc:	f04f 0300 	mov.w	r3, #0
 800a800:	ea00 0402 	and.w	r4, r0, r2
 800a804:	f8c7 45b0 	str.w	r4, [r7, #1456]	; 0x5b0
 800a808:	400b      	ands	r3, r1
 800a80a:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800a80e:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800a812:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a816:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800a81a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s18 = 2097151 & (load_3(s + 47) >> 2);
 800a81e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	332f      	adds	r3, #47	; 0x2f
 800a826:	4618      	mov	r0, r3
 800a828:	f7ff fd0b 	bl	800a242 <load_3>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	f04f 0000 	mov.w	r0, #0
 800a834:	f04f 0100 	mov.w	r1, #0
 800a838:	0890      	lsrs	r0, r2, #2
 800a83a:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800a83e:	0899      	lsrs	r1, r3, #2
 800a840:	4aba      	ldr	r2, [pc, #744]	; (800ab2c <sc_reduce+0x7c0>)
 800a842:	f04f 0300 	mov.w	r3, #0
 800a846:	ea00 0402 	and.w	r4, r0, r2
 800a84a:	f8c7 45a8 	str.w	r4, [r7, #1448]	; 0x5a8
 800a84e:	400b      	ands	r3, r1
 800a850:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800a854:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800a858:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a85c:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 800a860:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s19 = 2097151 & (load_4(s + 49) >> 7);
 800a864:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3331      	adds	r3, #49	; 0x31
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7ff fd29 	bl	800a2c4 <load_4>
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	f04f 0000 	mov.w	r0, #0
 800a87a:	f04f 0100 	mov.w	r1, #0
 800a87e:	09d0      	lsrs	r0, r2, #7
 800a880:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800a884:	09d9      	lsrs	r1, r3, #7
 800a886:	4aa9      	ldr	r2, [pc, #676]	; (800ab2c <sc_reduce+0x7c0>)
 800a888:	f04f 0300 	mov.w	r3, #0
 800a88c:	ea00 0402 	and.w	r4, r0, r2
 800a890:	f8c7 45a0 	str.w	r4, [r7, #1440]	; 0x5a0
 800a894:	400b      	ands	r3, r1
 800a896:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800a89a:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a89e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8a2:	f507 62f2 	add.w	r2, r7, #1936	; 0x790
 800a8a6:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s20 = 2097151 & (load_4(s + 52) >> 4);
 800a8aa:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3334      	adds	r3, #52	; 0x34
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff fd06 	bl	800a2c4 <load_4>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	f04f 0000 	mov.w	r0, #0
 800a8c0:	f04f 0100 	mov.w	r1, #0
 800a8c4:	0910      	lsrs	r0, r2, #4
 800a8c6:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800a8ca:	0919      	lsrs	r1, r3, #4
 800a8cc:	4a97      	ldr	r2, [pc, #604]	; (800ab2c <sc_reduce+0x7c0>)
 800a8ce:	f04f 0300 	mov.w	r3, #0
 800a8d2:	ea00 0402 	and.w	r4, r0, r2
 800a8d6:	f8c7 4598 	str.w	r4, [r7, #1432]	; 0x598
 800a8da:	400b      	ands	r3, r1
 800a8dc:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800a8e0:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800a8e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8e8:	f507 62f1 	add.w	r2, r7, #1928	; 0x788
 800a8ec:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s21 = 2097151 & (load_3(s + 55) >> 1);
 800a8f0:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3337      	adds	r3, #55	; 0x37
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7ff fca2 	bl	800a242 <load_3>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	f04f 0000 	mov.w	r0, #0
 800a906:	f04f 0100 	mov.w	r1, #0
 800a90a:	0850      	lsrs	r0, r2, #1
 800a90c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800a910:	0859      	lsrs	r1, r3, #1
 800a912:	4a86      	ldr	r2, [pc, #536]	; (800ab2c <sc_reduce+0x7c0>)
 800a914:	f04f 0300 	mov.w	r3, #0
 800a918:	ea00 0402 	and.w	r4, r0, r2
 800a91c:	f8c7 4590 	str.w	r4, [r7, #1424]	; 0x590
 800a920:	400b      	ands	r3, r1
 800a922:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800a926:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a92a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a92e:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800a932:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s22 = 2097151 & (load_4(s + 57) >> 6);
 800a936:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3339      	adds	r3, #57	; 0x39
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff fcc0 	bl	800a2c4 <load_4>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	f04f 0000 	mov.w	r0, #0
 800a94c:	f04f 0100 	mov.w	r1, #0
 800a950:	0990      	lsrs	r0, r2, #6
 800a952:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800a956:	0999      	lsrs	r1, r3, #6
 800a958:	4a74      	ldr	r2, [pc, #464]	; (800ab2c <sc_reduce+0x7c0>)
 800a95a:	f04f 0300 	mov.w	r3, #0
 800a95e:	ea00 0402 	and.w	r4, r0, r2
 800a962:	f8c7 4588 	str.w	r4, [r7, #1416]	; 0x588
 800a966:	400b      	ands	r3, r1
 800a968:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800a96c:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800a970:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a974:	f507 62ef 	add.w	r2, r7, #1912	; 0x778
 800a978:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s23 = (load_4(s + 60) >> 3);
 800a97c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	333c      	adds	r3, #60	; 0x3c
 800a984:	4618      	mov	r0, r3
 800a986:	f7ff fc9d 	bl	800a2c4 <load_4>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	f04f 0000 	mov.w	r0, #0
 800a992:	f04f 0100 	mov.w	r1, #0
 800a996:	08d0      	lsrs	r0, r2, #3
 800a998:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800a99c:	08d9      	lsrs	r1, r3, #3
 800a99e:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800a9a2:	e9c3 0100 	strd	r0, r1, [r3]
    int64_t carry13;
    int64_t carry14;
    int64_t carry15;
    int64_t carry16;

    s11 += s23 * 666643;
 800a9a6:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800a9aa:	4b61      	ldr	r3, [pc, #388]	; (800ab30 <sc_reduce+0x7c4>)
 800a9ac:	fb03 f102 	mul.w	r1, r3, r2
 800a9b0:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	fb03 f302 	mul.w	r3, r3, r2
 800a9ba:	18cc      	adds	r4, r1, r3
 800a9bc:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800a9c0:	4b5b      	ldr	r3, [pc, #364]	; (800ab30 <sc_reduce+0x7c4>)
 800a9c2:	fba2 0103 	umull	r0, r1, r2, r3
 800a9c6:	1863      	adds	r3, r4, r1
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	1814      	adds	r4, r2, r0
 800a9d4:	f8c7 4580 	str.w	r4, [r7, #1408]	; 0x580
 800a9d8:	414b      	adcs	r3, r1
 800a9da:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800a9de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800a9e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9e6:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800a9ea:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s23 * 470296;
 800a9ee:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800a9f2:	4b50      	ldr	r3, [pc, #320]	; (800ab34 <sc_reduce+0x7c8>)
 800a9f4:	fb03 f102 	mul.w	r1, r3, r2
 800a9f8:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	fb03 f302 	mul.w	r3, r3, r2
 800aa02:	18cc      	adds	r4, r1, r3
 800aa04:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800aa08:	4b4a      	ldr	r3, [pc, #296]	; (800ab34 <sc_reduce+0x7c8>)
 800aa0a:	fba2 0103 	umull	r0, r1, r2, r3
 800aa0e:	1863      	adds	r3, r4, r1
 800aa10:	4619      	mov	r1, r3
 800aa12:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	1814      	adds	r4, r2, r0
 800aa1c:	f8c7 4578 	str.w	r4, [r7, #1400]	; 0x578
 800aa20:	414b      	adcs	r3, r1
 800aa22:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800aa26:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800aa2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa2e:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800aa32:	e9c2 3400 	strd	r3, r4, [r2]
    s13 += s23 * 654183;
 800aa36:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800aa3a:	4b3f      	ldr	r3, [pc, #252]	; (800ab38 <sc_reduce+0x7cc>)
 800aa3c:	fb03 f102 	mul.w	r1, r3, r2
 800aa40:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800aa44:	2300      	movs	r3, #0
 800aa46:	fb03 f302 	mul.w	r3, r3, r2
 800aa4a:	18cc      	adds	r4, r1, r3
 800aa4c:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800aa50:	4b39      	ldr	r3, [pc, #228]	; (800ab38 <sc_reduce+0x7cc>)
 800aa52:	fba2 0103 	umull	r0, r1, r2, r3
 800aa56:	1863      	adds	r3, r4, r1
 800aa58:	4619      	mov	r1, r3
 800aa5a:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	1814      	adds	r4, r2, r0
 800aa64:	f8c7 4570 	str.w	r4, [r7, #1392]	; 0x570
 800aa68:	414b      	adcs	r3, r1
 800aa6a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800aa6e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800aa72:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa76:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800aa7a:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= s23 * 997805;
 800aa7e:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800aa82:	4b2e      	ldr	r3, [pc, #184]	; (800ab3c <sc_reduce+0x7d0>)
 800aa84:	fb03 f102 	mul.w	r1, r3, r2
 800aa88:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800aa8c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa90:	fb03 f302 	mul.w	r3, r3, r2
 800aa94:	18cc      	adds	r4, r1, r3
 800aa96:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800aa9a:	4b28      	ldr	r3, [pc, #160]	; (800ab3c <sc_reduce+0x7d0>)
 800aa9c:	fba2 0103 	umull	r0, r1, r2, r3
 800aaa0:	1863      	adds	r3, r4, r1
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	1814      	adds	r4, r2, r0
 800aaae:	f8c7 4568 	str.w	r4, [r7, #1384]	; 0x568
 800aab2:	414b      	adcs	r3, r1
 800aab4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800aab8:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800aabc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aac0:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800aac4:	e9c2 3400 	strd	r3, r4, [r2]
    s15 += s23 * 136657;
 800aac8:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800aacc:	4b1c      	ldr	r3, [pc, #112]	; (800ab40 <sc_reduce+0x7d4>)
 800aace:	fb03 f102 	mul.w	r1, r3, r2
 800aad2:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800aad6:	2300      	movs	r3, #0
 800aad8:	fb03 f302 	mul.w	r3, r3, r2
 800aadc:	18cc      	adds	r4, r1, r3
 800aade:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800aae2:	4b17      	ldr	r3, [pc, #92]	; (800ab40 <sc_reduce+0x7d4>)
 800aae4:	fba2 0103 	umull	r0, r1, r2, r3
 800aae8:	1863      	adds	r3, r4, r1
 800aaea:	4619      	mov	r1, r3
 800aaec:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	1814      	adds	r4, r2, r0
 800aaf6:	f8c7 4560 	str.w	r4, [r7, #1376]	; 0x560
 800aafa:	414b      	adcs	r3, r1
 800aafc:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 800ab00:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800ab04:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab08:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 800ab0c:	e9c2 3400 	strd	r3, r4, [r2]
    s16 -= s23 * 683901;
 800ab10:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800ab14:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <sc_reduce+0x7d8>)
 800ab16:	fb03 f102 	mul.w	r1, r3, r2
 800ab1a:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800ab1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab22:	fb03 f302 	mul.w	r3, r3, r2
 800ab26:	18cc      	adds	r4, r1, r3
 800ab28:	e00e      	b.n	800ab48 <sc_reduce+0x7dc>
 800ab2a:	bf00      	nop
 800ab2c:	001fffff 	.word	0x001fffff
 800ab30:	000a2c13 	.word	0x000a2c13
 800ab34:	00072d18 	.word	0x00072d18
 800ab38:	0009fb67 	.word	0x0009fb67
 800ab3c:	fff0c653 	.word	0xfff0c653
 800ab40:	000215d1 	.word	0x000215d1
 800ab44:	fff59083 	.word	0xfff59083
 800ab48:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800ab4c:	4be5      	ldr	r3, [pc, #916]	; (800aee4 <sc_reduce+0xb78>)
 800ab4e:	fba2 0103 	umull	r0, r1, r2, r3
 800ab52:	1863      	adds	r3, r4, r1
 800ab54:	4619      	mov	r1, r3
 800ab56:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	1814      	adds	r4, r2, r0
 800ab60:	f8c7 4558 	str.w	r4, [r7, #1368]	; 0x558
 800ab64:	414b      	adcs	r3, r1
 800ab66:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 800ab6a:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800ab6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab72:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800ab76:	e9c2 3400 	strd	r3, r4, [r2]
    s23 = 0;
 800ab7a:	f04f 0200 	mov.w	r2, #0
 800ab7e:	f04f 0300 	mov.w	r3, #0
 800ab82:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 800ab86:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += s22 * 666643;
 800ab8a:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800ab8e:	4bd6      	ldr	r3, [pc, #856]	; (800aee8 <sc_reduce+0xb7c>)
 800ab90:	fb03 f102 	mul.w	r1, r3, r2
 800ab94:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800ab98:	2300      	movs	r3, #0
 800ab9a:	fb03 f302 	mul.w	r3, r3, r2
 800ab9e:	18cc      	adds	r4, r1, r3
 800aba0:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800aba4:	4bd0      	ldr	r3, [pc, #832]	; (800aee8 <sc_reduce+0xb7c>)
 800aba6:	fba2 0103 	umull	r0, r1, r2, r3
 800abaa:	1863      	adds	r3, r4, r1
 800abac:	4619      	mov	r1, r3
 800abae:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	1814      	adds	r4, r2, r0
 800abb8:	f8c7 4550 	str.w	r4, [r7, #1360]	; 0x550
 800abbc:	414b      	adcs	r3, r1
 800abbe:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 800abc2:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800abc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800abca:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800abce:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s22 * 470296;
 800abd2:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800abd6:	4bc5      	ldr	r3, [pc, #788]	; (800aeec <sc_reduce+0xb80>)
 800abd8:	fb03 f102 	mul.w	r1, r3, r2
 800abdc:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800abe0:	2300      	movs	r3, #0
 800abe2:	fb03 f302 	mul.w	r3, r3, r2
 800abe6:	18cc      	adds	r4, r1, r3
 800abe8:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800abec:	4bbf      	ldr	r3, [pc, #764]	; (800aeec <sc_reduce+0xb80>)
 800abee:	fba2 0103 	umull	r0, r1, r2, r3
 800abf2:	1863      	adds	r3, r4, r1
 800abf4:	4619      	mov	r1, r3
 800abf6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	1814      	adds	r4, r2, r0
 800ac00:	f8c7 4548 	str.w	r4, [r7, #1352]	; 0x548
 800ac04:	414b      	adcs	r3, r1
 800ac06:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 800ac0a:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800ac0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac12:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800ac16:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s22 * 654183;
 800ac1a:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800ac1e:	4bb4      	ldr	r3, [pc, #720]	; (800aef0 <sc_reduce+0xb84>)
 800ac20:	fb03 f102 	mul.w	r1, r3, r2
 800ac24:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800ac28:	2300      	movs	r3, #0
 800ac2a:	fb03 f302 	mul.w	r3, r3, r2
 800ac2e:	18cc      	adds	r4, r1, r3
 800ac30:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800ac34:	4bae      	ldr	r3, [pc, #696]	; (800aef0 <sc_reduce+0xb84>)
 800ac36:	fba2 0103 	umull	r0, r1, r2, r3
 800ac3a:	1863      	adds	r3, r4, r1
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac46:	1814      	adds	r4, r2, r0
 800ac48:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
 800ac4c:	414b      	adcs	r3, r1
 800ac4e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800ac52:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800ac56:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac5a:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800ac5e:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= s22 * 997805;
 800ac62:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800ac66:	4ba3      	ldr	r3, [pc, #652]	; (800aef4 <sc_reduce+0xb88>)
 800ac68:	fb03 f102 	mul.w	r1, r3, r2
 800ac6c:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800ac70:	f04f 33ff 	mov.w	r3, #4294967295
 800ac74:	fb03 f302 	mul.w	r3, r3, r2
 800ac78:	18cc      	adds	r4, r1, r3
 800ac7a:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800ac7e:	4b9d      	ldr	r3, [pc, #628]	; (800aef4 <sc_reduce+0xb88>)
 800ac80:	fba2 0103 	umull	r0, r1, r2, r3
 800ac84:	1863      	adds	r3, r4, r1
 800ac86:	4619      	mov	r1, r3
 800ac88:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	1814      	adds	r4, r2, r0
 800ac92:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
 800ac96:	414b      	adcs	r3, r1
 800ac98:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800ac9c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800aca0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aca4:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800aca8:	e9c2 3400 	strd	r3, r4, [r2]
    s14 += s22 * 136657;
 800acac:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800acb0:	4b91      	ldr	r3, [pc, #580]	; (800aef8 <sc_reduce+0xb8c>)
 800acb2:	fb03 f102 	mul.w	r1, r3, r2
 800acb6:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800acba:	2300      	movs	r3, #0
 800acbc:	fb03 f302 	mul.w	r3, r3, r2
 800acc0:	18cc      	adds	r4, r1, r3
 800acc2:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800acc6:	4b8c      	ldr	r3, [pc, #560]	; (800aef8 <sc_reduce+0xb8c>)
 800acc8:	fba2 0103 	umull	r0, r1, r2, r3
 800accc:	1863      	adds	r3, r4, r1
 800acce:	4619      	mov	r1, r3
 800acd0:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	1814      	adds	r4, r2, r0
 800acda:	f8c7 4530 	str.w	r4, [r7, #1328]	; 0x530
 800acde:	414b      	adcs	r3, r1
 800ace0:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800ace4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800ace8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acec:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800acf0:	e9c2 3400 	strd	r3, r4, [r2]
    s15 -= s22 * 683901;
 800acf4:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800acf8:	4b7a      	ldr	r3, [pc, #488]	; (800aee4 <sc_reduce+0xb78>)
 800acfa:	fb03 f102 	mul.w	r1, r3, r2
 800acfe:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800ad02:	f04f 33ff 	mov.w	r3, #4294967295
 800ad06:	fb03 f302 	mul.w	r3, r3, r2
 800ad0a:	18cc      	adds	r4, r1, r3
 800ad0c:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800ad10:	4b74      	ldr	r3, [pc, #464]	; (800aee4 <sc_reduce+0xb78>)
 800ad12:	fba2 0103 	umull	r0, r1, r2, r3
 800ad16:	1863      	adds	r3, r4, r1
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	1814      	adds	r4, r2, r0
 800ad24:	f8c7 4528 	str.w	r4, [r7, #1320]	; 0x528
 800ad28:	414b      	adcs	r3, r1
 800ad2a:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800ad2e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800ad32:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad36:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 800ad3a:	e9c2 3400 	strd	r3, r4, [r2]
    s22 = 0;
 800ad3e:	f04f 0200 	mov.w	r2, #0
 800ad42:	f04f 0300 	mov.w	r3, #0
 800ad46:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 800ad4a:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += s21 * 666643;
 800ad4e:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800ad52:	4b65      	ldr	r3, [pc, #404]	; (800aee8 <sc_reduce+0xb7c>)
 800ad54:	fb03 f102 	mul.w	r1, r3, r2
 800ad58:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	fb03 f302 	mul.w	r3, r3, r2
 800ad62:	18cc      	adds	r4, r1, r3
 800ad64:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800ad68:	4b5f      	ldr	r3, [pc, #380]	; (800aee8 <sc_reduce+0xb7c>)
 800ad6a:	fba2 0103 	umull	r0, r1, r2, r3
 800ad6e:	1863      	adds	r3, r4, r1
 800ad70:	4619      	mov	r1, r3
 800ad72:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	1814      	adds	r4, r2, r0
 800ad7c:	f8c7 4520 	str.w	r4, [r7, #1312]	; 0x520
 800ad80:	414b      	adcs	r3, r1
 800ad82:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800ad86:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800ad8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad8e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800ad92:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s21 * 470296;
 800ad96:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800ad9a:	4b54      	ldr	r3, [pc, #336]	; (800aeec <sc_reduce+0xb80>)
 800ad9c:	fb03 f102 	mul.w	r1, r3, r2
 800ada0:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800ada4:	2300      	movs	r3, #0
 800ada6:	fb03 f302 	mul.w	r3, r3, r2
 800adaa:	18cc      	adds	r4, r1, r3
 800adac:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800adb0:	4b4e      	ldr	r3, [pc, #312]	; (800aeec <sc_reduce+0xb80>)
 800adb2:	fba2 0103 	umull	r0, r1, r2, r3
 800adb6:	1863      	adds	r3, r4, r1
 800adb8:	4619      	mov	r1, r3
 800adba:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	1814      	adds	r4, r2, r0
 800adc4:	f8c7 4518 	str.w	r4, [r7, #1304]	; 0x518
 800adc8:	414b      	adcs	r3, r1
 800adca:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800adce:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800add2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800add6:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800adda:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s21 * 654183;
 800adde:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800ade2:	4b43      	ldr	r3, [pc, #268]	; (800aef0 <sc_reduce+0xb84>)
 800ade4:	fb03 f102 	mul.w	r1, r3, r2
 800ade8:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800adec:	2300      	movs	r3, #0
 800adee:	fb03 f302 	mul.w	r3, r3, r2
 800adf2:	18cc      	adds	r4, r1, r3
 800adf4:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800adf8:	4b3d      	ldr	r3, [pc, #244]	; (800aef0 <sc_reduce+0xb84>)
 800adfa:	fba2 0103 	umull	r0, r1, r2, r3
 800adfe:	1863      	adds	r3, r4, r1
 800ae00:	4619      	mov	r1, r3
 800ae02:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	1814      	adds	r4, r2, r0
 800ae0c:	f8c7 4510 	str.w	r4, [r7, #1296]	; 0x510
 800ae10:	414b      	adcs	r3, r1
 800ae12:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800ae16:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800ae1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae1e:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800ae22:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= s21 * 997805;
 800ae26:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800ae2a:	4b32      	ldr	r3, [pc, #200]	; (800aef4 <sc_reduce+0xb88>)
 800ae2c:	fb03 f102 	mul.w	r1, r3, r2
 800ae30:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800ae34:	f04f 33ff 	mov.w	r3, #4294967295
 800ae38:	fb03 f302 	mul.w	r3, r3, r2
 800ae3c:	18cc      	adds	r4, r1, r3
 800ae3e:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800ae42:	4b2c      	ldr	r3, [pc, #176]	; (800aef4 <sc_reduce+0xb88>)
 800ae44:	fba2 0103 	umull	r0, r1, r2, r3
 800ae48:	1863      	adds	r3, r4, r1
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	1814      	adds	r4, r2, r0
 800ae56:	f8c7 4508 	str.w	r4, [r7, #1288]	; 0x508
 800ae5a:	414b      	adcs	r3, r1
 800ae5c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800ae60:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800ae64:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae68:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800ae6c:	e9c2 3400 	strd	r3, r4, [r2]
    s13 += s21 * 136657;
 800ae70:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800ae74:	4b20      	ldr	r3, [pc, #128]	; (800aef8 <sc_reduce+0xb8c>)
 800ae76:	fb03 f102 	mul.w	r1, r3, r2
 800ae7a:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800ae7e:	2300      	movs	r3, #0
 800ae80:	fb03 f302 	mul.w	r3, r3, r2
 800ae84:	18cc      	adds	r4, r1, r3
 800ae86:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800ae8a:	4b1b      	ldr	r3, [pc, #108]	; (800aef8 <sc_reduce+0xb8c>)
 800ae8c:	fba2 0103 	umull	r0, r1, r2, r3
 800ae90:	1863      	adds	r3, r4, r1
 800ae92:	4619      	mov	r1, r3
 800ae94:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	1814      	adds	r4, r2, r0
 800ae9e:	f8c7 4500 	str.w	r4, [r7, #1280]	; 0x500
 800aea2:	414b      	adcs	r3, r1
 800aea4:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800aea8:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800aeac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aeb0:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800aeb4:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= s21 * 683901;
 800aeb8:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800aebc:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <sc_reduce+0xb78>)
 800aebe:	fb03 f102 	mul.w	r1, r3, r2
 800aec2:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800aec6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeca:	fb03 f302 	mul.w	r3, r3, r2
 800aece:	18cc      	adds	r4, r1, r3
 800aed0:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800aed4:	4b03      	ldr	r3, [pc, #12]	; (800aee4 <sc_reduce+0xb78>)
 800aed6:	fba2 0103 	umull	r0, r1, r2, r3
 800aeda:	1863      	adds	r3, r4, r1
 800aedc:	4619      	mov	r1, r3
 800aede:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800aee2:	e00b      	b.n	800aefc <sc_reduce+0xb90>
 800aee4:	fff59083 	.word	0xfff59083
 800aee8:	000a2c13 	.word	0x000a2c13
 800aeec:	00072d18 	.word	0x00072d18
 800aef0:	0009fb67 	.word	0x0009fb67
 800aef4:	fff0c653 	.word	0xfff0c653
 800aef8:	000215d1 	.word	0x000215d1
 800aefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af00:	1814      	adds	r4, r2, r0
 800af02:	f8c7 44f8 	str.w	r4, [r7, #1272]	; 0x4f8
 800af06:	414b      	adcs	r3, r1
 800af08:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800af0c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800af10:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af14:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800af18:	e9c2 3400 	strd	r3, r4, [r2]
    s21 = 0;
 800af1c:	f04f 0200 	mov.w	r2, #0
 800af20:	f04f 0300 	mov.w	r3, #0
 800af24:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 800af28:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += s20 * 666643;
 800af2c:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800af30:	4be5      	ldr	r3, [pc, #916]	; (800b2c8 <sc_reduce+0xf5c>)
 800af32:	fb03 f102 	mul.w	r1, r3, r2
 800af36:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800af3a:	2300      	movs	r3, #0
 800af3c:	fb03 f302 	mul.w	r3, r3, r2
 800af40:	18cc      	adds	r4, r1, r3
 800af42:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800af46:	4be0      	ldr	r3, [pc, #896]	; (800b2c8 <sc_reduce+0xf5c>)
 800af48:	fba2 0103 	umull	r0, r1, r2, r3
 800af4c:	1863      	adds	r3, r4, r1
 800af4e:	4619      	mov	r1, r3
 800af50:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	1814      	adds	r4, r2, r0
 800af5a:	f8c7 44f0 	str.w	r4, [r7, #1264]	; 0x4f0
 800af5e:	414b      	adcs	r3, r1
 800af60:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 800af64:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800af68:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af6c:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800af70:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s20 * 470296;
 800af74:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800af78:	4bd4      	ldr	r3, [pc, #848]	; (800b2cc <sc_reduce+0xf60>)
 800af7a:	fb03 f102 	mul.w	r1, r3, r2
 800af7e:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800af82:	2300      	movs	r3, #0
 800af84:	fb03 f302 	mul.w	r3, r3, r2
 800af88:	18cc      	adds	r4, r1, r3
 800af8a:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800af8e:	4bcf      	ldr	r3, [pc, #828]	; (800b2cc <sc_reduce+0xf60>)
 800af90:	fba2 0103 	umull	r0, r1, r2, r3
 800af94:	1863      	adds	r3, r4, r1
 800af96:	4619      	mov	r1, r3
 800af98:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa0:	1814      	adds	r4, r2, r0
 800afa2:	f8c7 44e8 	str.w	r4, [r7, #1256]	; 0x4e8
 800afa6:	414b      	adcs	r3, r1
 800afa8:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800afac:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800afb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afb4:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800afb8:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s20 * 654183;
 800afbc:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800afc0:	4bc3      	ldr	r3, [pc, #780]	; (800b2d0 <sc_reduce+0xf64>)
 800afc2:	fb03 f102 	mul.w	r1, r3, r2
 800afc6:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800afca:	2300      	movs	r3, #0
 800afcc:	fb03 f302 	mul.w	r3, r3, r2
 800afd0:	18cc      	adds	r4, r1, r3
 800afd2:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800afd6:	4bbe      	ldr	r3, [pc, #760]	; (800b2d0 <sc_reduce+0xf64>)
 800afd8:	fba2 0103 	umull	r0, r1, r2, r3
 800afdc:	1863      	adds	r3, r4, r1
 800afde:	4619      	mov	r1, r3
 800afe0:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe8:	1814      	adds	r4, r2, r0
 800afea:	f8c7 44e0 	str.w	r4, [r7, #1248]	; 0x4e0
 800afee:	414b      	adcs	r3, r1
 800aff0:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800aff4:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800aff8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800affc:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800b000:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= s20 * 997805;
 800b004:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800b008:	4bb2      	ldr	r3, [pc, #712]	; (800b2d4 <sc_reduce+0xf68>)
 800b00a:	fb03 f102 	mul.w	r1, r3, r2
 800b00e:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b012:	f04f 33ff 	mov.w	r3, #4294967295
 800b016:	fb03 f302 	mul.w	r3, r3, r2
 800b01a:	18cc      	adds	r4, r1, r3
 800b01c:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b020:	4bac      	ldr	r3, [pc, #688]	; (800b2d4 <sc_reduce+0xf68>)
 800b022:	fba2 0103 	umull	r0, r1, r2, r3
 800b026:	1863      	adds	r3, r4, r1
 800b028:	4619      	mov	r1, r3
 800b02a:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	1814      	adds	r4, r2, r0
 800b034:	f8c7 44d8 	str.w	r4, [r7, #1240]	; 0x4d8
 800b038:	414b      	adcs	r3, r1
 800b03a:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800b03e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800b042:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b046:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800b04a:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s20 * 136657;
 800b04e:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800b052:	4ba1      	ldr	r3, [pc, #644]	; (800b2d8 <sc_reduce+0xf6c>)
 800b054:	fb03 f102 	mul.w	r1, r3, r2
 800b058:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b05c:	2300      	movs	r3, #0
 800b05e:	fb03 f302 	mul.w	r3, r3, r2
 800b062:	18cc      	adds	r4, r1, r3
 800b064:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b068:	4b9b      	ldr	r3, [pc, #620]	; (800b2d8 <sc_reduce+0xf6c>)
 800b06a:	fba2 0103 	umull	r0, r1, r2, r3
 800b06e:	1863      	adds	r3, r4, r1
 800b070:	4619      	mov	r1, r3
 800b072:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800b076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07a:	1814      	adds	r4, r2, r0
 800b07c:	f8c7 44d0 	str.w	r4, [r7, #1232]	; 0x4d0
 800b080:	414b      	adcs	r3, r1
 800b082:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800b086:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800b08a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b08e:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800b092:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= s20 * 683901;
 800b096:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800b09a:	4b90      	ldr	r3, [pc, #576]	; (800b2dc <sc_reduce+0xf70>)
 800b09c:	fb03 f102 	mul.w	r1, r3, r2
 800b0a0:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b0a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a8:	fb03 f302 	mul.w	r3, r3, r2
 800b0ac:	18cc      	adds	r4, r1, r3
 800b0ae:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b0b2:	4b8a      	ldr	r3, [pc, #552]	; (800b2dc <sc_reduce+0xf70>)
 800b0b4:	fba2 0103 	umull	r0, r1, r2, r3
 800b0b8:	1863      	adds	r3, r4, r1
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	1814      	adds	r4, r2, r0
 800b0c6:	f8c7 44c8 	str.w	r4, [r7, #1224]	; 0x4c8
 800b0ca:	414b      	adcs	r3, r1
 800b0cc:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800b0d0:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800b0d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0d8:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800b0dc:	e9c2 3400 	strd	r3, r4, [r2]
    s20 = 0;
 800b0e0:	f04f 0200 	mov.w	r2, #0
 800b0e4:	f04f 0300 	mov.w	r3, #0
 800b0e8:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 800b0ec:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += s19 * 666643;
 800b0f0:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b0f4:	4b74      	ldr	r3, [pc, #464]	; (800b2c8 <sc_reduce+0xf5c>)
 800b0f6:	fb03 f102 	mul.w	r1, r3, r2
 800b0fa:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b0fe:	2300      	movs	r3, #0
 800b100:	fb03 f302 	mul.w	r3, r3, r2
 800b104:	18cc      	adds	r4, r1, r3
 800b106:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b10a:	4b6f      	ldr	r3, [pc, #444]	; (800b2c8 <sc_reduce+0xf5c>)
 800b10c:	fba2 0103 	umull	r0, r1, r2, r3
 800b110:	1863      	adds	r3, r4, r1
 800b112:	4619      	mov	r1, r3
 800b114:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800b118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11c:	1814      	adds	r4, r2, r0
 800b11e:	f8c7 44c0 	str.w	r4, [r7, #1216]	; 0x4c0
 800b122:	414b      	adcs	r3, r1
 800b124:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800b128:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800b12c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b130:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800b134:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s19 * 470296;
 800b138:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b13c:	4b63      	ldr	r3, [pc, #396]	; (800b2cc <sc_reduce+0xf60>)
 800b13e:	fb03 f102 	mul.w	r1, r3, r2
 800b142:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b146:	2300      	movs	r3, #0
 800b148:	fb03 f302 	mul.w	r3, r3, r2
 800b14c:	18cc      	adds	r4, r1, r3
 800b14e:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b152:	4b5e      	ldr	r3, [pc, #376]	; (800b2cc <sc_reduce+0xf60>)
 800b154:	fba2 0103 	umull	r0, r1, r2, r3
 800b158:	1863      	adds	r3, r4, r1
 800b15a:	4619      	mov	r1, r3
 800b15c:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800b160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b164:	1814      	adds	r4, r2, r0
 800b166:	f8c7 44b8 	str.w	r4, [r7, #1208]	; 0x4b8
 800b16a:	414b      	adcs	r3, r1
 800b16c:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800b170:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800b174:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b178:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800b17c:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s19 * 654183;
 800b180:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b184:	4b52      	ldr	r3, [pc, #328]	; (800b2d0 <sc_reduce+0xf64>)
 800b186:	fb03 f102 	mul.w	r1, r3, r2
 800b18a:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b18e:	2300      	movs	r3, #0
 800b190:	fb03 f302 	mul.w	r3, r3, r2
 800b194:	18cc      	adds	r4, r1, r3
 800b196:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b19a:	4b4d      	ldr	r3, [pc, #308]	; (800b2d0 <sc_reduce+0xf64>)
 800b19c:	fba2 0103 	umull	r0, r1, r2, r3
 800b1a0:	1863      	adds	r3, r4, r1
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800b1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ac:	1814      	adds	r4, r2, r0
 800b1ae:	f8c7 44b0 	str.w	r4, [r7, #1200]	; 0x4b0
 800b1b2:	414b      	adcs	r3, r1
 800b1b4:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800b1b8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800b1bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1c0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800b1c4:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= s19 * 997805;
 800b1c8:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b1cc:	4b41      	ldr	r3, [pc, #260]	; (800b2d4 <sc_reduce+0xf68>)
 800b1ce:	fb03 f102 	mul.w	r1, r3, r2
 800b1d2:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1da:	fb03 f302 	mul.w	r3, r3, r2
 800b1de:	18cc      	adds	r4, r1, r3
 800b1e0:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b1e4:	4b3b      	ldr	r3, [pc, #236]	; (800b2d4 <sc_reduce+0xf68>)
 800b1e6:	fba2 0103 	umull	r0, r1, r2, r3
 800b1ea:	1863      	adds	r3, r4, r1
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	1814      	adds	r4, r2, r0
 800b1f8:	f8c7 44a8 	str.w	r4, [r7, #1192]	; 0x4a8
 800b1fc:	414b      	adcs	r3, r1
 800b1fe:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800b202:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800b206:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b20a:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800b20e:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s19 * 136657;
 800b212:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b216:	4b30      	ldr	r3, [pc, #192]	; (800b2d8 <sc_reduce+0xf6c>)
 800b218:	fb03 f102 	mul.w	r1, r3, r2
 800b21c:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b220:	2300      	movs	r3, #0
 800b222:	fb03 f302 	mul.w	r3, r3, r2
 800b226:	18cc      	adds	r4, r1, r3
 800b228:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b22c:	4b2a      	ldr	r3, [pc, #168]	; (800b2d8 <sc_reduce+0xf6c>)
 800b22e:	fba2 0103 	umull	r0, r1, r2, r3
 800b232:	1863      	adds	r3, r4, r1
 800b234:	4619      	mov	r1, r3
 800b236:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	1814      	adds	r4, r2, r0
 800b240:	f8c7 44a0 	str.w	r4, [r7, #1184]	; 0x4a0
 800b244:	414b      	adcs	r3, r1
 800b246:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800b24a:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800b24e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b252:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800b256:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= s19 * 683901;
 800b25a:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b25e:	4b1f      	ldr	r3, [pc, #124]	; (800b2dc <sc_reduce+0xf70>)
 800b260:	fb03 f102 	mul.w	r1, r3, r2
 800b264:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b268:	f04f 33ff 	mov.w	r3, #4294967295
 800b26c:	fb03 f302 	mul.w	r3, r3, r2
 800b270:	18cc      	adds	r4, r1, r3
 800b272:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b276:	4b19      	ldr	r3, [pc, #100]	; (800b2dc <sc_reduce+0xf70>)
 800b278:	fba2 0103 	umull	r0, r1, r2, r3
 800b27c:	1863      	adds	r3, r4, r1
 800b27e:	4619      	mov	r1, r3
 800b280:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b288:	1814      	adds	r4, r2, r0
 800b28a:	f8c7 4498 	str.w	r4, [r7, #1176]	; 0x498
 800b28e:	414b      	adcs	r3, r1
 800b290:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800b294:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800b298:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b29c:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800b2a0:	e9c2 3400 	strd	r3, r4, [r2]
    s19 = 0;
 800b2a4:	f04f 0200 	mov.w	r2, #0
 800b2a8:	f04f 0300 	mov.w	r3, #0
 800b2ac:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 800b2b0:	e9c1 2300 	strd	r2, r3, [r1]
    s6 += s18 * 666643;
 800b2b4:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800b2b8:	4b03      	ldr	r3, [pc, #12]	; (800b2c8 <sc_reduce+0xf5c>)
 800b2ba:	fb03 f102 	mul.w	r1, r3, r2
 800b2be:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e00c      	b.n	800b2e0 <sc_reduce+0xf74>
 800b2c6:	bf00      	nop
 800b2c8:	000a2c13 	.word	0x000a2c13
 800b2cc:	00072d18 	.word	0x00072d18
 800b2d0:	0009fb67 	.word	0x0009fb67
 800b2d4:	fff0c653 	.word	0xfff0c653
 800b2d8:	000215d1 	.word	0x000215d1
 800b2dc:	fff59083 	.word	0xfff59083
 800b2e0:	fb03 f302 	mul.w	r3, r3, r2
 800b2e4:	18cc      	adds	r4, r1, r3
 800b2e6:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b2ea:	4bef      	ldr	r3, [pc, #956]	; (800b6a8 <sc_reduce+0x133c>)
 800b2ec:	fba2 0103 	umull	r0, r1, r2, r3
 800b2f0:	1863      	adds	r3, r4, r1
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800b2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fc:	1814      	adds	r4, r2, r0
 800b2fe:	f8c7 4490 	str.w	r4, [r7, #1168]	; 0x490
 800b302:	414b      	adcs	r3, r1
 800b304:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800b308:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800b30c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b310:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800b314:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s18 * 470296;
 800b318:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800b31c:	4be3      	ldr	r3, [pc, #908]	; (800b6ac <sc_reduce+0x1340>)
 800b31e:	fb03 f102 	mul.w	r1, r3, r2
 800b322:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b326:	2300      	movs	r3, #0
 800b328:	fb03 f302 	mul.w	r3, r3, r2
 800b32c:	18cc      	adds	r4, r1, r3
 800b32e:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b332:	4bde      	ldr	r3, [pc, #888]	; (800b6ac <sc_reduce+0x1340>)
 800b334:	fba2 0103 	umull	r0, r1, r2, r3
 800b338:	1863      	adds	r3, r4, r1
 800b33a:	4619      	mov	r1, r3
 800b33c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800b340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b344:	1814      	adds	r4, r2, r0
 800b346:	f8c7 4488 	str.w	r4, [r7, #1160]	; 0x488
 800b34a:	414b      	adcs	r3, r1
 800b34c:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800b350:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800b354:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b358:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800b35c:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s18 * 654183;
 800b360:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800b364:	4bd2      	ldr	r3, [pc, #840]	; (800b6b0 <sc_reduce+0x1344>)
 800b366:	fb03 f102 	mul.w	r1, r3, r2
 800b36a:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b36e:	2300      	movs	r3, #0
 800b370:	fb03 f302 	mul.w	r3, r3, r2
 800b374:	18cc      	adds	r4, r1, r3
 800b376:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b37a:	4bcd      	ldr	r3, [pc, #820]	; (800b6b0 <sc_reduce+0x1344>)
 800b37c:	fba2 0103 	umull	r0, r1, r2, r3
 800b380:	1863      	adds	r3, r4, r1
 800b382:	4619      	mov	r1, r3
 800b384:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	1814      	adds	r4, r2, r0
 800b38e:	f8c7 4480 	str.w	r4, [r7, #1152]	; 0x480
 800b392:	414b      	adcs	r3, r1
 800b394:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800b398:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800b39c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3a0:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800b3a4:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= s18 * 997805;
 800b3a8:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800b3ac:	4bc1      	ldr	r3, [pc, #772]	; (800b6b4 <sc_reduce+0x1348>)
 800b3ae:	fb03 f102 	mul.w	r1, r3, r2
 800b3b2:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ba:	fb03 f302 	mul.w	r3, r3, r2
 800b3be:	18cc      	adds	r4, r1, r3
 800b3c0:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b3c4:	4bbb      	ldr	r3, [pc, #748]	; (800b6b4 <sc_reduce+0x1348>)
 800b3c6:	fba2 0103 	umull	r0, r1, r2, r3
 800b3ca:	1863      	adds	r3, r4, r1
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800b3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d6:	1814      	adds	r4, r2, r0
 800b3d8:	f8c7 4478 	str.w	r4, [r7, #1144]	; 0x478
 800b3dc:	414b      	adcs	r3, r1
 800b3de:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800b3e2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800b3e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3ea:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800b3ee:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s18 * 136657;
 800b3f2:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800b3f6:	4bb0      	ldr	r3, [pc, #704]	; (800b6b8 <sc_reduce+0x134c>)
 800b3f8:	fb03 f102 	mul.w	r1, r3, r2
 800b3fc:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b400:	2300      	movs	r3, #0
 800b402:	fb03 f302 	mul.w	r3, r3, r2
 800b406:	18cc      	adds	r4, r1, r3
 800b408:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b40c:	4baa      	ldr	r3, [pc, #680]	; (800b6b8 <sc_reduce+0x134c>)
 800b40e:	fba2 0103 	umull	r0, r1, r2, r3
 800b412:	1863      	adds	r3, r4, r1
 800b414:	4619      	mov	r1, r3
 800b416:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	1814      	adds	r4, r2, r0
 800b420:	f8c7 4470 	str.w	r4, [r7, #1136]	; 0x470
 800b424:	414b      	adcs	r3, r1
 800b426:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 800b42a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800b42e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b432:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800b436:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= s18 * 683901;
 800b43a:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800b43e:	4b9f      	ldr	r3, [pc, #636]	; (800b6bc <sc_reduce+0x1350>)
 800b440:	fb03 f102 	mul.w	r1, r3, r2
 800b444:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b448:	f04f 33ff 	mov.w	r3, #4294967295
 800b44c:	fb03 f302 	mul.w	r3, r3, r2
 800b450:	18cc      	adds	r4, r1, r3
 800b452:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b456:	4b99      	ldr	r3, [pc, #612]	; (800b6bc <sc_reduce+0x1350>)
 800b458:	fba2 0103 	umull	r0, r1, r2, r3
 800b45c:	1863      	adds	r3, r4, r1
 800b45e:	4619      	mov	r1, r3
 800b460:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800b464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b468:	1814      	adds	r4, r2, r0
 800b46a:	f8c7 4468 	str.w	r4, [r7, #1128]	; 0x468
 800b46e:	414b      	adcs	r3, r1
 800b470:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800b474:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800b478:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b47c:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800b480:	e9c2 3400 	strd	r3, r4, [r2]
    s18 = 0;
 800b484:	f04f 0200 	mov.w	r2, #0
 800b488:	f04f 0300 	mov.w	r3, #0
 800b48c:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 800b490:	e9c1 2300 	strd	r2, r3, [r1]
    carry6 = (s6 + (1 << 20)) >> 21;
 800b494:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800b4a0:	f8c7 16d8 	str.w	r1, [r7, #1752]	; 0x6d8
 800b4a4:	f143 0300 	adc.w	r3, r3, #0
 800b4a8:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 800b4ac:	f04f 0200 	mov.w	r2, #0
 800b4b0:	f04f 0300 	mov.w	r3, #0
 800b4b4:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 800b4b8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b4bc:	4621      	mov	r1, r4
 800b4be:	0d4a      	lsrs	r2, r1, #21
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	154b      	asrs	r3, r1, #21
 800b4ca:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800b4ce:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += carry6;
 800b4d2:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800b4d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4da:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	1884      	adds	r4, r0, r2
 800b4e4:	f8c7 4460 	str.w	r4, [r7, #1120]	; 0x460
 800b4e8:	eb41 0303 	adc.w	r3, r1, r3
 800b4ec:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800b4f0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800b4f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4f8:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800b4fc:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 800b500:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f04f 0000 	mov.w	r0, #0
 800b50c:	f04f 0100 	mov.w	r1, #0
 800b510:	0559      	lsls	r1, r3, #21
 800b512:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800b516:	0550      	lsls	r0, r2, #21
 800b518:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	1a14      	subs	r4, r2, r0
 800b522:	f8c7 4458 	str.w	r4, [r7, #1112]	; 0x458
 800b526:	eb63 0301 	sbc.w	r3, r3, r1
 800b52a:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800b52e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800b532:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b536:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800b53a:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (s8 + (1 << 20)) >> 21;
 800b53e:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800b54a:	f8c7 16d0 	str.w	r1, [r7, #1744]	; 0x6d0
 800b54e:	f143 0300 	adc.w	r3, r3, #0
 800b552:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 800b556:	f04f 0200 	mov.w	r2, #0
 800b55a:	f04f 0300 	mov.w	r3, #0
 800b55e:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 800b562:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b566:	4621      	mov	r1, r4
 800b568:	0d4a      	lsrs	r2, r1, #21
 800b56a:	4629      	mov	r1, r5
 800b56c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800b570:	4629      	mov	r1, r5
 800b572:	154b      	asrs	r3, r1, #21
 800b574:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 800b578:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += carry8;
 800b57c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800b580:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b584:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58c:	1884      	adds	r4, r0, r2
 800b58e:	f8c7 4450 	str.w	r4, [r7, #1104]	; 0x450
 800b592:	eb41 0303 	adc.w	r3, r1, r3
 800b596:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800b59a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800b59e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5a2:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800b5a6:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 800b5aa:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f04f 0000 	mov.w	r0, #0
 800b5b6:	f04f 0100 	mov.w	r1, #0
 800b5ba:	0559      	lsls	r1, r3, #21
 800b5bc:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800b5c0:	0550      	lsls	r0, r2, #21
 800b5c2:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	1a14      	subs	r4, r2, r0
 800b5cc:	f8c7 4448 	str.w	r4, [r7, #1096]	; 0x448
 800b5d0:	eb63 0301 	sbc.w	r3, r3, r1
 800b5d4:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800b5d8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800b5dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5e0:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800b5e4:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = (s10 + (1 << 20)) >> 21;
 800b5e8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800b5f4:	f8c7 16c8 	str.w	r1, [r7, #1736]	; 0x6c8
 800b5f8:	f143 0300 	adc.w	r3, r3, #0
 800b5fc:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 800b600:	f04f 0200 	mov.w	r2, #0
 800b604:	f04f 0300 	mov.w	r3, #0
 800b608:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 800b60c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b610:	4621      	mov	r1, r4
 800b612:	0d4a      	lsrs	r2, r1, #21
 800b614:	4629      	mov	r1, r5
 800b616:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800b61a:	4629      	mov	r1, r5
 800b61c:	154b      	asrs	r3, r1, #21
 800b61e:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800b622:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 800b626:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800b62a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b62e:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	1884      	adds	r4, r0, r2
 800b638:	f8c7 4440 	str.w	r4, [r7, #1088]	; 0x440
 800b63c:	eb41 0303 	adc.w	r3, r1, r3
 800b640:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800b644:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800b648:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b64c:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800b650:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 800b654:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f04f 0000 	mov.w	r0, #0
 800b660:	f04f 0100 	mov.w	r1, #0
 800b664:	0559      	lsls	r1, r3, #21
 800b666:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800b66a:	0550      	lsls	r0, r2, #21
 800b66c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	1a14      	subs	r4, r2, r0
 800b676:	f8c7 4438 	str.w	r4, [r7, #1080]	; 0x438
 800b67a:	eb63 0301 	sbc.w	r3, r3, r1
 800b67e:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800b682:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800b686:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b68a:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800b68e:	e9c2 3400 	strd	r3, r4, [r2]
    carry12 = (s12 + (1 << 20)) >> 21;
 800b692:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800b696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69a:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800b69e:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 800b6a2:	f143 0300 	adc.w	r3, r3, #0
 800b6a6:	e00b      	b.n	800b6c0 <sc_reduce+0x1354>
 800b6a8:	000a2c13 	.word	0x000a2c13
 800b6ac:	00072d18 	.word	0x00072d18
 800b6b0:	0009fb67 	.word	0x0009fb67
 800b6b4:	fff0c653 	.word	0xfff0c653
 800b6b8:	000215d1 	.word	0x000215d1
 800b6bc:	fff59083 	.word	0xfff59083
 800b6c0:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 800b6c4:	f04f 0200 	mov.w	r2, #0
 800b6c8:	f04f 0300 	mov.w	r3, #0
 800b6cc:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 800b6d0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	0d4a      	lsrs	r2, r1, #21
 800b6d8:	4629      	mov	r1, r5
 800b6da:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800b6de:	4629      	mov	r1, r5
 800b6e0:	154b      	asrs	r3, r1, #21
 800b6e2:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 800b6e6:	e9c1 2300 	strd	r2, r3, [r1]
    s13 += carry12;
 800b6ea:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800b6ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6f2:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	1884      	adds	r4, r0, r2
 800b6fc:	f8c7 4430 	str.w	r4, [r7, #1072]	; 0x430
 800b700:	eb41 0303 	adc.w	r3, r1, r3
 800b704:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800b708:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800b70c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b710:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800b714:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= carry12 << 21;
 800b718:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b720:	f04f 0000 	mov.w	r0, #0
 800b724:	f04f 0100 	mov.w	r1, #0
 800b728:	0559      	lsls	r1, r3, #21
 800b72a:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800b72e:	0550      	lsls	r0, r2, #21
 800b730:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	1a14      	subs	r4, r2, r0
 800b73a:	f8c7 4428 	str.w	r4, [r7, #1064]	; 0x428
 800b73e:	eb63 0301 	sbc.w	r3, r3, r1
 800b742:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800b746:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800b74a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b74e:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800b752:	e9c2 3400 	strd	r3, r4, [r2]
    carry14 = (s14 + (1 << 20)) >> 21;
 800b756:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800b762:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 800b766:	f143 0300 	adc.w	r3, r3, #0
 800b76a:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 800b76e:	f04f 0200 	mov.w	r2, #0
 800b772:	f04f 0300 	mov.w	r3, #0
 800b776:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800b77a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b77e:	4621      	mov	r1, r4
 800b780:	0d4a      	lsrs	r2, r1, #21
 800b782:	4629      	mov	r1, r5
 800b784:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800b788:	4629      	mov	r1, r5
 800b78a:	154b      	asrs	r3, r1, #21
 800b78c:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 800b790:	e9c1 2300 	strd	r2, r3, [r1]
    s15 += carry14;
 800b794:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800b798:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b79c:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	1884      	adds	r4, r0, r2
 800b7a6:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
 800b7aa:	eb41 0303 	adc.w	r3, r1, r3
 800b7ae:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800b7b2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800b7b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b7ba:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 800b7be:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= carry14 << 21;
 800b7c2:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	f04f 0000 	mov.w	r0, #0
 800b7ce:	f04f 0100 	mov.w	r1, #0
 800b7d2:	0559      	lsls	r1, r3, #21
 800b7d4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800b7d8:	0550      	lsls	r0, r2, #21
 800b7da:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	1a14      	subs	r4, r2, r0
 800b7e4:	f8c7 4418 	str.w	r4, [r7, #1048]	; 0x418
 800b7e8:	eb63 0301 	sbc.w	r3, r3, r1
 800b7ec:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800b7f0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800b7f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b7f8:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800b7fc:	e9c2 3400 	strd	r3, r4, [r2]
    carry16 = (s16 + (1 << 20)) >> 21;
 800b800:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800b80c:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 800b810:	f143 0300 	adc.w	r3, r3, #0
 800b814:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 800b818:	f04f 0200 	mov.w	r2, #0
 800b81c:	f04f 0300 	mov.w	r3, #0
 800b820:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 800b824:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b828:	4621      	mov	r1, r4
 800b82a:	0d4a      	lsrs	r2, r1, #21
 800b82c:	4629      	mov	r1, r5
 800b82e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800b832:	4629      	mov	r1, r5
 800b834:	154b      	asrs	r3, r1, #21
 800b836:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 800b83a:	e9c1 2300 	strd	r2, r3, [r1]
    s17 += carry16;
 800b83e:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800b842:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b846:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	1884      	adds	r4, r0, r2
 800b850:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 800b854:	eb41 0303 	adc.w	r3, r1, r3
 800b858:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800b85c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800b860:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b864:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800b868:	e9c2 3400 	strd	r3, r4, [r2]
    s16 -= carry16 << 21;
 800b86c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f04f 0000 	mov.w	r0, #0
 800b878:	f04f 0100 	mov.w	r1, #0
 800b87c:	0559      	lsls	r1, r3, #21
 800b87e:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800b882:	0550      	lsls	r0, r2, #21
 800b884:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	1a14      	subs	r4, r2, r0
 800b88e:	f8c7 4408 	str.w	r4, [r7, #1032]	; 0x408
 800b892:	eb63 0301 	sbc.w	r3, r3, r1
 800b896:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800b89a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800b89e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8a2:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800b8a6:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (s7 + (1 << 20)) >> 21;
 800b8aa:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800b8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b2:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800b8b6:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 800b8ba:	f143 0300 	adc.w	r3, r3, #0
 800b8be:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 800b8c2:	f04f 0200 	mov.w	r2, #0
 800b8c6:	f04f 0300 	mov.w	r3, #0
 800b8ca:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 800b8ce:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	0d4a      	lsrs	r2, r1, #21
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800b8dc:	4629      	mov	r1, r5
 800b8de:	154b      	asrs	r3, r1, #21
 800b8e0:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 800b8e4:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += carry7;
 800b8e8:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800b8ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8f0:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	1884      	adds	r4, r0, r2
 800b8fa:	f8c7 4400 	str.w	r4, [r7, #1024]	; 0x400
 800b8fe:	eb41 0303 	adc.w	r3, r1, r3
 800b902:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800b906:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800b90a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b90e:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800b912:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 800b916:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	f04f 0000 	mov.w	r0, #0
 800b922:	f04f 0100 	mov.w	r1, #0
 800b926:	0559      	lsls	r1, r3, #21
 800b928:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800b92c:	0550      	lsls	r0, r2, #21
 800b92e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	1a14      	subs	r4, r2, r0
 800b938:	f8c7 43f8 	str.w	r4, [r7, #1016]	; 0x3f8
 800b93c:	eb63 0301 	sbc.w	r3, r3, r1
 800b940:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800b944:	e9d7 34fe 	ldrd	r3, r4, [r7, #1016]	; 0x3f8
 800b948:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800b94c:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = (s9 + (1 << 20)) >> 21;
 800b950:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800b95c:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 800b960:	f143 0300 	adc.w	r3, r3, #0
 800b964:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	f04f 0300 	mov.w	r3, #0
 800b970:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 800b974:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b978:	4621      	mov	r1, r4
 800b97a:	0d4a      	lsrs	r2, r1, #21
 800b97c:	4629      	mov	r1, r5
 800b97e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800b982:	4629      	mov	r1, r5
 800b984:	154b      	asrs	r3, r1, #21
 800b986:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 800b98a:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 800b98e:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800b992:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b996:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	1884      	adds	r4, r0, r2
 800b9a0:	f8c7 43f0 	str.w	r4, [r7, #1008]	; 0x3f0
 800b9a4:	eb41 0303 	adc.w	r3, r1, r3
 800b9a8:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800b9ac:	e9d7 34fc 	ldrd	r3, r4, [r7, #1008]	; 0x3f0
 800b9b0:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800b9b4:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 800b9b8:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f04f 0000 	mov.w	r0, #0
 800b9c4:	f04f 0100 	mov.w	r1, #0
 800b9c8:	0559      	lsls	r1, r3, #21
 800b9ca:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800b9ce:	0550      	lsls	r0, r2, #21
 800b9d0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	1a14      	subs	r4, r2, r0
 800b9da:	f8c7 43e8 	str.w	r4, [r7, #1000]	; 0x3e8
 800b9de:	eb63 0301 	sbc.w	r3, r3, r1
 800b9e2:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800b9e6:	e9d7 34fa 	ldrd	r3, r4, [r7, #1000]	; 0x3e8
 800b9ea:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800b9ee:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = (s11 + (1 << 20)) >> 21;
 800b9f2:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800b9fe:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 800ba02:	f143 0300 	adc.w	r3, r3, #0
 800ba06:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 800ba0a:	f04f 0200 	mov.w	r2, #0
 800ba0e:	f04f 0300 	mov.w	r3, #0
 800ba12:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 800ba16:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	0d4a      	lsrs	r2, r1, #21
 800ba1e:	4629      	mov	r1, r5
 800ba20:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800ba24:	4629      	mov	r1, r5
 800ba26:	154b      	asrs	r3, r1, #21
 800ba28:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 800ba2c:	e9c1 2300 	strd	r2, r3, [r1]
    s12 += carry11;
 800ba30:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800ba34:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba38:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	1884      	adds	r4, r0, r2
 800ba42:	f8c7 43e0 	str.w	r4, [r7, #992]	; 0x3e0
 800ba46:	eb41 0303 	adc.w	r3, r1, r3
 800ba4a:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800ba4e:	e9d7 34f8 	ldrd	r3, r4, [r7, #992]	; 0x3e0
 800ba52:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800ba56:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 800ba5a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	f04f 0000 	mov.w	r0, #0
 800ba66:	f04f 0100 	mov.w	r1, #0
 800ba6a:	0559      	lsls	r1, r3, #21
 800ba6c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800ba70:	0550      	lsls	r0, r2, #21
 800ba72:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	1a14      	subs	r4, r2, r0
 800ba7c:	f8c7 43d8 	str.w	r4, [r7, #984]	; 0x3d8
 800ba80:	eb63 0301 	sbc.w	r3, r3, r1
 800ba84:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800ba88:	e9d7 34f6 	ldrd	r3, r4, [r7, #984]	; 0x3d8
 800ba8c:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800ba90:	e9c2 3400 	strd	r3, r4, [r2]
    carry13 = (s13 + (1 << 20)) >> 21;
 800ba94:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800ba98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9c:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800baa0:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 800baa4:	f143 0300 	adc.w	r3, r3, #0
 800baa8:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 800baac:	f04f 0200 	mov.w	r2, #0
 800bab0:	f04f 0300 	mov.w	r3, #0
 800bab4:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 800bab8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800babc:	4621      	mov	r1, r4
 800babe:	0d4a      	lsrs	r2, r1, #21
 800bac0:	4629      	mov	r1, r5
 800bac2:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800bac6:	4629      	mov	r1, r5
 800bac8:	154b      	asrs	r3, r1, #21
 800baca:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 800bace:	e9c1 2300 	strd	r2, r3, [r1]
    s14 += carry13;
 800bad2:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800bad6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bada:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	1884      	adds	r4, r0, r2
 800bae4:	f8c7 43d0 	str.w	r4, [r7, #976]	; 0x3d0
 800bae8:	eb41 0303 	adc.w	r3, r1, r3
 800baec:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800baf0:	e9d7 34f4 	ldrd	r3, r4, [r7, #976]	; 0x3d0
 800baf4:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800baf8:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= carry13 << 21;
 800bafc:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	f04f 0000 	mov.w	r0, #0
 800bb08:	f04f 0100 	mov.w	r1, #0
 800bb0c:	0559      	lsls	r1, r3, #21
 800bb0e:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800bb12:	0550      	lsls	r0, r2, #21
 800bb14:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1c:	1a14      	subs	r4, r2, r0
 800bb1e:	f8c7 43c8 	str.w	r4, [r7, #968]	; 0x3c8
 800bb22:	eb63 0301 	sbc.w	r3, r3, r1
 800bb26:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800bb2a:	e9d7 34f2 	ldrd	r3, r4, [r7, #968]	; 0x3c8
 800bb2e:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800bb32:	e9c2 3400 	strd	r3, r4, [r2]
    carry15 = (s15 + (1 << 20)) >> 21;
 800bb36:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3e:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800bb42:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 800bb46:	f143 0300 	adc.w	r3, r3, #0
 800bb4a:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 800bb4e:	f04f 0200 	mov.w	r2, #0
 800bb52:	f04f 0300 	mov.w	r3, #0
 800bb56:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 800bb5a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800bb5e:	4621      	mov	r1, r4
 800bb60:	0d4a      	lsrs	r2, r1, #21
 800bb62:	4629      	mov	r1, r5
 800bb64:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800bb68:	4629      	mov	r1, r5
 800bb6a:	154b      	asrs	r3, r1, #21
 800bb6c:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 800bb70:	e9c1 2300 	strd	r2, r3, [r1]
    s16 += carry15;
 800bb74:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800bb78:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb7c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	1884      	adds	r4, r0, r2
 800bb86:	f8c7 43c0 	str.w	r4, [r7, #960]	; 0x3c0
 800bb8a:	eb41 0303 	adc.w	r3, r1, r3
 800bb8e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800bb92:	e9d7 34f0 	ldrd	r3, r4, [r7, #960]	; 0x3c0
 800bb96:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800bb9a:	e9c2 3400 	strd	r3, r4, [r2]
    s15 -= carry15 << 21;
 800bb9e:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba6:	f04f 0000 	mov.w	r0, #0
 800bbaa:	f04f 0100 	mov.w	r1, #0
 800bbae:	0559      	lsls	r1, r3, #21
 800bbb0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800bbb4:	0550      	lsls	r0, r2, #21
 800bbb6:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	1a14      	subs	r4, r2, r0
 800bbc0:	f8c7 43b8 	str.w	r4, [r7, #952]	; 0x3b8
 800bbc4:	eb63 0301 	sbc.w	r3, r3, r1
 800bbc8:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800bbcc:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 800bbd0:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 800bbd4:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s17 * 666643;
 800bbd8:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800bbdc:	4be4      	ldr	r3, [pc, #912]	; (800bf70 <sc_reduce+0x1c04>)
 800bbde:	fb03 f102 	mul.w	r1, r3, r2
 800bbe2:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	fb03 f302 	mul.w	r3, r3, r2
 800bbec:	18cc      	adds	r4, r1, r3
 800bbee:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bbf2:	4bdf      	ldr	r3, [pc, #892]	; (800bf70 <sc_reduce+0x1c04>)
 800bbf4:	fba2 0103 	umull	r0, r1, r2, r3
 800bbf8:	1863      	adds	r3, r4, r1
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	1814      	adds	r4, r2, r0
 800bc06:	f8c7 43b0 	str.w	r4, [r7, #944]	; 0x3b0
 800bc0a:	414b      	adcs	r3, r1
 800bc0c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800bc10:	e9d7 34ec 	ldrd	r3, r4, [r7, #944]	; 0x3b0
 800bc14:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800bc18:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s17 * 470296;
 800bc1c:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800bc20:	4bd4      	ldr	r3, [pc, #848]	; (800bf74 <sc_reduce+0x1c08>)
 800bc22:	fb03 f102 	mul.w	r1, r3, r2
 800bc26:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	fb03 f302 	mul.w	r3, r3, r2
 800bc30:	18cc      	adds	r4, r1, r3
 800bc32:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bc36:	4bcf      	ldr	r3, [pc, #828]	; (800bf74 <sc_reduce+0x1c08>)
 800bc38:	fba2 0103 	umull	r0, r1, r2, r3
 800bc3c:	1863      	adds	r3, r4, r1
 800bc3e:	4619      	mov	r1, r3
 800bc40:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	1814      	adds	r4, r2, r0
 800bc4a:	f8c7 43a8 	str.w	r4, [r7, #936]	; 0x3a8
 800bc4e:	414b      	adcs	r3, r1
 800bc50:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800bc54:	e9d7 34ea 	ldrd	r3, r4, [r7, #936]	; 0x3a8
 800bc58:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800bc5c:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s17 * 654183;
 800bc60:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800bc64:	4bc4      	ldr	r3, [pc, #784]	; (800bf78 <sc_reduce+0x1c0c>)
 800bc66:	fb03 f102 	mul.w	r1, r3, r2
 800bc6a:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bc6e:	2300      	movs	r3, #0
 800bc70:	fb03 f302 	mul.w	r3, r3, r2
 800bc74:	18cc      	adds	r4, r1, r3
 800bc76:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bc7a:	4bbf      	ldr	r3, [pc, #764]	; (800bf78 <sc_reduce+0x1c0c>)
 800bc7c:	fba2 0103 	umull	r0, r1, r2, r3
 800bc80:	1863      	adds	r3, r4, r1
 800bc82:	4619      	mov	r1, r3
 800bc84:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	1814      	adds	r4, r2, r0
 800bc8e:	f8c7 43a0 	str.w	r4, [r7, #928]	; 0x3a0
 800bc92:	414b      	adcs	r3, r1
 800bc94:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800bc98:	e9d7 34e8 	ldrd	r3, r4, [r7, #928]	; 0x3a0
 800bc9c:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800bca0:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= s17 * 997805;
 800bca4:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800bca8:	4bb4      	ldr	r3, [pc, #720]	; (800bf7c <sc_reduce+0x1c10>)
 800bcaa:	fb03 f102 	mul.w	r1, r3, r2
 800bcae:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bcb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb6:	fb03 f302 	mul.w	r3, r3, r2
 800bcba:	18cc      	adds	r4, r1, r3
 800bcbc:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bcc0:	4bae      	ldr	r3, [pc, #696]	; (800bf7c <sc_reduce+0x1c10>)
 800bcc2:	fba2 0103 	umull	r0, r1, r2, r3
 800bcc6:	1863      	adds	r3, r4, r1
 800bcc8:	4619      	mov	r1, r3
 800bcca:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800bcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd2:	1814      	adds	r4, r2, r0
 800bcd4:	f8c7 4398 	str.w	r4, [r7, #920]	; 0x398
 800bcd8:	414b      	adcs	r3, r1
 800bcda:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800bcde:	e9d7 34e6 	ldrd	r3, r4, [r7, #920]	; 0x398
 800bce2:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800bce6:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s17 * 136657;
 800bcea:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800bcee:	4ba4      	ldr	r3, [pc, #656]	; (800bf80 <sc_reduce+0x1c14>)
 800bcf0:	fb03 f102 	mul.w	r1, r3, r2
 800bcf4:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	fb03 f302 	mul.w	r3, r3, r2
 800bcfe:	18cc      	adds	r4, r1, r3
 800bd00:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bd04:	4b9e      	ldr	r3, [pc, #632]	; (800bf80 <sc_reduce+0x1c14>)
 800bd06:	fba2 0103 	umull	r0, r1, r2, r3
 800bd0a:	1863      	adds	r3, r4, r1
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	1814      	adds	r4, r2, r0
 800bd18:	f8c7 4390 	str.w	r4, [r7, #912]	; 0x390
 800bd1c:	414b      	adcs	r3, r1
 800bd1e:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800bd22:	e9d7 34e4 	ldrd	r3, r4, [r7, #912]	; 0x390
 800bd26:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800bd2a:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= s17 * 683901;
 800bd2e:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800bd32:	4b94      	ldr	r3, [pc, #592]	; (800bf84 <sc_reduce+0x1c18>)
 800bd34:	fb03 f102 	mul.w	r1, r3, r2
 800bd38:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bd3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd40:	fb03 f302 	mul.w	r3, r3, r2
 800bd44:	18cc      	adds	r4, r1, r3
 800bd46:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800bd4a:	4b8e      	ldr	r3, [pc, #568]	; (800bf84 <sc_reduce+0x1c18>)
 800bd4c:	fba2 0103 	umull	r0, r1, r2, r3
 800bd50:	1863      	adds	r3, r4, r1
 800bd52:	4619      	mov	r1, r3
 800bd54:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	1814      	adds	r4, r2, r0
 800bd5e:	f8c7 4388 	str.w	r4, [r7, #904]	; 0x388
 800bd62:	414b      	adcs	r3, r1
 800bd64:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800bd68:	e9d7 34e2 	ldrd	r3, r4, [r7, #904]	; 0x388
 800bd6c:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800bd70:	e9c2 3400 	strd	r3, r4, [r2]
    s17 = 0;
 800bd74:	f04f 0200 	mov.w	r2, #0
 800bd78:	f04f 0300 	mov.w	r3, #0
 800bd7c:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 800bd80:	e9c1 2300 	strd	r2, r3, [r1]
    s4 += s16 * 666643;
 800bd84:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800bd88:	4b79      	ldr	r3, [pc, #484]	; (800bf70 <sc_reduce+0x1c04>)
 800bd8a:	fb03 f102 	mul.w	r1, r3, r2
 800bd8e:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800bd92:	2300      	movs	r3, #0
 800bd94:	fb03 f302 	mul.w	r3, r3, r2
 800bd98:	18cc      	adds	r4, r1, r3
 800bd9a:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800bd9e:	4b74      	ldr	r3, [pc, #464]	; (800bf70 <sc_reduce+0x1c04>)
 800bda0:	fba2 0103 	umull	r0, r1, r2, r3
 800bda4:	1863      	adds	r3, r4, r1
 800bda6:	4619      	mov	r1, r3
 800bda8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	1814      	adds	r4, r2, r0
 800bdb2:	f8c7 4380 	str.w	r4, [r7, #896]	; 0x380
 800bdb6:	414b      	adcs	r3, r1
 800bdb8:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800bdbc:	e9d7 34e0 	ldrd	r3, r4, [r7, #896]	; 0x380
 800bdc0:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800bdc4:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s16 * 470296;
 800bdc8:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800bdcc:	4b69      	ldr	r3, [pc, #420]	; (800bf74 <sc_reduce+0x1c08>)
 800bdce:	fb03 f102 	mul.w	r1, r3, r2
 800bdd2:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	fb03 f302 	mul.w	r3, r3, r2
 800bddc:	18cc      	adds	r4, r1, r3
 800bdde:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800bde2:	4b64      	ldr	r3, [pc, #400]	; (800bf74 <sc_reduce+0x1c08>)
 800bde4:	fba2 0103 	umull	r0, r1, r2, r3
 800bde8:	1863      	adds	r3, r4, r1
 800bdea:	4619      	mov	r1, r3
 800bdec:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	1814      	adds	r4, r2, r0
 800bdf6:	f8c7 4378 	str.w	r4, [r7, #888]	; 0x378
 800bdfa:	414b      	adcs	r3, r1
 800bdfc:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800be00:	e9d7 34de 	ldrd	r3, r4, [r7, #888]	; 0x378
 800be04:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800be08:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s16 * 654183;
 800be0c:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800be10:	4b59      	ldr	r3, [pc, #356]	; (800bf78 <sc_reduce+0x1c0c>)
 800be12:	fb03 f102 	mul.w	r1, r3, r2
 800be16:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800be1a:	2300      	movs	r3, #0
 800be1c:	fb03 f302 	mul.w	r3, r3, r2
 800be20:	18cc      	adds	r4, r1, r3
 800be22:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800be26:	4b54      	ldr	r3, [pc, #336]	; (800bf78 <sc_reduce+0x1c0c>)
 800be28:	fba2 0103 	umull	r0, r1, r2, r3
 800be2c:	1863      	adds	r3, r4, r1
 800be2e:	4619      	mov	r1, r3
 800be30:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	1814      	adds	r4, r2, r0
 800be3a:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 800be3e:	414b      	adcs	r3, r1
 800be40:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800be44:	e9d7 34dc 	ldrd	r3, r4, [r7, #880]	; 0x370
 800be48:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800be4c:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= s16 * 997805;
 800be50:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800be54:	4b49      	ldr	r3, [pc, #292]	; (800bf7c <sc_reduce+0x1c10>)
 800be56:	fb03 f102 	mul.w	r1, r3, r2
 800be5a:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800be5e:	f04f 33ff 	mov.w	r3, #4294967295
 800be62:	fb03 f302 	mul.w	r3, r3, r2
 800be66:	18cc      	adds	r4, r1, r3
 800be68:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800be6c:	4b43      	ldr	r3, [pc, #268]	; (800bf7c <sc_reduce+0x1c10>)
 800be6e:	fba2 0103 	umull	r0, r1, r2, r3
 800be72:	1863      	adds	r3, r4, r1
 800be74:	4619      	mov	r1, r3
 800be76:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7e:	1814      	adds	r4, r2, r0
 800be80:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 800be84:	414b      	adcs	r3, r1
 800be86:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800be8a:	e9d7 34da 	ldrd	r3, r4, [r7, #872]	; 0x368
 800be8e:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800be92:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s16 * 136657;
 800be96:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800be9a:	4b39      	ldr	r3, [pc, #228]	; (800bf80 <sc_reduce+0x1c14>)
 800be9c:	fb03 f102 	mul.w	r1, r3, r2
 800bea0:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800bea4:	2300      	movs	r3, #0
 800bea6:	fb03 f302 	mul.w	r3, r3, r2
 800beaa:	18cc      	adds	r4, r1, r3
 800beac:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800beb0:	4b33      	ldr	r3, [pc, #204]	; (800bf80 <sc_reduce+0x1c14>)
 800beb2:	fba2 0103 	umull	r0, r1, r2, r3
 800beb6:	1863      	adds	r3, r4, r1
 800beb8:	4619      	mov	r1, r3
 800beba:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	1814      	adds	r4, r2, r0
 800bec4:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 800bec8:	414b      	adcs	r3, r1
 800beca:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800bece:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 800bed2:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800bed6:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= s16 * 683901;
 800beda:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800bede:	4b29      	ldr	r3, [pc, #164]	; (800bf84 <sc_reduce+0x1c18>)
 800bee0:	fb03 f102 	mul.w	r1, r3, r2
 800bee4:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800bee8:	f04f 33ff 	mov.w	r3, #4294967295
 800beec:	fb03 f302 	mul.w	r3, r3, r2
 800bef0:	18cc      	adds	r4, r1, r3
 800bef2:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800bef6:	4b23      	ldr	r3, [pc, #140]	; (800bf84 <sc_reduce+0x1c18>)
 800bef8:	fba2 0103 	umull	r0, r1, r2, r3
 800befc:	1863      	adds	r3, r4, r1
 800befe:	4619      	mov	r1, r3
 800bf00:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	1814      	adds	r4, r2, r0
 800bf0a:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 800bf0e:	414b      	adcs	r3, r1
 800bf10:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800bf14:	e9d7 34d6 	ldrd	r3, r4, [r7, #856]	; 0x358
 800bf18:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800bf1c:	e9c2 3400 	strd	r3, r4, [r2]
    s16 = 0;
 800bf20:	f04f 0200 	mov.w	r2, #0
 800bf24:	f04f 0300 	mov.w	r3, #0
 800bf28:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 800bf2c:	e9c1 2300 	strd	r2, r3, [r1]
    s3 += s15 * 666643;
 800bf30:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800bf34:	4b0e      	ldr	r3, [pc, #56]	; (800bf70 <sc_reduce+0x1c04>)
 800bf36:	fb03 f102 	mul.w	r1, r3, r2
 800bf3a:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800bf3e:	2300      	movs	r3, #0
 800bf40:	fb03 f302 	mul.w	r3, r3, r2
 800bf44:	18cc      	adds	r4, r1, r3
 800bf46:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800bf4a:	4b09      	ldr	r3, [pc, #36]	; (800bf70 <sc_reduce+0x1c04>)
 800bf4c:	fba2 0103 	umull	r0, r1, r2, r3
 800bf50:	1863      	adds	r3, r4, r1
 800bf52:	4619      	mov	r1, r3
 800bf54:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5c:	1814      	adds	r4, r2, r0
 800bf5e:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 800bf62:	414b      	adcs	r3, r1
 800bf64:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800bf68:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 800bf6c:	e00c      	b.n	800bf88 <sc_reduce+0x1c1c>
 800bf6e:	bf00      	nop
 800bf70:	000a2c13 	.word	0x000a2c13
 800bf74:	00072d18 	.word	0x00072d18
 800bf78:	0009fb67 	.word	0x0009fb67
 800bf7c:	fff0c653 	.word	0xfff0c653
 800bf80:	000215d1 	.word	0x000215d1
 800bf84:	fff59083 	.word	0xfff59083
 800bf88:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800bf8c:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s15 * 470296;
 800bf90:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800bf94:	4be4      	ldr	r3, [pc, #912]	; (800c328 <sc_reduce+0x1fbc>)
 800bf96:	fb03 f102 	mul.w	r1, r3, r2
 800bf9a:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	fb03 f302 	mul.w	r3, r3, r2
 800bfa4:	18cc      	adds	r4, r1, r3
 800bfa6:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800bfaa:	4bdf      	ldr	r3, [pc, #892]	; (800c328 <sc_reduce+0x1fbc>)
 800bfac:	fba2 0103 	umull	r0, r1, r2, r3
 800bfb0:	1863      	adds	r3, r4, r1
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	1814      	adds	r4, r2, r0
 800bfbe:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 800bfc2:	414b      	adcs	r3, r1
 800bfc4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800bfc8:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 800bfcc:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800bfd0:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s15 * 654183;
 800bfd4:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800bfd8:	4bd4      	ldr	r3, [pc, #848]	; (800c32c <sc_reduce+0x1fc0>)
 800bfda:	fb03 f102 	mul.w	r1, r3, r2
 800bfde:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	fb03 f302 	mul.w	r3, r3, r2
 800bfe8:	18cc      	adds	r4, r1, r3
 800bfea:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800bfee:	4bcf      	ldr	r3, [pc, #828]	; (800c32c <sc_reduce+0x1fc0>)
 800bff0:	fba2 0103 	umull	r0, r1, r2, r3
 800bff4:	1863      	adds	r3, r4, r1
 800bff6:	4619      	mov	r1, r3
 800bff8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c000:	1814      	adds	r4, r2, r0
 800c002:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 800c006:	414b      	adcs	r3, r1
 800c008:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800c00c:	e9d7 34d0 	ldrd	r3, r4, [r7, #832]	; 0x340
 800c010:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800c014:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= s15 * 997805;
 800c018:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800c01c:	4bc4      	ldr	r3, [pc, #784]	; (800c330 <sc_reduce+0x1fc4>)
 800c01e:	fb03 f102 	mul.w	r1, r3, r2
 800c022:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c026:	f04f 33ff 	mov.w	r3, #4294967295
 800c02a:	fb03 f302 	mul.w	r3, r3, r2
 800c02e:	18cc      	adds	r4, r1, r3
 800c030:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c034:	4bbe      	ldr	r3, [pc, #760]	; (800c330 <sc_reduce+0x1fc4>)
 800c036:	fba2 0103 	umull	r0, r1, r2, r3
 800c03a:	1863      	adds	r3, r4, r1
 800c03c:	4619      	mov	r1, r3
 800c03e:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800c042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c046:	1814      	adds	r4, r2, r0
 800c048:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 800c04c:	414b      	adcs	r3, r1
 800c04e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800c052:	e9d7 34ce 	ldrd	r3, r4, [r7, #824]	; 0x338
 800c056:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800c05a:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s15 * 136657;
 800c05e:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800c062:	4bb4      	ldr	r3, [pc, #720]	; (800c334 <sc_reduce+0x1fc8>)
 800c064:	fb03 f102 	mul.w	r1, r3, r2
 800c068:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c06c:	2300      	movs	r3, #0
 800c06e:	fb03 f302 	mul.w	r3, r3, r2
 800c072:	18cc      	adds	r4, r1, r3
 800c074:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c078:	4bae      	ldr	r3, [pc, #696]	; (800c334 <sc_reduce+0x1fc8>)
 800c07a:	fba2 0103 	umull	r0, r1, r2, r3
 800c07e:	1863      	adds	r3, r4, r1
 800c080:	4619      	mov	r1, r3
 800c082:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	1814      	adds	r4, r2, r0
 800c08c:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 800c090:	414b      	adcs	r3, r1
 800c092:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800c096:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800c09a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800c09e:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= s15 * 683901;
 800c0a2:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800c0a6:	4ba4      	ldr	r3, [pc, #656]	; (800c338 <sc_reduce+0x1fcc>)
 800c0a8:	fb03 f102 	mul.w	r1, r3, r2
 800c0ac:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b4:	fb03 f302 	mul.w	r3, r3, r2
 800c0b8:	18cc      	adds	r4, r1, r3
 800c0ba:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c0be:	4b9e      	ldr	r3, [pc, #632]	; (800c338 <sc_reduce+0x1fcc>)
 800c0c0:	fba2 0103 	umull	r0, r1, r2, r3
 800c0c4:	1863      	adds	r3, r4, r1
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800c0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d0:	1814      	adds	r4, r2, r0
 800c0d2:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 800c0d6:	414b      	adcs	r3, r1
 800c0d8:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800c0dc:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800c0e0:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800c0e4:	e9c2 3400 	strd	r3, r4, [r2]
    s15 = 0;
 800c0e8:	f04f 0200 	mov.w	r2, #0
 800c0ec:	f04f 0300 	mov.w	r3, #0
 800c0f0:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 800c0f4:	e9c1 2300 	strd	r2, r3, [r1]
    s2 += s14 * 666643;
 800c0f8:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c0fc:	4b8f      	ldr	r3, [pc, #572]	; (800c33c <sc_reduce+0x1fd0>)
 800c0fe:	fb03 f102 	mul.w	r1, r3, r2
 800c102:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c106:	2300      	movs	r3, #0
 800c108:	fb03 f302 	mul.w	r3, r3, r2
 800c10c:	18cc      	adds	r4, r1, r3
 800c10e:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c112:	4b8a      	ldr	r3, [pc, #552]	; (800c33c <sc_reduce+0x1fd0>)
 800c114:	fba2 0103 	umull	r0, r1, r2, r3
 800c118:	1863      	adds	r3, r4, r1
 800c11a:	4619      	mov	r1, r3
 800c11c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800c120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c124:	1814      	adds	r4, r2, r0
 800c126:	f8c7 4320 	str.w	r4, [r7, #800]	; 0x320
 800c12a:	414b      	adcs	r3, r1
 800c12c:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800c130:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 800c134:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800c138:	e9c2 3400 	strd	r3, r4, [r2]
    s3 += s14 * 470296;
 800c13c:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c140:	4b79      	ldr	r3, [pc, #484]	; (800c328 <sc_reduce+0x1fbc>)
 800c142:	fb03 f102 	mul.w	r1, r3, r2
 800c146:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c14a:	2300      	movs	r3, #0
 800c14c:	fb03 f302 	mul.w	r3, r3, r2
 800c150:	18cc      	adds	r4, r1, r3
 800c152:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c156:	4b74      	ldr	r3, [pc, #464]	; (800c328 <sc_reduce+0x1fbc>)
 800c158:	fba2 0103 	umull	r0, r1, r2, r3
 800c15c:	1863      	adds	r3, r4, r1
 800c15e:	4619      	mov	r1, r3
 800c160:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c168:	1814      	adds	r4, r2, r0
 800c16a:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
 800c16e:	414b      	adcs	r3, r1
 800c170:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800c174:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800c178:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800c17c:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s14 * 654183;
 800c180:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c184:	4b69      	ldr	r3, [pc, #420]	; (800c32c <sc_reduce+0x1fc0>)
 800c186:	fb03 f102 	mul.w	r1, r3, r2
 800c18a:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c18e:	2300      	movs	r3, #0
 800c190:	fb03 f302 	mul.w	r3, r3, r2
 800c194:	18cc      	adds	r4, r1, r3
 800c196:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c19a:	4b64      	ldr	r3, [pc, #400]	; (800c32c <sc_reduce+0x1fc0>)
 800c19c:	fba2 0103 	umull	r0, r1, r2, r3
 800c1a0:	1863      	adds	r3, r4, r1
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	1814      	adds	r4, r2, r0
 800c1ae:	f8c7 4310 	str.w	r4, [r7, #784]	; 0x310
 800c1b2:	414b      	adcs	r3, r1
 800c1b4:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800c1b8:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800c1bc:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800c1c0:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s14 * 997805;
 800c1c4:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c1c8:	4b59      	ldr	r3, [pc, #356]	; (800c330 <sc_reduce+0x1fc4>)
 800c1ca:	fb03 f102 	mul.w	r1, r3, r2
 800c1ce:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d6:	fb03 f302 	mul.w	r3, r3, r2
 800c1da:	18cc      	adds	r4, r1, r3
 800c1dc:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c1e0:	4b53      	ldr	r3, [pc, #332]	; (800c330 <sc_reduce+0x1fc4>)
 800c1e2:	fba2 0103 	umull	r0, r1, r2, r3
 800c1e6:	1863      	adds	r3, r4, r1
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f2:	1814      	adds	r4, r2, r0
 800c1f4:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 800c1f8:	414b      	adcs	r3, r1
 800c1fa:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800c1fe:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 800c202:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800c206:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s14 * 136657;
 800c20a:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c20e:	4b49      	ldr	r3, [pc, #292]	; (800c334 <sc_reduce+0x1fc8>)
 800c210:	fb03 f102 	mul.w	r1, r3, r2
 800c214:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c218:	2300      	movs	r3, #0
 800c21a:	fb03 f302 	mul.w	r3, r3, r2
 800c21e:	18cc      	adds	r4, r1, r3
 800c220:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c224:	4b43      	ldr	r3, [pc, #268]	; (800c334 <sc_reduce+0x1fc8>)
 800c226:	fba2 0103 	umull	r0, r1, r2, r3
 800c22a:	1863      	adds	r3, r4, r1
 800c22c:	4619      	mov	r1, r3
 800c22e:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	1814      	adds	r4, r2, r0
 800c238:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300
 800c23c:	414b      	adcs	r3, r1
 800c23e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800c242:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800c246:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800c24a:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= s14 * 683901;
 800c24e:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c252:	4b39      	ldr	r3, [pc, #228]	; (800c338 <sc_reduce+0x1fcc>)
 800c254:	fb03 f102 	mul.w	r1, r3, r2
 800c258:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c25c:	f04f 33ff 	mov.w	r3, #4294967295
 800c260:	fb03 f302 	mul.w	r3, r3, r2
 800c264:	18cc      	adds	r4, r1, r3
 800c266:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c26a:	4b33      	ldr	r3, [pc, #204]	; (800c338 <sc_reduce+0x1fcc>)
 800c26c:	fba2 0103 	umull	r0, r1, r2, r3
 800c270:	1863      	adds	r3, r4, r1
 800c272:	4619      	mov	r1, r3
 800c274:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	1814      	adds	r4, r2, r0
 800c27e:	f8c7 42f8 	str.w	r4, [r7, #760]	; 0x2f8
 800c282:	414b      	adcs	r3, r1
 800c284:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800c288:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800c28c:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800c290:	e9c2 3400 	strd	r3, r4, [r2]
    s14 = 0;
 800c294:	f04f 0200 	mov.w	r2, #0
 800c298:	f04f 0300 	mov.w	r3, #0
 800c29c:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 800c2a0:	e9c1 2300 	strd	r2, r3, [r1]
    s1 += s13 * 666643;
 800c2a4:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800c2a8:	4b24      	ldr	r3, [pc, #144]	; (800c33c <sc_reduce+0x1fd0>)
 800c2aa:	fb03 f102 	mul.w	r1, r3, r2
 800c2ae:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	fb03 f302 	mul.w	r3, r3, r2
 800c2b8:	18cc      	adds	r4, r1, r3
 800c2ba:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c2be:	4b1f      	ldr	r3, [pc, #124]	; (800c33c <sc_reduce+0x1fd0>)
 800c2c0:	fba2 0103 	umull	r0, r1, r2, r3
 800c2c4:	1863      	adds	r3, r4, r1
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800c2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d0:	1814      	adds	r4, r2, r0
 800c2d2:	f8c7 42f0 	str.w	r4, [r7, #752]	; 0x2f0
 800c2d6:	414b      	adcs	r3, r1
 800c2d8:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800c2dc:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 800c2e0:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800c2e4:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s13 * 470296;
 800c2e8:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800c2ec:	4b0e      	ldr	r3, [pc, #56]	; (800c328 <sc_reduce+0x1fbc>)
 800c2ee:	fb03 f102 	mul.w	r1, r3, r2
 800c2f2:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	fb03 f302 	mul.w	r3, r3, r2
 800c2fc:	18cc      	adds	r4, r1, r3
 800c2fe:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c302:	4b09      	ldr	r3, [pc, #36]	; (800c328 <sc_reduce+0x1fbc>)
 800c304:	fba2 0103 	umull	r0, r1, r2, r3
 800c308:	1863      	adds	r3, r4, r1
 800c30a:	4619      	mov	r1, r3
 800c30c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c314:	1814      	adds	r4, r2, r0
 800c316:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 800c31a:	414b      	adcs	r3, r1
 800c31c:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800c320:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 800c324:	e00c      	b.n	800c340 <sc_reduce+0x1fd4>
 800c326:	bf00      	nop
 800c328:	00072d18 	.word	0x00072d18
 800c32c:	0009fb67 	.word	0x0009fb67
 800c330:	fff0c653 	.word	0xfff0c653
 800c334:	000215d1 	.word	0x000215d1
 800c338:	fff59083 	.word	0xfff59083
 800c33c:	000a2c13 	.word	0x000a2c13
 800c340:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800c344:	e9c2 3400 	strd	r3, r4, [r2]
    s3 += s13 * 654183;
 800c348:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800c34c:	4be9      	ldr	r3, [pc, #932]	; (800c6f4 <sc_reduce+0x2388>)
 800c34e:	fb03 f102 	mul.w	r1, r3, r2
 800c352:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c356:	2300      	movs	r3, #0
 800c358:	fb03 f302 	mul.w	r3, r3, r2
 800c35c:	18cc      	adds	r4, r1, r3
 800c35e:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c362:	4be4      	ldr	r3, [pc, #912]	; (800c6f4 <sc_reduce+0x2388>)
 800c364:	fba2 0103 	umull	r0, r1, r2, r3
 800c368:	1863      	adds	r3, r4, r1
 800c36a:	4619      	mov	r1, r3
 800c36c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800c370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c374:	1814      	adds	r4, r2, r0
 800c376:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 800c37a:	414b      	adcs	r3, r1
 800c37c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800c380:	e9d7 34b8 	ldrd	r3, r4, [r7, #736]	; 0x2e0
 800c384:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800c388:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= s13 * 997805;
 800c38c:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800c390:	4bd9      	ldr	r3, [pc, #868]	; (800c6f8 <sc_reduce+0x238c>)
 800c392:	fb03 f102 	mul.w	r1, r3, r2
 800c396:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c39a:	f04f 33ff 	mov.w	r3, #4294967295
 800c39e:	fb03 f302 	mul.w	r3, r3, r2
 800c3a2:	18cc      	adds	r4, r1, r3
 800c3a4:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c3a8:	4bd3      	ldr	r3, [pc, #844]	; (800c6f8 <sc_reduce+0x238c>)
 800c3aa:	fba2 0103 	umull	r0, r1, r2, r3
 800c3ae:	1863      	adds	r3, r4, r1
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800c3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ba:	1814      	adds	r4, r2, r0
 800c3bc:	f8c7 42d8 	str.w	r4, [r7, #728]	; 0x2d8
 800c3c0:	414b      	adcs	r3, r1
 800c3c2:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800c3c6:	e9d7 34b6 	ldrd	r3, r4, [r7, #728]	; 0x2d8
 800c3ca:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800c3ce:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s13 * 136657;
 800c3d2:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800c3d6:	4bc9      	ldr	r3, [pc, #804]	; (800c6fc <sc_reduce+0x2390>)
 800c3d8:	fb03 f102 	mul.w	r1, r3, r2
 800c3dc:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	fb03 f302 	mul.w	r3, r3, r2
 800c3e6:	18cc      	adds	r4, r1, r3
 800c3e8:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c3ec:	4bc3      	ldr	r3, [pc, #780]	; (800c6fc <sc_reduce+0x2390>)
 800c3ee:	fba2 0103 	umull	r0, r1, r2, r3
 800c3f2:	1863      	adds	r3, r4, r1
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	1814      	adds	r4, r2, r0
 800c400:	f8c7 42d0 	str.w	r4, [r7, #720]	; 0x2d0
 800c404:	414b      	adcs	r3, r1
 800c406:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800c40a:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800c40e:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800c412:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= s13 * 683901;
 800c416:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800c41a:	4bb9      	ldr	r3, [pc, #740]	; (800c700 <sc_reduce+0x2394>)
 800c41c:	fb03 f102 	mul.w	r1, r3, r2
 800c420:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c424:	f04f 33ff 	mov.w	r3, #4294967295
 800c428:	fb03 f302 	mul.w	r3, r3, r2
 800c42c:	18cc      	adds	r4, r1, r3
 800c42e:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c432:	4bb3      	ldr	r3, [pc, #716]	; (800c700 <sc_reduce+0x2394>)
 800c434:	fba2 0103 	umull	r0, r1, r2, r3
 800c438:	1863      	adds	r3, r4, r1
 800c43a:	4619      	mov	r1, r3
 800c43c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800c440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c444:	1814      	adds	r4, r2, r0
 800c446:	f8c7 42c8 	str.w	r4, [r7, #712]	; 0x2c8
 800c44a:	414b      	adcs	r3, r1
 800c44c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800c450:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800c454:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800c458:	e9c2 3400 	strd	r3, r4, [r2]
    s13 = 0;
 800c45c:	f04f 0200 	mov.w	r2, #0
 800c460:	f04f 0300 	mov.w	r3, #0
 800c464:	f507 61f8 	add.w	r1, r7, #1984	; 0x7c0
 800c468:	e9c1 2300 	strd	r2, r3, [r1]
    s0 += s12 * 666643;
 800c46c:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800c470:	4ba4      	ldr	r3, [pc, #656]	; (800c704 <sc_reduce+0x2398>)
 800c472:	fb03 f102 	mul.w	r1, r3, r2
 800c476:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c47a:	2300      	movs	r3, #0
 800c47c:	fb03 f302 	mul.w	r3, r3, r2
 800c480:	18cc      	adds	r4, r1, r3
 800c482:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c486:	4b9f      	ldr	r3, [pc, #636]	; (800c704 <sc_reduce+0x2398>)
 800c488:	fba2 0103 	umull	r0, r1, r2, r3
 800c48c:	1863      	adds	r3, r4, r1
 800c48e:	4619      	mov	r1, r3
 800c490:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	1814      	adds	r4, r2, r0
 800c49a:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 800c49e:	414b      	adcs	r3, r1
 800c4a0:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800c4a4:	e9d7 34b0 	ldrd	r3, r4, [r7, #704]	; 0x2c0
 800c4a8:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800c4ac:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 800c4b0:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800c4b4:	4b94      	ldr	r3, [pc, #592]	; (800c708 <sc_reduce+0x239c>)
 800c4b6:	fb03 f102 	mul.w	r1, r3, r2
 800c4ba:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c4be:	2300      	movs	r3, #0
 800c4c0:	fb03 f302 	mul.w	r3, r3, r2
 800c4c4:	18cc      	adds	r4, r1, r3
 800c4c6:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c4ca:	4b8f      	ldr	r3, [pc, #572]	; (800c708 <sc_reduce+0x239c>)
 800c4cc:	fba2 0103 	umull	r0, r1, r2, r3
 800c4d0:	1863      	adds	r3, r4, r1
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800c4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4dc:	1814      	adds	r4, r2, r0
 800c4de:	f8c7 42b8 	str.w	r4, [r7, #696]	; 0x2b8
 800c4e2:	414b      	adcs	r3, r1
 800c4e4:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800c4e8:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800c4ec:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800c4f0:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 800c4f4:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800c4f8:	4b7e      	ldr	r3, [pc, #504]	; (800c6f4 <sc_reduce+0x2388>)
 800c4fa:	fb03 f102 	mul.w	r1, r3, r2
 800c4fe:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c502:	2300      	movs	r3, #0
 800c504:	fb03 f302 	mul.w	r3, r3, r2
 800c508:	18cc      	adds	r4, r1, r3
 800c50a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c50e:	4b79      	ldr	r3, [pc, #484]	; (800c6f4 <sc_reduce+0x2388>)
 800c510:	fba2 0103 	umull	r0, r1, r2, r3
 800c514:	1863      	adds	r3, r4, r1
 800c516:	4619      	mov	r1, r3
 800c518:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	1814      	adds	r4, r2, r0
 800c522:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 800c526:	414b      	adcs	r3, r1
 800c528:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800c52c:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800c530:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800c534:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 800c538:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800c53c:	4b6e      	ldr	r3, [pc, #440]	; (800c6f8 <sc_reduce+0x238c>)
 800c53e:	fb03 f102 	mul.w	r1, r3, r2
 800c542:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c546:	f04f 33ff 	mov.w	r3, #4294967295
 800c54a:	fb03 f302 	mul.w	r3, r3, r2
 800c54e:	18cc      	adds	r4, r1, r3
 800c550:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c554:	4b68      	ldr	r3, [pc, #416]	; (800c6f8 <sc_reduce+0x238c>)
 800c556:	fba2 0103 	umull	r0, r1, r2, r3
 800c55a:	1863      	adds	r3, r4, r1
 800c55c:	4619      	mov	r1, r3
 800c55e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800c562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c566:	1814      	adds	r4, r2, r0
 800c568:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 800c56c:	414b      	adcs	r3, r1
 800c56e:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800c572:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	; 0x2a8
 800c576:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800c57a:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 800c57e:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800c582:	4b5e      	ldr	r3, [pc, #376]	; (800c6fc <sc_reduce+0x2390>)
 800c584:	fb03 f102 	mul.w	r1, r3, r2
 800c588:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c58c:	2300      	movs	r3, #0
 800c58e:	fb03 f302 	mul.w	r3, r3, r2
 800c592:	18cc      	adds	r4, r1, r3
 800c594:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c598:	4b58      	ldr	r3, [pc, #352]	; (800c6fc <sc_reduce+0x2390>)
 800c59a:	fba2 0103 	umull	r0, r1, r2, r3
 800c59e:	1863      	adds	r3, r4, r1
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800c5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5aa:	1814      	adds	r4, r2, r0
 800c5ac:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 800c5b0:	414b      	adcs	r3, r1
 800c5b2:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800c5b6:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800c5ba:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800c5be:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 800c5c2:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800c5c6:	4b4e      	ldr	r3, [pc, #312]	; (800c700 <sc_reduce+0x2394>)
 800c5c8:	fb03 f102 	mul.w	r1, r3, r2
 800c5cc:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d4:	fb03 f302 	mul.w	r3, r3, r2
 800c5d8:	18cc      	adds	r4, r1, r3
 800c5da:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800c5de:	4b48      	ldr	r3, [pc, #288]	; (800c700 <sc_reduce+0x2394>)
 800c5e0:	fba2 0103 	umull	r0, r1, r2, r3
 800c5e4:	1863      	adds	r3, r4, r1
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	1814      	adds	r4, r2, r0
 800c5f2:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 800c5f6:	414b      	adcs	r3, r1
 800c5f8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800c5fc:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800c600:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800c604:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 800c608:	f04f 0200 	mov.w	r2, #0
 800c60c:	f04f 0300 	mov.w	r3, #0
 800c610:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 800c614:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = (s0 + (1 << 20)) >> 21;
 800c618:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800c624:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 800c628:	f143 0300 	adc.w	r3, r3, #0
 800c62c:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 800c630:	f04f 0200 	mov.w	r2, #0
 800c634:	f04f 0300 	mov.w	r3, #0
 800c638:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 800c63c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c640:	4621      	mov	r1, r4
 800c642:	0d4a      	lsrs	r2, r1, #21
 800c644:	4629      	mov	r1, r5
 800c646:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800c64a:	4629      	mov	r1, r5
 800c64c:	154b      	asrs	r3, r1, #21
 800c64e:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 800c652:	e9c1 2300 	strd	r2, r3, [r1]
    s1 += carry0;
 800c656:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800c65a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c65e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	1884      	adds	r4, r0, r2
 800c668:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 800c66c:	eb41 0303 	adc.w	r3, r1, r3
 800c670:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800c674:	e9d7 34a4 	ldrd	r3, r4, [r7, #656]	; 0x290
 800c678:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800c67c:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 800c680:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800c684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c688:	f04f 0000 	mov.w	r0, #0
 800c68c:	f04f 0100 	mov.w	r1, #0
 800c690:	0559      	lsls	r1, r3, #21
 800c692:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800c696:	0550      	lsls	r0, r2, #21
 800c698:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	1a14      	subs	r4, r2, r0
 800c6a2:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 800c6a6:	eb63 0301 	sbc.w	r3, r3, r1
 800c6aa:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800c6ae:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800c6b2:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800c6b6:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = (s2 + (1 << 20)) >> 21;
 800c6ba:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c2:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800c6c6:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 800c6ca:	f143 0300 	adc.w	r3, r3, #0
 800c6ce:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 800c6d2:	f04f 0200 	mov.w	r2, #0
 800c6d6:	f04f 0300 	mov.w	r3, #0
 800c6da:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 800c6de:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c6e2:	4621      	mov	r1, r4
 800c6e4:	0d4a      	lsrs	r2, r1, #21
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	154b      	asrs	r3, r1, #21
 800c6f0:	e00c      	b.n	800c70c <sc_reduce+0x23a0>
 800c6f2:	bf00      	nop
 800c6f4:	0009fb67 	.word	0x0009fb67
 800c6f8:	fff0c653 	.word	0xfff0c653
 800c6fc:	000215d1 	.word	0x000215d1
 800c700:	fff59083 	.word	0xfff59083
 800c704:	000a2c13 	.word	0x000a2c13
 800c708:	00072d18 	.word	0x00072d18
 800c70c:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 800c710:	e9c1 2300 	strd	r2, r3, [r1]
    s3 += carry2;
 800c714:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800c718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c71c:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	1884      	adds	r4, r0, r2
 800c726:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 800c72a:	eb41 0303 	adc.w	r3, r1, r3
 800c72e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800c732:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800c736:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800c73a:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 800c73e:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800c742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c746:	f04f 0000 	mov.w	r0, #0
 800c74a:	f04f 0100 	mov.w	r1, #0
 800c74e:	0559      	lsls	r1, r3, #21
 800c750:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800c754:	0550      	lsls	r0, r2, #21
 800c756:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	1a14      	subs	r4, r2, r0
 800c760:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 800c764:	eb63 0301 	sbc.w	r3, r3, r1
 800c768:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800c76c:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	; 0x278
 800c770:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800c774:	e9c2 3400 	strd	r3, r4, [r2]
    carry4 = (s4 + (1 << 20)) >> 21;
 800c778:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c780:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800c784:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 800c788:	f143 0300 	adc.w	r3, r3, #0
 800c78c:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 800c790:	f04f 0200 	mov.w	r2, #0
 800c794:	f04f 0300 	mov.w	r3, #0
 800c798:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 800c79c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	0d4a      	lsrs	r2, r1, #21
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	154b      	asrs	r3, r1, #21
 800c7ae:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 800c7b2:	e9c1 2300 	strd	r2, r3, [r1]
    s5 += carry4;
 800c7b6:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c7ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7be:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	1884      	adds	r4, r0, r2
 800c7c8:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 800c7cc:	eb41 0303 	adc.w	r3, r1, r3
 800c7d0:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800c7d4:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800c7d8:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800c7dc:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 800c7e0:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800c7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e8:	f04f 0000 	mov.w	r0, #0
 800c7ec:	f04f 0100 	mov.w	r1, #0
 800c7f0:	0559      	lsls	r1, r3, #21
 800c7f2:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800c7f6:	0550      	lsls	r0, r2, #21
 800c7f8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	1a14      	subs	r4, r2, r0
 800c802:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 800c806:	eb63 0301 	sbc.w	r3, r3, r1
 800c80a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800c80e:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800c812:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800c816:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = (s6 + (1 << 20)) >> 21;
 800c81a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800c826:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 800c82a:	f143 0300 	adc.w	r3, r3, #0
 800c82e:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 800c832:	f04f 0200 	mov.w	r2, #0
 800c836:	f04f 0300 	mov.w	r3, #0
 800c83a:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 800c83e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c842:	4621      	mov	r1, r4
 800c844:	0d4a      	lsrs	r2, r1, #21
 800c846:	4629      	mov	r1, r5
 800c848:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800c84c:	4629      	mov	r1, r5
 800c84e:	154b      	asrs	r3, r1, #21
 800c850:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800c854:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += carry6;
 800c858:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800c85c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c860:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800c864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c868:	1884      	adds	r4, r0, r2
 800c86a:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 800c86e:	eb41 0303 	adc.w	r3, r1, r3
 800c872:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800c876:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	; 0x260
 800c87a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800c87e:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 800c882:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	f04f 0000 	mov.w	r0, #0
 800c88e:	f04f 0100 	mov.w	r1, #0
 800c892:	0559      	lsls	r1, r3, #21
 800c894:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800c898:	0550      	lsls	r0, r2, #21
 800c89a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800c89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a2:	1a14      	subs	r4, r2, r0
 800c8a4:	f8c7 4258 	str.w	r4, [r7, #600]	; 0x258
 800c8a8:	eb63 0301 	sbc.w	r3, r3, r1
 800c8ac:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800c8b0:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800c8b4:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800c8b8:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (s8 + (1 << 20)) >> 21;
 800c8bc:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800c8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c4:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800c8c8:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 800c8cc:	f143 0300 	adc.w	r3, r3, #0
 800c8d0:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 800c8d4:	f04f 0200 	mov.w	r2, #0
 800c8d8:	f04f 0300 	mov.w	r3, #0
 800c8dc:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 800c8e0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	0d4a      	lsrs	r2, r1, #21
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800c8ee:	4629      	mov	r1, r5
 800c8f0:	154b      	asrs	r3, r1, #21
 800c8f2:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 800c8f6:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += carry8;
 800c8fa:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800c8fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c902:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	1884      	adds	r4, r0, r2
 800c90c:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 800c910:	eb41 0303 	adc.w	r3, r1, r3
 800c914:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800c918:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800c91c:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800c920:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 800c924:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	f04f 0000 	mov.w	r0, #0
 800c930:	f04f 0100 	mov.w	r1, #0
 800c934:	0559      	lsls	r1, r3, #21
 800c936:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800c93a:	0550      	lsls	r0, r2, #21
 800c93c:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800c940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c944:	1a14      	subs	r4, r2, r0
 800c946:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 800c94a:	eb63 0301 	sbc.w	r3, r3, r1
 800c94e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800c952:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800c956:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800c95a:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = (s10 + (1 << 20)) >> 21;
 800c95e:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800c962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c966:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800c96a:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 800c96e:	f143 0300 	adc.w	r3, r3, #0
 800c972:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 800c976:	f04f 0200 	mov.w	r2, #0
 800c97a:	f04f 0300 	mov.w	r3, #0
 800c97e:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 800c982:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c986:	4621      	mov	r1, r4
 800c988:	0d4a      	lsrs	r2, r1, #21
 800c98a:	4629      	mov	r1, r5
 800c98c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800c990:	4629      	mov	r1, r5
 800c992:	154b      	asrs	r3, r1, #21
 800c994:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800c998:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 800c99c:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800c9a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9a4:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	1884      	adds	r4, r0, r2
 800c9ae:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 800c9b2:	eb41 0303 	adc.w	r3, r1, r3
 800c9b6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800c9ba:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800c9be:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800c9c2:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 800c9c6:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800c9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ce:	f04f 0000 	mov.w	r0, #0
 800c9d2:	f04f 0100 	mov.w	r1, #0
 800c9d6:	0559      	lsls	r1, r3, #21
 800c9d8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800c9dc:	0550      	lsls	r0, r2, #21
 800c9de:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	1a14      	subs	r4, r2, r0
 800c9e8:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 800c9ec:	eb63 0301 	sbc.w	r3, r3, r1
 800c9f0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800c9f4:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800c9f8:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800c9fc:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = (s1 + (1 << 20)) >> 21;
 800ca00:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800ca0c:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 800ca10:	f143 0300 	adc.w	r3, r3, #0
 800ca14:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 800ca18:	f04f 0200 	mov.w	r2, #0
 800ca1c:	f04f 0300 	mov.w	r3, #0
 800ca20:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 800ca24:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ca28:	4621      	mov	r1, r4
 800ca2a:	0d4a      	lsrs	r2, r1, #21
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800ca32:	4629      	mov	r1, r5
 800ca34:	154b      	asrs	r3, r1, #21
 800ca36:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 800ca3a:	e9c1 2300 	strd	r2, r3, [r1]
    s2 += carry1;
 800ca3e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800ca42:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca46:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800ca4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4e:	1884      	adds	r4, r0, r2
 800ca50:	f8c7 4230 	str.w	r4, [r7, #560]	; 0x230
 800ca54:	eb41 0303 	adc.w	r3, r1, r3
 800ca58:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800ca5c:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 800ca60:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800ca64:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 800ca68:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800ca6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca70:	f04f 0000 	mov.w	r0, #0
 800ca74:	f04f 0100 	mov.w	r1, #0
 800ca78:	0559      	lsls	r1, r3, #21
 800ca7a:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800ca7e:	0550      	lsls	r0, r2, #21
 800ca80:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca88:	1a14      	subs	r4, r2, r0
 800ca8a:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 800ca8e:	eb63 0301 	sbc.w	r3, r3, r1
 800ca92:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800ca96:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800ca9a:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800ca9e:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = (s3 + (1 << 20)) >> 21;
 800caa2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800caae:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 800cab2:	f143 0300 	adc.w	r3, r3, #0
 800cab6:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 800caba:	f04f 0200 	mov.w	r2, #0
 800cabe:	f04f 0300 	mov.w	r3, #0
 800cac2:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 800cac6:	e9d1 4500 	ldrd	r4, r5, [r1]
 800caca:	4621      	mov	r1, r4
 800cacc:	0d4a      	lsrs	r2, r1, #21
 800cace:	4629      	mov	r1, r5
 800cad0:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800cad4:	4629      	mov	r1, r5
 800cad6:	154b      	asrs	r3, r1, #21
 800cad8:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 800cadc:	e9c1 2300 	strd	r2, r3, [r1]
    s4 += carry3;
 800cae0:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800cae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cae8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800caec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf0:	1884      	adds	r4, r0, r2
 800caf2:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 800caf6:	eb41 0303 	adc.w	r3, r1, r3
 800cafa:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800cafe:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800cb02:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800cb06:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 800cb0a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	f04f 0000 	mov.w	r0, #0
 800cb16:	f04f 0100 	mov.w	r1, #0
 800cb1a:	0559      	lsls	r1, r3, #21
 800cb1c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800cb20:	0550      	lsls	r0, r2, #21
 800cb22:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800cb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2a:	1a14      	subs	r4, r2, r0
 800cb2c:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 800cb30:	eb63 0301 	sbc.w	r3, r3, r1
 800cb34:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800cb38:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 800cb3c:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800cb40:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = (s5 + (1 << 20)) >> 21;
 800cb44:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800cb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4c:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800cb50:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 800cb54:	f143 0300 	adc.w	r3, r3, #0
 800cb58:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 800cb5c:	f04f 0200 	mov.w	r2, #0
 800cb60:	f04f 0300 	mov.w	r3, #0
 800cb64:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 800cb68:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	0d4a      	lsrs	r2, r1, #21
 800cb70:	4629      	mov	r1, r5
 800cb72:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800cb76:	4629      	mov	r1, r5
 800cb78:	154b      	asrs	r3, r1, #21
 800cb7a:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 800cb7e:	e9c1 2300 	strd	r2, r3, [r1]
    s6 += carry5;
 800cb82:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800cb86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb8a:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800cb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb92:	1884      	adds	r4, r0, r2
 800cb94:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 800cb98:	eb41 0303 	adc.w	r3, r1, r3
 800cb9c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800cba0:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800cba4:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800cba8:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 800cbac:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb4:	f04f 0000 	mov.w	r0, #0
 800cbb8:	f04f 0100 	mov.w	r1, #0
 800cbbc:	0559      	lsls	r1, r3, #21
 800cbbe:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800cbc2:	0550      	lsls	r0, r2, #21
 800cbc4:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800cbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbcc:	1a14      	subs	r4, r2, r0
 800cbce:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 800cbd2:	eb63 0301 	sbc.w	r3, r3, r1
 800cbd6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800cbda:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800cbde:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800cbe2:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (s7 + (1 << 20)) >> 21;
 800cbe6:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800cbf2:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 800cbf6:	f143 0300 	adc.w	r3, r3, #0
 800cbfa:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 800cbfe:	f04f 0200 	mov.w	r2, #0
 800cc02:	f04f 0300 	mov.w	r3, #0
 800cc06:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 800cc0a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cc0e:	4621      	mov	r1, r4
 800cc10:	0d4a      	lsrs	r2, r1, #21
 800cc12:	4629      	mov	r1, r5
 800cc14:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800cc18:	4629      	mov	r1, r5
 800cc1a:	154b      	asrs	r3, r1, #21
 800cc1c:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 800cc20:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += carry7;
 800cc24:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800cc28:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc2c:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc34:	1884      	adds	r4, r0, r2
 800cc36:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 800cc3a:	eb41 0303 	adc.w	r3, r1, r3
 800cc3e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800cc42:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 800cc46:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800cc4a:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 800cc4e:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800cc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc56:	f04f 0000 	mov.w	r0, #0
 800cc5a:	f04f 0100 	mov.w	r1, #0
 800cc5e:	0559      	lsls	r1, r3, #21
 800cc60:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800cc64:	0550      	lsls	r0, r2, #21
 800cc66:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	1a14      	subs	r4, r2, r0
 800cc70:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 800cc74:	eb63 0301 	sbc.w	r3, r3, r1
 800cc78:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800cc7c:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 800cc80:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800cc84:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = (s9 + (1 << 20)) >> 21;
 800cc88:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc90:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800cc94:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 800cc98:	f143 0300 	adc.w	r3, r3, #0
 800cc9c:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 800cca0:	f04f 0200 	mov.w	r2, #0
 800cca4:	f04f 0300 	mov.w	r3, #0
 800cca8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800ccac:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	0d4a      	lsrs	r2, r1, #21
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800ccba:	4629      	mov	r1, r5
 800ccbc:	154b      	asrs	r3, r1, #21
 800ccbe:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 800ccc2:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 800ccc6:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800ccca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ccce:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	1884      	adds	r4, r0, r2
 800ccd8:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 800ccdc:	eb41 0303 	adc.w	r3, r1, r3
 800cce0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800cce4:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800cce8:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800ccec:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 800ccf0:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf8:	f04f 0000 	mov.w	r0, #0
 800ccfc:	f04f 0100 	mov.w	r1, #0
 800cd00:	0559      	lsls	r1, r3, #21
 800cd02:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800cd06:	0550      	lsls	r0, r2, #21
 800cd08:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	1a14      	subs	r4, r2, r0
 800cd12:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 800cd16:	eb63 0301 	sbc.w	r3, r3, r1
 800cd1a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800cd1e:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800cd22:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800cd26:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = (s11 + (1 << 20)) >> 21;
 800cd2a:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800cd36:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 800cd3a:	f143 0300 	adc.w	r3, r3, #0
 800cd3e:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800cd42:	f04f 0200 	mov.w	r2, #0
 800cd46:	f04f 0300 	mov.w	r3, #0
 800cd4a:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 800cd4e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cd52:	4621      	mov	r1, r4
 800cd54:	0d4a      	lsrs	r2, r1, #21
 800cd56:	4629      	mov	r1, r5
 800cd58:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	154b      	asrs	r3, r1, #21
 800cd60:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 800cd64:	e9c1 2300 	strd	r2, r3, [r1]
    s12 += carry11;
 800cd68:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800cd6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd70:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800cd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd78:	1884      	adds	r4, r0, r2
 800cd7a:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 800cd7e:	eb41 0303 	adc.w	r3, r1, r3
 800cd82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800cd86:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800cd8a:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800cd8e:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 800cd92:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800cd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9a:	f04f 0000 	mov.w	r0, #0
 800cd9e:	f04f 0100 	mov.w	r1, #0
 800cda2:	0559      	lsls	r1, r3, #21
 800cda4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800cda8:	0550      	lsls	r0, r2, #21
 800cdaa:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800cdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb2:	1a14      	subs	r4, r2, r0
 800cdb4:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 800cdb8:	eb63 0301 	sbc.w	r3, r3, r1
 800cdbc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800cdc0:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800cdc4:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800cdc8:	e9c2 3400 	strd	r3, r4, [r2]
    s0 += s12 * 666643;
 800cdcc:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800cdd0:	4bee      	ldr	r3, [pc, #952]	; (800d18c <sc_reduce+0x2e20>)
 800cdd2:	fb03 f102 	mul.w	r1, r3, r2
 800cdd6:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cdda:	2300      	movs	r3, #0
 800cddc:	fb03 f302 	mul.w	r3, r3, r2
 800cde0:	18cc      	adds	r4, r1, r3
 800cde2:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cde6:	4be9      	ldr	r3, [pc, #932]	; (800d18c <sc_reduce+0x2e20>)
 800cde8:	fba2 0103 	umull	r0, r1, r2, r3
 800cdec:	1863      	adds	r3, r4, r1
 800cdee:	4619      	mov	r1, r3
 800cdf0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800cdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf8:	1814      	adds	r4, r2, r0
 800cdfa:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 800cdfe:	414b      	adcs	r3, r1
 800ce00:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800ce04:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 800ce08:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800ce0c:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 800ce10:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800ce14:	4bde      	ldr	r3, [pc, #888]	; (800d190 <sc_reduce+0x2e24>)
 800ce16:	fb03 f102 	mul.w	r1, r3, r2
 800ce1a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800ce1e:	2300      	movs	r3, #0
 800ce20:	fb03 f302 	mul.w	r3, r3, r2
 800ce24:	18cc      	adds	r4, r1, r3
 800ce26:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800ce2a:	4bd9      	ldr	r3, [pc, #868]	; (800d190 <sc_reduce+0x2e24>)
 800ce2c:	fba2 0103 	umull	r0, r1, r2, r3
 800ce30:	1863      	adds	r3, r4, r1
 800ce32:	4619      	mov	r1, r3
 800ce34:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800ce38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3c:	1814      	adds	r4, r2, r0
 800ce3e:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 800ce42:	414b      	adcs	r3, r1
 800ce44:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800ce48:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 800ce4c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800ce50:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 800ce54:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800ce58:	4bce      	ldr	r3, [pc, #824]	; (800d194 <sc_reduce+0x2e28>)
 800ce5a:	fb03 f102 	mul.w	r1, r3, r2
 800ce5e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800ce62:	2300      	movs	r3, #0
 800ce64:	fb03 f302 	mul.w	r3, r3, r2
 800ce68:	18cc      	adds	r4, r1, r3
 800ce6a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800ce6e:	4bc9      	ldr	r3, [pc, #804]	; (800d194 <sc_reduce+0x2e28>)
 800ce70:	fba2 0103 	umull	r0, r1, r2, r3
 800ce74:	1863      	adds	r3, r4, r1
 800ce76:	4619      	mov	r1, r3
 800ce78:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800ce7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce80:	1814      	adds	r4, r2, r0
 800ce82:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 800ce86:	414b      	adcs	r3, r1
 800ce88:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800ce8c:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 800ce90:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800ce94:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 800ce98:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800ce9c:	4bbe      	ldr	r3, [pc, #760]	; (800d198 <sc_reduce+0x2e2c>)
 800ce9e:	fb03 f102 	mul.w	r1, r3, r2
 800cea2:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cea6:	f04f 33ff 	mov.w	r3, #4294967295
 800ceaa:	fb03 f302 	mul.w	r3, r3, r2
 800ceae:	18cc      	adds	r4, r1, r3
 800ceb0:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800ceb4:	4bb8      	ldr	r3, [pc, #736]	; (800d198 <sc_reduce+0x2e2c>)
 800ceb6:	fba2 0103 	umull	r0, r1, r2, r3
 800ceba:	1863      	adds	r3, r4, r1
 800cebc:	4619      	mov	r1, r3
 800cebe:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800cec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec6:	1814      	adds	r4, r2, r0
 800cec8:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 800cecc:	414b      	adcs	r3, r1
 800cece:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800ced2:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 800ced6:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800ceda:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 800cede:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800cee2:	4bae      	ldr	r3, [pc, #696]	; (800d19c <sc_reduce+0x2e30>)
 800cee4:	fb03 f102 	mul.w	r1, r3, r2
 800cee8:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800ceec:	2300      	movs	r3, #0
 800ceee:	fb03 f302 	mul.w	r3, r3, r2
 800cef2:	18cc      	adds	r4, r1, r3
 800cef4:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cef8:	4ba8      	ldr	r3, [pc, #672]	; (800d19c <sc_reduce+0x2e30>)
 800cefa:	fba2 0103 	umull	r0, r1, r2, r3
 800cefe:	1863      	adds	r3, r4, r1
 800cf00:	4619      	mov	r1, r3
 800cf02:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800cf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0a:	1814      	adds	r4, r2, r0
 800cf0c:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 800cf10:	414b      	adcs	r3, r1
 800cf12:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800cf16:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 800cf1a:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800cf1e:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 800cf22:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800cf26:	4b9e      	ldr	r3, [pc, #632]	; (800d1a0 <sc_reduce+0x2e34>)
 800cf28:	fb03 f102 	mul.w	r1, r3, r2
 800cf2c:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cf30:	f04f 33ff 	mov.w	r3, #4294967295
 800cf34:	fb03 f302 	mul.w	r3, r3, r2
 800cf38:	18cc      	adds	r4, r1, r3
 800cf3a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cf3e:	4b98      	ldr	r3, [pc, #608]	; (800d1a0 <sc_reduce+0x2e34>)
 800cf40:	fba2 0103 	umull	r0, r1, r2, r3
 800cf44:	1863      	adds	r3, r4, r1
 800cf46:	4619      	mov	r1, r3
 800cf48:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800cf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf50:	1814      	adds	r4, r2, r0
 800cf52:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 800cf56:	414b      	adcs	r3, r1
 800cf58:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800cf5c:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800cf60:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800cf64:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 800cf68:	f04f 0200 	mov.w	r2, #0
 800cf6c:	f04f 0300 	mov.w	r3, #0
 800cf70:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 800cf74:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = s0 >> 21;
 800cf78:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf80:	f04f 0000 	mov.w	r0, #0
 800cf84:	f04f 0100 	mov.w	r1, #0
 800cf88:	0d50      	lsrs	r0, r2, #21
 800cf8a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800cf8e:	1559      	asrs	r1, r3, #21
 800cf90:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800cf94:	e9c3 0100 	strd	r0, r1, [r3]
    s1 += carry0;
 800cf98:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800cf9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfa0:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa8:	1884      	adds	r4, r0, r2
 800cfaa:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 800cfae:	eb41 0303 	adc.w	r3, r1, r3
 800cfb2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800cfb6:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 800cfba:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800cfbe:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 800cfc2:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfca:	f04f 0000 	mov.w	r0, #0
 800cfce:	f04f 0100 	mov.w	r1, #0
 800cfd2:	0559      	lsls	r1, r3, #21
 800cfd4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800cfd8:	0550      	lsls	r0, r2, #21
 800cfda:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800cfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe2:	1a14      	subs	r4, r2, r0
 800cfe4:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 800cfe8:	eb63 0301 	sbc.w	r3, r3, r1
 800cfec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800cff0:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 800cff4:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800cff8:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = s1 >> 21;
 800cffc:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d004:	f04f 0000 	mov.w	r0, #0
 800d008:	f04f 0100 	mov.w	r1, #0
 800d00c:	0d50      	lsrs	r0, r2, #21
 800d00e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d012:	1559      	asrs	r1, r3, #21
 800d014:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800d018:	e9c3 0100 	strd	r0, r1, [r3]
    s2 += carry1;
 800d01c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d020:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d024:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d02c:	1884      	adds	r4, r0, r2
 800d02e:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 800d032:	eb41 0303 	adc.w	r3, r1, r3
 800d036:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800d03a:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 800d03e:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800d042:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 800d046:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04e:	f04f 0000 	mov.w	r0, #0
 800d052:	f04f 0100 	mov.w	r1, #0
 800d056:	0559      	lsls	r1, r3, #21
 800d058:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d05c:	0550      	lsls	r0, r2, #21
 800d05e:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d066:	1a14      	subs	r4, r2, r0
 800d068:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 800d06c:	eb63 0301 	sbc.w	r3, r3, r1
 800d070:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800d074:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800d078:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800d07c:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = s2 >> 21;
 800d080:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d088:	f04f 0000 	mov.w	r0, #0
 800d08c:	f04f 0100 	mov.w	r1, #0
 800d090:	0d50      	lsrs	r0, r2, #21
 800d092:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d096:	1559      	asrs	r1, r3, #21
 800d098:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800d09c:	e9c3 0100 	strd	r0, r1, [r3]
    s3 += carry2;
 800d0a0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d0a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d0a8:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800d0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b0:	1884      	adds	r4, r0, r2
 800d0b2:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 800d0b6:	eb41 0303 	adc.w	r3, r1, r3
 800d0ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800d0be:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 800d0c2:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800d0c6:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 800d0ca:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800d0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d2:	f04f 0000 	mov.w	r0, #0
 800d0d6:	f04f 0100 	mov.w	r1, #0
 800d0da:	0559      	lsls	r1, r3, #21
 800d0dc:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d0e0:	0550      	lsls	r0, r2, #21
 800d0e2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ea:	1a14      	subs	r4, r2, r0
 800d0ec:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800d0f0:	eb63 0301 	sbc.w	r3, r3, r1
 800d0f4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800d0f8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800d0fc:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800d100:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = s3 >> 21;
 800d104:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10c:	f04f 0000 	mov.w	r0, #0
 800d110:	f04f 0100 	mov.w	r1, #0
 800d114:	0d50      	lsrs	r0, r2, #21
 800d116:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d11a:	1559      	asrs	r1, r3, #21
 800d11c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800d120:	e9c3 0100 	strd	r0, r1, [r3]
    s4 += carry3;
 800d124:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d12c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800d130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d134:	1884      	adds	r4, r0, r2
 800d136:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 800d13a:	eb41 0303 	adc.w	r3, r1, r3
 800d13e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800d142:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800d146:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800d14a:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 800d14e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800d152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d156:	f04f 0000 	mov.w	r0, #0
 800d15a:	f04f 0100 	mov.w	r1, #0
 800d15e:	0559      	lsls	r1, r3, #21
 800d160:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d164:	0550      	lsls	r0, r2, #21
 800d166:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16e:	1a14      	subs	r4, r2, r0
 800d170:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800d174:	eb63 0301 	sbc.w	r3, r3, r1
 800d178:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800d17c:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800d180:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800d184:	e9c2 3400 	strd	r3, r4, [r2]
 800d188:	e00c      	b.n	800d1a4 <sc_reduce+0x2e38>
 800d18a:	bf00      	nop
 800d18c:	000a2c13 	.word	0x000a2c13
 800d190:	00072d18 	.word	0x00072d18
 800d194:	0009fb67 	.word	0x0009fb67
 800d198:	fff0c653 	.word	0xfff0c653
 800d19c:	000215d1 	.word	0x000215d1
 800d1a0:	fff59083 	.word	0xfff59083
    carry4 = s4 >> 21;
 800d1a4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ac:	f04f 0000 	mov.w	r0, #0
 800d1b0:	f04f 0100 	mov.w	r1, #0
 800d1b4:	0d50      	lsrs	r0, r2, #21
 800d1b6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d1ba:	1559      	asrs	r1, r3, #21
 800d1bc:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800d1c0:	e9c3 0100 	strd	r0, r1, [r3]
    s5 += carry4;
 800d1c4:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800d1c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1cc:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800d1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d4:	1884      	adds	r4, r0, r2
 800d1d6:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 800d1da:	eb41 0303 	adc.w	r3, r1, r3
 800d1de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800d1e2:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800d1e6:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800d1ea:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 800d1ee:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800d1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f6:	f04f 0000 	mov.w	r0, #0
 800d1fa:	f04f 0100 	mov.w	r1, #0
 800d1fe:	0559      	lsls	r1, r3, #21
 800d200:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d204:	0550      	lsls	r0, r2, #21
 800d206:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	1a14      	subs	r4, r2, r0
 800d210:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 800d214:	eb63 0301 	sbc.w	r3, r3, r1
 800d218:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800d21c:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800d220:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800d224:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = s5 >> 21;
 800d228:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	f04f 0000 	mov.w	r0, #0
 800d234:	f04f 0100 	mov.w	r1, #0
 800d238:	0d50      	lsrs	r0, r2, #21
 800d23a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d23e:	1559      	asrs	r1, r3, #21
 800d240:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800d244:	e9c3 0100 	strd	r0, r1, [r3]
    s6 += carry5;
 800d248:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800d24c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d250:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800d254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d258:	1884      	adds	r4, r0, r2
 800d25a:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800d25e:	eb41 0303 	adc.w	r3, r1, r3
 800d262:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800d266:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800d26a:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800d26e:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 800d272:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27a:	f04f 0000 	mov.w	r0, #0
 800d27e:	f04f 0100 	mov.w	r1, #0
 800d282:	0559      	lsls	r1, r3, #21
 800d284:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d288:	0550      	lsls	r0, r2, #21
 800d28a:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800d28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d292:	1a14      	subs	r4, r2, r0
 800d294:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800d298:	eb63 0301 	sbc.w	r3, r3, r1
 800d29c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800d2a0:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800d2a4:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800d2a8:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = s6 >> 21;
 800d2ac:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800d2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b4:	f04f 0000 	mov.w	r0, #0
 800d2b8:	f04f 0100 	mov.w	r1, #0
 800d2bc:	0d50      	lsrs	r0, r2, #21
 800d2be:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d2c2:	1559      	asrs	r1, r3, #21
 800d2c4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800d2c8:	e9c3 0100 	strd	r0, r1, [r3]
    s7 += carry6;
 800d2cc:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800d2d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2d4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2dc:	1884      	adds	r4, r0, r2
 800d2de:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800d2e2:	eb41 0303 	adc.w	r3, r1, r3
 800d2e6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800d2ea:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800d2ee:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800d2f2:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 800d2f6:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fe:	f04f 0000 	mov.w	r0, #0
 800d302:	f04f 0100 	mov.w	r1, #0
 800d306:	0559      	lsls	r1, r3, #21
 800d308:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d30c:	0550      	lsls	r0, r2, #21
 800d30e:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800d312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d316:	1a14      	subs	r4, r2, r0
 800d318:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800d31c:	eb63 0301 	sbc.w	r3, r3, r1
 800d320:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800d324:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800d328:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800d32c:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = s7 >> 21;
 800d330:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d338:	f04f 0000 	mov.w	r0, #0
 800d33c:	f04f 0100 	mov.w	r1, #0
 800d340:	0d50      	lsrs	r0, r2, #21
 800d342:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d346:	1559      	asrs	r1, r3, #21
 800d348:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800d34c:	e9c3 0100 	strd	r0, r1, [r3]
    s8 += carry7;
 800d350:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800d354:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d358:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800d35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d360:	1884      	adds	r4, r0, r2
 800d362:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800d366:	eb41 0303 	adc.w	r3, r1, r3
 800d36a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800d36e:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800d372:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800d376:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 800d37a:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800d37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d382:	f04f 0000 	mov.w	r0, #0
 800d386:	f04f 0100 	mov.w	r1, #0
 800d38a:	0559      	lsls	r1, r3, #21
 800d38c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d390:	0550      	lsls	r0, r2, #21
 800d392:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800d396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39a:	1a14      	subs	r4, r2, r0
 800d39c:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800d3a0:	eb63 0301 	sbc.w	r3, r3, r1
 800d3a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800d3a8:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800d3ac:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800d3b0:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = s8 >> 21;
 800d3b4:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	f04f 0000 	mov.w	r0, #0
 800d3c0:	f04f 0100 	mov.w	r1, #0
 800d3c4:	0d50      	lsrs	r0, r2, #21
 800d3c6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d3ca:	1559      	asrs	r1, r3, #21
 800d3cc:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800d3d0:	e9c3 0100 	strd	r0, r1, [r3]
    s9 += carry8;
 800d3d4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800d3d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d3dc:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800d3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e4:	1884      	adds	r4, r0, r2
 800d3e6:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800d3ea:	eb41 0303 	adc.w	r3, r1, r3
 800d3ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d3f2:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800d3f6:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800d3fa:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 800d3fe:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800d402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d406:	f04f 0000 	mov.w	r0, #0
 800d40a:	f04f 0100 	mov.w	r1, #0
 800d40e:	0559      	lsls	r1, r3, #21
 800d410:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d414:	0550      	lsls	r0, r2, #21
 800d416:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800d41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41e:	1a14      	subs	r4, r2, r0
 800d420:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800d424:	eb63 0301 	sbc.w	r3, r3, r1
 800d428:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800d42c:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800d430:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800d434:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = s9 >> 21;
 800d438:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d440:	f04f 0000 	mov.w	r0, #0
 800d444:	f04f 0100 	mov.w	r1, #0
 800d448:	0d50      	lsrs	r0, r2, #21
 800d44a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d44e:	1559      	asrs	r1, r3, #21
 800d450:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800d454:	e9c3 0100 	strd	r0, r1, [r3]
    s10 += carry9;
 800d458:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800d45c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d460:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800d464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d468:	1884      	adds	r4, r0, r2
 800d46a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800d46e:	eb41 0303 	adc.w	r3, r1, r3
 800d472:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800d476:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800d47a:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800d47e:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 800d482:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800d486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48a:	f04f 0000 	mov.w	r0, #0
 800d48e:	f04f 0100 	mov.w	r1, #0
 800d492:	0559      	lsls	r1, r3, #21
 800d494:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d498:	0550      	lsls	r0, r2, #21
 800d49a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800d49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a2:	1a14      	subs	r4, r2, r0
 800d4a4:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800d4a8:	eb63 0301 	sbc.w	r3, r3, r1
 800d4ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800d4b0:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800d4b4:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800d4b8:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = s10 >> 21;
 800d4bc:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	f04f 0000 	mov.w	r0, #0
 800d4c8:	f04f 0100 	mov.w	r1, #0
 800d4cc:	0d50      	lsrs	r0, r2, #21
 800d4ce:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d4d2:	1559      	asrs	r1, r3, #21
 800d4d4:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800d4d8:	e9c3 0100 	strd	r0, r1, [r3]
    s11 += carry10;
 800d4dc:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800d4e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d4e4:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800d4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ec:	1884      	adds	r4, r0, r2
 800d4ee:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 800d4f2:	eb41 0303 	adc.w	r3, r1, r3
 800d4f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d4fa:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800d4fe:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800d502:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 800d506:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800d50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50e:	f04f 0000 	mov.w	r0, #0
 800d512:	f04f 0100 	mov.w	r1, #0
 800d516:	0559      	lsls	r1, r3, #21
 800d518:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d51c:	0550      	lsls	r0, r2, #21
 800d51e:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	1a14      	subs	r4, r2, r0
 800d528:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800d52c:	eb63 0301 	sbc.w	r3, r3, r1
 800d530:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d534:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800d538:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800d53c:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = s11 >> 21;
 800d540:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d548:	f04f 0000 	mov.w	r0, #0
 800d54c:	f04f 0100 	mov.w	r1, #0
 800d550:	0d50      	lsrs	r0, r2, #21
 800d552:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d556:	1559      	asrs	r1, r3, #21
 800d558:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800d55c:	e9c3 0100 	strd	r0, r1, [r3]
    s12 += carry11;
 800d560:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800d564:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d568:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d570:	1884      	adds	r4, r0, r2
 800d572:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800d576:	eb41 0303 	adc.w	r3, r1, r3
 800d57a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d57e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800d582:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800d586:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 800d58a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800d58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d592:	f04f 0000 	mov.w	r0, #0
 800d596:	f04f 0100 	mov.w	r1, #0
 800d59a:	0559      	lsls	r1, r3, #21
 800d59c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d5a0:	0550      	lsls	r0, r2, #21
 800d5a2:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5aa:	1a14      	subs	r4, r2, r0
 800d5ac:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800d5b0:	eb63 0301 	sbc.w	r3, r3, r1
 800d5b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d5b8:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800d5bc:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800d5c0:	e9c2 3400 	strd	r3, r4, [r2]
    s0 += s12 * 666643;
 800d5c4:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d5c8:	4bed      	ldr	r3, [pc, #948]	; (800d980 <sc_reduce+0x3614>)
 800d5ca:	fb03 f102 	mul.w	r1, r3, r2
 800d5ce:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	fb03 f302 	mul.w	r3, r3, r2
 800d5d8:	18cc      	adds	r4, r1, r3
 800d5da:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d5de:	4be8      	ldr	r3, [pc, #928]	; (800d980 <sc_reduce+0x3614>)
 800d5e0:	fba2 0103 	umull	r0, r1, r2, r3
 800d5e4:	1863      	adds	r3, r4, r1
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800d5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f0:	1814      	adds	r4, r2, r0
 800d5f2:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800d5f6:	414b      	adcs	r3, r1
 800d5f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d5fc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800d600:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800d604:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 800d608:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d60c:	4bdd      	ldr	r3, [pc, #884]	; (800d984 <sc_reduce+0x3618>)
 800d60e:	fb03 f102 	mul.w	r1, r3, r2
 800d612:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d616:	2300      	movs	r3, #0
 800d618:	fb03 f302 	mul.w	r3, r3, r2
 800d61c:	18cc      	adds	r4, r1, r3
 800d61e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d622:	4bd8      	ldr	r3, [pc, #864]	; (800d984 <sc_reduce+0x3618>)
 800d624:	fba2 0103 	umull	r0, r1, r2, r3
 800d628:	1863      	adds	r3, r4, r1
 800d62a:	4619      	mov	r1, r3
 800d62c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	1814      	adds	r4, r2, r0
 800d636:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800d63a:	414b      	adcs	r3, r1
 800d63c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d640:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800d644:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800d648:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 800d64c:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d650:	4bcd      	ldr	r3, [pc, #820]	; (800d988 <sc_reduce+0x361c>)
 800d652:	fb03 f102 	mul.w	r1, r3, r2
 800d656:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d65a:	2300      	movs	r3, #0
 800d65c:	fb03 f302 	mul.w	r3, r3, r2
 800d660:	18cc      	adds	r4, r1, r3
 800d662:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d666:	4bc8      	ldr	r3, [pc, #800]	; (800d988 <sc_reduce+0x361c>)
 800d668:	fba2 0103 	umull	r0, r1, r2, r3
 800d66c:	1863      	adds	r3, r4, r1
 800d66e:	4619      	mov	r1, r3
 800d670:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d678:	1814      	adds	r4, r2, r0
 800d67a:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800d67e:	414b      	adcs	r3, r1
 800d680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d684:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800d688:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800d68c:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 800d690:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d694:	4bbd      	ldr	r3, [pc, #756]	; (800d98c <sc_reduce+0x3620>)
 800d696:	fb03 f102 	mul.w	r1, r3, r2
 800d69a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d69e:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a2:	fb03 f302 	mul.w	r3, r3, r2
 800d6a6:	18cc      	adds	r4, r1, r3
 800d6a8:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d6ac:	4bb7      	ldr	r3, [pc, #732]	; (800d98c <sc_reduce+0x3620>)
 800d6ae:	fba2 0103 	umull	r0, r1, r2, r3
 800d6b2:	1863      	adds	r3, r4, r1
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6be:	1814      	adds	r4, r2, r0
 800d6c0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800d6c4:	414b      	adcs	r3, r1
 800d6c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d6ca:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800d6ce:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800d6d2:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 800d6d6:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d6da:	4bad      	ldr	r3, [pc, #692]	; (800d990 <sc_reduce+0x3624>)
 800d6dc:	fb03 f102 	mul.w	r1, r3, r2
 800d6e0:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	fb03 f302 	mul.w	r3, r3, r2
 800d6ea:	18cc      	adds	r4, r1, r3
 800d6ec:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d6f0:	4ba7      	ldr	r3, [pc, #668]	; (800d990 <sc_reduce+0x3624>)
 800d6f2:	fba2 0103 	umull	r0, r1, r2, r3
 800d6f6:	1863      	adds	r3, r4, r1
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d702:	1814      	adds	r4, r2, r0
 800d704:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800d708:	414b      	adcs	r3, r1
 800d70a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d70e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800d712:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800d716:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 800d71a:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d71e:	4b9d      	ldr	r3, [pc, #628]	; (800d994 <sc_reduce+0x3628>)
 800d720:	fb03 f102 	mul.w	r1, r3, r2
 800d724:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d728:	f04f 33ff 	mov.w	r3, #4294967295
 800d72c:	fb03 f302 	mul.w	r3, r3, r2
 800d730:	18cc      	adds	r4, r1, r3
 800d732:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d736:	4b97      	ldr	r3, [pc, #604]	; (800d994 <sc_reduce+0x3628>)
 800d738:	fba2 0103 	umull	r0, r1, r2, r3
 800d73c:	1863      	adds	r3, r4, r1
 800d73e:	4619      	mov	r1, r3
 800d740:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800d744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d748:	1814      	adds	r4, r2, r0
 800d74a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800d74e:	414b      	adcs	r3, r1
 800d750:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d754:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800d758:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800d75c:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 800d760:	f04f 0200 	mov.w	r2, #0
 800d764:	f04f 0300 	mov.w	r3, #0
 800d768:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 800d76c:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = s0 >> 21;
 800d770:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	f04f 0000 	mov.w	r0, #0
 800d77c:	f04f 0100 	mov.w	r1, #0
 800d780:	0d50      	lsrs	r0, r2, #21
 800d782:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d786:	1559      	asrs	r1, r3, #21
 800d788:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800d78c:	e9c3 0100 	strd	r0, r1, [r3]
    s1 += carry0;
 800d790:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d794:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d798:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	1884      	adds	r4, r0, r2
 800d7a2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800d7a6:	eb41 0303 	adc.w	r3, r1, r3
 800d7aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d7ae:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800d7b2:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800d7b6:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 800d7ba:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800d7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c2:	f04f 0000 	mov.w	r0, #0
 800d7c6:	f04f 0100 	mov.w	r1, #0
 800d7ca:	0559      	lsls	r1, r3, #21
 800d7cc:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d7d0:	0550      	lsls	r0, r2, #21
 800d7d2:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800d7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7da:	1a14      	subs	r4, r2, r0
 800d7dc:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800d7e0:	eb63 0301 	sbc.w	r3, r3, r1
 800d7e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d7e8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800d7ec:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800d7f0:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = s1 >> 21;
 800d7f4:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fc:	f04f 0000 	mov.w	r0, #0
 800d800:	f04f 0100 	mov.w	r1, #0
 800d804:	0d50      	lsrs	r0, r2, #21
 800d806:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d80a:	1559      	asrs	r1, r3, #21
 800d80c:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800d810:	e9c3 0100 	strd	r0, r1, [r3]
    s2 += carry1;
 800d814:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d818:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d81c:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d824:	1884      	adds	r4, r0, r2
 800d826:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800d82a:	eb41 0303 	adc.w	r3, r1, r3
 800d82e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d832:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800d836:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800d83a:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 800d83e:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800d842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d846:	f04f 0000 	mov.w	r0, #0
 800d84a:	f04f 0100 	mov.w	r1, #0
 800d84e:	0559      	lsls	r1, r3, #21
 800d850:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d854:	0550      	lsls	r0, r2, #21
 800d856:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85e:	1a14      	subs	r4, r2, r0
 800d860:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800d864:	eb63 0301 	sbc.w	r3, r3, r1
 800d868:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d86c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800d870:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800d874:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = s2 >> 21;
 800d878:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d880:	f04f 0000 	mov.w	r0, #0
 800d884:	f04f 0100 	mov.w	r1, #0
 800d888:	0d50      	lsrs	r0, r2, #21
 800d88a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d88e:	1559      	asrs	r1, r3, #21
 800d890:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800d894:	e9c3 0100 	strd	r0, r1, [r3]
    s3 += carry2;
 800d898:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d89c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d8a0:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	1884      	adds	r4, r0, r2
 800d8aa:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800d8ae:	eb41 0303 	adc.w	r3, r1, r3
 800d8b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d8b6:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800d8ba:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800d8be:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 800d8c2:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	f04f 0000 	mov.w	r0, #0
 800d8ce:	f04f 0100 	mov.w	r1, #0
 800d8d2:	0559      	lsls	r1, r3, #21
 800d8d4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d8d8:	0550      	lsls	r0, r2, #21
 800d8da:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e2:	1a14      	subs	r4, r2, r0
 800d8e4:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800d8e8:	eb63 0301 	sbc.w	r3, r3, r1
 800d8ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d8f0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800d8f4:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800d8f8:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = s3 >> 21;
 800d8fc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d904:	f04f 0000 	mov.w	r0, #0
 800d908:	f04f 0100 	mov.w	r1, #0
 800d90c:	0d50      	lsrs	r0, r2, #21
 800d90e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d912:	1559      	asrs	r1, r3, #21
 800d914:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800d918:	e9c3 0100 	strd	r0, r1, [r3]
    s4 += carry3;
 800d91c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d920:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d924:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800d928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92c:	1884      	adds	r4, r0, r2
 800d92e:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800d932:	eb41 0303 	adc.w	r3, r1, r3
 800d936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d93a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800d93e:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800d942:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 800d946:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800d94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94e:	f04f 0000 	mov.w	r0, #0
 800d952:	f04f 0100 	mov.w	r1, #0
 800d956:	0559      	lsls	r1, r3, #21
 800d958:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d95c:	0550      	lsls	r0, r2, #21
 800d95e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d966:	1a14      	subs	r4, r2, r0
 800d968:	67bc      	str	r4, [r7, #120]	; 0x78
 800d96a:	eb63 0301 	sbc.w	r3, r3, r1
 800d96e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d970:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800d974:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800d978:	e9c2 3400 	strd	r3, r4, [r2]
 800d97c:	e00c      	b.n	800d998 <sc_reduce+0x362c>
 800d97e:	bf00      	nop
 800d980:	000a2c13 	.word	0x000a2c13
 800d984:	00072d18 	.word	0x00072d18
 800d988:	0009fb67 	.word	0x0009fb67
 800d98c:	fff0c653 	.word	0xfff0c653
 800d990:	000215d1 	.word	0x000215d1
 800d994:	fff59083 	.word	0xfff59083
    carry4 = s4 >> 21;
 800d998:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a0:	f04f 0000 	mov.w	r0, #0
 800d9a4:	f04f 0100 	mov.w	r1, #0
 800d9a8:	0d50      	lsrs	r0, r2, #21
 800d9aa:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d9ae:	1559      	asrs	r1, r3, #21
 800d9b0:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800d9b4:	e9c3 0100 	strd	r0, r1, [r3]
    s5 += carry4;
 800d9b8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800d9bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9c0:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800d9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c8:	1884      	adds	r4, r0, r2
 800d9ca:	673c      	str	r4, [r7, #112]	; 0x70
 800d9cc:	eb41 0303 	adc.w	r3, r1, r3
 800d9d0:	677b      	str	r3, [r7, #116]	; 0x74
 800d9d2:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800d9d6:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800d9da:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 800d9de:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800d9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e6:	f04f 0000 	mov.w	r0, #0
 800d9ea:	f04f 0100 	mov.w	r1, #0
 800d9ee:	0559      	lsls	r1, r3, #21
 800d9f0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d9f4:	0550      	lsls	r0, r2, #21
 800d9f6:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fe:	1a14      	subs	r4, r2, r0
 800da00:	66bc      	str	r4, [r7, #104]	; 0x68
 800da02:	eb63 0301 	sbc.w	r3, r3, r1
 800da06:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da08:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800da0c:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800da10:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = s5 >> 21;
 800da14:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800da18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1c:	f04f 0000 	mov.w	r0, #0
 800da20:	f04f 0100 	mov.w	r1, #0
 800da24:	0d50      	lsrs	r0, r2, #21
 800da26:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800da2a:	1559      	asrs	r1, r3, #21
 800da2c:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800da30:	e9c3 0100 	strd	r0, r1, [r3]
    s6 += carry5;
 800da34:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800da38:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da3c:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800da40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da44:	1884      	adds	r4, r0, r2
 800da46:	663c      	str	r4, [r7, #96]	; 0x60
 800da48:	eb41 0303 	adc.w	r3, r1, r3
 800da4c:	667b      	str	r3, [r7, #100]	; 0x64
 800da4e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800da52:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800da56:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 800da5a:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	f04f 0000 	mov.w	r0, #0
 800da66:	f04f 0100 	mov.w	r1, #0
 800da6a:	0559      	lsls	r1, r3, #21
 800da6c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800da70:	0550      	lsls	r0, r2, #21
 800da72:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7a:	1a14      	subs	r4, r2, r0
 800da7c:	65bc      	str	r4, [r7, #88]	; 0x58
 800da7e:	eb63 0301 	sbc.w	r3, r3, r1
 800da82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da84:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800da88:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800da8c:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = s6 >> 21;
 800da90:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da98:	f04f 0000 	mov.w	r0, #0
 800da9c:	f04f 0100 	mov.w	r1, #0
 800daa0:	0d50      	lsrs	r0, r2, #21
 800daa2:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800daa6:	1559      	asrs	r1, r3, #21
 800daa8:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800daac:	e9c3 0100 	strd	r0, r1, [r3]
    s7 += carry6;
 800dab0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800dab4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dab8:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	1884      	adds	r4, r0, r2
 800dac2:	653c      	str	r4, [r7, #80]	; 0x50
 800dac4:	eb41 0303 	adc.w	r3, r1, r3
 800dac8:	657b      	str	r3, [r7, #84]	; 0x54
 800daca:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800dace:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800dad2:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 800dad6:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800dada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dade:	f04f 0000 	mov.w	r0, #0
 800dae2:	f04f 0100 	mov.w	r1, #0
 800dae6:	0559      	lsls	r1, r3, #21
 800dae8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800daec:	0550      	lsls	r0, r2, #21
 800daee:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800daf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf6:	1a14      	subs	r4, r2, r0
 800daf8:	64bc      	str	r4, [r7, #72]	; 0x48
 800dafa:	eb63 0301 	sbc.w	r3, r3, r1
 800dafe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db00:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800db04:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800db08:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = s7 >> 21;
 800db0c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800db10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db14:	f04f 0000 	mov.w	r0, #0
 800db18:	f04f 0100 	mov.w	r1, #0
 800db1c:	0d50      	lsrs	r0, r2, #21
 800db1e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800db22:	1559      	asrs	r1, r3, #21
 800db24:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800db28:	e9c3 0100 	strd	r0, r1, [r3]
    s8 += carry7;
 800db2c:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800db30:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db34:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800db38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3c:	1884      	adds	r4, r0, r2
 800db3e:	643c      	str	r4, [r7, #64]	; 0x40
 800db40:	eb41 0303 	adc.w	r3, r1, r3
 800db44:	647b      	str	r3, [r7, #68]	; 0x44
 800db46:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800db4a:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800db4e:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 800db52:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800db56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5a:	f04f 0000 	mov.w	r0, #0
 800db5e:	f04f 0100 	mov.w	r1, #0
 800db62:	0559      	lsls	r1, r3, #21
 800db64:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800db68:	0550      	lsls	r0, r2, #21
 800db6a:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800db6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db72:	1a14      	subs	r4, r2, r0
 800db74:	63bc      	str	r4, [r7, #56]	; 0x38
 800db76:	eb63 0301 	sbc.w	r3, r3, r1
 800db7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db7c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800db80:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800db84:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = s8 >> 21;
 800db88:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db90:	f04f 0000 	mov.w	r0, #0
 800db94:	f04f 0100 	mov.w	r1, #0
 800db98:	0d50      	lsrs	r0, r2, #21
 800db9a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800db9e:	1559      	asrs	r1, r3, #21
 800dba0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800dba4:	e9c3 0100 	strd	r0, r1, [r3]
    s9 += carry8;
 800dba8:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dbac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dbb0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800dbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb8:	1884      	adds	r4, r0, r2
 800dbba:	633c      	str	r4, [r7, #48]	; 0x30
 800dbbc:	eb41 0303 	adc.w	r3, r1, r3
 800dbc0:	637b      	str	r3, [r7, #52]	; 0x34
 800dbc2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800dbc6:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800dbca:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 800dbce:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	f04f 0000 	mov.w	r0, #0
 800dbda:	f04f 0100 	mov.w	r1, #0
 800dbde:	0559      	lsls	r1, r3, #21
 800dbe0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800dbe4:	0550      	lsls	r0, r2, #21
 800dbe6:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	1a14      	subs	r4, r2, r0
 800dbf0:	62bc      	str	r4, [r7, #40]	; 0x28
 800dbf2:	eb63 0301 	sbc.w	r3, r3, r1
 800dbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbf8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800dbfc:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800dc00:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = s9 >> 21;
 800dc04:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dc08:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc0c:	f04f 0200 	mov.w	r2, #0
 800dc10:	f04f 0300 	mov.w	r3, #0
 800dc14:	0d42      	lsrs	r2, r0, #21
 800dc16:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800dc1a:	154b      	asrs	r3, r1, #21
 800dc1c:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 800dc20:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 800dc24:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800dc28:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc2c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800dc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc34:	1884      	adds	r4, r0, r2
 800dc36:	623c      	str	r4, [r7, #32]
 800dc38:	eb41 0303 	adc.w	r3, r1, r3
 800dc3c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc3e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800dc42:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800dc46:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 800dc4a:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800dc4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc52:	f04f 0200 	mov.w	r2, #0
 800dc56:	f04f 0300 	mov.w	r3, #0
 800dc5a:	054b      	lsls	r3, r1, #21
 800dc5c:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 800dc60:	0542      	lsls	r2, r0, #21
 800dc62:	f507 61fc 	add.w	r1, r7, #2016	; 0x7e0
 800dc66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc6a:	1a84      	subs	r4, r0, r2
 800dc6c:	61bc      	str	r4, [r7, #24]
 800dc6e:	eb61 0303 	sbc.w	r3, r1, r3
 800dc72:	61fb      	str	r3, [r7, #28]
 800dc74:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800dc78:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800dc7c:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = s10 >> 21;
 800dc80:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800dc84:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc88:	f04f 0200 	mov.w	r2, #0
 800dc8c:	f04f 0300 	mov.w	r3, #0
 800dc90:	0d42      	lsrs	r2, r0, #21
 800dc92:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800dc96:	154b      	asrs	r3, r1, #21
 800dc98:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800dc9c:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 800dca0:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800dca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dca8:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800dcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb0:	1884      	adds	r4, r0, r2
 800dcb2:	613c      	str	r4, [r7, #16]
 800dcb4:	eb41 0303 	adc.w	r3, r1, r3
 800dcb8:	617b      	str	r3, [r7, #20]
 800dcba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dcbe:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800dcc2:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 800dcc6:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800dcca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dcce:	f04f 0200 	mov.w	r2, #0
 800dcd2:	f04f 0300 	mov.w	r3, #0
 800dcd6:	054b      	lsls	r3, r1, #21
 800dcd8:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 800dcdc:	0542      	lsls	r2, r0, #21
 800dcde:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 800dce2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dce6:	1a84      	subs	r4, r0, r2
 800dce8:	60bc      	str	r4, [r7, #8]
 800dcea:	eb61 0303 	sbc.w	r3, r1, r3
 800dcee:	60fb      	str	r3, [r7, #12]
 800dcf0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800dcf4:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800dcf8:	e9c2 3400 	strd	r3, r4, [r2]

    s[0] = (unsigned char) (s0 >> 0);
 800dcfc:	f897 2828 	ldrb.w	r2, [r7, #2088]	; 0x828
 800dd00:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	701a      	strb	r2, [r3, #0]
    s[1] = (unsigned char) (s0 >> 8);
 800dd08:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800dd0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd10:	f04f 0200 	mov.w	r2, #0
 800dd14:	f04f 0300 	mov.w	r3, #0
 800dd18:	0a02      	lsrs	r2, r0, #8
 800dd1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800dd1e:	120b      	asrs	r3, r1, #8
 800dd20:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800dd24:	6809      	ldr	r1, [r1, #0]
 800dd26:	3101      	adds	r1, #1
 800dd28:	b2d3      	uxtb	r3, r2
 800dd2a:	700b      	strb	r3, [r1, #0]
    s[2] = (unsigned char) ((s0 >> 16) | (s1 << 5));
 800dd2c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800dd30:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd34:	f04f 0200 	mov.w	r2, #0
 800dd38:	f04f 0300 	mov.w	r3, #0
 800dd3c:	0c02      	lsrs	r2, r0, #16
 800dd3e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800dd42:	140b      	asrs	r3, r1, #16
 800dd44:	b254      	sxtb	r4, r2
 800dd46:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800dd4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd4e:	f04f 0200 	mov.w	r2, #0
 800dd52:	f04f 0300 	mov.w	r3, #0
 800dd56:	014b      	lsls	r3, r1, #5
 800dd58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800dd5c:	0142      	lsls	r2, r0, #5
 800dd5e:	b253      	sxtb	r3, r2
 800dd60:	4323      	orrs	r3, r4
 800dd62:	b25a      	sxtb	r2, r3
 800dd64:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	3302      	adds	r3, #2
 800dd6c:	b2d2      	uxtb	r2, r2
 800dd6e:	701a      	strb	r2, [r3, #0]
    s[3] = (unsigned char) (s1 >> 3);
 800dd70:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800dd74:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd78:	f04f 0200 	mov.w	r2, #0
 800dd7c:	f04f 0300 	mov.w	r3, #0
 800dd80:	08c2      	lsrs	r2, r0, #3
 800dd82:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 800dd86:	10cb      	asrs	r3, r1, #3
 800dd88:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800dd8c:	6809      	ldr	r1, [r1, #0]
 800dd8e:	3103      	adds	r1, #3
 800dd90:	b2d3      	uxtb	r3, r2
 800dd92:	700b      	strb	r3, [r1, #0]
    s[4] = (unsigned char) (s1 >> 11);
 800dd94:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800dd98:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd9c:	f04f 0200 	mov.w	r2, #0
 800dda0:	f04f 0300 	mov.w	r3, #0
 800dda4:	0ac2      	lsrs	r2, r0, #11
 800dda6:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 800ddaa:	12cb      	asrs	r3, r1, #11
 800ddac:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800ddb0:	6809      	ldr	r1, [r1, #0]
 800ddb2:	3104      	adds	r1, #4
 800ddb4:	b2d3      	uxtb	r3, r2
 800ddb6:	700b      	strb	r3, [r1, #0]
    s[5] = (unsigned char) ((s1 >> 19) | (s2 << 2));
 800ddb8:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800ddbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ddc0:	f04f 0200 	mov.w	r2, #0
 800ddc4:	f04f 0300 	mov.w	r3, #0
 800ddc8:	0cc2      	lsrs	r2, r0, #19
 800ddca:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800ddce:	14cb      	asrs	r3, r1, #19
 800ddd0:	b254      	sxtb	r4, r2
 800ddd2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800ddd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ddda:	f04f 0200 	mov.w	r2, #0
 800ddde:	f04f 0300 	mov.w	r3, #0
 800dde2:	008b      	lsls	r3, r1, #2
 800dde4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800dde8:	0082      	lsls	r2, r0, #2
 800ddea:	b253      	sxtb	r3, r2
 800ddec:	4323      	orrs	r3, r4
 800ddee:	b25a      	sxtb	r2, r3
 800ddf0:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	3305      	adds	r3, #5
 800ddf8:	b2d2      	uxtb	r2, r2
 800ddfa:	701a      	strb	r2, [r3, #0]
    s[6] = (unsigned char) (s2 >> 6);
 800ddfc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800de00:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de04:	f04f 0200 	mov.w	r2, #0
 800de08:	f04f 0300 	mov.w	r3, #0
 800de0c:	0982      	lsrs	r2, r0, #6
 800de0e:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 800de12:	118b      	asrs	r3, r1, #6
 800de14:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800de18:	6809      	ldr	r1, [r1, #0]
 800de1a:	3106      	adds	r1, #6
 800de1c:	b2d3      	uxtb	r3, r2
 800de1e:	700b      	strb	r3, [r1, #0]
    s[7] = (unsigned char) ((s2 >> 14) | (s3 << 7));
 800de20:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800de24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de28:	f04f 0200 	mov.w	r2, #0
 800de2c:	f04f 0300 	mov.w	r3, #0
 800de30:	0b82      	lsrs	r2, r0, #14
 800de32:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800de36:	138b      	asrs	r3, r1, #14
 800de38:	b254      	sxtb	r4, r2
 800de3a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800de3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de42:	f04f 0200 	mov.w	r2, #0
 800de46:	f04f 0300 	mov.w	r3, #0
 800de4a:	01cb      	lsls	r3, r1, #7
 800de4c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800de50:	01c2      	lsls	r2, r0, #7
 800de52:	b253      	sxtb	r3, r2
 800de54:	4323      	orrs	r3, r4
 800de56:	b25a      	sxtb	r2, r3
 800de58:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	3307      	adds	r3, #7
 800de60:	b2d2      	uxtb	r2, r2
 800de62:	701a      	strb	r2, [r3, #0]
    s[8] = (unsigned char) (s3 >> 1);
 800de64:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800de68:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de6c:	f04f 0200 	mov.w	r2, #0
 800de70:	f04f 0300 	mov.w	r3, #0
 800de74:	0842      	lsrs	r2, r0, #1
 800de76:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800de7a:	104b      	asrs	r3, r1, #1
 800de7c:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800de80:	6809      	ldr	r1, [r1, #0]
 800de82:	3108      	adds	r1, #8
 800de84:	b2d3      	uxtb	r3, r2
 800de86:	700b      	strb	r3, [r1, #0]
    s[9] = (unsigned char) (s3 >> 9);
 800de88:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800de8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de90:	f04f 0200 	mov.w	r2, #0
 800de94:	f04f 0300 	mov.w	r3, #0
 800de98:	0a42      	lsrs	r2, r0, #9
 800de9a:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800de9e:	124b      	asrs	r3, r1, #9
 800dea0:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800dea4:	6809      	ldr	r1, [r1, #0]
 800dea6:	3109      	adds	r1, #9
 800dea8:	b2d3      	uxtb	r3, r2
 800deaa:	700b      	strb	r3, [r1, #0]
    s[10] = (unsigned char) ((s3 >> 17) | (s4 << 4));
 800deac:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800deb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800deb4:	f04f 0200 	mov.w	r2, #0
 800deb8:	f04f 0300 	mov.w	r3, #0
 800debc:	0c42      	lsrs	r2, r0, #17
 800debe:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 800dec2:	144b      	asrs	r3, r1, #17
 800dec4:	b254      	sxtb	r4, r2
 800dec6:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800deca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dece:	f04f 0200 	mov.w	r2, #0
 800ded2:	f04f 0300 	mov.w	r3, #0
 800ded6:	010b      	lsls	r3, r1, #4
 800ded8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800dedc:	0102      	lsls	r2, r0, #4
 800dede:	b253      	sxtb	r3, r2
 800dee0:	4323      	orrs	r3, r4
 800dee2:	b25a      	sxtb	r2, r3
 800dee4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	330a      	adds	r3, #10
 800deec:	b2d2      	uxtb	r2, r2
 800deee:	701a      	strb	r2, [r3, #0]
    s[11] = (unsigned char) (s4 >> 4);
 800def0:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800def4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800def8:	f04f 0200 	mov.w	r2, #0
 800defc:	f04f 0300 	mov.w	r3, #0
 800df00:	0902      	lsrs	r2, r0, #4
 800df02:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800df06:	110b      	asrs	r3, r1, #4
 800df08:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800df0c:	6809      	ldr	r1, [r1, #0]
 800df0e:	310b      	adds	r1, #11
 800df10:	b2d3      	uxtb	r3, r2
 800df12:	700b      	strb	r3, [r1, #0]
    s[12] = (unsigned char) (s4 >> 12);
 800df14:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800df18:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df1c:	f04f 0200 	mov.w	r2, #0
 800df20:	f04f 0300 	mov.w	r3, #0
 800df24:	0b02      	lsrs	r2, r0, #12
 800df26:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800df2a:	130b      	asrs	r3, r1, #12
 800df2c:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800df30:	6809      	ldr	r1, [r1, #0]
 800df32:	310c      	adds	r1, #12
 800df34:	b2d3      	uxtb	r3, r2
 800df36:	700b      	strb	r3, [r1, #0]
    s[13] = (unsigned char) ((s4 >> 20) | (s5 << 1));
 800df38:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800df3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df40:	f04f 0200 	mov.w	r2, #0
 800df44:	f04f 0300 	mov.w	r3, #0
 800df48:	0d02      	lsrs	r2, r0, #20
 800df4a:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800df4e:	150b      	asrs	r3, r1, #20
 800df50:	b251      	sxtb	r1, r2
 800df52:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800df56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5a:	1890      	adds	r0, r2, r2
 800df5c:	6038      	str	r0, [r7, #0]
 800df5e:	415b      	adcs	r3, r3
 800df60:	607b      	str	r3, [r7, #4]
 800df62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df66:	b253      	sxtb	r3, r2
 800df68:	430b      	orrs	r3, r1
 800df6a:	b25a      	sxtb	r2, r3
 800df6c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	330d      	adds	r3, #13
 800df74:	b2d2      	uxtb	r2, r2
 800df76:	701a      	strb	r2, [r3, #0]
    s[14] = (unsigned char) (s5 >> 7);
 800df78:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800df7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df80:	f04f 0200 	mov.w	r2, #0
 800df84:	f04f 0300 	mov.w	r3, #0
 800df88:	09c2      	lsrs	r2, r0, #7
 800df8a:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 800df8e:	11cb      	asrs	r3, r1, #7
 800df90:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800df94:	6809      	ldr	r1, [r1, #0]
 800df96:	310e      	adds	r1, #14
 800df98:	b2d3      	uxtb	r3, r2
 800df9a:	700b      	strb	r3, [r1, #0]
    s[15] = (unsigned char) ((s5 >> 15) | (s6 << 6));
 800df9c:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800dfa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfa4:	f04f 0200 	mov.w	r2, #0
 800dfa8:	f04f 0300 	mov.w	r3, #0
 800dfac:	0bc2      	lsrs	r2, r0, #15
 800dfae:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800dfb2:	13cb      	asrs	r3, r1, #15
 800dfb4:	b254      	sxtb	r4, r2
 800dfb6:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800dfba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfbe:	f04f 0200 	mov.w	r2, #0
 800dfc2:	f04f 0300 	mov.w	r3, #0
 800dfc6:	018b      	lsls	r3, r1, #6
 800dfc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800dfcc:	0182      	lsls	r2, r0, #6
 800dfce:	b253      	sxtb	r3, r2
 800dfd0:	4323      	orrs	r3, r4
 800dfd2:	b25a      	sxtb	r2, r3
 800dfd4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	330f      	adds	r3, #15
 800dfdc:	b2d2      	uxtb	r2, r2
 800dfde:	701a      	strb	r2, [r3, #0]
    s[16] = (unsigned char) (s6 >> 2);
 800dfe0:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800dfe4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfe8:	f04f 0200 	mov.w	r2, #0
 800dfec:	f04f 0300 	mov.w	r3, #0
 800dff0:	0882      	lsrs	r2, r0, #2
 800dff2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 800dff6:	108b      	asrs	r3, r1, #2
 800dff8:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800dffc:	6809      	ldr	r1, [r1, #0]
 800dffe:	3110      	adds	r1, #16
 800e000:	b2d3      	uxtb	r3, r2
 800e002:	700b      	strb	r3, [r1, #0]
    s[17] = (unsigned char) (s6 >> 10);
 800e004:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800e008:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e00c:	f04f 0200 	mov.w	r2, #0
 800e010:	f04f 0300 	mov.w	r3, #0
 800e014:	0a82      	lsrs	r2, r0, #10
 800e016:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800e01a:	128b      	asrs	r3, r1, #10
 800e01c:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e020:	6809      	ldr	r1, [r1, #0]
 800e022:	3111      	adds	r1, #17
 800e024:	b2d3      	uxtb	r3, r2
 800e026:	700b      	strb	r3, [r1, #0]
    s[18] = (unsigned char) ((s6 >> 18) | (s7 << 3));
 800e028:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800e02c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e030:	f04f 0200 	mov.w	r2, #0
 800e034:	f04f 0300 	mov.w	r3, #0
 800e038:	0c82      	lsrs	r2, r0, #18
 800e03a:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800e03e:	148b      	asrs	r3, r1, #18
 800e040:	b254      	sxtb	r4, r2
 800e042:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e046:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e04a:	f04f 0200 	mov.w	r2, #0
 800e04e:	f04f 0300 	mov.w	r3, #0
 800e052:	00cb      	lsls	r3, r1, #3
 800e054:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e058:	00c2      	lsls	r2, r0, #3
 800e05a:	b253      	sxtb	r3, r2
 800e05c:	4323      	orrs	r3, r4
 800e05e:	b25a      	sxtb	r2, r3
 800e060:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	3312      	adds	r3, #18
 800e068:	b2d2      	uxtb	r2, r2
 800e06a:	701a      	strb	r2, [r3, #0]
    s[19] = (unsigned char) (s7 >> 5);
 800e06c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e070:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e074:	f04f 0200 	mov.w	r2, #0
 800e078:	f04f 0300 	mov.w	r3, #0
 800e07c:	0942      	lsrs	r2, r0, #5
 800e07e:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 800e082:	114b      	asrs	r3, r1, #5
 800e084:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e088:	6809      	ldr	r1, [r1, #0]
 800e08a:	3113      	adds	r1, #19
 800e08c:	b2d3      	uxtb	r3, r2
 800e08e:	700b      	strb	r3, [r1, #0]
    s[20] = (unsigned char) (s7 >> 13);
 800e090:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e094:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e098:	f04f 0200 	mov.w	r2, #0
 800e09c:	f04f 0300 	mov.w	r3, #0
 800e0a0:	0b42      	lsrs	r2, r0, #13
 800e0a2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800e0a6:	134b      	asrs	r3, r1, #13
 800e0a8:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e0ac:	6809      	ldr	r1, [r1, #0]
 800e0ae:	3114      	adds	r1, #20
 800e0b0:	b2d3      	uxtb	r3, r2
 800e0b2:	700b      	strb	r3, [r1, #0]
    s[21] = (unsigned char) (s8 >> 0);
 800e0b4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	3315      	adds	r3, #21
 800e0bc:	f897 27e8 	ldrb.w	r2, [r7, #2024]	; 0x7e8
 800e0c0:	701a      	strb	r2, [r3, #0]
    s[22] = (unsigned char) (s8 >> 8);
 800e0c2:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800e0c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e0ca:	f04f 0200 	mov.w	r2, #0
 800e0ce:	f04f 0300 	mov.w	r3, #0
 800e0d2:	0a02      	lsrs	r2, r0, #8
 800e0d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e0d8:	120b      	asrs	r3, r1, #8
 800e0da:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e0de:	6809      	ldr	r1, [r1, #0]
 800e0e0:	3116      	adds	r1, #22
 800e0e2:	b2d3      	uxtb	r3, r2
 800e0e4:	700b      	strb	r3, [r1, #0]
    s[23] = (unsigned char) ((s8 >> 16) | (s9 << 5));
 800e0e6:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800e0ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e0ee:	f04f 0200 	mov.w	r2, #0
 800e0f2:	f04f 0300 	mov.w	r3, #0
 800e0f6:	0c02      	lsrs	r2, r0, #16
 800e0f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e0fc:	140b      	asrs	r3, r1, #16
 800e0fe:	b254      	sxtb	r4, r2
 800e100:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e104:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e108:	f04f 0200 	mov.w	r2, #0
 800e10c:	f04f 0300 	mov.w	r3, #0
 800e110:	014b      	lsls	r3, r1, #5
 800e112:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e116:	0142      	lsls	r2, r0, #5
 800e118:	b253      	sxtb	r3, r2
 800e11a:	4323      	orrs	r3, r4
 800e11c:	b25a      	sxtb	r2, r3
 800e11e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	3317      	adds	r3, #23
 800e126:	b2d2      	uxtb	r2, r2
 800e128:	701a      	strb	r2, [r3, #0]
    s[24] = (unsigned char) (s9 >> 3);
 800e12a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e12e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e132:	f04f 0200 	mov.w	r2, #0
 800e136:	f04f 0300 	mov.w	r3, #0
 800e13a:	08c2      	lsrs	r2, r0, #3
 800e13c:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 800e140:	10cb      	asrs	r3, r1, #3
 800e142:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e146:	6809      	ldr	r1, [r1, #0]
 800e148:	3118      	adds	r1, #24
 800e14a:	b2d3      	uxtb	r3, r2
 800e14c:	700b      	strb	r3, [r1, #0]
    s[25] = (unsigned char) (s9 >> 11);
 800e14e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e152:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e156:	f04f 0200 	mov.w	r2, #0
 800e15a:	f04f 0300 	mov.w	r3, #0
 800e15e:	0ac2      	lsrs	r2, r0, #11
 800e160:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 800e164:	12cb      	asrs	r3, r1, #11
 800e166:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e16a:	6809      	ldr	r1, [r1, #0]
 800e16c:	3119      	adds	r1, #25
 800e16e:	b2d3      	uxtb	r3, r2
 800e170:	700b      	strb	r3, [r1, #0]
    s[26] = (unsigned char) ((s9 >> 19) | (s10 << 2));
 800e172:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e17a:	f04f 0200 	mov.w	r2, #0
 800e17e:	f04f 0300 	mov.w	r3, #0
 800e182:	0cc2      	lsrs	r2, r0, #19
 800e184:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800e188:	14cb      	asrs	r3, r1, #19
 800e18a:	b254      	sxtb	r4, r2
 800e18c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800e190:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e194:	f04f 0200 	mov.w	r2, #0
 800e198:	f04f 0300 	mov.w	r3, #0
 800e19c:	008b      	lsls	r3, r1, #2
 800e19e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e1a2:	0082      	lsls	r2, r0, #2
 800e1a4:	b253      	sxtb	r3, r2
 800e1a6:	4323      	orrs	r3, r4
 800e1a8:	b25a      	sxtb	r2, r3
 800e1aa:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	331a      	adds	r3, #26
 800e1b2:	b2d2      	uxtb	r2, r2
 800e1b4:	701a      	strb	r2, [r3, #0]
    s[27] = (unsigned char) (s10 >> 6);
 800e1b6:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800e1ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1be:	f04f 0200 	mov.w	r2, #0
 800e1c2:	f04f 0300 	mov.w	r3, #0
 800e1c6:	0982      	lsrs	r2, r0, #6
 800e1c8:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 800e1cc:	118b      	asrs	r3, r1, #6
 800e1ce:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e1d2:	6809      	ldr	r1, [r1, #0]
 800e1d4:	311b      	adds	r1, #27
 800e1d6:	b2d3      	uxtb	r3, r2
 800e1d8:	700b      	strb	r3, [r1, #0]
    s[28] = (unsigned char) ((s10 >> 14) | (s11 << 7));
 800e1da:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800e1de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1e2:	f04f 0200 	mov.w	r2, #0
 800e1e6:	f04f 0300 	mov.w	r3, #0
 800e1ea:	0b82      	lsrs	r2, r0, #14
 800e1ec:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800e1f0:	138b      	asrs	r3, r1, #14
 800e1f2:	b254      	sxtb	r4, r2
 800e1f4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e1f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1fc:	f04f 0200 	mov.w	r2, #0
 800e200:	f04f 0300 	mov.w	r3, #0
 800e204:	01cb      	lsls	r3, r1, #7
 800e206:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800e20a:	01c2      	lsls	r2, r0, #7
 800e20c:	b253      	sxtb	r3, r2
 800e20e:	4323      	orrs	r3, r4
 800e210:	b25a      	sxtb	r2, r3
 800e212:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	331c      	adds	r3, #28
 800e21a:	b2d2      	uxtb	r2, r2
 800e21c:	701a      	strb	r2, [r3, #0]
    s[29] = (unsigned char) (s11 >> 1);
 800e21e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e222:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e226:	f04f 0200 	mov.w	r2, #0
 800e22a:	f04f 0300 	mov.w	r3, #0
 800e22e:	0842      	lsrs	r2, r0, #1
 800e230:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e234:	104b      	asrs	r3, r1, #1
 800e236:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e23a:	6809      	ldr	r1, [r1, #0]
 800e23c:	311d      	adds	r1, #29
 800e23e:	b2d3      	uxtb	r3, r2
 800e240:	700b      	strb	r3, [r1, #0]
    s[30] = (unsigned char) (s11 >> 9);
 800e242:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e246:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e24a:	f04f 0200 	mov.w	r2, #0
 800e24e:	f04f 0300 	mov.w	r3, #0
 800e252:	0a42      	lsrs	r2, r0, #9
 800e254:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e258:	124b      	asrs	r3, r1, #9
 800e25a:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e25e:	6809      	ldr	r1, [r1, #0]
 800e260:	311e      	adds	r1, #30
 800e262:	b2d3      	uxtb	r3, r2
 800e264:	700b      	strb	r3, [r1, #0]
    s[31] = (unsigned char) (s11 >> 17);
 800e266:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e26a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e26e:	f04f 0200 	mov.w	r2, #0
 800e272:	f04f 0300 	mov.w	r3, #0
 800e276:	0c42      	lsrs	r2, r0, #17
 800e278:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 800e27c:	144b      	asrs	r3, r1, #17
 800e27e:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e282:	6809      	ldr	r1, [r1, #0]
 800e284:	311f      	adds	r1, #31
 800e286:	b2d3      	uxtb	r3, r2
 800e288:	700b      	strb	r3, [r1, #0]
}
 800e28a:	bf00      	nop
 800e28c:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 800e290:	46bd      	mov	sp, r7
 800e292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e296:	bf00      	nop

0800e298 <sha3_keccakf>:
#include "sha3.h"

// update the state with given number of rounds

void sha3_keccakf(uint64_t st[25])
{
 800e298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e29c:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e2a6:	6018      	str	r0, [r3, #0]
    // constants
    const uint64_t keccakf_rndc[24] = {
 800e2a8:	4bc5      	ldr	r3, [pc, #788]	; (800e5c0 <sha3_keccakf+0x328>)
 800e2aa:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	23c0      	movs	r3, #192	; 0xc0
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	f009 fb48 	bl	8017948 <memcpy>
        0x000000008000808b, 0x800000000000008b, 0x8000000000008089,
        0x8000000000008003, 0x8000000000008002, 0x8000000000000080,
        0x000000000000800a, 0x800000008000000a, 0x8000000080008081,
        0x8000000000008080, 0x0000000080000001, 0x8000000080008008
    };
    const int keccakf_rotc[24] = {
 800e2b8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800e2bc:	4ac1      	ldr	r2, [pc, #772]	; (800e5c4 <sha3_keccakf+0x32c>)
 800e2be:	4618      	mov	r0, r3
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	2360      	movs	r3, #96	; 0x60
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	f009 fb3f 	bl	8017948 <memcpy>
        1,  3,  6,  10, 15, 21, 28, 36, 45, 55, 2,  14,
        27, 41, 56, 8,  25, 43, 62, 18, 39, 61, 20, 44
    };
    const int keccakf_piln[24] = {
 800e2ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e2ce:	4abe      	ldr	r2, [pc, #760]	; (800e5c8 <sha3_keccakf+0x330>)
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	4611      	mov	r1, r2
 800e2d4:	2360      	movs	r3, #96	; 0x60
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	f009 fb36 	bl	8017948 <memcpy>
            (((uint64_t) v[6]) << 48) | (((uint64_t) v[7]) << 56);
    }
#endif

    // actual iteration
    for (r = 0; r < KECCAKF_ROUNDS; r++) {
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800e2e2:	e1f9      	b.n	800e6d8 <sha3_keccakf+0x440>

        // Theta
        for (i = 0; i < 5; i++)
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e2ea:	e05c      	b.n	800e3a6 <sha3_keccakf+0x10e>
            bc[i] = st[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15] ^ st[i + 20];
 800e2ec:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e2f0:	00da      	lsls	r2, r3, #3
 800e2f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2fe:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e302:	3305      	adds	r3, #5
 800e304:	00da      	lsls	r2, r3, #3
 800e306:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4413      	add	r3, r2
 800e30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e312:	ea80 0402 	eor.w	r4, r0, r2
 800e316:	653c      	str	r4, [r7, #80]	; 0x50
 800e318:	404b      	eors	r3, r1
 800e31a:	657b      	str	r3, [r7, #84]	; 0x54
 800e31c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e320:	330a      	adds	r3, #10
 800e322:	00da      	lsls	r2, r3, #3
 800e324:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4413      	add	r3, r2
 800e32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e330:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800e334:	4621      	mov	r1, r4
 800e336:	4051      	eors	r1, r2
 800e338:	64b9      	str	r1, [r7, #72]	; 0x48
 800e33a:	4629      	mov	r1, r5
 800e33c:	404b      	eors	r3, r1
 800e33e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e340:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e344:	330f      	adds	r3, #15
 800e346:	00da      	lsls	r2, r3, #3
 800e348:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4413      	add	r3, r2
 800e350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e354:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800e358:	4621      	mov	r1, r4
 800e35a:	4051      	eors	r1, r2
 800e35c:	6439      	str	r1, [r7, #64]	; 0x40
 800e35e:	4629      	mov	r1, r5
 800e360:	404b      	eors	r3, r1
 800e362:	647b      	str	r3, [r7, #68]	; 0x44
 800e364:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e368:	3314      	adds	r3, #20
 800e36a:	00da      	lsls	r2, r3, #3
 800e36c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4413      	add	r3, r2
 800e374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e378:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800e37c:	4621      	mov	r1, r4
 800e37e:	4051      	eors	r1, r2
 800e380:	63b9      	str	r1, [r7, #56]	; 0x38
 800e382:	4629      	mov	r1, r5
 800e384:	404b      	eors	r3, r1
 800e386:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e388:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800e38c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e390:	00db      	lsls	r3, r3, #3
 800e392:	4413      	add	r3, r2
 800e394:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e398:	e9c3 1200 	strd	r1, r2, [r3]
        for (i = 0; i < 5; i++)
 800e39c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e3a6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e3aa:	2b04      	cmp	r3, #4
 800e3ac:	dd9e      	ble.n	800e2ec <sha3_keccakf+0x54>

        for (i = 0; i < 5; i++) {
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e3b4:	e06c      	b.n	800e490 <sha3_keccakf+0x1f8>
            t = bc[(i + 4) % 5] ^ ROTL64(bc[(i + 1) % 5], 1);
 800e3b6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e3ba:	1d19      	adds	r1, r3, #4
 800e3bc:	4b83      	ldr	r3, [pc, #524]	; (800e5cc <sha3_keccakf+0x334>)
 800e3be:	fb83 2301 	smull	r2, r3, r3, r1
 800e3c2:	105a      	asrs	r2, r3, #1
 800e3c4:	17cb      	asrs	r3, r1, #31
 800e3c6:	1ad2      	subs	r2, r2, r3
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4413      	add	r3, r2
 800e3ce:	1aca      	subs	r2, r1, r3
 800e3d0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800e3d4:	00d3      	lsls	r3, r2, #3
 800e3d6:	440b      	add	r3, r1
 800e3d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e3dc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e3e0:	1c59      	adds	r1, r3, #1
 800e3e2:	4b7a      	ldr	r3, [pc, #488]	; (800e5cc <sha3_keccakf+0x334>)
 800e3e4:	fb83 2301 	smull	r2, r3, r3, r1
 800e3e8:	105a      	asrs	r2, r3, #1
 800e3ea:	17cb      	asrs	r3, r1, #31
 800e3ec:	1ad2      	subs	r2, r2, r3
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	4413      	add	r3, r2
 800e3f4:	1aca      	subs	r2, r1, r3
 800e3f6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800e3fa:	00d3      	lsls	r3, r2, #3
 800e3fc:	440b      	add	r3, r1
 800e3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e402:	0fd0      	lsrs	r0, r2, #31
 800e404:	0059      	lsls	r1, r3, #1
 800e406:	4301      	orrs	r1, r0
 800e408:	6379      	str	r1, [r7, #52]	; 0x34
 800e40a:	0fd9      	lsrs	r1, r3, #31
 800e40c:	0053      	lsls	r3, r2, #1
 800e40e:	430b      	orrs	r3, r1
 800e410:	633b      	str	r3, [r7, #48]	; 0x30
 800e412:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e416:	460b      	mov	r3, r1
 800e418:	4063      	eors	r3, r4
 800e41a:	60bb      	str	r3, [r7, #8]
 800e41c:	4613      	mov	r3, r2
 800e41e:	406b      	eors	r3, r5
 800e420:	60fb      	str	r3, [r7, #12]
 800e422:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e426:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
            for (j = 0; j < 25; j += 5)
 800e42a:	2300      	movs	r3, #0
 800e42c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800e430:	e025      	b.n	800e47e <sha3_keccakf+0x1e6>
                st[j + i] ^= t;
 800e432:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800e436:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e43a:	4413      	add	r3, r2
 800e43c:	00da      	lsls	r2, r3, #3
 800e43e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4413      	add	r3, r2
 800e446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e44a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800e44e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e452:	4413      	add	r3, r2
 800e454:	00da      	lsls	r2, r3, #3
 800e456:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	189c      	adds	r4, r3, r2
 800e45e:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 800e462:	ea80 0502 	eor.w	r5, r0, r2
 800e466:	62bd      	str	r5, [r7, #40]	; 0x28
 800e468:	404b      	eors	r3, r1
 800e46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e46c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e470:	e9c4 2300 	strd	r2, r3, [r4]
            for (j = 0; j < 25; j += 5)
 800e474:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800e478:	3305      	adds	r3, #5
 800e47a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800e47e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800e482:	2b18      	cmp	r3, #24
 800e484:	ddd5      	ble.n	800e432 <sha3_keccakf+0x19a>
        for (i = 0; i < 5; i++) {
 800e486:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e48a:	3301      	adds	r3, #1
 800e48c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e490:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e494:	2b04      	cmp	r3, #4
 800e496:	dd8e      	ble.n	800e3b6 <sha3_keccakf+0x11e>
        }

        // Rho Pi
        t = st[1];
 800e498:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e4a2:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
        for (i = 0; i < 24; i++) {
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e4ac:	e05b      	b.n	800e566 <sha3_keccakf+0x2ce>
            j = keccakf_piln[i];
 800e4ae:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800e4b2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e4b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4ba:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
            bc[0] = st[j];
 800e4be:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800e4c2:	00da      	lsls	r2, r3, #3
 800e4c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4413      	add	r3, r2
 800e4cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e4d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e4d4:	e9c3 0100 	strd	r0, r1, [r3]
            st[j] = ROTL64(t, keccakf_rotc[i]);
 800e4d8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800e4dc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e4e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e4e4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800e4e8:	00da      	lsls	r2, r3, #3
 800e4ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	189d      	adds	r5, r3, r2
 800e4f2:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 800e4f6:	f1a4 0120 	sub.w	r1, r4, #32
 800e4fa:	f1c4 0020 	rsb	r0, r4, #32
 800e4fe:	fa03 fb04 	lsl.w	fp, r3, r4
 800e502:	fa02 f101 	lsl.w	r1, r2, r1
 800e506:	ea4b 0b01 	orr.w	fp, fp, r1
 800e50a:	fa22 f000 	lsr.w	r0, r2, r0
 800e50e:	ea4b 0b00 	orr.w	fp, fp, r0
 800e512:	fa02 fa04 	lsl.w	sl, r2, r4
 800e516:	4264      	negs	r4, r4
 800e518:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 800e51c:	f1c4 0120 	rsb	r1, r4, #32
 800e520:	f1a4 0020 	sub.w	r0, r4, #32
 800e524:	fa22 f804 	lsr.w	r8, r2, r4
 800e528:	fa03 f101 	lsl.w	r1, r3, r1
 800e52c:	ea48 0801 	orr.w	r8, r8, r1
 800e530:	fa23 f000 	lsr.w	r0, r3, r0
 800e534:	ea48 0800 	orr.w	r8, r8, r0
 800e538:	fa23 f904 	lsr.w	r9, r3, r4
 800e53c:	ea4a 0308 	orr.w	r3, sl, r8
 800e540:	603b      	str	r3, [r7, #0]
 800e542:	ea4b 0309 	orr.w	r3, fp, r9
 800e546:	607b      	str	r3, [r7, #4]
 800e548:	e9d7 8900 	ldrd	r8, r9, [r7]
 800e54c:	e9c5 8900 	strd	r8, r9, [r5]
            t = bc[0];
 800e550:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e558:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
        for (i = 0; i < 24; i++) {
 800e55c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e560:	3301      	adds	r3, #1
 800e562:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e566:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e56a:	2b17      	cmp	r3, #23
 800e56c:	dd9f      	ble.n	800e4ae <sha3_keccakf+0x216>
        }

        //  Chi
        for (j = 0; j < 25; j += 5) {
 800e56e:	2300      	movs	r3, #0
 800e570:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800e574:	e08c      	b.n	800e690 <sha3_keccakf+0x3f8>
            for (i = 0; i < 5; i++)
 800e576:	2300      	movs	r3, #0
 800e578:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e57c:	e018      	b.n	800e5b0 <sha3_keccakf+0x318>
                bc[i] = st[j + i];
 800e57e:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800e582:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e586:	4413      	add	r3, r2
 800e588:	00da      	lsls	r2, r3, #3
 800e58a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4413      	add	r3, r2
 800e592:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e596:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800e59a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e59e:	00db      	lsls	r3, r3, #3
 800e5a0:	4413      	add	r3, r2
 800e5a2:	e9c3 0100 	strd	r0, r1, [r3]
            for (i = 0; i < 5; i++)
 800e5a6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e5b0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e5b4:	2b04      	cmp	r3, #4
 800e5b6:	dde2      	ble.n	800e57e <sha3_keccakf+0x2e6>
            for (i = 0; i < 5; i++)
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e5be:	e05e      	b.n	800e67e <sha3_keccakf+0x3e6>
 800e5c0:	0801a390 	.word	0x0801a390
 800e5c4:	0801a450 	.word	0x0801a450
 800e5c8:	0801a4b0 	.word	0x0801a4b0
 800e5cc:	66666667 	.word	0x66666667
                st[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
 800e5d0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800e5d4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e5d8:	4413      	add	r3, r2
 800e5da:	00da      	lsls	r2, r3, #3
 800e5dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e5e8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e5ec:	1c59      	adds	r1, r3, #1
 800e5ee:	4b40      	ldr	r3, [pc, #256]	; (800e6f0 <sha3_keccakf+0x458>)
 800e5f0:	fb83 2301 	smull	r2, r3, r3, r1
 800e5f4:	105a      	asrs	r2, r3, #1
 800e5f6:	17cb      	asrs	r3, r1, #31
 800e5f8:	1ad2      	subs	r2, r2, r3
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4413      	add	r3, r2
 800e600:	1aca      	subs	r2, r1, r3
 800e602:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800e606:	00d3      	lsls	r3, r2, #3
 800e608:	440b      	add	r3, r1
 800e60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60e:	43d1      	mvns	r1, r2
 800e610:	65b9      	str	r1, [r7, #88]	; 0x58
 800e612:	43db      	mvns	r3, r3
 800e614:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e616:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e61a:	1c99      	adds	r1, r3, #2
 800e61c:	4b34      	ldr	r3, [pc, #208]	; (800e6f0 <sha3_keccakf+0x458>)
 800e61e:	fb83 2301 	smull	r2, r3, r3, r1
 800e622:	105a      	asrs	r2, r3, #1
 800e624:	17cb      	asrs	r3, r1, #31
 800e626:	1ad2      	subs	r2, r2, r3
 800e628:	4613      	mov	r3, r2
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	1aca      	subs	r2, r1, r3
 800e630:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800e634:	00d3      	lsls	r3, r2, #3
 800e636:	440b      	add	r3, r1
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e63e:	4011      	ands	r1, r2
 800e640:	6239      	str	r1, [r7, #32]
 800e642:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e644:	400b      	ands	r3, r1
 800e646:	627b      	str	r3, [r7, #36]	; 0x24
 800e648:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800e64c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e650:	4413      	add	r3, r2
 800e652:	00da      	lsls	r2, r3, #3
 800e654:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4413      	add	r3, r2
 800e65c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e660:	4602      	mov	r2, r0
 800e662:	4062      	eors	r2, r4
 800e664:	61ba      	str	r2, [r7, #24]
 800e666:	460a      	mov	r2, r1
 800e668:	406a      	eors	r2, r5
 800e66a:	61fa      	str	r2, [r7, #28]
 800e66c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e670:	e9c3 1200 	strd	r1, r2, [r3]
            for (i = 0; i < 5; i++)
 800e674:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e678:	3301      	adds	r3, #1
 800e67a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e67e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e682:	2b04      	cmp	r3, #4
 800e684:	dda4      	ble.n	800e5d0 <sha3_keccakf+0x338>
        for (j = 0; j < 25; j += 5) {
 800e686:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800e68a:	3305      	adds	r3, #5
 800e68c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800e690:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800e694:	2b18      	cmp	r3, #24
 800e696:	f77f af6e 	ble.w	800e576 <sha3_keccakf+0x2de>
        }

        //  Iota
        st[0] ^= keccakf_rndc[r];
 800e69a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e6a4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800e6a8:	00db      	lsls	r3, r3, #3
 800e6aa:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800e6ae:	4413      	add	r3, r2
 800e6b0:	3bd8      	subs	r3, #216	; 0xd8
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	ea80 0402 	eor.w	r4, r0, r2
 800e6ba:	613c      	str	r4, [r7, #16]
 800e6bc:	404b      	eors	r3, r1
 800e6be:	617b      	str	r3, [r7, #20]
 800e6c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e6ca:	e9c3 1200 	strd	r1, r2, [r3]
    for (r = 0; r < KECCAKF_ROUNDS; r++) {
 800e6ce:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800e6d8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800e6dc:	2b17      	cmp	r3, #23
 800e6de:	f77f ae01 	ble.w	800e2e4 <sha3_keccakf+0x4c>
        v[5] = (t >> 40) & 0xFF;
        v[6] = (t >> 48) & 0xFF;
        v[7] = (t >> 56) & 0xFF;
    }
#endif
}
 800e6e2:	bf00      	nop
 800e6e4:	bf00      	nop
 800e6e6:	f507 770a 	add.w	r7, r7, #552	; 0x228
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e6f0:	66666667 	.word	0x66666667

0800e6f4 <sha3_init>:

// Initialize the context for SHA3

int sha3_init(sha3_ctx_t *c, int mdlen)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b085      	sub	sp, #20
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
    int i;

    for (i = 0; i < 25; i++)
 800e6fe:	2300      	movs	r3, #0
 800e700:	60fb      	str	r3, [r7, #12]
 800e702:	e00c      	b.n	800e71e <sha3_init+0x2a>
        c->st.q[i] = 0;
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	00db      	lsls	r3, r3, #3
 800e70a:	18d1      	adds	r1, r2, r3
 800e70c:	f04f 0200 	mov.w	r2, #0
 800e710:	f04f 0300 	mov.w	r3, #0
 800e714:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 25; i++)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	3301      	adds	r3, #1
 800e71c:	60fb      	str	r3, [r7, #12]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b18      	cmp	r3, #24
 800e722:	ddef      	ble.n	800e704 <sha3_init+0x10>
    c->mdlen = mdlen;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	683a      	ldr	r2, [r7, #0]
 800e728:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    c->rsiz = 200 - 2 * mdlen;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800e732:	005a      	lsls	r2, r3, #1
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    c->pt = 0;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    return 1;
 800e742:	2301      	movs	r3, #1
}
 800e744:	4618      	mov	r0, r3
 800e746:	3714      	adds	r7, #20
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <sha3_update>:

// update state with more data

int sha3_update(sha3_ctx_t *c, const void *data, size_t len)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b086      	sub	sp, #24
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
    size_t i;
    int j;

    j = c->pt;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e762:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len; i++) {
 800e764:	2300      	movs	r3, #0
 800e766:	617b      	str	r3, [r7, #20]
 800e768:	e01b      	b.n	800e7a2 <sha3_update+0x52>
        c->st.b[j++] ^= ((const uint8_t *) data)[i];
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	1c5a      	adds	r2, r3, #1
 800e76e:	613a      	str	r2, [r7, #16]
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	5cd1      	ldrb	r1, [r2, r3]
 800e774:	68b8      	ldr	r0, [r7, #8]
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	4402      	add	r2, r0
 800e77a:	7812      	ldrb	r2, [r2, #0]
 800e77c:	404a      	eors	r2, r1
 800e77e:	b2d1      	uxtb	r1, r2
 800e780:	68fa      	ldr	r2, [r7, #12]
 800e782:	54d1      	strb	r1, [r2, r3]
        if (j >= c->rsiz) {
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e78a:	693a      	ldr	r2, [r7, #16]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	db05      	blt.n	800e79c <sha3_update+0x4c>
            sha3_keccakf(c->st.q);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	4618      	mov	r0, r3
 800e794:	f7ff fd80 	bl	800e298 <sha3_keccakf>
            j = 0;
 800e798:	2300      	movs	r3, #0
 800e79a:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len; i++) {
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	617b      	str	r3, [r7, #20]
 800e7a2:	697a      	ldr	r2, [r7, #20]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d3df      	bcc.n	800e76a <sha3_update+0x1a>
        }
    }
    c->pt = j;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	693a      	ldr	r2, [r7, #16]
 800e7ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    return 1;
 800e7b2:	2301      	movs	r3, #1
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3718      	adds	r7, #24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <sha3_final>:

// finalize and output a hash

int sha3_final(void *md, sha3_ctx_t *c)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
    int i;

    c->st.b[c->pt] ^= 0x06;
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e7cc:	683a      	ldr	r2, [r7, #0]
 800e7ce:	5cd2      	ldrb	r2, [r2, r3]
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e7d6:	f082 0206 	eor.w	r2, r2, #6
 800e7da:	b2d1      	uxtb	r1, r2
 800e7dc:	683a      	ldr	r2, [r7, #0]
 800e7de:	54d1      	strb	r1, [r2, r3]
    c->st.b[c->rsiz - 1] ^= 0x80;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	683a      	ldr	r2, [r7, #0]
 800e7ea:	5cd3      	ldrb	r3, [r2, r3]
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 800e7f2:	3a01      	subs	r2, #1
 800e7f4:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800e7f8:	43db      	mvns	r3, r3
 800e7fa:	b2d9      	uxtb	r1, r3
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	5499      	strb	r1, [r3, r2]
    sha3_keccakf(c->st.q);
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	4618      	mov	r0, r3
 800e804:	f7ff fd48 	bl	800e298 <sha3_keccakf>

    for (i = 0; i < c->mdlen; i++) {
 800e808:	2300      	movs	r3, #0
 800e80a:	60fb      	str	r3, [r7, #12]
 800e80c:	e00a      	b.n	800e824 <sha3_final+0x68>
        ((uint8_t *) md)[i] = c->st.b[i];
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	4413      	add	r3, r2
 800e814:	6839      	ldr	r1, [r7, #0]
 800e816:	68fa      	ldr	r2, [r7, #12]
 800e818:	440a      	add	r2, r1
 800e81a:	7812      	ldrb	r2, [r2, #0]
 800e81c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < c->mdlen; i++) {
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	3301      	adds	r3, #1
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	dbee      	blt.n	800e80e <sha3_final+0x52>
    }

    return 1;
 800e830:	2301      	movs	r3, #1
}
 800e832:	4618      	mov	r0, r3
 800e834:	3710      	adds	r7, #16
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <sha3>:

// compute a SHA-3 hash (md) of given byte length from "in"

void *sha3(const void *in, size_t inlen, void *md, int mdlen)
{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b0ba      	sub	sp, #232	; 0xe8
 800e83e:	af00      	add	r7, sp, #0
 800e840:	60f8      	str	r0, [r7, #12]
 800e842:	60b9      	str	r1, [r7, #8]
 800e844:	607a      	str	r2, [r7, #4]
 800e846:	603b      	str	r3, [r7, #0]
    sha3_ctx_t sha3;

    sha3_init(&sha3, mdlen);
 800e848:	f107 0310 	add.w	r3, r7, #16
 800e84c:	6839      	ldr	r1, [r7, #0]
 800e84e:	4618      	mov	r0, r3
 800e850:	f7ff ff50 	bl	800e6f4 <sha3_init>
    sha3_update(&sha3, in, inlen);
 800e854:	f107 0310 	add.w	r3, r7, #16
 800e858:	68ba      	ldr	r2, [r7, #8]
 800e85a:	68f9      	ldr	r1, [r7, #12]
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7ff ff77 	bl	800e750 <sha3_update>
    sha3_final(md, &sha3);
 800e862:	f107 0310 	add.w	r3, r7, #16
 800e866:	4619      	mov	r1, r3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f7ff ffa7 	bl	800e7bc <sha3_final>

    return md;
 800e86e:	687b      	ldr	r3, [r7, #4]
}
 800e870:	4618      	mov	r0, r3
 800e872:	37e8      	adds	r7, #232	; 0xe8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <sha512_compress>:
   #define MIN(x, y) ( ((x)<(y))?(x):(y) )
#endif

/* compress 1024-bits */
static int sha512_compress(sha512_context *md, unsigned char *buf)
{
 800e878:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800e87c:	f5ad 6d17 	sub.w	sp, sp, #2416	; 0x970
 800e880:	af00      	add	r7, sp, #0
 800e882:	f207 6394 	addw	r3, r7, #1684	; 0x694
 800e886:	6018      	str	r0, [r3, #0]
 800e888:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800e88c:	6019      	str	r1, [r3, #0]
    uint64_t S[8], W[80], t0, t1;
    int i;

    /* copy state into S */
    for (i = 0; i < 8; i++) {
 800e88e:	2300      	movs	r3, #0
 800e890:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800e894:	e017      	b.n	800e8c6 <sha512_compress+0x4e>
        S[i] = md->state[i];
 800e896:	f207 6394 	addw	r3, r7, #1684	; 0x694
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	00db      	lsls	r3, r3, #3
 800e8a4:	4413      	add	r3, r2
 800e8a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e8aa:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e8ae:	00db      	lsls	r3, r3, #3
 800e8b0:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 800e8b4:	4413      	add	r3, r2
 800e8b6:	3b58      	subs	r3, #88	; 0x58
 800e8b8:	e9c3 0100 	strd	r0, r1, [r3]
    for (i = 0; i < 8; i++) {
 800e8bc:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800e8c6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e8ca:	2b07      	cmp	r3, #7
 800e8cc:	dde3      	ble.n	800e896 <sha512_compress+0x1e>
    }

    /* copy the state into 1024-bits into W[0..15] */
    for (i = 0; i < 16; i++) {
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800e8d4:	e0e6      	b.n	800eaa4 <sha512_compress+0x22c>
        LOAD64H(W[i], buf + (8*i));
 800e8d6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e8da:	00db      	lsls	r3, r3, #3
 800e8dc:	461a      	mov	r2, r3
 800e8de:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	b2da      	uxtb	r2, r3
 800e8ea:	f04f 0300 	mov.w	r3, #0
 800e8ee:	f04f 0400 	mov.w	r4, #0
 800e8f2:	f04f 0500 	mov.w	r5, #0
 800e8f6:	0615      	lsls	r5, r2, #24
 800e8f8:	2400      	movs	r4, #0
 800e8fa:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e8fe:	00db      	lsls	r3, r3, #3
 800e900:	1c5a      	adds	r2, r3, #1
 800e902:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	4413      	add	r3, r2
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	b2da      	uxtb	r2, r3
 800e90e:	f04f 0300 	mov.w	r3, #0
 800e912:	f04f 0000 	mov.w	r0, #0
 800e916:	f04f 0100 	mov.w	r1, #0
 800e91a:	0411      	lsls	r1, r2, #16
 800e91c:	2000      	movs	r0, #0
 800e91e:	ea44 0300 	orr.w	r3, r4, r0
 800e922:	f8c7 3688 	str.w	r3, [r7, #1672]	; 0x688
 800e926:	ea45 0301 	orr.w	r3, r5, r1
 800e92a:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 800e92e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e932:	00db      	lsls	r3, r3, #3
 800e934:	1c9a      	adds	r2, r3, #2
 800e936:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4413      	add	r3, r2
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	b2da      	uxtb	r2, r3
 800e942:	f04f 0300 	mov.w	r3, #0
 800e946:	f04f 0000 	mov.w	r0, #0
 800e94a:	f04f 0100 	mov.w	r1, #0
 800e94e:	0211      	lsls	r1, r2, #8
 800e950:	2000      	movs	r0, #0
 800e952:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800e956:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e95a:	4623      	mov	r3, r4
 800e95c:	4303      	orrs	r3, r0
 800e95e:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
 800e962:	462b      	mov	r3, r5
 800e964:	430b      	orrs	r3, r1
 800e966:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 800e96a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e96e:	00db      	lsls	r3, r3, #3
 800e970:	1cda      	adds	r2, r3, #3
 800e972:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4413      	add	r3, r2
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	f04f 0300 	mov.w	r3, #0
 800e982:	f04f 0000 	mov.w	r0, #0
 800e986:	f04f 0100 	mov.w	r1, #0
 800e98a:	0011      	movs	r1, r2
 800e98c:	2000      	movs	r0, #0
 800e98e:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800e992:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e996:	4623      	mov	r3, r4
 800e998:	4303      	orrs	r3, r0
 800e99a:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
 800e99e:	462b      	mov	r3, r5
 800e9a0:	430b      	orrs	r3, r1
 800e9a2:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 800e9a6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e9aa:	00db      	lsls	r3, r3, #3
 800e9ac:	1d1a      	adds	r2, r3, #4
 800e9ae:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4413      	add	r3, r2
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	b2da      	uxtb	r2, r3
 800e9ba:	f04f 0300 	mov.w	r3, #0
 800e9be:	0a11      	lsrs	r1, r2, #8
 800e9c0:	f8c7 1674 	str.w	r1, [r7, #1652]	; 0x674
 800e9c4:	0613      	lsls	r3, r2, #24
 800e9c6:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 800e9ca:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 800e9ce:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e9d2:	4623      	mov	r3, r4
 800e9d4:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800e9d8:	e9d2 0100 	ldrd	r0, r1, [r2]
 800e9dc:	4602      	mov	r2, r0
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 800e9e4:	462b      	mov	r3, r5
 800e9e6:	460a      	mov	r2, r1
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 800e9ee:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800e9f2:	00db      	lsls	r3, r3, #3
 800e9f4:	1d5a      	adds	r2, r3, #5
 800e9f6:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	b2da      	uxtb	r2, r3
 800ea02:	f04f 0300 	mov.w	r3, #0
 800ea06:	f04f 0000 	mov.w	r0, #0
 800ea0a:	f04f 0100 	mov.w	r1, #0
 800ea0e:	0419      	lsls	r1, r3, #16
 800ea10:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800ea14:	0410      	lsls	r0, r2, #16
 800ea16:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800ea1a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ea1e:	4623      	mov	r3, r4
 800ea20:	ea43 0a00 	orr.w	sl, r3, r0
 800ea24:	462b      	mov	r3, r5
 800ea26:	ea43 0b01 	orr.w	fp, r3, r1
 800ea2a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ea2e:	00db      	lsls	r3, r3, #3
 800ea30:	1d9a      	adds	r2, r3, #6
 800ea32:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4413      	add	r3, r2
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	b2da      	uxtb	r2, r3
 800ea3e:	f04f 0300 	mov.w	r3, #0
 800ea42:	f04f 0000 	mov.w	r0, #0
 800ea46:	f04f 0100 	mov.w	r1, #0
 800ea4a:	0219      	lsls	r1, r3, #8
 800ea4c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ea50:	0210      	lsls	r0, r2, #8
 800ea52:	ea4a 0800 	orr.w	r8, sl, r0
 800ea56:	ea4b 0901 	orr.w	r9, fp, r1
 800ea5a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ea5e:	00db      	lsls	r3, r3, #3
 800ea60:	1dda      	adds	r2, r3, #7
 800ea62:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4413      	add	r3, r2
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	b2da      	uxtb	r2, r3
 800ea6e:	f04f 0300 	mov.w	r3, #0
 800ea72:	ea48 0102 	orr.w	r1, r8, r2
 800ea76:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 800ea7a:	ea49 0303 	orr.w	r3, r9, r3
 800ea7e:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 800ea82:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800ea86:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ea8a:	00db      	lsls	r3, r3, #3
 800ea8c:	4413      	add	r3, r2
 800ea8e:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800ea92:	e9d2 1200 	ldrd	r1, r2, [r2]
 800ea96:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 0; i < 16; i++) {
 800ea9a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800eaa4:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eaa8:	2b0f      	cmp	r3, #15
 800eaaa:	f77f af14 	ble.w	800e8d6 <sha512_compress+0x5e>
    }

    /* fill W[16..79] */
    for (i = 16; i < 80; i++) {
 800eaae:	2310      	movs	r3, #16
 800eab0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800eab4:	e0f8      	b.n	800eca8 <sha512_compress+0x430>
        W[i] = Gamma1(W[i - 2]) + W[i - 7] + Gamma0(W[i - 15]) + W[i - 16];
 800eab6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eaba:	3b02      	subs	r3, #2
 800eabc:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800eac0:	00db      	lsls	r3, r3, #3
 800eac2:	4413      	add	r3, r2
 800eac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac8:	0358      	lsls	r0, r3, #13
 800eaca:	0cd1      	lsrs	r1, r2, #19
 800eacc:	4301      	orrs	r1, r0
 800eace:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 800ead2:	0351      	lsls	r1, r2, #13
 800ead4:	0cdb      	lsrs	r3, r3, #19
 800ead6:	430b      	orrs	r3, r1
 800ead8:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 800eadc:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eae0:	3b02      	subs	r3, #2
 800eae2:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800eae6:	00db      	lsls	r3, r3, #3
 800eae8:	4413      	add	r3, r2
 800eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaee:	0f50      	lsrs	r0, r2, #29
 800eaf0:	00d9      	lsls	r1, r3, #3
 800eaf2:	4301      	orrs	r1, r0
 800eaf4:	f8c7 1654 	str.w	r1, [r7, #1620]	; 0x654
 800eaf8:	0f59      	lsrs	r1, r3, #29
 800eafa:	00d3      	lsls	r3, r2, #3
 800eafc:	430b      	orrs	r3, r1
 800eafe:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 800eb02:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800eb06:	e9d3 4500 	ldrd	r4, r5, [r3]
 800eb0a:	4623      	mov	r3, r4
 800eb0c:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 800eb10:	e9d2 0100 	ldrd	r0, r1, [r2]
 800eb14:	4602      	mov	r2, r0
 800eb16:	4053      	eors	r3, r2
 800eb18:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 800eb1c:	462b      	mov	r3, r5
 800eb1e:	460a      	mov	r2, r1
 800eb20:	4053      	eors	r3, r2
 800eb22:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 800eb26:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eb2a:	3b02      	subs	r3, #2
 800eb2c:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800eb30:	00db      	lsls	r3, r3, #3
 800eb32:	4413      	add	r3, r2
 800eb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb38:	f04f 0000 	mov.w	r0, #0
 800eb3c:	f04f 0100 	mov.w	r1, #0
 800eb40:	0990      	lsrs	r0, r2, #6
 800eb42:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800eb46:	0999      	lsrs	r1, r3, #6
 800eb48:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800eb4c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800eb50:	4623      	mov	r3, r4
 800eb52:	4043      	eors	r3, r0
 800eb54:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
 800eb58:	462b      	mov	r3, r5
 800eb5a:	404b      	eors	r3, r1
 800eb5c:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 800eb60:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eb64:	3b07      	subs	r3, #7
 800eb66:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800eb6a:	00db      	lsls	r3, r3, #3
 800eb6c:	4413      	add	r3, r2
 800eb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb72:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 800eb76:	e9d1 4500 	ldrd	r4, r5, [r1]
 800eb7a:	4621      	mov	r1, r4
 800eb7c:	1889      	adds	r1, r1, r2
 800eb7e:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 800eb82:	4629      	mov	r1, r5
 800eb84:	eb41 0303 	adc.w	r3, r1, r3
 800eb88:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 800eb8c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eb90:	3b0f      	subs	r3, #15
 800eb92:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800eb96:	00db      	lsls	r3, r3, #3
 800eb98:	4413      	add	r3, r2
 800eb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9e:	07d8      	lsls	r0, r3, #31
 800eba0:	0851      	lsrs	r1, r2, #1
 800eba2:	4301      	orrs	r1, r0
 800eba4:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 800eba8:	07d1      	lsls	r1, r2, #31
 800ebaa:	085b      	lsrs	r3, r3, #1
 800ebac:	430b      	orrs	r3, r1
 800ebae:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 800ebb2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ebb6:	3b0f      	subs	r3, #15
 800ebb8:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800ebbc:	00db      	lsls	r3, r3, #3
 800ebbe:	4413      	add	r3, r2
 800ebc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc4:	0618      	lsls	r0, r3, #24
 800ebc6:	0a11      	lsrs	r1, r2, #8
 800ebc8:	4301      	orrs	r1, r0
 800ebca:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 800ebce:	0611      	lsls	r1, r2, #24
 800ebd0:	0a1b      	lsrs	r3, r3, #8
 800ebd2:	430b      	orrs	r3, r1
 800ebd4:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800ebd8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800ebdc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ebe0:	4623      	mov	r3, r4
 800ebe2:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 800ebe6:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ebea:	4602      	mov	r2, r0
 800ebec:	4053      	eors	r3, r2
 800ebee:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800ebf2:	462b      	mov	r3, r5
 800ebf4:	460a      	mov	r2, r1
 800ebf6:	4053      	eors	r3, r2
 800ebf8:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 800ebfc:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ec00:	3b0f      	subs	r3, #15
 800ec02:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800ec06:	00db      	lsls	r3, r3, #3
 800ec08:	4413      	add	r3, r2
 800ec0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0e:	f04f 0000 	mov.w	r0, #0
 800ec12:	f04f 0100 	mov.w	r1, #0
 800ec16:	09d0      	lsrs	r0, r2, #7
 800ec18:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800ec1c:	09d9      	lsrs	r1, r3, #7
 800ec1e:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800ec22:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ec26:	4623      	mov	r3, r4
 800ec28:	4043      	eors	r3, r0
 800ec2a:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800ec2e:	462b      	mov	r3, r5
 800ec30:	404b      	eors	r3, r1
 800ec32:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800ec36:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800ec3a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ec3e:	4623      	mov	r3, r4
 800ec40:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800ec44:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ec48:	4602      	mov	r2, r0
 800ec4a:	189b      	adds	r3, r3, r2
 800ec4c:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
 800ec50:	462b      	mov	r3, r5
 800ec52:	460a      	mov	r2, r1
 800ec54:	4153      	adcs	r3, r2
 800ec56:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 800ec5a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ec5e:	3b10      	subs	r3, #16
 800ec60:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800ec64:	00db      	lsls	r3, r3, #3
 800ec66:	4413      	add	r3, r2
 800ec68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6c:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 800ec70:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ec74:	4621      	mov	r1, r4
 800ec76:	1889      	adds	r1, r1, r2
 800ec78:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	eb41 0303 	adc.w	r3, r1, r3
 800ec82:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800ec86:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800ec8a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ec8e:	00db      	lsls	r3, r3, #3
 800ec90:	4413      	add	r3, r2
 800ec92:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 800ec96:	e9d2 1200 	ldrd	r1, r2, [r2]
 800ec9a:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 16; i < 80; i++) {
 800ec9e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eca2:	3301      	adds	r3, #1
 800eca4:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800eca8:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ecac:	2b4f      	cmp	r3, #79	; 0x4f
 800ecae:	f77f af02 	ble.w	800eab6 <sha512_compress+0x23e>
    t0 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i]; \
    t1 = Sigma0(a) + Maj(a, b, c);\
    d += t0; \
    h  = t0 + t1;

    for (i = 0; i < 80; i += 8) {
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800ecb8:	f001 bc4b 	b.w	8010552 <sha512_compress+0x1cda>
       RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],i+0);
 800ecbc:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800ecc0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ecc4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800ecc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eccc:	0498      	lsls	r0, r3, #18
 800ecce:	0b91      	lsrs	r1, r2, #14
 800ecd0:	4301      	orrs	r1, r0
 800ecd2:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 800ecd6:	0491      	lsls	r1, r2, #18
 800ecd8:	0b9b      	lsrs	r3, r3, #14
 800ecda:	430b      	orrs	r3, r1
 800ecdc:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800ece0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	0398      	lsls	r0, r3, #14
 800ecea:	0c91      	lsrs	r1, r2, #18
 800ecec:	4301      	orrs	r1, r0
 800ecee:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 800ecf2:	0391      	lsls	r1, r2, #14
 800ecf4:	0c9b      	lsrs	r3, r3, #18
 800ecf6:	430b      	orrs	r3, r1
 800ecf8:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800ecfc:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800ed00:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed04:	4643      	mov	r3, r8
 800ed06:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 800ed0a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ed0e:	4602      	mov	r2, r0
 800ed10:	4053      	eors	r3, r2
 800ed12:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 800ed16:	464b      	mov	r3, r9
 800ed18:	460a      	mov	r2, r1
 800ed1a:	4053      	eors	r3, r2
 800ed1c:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800ed20:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed28:	0a50      	lsrs	r0, r2, #9
 800ed2a:	05d9      	lsls	r1, r3, #23
 800ed2c:	4301      	orrs	r1, r0
 800ed2e:	f8c7 15ec 	str.w	r1, [r7, #1516]	; 0x5ec
 800ed32:	0a59      	lsrs	r1, r3, #9
 800ed34:	05d3      	lsls	r3, r2, #23
 800ed36:	430b      	orrs	r3, r1
 800ed38:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
 800ed3c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800ed40:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed44:	4643      	mov	r3, r8
 800ed46:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800ed4a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ed4e:	4602      	mov	r2, r0
 800ed50:	4053      	eors	r3, r2
 800ed52:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800ed56:	464b      	mov	r3, r9
 800ed58:	460a      	mov	r2, r1
 800ed5a:	4053      	eors	r3, r2
 800ed5c:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 800ed60:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800ed64:	e9d3 1200 	ldrd	r1, r2, [r3]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	18e3      	adds	r3, r4, r3
 800ed6c:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
 800ed70:	4613      	mov	r3, r2
 800ed72:	eb45 0303 	adc.w	r3, r5, r3
 800ed76:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800ed7a:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800ed7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed82:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800ed86:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ed8a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800ed8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed92:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800ed96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9a:	ea80 0602 	eor.w	r6, r0, r2
 800ed9e:	f8c7 65d0 	str.w	r6, [r7, #1488]	; 0x5d0
 800eda2:	404b      	eors	r3, r1
 800eda4:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800eda8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800edac:	e9d3 1200 	ldrd	r1, r2, [r3]
 800edb0:	460b      	mov	r3, r1
 800edb2:	4023      	ands	r3, r4
 800edb4:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
 800edb8:	4613      	mov	r3, r2
 800edba:	402b      	ands	r3, r5
 800edbc:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800edc0:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800edc4:	e9d3 1200 	ldrd	r1, r2, [r3]
 800edc8:	460b      	mov	r3, r1
 800edca:	ea88 0303 	eor.w	r3, r8, r3
 800edce:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 800edd2:	4613      	mov	r3, r2
 800edd4:	ea89 0303 	eor.w	r3, r9, r3
 800edd8:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800eddc:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800ede0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ede4:	4623      	mov	r3, r4
 800ede6:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800edea:	e9d2 0100 	ldrd	r0, r1, [r2]
 800edee:	4602      	mov	r2, r0
 800edf0:	189b      	adds	r3, r3, r2
 800edf2:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800edf6:	462b      	mov	r3, r5
 800edf8:	460a      	mov	r2, r1
 800edfa:	4153      	adcs	r3, r2
 800edfc:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800ee00:	4af4      	ldr	r2, [pc, #976]	; (800f1d4 <sha512_compress+0x95c>)
 800ee02:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ee06:	00db      	lsls	r3, r3, #3
 800ee08:	4413      	add	r3, r2
 800ee0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0e:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 800ee12:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ee16:	4621      	mov	r1, r4
 800ee18:	1889      	adds	r1, r1, r2
 800ee1a:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800ee1e:	4629      	mov	r1, r5
 800ee20:	eb41 0303 	adc.w	r3, r1, r3
 800ee24:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800ee28:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800ee2c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ee30:	00db      	lsls	r3, r3, #3
 800ee32:	4413      	add	r3, r2
 800ee34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee38:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 800ee3c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ee40:	4621      	mov	r1, r4
 800ee42:	1889      	adds	r1, r1, r2
 800ee44:	67b9      	str	r1, [r7, #120]	; 0x78
 800ee46:	4629      	mov	r1, r5
 800ee48:	eb41 0303 	adc.w	r3, r1, r3
 800ee4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee4e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800ee52:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 800ee56:	e9c2 3400 	strd	r3, r4, [r2]
 800ee5a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800ee5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee62:	0118      	lsls	r0, r3, #4
 800ee64:	0f11      	lsrs	r1, r2, #28
 800ee66:	4301      	orrs	r1, r0
 800ee68:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 800ee6c:	0111      	lsls	r1, r2, #4
 800ee6e:	0f1b      	lsrs	r3, r3, #28
 800ee70:	430b      	orrs	r3, r1
 800ee72:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800ee76:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800ee7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7e:	0890      	lsrs	r0, r2, #2
 800ee80:	0799      	lsls	r1, r3, #30
 800ee82:	4301      	orrs	r1, r0
 800ee84:	f8c7 15a4 	str.w	r1, [r7, #1444]	; 0x5a4
 800ee88:	0899      	lsrs	r1, r3, #2
 800ee8a:	0793      	lsls	r3, r2, #30
 800ee8c:	430b      	orrs	r3, r1
 800ee8e:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800ee92:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800ee96:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ee9a:	4623      	mov	r3, r4
 800ee9c:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 800eea0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800eea4:	4602      	mov	r2, r0
 800eea6:	4053      	eors	r3, r2
 800eea8:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 800eeac:	462b      	mov	r3, r5
 800eeae:	460a      	mov	r2, r1
 800eeb0:	4053      	eors	r3, r2
 800eeb2:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800eeb6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800eeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eebe:	09d0      	lsrs	r0, r2, #7
 800eec0:	0659      	lsls	r1, r3, #25
 800eec2:	4301      	orrs	r1, r0
 800eec4:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
 800eec8:	09d9      	lsrs	r1, r3, #7
 800eeca:	0653      	lsls	r3, r2, #25
 800eecc:	430b      	orrs	r3, r1
 800eece:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800eed2:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800eed6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800eeda:	4623      	mov	r3, r4
 800eedc:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800eee0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800eee4:	4602      	mov	r2, r0
 800eee6:	4053      	eors	r3, r2
 800eee8:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 800eeec:	462b      	mov	r3, r5
 800eeee:	460a      	mov	r2, r1
 800eef0:	4053      	eors	r3, r2
 800eef2:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800eef6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800eefa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eefe:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800ef02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef06:	ea40 0402 	orr.w	r4, r0, r2
 800ef0a:	f8c7 4580 	str.w	r4, [r7, #1408]	; 0x580
 800ef0e:	430b      	orrs	r3, r1
 800ef10:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800ef14:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 800ef20:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ef24:	4621      	mov	r1, r4
 800ef26:	4011      	ands	r1, r2
 800ef28:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 800ef2c:	4629      	mov	r1, r5
 800ef2e:	400b      	ands	r3, r1
 800ef30:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800ef34:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800ef38:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ef3c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800ef40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef44:	ea00 0402 	and.w	r4, r0, r2
 800ef48:	f8c7 4570 	str.w	r4, [r7, #1392]	; 0x570
 800ef4c:	400b      	ands	r3, r1
 800ef4e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800ef52:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800ef56:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ef5a:	4623      	mov	r3, r4
 800ef5c:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 800ef60:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ef64:	4602      	mov	r2, r0
 800ef66:	4313      	orrs	r3, r2
 800ef68:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
 800ef6c:	462b      	mov	r3, r5
 800ef6e:	460a      	mov	r2, r1
 800ef70:	4313      	orrs	r3, r2
 800ef72:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800ef76:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800ef7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ef7e:	4623      	mov	r3, r4
 800ef80:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 800ef84:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ef88:	4602      	mov	r2, r0
 800ef8a:	189b      	adds	r3, r3, r2
 800ef8c:	673b      	str	r3, [r7, #112]	; 0x70
 800ef8e:	462b      	mov	r3, r5
 800ef90:	460a      	mov	r2, r1
 800ef92:	4153      	adcs	r3, r2
 800ef94:	677b      	str	r3, [r7, #116]	; 0x74
 800ef96:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800ef9a:	f607 1258 	addw	r2, r7, #2392	; 0x958
 800ef9e:	e9c2 3400 	strd	r3, r4, [r2]
 800efa2:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800efa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800efaa:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800efae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb2:	1884      	adds	r4, r0, r2
 800efb4:	f8c7 4560 	str.w	r4, [r7, #1376]	; 0x560
 800efb8:	eb41 0303 	adc.w	r3, r1, r3
 800efbc:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 800efc0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800efc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800efc8:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 800efcc:	e9c2 3400 	strd	r3, r4, [r2]
 800efd0:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800efd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800efd8:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800efdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe0:	1884      	adds	r4, r0, r2
 800efe2:	f8c7 4558 	str.w	r4, [r7, #1368]	; 0x558
 800efe6:	eb41 0303 	adc.w	r3, r1, r3
 800efea:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 800efee:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800eff2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eff6:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 800effa:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],i+1);
 800effe:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800f002:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f006:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00e:	0498      	lsls	r0, r3, #18
 800f010:	0b91      	lsrs	r1, r2, #14
 800f012:	4301      	orrs	r1, r0
 800f014:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 800f018:	0491      	lsls	r1, r2, #18
 800f01a:	0b9b      	lsrs	r3, r3, #14
 800f01c:	430b      	orrs	r3, r1
 800f01e:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 800f022:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02a:	0398      	lsls	r0, r3, #14
 800f02c:	0c91      	lsrs	r1, r2, #18
 800f02e:	4301      	orrs	r1, r0
 800f030:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 800f034:	0391      	lsls	r1, r2, #14
 800f036:	0c9b      	lsrs	r3, r3, #18
 800f038:	430b      	orrs	r3, r1
 800f03a:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 800f03e:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800f042:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f046:	4643      	mov	r3, r8
 800f048:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 800f04c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f050:	4602      	mov	r2, r0
 800f052:	4053      	eors	r3, r2
 800f054:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 800f058:	464b      	mov	r3, r9
 800f05a:	460a      	mov	r2, r1
 800f05c:	4053      	eors	r3, r2
 800f05e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800f062:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06a:	0a50      	lsrs	r0, r2, #9
 800f06c:	05d9      	lsls	r1, r3, #23
 800f06e:	4301      	orrs	r1, r0
 800f070:	f8c7 153c 	str.w	r1, [r7, #1340]	; 0x53c
 800f074:	0a59      	lsrs	r1, r3, #9
 800f076:	05d3      	lsls	r3, r2, #23
 800f078:	430b      	orrs	r3, r1
 800f07a:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800f07e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800f082:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f086:	4643      	mov	r3, r8
 800f088:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800f08c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f090:	4602      	mov	r2, r0
 800f092:	4053      	eors	r3, r2
 800f094:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 800f098:	464b      	mov	r3, r9
 800f09a:	460a      	mov	r2, r1
 800f09c:	4053      	eors	r3, r2
 800f09e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800f0a2:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800f0a6:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	18e3      	adds	r3, r4, r3
 800f0ae:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	eb45 0303 	adc.w	r3, r5, r3
 800f0b8:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800f0bc:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f0c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f0c4:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f0c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f0cc:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800f0d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0d4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0dc:	ea80 0602 	eor.w	r6, r0, r2
 800f0e0:	f8c7 6520 	str.w	r6, [r7, #1312]	; 0x520
 800f0e4:	404b      	eors	r3, r1
 800f0e6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800f0ea:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f0ee:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	4023      	ands	r3, r4
 800f0f6:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 800f0fa:	4613      	mov	r3, r2
 800f0fc:	402b      	ands	r3, r5
 800f0fe:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800f102:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800f106:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f10a:	460b      	mov	r3, r1
 800f10c:	ea88 0303 	eor.w	r3, r8, r3
 800f110:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 800f114:	4613      	mov	r3, r2
 800f116:	ea89 0303 	eor.w	r3, r9, r3
 800f11a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800f11e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f122:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f126:	4623      	mov	r3, r4
 800f128:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 800f12c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f130:	4602      	mov	r2, r0
 800f132:	189b      	adds	r3, r3, r2
 800f134:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 800f138:	462b      	mov	r3, r5
 800f13a:	460a      	mov	r2, r1
 800f13c:	4153      	adcs	r3, r2
 800f13e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800f142:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f146:	3301      	adds	r3, #1
 800f148:	4a22      	ldr	r2, [pc, #136]	; (800f1d4 <sha512_compress+0x95c>)
 800f14a:	00db      	lsls	r3, r3, #3
 800f14c:	4413      	add	r3, r2
 800f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f152:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 800f156:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f15a:	4621      	mov	r1, r4
 800f15c:	1889      	adds	r1, r1, r2
 800f15e:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 800f162:	4629      	mov	r1, r5
 800f164:	eb41 0303 	adc.w	r3, r1, r3
 800f168:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800f16c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f170:	3301      	adds	r3, #1
 800f172:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f176:	00db      	lsls	r3, r3, #3
 800f178:	4413      	add	r3, r2
 800f17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f17e:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 800f182:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f186:	4621      	mov	r1, r4
 800f188:	1889      	adds	r1, r1, r2
 800f18a:	66b9      	str	r1, [r7, #104]	; 0x68
 800f18c:	4629      	mov	r1, r5
 800f18e:	eb41 0303 	adc.w	r3, r1, r3
 800f192:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f194:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800f198:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 800f19c:	e9c2 3400 	strd	r3, r4, [r2]
 800f1a0:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a8:	0118      	lsls	r0, r3, #4
 800f1aa:	0f11      	lsrs	r1, r2, #28
 800f1ac:	4301      	orrs	r1, r0
 800f1ae:	f8c7 14f8 	str.w	r1, [r7, #1272]	; 0x4f8
 800f1b2:	0111      	lsls	r1, r2, #4
 800f1b4:	0f1b      	lsrs	r3, r3, #28
 800f1b6:	430b      	orrs	r3, r1
 800f1b8:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800f1bc:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c4:	0890      	lsrs	r0, r2, #2
 800f1c6:	0799      	lsls	r1, r3, #30
 800f1c8:	4301      	orrs	r1, r0
 800f1ca:	f8c7 14f4 	str.w	r1, [r7, #1268]	; 0x4f4
 800f1ce:	0899      	lsrs	r1, r3, #2
 800f1d0:	0793      	lsls	r3, r2, #30
 800f1d2:	e001      	b.n	800f1d8 <sha512_compress+0x960>
 800f1d4:	0801a9b0 	.word	0x0801a9b0
 800f1d8:	430b      	orrs	r3, r1
 800f1da:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 800f1de:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f1e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f1e6:	4623      	mov	r3, r4
 800f1e8:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800f1ec:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	4053      	eors	r3, r2
 800f1f4:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 800f1f8:	462b      	mov	r3, r5
 800f1fa:	460a      	mov	r2, r1
 800f1fc:	4053      	eors	r3, r2
 800f1fe:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800f202:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20a:	09d0      	lsrs	r0, r2, #7
 800f20c:	0659      	lsls	r1, r3, #25
 800f20e:	4301      	orrs	r1, r0
 800f210:	f8c7 14e4 	str.w	r1, [r7, #1252]	; 0x4e4
 800f214:	09d9      	lsrs	r1, r3, #7
 800f216:	0653      	lsls	r3, r2, #25
 800f218:	430b      	orrs	r3, r1
 800f21a:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 800f21e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800f222:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f226:	4623      	mov	r3, r4
 800f228:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800f22c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f230:	4602      	mov	r2, r0
 800f232:	4053      	eors	r3, r2
 800f234:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800f238:	462b      	mov	r3, r5
 800f23a:	460a      	mov	r2, r1
 800f23c:	4053      	eors	r3, r2
 800f23e:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800f242:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f246:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f24a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f252:	ea40 0402 	orr.w	r4, r0, r2
 800f256:	f8c7 44d0 	str.w	r4, [r7, #1232]	; 0x4d0
 800f25a:	430b      	orrs	r3, r1
 800f25c:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800f260:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800f264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f268:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 800f26c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f270:	4621      	mov	r1, r4
 800f272:	4011      	ands	r1, r2
 800f274:	f8c7 14c8 	str.w	r1, [r7, #1224]	; 0x4c8
 800f278:	4629      	mov	r1, r5
 800f27a:	400b      	ands	r3, r1
 800f27c:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800f280:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f284:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f288:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f290:	ea00 0402 	and.w	r4, r0, r2
 800f294:	f8c7 44c0 	str.w	r4, [r7, #1216]	; 0x4c0
 800f298:	400b      	ands	r3, r1
 800f29a:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800f29e:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800f2a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f2a6:	4623      	mov	r3, r4
 800f2a8:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800f2ac:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800f2b8:	462b      	mov	r3, r5
 800f2ba:	460a      	mov	r2, r1
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800f2c2:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800f2c6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f2ca:	4623      	mov	r3, r4
 800f2cc:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800f2d0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	189b      	adds	r3, r3, r2
 800f2d8:	663b      	str	r3, [r7, #96]	; 0x60
 800f2da:	462b      	mov	r3, r5
 800f2dc:	460a      	mov	r2, r1
 800f2de:	4153      	adcs	r3, r2
 800f2e0:	667b      	str	r3, [r7, #100]	; 0x64
 800f2e2:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800f2e6:	f607 1258 	addw	r2, r7, #2392	; 0x958
 800f2ea:	e9c2 3400 	strd	r3, r4, [r2]
 800f2ee:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f2f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f2f6:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800f2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fe:	1884      	adds	r4, r0, r2
 800f300:	f8c7 44b0 	str.w	r4, [r7, #1200]	; 0x4b0
 800f304:	eb41 0303 	adc.w	r3, r1, r3
 800f308:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800f30c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800f310:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f314:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800f318:	e9c2 3400 	strd	r3, r4, [r2]
 800f31c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800f320:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f324:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800f328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32c:	1884      	adds	r4, r0, r2
 800f32e:	f8c7 44a8 	str.w	r4, [r7, #1192]	; 0x4a8
 800f332:	eb41 0303 	adc.w	r3, r1, r3
 800f336:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800f33a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800f33e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f342:	f607 1248 	addw	r2, r7, #2376	; 0x948
 800f346:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],i+2);
 800f34a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f34e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f352:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35a:	0498      	lsls	r0, r3, #18
 800f35c:	0b91      	lsrs	r1, r2, #14
 800f35e:	4301      	orrs	r1, r0
 800f360:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 800f364:	0491      	lsls	r1, r2, #18
 800f366:	0b9b      	lsrs	r3, r3, #14
 800f368:	430b      	orrs	r3, r1
 800f36a:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800f36e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f376:	0398      	lsls	r0, r3, #14
 800f378:	0c91      	lsrs	r1, r2, #18
 800f37a:	4301      	orrs	r1, r0
 800f37c:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 800f380:	0391      	lsls	r1, r2, #14
 800f382:	0c9b      	lsrs	r3, r3, #18
 800f384:	430b      	orrs	r3, r1
 800f386:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800f38a:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800f38e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f392:	4643      	mov	r3, r8
 800f394:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800f398:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f39c:	4602      	mov	r2, r0
 800f39e:	4053      	eors	r3, r2
 800f3a0:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800f3a4:	464b      	mov	r3, r9
 800f3a6:	460a      	mov	r2, r1
 800f3a8:	4053      	eors	r3, r2
 800f3aa:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800f3ae:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b6:	0a50      	lsrs	r0, r2, #9
 800f3b8:	05d9      	lsls	r1, r3, #23
 800f3ba:	4301      	orrs	r1, r0
 800f3bc:	f8c7 148c 	str.w	r1, [r7, #1164]	; 0x48c
 800f3c0:	0a59      	lsrs	r1, r3, #9
 800f3c2:	05d3      	lsls	r3, r2, #23
 800f3c4:	430b      	orrs	r3, r1
 800f3c6:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800f3ca:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800f3ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f3d2:	4643      	mov	r3, r8
 800f3d4:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800f3d8:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f3dc:	4602      	mov	r2, r0
 800f3de:	4053      	eors	r3, r2
 800f3e0:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800f3e4:	464b      	mov	r3, r9
 800f3e6:	460a      	mov	r2, r1
 800f3e8:	4053      	eors	r3, r2
 800f3ea:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800f3ee:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f3f2:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f3f6:	460b      	mov	r3, r1
 800f3f8:	18e3      	adds	r3, r4, r3
 800f3fa:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800f3fe:	4613      	mov	r3, r2
 800f400:	eb45 0303 	adc.w	r3, r5, r3
 800f404:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800f408:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800f40c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f410:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f414:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f418:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f41c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f420:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800f424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f428:	ea80 0602 	eor.w	r6, r0, r2
 800f42c:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 800f430:	404b      	eors	r3, r1
 800f432:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 800f436:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800f43a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f43e:	460b      	mov	r3, r1
 800f440:	4023      	ands	r3, r4
 800f442:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800f446:	4613      	mov	r3, r2
 800f448:	402b      	ands	r3, r5
 800f44a:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800f44e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800f452:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f456:	460b      	mov	r3, r1
 800f458:	ea88 0303 	eor.w	r3, r8, r3
 800f45c:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800f460:	4613      	mov	r3, r2
 800f462:	ea89 0303 	eor.w	r3, r9, r3
 800f466:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800f46a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800f46e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f472:	4623      	mov	r3, r4
 800f474:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800f478:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f47c:	4602      	mov	r2, r0
 800f47e:	189b      	adds	r3, r3, r2
 800f480:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800f484:	462b      	mov	r3, r5
 800f486:	460a      	mov	r2, r1
 800f488:	4153      	adcs	r3, r2
 800f48a:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800f48e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f492:	3302      	adds	r3, #2
 800f494:	4af4      	ldr	r2, [pc, #976]	; (800f868 <sha512_compress+0xff0>)
 800f496:	00db      	lsls	r3, r3, #3
 800f498:	4413      	add	r3, r2
 800f49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49e:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 800f4a2:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f4a6:	4621      	mov	r1, r4
 800f4a8:	1889      	adds	r1, r1, r2
 800f4aa:	f8c7 1450 	str.w	r1, [r7, #1104]	; 0x450
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	eb41 0303 	adc.w	r3, r1, r3
 800f4b4:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800f4b8:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f4bc:	3302      	adds	r3, #2
 800f4be:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f4c2:	00db      	lsls	r3, r3, #3
 800f4c4:	4413      	add	r3, r2
 800f4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ca:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 800f4ce:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f4d2:	4621      	mov	r1, r4
 800f4d4:	1889      	adds	r1, r1, r2
 800f4d6:	65b9      	str	r1, [r7, #88]	; 0x58
 800f4d8:	4629      	mov	r1, r5
 800f4da:	eb41 0303 	adc.w	r3, r1, r3
 800f4de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4e0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800f4e4:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 800f4e8:	e9c2 3400 	strd	r3, r4, [r2]
 800f4ec:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800f4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f4:	0118      	lsls	r0, r3, #4
 800f4f6:	0f11      	lsrs	r1, r2, #28
 800f4f8:	4301      	orrs	r1, r0
 800f4fa:	f8c7 1448 	str.w	r1, [r7, #1096]	; 0x448
 800f4fe:	0111      	lsls	r1, r2, #4
 800f500:	0f1b      	lsrs	r3, r3, #28
 800f502:	430b      	orrs	r3, r1
 800f504:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800f508:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800f50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f510:	0890      	lsrs	r0, r2, #2
 800f512:	0799      	lsls	r1, r3, #30
 800f514:	4301      	orrs	r1, r0
 800f516:	f8c7 1444 	str.w	r1, [r7, #1092]	; 0x444
 800f51a:	0899      	lsrs	r1, r3, #2
 800f51c:	0793      	lsls	r3, r2, #30
 800f51e:	430b      	orrs	r3, r1
 800f520:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 800f524:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800f528:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f52c:	4623      	mov	r3, r4
 800f52e:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800f532:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f536:	4602      	mov	r2, r0
 800f538:	4053      	eors	r3, r2
 800f53a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800f53e:	462b      	mov	r3, r5
 800f540:	460a      	mov	r2, r1
 800f542:	4053      	eors	r3, r2
 800f544:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800f548:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800f54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f550:	09d0      	lsrs	r0, r2, #7
 800f552:	0659      	lsls	r1, r3, #25
 800f554:	4301      	orrs	r1, r0
 800f556:	f8c7 1434 	str.w	r1, [r7, #1076]	; 0x434
 800f55a:	09d9      	lsrs	r1, r3, #7
 800f55c:	0653      	lsls	r3, r2, #25
 800f55e:	430b      	orrs	r3, r1
 800f560:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 800f564:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800f568:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f56c:	4623      	mov	r3, r4
 800f56e:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 800f572:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f576:	4602      	mov	r2, r0
 800f578:	4053      	eors	r3, r2
 800f57a:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 800f57e:	462b      	mov	r3, r5
 800f580:	460a      	mov	r2, r1
 800f582:	4053      	eors	r3, r2
 800f584:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800f588:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800f58c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f590:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	ea40 0402 	orr.w	r4, r0, r2
 800f59c:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
 800f5a0:	430b      	orrs	r3, r1
 800f5a2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800f5a6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ae:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800f5b2:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f5b6:	4621      	mov	r1, r4
 800f5b8:	4011      	ands	r1, r2
 800f5ba:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 800f5be:	4629      	mov	r1, r5
 800f5c0:	400b      	ands	r3, r1
 800f5c2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800f5c6:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800f5ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5ce:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d6:	ea00 0402 	and.w	r4, r0, r2
 800f5da:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 800f5de:	400b      	ands	r3, r1
 800f5e0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800f5e4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800f5e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f5ec:	4623      	mov	r3, r4
 800f5ee:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800f5f2:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 800f5fe:	462b      	mov	r3, r5
 800f600:	460a      	mov	r2, r1
 800f602:	4313      	orrs	r3, r2
 800f604:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800f608:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800f60c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f610:	4623      	mov	r3, r4
 800f612:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800f616:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f61a:	4602      	mov	r2, r0
 800f61c:	189b      	adds	r3, r3, r2
 800f61e:	653b      	str	r3, [r7, #80]	; 0x50
 800f620:	462b      	mov	r3, r5
 800f622:	460a      	mov	r2, r1
 800f624:	4153      	adcs	r3, r2
 800f626:	657b      	str	r3, [r7, #84]	; 0x54
 800f628:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800f62c:	f607 1258 	addw	r2, r7, #2392	; 0x958
 800f630:	e9c2 3400 	strd	r3, r4, [r2]
 800f634:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800f638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f63c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800f640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f644:	1884      	adds	r4, r0, r2
 800f646:	f8c7 4400 	str.w	r4, [r7, #1024]	; 0x400
 800f64a:	eb41 0303 	adc.w	r3, r1, r3
 800f64e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800f652:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800f656:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f65a:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 800f65e:	e9c2 3400 	strd	r3, r4, [r2]
 800f662:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800f666:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f66a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f672:	1884      	adds	r4, r0, r2
 800f674:	f8c7 43f8 	str.w	r4, [r7, #1016]	; 0x3f8
 800f678:	eb41 0303 	adc.w	r3, r1, r3
 800f67c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800f680:	e9d7 34fe 	ldrd	r3, r4, [r7, #1016]	; 0x3f8
 800f684:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800f688:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],i+3);
 800f68c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800f690:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f694:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	0498      	lsls	r0, r3, #18
 800f69e:	0b91      	lsrs	r1, r2, #14
 800f6a0:	4301      	orrs	r1, r0
 800f6a2:	f8c7 13f0 	str.w	r1, [r7, #1008]	; 0x3f0
 800f6a6:	0491      	lsls	r1, r2, #18
 800f6a8:	0b9b      	lsrs	r3, r3, #14
 800f6aa:	430b      	orrs	r3, r1
 800f6ac:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800f6b0:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800f6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b8:	0398      	lsls	r0, r3, #14
 800f6ba:	0c91      	lsrs	r1, r2, #18
 800f6bc:	4301      	orrs	r1, r0
 800f6be:	f8c7 13e8 	str.w	r1, [r7, #1000]	; 0x3e8
 800f6c2:	0391      	lsls	r1, r2, #14
 800f6c4:	0c9b      	lsrs	r3, r3, #18
 800f6c6:	430b      	orrs	r3, r1
 800f6c8:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800f6cc:	e9d7 89fc 	ldrd	r8, r9, [r7, #1008]	; 0x3f0
 800f6d0:	4643      	mov	r3, r8
 800f6d2:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	4053      	eors	r3, r2
 800f6da:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800f6de:	464b      	mov	r3, r9
 800f6e0:	460a      	mov	r2, r1
 800f6e2:	4053      	eors	r3, r2
 800f6e4:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800f6e8:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800f6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f0:	0a50      	lsrs	r0, r2, #9
 800f6f2:	05d9      	lsls	r1, r3, #23
 800f6f4:	4301      	orrs	r1, r0
 800f6f6:	f8c7 13dc 	str.w	r1, [r7, #988]	; 0x3dc
 800f6fa:	0a59      	lsrs	r1, r3, #9
 800f6fc:	05d3      	lsls	r3, r2, #23
 800f6fe:	430b      	orrs	r3, r1
 800f700:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 800f704:	e9d7 89f8 	ldrd	r8, r9, [r7, #992]	; 0x3e0
 800f708:	4643      	mov	r3, r8
 800f70a:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 800f70e:	4602      	mov	r2, r0
 800f710:	4053      	eors	r3, r2
 800f712:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800f716:	464b      	mov	r3, r9
 800f718:	460a      	mov	r2, r1
 800f71a:	4053      	eors	r3, r2
 800f71c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800f720:	e9d7 12f4 	ldrd	r1, r2, [r7, #976]	; 0x3d0
 800f724:	460b      	mov	r3, r1
 800f726:	18e3      	adds	r3, r4, r3
 800f728:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800f72c:	4613      	mov	r3, r2
 800f72e:	eb45 0303 	adc.w	r3, r5, r3
 800f732:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800f736:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f73a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f73e:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800f742:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f746:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f74a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f74e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f756:	ea80 0602 	eor.w	r6, r0, r2
 800f75a:	f8c7 63c0 	str.w	r6, [r7, #960]	; 0x3c0
 800f75e:	404b      	eors	r3, r1
 800f760:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800f764:	e9d7 12f0 	ldrd	r1, r2, [r7, #960]	; 0x3c0
 800f768:	460b      	mov	r3, r1
 800f76a:	4023      	ands	r3, r4
 800f76c:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 800f770:	4613      	mov	r3, r2
 800f772:	402b      	ands	r3, r5
 800f774:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800f778:	e9d7 12ee 	ldrd	r1, r2, [r7, #952]	; 0x3b8
 800f77c:	460b      	mov	r3, r1
 800f77e:	ea88 0303 	eor.w	r3, r8, r3
 800f782:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 800f786:	4613      	mov	r3, r2
 800f788:	ea89 0303 	eor.w	r3, r9, r3
 800f78c:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800f790:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	; 0x3c8
 800f794:	4623      	mov	r3, r4
 800f796:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 800f79a:	4602      	mov	r2, r0
 800f79c:	189b      	adds	r3, r3, r2
 800f79e:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 800f7a2:	462b      	mov	r3, r5
 800f7a4:	460a      	mov	r2, r1
 800f7a6:	4153      	adcs	r3, r2
 800f7a8:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800f7ac:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f7b0:	3303      	adds	r3, #3
 800f7b2:	4a2d      	ldr	r2, [pc, #180]	; (800f868 <sha512_compress+0xff0>)
 800f7b4:	00db      	lsls	r3, r3, #3
 800f7b6:	4413      	add	r3, r2
 800f7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7bc:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 800f7c0:	4621      	mov	r1, r4
 800f7c2:	1889      	adds	r1, r1, r2
 800f7c4:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	eb41 0303 	adc.w	r3, r1, r3
 800f7ce:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800f7d2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f7d6:	3303      	adds	r3, #3
 800f7d8:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f7dc:	00db      	lsls	r3, r3, #3
 800f7de:	4413      	add	r3, r2
 800f7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e4:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	1889      	adds	r1, r1, r2
 800f7ec:	64b9      	str	r1, [r7, #72]	; 0x48
 800f7ee:	4629      	mov	r1, r5
 800f7f0:	eb41 0303 	adc.w	r3, r1, r3
 800f7f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7f6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800f7fa:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 800f7fe:	e9c2 3400 	strd	r3, r4, [r2]
 800f802:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80a:	0118      	lsls	r0, r3, #4
 800f80c:	0f11      	lsrs	r1, r2, #28
 800f80e:	4301      	orrs	r1, r0
 800f810:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 800f814:	0111      	lsls	r1, r2, #4
 800f816:	0f1b      	lsrs	r3, r3, #28
 800f818:	430b      	orrs	r3, r1
 800f81a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800f81e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f826:	0890      	lsrs	r0, r2, #2
 800f828:	0799      	lsls	r1, r3, #30
 800f82a:	4301      	orrs	r1, r0
 800f82c:	f8c7 1394 	str.w	r1, [r7, #916]	; 0x394
 800f830:	0899      	lsrs	r1, r3, #2
 800f832:	0793      	lsls	r3, r2, #30
 800f834:	430b      	orrs	r3, r1
 800f836:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 800f83a:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 800f83e:	4623      	mov	r3, r4
 800f840:	e9d7 01e4 	ldrd	r0, r1, [r7, #912]	; 0x390
 800f844:	4602      	mov	r2, r0
 800f846:	4053      	eors	r3, r2
 800f848:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 800f84c:	462b      	mov	r3, r5
 800f84e:	460a      	mov	r2, r1
 800f850:	4053      	eors	r3, r2
 800f852:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800f856:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85e:	09d0      	lsrs	r0, r2, #7
 800f860:	0659      	lsls	r1, r3, #25
 800f862:	4301      	orrs	r1, r0
 800f864:	e002      	b.n	800f86c <sha512_compress+0xff4>
 800f866:	bf00      	nop
 800f868:	0801a9b0 	.word	0x0801a9b0
 800f86c:	f8c7 1384 	str.w	r1, [r7, #900]	; 0x384
 800f870:	09d9      	lsrs	r1, r3, #7
 800f872:	0653      	lsls	r3, r2, #25
 800f874:	430b      	orrs	r3, r1
 800f876:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 800f87a:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 800f87e:	4623      	mov	r3, r4
 800f880:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 800f884:	4602      	mov	r2, r0
 800f886:	4053      	eors	r3, r2
 800f888:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800f88c:	462b      	mov	r3, r5
 800f88e:	460a      	mov	r2, r1
 800f890:	4053      	eors	r3, r2
 800f892:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800f896:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f89a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f89e:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800f8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a6:	ea40 0402 	orr.w	r4, r0, r2
 800f8aa:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 800f8ae:	430b      	orrs	r3, r1
 800f8b0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800f8b4:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8bc:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	; 0x370
 800f8c0:	4621      	mov	r1, r4
 800f8c2:	4011      	ands	r1, r2
 800f8c4:	f8c7 1368 	str.w	r1, [r7, #872]	; 0x368
 800f8c8:	4629      	mov	r1, r5
 800f8ca:	400b      	ands	r3, r1
 800f8cc:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800f8d0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f8d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8d8:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800f8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e0:	ea00 0402 	and.w	r4, r0, r2
 800f8e4:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 800f8e8:	400b      	ands	r3, r1
 800f8ea:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800f8ee:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 800f8f2:	4623      	mov	r3, r4
 800f8f4:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	4313      	orrs	r3, r2
 800f8fc:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800f900:	462b      	mov	r3, r5
 800f902:	460a      	mov	r2, r1
 800f904:	4313      	orrs	r3, r2
 800f906:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800f90a:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 800f90e:	4623      	mov	r3, r4
 800f910:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	; 0x358
 800f914:	4602      	mov	r2, r0
 800f916:	189b      	adds	r3, r3, r2
 800f918:	643b      	str	r3, [r7, #64]	; 0x40
 800f91a:	462b      	mov	r3, r5
 800f91c:	460a      	mov	r2, r1
 800f91e:	4153      	adcs	r3, r2
 800f920:	647b      	str	r3, [r7, #68]	; 0x44
 800f922:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800f926:	f607 1258 	addw	r2, r7, #2392	; 0x958
 800f92a:	e9c2 3400 	strd	r3, r4, [r2]
 800f92e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f932:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f936:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800f93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93e:	1884      	adds	r4, r0, r2
 800f940:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 800f944:	eb41 0303 	adc.w	r3, r1, r3
 800f948:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800f94c:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 800f950:	f607 1218 	addw	r2, r7, #2328	; 0x918
 800f954:	e9c2 3400 	strd	r3, r4, [r2]
 800f958:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800f95c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f960:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f968:	1884      	adds	r4, r0, r2
 800f96a:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 800f96e:	eb41 0303 	adc.w	r3, r1, r3
 800f972:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800f976:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 800f97a:	f607 1238 	addw	r2, r7, #2360	; 0x938
 800f97e:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],i+4);
 800f982:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f986:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f98a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f992:	0498      	lsls	r0, r3, #18
 800f994:	0b91      	lsrs	r1, r2, #14
 800f996:	4301      	orrs	r1, r0
 800f998:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 800f99c:	0491      	lsls	r1, r2, #18
 800f99e:	0b9b      	lsrs	r3, r3, #14
 800f9a0:	430b      	orrs	r3, r1
 800f9a2:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800f9a6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ae:	0398      	lsls	r0, r3, #14
 800f9b0:	0c91      	lsrs	r1, r2, #18
 800f9b2:	4301      	orrs	r1, r0
 800f9b4:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 800f9b8:	0391      	lsls	r1, r2, #14
 800f9ba:	0c9b      	lsrs	r3, r3, #18
 800f9bc:	430b      	orrs	r3, r1
 800f9be:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800f9c2:	e9d7 89d0 	ldrd	r8, r9, [r7, #832]	; 0x340
 800f9c6:	4643      	mov	r3, r8
 800f9c8:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 800f9cc:	4602      	mov	r2, r0
 800f9ce:	4053      	eors	r3, r2
 800f9d0:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 800f9d4:	464b      	mov	r3, r9
 800f9d6:	460a      	mov	r2, r1
 800f9d8:	4053      	eors	r3, r2
 800f9da:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800f9de:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e6:	0a50      	lsrs	r0, r2, #9
 800f9e8:	05d9      	lsls	r1, r3, #23
 800f9ea:	4301      	orrs	r1, r0
 800f9ec:	f8c7 132c 	str.w	r1, [r7, #812]	; 0x32c
 800f9f0:	0a59      	lsrs	r1, r3, #9
 800f9f2:	05d3      	lsls	r3, r2, #23
 800f9f4:	430b      	orrs	r3, r1
 800f9f6:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800f9fa:	e9d7 89cc 	ldrd	r8, r9, [r7, #816]	; 0x330
 800f9fe:	4643      	mov	r3, r8
 800fa00:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 800fa04:	4602      	mov	r2, r0
 800fa06:	4053      	eors	r3, r2
 800fa08:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800fa0c:	464b      	mov	r3, r9
 800fa0e:	460a      	mov	r2, r1
 800fa10:	4053      	eors	r3, r2
 800fa12:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800fa16:	e9d7 12c8 	ldrd	r1, r2, [r7, #800]	; 0x320
 800fa1a:	460b      	mov	r3, r1
 800fa1c:	18e3      	adds	r3, r4, r3
 800fa1e:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 800fa22:	4613      	mov	r3, r2
 800fa24:	eb45 0303 	adc.w	r3, r5, r3
 800fa28:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800fa2c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800fa30:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa34:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800fa38:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fa3c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800fa40:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fa44:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800fa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4c:	ea80 0602 	eor.w	r6, r0, r2
 800fa50:	f8c7 6310 	str.w	r6, [r7, #784]	; 0x310
 800fa54:	404b      	eors	r3, r1
 800fa56:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800fa5a:	e9d7 12c4 	ldrd	r1, r2, [r7, #784]	; 0x310
 800fa5e:	460b      	mov	r3, r1
 800fa60:	4023      	ands	r3, r4
 800fa62:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 800fa66:	4613      	mov	r3, r2
 800fa68:	402b      	ands	r3, r5
 800fa6a:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800fa6e:	e9d7 12c2 	ldrd	r1, r2, [r7, #776]	; 0x308
 800fa72:	460b      	mov	r3, r1
 800fa74:	ea88 0303 	eor.w	r3, r8, r3
 800fa78:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	ea89 0303 	eor.w	r3, r9, r3
 800fa82:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800fa86:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	; 0x318
 800fa8a:	4623      	mov	r3, r4
 800fa8c:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 800fa90:	4602      	mov	r2, r0
 800fa92:	189b      	adds	r3, r3, r2
 800fa94:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 800fa98:	462b      	mov	r3, r5
 800fa9a:	460a      	mov	r2, r1
 800fa9c:	4153      	adcs	r3, r2
 800fa9e:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800faa2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800faa6:	3304      	adds	r3, #4
 800faa8:	4af4      	ldr	r2, [pc, #976]	; (800fe7c <sha512_compress+0x1604>)
 800faaa:	00db      	lsls	r3, r3, #3
 800faac:	4413      	add	r3, r2
 800faae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab2:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 800fab6:	4621      	mov	r1, r4
 800fab8:	1889      	adds	r1, r1, r2
 800faba:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 800fabe:	4629      	mov	r1, r5
 800fac0:	eb41 0303 	adc.w	r3, r1, r3
 800fac4:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800fac8:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800facc:	3304      	adds	r3, #4
 800face:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800fad2:	00db      	lsls	r3, r3, #3
 800fad4:	4413      	add	r3, r2
 800fad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fada:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 800fade:	4621      	mov	r1, r4
 800fae0:	1889      	adds	r1, r1, r2
 800fae2:	63b9      	str	r1, [r7, #56]	; 0x38
 800fae4:	4629      	mov	r1, r5
 800fae6:	eb41 0303 	adc.w	r3, r1, r3
 800faea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faec:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800faf0:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 800faf4:	e9c2 3400 	strd	r3, r4, [r2]
 800faf8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800fafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb00:	0118      	lsls	r0, r3, #4
 800fb02:	0f11      	lsrs	r1, r2, #28
 800fb04:	4301      	orrs	r1, r0
 800fb06:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 800fb0a:	0111      	lsls	r1, r2, #4
 800fb0c:	0f1b      	lsrs	r3, r3, #28
 800fb0e:	430b      	orrs	r3, r1
 800fb10:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800fb14:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800fb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1c:	0890      	lsrs	r0, r2, #2
 800fb1e:	0799      	lsls	r1, r3, #30
 800fb20:	4301      	orrs	r1, r0
 800fb22:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 800fb26:	0899      	lsrs	r1, r3, #2
 800fb28:	0793      	lsls	r3, r2, #30
 800fb2a:	430b      	orrs	r3, r1
 800fb2c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800fb30:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	; 0x2e8
 800fb34:	4623      	mov	r3, r4
 800fb36:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	4053      	eors	r3, r2
 800fb3e:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 800fb42:	462b      	mov	r3, r5
 800fb44:	460a      	mov	r2, r1
 800fb46:	4053      	eors	r3, r2
 800fb48:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800fb4c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800fb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb54:	09d0      	lsrs	r0, r2, #7
 800fb56:	0659      	lsls	r1, r3, #25
 800fb58:	4301      	orrs	r1, r0
 800fb5a:	f8c7 12d4 	str.w	r1, [r7, #724]	; 0x2d4
 800fb5e:	09d9      	lsrs	r1, r3, #7
 800fb60:	0653      	lsls	r3, r2, #25
 800fb62:	430b      	orrs	r3, r1
 800fb64:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 800fb68:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	; 0x2d8
 800fb6c:	4623      	mov	r3, r4
 800fb6e:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 800fb72:	4602      	mov	r2, r0
 800fb74:	4053      	eors	r3, r2
 800fb76:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 800fb7a:	462b      	mov	r3, r5
 800fb7c:	460a      	mov	r2, r1
 800fb7e:	4053      	eors	r3, r2
 800fb80:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800fb84:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800fb88:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb8c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800fb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb94:	ea40 0402 	orr.w	r4, r0, r2
 800fb98:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 800fb9c:	430b      	orrs	r3, r1
 800fb9e:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800fba2:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800fba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbaa:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 800fbae:	4621      	mov	r1, r4
 800fbb0:	4011      	ands	r1, r2
 800fbb2:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	400b      	ands	r3, r1
 800fbba:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800fbbe:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800fbc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbc6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800fbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbce:	ea00 0402 	and.w	r4, r0, r2
 800fbd2:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 800fbd6:	400b      	ands	r3, r1
 800fbd8:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800fbdc:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 800fbe0:	4623      	mov	r3, r4
 800fbe2:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 800fbee:	462b      	mov	r3, r5
 800fbf0:	460a      	mov	r2, r1
 800fbf2:	4313      	orrs	r3, r2
 800fbf4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800fbf8:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 800fbfc:	4623      	mov	r3, r4
 800fbfe:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 800fc02:	4602      	mov	r2, r0
 800fc04:	189b      	adds	r3, r3, r2
 800fc06:	633b      	str	r3, [r7, #48]	; 0x30
 800fc08:	462b      	mov	r3, r5
 800fc0a:	460a      	mov	r2, r1
 800fc0c:	4153      	adcs	r3, r2
 800fc0e:	637b      	str	r3, [r7, #52]	; 0x34
 800fc10:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800fc14:	f607 1258 	addw	r2, r7, #2392	; 0x958
 800fc18:	e9c2 3400 	strd	r3, r4, [r2]
 800fc1c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800fc20:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc24:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800fc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2c:	1884      	adds	r4, r0, r2
 800fc2e:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 800fc32:	eb41 0303 	adc.w	r3, r1, r3
 800fc36:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800fc3a:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800fc3e:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 800fc42:	e9c2 3400 	strd	r3, r4, [r2]
 800fc46:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800fc4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc4e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800fc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc56:	1884      	adds	r4, r0, r2
 800fc58:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 800fc5c:	eb41 0303 	adc.w	r3, r1, r3
 800fc60:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800fc64:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800fc68:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 800fc6c:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],i+5);
 800fc70:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800fc74:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fc78:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800fc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc80:	0498      	lsls	r0, r3, #18
 800fc82:	0b91      	lsrs	r1, r2, #14
 800fc84:	4301      	orrs	r1, r0
 800fc86:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 800fc8a:	0491      	lsls	r1, r2, #18
 800fc8c:	0b9b      	lsrs	r3, r3, #14
 800fc8e:	430b      	orrs	r3, r1
 800fc90:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800fc94:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800fc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9c:	0398      	lsls	r0, r3, #14
 800fc9e:	0c91      	lsrs	r1, r2, #18
 800fca0:	4301      	orrs	r1, r0
 800fca2:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 800fca6:	0391      	lsls	r1, r2, #14
 800fca8:	0c9b      	lsrs	r3, r3, #18
 800fcaa:	430b      	orrs	r3, r1
 800fcac:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800fcb0:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 800fcb4:	4643      	mov	r3, r8
 800fcb6:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	; 0x288
 800fcba:	4602      	mov	r2, r0
 800fcbc:	4053      	eors	r3, r2
 800fcbe:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 800fcc2:	464b      	mov	r3, r9
 800fcc4:	460a      	mov	r2, r1
 800fcc6:	4053      	eors	r3, r2
 800fcc8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800fccc:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd4:	0a50      	lsrs	r0, r2, #9
 800fcd6:	05d9      	lsls	r1, r3, #23
 800fcd8:	4301      	orrs	r1, r0
 800fcda:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 800fcde:	0a59      	lsrs	r1, r3, #9
 800fce0:	05d3      	lsls	r3, r2, #23
 800fce2:	430b      	orrs	r3, r1
 800fce4:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 800fce8:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 800fcec:	4643      	mov	r3, r8
 800fcee:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	4053      	eors	r3, r2
 800fcf6:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 800fcfa:	464b      	mov	r3, r9
 800fcfc:	460a      	mov	r2, r1
 800fcfe:	4053      	eors	r3, r2
 800fd00:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800fd04:	e9d7 129c 	ldrd	r1, r2, [r7, #624]	; 0x270
 800fd08:	460b      	mov	r3, r1
 800fd0a:	18e3      	adds	r3, r4, r3
 800fd0c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 800fd10:	4613      	mov	r3, r2
 800fd12:	eb45 0303 	adc.w	r3, r5, r3
 800fd16:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800fd1a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800fd1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd22:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800fd26:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fd2a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800fd2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd32:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800fd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3a:	ea80 0602 	eor.w	r6, r0, r2
 800fd3e:	f8c7 6260 	str.w	r6, [r7, #608]	; 0x260
 800fd42:	404b      	eors	r3, r1
 800fd44:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800fd48:	e9d7 1298 	ldrd	r1, r2, [r7, #608]	; 0x260
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	4023      	ands	r3, r4
 800fd50:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 800fd54:	4613      	mov	r3, r2
 800fd56:	402b      	ands	r3, r5
 800fd58:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800fd5c:	e9d7 1296 	ldrd	r1, r2, [r7, #600]	; 0x258
 800fd60:	460b      	mov	r3, r1
 800fd62:	ea88 0303 	eor.w	r3, r8, r3
 800fd66:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	ea89 0303 	eor.w	r3, r9, r3
 800fd70:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800fd74:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 800fd78:	4623      	mov	r3, r4
 800fd7a:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 800fd7e:	4602      	mov	r2, r0
 800fd80:	189b      	adds	r3, r3, r2
 800fd82:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800fd86:	462b      	mov	r3, r5
 800fd88:	460a      	mov	r2, r1
 800fd8a:	4153      	adcs	r3, r2
 800fd8c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800fd90:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800fd94:	3305      	adds	r3, #5
 800fd96:	4a39      	ldr	r2, [pc, #228]	; (800fe7c <sha512_compress+0x1604>)
 800fd98:	00db      	lsls	r3, r3, #3
 800fd9a:	4413      	add	r3, r2
 800fd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda0:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 800fda4:	4621      	mov	r1, r4
 800fda6:	1889      	adds	r1, r1, r2
 800fda8:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 800fdac:	4629      	mov	r1, r5
 800fdae:	eb41 0303 	adc.w	r3, r1, r3
 800fdb2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800fdb6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800fdba:	3305      	adds	r3, #5
 800fdbc:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800fdc0:	00db      	lsls	r3, r3, #3
 800fdc2:	4413      	add	r3, r2
 800fdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc8:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 800fdcc:	4621      	mov	r1, r4
 800fdce:	1889      	adds	r1, r1, r2
 800fdd0:	62b9      	str	r1, [r7, #40]	; 0x28
 800fdd2:	4629      	mov	r1, r5
 800fdd4:	eb41 0303 	adc.w	r3, r1, r3
 800fdd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdda:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800fdde:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 800fde2:	e9c2 3400 	strd	r3, r4, [r2]
 800fde6:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800fdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdee:	0118      	lsls	r0, r3, #4
 800fdf0:	0f11      	lsrs	r1, r2, #28
 800fdf2:	4301      	orrs	r1, r0
 800fdf4:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 800fdf8:	0111      	lsls	r1, r2, #4
 800fdfa:	0f1b      	lsrs	r3, r3, #28
 800fdfc:	430b      	orrs	r3, r1
 800fdfe:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800fe02:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800fe06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0a:	0890      	lsrs	r0, r2, #2
 800fe0c:	0799      	lsls	r1, r3, #30
 800fe0e:	4301      	orrs	r1, r0
 800fe10:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 800fe14:	0899      	lsrs	r1, r3, #2
 800fe16:	0793      	lsls	r3, r2, #30
 800fe18:	430b      	orrs	r3, r1
 800fe1a:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 800fe1e:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 800fe22:	4623      	mov	r3, r4
 800fe24:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 800fe28:	4602      	mov	r2, r0
 800fe2a:	4053      	eors	r3, r2
 800fe2c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800fe30:	462b      	mov	r3, r5
 800fe32:	460a      	mov	r2, r1
 800fe34:	4053      	eors	r3, r2
 800fe36:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800fe3a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800fe3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe42:	09d0      	lsrs	r0, r2, #7
 800fe44:	0659      	lsls	r1, r3, #25
 800fe46:	4301      	orrs	r1, r0
 800fe48:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 800fe4c:	09d9      	lsrs	r1, r3, #7
 800fe4e:	0653      	lsls	r3, r2, #25
 800fe50:	430b      	orrs	r3, r1
 800fe52:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800fe56:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 800fe5a:	4623      	mov	r3, r4
 800fe5c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800fe60:	4602      	mov	r2, r0
 800fe62:	4053      	eors	r3, r2
 800fe64:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800fe68:	462b      	mov	r3, r5
 800fe6a:	460a      	mov	r2, r1
 800fe6c:	4053      	eors	r3, r2
 800fe6e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800fe72:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800fe76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe7a:	e001      	b.n	800fe80 <sha512_compress+0x1608>
 800fe7c:	0801a9b0 	.word	0x0801a9b0
 800fe80:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800fe84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe88:	ea40 0402 	orr.w	r4, r0, r2
 800fe8c:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 800fe90:	430b      	orrs	r3, r1
 800fe92:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800fe96:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800fe9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9e:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 800fea2:	4621      	mov	r1, r4
 800fea4:	4011      	ands	r1, r2
 800fea6:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800feaa:	4629      	mov	r1, r5
 800feac:	400b      	ands	r3, r1
 800feae:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800feb2:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800feb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800feba:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800febe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec2:	ea00 0402 	and.w	r4, r0, r2
 800fec6:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 800feca:	400b      	ands	r3, r1
 800fecc:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800fed0:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 800fed4:	4623      	mov	r3, r4
 800fed6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800feda:	4602      	mov	r2, r0
 800fedc:	4313      	orrs	r3, r2
 800fede:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800fee2:	462b      	mov	r3, r5
 800fee4:	460a      	mov	r2, r1
 800fee6:	4313      	orrs	r3, r2
 800fee8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800feec:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 800fef0:	4623      	mov	r3, r4
 800fef2:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800fef6:	4602      	mov	r2, r0
 800fef8:	189b      	adds	r3, r3, r2
 800fefa:	623b      	str	r3, [r7, #32]
 800fefc:	462b      	mov	r3, r5
 800fefe:	460a      	mov	r2, r1
 800ff00:	4153      	adcs	r3, r2
 800ff02:	627b      	str	r3, [r7, #36]	; 0x24
 800ff04:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ff08:	f607 1258 	addw	r2, r7, #2392	; 0x958
 800ff0c:	e9c2 3400 	strd	r3, r4, [r2]
 800ff10:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800ff14:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff18:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800ff1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff20:	1884      	adds	r4, r0, r2
 800ff22:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 800ff26:	eb41 0303 	adc.w	r3, r1, r3
 800ff2a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800ff2e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800ff32:	f607 1248 	addw	r2, r7, #2376	; 0x948
 800ff36:	e9c2 3400 	strd	r3, r4, [r2]
 800ff3a:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800ff3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff42:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800ff46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4a:	1884      	adds	r4, r0, r2
 800ff4c:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 800ff50:	eb41 0303 	adc.w	r3, r1, r3
 800ff54:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800ff58:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800ff5c:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800ff60:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],i+6);
 800ff64:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800ff68:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ff6c:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800ff70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff74:	0498      	lsls	r0, r3, #18
 800ff76:	0b91      	lsrs	r1, r2, #14
 800ff78:	4301      	orrs	r1, r0
 800ff7a:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 800ff7e:	0491      	lsls	r1, r2, #18
 800ff80:	0b9b      	lsrs	r3, r3, #14
 800ff82:	430b      	orrs	r3, r1
 800ff84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800ff88:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800ff8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff90:	0398      	lsls	r0, r3, #14
 800ff92:	0c91      	lsrs	r1, r2, #18
 800ff94:	4301      	orrs	r1, r0
 800ff96:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 800ff9a:	0391      	lsls	r1, r2, #14
 800ff9c:	0c9b      	lsrs	r3, r3, #18
 800ff9e:	430b      	orrs	r3, r1
 800ffa0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800ffa4:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 800ffa8:	4643      	mov	r3, r8
 800ffaa:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800ffae:	4602      	mov	r2, r0
 800ffb0:	4053      	eors	r3, r2
 800ffb2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800ffb6:	464b      	mov	r3, r9
 800ffb8:	460a      	mov	r2, r1
 800ffba:	4053      	eors	r3, r2
 800ffbc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800ffc0:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800ffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc8:	0a50      	lsrs	r0, r2, #9
 800ffca:	05d9      	lsls	r1, r3, #23
 800ffcc:	4301      	orrs	r1, r0
 800ffce:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 800ffd2:	0a59      	lsrs	r1, r3, #9
 800ffd4:	05d3      	lsls	r3, r2, #23
 800ffd6:	430b      	orrs	r3, r1
 800ffd8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800ffdc:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	; 0x1d0
 800ffe0:	4643      	mov	r3, r8
 800ffe2:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 800ffe6:	4602      	mov	r2, r0
 800ffe8:	4053      	eors	r3, r2
 800ffea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800ffee:	464b      	mov	r3, r9
 800fff0:	460a      	mov	r2, r1
 800fff2:	4053      	eors	r3, r2
 800fff4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800fff8:	e9d7 1270 	ldrd	r1, r2, [r7, #448]	; 0x1c0
 800fffc:	460b      	mov	r3, r1
 800fffe:	18e3      	adds	r3, r4, r3
 8010000:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8010004:	4613      	mov	r3, r2
 8010006:	eb45 0303 	adc.w	r3, r5, r3
 801000a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 801000e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8010012:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010016:	f607 1348 	addw	r3, r7, #2376	; 0x948
 801001a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801001e:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010026:	f607 1318 	addw	r3, r7, #2328	; 0x918
 801002a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002e:	ea80 0602 	eor.w	r6, r0, r2
 8010032:	f8c7 61b0 	str.w	r6, [r7, #432]	; 0x1b0
 8010036:	404b      	eors	r3, r1
 8010038:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 801003c:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8010040:	460b      	mov	r3, r1
 8010042:	4023      	ands	r3, r4
 8010044:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8010048:	4613      	mov	r3, r2
 801004a:	402b      	ands	r3, r5
 801004c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8010050:	e9d7 126a 	ldrd	r1, r2, [r7, #424]	; 0x1a8
 8010054:	460b      	mov	r3, r1
 8010056:	ea88 0303 	eor.w	r3, r8, r3
 801005a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 801005e:	4613      	mov	r3, r2
 8010060:	ea89 0303 	eor.w	r3, r9, r3
 8010064:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8010068:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 801006c:	4623      	mov	r3, r4
 801006e:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8010072:	4602      	mov	r2, r0
 8010074:	189b      	adds	r3, r3, r2
 8010076:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 801007a:	462b      	mov	r3, r5
 801007c:	460a      	mov	r2, r1
 801007e:	4153      	adcs	r3, r2
 8010080:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8010084:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010088:	3306      	adds	r3, #6
 801008a:	4af5      	ldr	r2, [pc, #980]	; (8010460 <sha512_compress+0x1be8>)
 801008c:	00db      	lsls	r3, r3, #3
 801008e:	4413      	add	r3, r2
 8010090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010094:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 8010098:	4621      	mov	r1, r4
 801009a:	1889      	adds	r1, r1, r2
 801009c:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 80100a0:	4629      	mov	r1, r5
 80100a2:	eb41 0303 	adc.w	r3, r1, r3
 80100a6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80100aa:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80100ae:	3306      	adds	r3, #6
 80100b0:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80100b4:	00db      	lsls	r3, r3, #3
 80100b6:	4413      	add	r3, r2
 80100b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100bc:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80100c0:	4621      	mov	r1, r4
 80100c2:	1889      	adds	r1, r1, r2
 80100c4:	61b9      	str	r1, [r7, #24]
 80100c6:	4629      	mov	r1, r5
 80100c8:	eb41 0303 	adc.w	r3, r1, r3
 80100cc:	61fb      	str	r3, [r7, #28]
 80100ce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80100d2:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80100d6:	e9c2 3400 	strd	r3, r4, [r2]
 80100da:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80100de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e2:	0118      	lsls	r0, r3, #4
 80100e4:	0f11      	lsrs	r1, r2, #28
 80100e6:	4301      	orrs	r1, r0
 80100e8:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 80100ec:	0111      	lsls	r1, r2, #4
 80100ee:	0f1b      	lsrs	r3, r3, #28
 80100f0:	430b      	orrs	r3, r1
 80100f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80100f6:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80100fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fe:	0890      	lsrs	r0, r2, #2
 8010100:	0799      	lsls	r1, r3, #30
 8010102:	4301      	orrs	r1, r0
 8010104:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8010108:	0899      	lsrs	r1, r3, #2
 801010a:	0793      	lsls	r3, r2, #30
 801010c:	430b      	orrs	r3, r1
 801010e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8010112:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8010116:	4623      	mov	r3, r4
 8010118:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 801011c:	4602      	mov	r2, r0
 801011e:	4053      	eors	r3, r2
 8010120:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8010124:	462b      	mov	r3, r5
 8010126:	460a      	mov	r2, r1
 8010128:	4053      	eors	r3, r2
 801012a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 801012e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8010132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010136:	09d0      	lsrs	r0, r2, #7
 8010138:	0659      	lsls	r1, r3, #25
 801013a:	4301      	orrs	r1, r0
 801013c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8010140:	09d9      	lsrs	r1, r3, #7
 8010142:	0653      	lsls	r3, r2, #25
 8010144:	430b      	orrs	r3, r1
 8010146:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 801014a:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 801014e:	4623      	mov	r3, r4
 8010150:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8010154:	4602      	mov	r2, r0
 8010156:	4053      	eors	r3, r2
 8010158:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 801015c:	462b      	mov	r3, r5
 801015e:	460a      	mov	r2, r1
 8010160:	4053      	eors	r3, r2
 8010162:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8010166:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801016a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801016e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010176:	ea40 0402 	orr.w	r4, r0, r2
 801017a:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 801017e:	430b      	orrs	r3, r1
 8010180:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8010184:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8010188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8010190:	4621      	mov	r1, r4
 8010192:	4011      	ands	r1, r2
 8010194:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8010198:	4629      	mov	r1, r5
 801019a:	400b      	ands	r3, r1
 801019c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80101a0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80101a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101a8:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80101ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b0:	ea00 0402 	and.w	r4, r0, r2
 80101b4:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80101b8:	400b      	ands	r3, r1
 80101ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80101be:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80101c2:	4623      	mov	r3, r4
 80101c4:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80101c8:	4602      	mov	r2, r0
 80101ca:	4313      	orrs	r3, r2
 80101cc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80101d0:	462b      	mov	r3, r5
 80101d2:	460a      	mov	r2, r1
 80101d4:	4313      	orrs	r3, r2
 80101d6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80101da:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80101de:	4623      	mov	r3, r4
 80101e0:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80101e4:	4602      	mov	r2, r0
 80101e6:	189b      	adds	r3, r3, r2
 80101e8:	613b      	str	r3, [r7, #16]
 80101ea:	462b      	mov	r3, r5
 80101ec:	460a      	mov	r2, r1
 80101ee:	4153      	adcs	r3, r2
 80101f0:	617b      	str	r3, [r7, #20]
 80101f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80101f6:	f607 1258 	addw	r2, r7, #2392	; 0x958
 80101fa:	e9c2 3400 	strd	r3, r4, [r2]
 80101fe:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010202:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010206:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 801020a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020e:	1884      	adds	r4, r0, r2
 8010210:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8010214:	eb41 0303 	adc.w	r3, r1, r3
 8010218:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801021c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8010220:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8010224:	e9c2 3400 	strd	r3, r4, [r2]
 8010228:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 801022c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010230:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8010234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010238:	1884      	adds	r4, r0, r2
 801023a:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 801023e:	eb41 0303 	adc.w	r3, r1, r3
 8010242:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8010246:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 801024a:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 801024e:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],i+7);
 8010252:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8010256:	e9d3 4500 	ldrd	r4, r5, [r3]
 801025a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801025e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010262:	0498      	lsls	r0, r3, #18
 8010264:	0b91      	lsrs	r1, r2, #14
 8010266:	4301      	orrs	r1, r0
 8010268:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 801026c:	0491      	lsls	r1, r2, #18
 801026e:	0b9b      	lsrs	r3, r3, #14
 8010270:	430b      	orrs	r3, r1
 8010272:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8010276:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801027a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027e:	0398      	lsls	r0, r3, #14
 8010280:	0c91      	lsrs	r1, r2, #18
 8010282:	4301      	orrs	r1, r0
 8010284:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8010288:	0391      	lsls	r1, r2, #14
 801028a:	0c9b      	lsrs	r3, r3, #18
 801028c:	430b      	orrs	r3, r1
 801028e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010292:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8010296:	4643      	mov	r3, r8
 8010298:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 801029c:	4602      	mov	r2, r0
 801029e:	4053      	eors	r3, r2
 80102a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80102a4:	464b      	mov	r3, r9
 80102a6:	460a      	mov	r2, r1
 80102a8:	4053      	eors	r3, r2
 80102aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80102ae:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80102b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b6:	0a50      	lsrs	r0, r2, #9
 80102b8:	05d9      	lsls	r1, r3, #23
 80102ba:	4301      	orrs	r1, r0
 80102bc:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80102c0:	0a59      	lsrs	r1, r3, #9
 80102c2:	05d3      	lsls	r3, r2, #23
 80102c4:	430b      	orrs	r3, r1
 80102c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80102ca:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80102ce:	4643      	mov	r3, r8
 80102d0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80102d4:	4602      	mov	r2, r0
 80102d6:	4053      	eors	r3, r2
 80102d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80102dc:	464b      	mov	r3, r9
 80102de:	460a      	mov	r2, r1
 80102e0:	4053      	eors	r3, r2
 80102e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80102e6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80102ea:	460b      	mov	r3, r1
 80102ec:	18e3      	adds	r3, r4, r3
 80102ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80102f2:	4613      	mov	r3, r2
 80102f4:	eb45 0303 	adc.w	r3, r5, r3
 80102f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80102fc:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010300:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010304:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010308:	e9d3 4500 	ldrd	r4, r5, [r3]
 801030c:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8010310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010314:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031c:	ea80 0602 	eor.w	r6, r0, r2
 8010320:	f8c7 6100 	str.w	r6, [r7, #256]	; 0x100
 8010324:	404b      	eors	r3, r1
 8010326:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801032a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 801032e:	460b      	mov	r3, r1
 8010330:	4023      	ands	r3, r4
 8010332:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010336:	4613      	mov	r3, r2
 8010338:	402b      	ands	r3, r5
 801033a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801033e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8010342:	460b      	mov	r3, r1
 8010344:	ea88 0303 	eor.w	r3, r8, r3
 8010348:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801034c:	4613      	mov	r3, r2
 801034e:	ea89 0303 	eor.w	r3, r9, r3
 8010352:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010356:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 801035a:	4623      	mov	r3, r4
 801035c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8010360:	4602      	mov	r2, r0
 8010362:	189b      	adds	r3, r3, r2
 8010364:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010368:	462b      	mov	r3, r5
 801036a:	460a      	mov	r2, r1
 801036c:	4153      	adcs	r3, r2
 801036e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010372:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010376:	3307      	adds	r3, #7
 8010378:	4a39      	ldr	r2, [pc, #228]	; (8010460 <sha512_compress+0x1be8>)
 801037a:	00db      	lsls	r3, r3, #3
 801037c:	4413      	add	r3, r2
 801037e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8010386:	4621      	mov	r1, r4
 8010388:	1889      	adds	r1, r1, r2
 801038a:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 801038e:	4629      	mov	r1, r5
 8010390:	eb41 0303 	adc.w	r3, r1, r3
 8010394:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010398:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801039c:	3307      	adds	r3, #7
 801039e:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80103a2:	00db      	lsls	r3, r3, #3
 80103a4:	4413      	add	r3, r2
 80103a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103aa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80103ae:	4621      	mov	r1, r4
 80103b0:	1889      	adds	r1, r1, r2
 80103b2:	60b9      	str	r1, [r7, #8]
 80103b4:	4629      	mov	r1, r5
 80103b6:	eb41 0303 	adc.w	r3, r1, r3
 80103ba:	60fb      	str	r3, [r7, #12]
 80103bc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80103c0:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80103c4:	e9c2 3400 	strd	r3, r4, [r2]
 80103c8:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80103cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d0:	0118      	lsls	r0, r3, #4
 80103d2:	0f11      	lsrs	r1, r2, #28
 80103d4:	4301      	orrs	r1, r0
 80103d6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80103da:	0111      	lsls	r1, r2, #4
 80103dc:	0f1b      	lsrs	r3, r3, #28
 80103de:	430b      	orrs	r3, r1
 80103e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80103e4:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80103e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ec:	0890      	lsrs	r0, r2, #2
 80103ee:	0799      	lsls	r1, r3, #30
 80103f0:	4301      	orrs	r1, r0
 80103f2:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80103f6:	0899      	lsrs	r1, r3, #2
 80103f8:	0793      	lsls	r3, r2, #30
 80103fa:	430b      	orrs	r3, r1
 80103fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010400:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8010404:	4623      	mov	r3, r4
 8010406:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801040a:	4602      	mov	r2, r0
 801040c:	4053      	eors	r3, r2
 801040e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010412:	462b      	mov	r3, r5
 8010414:	460a      	mov	r2, r1
 8010416:	4053      	eors	r3, r2
 8010418:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801041c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010424:	09d0      	lsrs	r0, r2, #7
 8010426:	0659      	lsls	r1, r3, #25
 8010428:	4301      	orrs	r1, r0
 801042a:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 801042e:	09d9      	lsrs	r1, r3, #7
 8010430:	0653      	lsls	r3, r2, #25
 8010432:	430b      	orrs	r3, r1
 8010434:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010438:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 801043c:	4623      	mov	r3, r4
 801043e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8010442:	4602      	mov	r2, r0
 8010444:	4053      	eors	r3, r2
 8010446:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801044a:	462b      	mov	r3, r5
 801044c:	460a      	mov	r2, r1
 801044e:	4053      	eors	r3, r2
 8010450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010454:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010458:	e9d3 0100 	ldrd	r0, r1, [r3]
 801045c:	e002      	b.n	8010464 <sha512_compress+0x1bec>
 801045e:	bf00      	nop
 8010460:	0801a9b0 	.word	0x0801a9b0
 8010464:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8010468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046c:	ea40 0402 	orr.w	r4, r0, r2
 8010470:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8010474:	430b      	orrs	r3, r1
 8010476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801047a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801047e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010482:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8010486:	4621      	mov	r1, r4
 8010488:	4011      	ands	r1, r2
 801048a:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 801048e:	4629      	mov	r1, r5
 8010490:	400b      	ands	r3, r1
 8010492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010496:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801049a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801049e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80104a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a6:	ea00 0402 	and.w	r4, r0, r2
 80104aa:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80104ae:	400b      	ands	r3, r1
 80104b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80104b4:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 80104b8:	4623      	mov	r3, r4
 80104ba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80104be:	4602      	mov	r2, r0
 80104c0:	4313      	orrs	r3, r2
 80104c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80104c6:	462b      	mov	r3, r5
 80104c8:	460a      	mov	r2, r1
 80104ca:	4313      	orrs	r3, r2
 80104cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80104d0:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80104d4:	4623      	mov	r3, r4
 80104d6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80104da:	4602      	mov	r2, r0
 80104dc:	189b      	adds	r3, r3, r2
 80104de:	603b      	str	r3, [r7, #0]
 80104e0:	462b      	mov	r3, r5
 80104e2:	460a      	mov	r2, r1
 80104e4:	4153      	adcs	r3, r2
 80104e6:	607b      	str	r3, [r7, #4]
 80104e8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80104ec:	f607 1258 	addw	r2, r7, #2392	; 0x958
 80104f0:	e9c2 3400 	strd	r3, r4, [r2]
 80104f4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80104f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80104fc:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010504:	1884      	adds	r4, r0, r2
 8010506:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 801050a:	eb41 0303 	adc.w	r3, r1, r3
 801050e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010512:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8010516:	f607 1238 	addw	r2, r7, #2360	; 0x938
 801051a:	e9c2 3400 	strd	r3, r4, [r2]
 801051e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010526:	f607 1358 	addw	r3, r7, #2392	; 0x958
 801052a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052e:	1884      	adds	r4, r0, r2
 8010530:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8010534:	eb41 0303 	adc.w	r3, r1, r3
 8010538:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801053c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8010540:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8010544:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 80; i += 8) {
 8010548:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801054c:	3308      	adds	r3, #8
 801054e:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8010552:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010556:	2b4f      	cmp	r3, #79	; 0x4f
 8010558:	f77e abb0 	ble.w	800ecbc <sha512_compress+0x444>
   #undef RND



    /* feedback */
   for (i = 0; i < 8; i++) {
 801055c:	2300      	movs	r3, #0
 801055e:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8010562:	e02a      	b.n	80105ba <sha512_compress+0x1d42>
        md->state[i] = md->state[i] + S[i];
 8010564:	f207 6394 	addw	r3, r7, #1684	; 0x694
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801056e:	3301      	adds	r3, #1
 8010570:	00db      	lsls	r3, r3, #3
 8010572:	4413      	add	r3, r2
 8010574:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010578:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801057c:	00db      	lsls	r3, r3, #3
 801057e:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 8010582:	4413      	add	r3, r2
 8010584:	3b58      	subs	r3, #88	; 0x58
 8010586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058a:	1884      	adds	r4, r0, r2
 801058c:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8010590:	eb41 0303 	adc.w	r3, r1, r3
 8010594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010598:	f207 6394 	addw	r3, r7, #1684	; 0x694
 801059c:	681a      	ldr	r2, [r3, #0]
 801059e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80105a2:	3301      	adds	r3, #1
 80105a4:	00db      	lsls	r3, r3, #3
 80105a6:	4413      	add	r3, r2
 80105a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80105ac:	e9c3 1200 	strd	r1, r2, [r3]
   for (i = 0; i < 8; i++) {
 80105b0:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80105b4:	3301      	adds	r3, #1
 80105b6:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 80105ba:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80105be:	2b07      	cmp	r3, #7
 80105c0:	ddd0      	ble.n	8010564 <sha512_compress+0x1cec>
    }

    return 0;
 80105c2:	2300      	movs	r3, #0
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	f507 6717 	add.w	r7, r7, #2416	; 0x970
 80105ca:	46bd      	mov	sp, r7
 80105cc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80105d0:	4770      	bx	lr
 80105d2:	bf00      	nop
 80105d4:	0000      	movs	r0, r0
	...

080105d8 <sha512_init>:
/**
   Initialize the hash state
   @param md   The hash state you wish to initialize
   @return 0 if successful
*/
int sha512_init(sha512_context * md) {
 80105d8:	b480      	push	{r7}
 80105da:	b083      	sub	sp, #12
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
    if (md == NULL) return 1;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d101      	bne.n	80105ea <sha512_init+0x12>
 80105e6:	2301      	movs	r3, #1
 80105e8:	e03a      	b.n	8010660 <sha512_init+0x88>

    md->curlen = 0;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2200      	movs	r2, #0
 80105ee:	649a      	str	r2, [r3, #72]	; 0x48
    md->length = 0;
 80105f0:	6879      	ldr	r1, [r7, #4]
 80105f2:	f04f 0200 	mov.w	r2, #0
 80105f6:	f04f 0300 	mov.w	r3, #0
 80105fa:	e9c1 2300 	strd	r2, r3, [r1]
    md->state[0] = (0x6a09e667f3bcc908);
 80105fe:	6879      	ldr	r1, [r7, #4]
 8010600:	a31b      	add	r3, pc, #108	; (adr r3, 8010670 <sha512_init+0x98>)
 8010602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010606:	e9c1 2302 	strd	r2, r3, [r1, #8]
    md->state[1] = (0xbb67ae8584caa73b);
 801060a:	6879      	ldr	r1, [r7, #4]
 801060c:	a31a      	add	r3, pc, #104	; (adr r3, 8010678 <sha512_init+0xa0>)
 801060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010612:	e9c1 2304 	strd	r2, r3, [r1, #16]
    md->state[2] = (0x3c6ef372fe94f82b);
 8010616:	6879      	ldr	r1, [r7, #4]
 8010618:	a319      	add	r3, pc, #100	; (adr r3, 8010680 <sha512_init+0xa8>)
 801061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    md->state[3] = (0xa54ff53a5f1d36f1);
 8010622:	6879      	ldr	r1, [r7, #4]
 8010624:	a318      	add	r3, pc, #96	; (adr r3, 8010688 <sha512_init+0xb0>)
 8010626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    md->state[4] = (0x510e527fade682d1);
 801062e:	6879      	ldr	r1, [r7, #4]
 8010630:	a317      	add	r3, pc, #92	; (adr r3, 8010690 <sha512_init+0xb8>)
 8010632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010636:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    md->state[5] = (0x9b05688c2b3e6c1f);
 801063a:	6879      	ldr	r1, [r7, #4]
 801063c:	a316      	add	r3, pc, #88	; (adr r3, 8010698 <sha512_init+0xc0>)
 801063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010642:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    md->state[6] = (0x1f83d9abfb41bd6b);
 8010646:	6879      	ldr	r1, [r7, #4]
 8010648:	a315      	add	r3, pc, #84	; (adr r3, 80106a0 <sha512_init+0xc8>)
 801064a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    md->state[7] = (0x5be0cd19137e2179);
 8010652:	6879      	ldr	r1, [r7, #4]
 8010654:	a314      	add	r3, pc, #80	; (adr r3, 80106a8 <sha512_init+0xd0>)
 8010656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return 0;
 801065e:	2300      	movs	r3, #0
}
 8010660:	4618      	mov	r0, r3
 8010662:	370c      	adds	r7, #12
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr
 801066c:	f3af 8000 	nop.w
 8010670:	f3bcc908 	.word	0xf3bcc908
 8010674:	6a09e667 	.word	0x6a09e667
 8010678:	84caa73b 	.word	0x84caa73b
 801067c:	bb67ae85 	.word	0xbb67ae85
 8010680:	fe94f82b 	.word	0xfe94f82b
 8010684:	3c6ef372 	.word	0x3c6ef372
 8010688:	5f1d36f1 	.word	0x5f1d36f1
 801068c:	a54ff53a 	.word	0xa54ff53a
 8010690:	ade682d1 	.word	0xade682d1
 8010694:	510e527f 	.word	0x510e527f
 8010698:	2b3e6c1f 	.word	0x2b3e6c1f
 801069c:	9b05688c 	.word	0x9b05688c
 80106a0:	fb41bd6b 	.word	0xfb41bd6b
 80106a4:	1f83d9ab 	.word	0x1f83d9ab
 80106a8:	137e2179 	.word	0x137e2179
 80106ac:	5be0cd19 	.word	0x5be0cd19

080106b0 <sha512_update>:
   @param in     The data to hash
   @param inlen  The length of the data (octets)
   @return 0 if successful
*/
int sha512_update (sha512_context * md, const unsigned char *in, size_t inlen)               
{                                                                                           
 80106b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80106b4:	b088      	sub	sp, #32
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	60f8      	str	r0, [r7, #12]
 80106ba:	60b9      	str	r1, [r7, #8]
 80106bc:	607a      	str	r2, [r7, #4]
    size_t n;
    size_t i;                                                                        
    int           err;     
    if (md == NULL) return 1;  
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d101      	bne.n	80106c8 <sha512_update+0x18>
 80106c4:	2301      	movs	r3, #1
 80106c6:	e07b      	b.n	80107c0 <sha512_update+0x110>
    if (in == NULL) return 1;                                                              
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d101      	bne.n	80106d2 <sha512_update+0x22>
 80106ce:	2301      	movs	r3, #1
 80106d0:	e076      	b.n	80107c0 <sha512_update+0x110>
    if (md->curlen > sizeof(md->buf)) {                             
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80106d6:	2b80      	cmp	r3, #128	; 0x80
 80106d8:	d96e      	bls.n	80107b8 <sha512_update+0x108>
       return 1;                                                            
 80106da:	2301      	movs	r3, #1
 80106dc:	e070      	b.n	80107c0 <sha512_update+0x110>
    }                                                                                       
    while (inlen > 0) {                                                                     
        if (md->curlen == 0 && inlen >= 128) {                           
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d11d      	bne.n	8010722 <sha512_update+0x72>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2b7f      	cmp	r3, #127	; 0x7f
 80106ea:	d91a      	bls.n	8010722 <sha512_update+0x72>
           if ((err = sha512_compress (md, (unsigned char *)in)) != 0) {               
 80106ec:	68b9      	ldr	r1, [r7, #8]
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f7fe f8c2 	bl	800e878 <sha512_compress>
 80106f4:	61b8      	str	r0, [r7, #24]
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d001      	beq.n	8010700 <sha512_update+0x50>
              return err;                                                                   
 80106fc:	69bb      	ldr	r3, [r7, #24]
 80106fe:	e05f      	b.n	80107c0 <sha512_update+0x110>
           }                                                                                
           md->length += 128 * 8;                                        
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010706:	f512 6480 	adds.w	r4, r2, #1024	; 0x400
 801070a:	f143 0500 	adc.w	r5, r3, #0
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	e9c3 4500 	strd	r4, r5, [r3]
           in             += 128;                                                    
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	3380      	adds	r3, #128	; 0x80
 8010718:	60bb      	str	r3, [r7, #8]
           inlen          -= 128;                                                    
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	3b80      	subs	r3, #128	; 0x80
 801071e:	607b      	str	r3, [r7, #4]
 8010720:	e04a      	b.n	80107b8 <sha512_update+0x108>
        } else {                                                                            
           n = MIN(inlen, (128 - md->curlen));
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010726:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	4293      	cmp	r3, r2
 801072e:	bf28      	it	cs
 8010730:	4613      	movcs	r3, r2
 8010732:	617b      	str	r3, [r7, #20]

           for (i = 0; i < n; i++) {
 8010734:	2300      	movs	r3, #0
 8010736:	61fb      	str	r3, [r7, #28]
 8010738:	e00f      	b.n	801075a <sha512_update+0xaa>
            md->buf[i + md->curlen] = in[i];
 801073a:	68ba      	ldr	r2, [r7, #8]
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	441a      	add	r2, r3
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	440b      	add	r3, r1
 8010748:	7811      	ldrb	r1, [r2, #0]
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	4413      	add	r3, r2
 801074e:	460a      	mov	r2, r1
 8010750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
           for (i = 0; i < n; i++) {
 8010754:	69fb      	ldr	r3, [r7, #28]
 8010756:	3301      	adds	r3, #1
 8010758:	61fb      	str	r3, [r7, #28]
 801075a:	69fa      	ldr	r2, [r7, #28]
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	429a      	cmp	r2, r3
 8010760:	d3eb      	bcc.n	801073a <sha512_update+0x8a>
           }


           md->curlen += n;                                                     
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	441a      	add	r2, r3
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	649a      	str	r2, [r3, #72]	; 0x48
           in             += n;                                                             
 801076e:	68ba      	ldr	r2, [r7, #8]
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	4413      	add	r3, r2
 8010774:	60bb      	str	r3, [r7, #8]
           inlen          -= n;                                                             
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	1ad3      	subs	r3, r2, r3
 801077c:	607b      	str	r3, [r7, #4]
           if (md->curlen == 128) {                                      
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010782:	2b80      	cmp	r3, #128	; 0x80
 8010784:	d118      	bne.n	80107b8 <sha512_update+0x108>
              if ((err = sha512_compress (md, md->buf)) != 0) {            
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	334c      	adds	r3, #76	; 0x4c
 801078a:	4619      	mov	r1, r3
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	f7fe f873 	bl	800e878 <sha512_compress>
 8010792:	61b8      	str	r0, [r7, #24]
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d001      	beq.n	801079e <sha512_update+0xee>
                 return err;                                                                
 801079a:	69bb      	ldr	r3, [r7, #24]
 801079c:	e010      	b.n	80107c0 <sha512_update+0x110>
              }                                                                             
              md->length += 8*128;                                       
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a4:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 80107a8:	f143 0900 	adc.w	r9, r3, #0
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	e9c3 8900 	strd	r8, r9, [r3]
              md->curlen = 0;                                                   
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2200      	movs	r2, #0
 80107b6:	649a      	str	r2, [r3, #72]	; 0x48
    while (inlen > 0) {                                                                     
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d18f      	bne.n	80106de <sha512_update+0x2e>
           }                                                                                
       }                                                                                    
    }                                                                                       
    return 0;                                                                        
 80107be:	2300      	movs	r3, #0
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3720      	adds	r7, #32
 80107c4:	46bd      	mov	sp, r7
 80107c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080107ca <sha512_final>:
   @param md  The hash state
   @param out [out] The destination of the hash (64 bytes)
   @return 0 if successful
*/
   int sha512_final(sha512_context * md, unsigned char *out)
   {
 80107ca:	b5b0      	push	{r4, r5, r7, lr}
 80107cc:	b084      	sub	sp, #16
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	6078      	str	r0, [r7, #4]
 80107d2:	6039      	str	r1, [r7, #0]
    int i;

    if (md == NULL) return 1;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d101      	bne.n	80107de <sha512_final+0x14>
 80107da:	2301      	movs	r3, #1
 80107dc:	e167      	b.n	8010aae <sha512_final+0x2e4>
    if (out == NULL) return 1;
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d101      	bne.n	80107e8 <sha512_final+0x1e>
 80107e4:	2301      	movs	r3, #1
 80107e6:	e162      	b.n	8010aae <sha512_final+0x2e4>

    if (md->curlen >= sizeof(md->buf)) {
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107ec:	2b7f      	cmp	r3, #127	; 0x7f
 80107ee:	d901      	bls.n	80107f4 <sha512_final+0x2a>
     return 1;
 80107f0:	2301      	movs	r3, #1
 80107f2:	e15c      	b.n	8010aae <sha512_final+0x2e4>
 }

    /* increase the length of the message */
 md->length += md->curlen * (8);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107fe:	00db      	lsls	r3, r3, #3
 8010800:	461a      	mov	r2, r3
 8010802:	f04f 0300 	mov.w	r3, #0
 8010806:	1884      	adds	r4, r0, r2
 8010808:	eb41 0503 	adc.w	r5, r1, r3
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	e9c3 4500 	strd	r4, r5, [r3]

    /* append the '1' bit */
 md->buf[md->curlen++] = (unsigned char)0x80;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010816:	1c59      	adds	r1, r3, #1
 8010818:	687a      	ldr	r2, [r7, #4]
 801081a:	6491      	str	r1, [r2, #72]	; 0x48
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	4413      	add	r3, r2
 8010820:	2280      	movs	r2, #128	; 0x80
 8010822:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* if the length is currently above 112 bytes we append zeros
     * then compress.  Then we can fall back to padding zeros and length
     * encoding like normal.
     */
     if (md->curlen > 112) {
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801082a:	2b70      	cmp	r3, #112	; 0x70
 801082c:	d922      	bls.n	8010874 <sha512_final+0xaa>
        while (md->curlen < 128) {
 801082e:	e009      	b.n	8010844 <sha512_final+0x7a>
            md->buf[md->curlen++] = (unsigned char)0;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010834:	1c59      	adds	r1, r3, #1
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	6491      	str	r1, [r2, #72]	; 0x48
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	4413      	add	r3, r2
 801083e:	2200      	movs	r2, #0
 8010840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        while (md->curlen < 128) {
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010848:	2b7f      	cmp	r3, #127	; 0x7f
 801084a:	d9f1      	bls.n	8010830 <sha512_final+0x66>
        }
        sha512_compress(md, md->buf);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	334c      	adds	r3, #76	; 0x4c
 8010850:	4619      	mov	r1, r3
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f7fe f810 	bl	800e878 <sha512_compress>
        md->curlen = 0;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	649a      	str	r2, [r3, #72]	; 0x48

    /* pad upto 120 bytes of zeroes 
     * note: that from 112 to 120 is the 64 MSB of the length.  We assume that you won't hash
     * > 2^64 bits of data... :-)
     */
while (md->curlen < 120) {
 801085e:	e009      	b.n	8010874 <sha512_final+0xaa>
    md->buf[md->curlen++] = (unsigned char)0;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010864:	1c59      	adds	r1, r3, #1
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	6491      	str	r1, [r2, #72]	; 0x48
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	4413      	add	r3, r2
 801086e:	2200      	movs	r2, #0
 8010870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
while (md->curlen < 120) {
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010878:	2b77      	cmp	r3, #119	; 0x77
 801087a:	d9f1      	bls.n	8010860 <sha512_final+0x96>
}

    /* store length */
STORE64H(md->length, md->buf+120);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010882:	f04f 0200 	mov.w	r2, #0
 8010886:	f04f 0300 	mov.w	r3, #0
 801088a:	0e0a      	lsrs	r2, r1, #24
 801088c:	2300      	movs	r3, #0
 801088e:	b2d2      	uxtb	r2, r2
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	e9d3 0100 	ldrd	r0, r1, [r3]
 801089c:	f04f 0200 	mov.w	r2, #0
 80108a0:	f04f 0300 	mov.w	r3, #0
 80108a4:	0c0a      	lsrs	r2, r1, #16
 80108a6:	2300      	movs	r3, #0
 80108a8:	b2d2      	uxtb	r2, r2
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108b6:	f04f 0200 	mov.w	r2, #0
 80108ba:	f04f 0300 	mov.w	r3, #0
 80108be:	0a0a      	lsrs	r2, r1, #8
 80108c0:	2300      	movs	r3, #0
 80108c2:	b2d2      	uxtb	r2, r2
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108d0:	f04f 0200 	mov.w	r2, #0
 80108d4:	f04f 0300 	mov.w	r3, #0
 80108d8:	000a      	movs	r2, r1
 80108da:	2300      	movs	r3, #0
 80108dc:	b2d2      	uxtb	r2, r2
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80108ea:	f04f 0200 	mov.w	r2, #0
 80108ee:	f04f 0300 	mov.w	r3, #0
 80108f2:	0e02      	lsrs	r2, r0, #24
 80108f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80108f8:	0e0b      	lsrs	r3, r1, #24
 80108fa:	b2d2      	uxtb	r2, r2
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010908:	f04f 0200 	mov.w	r2, #0
 801090c:	f04f 0300 	mov.w	r3, #0
 8010910:	0c02      	lsrs	r2, r0, #16
 8010912:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010916:	0c0b      	lsrs	r3, r1, #16
 8010918:	b2d2      	uxtb	r2, r2
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010926:	f04f 0200 	mov.w	r2, #0
 801092a:	f04f 0300 	mov.w	r3, #0
 801092e:	0a02      	lsrs	r2, r0, #8
 8010930:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010934:	0a0b      	lsrs	r3, r1, #8
 8010936:	b2d2      	uxtb	r2, r2
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010944:	b2d2      	uxtb	r2, r2
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
sha512_compress(md, md->buf);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	334c      	adds	r3, #76	; 0x4c
 8010950:	4619      	mov	r1, r3
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f7fd ff90 	bl	800e878 <sha512_compress>

    /* copy output */
for (i = 0; i < 8; i++) {
 8010958:	2300      	movs	r3, #0
 801095a:	60fb      	str	r3, [r7, #12]
 801095c:	e0a2      	b.n	8010aa4 <sha512_final+0x2da>
    STORE64H(md->state[i], out+(8*i));
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	3301      	adds	r3, #1
 8010964:	00db      	lsls	r3, r3, #3
 8010966:	4413      	add	r3, r2
 8010968:	e9d3 0100 	ldrd	r0, r1, [r3]
 801096c:	f04f 0200 	mov.w	r2, #0
 8010970:	f04f 0300 	mov.w	r3, #0
 8010974:	0e0a      	lsrs	r2, r1, #24
 8010976:	2300      	movs	r3, #0
 8010978:	68f9      	ldr	r1, [r7, #12]
 801097a:	00c9      	lsls	r1, r1, #3
 801097c:	4608      	mov	r0, r1
 801097e:	6839      	ldr	r1, [r7, #0]
 8010980:	4401      	add	r1, r0
 8010982:	b2d3      	uxtb	r3, r2
 8010984:	700b      	strb	r3, [r1, #0]
 8010986:	687a      	ldr	r2, [r7, #4]
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	3301      	adds	r3, #1
 801098c:	00db      	lsls	r3, r3, #3
 801098e:	4413      	add	r3, r2
 8010990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010994:	f04f 0200 	mov.w	r2, #0
 8010998:	f04f 0300 	mov.w	r3, #0
 801099c:	0c0a      	lsrs	r2, r1, #16
 801099e:	2300      	movs	r3, #0
 80109a0:	68f9      	ldr	r1, [r7, #12]
 80109a2:	00c9      	lsls	r1, r1, #3
 80109a4:	3101      	adds	r1, #1
 80109a6:	6838      	ldr	r0, [r7, #0]
 80109a8:	4401      	add	r1, r0
 80109aa:	b2d3      	uxtb	r3, r2
 80109ac:	700b      	strb	r3, [r1, #0]
 80109ae:	687a      	ldr	r2, [r7, #4]
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	3301      	adds	r3, #1
 80109b4:	00db      	lsls	r3, r3, #3
 80109b6:	4413      	add	r3, r2
 80109b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109bc:	f04f 0200 	mov.w	r2, #0
 80109c0:	f04f 0300 	mov.w	r3, #0
 80109c4:	0a0a      	lsrs	r2, r1, #8
 80109c6:	2300      	movs	r3, #0
 80109c8:	68f9      	ldr	r1, [r7, #12]
 80109ca:	00c9      	lsls	r1, r1, #3
 80109cc:	3102      	adds	r1, #2
 80109ce:	6838      	ldr	r0, [r7, #0]
 80109d0:	4401      	add	r1, r0
 80109d2:	b2d3      	uxtb	r3, r2
 80109d4:	700b      	strb	r3, [r1, #0]
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	3301      	adds	r3, #1
 80109dc:	00db      	lsls	r3, r3, #3
 80109de:	4413      	add	r3, r2
 80109e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109e4:	f04f 0200 	mov.w	r2, #0
 80109e8:	f04f 0300 	mov.w	r3, #0
 80109ec:	000a      	movs	r2, r1
 80109ee:	2300      	movs	r3, #0
 80109f0:	68f9      	ldr	r1, [r7, #12]
 80109f2:	00c9      	lsls	r1, r1, #3
 80109f4:	3103      	adds	r1, #3
 80109f6:	6838      	ldr	r0, [r7, #0]
 80109f8:	4401      	add	r1, r0
 80109fa:	b2d3      	uxtb	r3, r2
 80109fc:	700b      	strb	r3, [r1, #0]
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	3301      	adds	r3, #1
 8010a04:	00db      	lsls	r3, r3, #3
 8010a06:	4413      	add	r3, r2
 8010a08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a0c:	f04f 0200 	mov.w	r2, #0
 8010a10:	f04f 0300 	mov.w	r3, #0
 8010a14:	0e02      	lsrs	r2, r0, #24
 8010a16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8010a1a:	0e0b      	lsrs	r3, r1, #24
 8010a1c:	68f9      	ldr	r1, [r7, #12]
 8010a1e:	00c9      	lsls	r1, r1, #3
 8010a20:	3104      	adds	r1, #4
 8010a22:	6838      	ldr	r0, [r7, #0]
 8010a24:	4401      	add	r1, r0
 8010a26:	b2d3      	uxtb	r3, r2
 8010a28:	700b      	strb	r3, [r1, #0]
 8010a2a:	687a      	ldr	r2, [r7, #4]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	3301      	adds	r3, #1
 8010a30:	00db      	lsls	r3, r3, #3
 8010a32:	4413      	add	r3, r2
 8010a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a38:	f04f 0200 	mov.w	r2, #0
 8010a3c:	f04f 0300 	mov.w	r3, #0
 8010a40:	0c02      	lsrs	r2, r0, #16
 8010a42:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010a46:	0c0b      	lsrs	r3, r1, #16
 8010a48:	68f9      	ldr	r1, [r7, #12]
 8010a4a:	00c9      	lsls	r1, r1, #3
 8010a4c:	3105      	adds	r1, #5
 8010a4e:	6838      	ldr	r0, [r7, #0]
 8010a50:	4401      	add	r1, r0
 8010a52:	b2d3      	uxtb	r3, r2
 8010a54:	700b      	strb	r3, [r1, #0]
 8010a56:	687a      	ldr	r2, [r7, #4]
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	00db      	lsls	r3, r3, #3
 8010a5e:	4413      	add	r3, r2
 8010a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a64:	f04f 0200 	mov.w	r2, #0
 8010a68:	f04f 0300 	mov.w	r3, #0
 8010a6c:	0a02      	lsrs	r2, r0, #8
 8010a6e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010a72:	0a0b      	lsrs	r3, r1, #8
 8010a74:	68f9      	ldr	r1, [r7, #12]
 8010a76:	00c9      	lsls	r1, r1, #3
 8010a78:	3106      	adds	r1, #6
 8010a7a:	6838      	ldr	r0, [r7, #0]
 8010a7c:	4401      	add	r1, r0
 8010a7e:	b2d3      	uxtb	r3, r2
 8010a80:	700b      	strb	r3, [r1, #0]
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	3301      	adds	r3, #1
 8010a88:	00db      	lsls	r3, r3, #3
 8010a8a:	4413      	add	r3, r2
 8010a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a90:	68f9      	ldr	r1, [r7, #12]
 8010a92:	00c9      	lsls	r1, r1, #3
 8010a94:	3107      	adds	r1, #7
 8010a96:	6838      	ldr	r0, [r7, #0]
 8010a98:	4401      	add	r1, r0
 8010a9a:	b2d3      	uxtb	r3, r2
 8010a9c:	700b      	strb	r3, [r1, #0]
for (i = 0; i < 8; i++) {
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	3301      	adds	r3, #1
 8010aa2:	60fb      	str	r3, [r7, #12]
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2b07      	cmp	r3, #7
 8010aa8:	f77f af59 	ble.w	801095e <sha512_final+0x194>
}

return 0;
 8010aac:	2300      	movs	r3, #0
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3710      	adds	r7, #16
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010abe:	2300      	movs	r3, #0
 8010ac0:	607b      	str	r3, [r7, #4]
 8010ac2:	4b10      	ldr	r3, [pc, #64]	; (8010b04 <HAL_MspInit+0x4c>)
 8010ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ac6:	4a0f      	ldr	r2, [pc, #60]	; (8010b04 <HAL_MspInit+0x4c>)
 8010ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010acc:	6453      	str	r3, [r2, #68]	; 0x44
 8010ace:	4b0d      	ldr	r3, [pc, #52]	; (8010b04 <HAL_MspInit+0x4c>)
 8010ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ad6:	607b      	str	r3, [r7, #4]
 8010ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010ada:	2300      	movs	r3, #0
 8010adc:	603b      	str	r3, [r7, #0]
 8010ade:	4b09      	ldr	r3, [pc, #36]	; (8010b04 <HAL_MspInit+0x4c>)
 8010ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ae2:	4a08      	ldr	r2, [pc, #32]	; (8010b04 <HAL_MspInit+0x4c>)
 8010ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8010aea:	4b06      	ldr	r3, [pc, #24]	; (8010b04 <HAL_MspInit+0x4c>)
 8010aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010af2:	603b      	str	r3, [r7, #0]
 8010af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010af6:	bf00      	nop
 8010af8:	370c      	adds	r7, #12
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr
 8010b02:	bf00      	nop
 8010b04:	40023800 	.word	0x40023800

08010b08 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b08a      	sub	sp, #40	; 0x28
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010b10:	f107 0314 	add.w	r3, r7, #20
 8010b14:	2200      	movs	r2, #0
 8010b16:	601a      	str	r2, [r3, #0]
 8010b18:	605a      	str	r2, [r3, #4]
 8010b1a:	609a      	str	r2, [r3, #8]
 8010b1c:	60da      	str	r2, [r3, #12]
 8010b1e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4a28      	ldr	r2, [pc, #160]	; (8010bc8 <HAL_SD_MspInit+0xc0>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d14a      	bne.n	8010bc0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	613b      	str	r3, [r7, #16]
 8010b2e:	4b27      	ldr	r3, [pc, #156]	; (8010bcc <HAL_SD_MspInit+0xc4>)
 8010b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b32:	4a26      	ldr	r2, [pc, #152]	; (8010bcc <HAL_SD_MspInit+0xc4>)
 8010b34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010b38:	6453      	str	r3, [r2, #68]	; 0x44
 8010b3a:	4b24      	ldr	r3, [pc, #144]	; (8010bcc <HAL_SD_MspInit+0xc4>)
 8010b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b42:	613b      	str	r3, [r7, #16]
 8010b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010b46:	2300      	movs	r3, #0
 8010b48:	60fb      	str	r3, [r7, #12]
 8010b4a:	4b20      	ldr	r3, [pc, #128]	; (8010bcc <HAL_SD_MspInit+0xc4>)
 8010b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b4e:	4a1f      	ldr	r2, [pc, #124]	; (8010bcc <HAL_SD_MspInit+0xc4>)
 8010b50:	f043 0304 	orr.w	r3, r3, #4
 8010b54:	6313      	str	r3, [r2, #48]	; 0x30
 8010b56:	4b1d      	ldr	r3, [pc, #116]	; (8010bcc <HAL_SD_MspInit+0xc4>)
 8010b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b5a:	f003 0304 	and.w	r3, r3, #4
 8010b5e:	60fb      	str	r3, [r7, #12]
 8010b60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010b62:	2300      	movs	r3, #0
 8010b64:	60bb      	str	r3, [r7, #8]
 8010b66:	4b19      	ldr	r3, [pc, #100]	; (8010bcc <HAL_SD_MspInit+0xc4>)
 8010b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b6a:	4a18      	ldr	r2, [pc, #96]	; (8010bcc <HAL_SD_MspInit+0xc4>)
 8010b6c:	f043 0308 	orr.w	r3, r3, #8
 8010b70:	6313      	str	r3, [r2, #48]	; 0x30
 8010b72:	4b16      	ldr	r3, [pc, #88]	; (8010bcc <HAL_SD_MspInit+0xc4>)
 8010b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b76:	f003 0308 	and.w	r3, r3, #8
 8010b7a:	60bb      	str	r3, [r7, #8]
 8010b7c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8010b7e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8010b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b84:	2302      	movs	r3, #2
 8010b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b8c:	2303      	movs	r3, #3
 8010b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8010b90:	230c      	movs	r3, #12
 8010b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010b94:	f107 0314 	add.w	r3, r7, #20
 8010b98:	4619      	mov	r1, r3
 8010b9a:	480d      	ldr	r0, [pc, #52]	; (8010bd0 <HAL_SD_MspInit+0xc8>)
 8010b9c:	f001 f85a 	bl	8011c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010ba0:	2304      	movs	r3, #4
 8010ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ba4:	2302      	movs	r3, #2
 8010ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bac:	2303      	movs	r3, #3
 8010bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8010bb0:	230c      	movs	r3, #12
 8010bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010bb4:	f107 0314 	add.w	r3, r7, #20
 8010bb8:	4619      	mov	r1, r3
 8010bba:	4806      	ldr	r0, [pc, #24]	; (8010bd4 <HAL_SD_MspInit+0xcc>)
 8010bbc:	f001 f84a 	bl	8011c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8010bc0:	bf00      	nop
 8010bc2:	3728      	adds	r7, #40	; 0x28
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}
 8010bc8:	40012c00 	.word	0x40012c00
 8010bcc:	40023800 	.word	0x40023800
 8010bd0:	40020800 	.word	0x40020800
 8010bd4:	40020c00 	.word	0x40020c00

08010bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8010bd8:	b480      	push	{r7}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4a0b      	ldr	r2, [pc, #44]	; (8010c14 <HAL_TIM_Base_MspInit+0x3c>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d10d      	bne.n	8010c06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8010bea:	2300      	movs	r3, #0
 8010bec:	60fb      	str	r3, [r7, #12]
 8010bee:	4b0a      	ldr	r3, [pc, #40]	; (8010c18 <HAL_TIM_Base_MspInit+0x40>)
 8010bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bf2:	4a09      	ldr	r2, [pc, #36]	; (8010c18 <HAL_TIM_Base_MspInit+0x40>)
 8010bf4:	f043 0301 	orr.w	r3, r3, #1
 8010bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8010bfa:	4b07      	ldr	r3, [pc, #28]	; (8010c18 <HAL_TIM_Base_MspInit+0x40>)
 8010bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bfe:	f003 0301 	and.w	r3, r3, #1
 8010c02:	60fb      	str	r3, [r7, #12]
 8010c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8010c06:	bf00      	nop
 8010c08:	3714      	adds	r7, #20
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr
 8010c12:	bf00      	nop
 8010c14:	40010000 	.word	0x40010000
 8010c18:	40023800 	.word	0x40023800

08010c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b08e      	sub	sp, #56	; 0x38
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c28:	2200      	movs	r2, #0
 8010c2a:	601a      	str	r2, [r3, #0]
 8010c2c:	605a      	str	r2, [r3, #4]
 8010c2e:	609a      	str	r2, [r3, #8]
 8010c30:	60da      	str	r2, [r3, #12]
 8010c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4a4b      	ldr	r2, [pc, #300]	; (8010d68 <HAL_UART_MspInit+0x14c>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d12c      	bne.n	8010c98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8010c3e:	2300      	movs	r3, #0
 8010c40:	623b      	str	r3, [r7, #32]
 8010c42:	4b4a      	ldr	r3, [pc, #296]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c46:	4a49      	ldr	r2, [pc, #292]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010c48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8010c4e:	4b47      	ldr	r3, [pc, #284]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010c56:	623b      	str	r3, [r7, #32]
 8010c58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	61fb      	str	r3, [r7, #28]
 8010c5e:	4b43      	ldr	r3, [pc, #268]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c62:	4a42      	ldr	r2, [pc, #264]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010c64:	f043 0301 	orr.w	r3, r3, #1
 8010c68:	6313      	str	r3, [r2, #48]	; 0x30
 8010c6a:	4b40      	ldr	r3, [pc, #256]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c6e:	f003 0301 	and.w	r3, r3, #1
 8010c72:	61fb      	str	r3, [r7, #28]
 8010c74:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010c76:	2303      	movs	r3, #3
 8010c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c7a:	2302      	movs	r3, #2
 8010c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c82:	2303      	movs	r3, #3
 8010c84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8010c86:	2308      	movs	r3, #8
 8010c88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c8e:	4619      	mov	r1, r3
 8010c90:	4837      	ldr	r0, [pc, #220]	; (8010d70 <HAL_UART_MspInit+0x154>)
 8010c92:	f000 ffdf 	bl	8011c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8010c96:	e063      	b.n	8010d60 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART1)
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4a35      	ldr	r2, [pc, #212]	; (8010d74 <HAL_UART_MspInit+0x158>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d12d      	bne.n	8010cfe <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	61bb      	str	r3, [r7, #24]
 8010ca6:	4b31      	ldr	r3, [pc, #196]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010caa:	4a30      	ldr	r2, [pc, #192]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010cac:	f043 0310 	orr.w	r3, r3, #16
 8010cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8010cb2:	4b2e      	ldr	r3, [pc, #184]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cb6:	f003 0310 	and.w	r3, r3, #16
 8010cba:	61bb      	str	r3, [r7, #24]
 8010cbc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	617b      	str	r3, [r7, #20]
 8010cc2:	4b2a      	ldr	r3, [pc, #168]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cc6:	4a29      	ldr	r2, [pc, #164]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010cc8:	f043 0301 	orr.w	r3, r3, #1
 8010ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8010cce:	4b27      	ldr	r3, [pc, #156]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cd2:	f003 0301 	and.w	r3, r3, #1
 8010cd6:	617b      	str	r3, [r7, #20]
 8010cd8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8010cda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ce0:	2302      	movs	r3, #2
 8010ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010ce8:	2303      	movs	r3, #3
 8010cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8010cec:	2307      	movs	r3, #7
 8010cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	481e      	ldr	r0, [pc, #120]	; (8010d70 <HAL_UART_MspInit+0x154>)
 8010cf8:	f000 ffac 	bl	8011c54 <HAL_GPIO_Init>
}
 8010cfc:	e030      	b.n	8010d60 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4a1d      	ldr	r2, [pc, #116]	; (8010d78 <HAL_UART_MspInit+0x15c>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d12b      	bne.n	8010d60 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART2_CLK_ENABLE();
 8010d08:	2300      	movs	r3, #0
 8010d0a:	613b      	str	r3, [r7, #16]
 8010d0c:	4b17      	ldr	r3, [pc, #92]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d10:	4a16      	ldr	r2, [pc, #88]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010d16:	6413      	str	r3, [r2, #64]	; 0x40
 8010d18:	4b14      	ldr	r3, [pc, #80]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d20:	613b      	str	r3, [r7, #16]
 8010d22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d24:	2300      	movs	r3, #0
 8010d26:	60fb      	str	r3, [r7, #12]
 8010d28:	4b10      	ldr	r3, [pc, #64]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d2c:	4a0f      	ldr	r2, [pc, #60]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010d2e:	f043 0301 	orr.w	r3, r3, #1
 8010d32:	6313      	str	r3, [r2, #48]	; 0x30
 8010d34:	4b0d      	ldr	r3, [pc, #52]	; (8010d6c <HAL_UART_MspInit+0x150>)
 8010d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d38:	f003 0301 	and.w	r3, r3, #1
 8010d3c:	60fb      	str	r3, [r7, #12]
 8010d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8010d40:	230c      	movs	r3, #12
 8010d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d44:	2302      	movs	r3, #2
 8010d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010d4c:	2303      	movs	r3, #3
 8010d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010d50:	2307      	movs	r3, #7
 8010d52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d58:	4619      	mov	r1, r3
 8010d5a:	4805      	ldr	r0, [pc, #20]	; (8010d70 <HAL_UART_MspInit+0x154>)
 8010d5c:	f000 ff7a 	bl	8011c54 <HAL_GPIO_Init>
}
 8010d60:	bf00      	nop
 8010d62:	3738      	adds	r7, #56	; 0x38
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	40004c00 	.word	0x40004c00
 8010d6c:	40023800 	.word	0x40023800
 8010d70:	40020000 	.word	0x40020000
 8010d74:	40011000 	.word	0x40011000
 8010d78:	40004400 	.word	0x40004400

08010d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8010d80:	e7fe      	b.n	8010d80 <NMI_Handler+0x4>

08010d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010d82:	b480      	push	{r7}
 8010d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010d86:	e7fe      	b.n	8010d86 <HardFault_Handler+0x4>

08010d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8010d8c:	e7fe      	b.n	8010d8c <MemManage_Handler+0x4>

08010d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8010d8e:	b480      	push	{r7}
 8010d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8010d92:	e7fe      	b.n	8010d92 <BusFault_Handler+0x4>

08010d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8010d94:	b480      	push	{r7}
 8010d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8010d98:	e7fe      	b.n	8010d98 <UsageFault_Handler+0x4>

08010d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010d9a:	b480      	push	{r7}
 8010d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8010d9e:	bf00      	nop
 8010da0:	46bd      	mov	sp, r7
 8010da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da6:	4770      	bx	lr

08010da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010da8:	b480      	push	{r7}
 8010daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010dac:	bf00      	nop
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr

08010db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010db6:	b480      	push	{r7}
 8010db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010dba:	bf00      	nop
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010dc8:	f000 fb42 	bl	8011450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010dcc:	bf00      	nop
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	af00      	add	r7, sp, #0
	return 1;
 8010dd4:	2301      	movs	r3, #1
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr

08010de0 <_kill>:

int _kill(int pid, int sig)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8010dea:	f006 fb63 	bl	80174b4 <__errno>
 8010dee:	4603      	mov	r3, r0
 8010df0:	2216      	movs	r2, #22
 8010df2:	601a      	str	r2, [r3, #0]
	return -1;
 8010df4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <_exit>:

void _exit (int status)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8010e08:	f04f 31ff 	mov.w	r1, #4294967295
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7ff ffe7 	bl	8010de0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8010e12:	e7fe      	b.n	8010e12 <_exit+0x12>

08010e14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b086      	sub	sp, #24
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010e20:	2300      	movs	r3, #0
 8010e22:	617b      	str	r3, [r7, #20]
 8010e24:	e00a      	b.n	8010e3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010e26:	f3af 8000 	nop.w
 8010e2a:	4601      	mov	r1, r0
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	1c5a      	adds	r2, r3, #1
 8010e30:	60ba      	str	r2, [r7, #8]
 8010e32:	b2ca      	uxtb	r2, r1
 8010e34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	3301      	adds	r3, #1
 8010e3a:	617b      	str	r3, [r7, #20]
 8010e3c:	697a      	ldr	r2, [r7, #20]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	dbf0      	blt.n	8010e26 <_read+0x12>
	}

return len;
 8010e44:	687b      	ldr	r3, [r7, #4]
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3718      	adds	r7, #24
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}

08010e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010e4e:	b580      	push	{r7, lr}
 8010e50:	b086      	sub	sp, #24
 8010e52:	af00      	add	r7, sp, #0
 8010e54:	60f8      	str	r0, [r7, #12]
 8010e56:	60b9      	str	r1, [r7, #8]
 8010e58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	617b      	str	r3, [r7, #20]
 8010e5e:	e009      	b.n	8010e74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	1c5a      	adds	r2, r3, #1
 8010e64:	60ba      	str	r2, [r7, #8]
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	3301      	adds	r3, #1
 8010e72:	617b      	str	r3, [r7, #20]
 8010e74:	697a      	ldr	r2, [r7, #20]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	dbf1      	blt.n	8010e60 <_write+0x12>
	}
	return len;
 8010e7c:	687b      	ldr	r3, [r7, #4]
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3718      	adds	r7, #24
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}

08010e86 <_close>:

int _close(int file)
{
 8010e86:	b480      	push	{r7}
 8010e88:	b083      	sub	sp, #12
 8010e8a:	af00      	add	r7, sp, #0
 8010e8c:	6078      	str	r0, [r7, #4]
	return -1;
 8010e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	370c      	adds	r7, #12
 8010e96:	46bd      	mov	sp, r7
 8010e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9c:	4770      	bx	lr

08010e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010e9e:	b480      	push	{r7}
 8010ea0:	b083      	sub	sp, #12
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	6078      	str	r0, [r7, #4]
 8010ea6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010eae:	605a      	str	r2, [r3, #4]
	return 0;
 8010eb0:	2300      	movs	r3, #0
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	370c      	adds	r7, #12
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr

08010ebe <_isatty>:

int _isatty(int file)
{
 8010ebe:	b480      	push	{r7}
 8010ec0:	b083      	sub	sp, #12
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
	return 1;
 8010ec6:	2301      	movs	r3, #1
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	370c      	adds	r7, #12
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed2:	4770      	bx	lr

08010ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	b085      	sub	sp, #20
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	607a      	str	r2, [r7, #4]
	return 0;
 8010ee0:	2300      	movs	r3, #0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3714      	adds	r7, #20
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr
	...

08010ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b086      	sub	sp, #24
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010ef8:	4a14      	ldr	r2, [pc, #80]	; (8010f4c <_sbrk+0x5c>)
 8010efa:	4b15      	ldr	r3, [pc, #84]	; (8010f50 <_sbrk+0x60>)
 8010efc:	1ad3      	subs	r3, r2, r3
 8010efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010f04:	4b13      	ldr	r3, [pc, #76]	; (8010f54 <_sbrk+0x64>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d102      	bne.n	8010f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8010f0c:	4b11      	ldr	r3, [pc, #68]	; (8010f54 <_sbrk+0x64>)
 8010f0e:	4a12      	ldr	r2, [pc, #72]	; (8010f58 <_sbrk+0x68>)
 8010f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010f12:	4b10      	ldr	r3, [pc, #64]	; (8010f54 <_sbrk+0x64>)
 8010f14:	681a      	ldr	r2, [r3, #0]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4413      	add	r3, r2
 8010f1a:	693a      	ldr	r2, [r7, #16]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d207      	bcs.n	8010f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010f20:	f006 fac8 	bl	80174b4 <__errno>
 8010f24:	4603      	mov	r3, r0
 8010f26:	220c      	movs	r2, #12
 8010f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8010f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f2e:	e009      	b.n	8010f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010f30:	4b08      	ldr	r3, [pc, #32]	; (8010f54 <_sbrk+0x64>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010f36:	4b07      	ldr	r3, [pc, #28]	; (8010f54 <_sbrk+0x64>)
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	4413      	add	r3, r2
 8010f3e:	4a05      	ldr	r2, [pc, #20]	; (8010f54 <_sbrk+0x64>)
 8010f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8010f42:	68fb      	ldr	r3, [r7, #12]
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3718      	adds	r7, #24
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	20020000 	.word	0x20020000
 8010f50:	00000400 	.word	0x00000400
 8010f54:	2000029c 	.word	0x2000029c
 8010f58:	20000a00 	.word	0x20000a00

08010f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010f60:	4b06      	ldr	r3, [pc, #24]	; (8010f7c <SystemInit+0x20>)
 8010f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f66:	4a05      	ldr	r2, [pc, #20]	; (8010f7c <SystemInit+0x20>)
 8010f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010f70:	bf00      	nop
 8010f72:	46bd      	mov	sp, r7
 8010f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f78:	4770      	bx	lr
 8010f7a:	bf00      	nop
 8010f7c:	e000ed00 	.word	0xe000ed00

08010f80 <consttime_equal>:
#include "sha3.h"
#include "sha512.h"
#include "ge.h"
#include "sc.h"
#include "main.h"
static int consttime_equal(const unsigned char *x, const unsigned char *y) {
 8010f80:	b480      	push	{r7}
 8010f82:	b085      	sub	sp, #20
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
    unsigned char r = 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	73fb      	strb	r3, [r7, #15]

    r = x[0] ^ y[0];
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	781a      	ldrb	r2, [r3, #0]
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	781b      	ldrb	r3, [r3, #0]
 8010f96:	4053      	eors	r3, r2
 8010f98:	73fb      	strb	r3, [r7, #15]
    #define F(i) r |= x[i] ^ y[i]
    F(1);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	781a      	ldrb	r2, [r3, #0]
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	4053      	eors	r3, r2
 8010fa8:	b2da      	uxtb	r2, r3
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
 8010fac:	4313      	orrs	r3, r2
 8010fae:	73fb      	strb	r3, [r7, #15]
    F(2);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	3302      	adds	r3, #2
 8010fb4:	781a      	ldrb	r2, [r3, #0]
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	3302      	adds	r3, #2
 8010fba:	781b      	ldrb	r3, [r3, #0]
 8010fbc:	4053      	eors	r3, r2
 8010fbe:	b2da      	uxtb	r2, r3
 8010fc0:	7bfb      	ldrb	r3, [r7, #15]
 8010fc2:	4313      	orrs	r3, r2
 8010fc4:	73fb      	strb	r3, [r7, #15]
    F(3);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	3303      	adds	r3, #3
 8010fca:	781a      	ldrb	r2, [r3, #0]
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	3303      	adds	r3, #3
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	4053      	eors	r3, r2
 8010fd4:	b2da      	uxtb	r2, r3
 8010fd6:	7bfb      	ldrb	r3, [r7, #15]
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	73fb      	strb	r3, [r7, #15]
    F(4);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	3304      	adds	r3, #4
 8010fe0:	781a      	ldrb	r2, [r3, #0]
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	3304      	adds	r3, #4
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	4053      	eors	r3, r2
 8010fea:	b2da      	uxtb	r2, r3
 8010fec:	7bfb      	ldrb	r3, [r7, #15]
 8010fee:	4313      	orrs	r3, r2
 8010ff0:	73fb      	strb	r3, [r7, #15]
    F(5);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	3305      	adds	r3, #5
 8010ff6:	781a      	ldrb	r2, [r3, #0]
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	3305      	adds	r3, #5
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	4053      	eors	r3, r2
 8011000:	b2da      	uxtb	r2, r3
 8011002:	7bfb      	ldrb	r3, [r7, #15]
 8011004:	4313      	orrs	r3, r2
 8011006:	73fb      	strb	r3, [r7, #15]
    F(6);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	3306      	adds	r3, #6
 801100c:	781a      	ldrb	r2, [r3, #0]
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	3306      	adds	r3, #6
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	4053      	eors	r3, r2
 8011016:	b2da      	uxtb	r2, r3
 8011018:	7bfb      	ldrb	r3, [r7, #15]
 801101a:	4313      	orrs	r3, r2
 801101c:	73fb      	strb	r3, [r7, #15]
    F(7);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	3307      	adds	r3, #7
 8011022:	781a      	ldrb	r2, [r3, #0]
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	3307      	adds	r3, #7
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	4053      	eors	r3, r2
 801102c:	b2da      	uxtb	r2, r3
 801102e:	7bfb      	ldrb	r3, [r7, #15]
 8011030:	4313      	orrs	r3, r2
 8011032:	73fb      	strb	r3, [r7, #15]
    F(8);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	3308      	adds	r3, #8
 8011038:	781a      	ldrb	r2, [r3, #0]
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	3308      	adds	r3, #8
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	4053      	eors	r3, r2
 8011042:	b2da      	uxtb	r2, r3
 8011044:	7bfb      	ldrb	r3, [r7, #15]
 8011046:	4313      	orrs	r3, r2
 8011048:	73fb      	strb	r3, [r7, #15]
    F(9);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	3309      	adds	r3, #9
 801104e:	781a      	ldrb	r2, [r3, #0]
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	3309      	adds	r3, #9
 8011054:	781b      	ldrb	r3, [r3, #0]
 8011056:	4053      	eors	r3, r2
 8011058:	b2da      	uxtb	r2, r3
 801105a:	7bfb      	ldrb	r3, [r7, #15]
 801105c:	4313      	orrs	r3, r2
 801105e:	73fb      	strb	r3, [r7, #15]
    F(10);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	330a      	adds	r3, #10
 8011064:	781a      	ldrb	r2, [r3, #0]
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	330a      	adds	r3, #10
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	4053      	eors	r3, r2
 801106e:	b2da      	uxtb	r2, r3
 8011070:	7bfb      	ldrb	r3, [r7, #15]
 8011072:	4313      	orrs	r3, r2
 8011074:	73fb      	strb	r3, [r7, #15]
    F(11);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	330b      	adds	r3, #11
 801107a:	781a      	ldrb	r2, [r3, #0]
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	330b      	adds	r3, #11
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	4053      	eors	r3, r2
 8011084:	b2da      	uxtb	r2, r3
 8011086:	7bfb      	ldrb	r3, [r7, #15]
 8011088:	4313      	orrs	r3, r2
 801108a:	73fb      	strb	r3, [r7, #15]
    F(12);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	330c      	adds	r3, #12
 8011090:	781a      	ldrb	r2, [r3, #0]
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	330c      	adds	r3, #12
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	4053      	eors	r3, r2
 801109a:	b2da      	uxtb	r2, r3
 801109c:	7bfb      	ldrb	r3, [r7, #15]
 801109e:	4313      	orrs	r3, r2
 80110a0:	73fb      	strb	r3, [r7, #15]
    F(13);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	330d      	adds	r3, #13
 80110a6:	781a      	ldrb	r2, [r3, #0]
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	330d      	adds	r3, #13
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	4053      	eors	r3, r2
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	7bfb      	ldrb	r3, [r7, #15]
 80110b4:	4313      	orrs	r3, r2
 80110b6:	73fb      	strb	r3, [r7, #15]
    F(14);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	330e      	adds	r3, #14
 80110bc:	781a      	ldrb	r2, [r3, #0]
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	330e      	adds	r3, #14
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	4053      	eors	r3, r2
 80110c6:	b2da      	uxtb	r2, r3
 80110c8:	7bfb      	ldrb	r3, [r7, #15]
 80110ca:	4313      	orrs	r3, r2
 80110cc:	73fb      	strb	r3, [r7, #15]
    F(15);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	330f      	adds	r3, #15
 80110d2:	781a      	ldrb	r2, [r3, #0]
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	330f      	adds	r3, #15
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	4053      	eors	r3, r2
 80110dc:	b2da      	uxtb	r2, r3
 80110de:	7bfb      	ldrb	r3, [r7, #15]
 80110e0:	4313      	orrs	r3, r2
 80110e2:	73fb      	strb	r3, [r7, #15]
    F(16);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	3310      	adds	r3, #16
 80110e8:	781a      	ldrb	r2, [r3, #0]
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	3310      	adds	r3, #16
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	4053      	eors	r3, r2
 80110f2:	b2da      	uxtb	r2, r3
 80110f4:	7bfb      	ldrb	r3, [r7, #15]
 80110f6:	4313      	orrs	r3, r2
 80110f8:	73fb      	strb	r3, [r7, #15]
    F(17);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	3311      	adds	r3, #17
 80110fe:	781a      	ldrb	r2, [r3, #0]
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	3311      	adds	r3, #17
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	4053      	eors	r3, r2
 8011108:	b2da      	uxtb	r2, r3
 801110a:	7bfb      	ldrb	r3, [r7, #15]
 801110c:	4313      	orrs	r3, r2
 801110e:	73fb      	strb	r3, [r7, #15]
    F(18);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	3312      	adds	r3, #18
 8011114:	781a      	ldrb	r2, [r3, #0]
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	3312      	adds	r3, #18
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	4053      	eors	r3, r2
 801111e:	b2da      	uxtb	r2, r3
 8011120:	7bfb      	ldrb	r3, [r7, #15]
 8011122:	4313      	orrs	r3, r2
 8011124:	73fb      	strb	r3, [r7, #15]
    F(19);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	3313      	adds	r3, #19
 801112a:	781a      	ldrb	r2, [r3, #0]
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	3313      	adds	r3, #19
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	4053      	eors	r3, r2
 8011134:	b2da      	uxtb	r2, r3
 8011136:	7bfb      	ldrb	r3, [r7, #15]
 8011138:	4313      	orrs	r3, r2
 801113a:	73fb      	strb	r3, [r7, #15]
    F(20);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	3314      	adds	r3, #20
 8011140:	781a      	ldrb	r2, [r3, #0]
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	3314      	adds	r3, #20
 8011146:	781b      	ldrb	r3, [r3, #0]
 8011148:	4053      	eors	r3, r2
 801114a:	b2da      	uxtb	r2, r3
 801114c:	7bfb      	ldrb	r3, [r7, #15]
 801114e:	4313      	orrs	r3, r2
 8011150:	73fb      	strb	r3, [r7, #15]
    F(21);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	3315      	adds	r3, #21
 8011156:	781a      	ldrb	r2, [r3, #0]
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	3315      	adds	r3, #21
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	4053      	eors	r3, r2
 8011160:	b2da      	uxtb	r2, r3
 8011162:	7bfb      	ldrb	r3, [r7, #15]
 8011164:	4313      	orrs	r3, r2
 8011166:	73fb      	strb	r3, [r7, #15]
    F(22);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	3316      	adds	r3, #22
 801116c:	781a      	ldrb	r2, [r3, #0]
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	3316      	adds	r3, #22
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	4053      	eors	r3, r2
 8011176:	b2da      	uxtb	r2, r3
 8011178:	7bfb      	ldrb	r3, [r7, #15]
 801117a:	4313      	orrs	r3, r2
 801117c:	73fb      	strb	r3, [r7, #15]
    F(23);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	3317      	adds	r3, #23
 8011182:	781a      	ldrb	r2, [r3, #0]
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	3317      	adds	r3, #23
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	4053      	eors	r3, r2
 801118c:	b2da      	uxtb	r2, r3
 801118e:	7bfb      	ldrb	r3, [r7, #15]
 8011190:	4313      	orrs	r3, r2
 8011192:	73fb      	strb	r3, [r7, #15]
    F(24);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	3318      	adds	r3, #24
 8011198:	781a      	ldrb	r2, [r3, #0]
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	3318      	adds	r3, #24
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	4053      	eors	r3, r2
 80111a2:	b2da      	uxtb	r2, r3
 80111a4:	7bfb      	ldrb	r3, [r7, #15]
 80111a6:	4313      	orrs	r3, r2
 80111a8:	73fb      	strb	r3, [r7, #15]
    F(25);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	3319      	adds	r3, #25
 80111ae:	781a      	ldrb	r2, [r3, #0]
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	3319      	adds	r3, #25
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	4053      	eors	r3, r2
 80111b8:	b2da      	uxtb	r2, r3
 80111ba:	7bfb      	ldrb	r3, [r7, #15]
 80111bc:	4313      	orrs	r3, r2
 80111be:	73fb      	strb	r3, [r7, #15]
    F(26);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	331a      	adds	r3, #26
 80111c4:	781a      	ldrb	r2, [r3, #0]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	331a      	adds	r3, #26
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	4053      	eors	r3, r2
 80111ce:	b2da      	uxtb	r2, r3
 80111d0:	7bfb      	ldrb	r3, [r7, #15]
 80111d2:	4313      	orrs	r3, r2
 80111d4:	73fb      	strb	r3, [r7, #15]
    F(27);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	331b      	adds	r3, #27
 80111da:	781a      	ldrb	r2, [r3, #0]
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	331b      	adds	r3, #27
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	4053      	eors	r3, r2
 80111e4:	b2da      	uxtb	r2, r3
 80111e6:	7bfb      	ldrb	r3, [r7, #15]
 80111e8:	4313      	orrs	r3, r2
 80111ea:	73fb      	strb	r3, [r7, #15]
    F(28);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	331c      	adds	r3, #28
 80111f0:	781a      	ldrb	r2, [r3, #0]
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	331c      	adds	r3, #28
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	4053      	eors	r3, r2
 80111fa:	b2da      	uxtb	r2, r3
 80111fc:	7bfb      	ldrb	r3, [r7, #15]
 80111fe:	4313      	orrs	r3, r2
 8011200:	73fb      	strb	r3, [r7, #15]
    F(29);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	331d      	adds	r3, #29
 8011206:	781a      	ldrb	r2, [r3, #0]
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	331d      	adds	r3, #29
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	4053      	eors	r3, r2
 8011210:	b2da      	uxtb	r2, r3
 8011212:	7bfb      	ldrb	r3, [r7, #15]
 8011214:	4313      	orrs	r3, r2
 8011216:	73fb      	strb	r3, [r7, #15]
    F(30);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	331e      	adds	r3, #30
 801121c:	781a      	ldrb	r2, [r3, #0]
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	331e      	adds	r3, #30
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	4053      	eors	r3, r2
 8011226:	b2da      	uxtb	r2, r3
 8011228:	7bfb      	ldrb	r3, [r7, #15]
 801122a:	4313      	orrs	r3, r2
 801122c:	73fb      	strb	r3, [r7, #15]
    F(31);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	331f      	adds	r3, #31
 8011232:	781a      	ldrb	r2, [r3, #0]
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	331f      	adds	r3, #31
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	4053      	eors	r3, r2
 801123c:	b2da      	uxtb	r2, r3
 801123e:	7bfb      	ldrb	r3, [r7, #15]
 8011240:	4313      	orrs	r3, r2
 8011242:	73fb      	strb	r3, [r7, #15]
    #undef F

    return !r;
 8011244:	7bfb      	ldrb	r3, [r7, #15]
 8011246:	2b00      	cmp	r3, #0
 8011248:	bf0c      	ite	eq
 801124a:	2301      	moveq	r3, #1
 801124c:	2300      	movne	r3, #0
 801124e:	b2db      	uxtb	r3, r3
}
 8011250:	4618      	mov	r0, r3
 8011252:	3714      	adds	r7, #20
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr

0801125c <ed25519_verify>:

int ed25519_verify(const unsigned char *signature, const unsigned char *message, size_t message_len, const unsigned char *public_key) {
 801125c:	b590      	push	{r4, r7, lr}
 801125e:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8011262:	af00      	add	r7, sp, #0
 8011264:	f107 040c 	add.w	r4, r7, #12
 8011268:	6020      	str	r0, [r4, #0]
 801126a:	f107 0008 	add.w	r0, r7, #8
 801126e:	6001      	str	r1, [r0, #0]
 8011270:	1d39      	adds	r1, r7, #4
 8011272:	600a      	str	r2, [r1, #0]
 8011274:	463a      	mov	r2, r7
 8011276:	6013      	str	r3, [r2, #0]
    unsigned char checker[32];

    ge_p3 A;
    ge_p2 R;

    if (signature[63] & 224) {
 8011278:	f107 030c 	add.w	r3, r7, #12
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	333f      	adds	r3, #63	; 0x3f
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d001      	beq.n	801128e <ed25519_verify+0x32>
        return 0;
 801128a:	2300      	movs	r3, #0
 801128c:	e05d      	b.n	801134a <ed25519_verify+0xee>
    }

    if (ge_frombytes_negate_vartime(&A, public_key) != 0) {
 801128e:	463b      	mov	r3, r7
 8011290:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8011294:	6819      	ldr	r1, [r3, #0]
 8011296:	4610      	mov	r0, r2
 8011298:	f7f7 fdd8 	bl	8008e4c <ge_frombytes_negate_vartime>
 801129c:	4603      	mov	r3, r0
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d001      	beq.n	80112a6 <ed25519_verify+0x4a>
        return 0;
 80112a2:	2300      	movs	r3, #0
 80112a4:	e051      	b.n	801134a <ed25519_verify+0xee>
    }

#ifdef USE_SHA512
    sha512_context hash;
    sha512_init(&hash);
 80112a6:	f107 0310 	add.w	r3, r7, #16
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ff f994 	bl	80105d8 <sha512_init>
    sha512_update(&hash, signature, 32);
 80112b0:	f107 030c 	add.w	r3, r7, #12
 80112b4:	f107 0010 	add.w	r0, r7, #16
 80112b8:	2220      	movs	r2, #32
 80112ba:	6819      	ldr	r1, [r3, #0]
 80112bc:	f7ff f9f8 	bl	80106b0 <sha512_update>
    sha512_update(&hash, public_key, 32);
 80112c0:	463b      	mov	r3, r7
 80112c2:	f107 0010 	add.w	r0, r7, #16
 80112c6:	2220      	movs	r2, #32
 80112c8:	6819      	ldr	r1, [r3, #0]
 80112ca:	f7ff f9f1 	bl	80106b0 <sha512_update>
    sha512_update(&hash, message, message_len);
 80112ce:	1d3a      	adds	r2, r7, #4
 80112d0:	f107 0308 	add.w	r3, r7, #8
 80112d4:	f107 0010 	add.w	r0, r7, #16
 80112d8:	6812      	ldr	r2, [r2, #0]
 80112da:	6819      	ldr	r1, [r3, #0]
 80112dc:	f7ff f9e8 	bl	80106b0 <sha512_update>
    sha512_final(&hash, h);
 80112e0:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80112e4:	f107 0310 	add.w	r3, r7, #16
 80112e8:	4611      	mov	r1, r2
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7ff fa6d 	bl	80107ca <sha512_final>
    sha3_update(&sha3, public_key, 32);
    sha3_update(&sha3, message, message_len);
    sha3_final(h, &sha3);
#endif

    sc_reduce(h);
 80112f0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7f9 f839 	bl	800a36c <sc_reduce>
    ge_double_scalarmult_vartime(&R, h, &A, signature + 32);
 80112fa:	f107 030c 	add.w	r3, r7, #12
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	3320      	adds	r3, #32
 8011302:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8011306:	f507 7106 	add.w	r1, r7, #536	; 0x218
 801130a:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 801130e:	f7f7 fbad 	bl	8008a6c <ge_double_scalarmult_vartime>
    ge_tobytes(checker, &R);
 8011312:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8011316:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801131a:	4611      	mov	r1, r2
 801131c:	4618      	mov	r0, r3
 801131e:	f7f8 f8d5 	bl	80094cc <ge_tobytes>

    if (!consttime_equal(checker, signature)) {
 8011322:	f107 030c 	add.w	r3, r7, #12
 8011326:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801132a:	6819      	ldr	r1, [r3, #0]
 801132c:	4610      	mov	r0, r2
 801132e:	f7ff fe27 	bl	8010f80 <consttime_equal>
 8011332:	4603      	mov	r3, r0
 8011334:	2b00      	cmp	r3, #0
 8011336:	d107      	bne.n	8011348 <ed25519_verify+0xec>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8011338:	2201      	movs	r2, #1
 801133a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801133e:	4805      	ldr	r0, [pc, #20]	; (8011354 <ed25519_verify+0xf8>)
 8011340:	f000 fe24 	bl	8011f8c <HAL_GPIO_WritePin>
        return 0;
 8011344:	2300      	movs	r3, #0
 8011346:	e000      	b.n	801134a <ed25519_verify+0xee>
    }

    return 1;
 8011348:	2301      	movs	r3, #1
}
 801134a:	4618      	mov	r0, r3
 801134c:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 8011350:	46bd      	mov	sp, r7
 8011352:	bd90      	pop	{r4, r7, pc}
 8011354:	40020c00 	.word	0x40020c00

08011358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8011358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011390 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801135c:	480d      	ldr	r0, [pc, #52]	; (8011394 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801135e:	490e      	ldr	r1, [pc, #56]	; (8011398 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8011360:	4a0e      	ldr	r2, [pc, #56]	; (801139c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8011362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011364:	e002      	b.n	801136c <LoopCopyDataInit>

08011366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801136a:	3304      	adds	r3, #4

0801136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011370:	d3f9      	bcc.n	8011366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011372:	4a0b      	ldr	r2, [pc, #44]	; (80113a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8011374:	4c0b      	ldr	r4, [pc, #44]	; (80113a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8011376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011378:	e001      	b.n	801137e <LoopFillZerobss>

0801137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801137c:	3204      	adds	r2, #4

0801137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011380:	d3fb      	bcc.n	801137a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011382:	f7ff fdeb 	bl	8010f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011386:	f006 fa53 	bl	8017830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801138a:	f7f8 fc41 	bl	8009c10 <main>
  bx  lr    
 801138e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8011390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8011394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011398:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 801139c:	0801b0cc 	.word	0x0801b0cc
  ldr r2, =_sbss
 80113a0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80113a4:	200009fc 	.word	0x200009fc

080113a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80113a8:	e7fe      	b.n	80113a8 <ADC_IRQHandler>
	...

080113ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80113b0:	4b0e      	ldr	r3, [pc, #56]	; (80113ec <HAL_Init+0x40>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4a0d      	ldr	r2, [pc, #52]	; (80113ec <HAL_Init+0x40>)
 80113b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80113ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80113bc:	4b0b      	ldr	r3, [pc, #44]	; (80113ec <HAL_Init+0x40>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4a0a      	ldr	r2, [pc, #40]	; (80113ec <HAL_Init+0x40>)
 80113c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80113c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80113c8:	4b08      	ldr	r3, [pc, #32]	; (80113ec <HAL_Init+0x40>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4a07      	ldr	r2, [pc, #28]	; (80113ec <HAL_Init+0x40>)
 80113ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80113d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80113d4:	2003      	movs	r0, #3
 80113d6:	f000 f931 	bl	801163c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80113da:	200f      	movs	r0, #15
 80113dc:	f000 f808 	bl	80113f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80113e0:	f7ff fb6a 	bl	8010ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80113e4:	2300      	movs	r3, #0
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	40023c00 	.word	0x40023c00

080113f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80113f8:	4b12      	ldr	r3, [pc, #72]	; (8011444 <HAL_InitTick+0x54>)
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	4b12      	ldr	r3, [pc, #72]	; (8011448 <HAL_InitTick+0x58>)
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	4619      	mov	r1, r3
 8011402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011406:	fbb3 f3f1 	udiv	r3, r3, r1
 801140a:	fbb2 f3f3 	udiv	r3, r2, r3
 801140e:	4618      	mov	r0, r3
 8011410:	f000 f93b 	bl	801168a <HAL_SYSTICK_Config>
 8011414:	4603      	mov	r3, r0
 8011416:	2b00      	cmp	r3, #0
 8011418:	d001      	beq.n	801141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801141a:	2301      	movs	r3, #1
 801141c:	e00e      	b.n	801143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2b0f      	cmp	r3, #15
 8011422:	d80a      	bhi.n	801143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011424:	2200      	movs	r2, #0
 8011426:	6879      	ldr	r1, [r7, #4]
 8011428:	f04f 30ff 	mov.w	r0, #4294967295
 801142c:	f000 f911 	bl	8011652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011430:	4a06      	ldr	r2, [pc, #24]	; (801144c <HAL_InitTick+0x5c>)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8011436:	2300      	movs	r3, #0
 8011438:	e000      	b.n	801143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801143a:	2301      	movs	r3, #1
}
 801143c:	4618      	mov	r0, r3
 801143e:	3708      	adds	r7, #8
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}
 8011444:	20000020 	.word	0x20000020
 8011448:	20000028 	.word	0x20000028
 801144c:	20000024 	.word	0x20000024

08011450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011450:	b480      	push	{r7}
 8011452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011454:	4b06      	ldr	r3, [pc, #24]	; (8011470 <HAL_IncTick+0x20>)
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	461a      	mov	r2, r3
 801145a:	4b06      	ldr	r3, [pc, #24]	; (8011474 <HAL_IncTick+0x24>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	4413      	add	r3, r2
 8011460:	4a04      	ldr	r2, [pc, #16]	; (8011474 <HAL_IncTick+0x24>)
 8011462:	6013      	str	r3, [r2, #0]
}
 8011464:	bf00      	nop
 8011466:	46bd      	mov	sp, r7
 8011468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146c:	4770      	bx	lr
 801146e:	bf00      	nop
 8011470:	20000028 	.word	0x20000028
 8011474:	20000560 	.word	0x20000560

08011478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011478:	b480      	push	{r7}
 801147a:	af00      	add	r7, sp, #0
  return uwTick;
 801147c:	4b03      	ldr	r3, [pc, #12]	; (801148c <HAL_GetTick+0x14>)
 801147e:	681b      	ldr	r3, [r3, #0]
}
 8011480:	4618      	mov	r0, r3
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr
 801148a:	bf00      	nop
 801148c:	20000560 	.word	0x20000560

08011490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011498:	f7ff ffee 	bl	8011478 <HAL_GetTick>
 801149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114a8:	d005      	beq.n	80114b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80114aa:	4b0a      	ldr	r3, [pc, #40]	; (80114d4 <HAL_Delay+0x44>)
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	461a      	mov	r2, r3
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	4413      	add	r3, r2
 80114b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80114b6:	bf00      	nop
 80114b8:	f7ff ffde 	bl	8011478 <HAL_GetTick>
 80114bc:	4602      	mov	r2, r0
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	68fa      	ldr	r2, [r7, #12]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d8f7      	bhi.n	80114b8 <HAL_Delay+0x28>
  {
  }
}
 80114c8:	bf00      	nop
 80114ca:	bf00      	nop
 80114cc:	3710      	adds	r7, #16
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	bf00      	nop
 80114d4:	20000028 	.word	0x20000028

080114d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80114d8:	b480      	push	{r7}
 80114da:	b085      	sub	sp, #20
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f003 0307 	and.w	r3, r3, #7
 80114e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80114e8:	4b0c      	ldr	r3, [pc, #48]	; (801151c <__NVIC_SetPriorityGrouping+0x44>)
 80114ea:	68db      	ldr	r3, [r3, #12]
 80114ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80114ee:	68ba      	ldr	r2, [r7, #8]
 80114f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80114f4:	4013      	ands	r3, r2
 80114f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801150a:	4a04      	ldr	r2, [pc, #16]	; (801151c <__NVIC_SetPriorityGrouping+0x44>)
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	60d3      	str	r3, [r2, #12]
}
 8011510:	bf00      	nop
 8011512:	3714      	adds	r7, #20
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr
 801151c:	e000ed00 	.word	0xe000ed00

08011520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011520:	b480      	push	{r7}
 8011522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011524:	4b04      	ldr	r3, [pc, #16]	; (8011538 <__NVIC_GetPriorityGrouping+0x18>)
 8011526:	68db      	ldr	r3, [r3, #12]
 8011528:	0a1b      	lsrs	r3, r3, #8
 801152a:	f003 0307 	and.w	r3, r3, #7
}
 801152e:	4618      	mov	r0, r3
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr
 8011538:	e000ed00 	.word	0xe000ed00

0801153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801153c:	b480      	push	{r7}
 801153e:	b083      	sub	sp, #12
 8011540:	af00      	add	r7, sp, #0
 8011542:	4603      	mov	r3, r0
 8011544:	6039      	str	r1, [r7, #0]
 8011546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801154c:	2b00      	cmp	r3, #0
 801154e:	db0a      	blt.n	8011566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	b2da      	uxtb	r2, r3
 8011554:	490c      	ldr	r1, [pc, #48]	; (8011588 <__NVIC_SetPriority+0x4c>)
 8011556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801155a:	0112      	lsls	r2, r2, #4
 801155c:	b2d2      	uxtb	r2, r2
 801155e:	440b      	add	r3, r1
 8011560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011564:	e00a      	b.n	801157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	b2da      	uxtb	r2, r3
 801156a:	4908      	ldr	r1, [pc, #32]	; (801158c <__NVIC_SetPriority+0x50>)
 801156c:	79fb      	ldrb	r3, [r7, #7]
 801156e:	f003 030f 	and.w	r3, r3, #15
 8011572:	3b04      	subs	r3, #4
 8011574:	0112      	lsls	r2, r2, #4
 8011576:	b2d2      	uxtb	r2, r2
 8011578:	440b      	add	r3, r1
 801157a:	761a      	strb	r2, [r3, #24]
}
 801157c:	bf00      	nop
 801157e:	370c      	adds	r7, #12
 8011580:	46bd      	mov	sp, r7
 8011582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011586:	4770      	bx	lr
 8011588:	e000e100 	.word	0xe000e100
 801158c:	e000ed00 	.word	0xe000ed00

08011590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011590:	b480      	push	{r7}
 8011592:	b089      	sub	sp, #36	; 0x24
 8011594:	af00      	add	r7, sp, #0
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f003 0307 	and.w	r3, r3, #7
 80115a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	f1c3 0307 	rsb	r3, r3, #7
 80115aa:	2b04      	cmp	r3, #4
 80115ac:	bf28      	it	cs
 80115ae:	2304      	movcs	r3, #4
 80115b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80115b2:	69fb      	ldr	r3, [r7, #28]
 80115b4:	3304      	adds	r3, #4
 80115b6:	2b06      	cmp	r3, #6
 80115b8:	d902      	bls.n	80115c0 <NVIC_EncodePriority+0x30>
 80115ba:	69fb      	ldr	r3, [r7, #28]
 80115bc:	3b03      	subs	r3, #3
 80115be:	e000      	b.n	80115c2 <NVIC_EncodePriority+0x32>
 80115c0:	2300      	movs	r3, #0
 80115c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80115c4:	f04f 32ff 	mov.w	r2, #4294967295
 80115c8:	69bb      	ldr	r3, [r7, #24]
 80115ca:	fa02 f303 	lsl.w	r3, r2, r3
 80115ce:	43da      	mvns	r2, r3
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	401a      	ands	r2, r3
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80115d8:	f04f 31ff 	mov.w	r1, #4294967295
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	fa01 f303 	lsl.w	r3, r1, r3
 80115e2:	43d9      	mvns	r1, r3
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80115e8:	4313      	orrs	r3, r2
         );
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3724      	adds	r7, #36	; 0x24
 80115ee:	46bd      	mov	sp, r7
 80115f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f4:	4770      	bx	lr
	...

080115f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	3b01      	subs	r3, #1
 8011604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011608:	d301      	bcc.n	801160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801160a:	2301      	movs	r3, #1
 801160c:	e00f      	b.n	801162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801160e:	4a0a      	ldr	r2, [pc, #40]	; (8011638 <SysTick_Config+0x40>)
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	3b01      	subs	r3, #1
 8011614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011616:	210f      	movs	r1, #15
 8011618:	f04f 30ff 	mov.w	r0, #4294967295
 801161c:	f7ff ff8e 	bl	801153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011620:	4b05      	ldr	r3, [pc, #20]	; (8011638 <SysTick_Config+0x40>)
 8011622:	2200      	movs	r2, #0
 8011624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011626:	4b04      	ldr	r3, [pc, #16]	; (8011638 <SysTick_Config+0x40>)
 8011628:	2207      	movs	r2, #7
 801162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801162c:	2300      	movs	r3, #0
}
 801162e:	4618      	mov	r0, r3
 8011630:	3708      	adds	r7, #8
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
 8011636:	bf00      	nop
 8011638:	e000e010 	.word	0xe000e010

0801163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f7ff ff47 	bl	80114d8 <__NVIC_SetPriorityGrouping>
}
 801164a:	bf00      	nop
 801164c:	3708      	adds	r7, #8
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}

08011652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011652:	b580      	push	{r7, lr}
 8011654:	b086      	sub	sp, #24
 8011656:	af00      	add	r7, sp, #0
 8011658:	4603      	mov	r3, r0
 801165a:	60b9      	str	r1, [r7, #8]
 801165c:	607a      	str	r2, [r7, #4]
 801165e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011660:	2300      	movs	r3, #0
 8011662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011664:	f7ff ff5c 	bl	8011520 <__NVIC_GetPriorityGrouping>
 8011668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801166a:	687a      	ldr	r2, [r7, #4]
 801166c:	68b9      	ldr	r1, [r7, #8]
 801166e:	6978      	ldr	r0, [r7, #20]
 8011670:	f7ff ff8e 	bl	8011590 <NVIC_EncodePriority>
 8011674:	4602      	mov	r2, r0
 8011676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801167a:	4611      	mov	r1, r2
 801167c:	4618      	mov	r0, r3
 801167e:	f7ff ff5d 	bl	801153c <__NVIC_SetPriority>
}
 8011682:	bf00      	nop
 8011684:	3718      	adds	r7, #24
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b082      	sub	sp, #8
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f7ff ffb0 	bl	80115f8 <SysTick_Config>
 8011698:	4603      	mov	r3, r0
}
 801169a:	4618      	mov	r0, r3
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
	...

080116a4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b086      	sub	sp, #24
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	60f8      	str	r0, [r7, #12]
 80116ac:	60b9      	str	r1, [r7, #8]
 80116ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80116b2:	2301      	movs	r3, #1
 80116b4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80116b6:	4b23      	ldr	r3, [pc, #140]	; (8011744 <HAL_FLASH_Program+0xa0>)
 80116b8:	7e1b      	ldrb	r3, [r3, #24]
 80116ba:	2b01      	cmp	r3, #1
 80116bc:	d101      	bne.n	80116c2 <HAL_FLASH_Program+0x1e>
 80116be:	2302      	movs	r3, #2
 80116c0:	e03b      	b.n	801173a <HAL_FLASH_Program+0x96>
 80116c2:	4b20      	ldr	r3, [pc, #128]	; (8011744 <HAL_FLASH_Program+0xa0>)
 80116c4:	2201      	movs	r2, #1
 80116c6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80116c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80116cc:	f000 f870 	bl	80117b0 <FLASH_WaitForLastOperation>
 80116d0:	4603      	mov	r3, r0
 80116d2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80116d4:	7dfb      	ldrb	r3, [r7, #23]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d12b      	bne.n	8011732 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d105      	bne.n	80116ec <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80116e0:	783b      	ldrb	r3, [r7, #0]
 80116e2:	4619      	mov	r1, r3
 80116e4:	68b8      	ldr	r0, [r7, #8]
 80116e6:	f000 f91b 	bl	8011920 <FLASH_Program_Byte>
 80116ea:	e016      	b.n	801171a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d105      	bne.n	80116fe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80116f2:	883b      	ldrh	r3, [r7, #0]
 80116f4:	4619      	mov	r1, r3
 80116f6:	68b8      	ldr	r0, [r7, #8]
 80116f8:	f000 f8ee 	bl	80118d8 <FLASH_Program_HalfWord>
 80116fc:	e00d      	b.n	801171a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	2b02      	cmp	r3, #2
 8011702:	d105      	bne.n	8011710 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	4619      	mov	r1, r3
 8011708:	68b8      	ldr	r0, [r7, #8]
 801170a:	f000 f8c3 	bl	8011894 <FLASH_Program_Word>
 801170e:	e004      	b.n	801171a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8011710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011714:	68b8      	ldr	r0, [r7, #8]
 8011716:	f000 f88b 	bl	8011830 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801171a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801171e:	f000 f847 	bl	80117b0 <FLASH_WaitForLastOperation>
 8011722:	4603      	mov	r3, r0
 8011724:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8011726:	4b08      	ldr	r3, [pc, #32]	; (8011748 <HAL_FLASH_Program+0xa4>)
 8011728:	691b      	ldr	r3, [r3, #16]
 801172a:	4a07      	ldr	r2, [pc, #28]	; (8011748 <HAL_FLASH_Program+0xa4>)
 801172c:	f023 0301 	bic.w	r3, r3, #1
 8011730:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8011732:	4b04      	ldr	r3, [pc, #16]	; (8011744 <HAL_FLASH_Program+0xa0>)
 8011734:	2200      	movs	r2, #0
 8011736:	761a      	strb	r2, [r3, #24]
  
  return status;
 8011738:	7dfb      	ldrb	r3, [r7, #23]
}
 801173a:	4618      	mov	r0, r3
 801173c:	3718      	adds	r7, #24
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	20000564 	.word	0x20000564
 8011748:	40023c00 	.word	0x40023c00

0801174c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8011752:	2300      	movs	r3, #0
 8011754:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011756:	4b0b      	ldr	r3, [pc, #44]	; (8011784 <HAL_FLASH_Unlock+0x38>)
 8011758:	691b      	ldr	r3, [r3, #16]
 801175a:	2b00      	cmp	r3, #0
 801175c:	da0b      	bge.n	8011776 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801175e:	4b09      	ldr	r3, [pc, #36]	; (8011784 <HAL_FLASH_Unlock+0x38>)
 8011760:	4a09      	ldr	r2, [pc, #36]	; (8011788 <HAL_FLASH_Unlock+0x3c>)
 8011762:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011764:	4b07      	ldr	r3, [pc, #28]	; (8011784 <HAL_FLASH_Unlock+0x38>)
 8011766:	4a09      	ldr	r2, [pc, #36]	; (801178c <HAL_FLASH_Unlock+0x40>)
 8011768:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801176a:	4b06      	ldr	r3, [pc, #24]	; (8011784 <HAL_FLASH_Unlock+0x38>)
 801176c:	691b      	ldr	r3, [r3, #16]
 801176e:	2b00      	cmp	r3, #0
 8011770:	da01      	bge.n	8011776 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8011772:	2301      	movs	r3, #1
 8011774:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8011776:	79fb      	ldrb	r3, [r7, #7]
}
 8011778:	4618      	mov	r0, r3
 801177a:	370c      	adds	r7, #12
 801177c:	46bd      	mov	sp, r7
 801177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011782:	4770      	bx	lr
 8011784:	40023c00 	.word	0x40023c00
 8011788:	45670123 	.word	0x45670123
 801178c:	cdef89ab 	.word	0xcdef89ab

08011790 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8011790:	b480      	push	{r7}
 8011792:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8011794:	4b05      	ldr	r3, [pc, #20]	; (80117ac <HAL_FLASH_Lock+0x1c>)
 8011796:	691b      	ldr	r3, [r3, #16]
 8011798:	4a04      	ldr	r2, [pc, #16]	; (80117ac <HAL_FLASH_Lock+0x1c>)
 801179a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801179e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80117a0:	2300      	movs	r3, #0
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr
 80117ac:	40023c00 	.word	0x40023c00

080117b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b084      	sub	sp, #16
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80117b8:	2300      	movs	r3, #0
 80117ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80117bc:	4b1a      	ldr	r3, [pc, #104]	; (8011828 <FLASH_WaitForLastOperation+0x78>)
 80117be:	2200      	movs	r2, #0
 80117c0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80117c2:	f7ff fe59 	bl	8011478 <HAL_GetTick>
 80117c6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80117c8:	e010      	b.n	80117ec <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117d0:	d00c      	beq.n	80117ec <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d007      	beq.n	80117e8 <FLASH_WaitForLastOperation+0x38>
 80117d8:	f7ff fe4e 	bl	8011478 <HAL_GetTick>
 80117dc:	4602      	mov	r2, r0
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	1ad3      	subs	r3, r2, r3
 80117e2:	687a      	ldr	r2, [r7, #4]
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d201      	bcs.n	80117ec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80117e8:	2303      	movs	r3, #3
 80117ea:	e019      	b.n	8011820 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80117ec:	4b0f      	ldr	r3, [pc, #60]	; (801182c <FLASH_WaitForLastOperation+0x7c>)
 80117ee:	68db      	ldr	r3, [r3, #12]
 80117f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d1e8      	bne.n	80117ca <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80117f8:	4b0c      	ldr	r3, [pc, #48]	; (801182c <FLASH_WaitForLastOperation+0x7c>)
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	f003 0301 	and.w	r3, r3, #1
 8011800:	2b00      	cmp	r3, #0
 8011802:	d002      	beq.n	801180a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011804:	4b09      	ldr	r3, [pc, #36]	; (801182c <FLASH_WaitForLastOperation+0x7c>)
 8011806:	2201      	movs	r2, #1
 8011808:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801180a:	4b08      	ldr	r3, [pc, #32]	; (801182c <FLASH_WaitForLastOperation+0x7c>)
 801180c:	68db      	ldr	r3, [r3, #12]
 801180e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8011812:	2b00      	cmp	r3, #0
 8011814:	d003      	beq.n	801181e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8011816:	f000 f8a5 	bl	8011964 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801181a:	2301      	movs	r3, #1
 801181c:	e000      	b.n	8011820 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801181e:	2300      	movs	r3, #0
  
}  
 8011820:	4618      	mov	r0, r3
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}
 8011828:	20000564 	.word	0x20000564
 801182c:	40023c00 	.word	0x40023c00

08011830 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8011830:	b480      	push	{r7}
 8011832:	b085      	sub	sp, #20
 8011834:	af00      	add	r7, sp, #0
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801183c:	4b14      	ldr	r3, [pc, #80]	; (8011890 <FLASH_Program_DoubleWord+0x60>)
 801183e:	691b      	ldr	r3, [r3, #16]
 8011840:	4a13      	ldr	r2, [pc, #76]	; (8011890 <FLASH_Program_DoubleWord+0x60>)
 8011842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011846:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8011848:	4b11      	ldr	r3, [pc, #68]	; (8011890 <FLASH_Program_DoubleWord+0x60>)
 801184a:	691b      	ldr	r3, [r3, #16]
 801184c:	4a10      	ldr	r2, [pc, #64]	; (8011890 <FLASH_Program_DoubleWord+0x60>)
 801184e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011852:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011854:	4b0e      	ldr	r3, [pc, #56]	; (8011890 <FLASH_Program_DoubleWord+0x60>)
 8011856:	691b      	ldr	r3, [r3, #16]
 8011858:	4a0d      	ldr	r2, [pc, #52]	; (8011890 <FLASH_Program_DoubleWord+0x60>)
 801185a:	f043 0301 	orr.w	r3, r3, #1
 801185e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	683a      	ldr	r2, [r7, #0]
 8011864:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8011866:	f3bf 8f6f 	isb	sy
}
 801186a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 801186c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011870:	f04f 0200 	mov.w	r2, #0
 8011874:	f04f 0300 	mov.w	r3, #0
 8011878:	000a      	movs	r2, r1
 801187a:	2300      	movs	r3, #0
 801187c:	68f9      	ldr	r1, [r7, #12]
 801187e:	3104      	adds	r1, #4
 8011880:	4613      	mov	r3, r2
 8011882:	600b      	str	r3, [r1, #0]
}
 8011884:	bf00      	nop
 8011886:	3714      	adds	r7, #20
 8011888:	46bd      	mov	sp, r7
 801188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188e:	4770      	bx	lr
 8011890:	40023c00 	.word	0x40023c00

08011894 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8011894:	b480      	push	{r7}
 8011896:	b083      	sub	sp, #12
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801189e:	4b0d      	ldr	r3, [pc, #52]	; (80118d4 <FLASH_Program_Word+0x40>)
 80118a0:	691b      	ldr	r3, [r3, #16]
 80118a2:	4a0c      	ldr	r2, [pc, #48]	; (80118d4 <FLASH_Program_Word+0x40>)
 80118a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80118a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80118aa:	4b0a      	ldr	r3, [pc, #40]	; (80118d4 <FLASH_Program_Word+0x40>)
 80118ac:	691b      	ldr	r3, [r3, #16]
 80118ae:	4a09      	ldr	r2, [pc, #36]	; (80118d4 <FLASH_Program_Word+0x40>)
 80118b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80118b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80118b6:	4b07      	ldr	r3, [pc, #28]	; (80118d4 <FLASH_Program_Word+0x40>)
 80118b8:	691b      	ldr	r3, [r3, #16]
 80118ba:	4a06      	ldr	r2, [pc, #24]	; (80118d4 <FLASH_Program_Word+0x40>)
 80118bc:	f043 0301 	orr.w	r3, r3, #1
 80118c0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	683a      	ldr	r2, [r7, #0]
 80118c6:	601a      	str	r2, [r3, #0]
}
 80118c8:	bf00      	nop
 80118ca:	370c      	adds	r7, #12
 80118cc:	46bd      	mov	sp, r7
 80118ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d2:	4770      	bx	lr
 80118d4:	40023c00 	.word	0x40023c00

080118d8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	460b      	mov	r3, r1
 80118e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80118e4:	4b0d      	ldr	r3, [pc, #52]	; (801191c <FLASH_Program_HalfWord+0x44>)
 80118e6:	691b      	ldr	r3, [r3, #16]
 80118e8:	4a0c      	ldr	r2, [pc, #48]	; (801191c <FLASH_Program_HalfWord+0x44>)
 80118ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80118ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80118f0:	4b0a      	ldr	r3, [pc, #40]	; (801191c <FLASH_Program_HalfWord+0x44>)
 80118f2:	691b      	ldr	r3, [r3, #16]
 80118f4:	4a09      	ldr	r2, [pc, #36]	; (801191c <FLASH_Program_HalfWord+0x44>)
 80118f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80118fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80118fc:	4b07      	ldr	r3, [pc, #28]	; (801191c <FLASH_Program_HalfWord+0x44>)
 80118fe:	691b      	ldr	r3, [r3, #16]
 8011900:	4a06      	ldr	r2, [pc, #24]	; (801191c <FLASH_Program_HalfWord+0x44>)
 8011902:	f043 0301 	orr.w	r3, r3, #1
 8011906:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	887a      	ldrh	r2, [r7, #2]
 801190c:	801a      	strh	r2, [r3, #0]
}
 801190e:	bf00      	nop
 8011910:	370c      	adds	r7, #12
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop
 801191c:	40023c00 	.word	0x40023c00

08011920 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	460b      	mov	r3, r1
 801192a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801192c:	4b0c      	ldr	r3, [pc, #48]	; (8011960 <FLASH_Program_Byte+0x40>)
 801192e:	691b      	ldr	r3, [r3, #16]
 8011930:	4a0b      	ldr	r2, [pc, #44]	; (8011960 <FLASH_Program_Byte+0x40>)
 8011932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011936:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8011938:	4b09      	ldr	r3, [pc, #36]	; (8011960 <FLASH_Program_Byte+0x40>)
 801193a:	4a09      	ldr	r2, [pc, #36]	; (8011960 <FLASH_Program_Byte+0x40>)
 801193c:	691b      	ldr	r3, [r3, #16]
 801193e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011940:	4b07      	ldr	r3, [pc, #28]	; (8011960 <FLASH_Program_Byte+0x40>)
 8011942:	691b      	ldr	r3, [r3, #16]
 8011944:	4a06      	ldr	r2, [pc, #24]	; (8011960 <FLASH_Program_Byte+0x40>)
 8011946:	f043 0301 	orr.w	r3, r3, #1
 801194a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	78fa      	ldrb	r2, [r7, #3]
 8011950:	701a      	strb	r2, [r3, #0]
}
 8011952:	bf00      	nop
 8011954:	370c      	adds	r7, #12
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop
 8011960:	40023c00 	.word	0x40023c00

08011964 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8011964:	b480      	push	{r7}
 8011966:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8011968:	4b27      	ldr	r3, [pc, #156]	; (8011a08 <FLASH_SetErrorCode+0xa4>)
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	f003 0310 	and.w	r3, r3, #16
 8011970:	2b00      	cmp	r3, #0
 8011972:	d008      	beq.n	8011986 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011974:	4b25      	ldr	r3, [pc, #148]	; (8011a0c <FLASH_SetErrorCode+0xa8>)
 8011976:	69db      	ldr	r3, [r3, #28]
 8011978:	f043 0310 	orr.w	r3, r3, #16
 801197c:	4a23      	ldr	r2, [pc, #140]	; (8011a0c <FLASH_SetErrorCode+0xa8>)
 801197e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8011980:	4b21      	ldr	r3, [pc, #132]	; (8011a08 <FLASH_SetErrorCode+0xa4>)
 8011982:	2210      	movs	r2, #16
 8011984:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8011986:	4b20      	ldr	r3, [pc, #128]	; (8011a08 <FLASH_SetErrorCode+0xa4>)
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	f003 0320 	and.w	r3, r3, #32
 801198e:	2b00      	cmp	r3, #0
 8011990:	d008      	beq.n	80119a4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8011992:	4b1e      	ldr	r3, [pc, #120]	; (8011a0c <FLASH_SetErrorCode+0xa8>)
 8011994:	69db      	ldr	r3, [r3, #28]
 8011996:	f043 0308 	orr.w	r3, r3, #8
 801199a:	4a1c      	ldr	r2, [pc, #112]	; (8011a0c <FLASH_SetErrorCode+0xa8>)
 801199c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801199e:	4b1a      	ldr	r3, [pc, #104]	; (8011a08 <FLASH_SetErrorCode+0xa4>)
 80119a0:	2220      	movs	r2, #32
 80119a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80119a4:	4b18      	ldr	r3, [pc, #96]	; (8011a08 <FLASH_SetErrorCode+0xa4>)
 80119a6:	68db      	ldr	r3, [r3, #12]
 80119a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d008      	beq.n	80119c2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80119b0:	4b16      	ldr	r3, [pc, #88]	; (8011a0c <FLASH_SetErrorCode+0xa8>)
 80119b2:	69db      	ldr	r3, [r3, #28]
 80119b4:	f043 0304 	orr.w	r3, r3, #4
 80119b8:	4a14      	ldr	r2, [pc, #80]	; (8011a0c <FLASH_SetErrorCode+0xa8>)
 80119ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80119bc:	4b12      	ldr	r3, [pc, #72]	; (8011a08 <FLASH_SetErrorCode+0xa4>)
 80119be:	2240      	movs	r2, #64	; 0x40
 80119c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80119c2:	4b11      	ldr	r3, [pc, #68]	; (8011a08 <FLASH_SetErrorCode+0xa4>)
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d008      	beq.n	80119e0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80119ce:	4b0f      	ldr	r3, [pc, #60]	; (8011a0c <FLASH_SetErrorCode+0xa8>)
 80119d0:	69db      	ldr	r3, [r3, #28]
 80119d2:	f043 0302 	orr.w	r3, r3, #2
 80119d6:	4a0d      	ldr	r2, [pc, #52]	; (8011a0c <FLASH_SetErrorCode+0xa8>)
 80119d8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80119da:	4b0b      	ldr	r3, [pc, #44]	; (8011a08 <FLASH_SetErrorCode+0xa4>)
 80119dc:	2280      	movs	r2, #128	; 0x80
 80119de:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80119e0:	4b09      	ldr	r3, [pc, #36]	; (8011a08 <FLASH_SetErrorCode+0xa4>)
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	f003 0302 	and.w	r3, r3, #2
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d008      	beq.n	80119fe <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80119ec:	4b07      	ldr	r3, [pc, #28]	; (8011a0c <FLASH_SetErrorCode+0xa8>)
 80119ee:	69db      	ldr	r3, [r3, #28]
 80119f0:	f043 0320 	orr.w	r3, r3, #32
 80119f4:	4a05      	ldr	r2, [pc, #20]	; (8011a0c <FLASH_SetErrorCode+0xa8>)
 80119f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80119f8:	4b03      	ldr	r3, [pc, #12]	; (8011a08 <FLASH_SetErrorCode+0xa4>)
 80119fa:	2202      	movs	r2, #2
 80119fc:	60da      	str	r2, [r3, #12]
  }
}
 80119fe:	bf00      	nop
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr
 8011a08:	40023c00 	.word	0x40023c00
 8011a0c:	20000564 	.word	0x20000564

08011a10 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b084      	sub	sp, #16
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8011a1e:	2300      	movs	r3, #0
 8011a20:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011a22:	4b31      	ldr	r3, [pc, #196]	; (8011ae8 <HAL_FLASHEx_Erase+0xd8>)
 8011a24:	7e1b      	ldrb	r3, [r3, #24]
 8011a26:	2b01      	cmp	r3, #1
 8011a28:	d101      	bne.n	8011a2e <HAL_FLASHEx_Erase+0x1e>
 8011a2a:	2302      	movs	r3, #2
 8011a2c:	e058      	b.n	8011ae0 <HAL_FLASHEx_Erase+0xd0>
 8011a2e:	4b2e      	ldr	r3, [pc, #184]	; (8011ae8 <HAL_FLASHEx_Erase+0xd8>)
 8011a30:	2201      	movs	r2, #1
 8011a32:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011a34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011a38:	f7ff feba 	bl	80117b0 <FLASH_WaitForLastOperation>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8011a40:	7bfb      	ldrb	r3, [r7, #15]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d148      	bne.n	8011ad8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	f04f 32ff 	mov.w	r2, #4294967295
 8011a4c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b01      	cmp	r3, #1
 8011a54:	d115      	bne.n	8011a82 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	691b      	ldr	r3, [r3, #16]
 8011a5a:	b2da      	uxtb	r2, r3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	4619      	mov	r1, r3
 8011a62:	4610      	mov	r0, r2
 8011a64:	f000 f844 	bl	8011af0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011a68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011a6c:	f7ff fea0 	bl	80117b0 <FLASH_WaitForLastOperation>
 8011a70:	4603      	mov	r3, r0
 8011a72:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8011a74:	4b1d      	ldr	r3, [pc, #116]	; (8011aec <HAL_FLASHEx_Erase+0xdc>)
 8011a76:	691b      	ldr	r3, [r3, #16]
 8011a78:	4a1c      	ldr	r2, [pc, #112]	; (8011aec <HAL_FLASHEx_Erase+0xdc>)
 8011a7a:	f023 0304 	bic.w	r3, r3, #4
 8011a7e:	6113      	str	r3, [r2, #16]
 8011a80:	e028      	b.n	8011ad4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	689b      	ldr	r3, [r3, #8]
 8011a86:	60bb      	str	r3, [r7, #8]
 8011a88:	e01c      	b.n	8011ac4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	691b      	ldr	r3, [r3, #16]
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	4619      	mov	r1, r3
 8011a92:	68b8      	ldr	r0, [r7, #8]
 8011a94:	f000 f850 	bl	8011b38 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011a98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011a9c:	f7ff fe88 	bl	80117b0 <FLASH_WaitForLastOperation>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8011aa4:	4b11      	ldr	r3, [pc, #68]	; (8011aec <HAL_FLASHEx_Erase+0xdc>)
 8011aa6:	691b      	ldr	r3, [r3, #16]
 8011aa8:	4a10      	ldr	r2, [pc, #64]	; (8011aec <HAL_FLASHEx_Erase+0xdc>)
 8011aaa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8011aae:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8011ab0:	7bfb      	ldrb	r3, [r7, #15]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d003      	beq.n	8011abe <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	68ba      	ldr	r2, [r7, #8]
 8011aba:	601a      	str	r2, [r3, #0]
          break;
 8011abc:	e00a      	b.n	8011ad4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	60bb      	str	r3, [r7, #8]
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	68da      	ldr	r2, [r3, #12]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	689b      	ldr	r3, [r3, #8]
 8011acc:	4413      	add	r3, r2
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d3da      	bcc.n	8011a8a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8011ad4:	f000 f878 	bl	8011bc8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8011ad8:	4b03      	ldr	r3, [pc, #12]	; (8011ae8 <HAL_FLASHEx_Erase+0xd8>)
 8011ada:	2200      	movs	r2, #0
 8011adc:	761a      	strb	r2, [r3, #24]

  return status;
 8011ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3710      	adds	r7, #16
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	20000564 	.word	0x20000564
 8011aec:	40023c00 	.word	0x40023c00

08011af0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8011af0:	b480      	push	{r7}
 8011af2:	b083      	sub	sp, #12
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	4603      	mov	r3, r0
 8011af8:	6039      	str	r1, [r7, #0]
 8011afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011afc:	4b0d      	ldr	r3, [pc, #52]	; (8011b34 <FLASH_MassErase+0x44>)
 8011afe:	691b      	ldr	r3, [r3, #16]
 8011b00:	4a0c      	ldr	r2, [pc, #48]	; (8011b34 <FLASH_MassErase+0x44>)
 8011b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8011b08:	4b0a      	ldr	r3, [pc, #40]	; (8011b34 <FLASH_MassErase+0x44>)
 8011b0a:	691b      	ldr	r3, [r3, #16]
 8011b0c:	4a09      	ldr	r2, [pc, #36]	; (8011b34 <FLASH_MassErase+0x44>)
 8011b0e:	f043 0304 	orr.w	r3, r3, #4
 8011b12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8011b14:	4b07      	ldr	r3, [pc, #28]	; (8011b34 <FLASH_MassErase+0x44>)
 8011b16:	691a      	ldr	r2, [r3, #16]
 8011b18:	79fb      	ldrb	r3, [r7, #7]
 8011b1a:	021b      	lsls	r3, r3, #8
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	4a05      	ldr	r2, [pc, #20]	; (8011b34 <FLASH_MassErase+0x44>)
 8011b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011b24:	6113      	str	r3, [r2, #16]
}
 8011b26:	bf00      	nop
 8011b28:	370c      	adds	r7, #12
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop
 8011b34:	40023c00 	.word	0x40023c00

08011b38 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b085      	sub	sp, #20
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	460b      	mov	r3, r1
 8011b42:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8011b44:	2300      	movs	r3, #0
 8011b46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8011b48:	78fb      	ldrb	r3, [r7, #3]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d102      	bne.n	8011b54 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	60fb      	str	r3, [r7, #12]
 8011b52:	e010      	b.n	8011b76 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8011b54:	78fb      	ldrb	r3, [r7, #3]
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d103      	bne.n	8011b62 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8011b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b5e:	60fb      	str	r3, [r7, #12]
 8011b60:	e009      	b.n	8011b76 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8011b62:	78fb      	ldrb	r3, [r7, #3]
 8011b64:	2b02      	cmp	r3, #2
 8011b66:	d103      	bne.n	8011b70 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8011b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b6c:	60fb      	str	r3, [r7, #12]
 8011b6e:	e002      	b.n	8011b76 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011b70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011b74:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011b76:	4b13      	ldr	r3, [pc, #76]	; (8011bc4 <FLASH_Erase_Sector+0x8c>)
 8011b78:	691b      	ldr	r3, [r3, #16]
 8011b7a:	4a12      	ldr	r2, [pc, #72]	; (8011bc4 <FLASH_Erase_Sector+0x8c>)
 8011b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8011b82:	4b10      	ldr	r3, [pc, #64]	; (8011bc4 <FLASH_Erase_Sector+0x8c>)
 8011b84:	691a      	ldr	r2, [r3, #16]
 8011b86:	490f      	ldr	r1, [pc, #60]	; (8011bc4 <FLASH_Erase_Sector+0x8c>)
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8011b8e:	4b0d      	ldr	r3, [pc, #52]	; (8011bc4 <FLASH_Erase_Sector+0x8c>)
 8011b90:	691b      	ldr	r3, [r3, #16]
 8011b92:	4a0c      	ldr	r2, [pc, #48]	; (8011bc4 <FLASH_Erase_Sector+0x8c>)
 8011b94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011b98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8011b9a:	4b0a      	ldr	r3, [pc, #40]	; (8011bc4 <FLASH_Erase_Sector+0x8c>)
 8011b9c:	691a      	ldr	r2, [r3, #16]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	00db      	lsls	r3, r3, #3
 8011ba2:	4313      	orrs	r3, r2
 8011ba4:	4a07      	ldr	r2, [pc, #28]	; (8011bc4 <FLASH_Erase_Sector+0x8c>)
 8011ba6:	f043 0302 	orr.w	r3, r3, #2
 8011baa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8011bac:	4b05      	ldr	r3, [pc, #20]	; (8011bc4 <FLASH_Erase_Sector+0x8c>)
 8011bae:	691b      	ldr	r3, [r3, #16]
 8011bb0:	4a04      	ldr	r2, [pc, #16]	; (8011bc4 <FLASH_Erase_Sector+0x8c>)
 8011bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011bb6:	6113      	str	r3, [r2, #16]
}
 8011bb8:	bf00      	nop
 8011bba:	3714      	adds	r7, #20
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr
 8011bc4:	40023c00 	.word	0x40023c00

08011bc8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8011bcc:	4b20      	ldr	r3, [pc, #128]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d017      	beq.n	8011c08 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8011bd8:	4b1d      	ldr	r3, [pc, #116]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	4a1c      	ldr	r2, [pc, #112]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011bde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011be2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8011be4:	4b1a      	ldr	r3, [pc, #104]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	4a19      	ldr	r2, [pc, #100]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011bea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011bee:	6013      	str	r3, [r2, #0]
 8011bf0:	4b17      	ldr	r3, [pc, #92]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	4a16      	ldr	r2, [pc, #88]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011bfa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011bfc:	4b14      	ldr	r3, [pc, #80]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	4a13      	ldr	r2, [pc, #76]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011c06:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8011c08:	4b11      	ldr	r3, [pc, #68]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d017      	beq.n	8011c44 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8011c14:	4b0e      	ldr	r3, [pc, #56]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	4a0d      	ldr	r2, [pc, #52]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011c1e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8011c20:	4b0b      	ldr	r3, [pc, #44]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	4a0a      	ldr	r2, [pc, #40]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011c26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011c2a:	6013      	str	r3, [r2, #0]
 8011c2c:	4b08      	ldr	r3, [pc, #32]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4a07      	ldr	r2, [pc, #28]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011c32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c36:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8011c38:	4b05      	ldr	r3, [pc, #20]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	4a04      	ldr	r2, [pc, #16]	; (8011c50 <FLASH_FlushCaches+0x88>)
 8011c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011c42:	6013      	str	r3, [r2, #0]
  }
}
 8011c44:	bf00      	nop
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr
 8011c4e:	bf00      	nop
 8011c50:	40023c00 	.word	0x40023c00

08011c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b089      	sub	sp, #36	; 0x24
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011c62:	2300      	movs	r3, #0
 8011c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011c66:	2300      	movs	r3, #0
 8011c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	61fb      	str	r3, [r7, #28]
 8011c6e:	e16b      	b.n	8011f48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011c70:	2201      	movs	r2, #1
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	fa02 f303 	lsl.w	r3, r2, r3
 8011c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	697a      	ldr	r2, [r7, #20]
 8011c80:	4013      	ands	r3, r2
 8011c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011c84:	693a      	ldr	r2, [r7, #16]
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	f040 815a 	bne.w	8011f42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	f003 0303 	and.w	r3, r3, #3
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d005      	beq.n	8011ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011ca2:	2b02      	cmp	r3, #2
 8011ca4:	d130      	bne.n	8011d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	689b      	ldr	r3, [r3, #8]
 8011caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	005b      	lsls	r3, r3, #1
 8011cb0:	2203      	movs	r2, #3
 8011cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8011cb6:	43db      	mvns	r3, r3
 8011cb8:	69ba      	ldr	r2, [r7, #24]
 8011cba:	4013      	ands	r3, r2
 8011cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	68da      	ldr	r2, [r3, #12]
 8011cc2:	69fb      	ldr	r3, [r7, #28]
 8011cc4:	005b      	lsls	r3, r3, #1
 8011cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8011cca:	69ba      	ldr	r2, [r7, #24]
 8011ccc:	4313      	orrs	r3, r2
 8011cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	69ba      	ldr	r2, [r7, #24]
 8011cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011cdc:	2201      	movs	r2, #1
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8011ce4:	43db      	mvns	r3, r3
 8011ce6:	69ba      	ldr	r2, [r7, #24]
 8011ce8:	4013      	ands	r3, r2
 8011cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	091b      	lsrs	r3, r3, #4
 8011cf2:	f003 0201 	and.w	r2, r3, #1
 8011cf6:	69fb      	ldr	r3, [r7, #28]
 8011cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8011cfc:	69ba      	ldr	r2, [r7, #24]
 8011cfe:	4313      	orrs	r3, r2
 8011d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	69ba      	ldr	r2, [r7, #24]
 8011d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	f003 0303 	and.w	r3, r3, #3
 8011d10:	2b03      	cmp	r3, #3
 8011d12:	d017      	beq.n	8011d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	68db      	ldr	r3, [r3, #12]
 8011d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011d1a:	69fb      	ldr	r3, [r7, #28]
 8011d1c:	005b      	lsls	r3, r3, #1
 8011d1e:	2203      	movs	r2, #3
 8011d20:	fa02 f303 	lsl.w	r3, r2, r3
 8011d24:	43db      	mvns	r3, r3
 8011d26:	69ba      	ldr	r2, [r7, #24]
 8011d28:	4013      	ands	r3, r2
 8011d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	689a      	ldr	r2, [r3, #8]
 8011d30:	69fb      	ldr	r3, [r7, #28]
 8011d32:	005b      	lsls	r3, r3, #1
 8011d34:	fa02 f303 	lsl.w	r3, r2, r3
 8011d38:	69ba      	ldr	r2, [r7, #24]
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	69ba      	ldr	r2, [r7, #24]
 8011d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	f003 0303 	and.w	r3, r3, #3
 8011d4c:	2b02      	cmp	r3, #2
 8011d4e:	d123      	bne.n	8011d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011d50:	69fb      	ldr	r3, [r7, #28]
 8011d52:	08da      	lsrs	r2, r3, #3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	3208      	adds	r2, #8
 8011d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	f003 0307 	and.w	r3, r3, #7
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	220f      	movs	r2, #15
 8011d68:	fa02 f303 	lsl.w	r3, r2, r3
 8011d6c:	43db      	mvns	r3, r3
 8011d6e:	69ba      	ldr	r2, [r7, #24]
 8011d70:	4013      	ands	r3, r2
 8011d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	691a      	ldr	r2, [r3, #16]
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	f003 0307 	and.w	r3, r3, #7
 8011d7e:	009b      	lsls	r3, r3, #2
 8011d80:	fa02 f303 	lsl.w	r3, r2, r3
 8011d84:	69ba      	ldr	r2, [r7, #24]
 8011d86:	4313      	orrs	r3, r2
 8011d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011d8a:	69fb      	ldr	r3, [r7, #28]
 8011d8c:	08da      	lsrs	r2, r3, #3
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	3208      	adds	r2, #8
 8011d92:	69b9      	ldr	r1, [r7, #24]
 8011d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011d9e:	69fb      	ldr	r3, [r7, #28]
 8011da0:	005b      	lsls	r3, r3, #1
 8011da2:	2203      	movs	r2, #3
 8011da4:	fa02 f303 	lsl.w	r3, r2, r3
 8011da8:	43db      	mvns	r3, r3
 8011daa:	69ba      	ldr	r2, [r7, #24]
 8011dac:	4013      	ands	r3, r2
 8011dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	f003 0203 	and.w	r2, r3, #3
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	005b      	lsls	r3, r3, #1
 8011dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8011dc0:	69ba      	ldr	r2, [r7, #24]
 8011dc2:	4313      	orrs	r3, r2
 8011dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	69ba      	ldr	r2, [r7, #24]
 8011dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	f000 80b4 	beq.w	8011f42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011dda:	2300      	movs	r3, #0
 8011ddc:	60fb      	str	r3, [r7, #12]
 8011dde:	4b60      	ldr	r3, [pc, #384]	; (8011f60 <HAL_GPIO_Init+0x30c>)
 8011de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011de2:	4a5f      	ldr	r2, [pc, #380]	; (8011f60 <HAL_GPIO_Init+0x30c>)
 8011de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011de8:	6453      	str	r3, [r2, #68]	; 0x44
 8011dea:	4b5d      	ldr	r3, [pc, #372]	; (8011f60 <HAL_GPIO_Init+0x30c>)
 8011dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011df2:	60fb      	str	r3, [r7, #12]
 8011df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011df6:	4a5b      	ldr	r2, [pc, #364]	; (8011f64 <HAL_GPIO_Init+0x310>)
 8011df8:	69fb      	ldr	r3, [r7, #28]
 8011dfa:	089b      	lsrs	r3, r3, #2
 8011dfc:	3302      	adds	r3, #2
 8011dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	f003 0303 	and.w	r3, r3, #3
 8011e0a:	009b      	lsls	r3, r3, #2
 8011e0c:	220f      	movs	r2, #15
 8011e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8011e12:	43db      	mvns	r3, r3
 8011e14:	69ba      	ldr	r2, [r7, #24]
 8011e16:	4013      	ands	r3, r2
 8011e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4a52      	ldr	r2, [pc, #328]	; (8011f68 <HAL_GPIO_Init+0x314>)
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d02b      	beq.n	8011e7a <HAL_GPIO_Init+0x226>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	4a51      	ldr	r2, [pc, #324]	; (8011f6c <HAL_GPIO_Init+0x318>)
 8011e26:	4293      	cmp	r3, r2
 8011e28:	d025      	beq.n	8011e76 <HAL_GPIO_Init+0x222>
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	4a50      	ldr	r2, [pc, #320]	; (8011f70 <HAL_GPIO_Init+0x31c>)
 8011e2e:	4293      	cmp	r3, r2
 8011e30:	d01f      	beq.n	8011e72 <HAL_GPIO_Init+0x21e>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	4a4f      	ldr	r2, [pc, #316]	; (8011f74 <HAL_GPIO_Init+0x320>)
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d019      	beq.n	8011e6e <HAL_GPIO_Init+0x21a>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4a4e      	ldr	r2, [pc, #312]	; (8011f78 <HAL_GPIO_Init+0x324>)
 8011e3e:	4293      	cmp	r3, r2
 8011e40:	d013      	beq.n	8011e6a <HAL_GPIO_Init+0x216>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	4a4d      	ldr	r2, [pc, #308]	; (8011f7c <HAL_GPIO_Init+0x328>)
 8011e46:	4293      	cmp	r3, r2
 8011e48:	d00d      	beq.n	8011e66 <HAL_GPIO_Init+0x212>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	4a4c      	ldr	r2, [pc, #304]	; (8011f80 <HAL_GPIO_Init+0x32c>)
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	d007      	beq.n	8011e62 <HAL_GPIO_Init+0x20e>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	4a4b      	ldr	r2, [pc, #300]	; (8011f84 <HAL_GPIO_Init+0x330>)
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d101      	bne.n	8011e5e <HAL_GPIO_Init+0x20a>
 8011e5a:	2307      	movs	r3, #7
 8011e5c:	e00e      	b.n	8011e7c <HAL_GPIO_Init+0x228>
 8011e5e:	2308      	movs	r3, #8
 8011e60:	e00c      	b.n	8011e7c <HAL_GPIO_Init+0x228>
 8011e62:	2306      	movs	r3, #6
 8011e64:	e00a      	b.n	8011e7c <HAL_GPIO_Init+0x228>
 8011e66:	2305      	movs	r3, #5
 8011e68:	e008      	b.n	8011e7c <HAL_GPIO_Init+0x228>
 8011e6a:	2304      	movs	r3, #4
 8011e6c:	e006      	b.n	8011e7c <HAL_GPIO_Init+0x228>
 8011e6e:	2303      	movs	r3, #3
 8011e70:	e004      	b.n	8011e7c <HAL_GPIO_Init+0x228>
 8011e72:	2302      	movs	r3, #2
 8011e74:	e002      	b.n	8011e7c <HAL_GPIO_Init+0x228>
 8011e76:	2301      	movs	r3, #1
 8011e78:	e000      	b.n	8011e7c <HAL_GPIO_Init+0x228>
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	69fa      	ldr	r2, [r7, #28]
 8011e7e:	f002 0203 	and.w	r2, r2, #3
 8011e82:	0092      	lsls	r2, r2, #2
 8011e84:	4093      	lsls	r3, r2
 8011e86:	69ba      	ldr	r2, [r7, #24]
 8011e88:	4313      	orrs	r3, r2
 8011e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011e8c:	4935      	ldr	r1, [pc, #212]	; (8011f64 <HAL_GPIO_Init+0x310>)
 8011e8e:	69fb      	ldr	r3, [r7, #28]
 8011e90:	089b      	lsrs	r3, r3, #2
 8011e92:	3302      	adds	r3, #2
 8011e94:	69ba      	ldr	r2, [r7, #24]
 8011e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011e9a:	4b3b      	ldr	r3, [pc, #236]	; (8011f88 <HAL_GPIO_Init+0x334>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	43db      	mvns	r3, r3
 8011ea4:	69ba      	ldr	r2, [r7, #24]
 8011ea6:	4013      	ands	r3, r2
 8011ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d003      	beq.n	8011ebe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8011eb6:	69ba      	ldr	r2, [r7, #24]
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011ebe:	4a32      	ldr	r2, [pc, #200]	; (8011f88 <HAL_GPIO_Init+0x334>)
 8011ec0:	69bb      	ldr	r3, [r7, #24]
 8011ec2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011ec4:	4b30      	ldr	r3, [pc, #192]	; (8011f88 <HAL_GPIO_Init+0x334>)
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	43db      	mvns	r3, r3
 8011ece:	69ba      	ldr	r2, [r7, #24]
 8011ed0:	4013      	ands	r3, r2
 8011ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d003      	beq.n	8011ee8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8011ee0:	69ba      	ldr	r2, [r7, #24]
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	4313      	orrs	r3, r2
 8011ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011ee8:	4a27      	ldr	r2, [pc, #156]	; (8011f88 <HAL_GPIO_Init+0x334>)
 8011eea:	69bb      	ldr	r3, [r7, #24]
 8011eec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011eee:	4b26      	ldr	r3, [pc, #152]	; (8011f88 <HAL_GPIO_Init+0x334>)
 8011ef0:	689b      	ldr	r3, [r3, #8]
 8011ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011ef4:	693b      	ldr	r3, [r7, #16]
 8011ef6:	43db      	mvns	r3, r3
 8011ef8:	69ba      	ldr	r2, [r7, #24]
 8011efa:	4013      	ands	r3, r2
 8011efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d003      	beq.n	8011f12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8011f0a:	69ba      	ldr	r2, [r7, #24]
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	4313      	orrs	r3, r2
 8011f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011f12:	4a1d      	ldr	r2, [pc, #116]	; (8011f88 <HAL_GPIO_Init+0x334>)
 8011f14:	69bb      	ldr	r3, [r7, #24]
 8011f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011f18:	4b1b      	ldr	r3, [pc, #108]	; (8011f88 <HAL_GPIO_Init+0x334>)
 8011f1a:	68db      	ldr	r3, [r3, #12]
 8011f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	43db      	mvns	r3, r3
 8011f22:	69ba      	ldr	r2, [r7, #24]
 8011f24:	4013      	ands	r3, r2
 8011f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d003      	beq.n	8011f3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8011f34:	69ba      	ldr	r2, [r7, #24]
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	4313      	orrs	r3, r2
 8011f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011f3c:	4a12      	ldr	r2, [pc, #72]	; (8011f88 <HAL_GPIO_Init+0x334>)
 8011f3e:	69bb      	ldr	r3, [r7, #24]
 8011f40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011f42:	69fb      	ldr	r3, [r7, #28]
 8011f44:	3301      	adds	r3, #1
 8011f46:	61fb      	str	r3, [r7, #28]
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	2b0f      	cmp	r3, #15
 8011f4c:	f67f ae90 	bls.w	8011c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011f50:	bf00      	nop
 8011f52:	bf00      	nop
 8011f54:	3724      	adds	r7, #36	; 0x24
 8011f56:	46bd      	mov	sp, r7
 8011f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5c:	4770      	bx	lr
 8011f5e:	bf00      	nop
 8011f60:	40023800 	.word	0x40023800
 8011f64:	40013800 	.word	0x40013800
 8011f68:	40020000 	.word	0x40020000
 8011f6c:	40020400 	.word	0x40020400
 8011f70:	40020800 	.word	0x40020800
 8011f74:	40020c00 	.word	0x40020c00
 8011f78:	40021000 	.word	0x40021000
 8011f7c:	40021400 	.word	0x40021400
 8011f80:	40021800 	.word	0x40021800
 8011f84:	40021c00 	.word	0x40021c00
 8011f88:	40013c00 	.word	0x40013c00

08011f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b083      	sub	sp, #12
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	460b      	mov	r3, r1
 8011f96:	807b      	strh	r3, [r7, #2]
 8011f98:	4613      	mov	r3, r2
 8011f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011f9c:	787b      	ldrb	r3, [r7, #1]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d003      	beq.n	8011faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011fa2:	887a      	ldrh	r2, [r7, #2]
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011fa8:	e003      	b.n	8011fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011faa:	887b      	ldrh	r3, [r7, #2]
 8011fac:	041a      	lsls	r2, r3, #16
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	619a      	str	r2, [r3, #24]
}
 8011fb2:	bf00      	nop
 8011fb4:	370c      	adds	r7, #12
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr
	...

08011fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b086      	sub	sp, #24
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d101      	bne.n	8011fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011fce:	2301      	movs	r3, #1
 8011fd0:	e264      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f003 0301 	and.w	r3, r3, #1
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d075      	beq.n	80120ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011fde:	4ba3      	ldr	r3, [pc, #652]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8011fe0:	689b      	ldr	r3, [r3, #8]
 8011fe2:	f003 030c 	and.w	r3, r3, #12
 8011fe6:	2b04      	cmp	r3, #4
 8011fe8:	d00c      	beq.n	8012004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011fea:	4ba0      	ldr	r3, [pc, #640]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8011fec:	689b      	ldr	r3, [r3, #8]
 8011fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011ff2:	2b08      	cmp	r3, #8
 8011ff4:	d112      	bne.n	801201c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011ff6:	4b9d      	ldr	r3, [pc, #628]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012002:	d10b      	bne.n	801201c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012004:	4b99      	ldr	r3, [pc, #612]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801200c:	2b00      	cmp	r3, #0
 801200e:	d05b      	beq.n	80120c8 <HAL_RCC_OscConfig+0x108>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	685b      	ldr	r3, [r3, #4]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d157      	bne.n	80120c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012018:	2301      	movs	r3, #1
 801201a:	e23f      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012024:	d106      	bne.n	8012034 <HAL_RCC_OscConfig+0x74>
 8012026:	4b91      	ldr	r3, [pc, #580]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	4a90      	ldr	r2, [pc, #576]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 801202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012030:	6013      	str	r3, [r2, #0]
 8012032:	e01d      	b.n	8012070 <HAL_RCC_OscConfig+0xb0>
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	685b      	ldr	r3, [r3, #4]
 8012038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801203c:	d10c      	bne.n	8012058 <HAL_RCC_OscConfig+0x98>
 801203e:	4b8b      	ldr	r3, [pc, #556]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	4a8a      	ldr	r2, [pc, #552]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012048:	6013      	str	r3, [r2, #0]
 801204a:	4b88      	ldr	r3, [pc, #544]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	4a87      	ldr	r2, [pc, #540]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012054:	6013      	str	r3, [r2, #0]
 8012056:	e00b      	b.n	8012070 <HAL_RCC_OscConfig+0xb0>
 8012058:	4b84      	ldr	r3, [pc, #528]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	4a83      	ldr	r2, [pc, #524]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 801205e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012062:	6013      	str	r3, [r2, #0]
 8012064:	4b81      	ldr	r3, [pc, #516]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	4a80      	ldr	r2, [pc, #512]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 801206a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801206e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d013      	beq.n	80120a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012078:	f7ff f9fe 	bl	8011478 <HAL_GetTick>
 801207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801207e:	e008      	b.n	8012092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012080:	f7ff f9fa 	bl	8011478 <HAL_GetTick>
 8012084:	4602      	mov	r2, r0
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	1ad3      	subs	r3, r2, r3
 801208a:	2b64      	cmp	r3, #100	; 0x64
 801208c:	d901      	bls.n	8012092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801208e:	2303      	movs	r3, #3
 8012090:	e204      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012092:	4b76      	ldr	r3, [pc, #472]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801209a:	2b00      	cmp	r3, #0
 801209c:	d0f0      	beq.n	8012080 <HAL_RCC_OscConfig+0xc0>
 801209e:	e014      	b.n	80120ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80120a0:	f7ff f9ea 	bl	8011478 <HAL_GetTick>
 80120a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80120a6:	e008      	b.n	80120ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80120a8:	f7ff f9e6 	bl	8011478 <HAL_GetTick>
 80120ac:	4602      	mov	r2, r0
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	2b64      	cmp	r3, #100	; 0x64
 80120b4:	d901      	bls.n	80120ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80120b6:	2303      	movs	r3, #3
 80120b8:	e1f0      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80120ba:	4b6c      	ldr	r3, [pc, #432]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d1f0      	bne.n	80120a8 <HAL_RCC_OscConfig+0xe8>
 80120c6:	e000      	b.n	80120ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80120c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f003 0302 	and.w	r3, r3, #2
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d063      	beq.n	801219e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80120d6:	4b65      	ldr	r3, [pc, #404]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 80120d8:	689b      	ldr	r3, [r3, #8]
 80120da:	f003 030c 	and.w	r3, r3, #12
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d00b      	beq.n	80120fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80120e2:	4b62      	ldr	r3, [pc, #392]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 80120e4:	689b      	ldr	r3, [r3, #8]
 80120e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80120ea:	2b08      	cmp	r3, #8
 80120ec:	d11c      	bne.n	8012128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80120ee:	4b5f      	ldr	r3, [pc, #380]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d116      	bne.n	8012128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80120fa:	4b5c      	ldr	r3, [pc, #368]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	f003 0302 	and.w	r3, r3, #2
 8012102:	2b00      	cmp	r3, #0
 8012104:	d005      	beq.n	8012112 <HAL_RCC_OscConfig+0x152>
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	2b01      	cmp	r3, #1
 801210c:	d001      	beq.n	8012112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801210e:	2301      	movs	r3, #1
 8012110:	e1c4      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012112:	4b56      	ldr	r3, [pc, #344]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	691b      	ldr	r3, [r3, #16]
 801211e:	00db      	lsls	r3, r3, #3
 8012120:	4952      	ldr	r1, [pc, #328]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012122:	4313      	orrs	r3, r2
 8012124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012126:	e03a      	b.n	801219e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	68db      	ldr	r3, [r3, #12]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d020      	beq.n	8012172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012130:	4b4f      	ldr	r3, [pc, #316]	; (8012270 <HAL_RCC_OscConfig+0x2b0>)
 8012132:	2201      	movs	r2, #1
 8012134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012136:	f7ff f99f 	bl	8011478 <HAL_GetTick>
 801213a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801213c:	e008      	b.n	8012150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801213e:	f7ff f99b 	bl	8011478 <HAL_GetTick>
 8012142:	4602      	mov	r2, r0
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	1ad3      	subs	r3, r2, r3
 8012148:	2b02      	cmp	r3, #2
 801214a:	d901      	bls.n	8012150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801214c:	2303      	movs	r3, #3
 801214e:	e1a5      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012150:	4b46      	ldr	r3, [pc, #280]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f003 0302 	and.w	r3, r3, #2
 8012158:	2b00      	cmp	r3, #0
 801215a:	d0f0      	beq.n	801213e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801215c:	4b43      	ldr	r3, [pc, #268]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	691b      	ldr	r3, [r3, #16]
 8012168:	00db      	lsls	r3, r3, #3
 801216a:	4940      	ldr	r1, [pc, #256]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 801216c:	4313      	orrs	r3, r2
 801216e:	600b      	str	r3, [r1, #0]
 8012170:	e015      	b.n	801219e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012172:	4b3f      	ldr	r3, [pc, #252]	; (8012270 <HAL_RCC_OscConfig+0x2b0>)
 8012174:	2200      	movs	r2, #0
 8012176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012178:	f7ff f97e 	bl	8011478 <HAL_GetTick>
 801217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801217e:	e008      	b.n	8012192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012180:	f7ff f97a 	bl	8011478 <HAL_GetTick>
 8012184:	4602      	mov	r2, r0
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	1ad3      	subs	r3, r2, r3
 801218a:	2b02      	cmp	r3, #2
 801218c:	d901      	bls.n	8012192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801218e:	2303      	movs	r3, #3
 8012190:	e184      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012192:	4b36      	ldr	r3, [pc, #216]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	f003 0302 	and.w	r3, r3, #2
 801219a:	2b00      	cmp	r3, #0
 801219c:	d1f0      	bne.n	8012180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f003 0308 	and.w	r3, r3, #8
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d030      	beq.n	801220c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	695b      	ldr	r3, [r3, #20]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d016      	beq.n	80121e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80121b2:	4b30      	ldr	r3, [pc, #192]	; (8012274 <HAL_RCC_OscConfig+0x2b4>)
 80121b4:	2201      	movs	r2, #1
 80121b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80121b8:	f7ff f95e 	bl	8011478 <HAL_GetTick>
 80121bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80121be:	e008      	b.n	80121d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80121c0:	f7ff f95a 	bl	8011478 <HAL_GetTick>
 80121c4:	4602      	mov	r2, r0
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	1ad3      	subs	r3, r2, r3
 80121ca:	2b02      	cmp	r3, #2
 80121cc:	d901      	bls.n	80121d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80121ce:	2303      	movs	r3, #3
 80121d0:	e164      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80121d2:	4b26      	ldr	r3, [pc, #152]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 80121d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121d6:	f003 0302 	and.w	r3, r3, #2
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d0f0      	beq.n	80121c0 <HAL_RCC_OscConfig+0x200>
 80121de:	e015      	b.n	801220c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80121e0:	4b24      	ldr	r3, [pc, #144]	; (8012274 <HAL_RCC_OscConfig+0x2b4>)
 80121e2:	2200      	movs	r2, #0
 80121e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80121e6:	f7ff f947 	bl	8011478 <HAL_GetTick>
 80121ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80121ec:	e008      	b.n	8012200 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80121ee:	f7ff f943 	bl	8011478 <HAL_GetTick>
 80121f2:	4602      	mov	r2, r0
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	1ad3      	subs	r3, r2, r3
 80121f8:	2b02      	cmp	r3, #2
 80121fa:	d901      	bls.n	8012200 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80121fc:	2303      	movs	r3, #3
 80121fe:	e14d      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012200:	4b1a      	ldr	r3, [pc, #104]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012204:	f003 0302 	and.w	r3, r3, #2
 8012208:	2b00      	cmp	r3, #0
 801220a:	d1f0      	bne.n	80121ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	f003 0304 	and.w	r3, r3, #4
 8012214:	2b00      	cmp	r3, #0
 8012216:	f000 80a0 	beq.w	801235a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801221a:	2300      	movs	r3, #0
 801221c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801221e:	4b13      	ldr	r3, [pc, #76]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012226:	2b00      	cmp	r3, #0
 8012228:	d10f      	bne.n	801224a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801222a:	2300      	movs	r3, #0
 801222c:	60bb      	str	r3, [r7, #8]
 801222e:	4b0f      	ldr	r3, [pc, #60]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012232:	4a0e      	ldr	r2, [pc, #56]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 8012234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012238:	6413      	str	r3, [r2, #64]	; 0x40
 801223a:	4b0c      	ldr	r3, [pc, #48]	; (801226c <HAL_RCC_OscConfig+0x2ac>)
 801223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012242:	60bb      	str	r3, [r7, #8]
 8012244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012246:	2301      	movs	r3, #1
 8012248:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801224a:	4b0b      	ldr	r3, [pc, #44]	; (8012278 <HAL_RCC_OscConfig+0x2b8>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012252:	2b00      	cmp	r3, #0
 8012254:	d121      	bne.n	801229a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012256:	4b08      	ldr	r3, [pc, #32]	; (8012278 <HAL_RCC_OscConfig+0x2b8>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	4a07      	ldr	r2, [pc, #28]	; (8012278 <HAL_RCC_OscConfig+0x2b8>)
 801225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012262:	f7ff f909 	bl	8011478 <HAL_GetTick>
 8012266:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012268:	e011      	b.n	801228e <HAL_RCC_OscConfig+0x2ce>
 801226a:	bf00      	nop
 801226c:	40023800 	.word	0x40023800
 8012270:	42470000 	.word	0x42470000
 8012274:	42470e80 	.word	0x42470e80
 8012278:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801227c:	f7ff f8fc 	bl	8011478 <HAL_GetTick>
 8012280:	4602      	mov	r2, r0
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	1ad3      	subs	r3, r2, r3
 8012286:	2b02      	cmp	r3, #2
 8012288:	d901      	bls.n	801228e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801228a:	2303      	movs	r3, #3
 801228c:	e106      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801228e:	4b85      	ldr	r3, [pc, #532]	; (80124a4 <HAL_RCC_OscConfig+0x4e4>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012296:	2b00      	cmp	r3, #0
 8012298:	d0f0      	beq.n	801227c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	689b      	ldr	r3, [r3, #8]
 801229e:	2b01      	cmp	r3, #1
 80122a0:	d106      	bne.n	80122b0 <HAL_RCC_OscConfig+0x2f0>
 80122a2:	4b81      	ldr	r3, [pc, #516]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80122a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122a6:	4a80      	ldr	r2, [pc, #512]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80122a8:	f043 0301 	orr.w	r3, r3, #1
 80122ac:	6713      	str	r3, [r2, #112]	; 0x70
 80122ae:	e01c      	b.n	80122ea <HAL_RCC_OscConfig+0x32a>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	689b      	ldr	r3, [r3, #8]
 80122b4:	2b05      	cmp	r3, #5
 80122b6:	d10c      	bne.n	80122d2 <HAL_RCC_OscConfig+0x312>
 80122b8:	4b7b      	ldr	r3, [pc, #492]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80122ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122bc:	4a7a      	ldr	r2, [pc, #488]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80122be:	f043 0304 	orr.w	r3, r3, #4
 80122c2:	6713      	str	r3, [r2, #112]	; 0x70
 80122c4:	4b78      	ldr	r3, [pc, #480]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80122c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122c8:	4a77      	ldr	r2, [pc, #476]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80122ca:	f043 0301 	orr.w	r3, r3, #1
 80122ce:	6713      	str	r3, [r2, #112]	; 0x70
 80122d0:	e00b      	b.n	80122ea <HAL_RCC_OscConfig+0x32a>
 80122d2:	4b75      	ldr	r3, [pc, #468]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80122d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122d6:	4a74      	ldr	r2, [pc, #464]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80122d8:	f023 0301 	bic.w	r3, r3, #1
 80122dc:	6713      	str	r3, [r2, #112]	; 0x70
 80122de:	4b72      	ldr	r3, [pc, #456]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80122e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122e2:	4a71      	ldr	r2, [pc, #452]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80122e4:	f023 0304 	bic.w	r3, r3, #4
 80122e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	689b      	ldr	r3, [r3, #8]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d015      	beq.n	801231e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80122f2:	f7ff f8c1 	bl	8011478 <HAL_GetTick>
 80122f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80122f8:	e00a      	b.n	8012310 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80122fa:	f7ff f8bd 	bl	8011478 <HAL_GetTick>
 80122fe:	4602      	mov	r2, r0
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	1ad3      	subs	r3, r2, r3
 8012304:	f241 3288 	movw	r2, #5000	; 0x1388
 8012308:	4293      	cmp	r3, r2
 801230a:	d901      	bls.n	8012310 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801230c:	2303      	movs	r3, #3
 801230e:	e0c5      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012310:	4b65      	ldr	r3, [pc, #404]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 8012312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012314:	f003 0302 	and.w	r3, r3, #2
 8012318:	2b00      	cmp	r3, #0
 801231a:	d0ee      	beq.n	80122fa <HAL_RCC_OscConfig+0x33a>
 801231c:	e014      	b.n	8012348 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801231e:	f7ff f8ab 	bl	8011478 <HAL_GetTick>
 8012322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012324:	e00a      	b.n	801233c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012326:	f7ff f8a7 	bl	8011478 <HAL_GetTick>
 801232a:	4602      	mov	r2, r0
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	1ad3      	subs	r3, r2, r3
 8012330:	f241 3288 	movw	r2, #5000	; 0x1388
 8012334:	4293      	cmp	r3, r2
 8012336:	d901      	bls.n	801233c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012338:	2303      	movs	r3, #3
 801233a:	e0af      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801233c:	4b5a      	ldr	r3, [pc, #360]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 801233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012340:	f003 0302 	and.w	r3, r3, #2
 8012344:	2b00      	cmp	r3, #0
 8012346:	d1ee      	bne.n	8012326 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012348:	7dfb      	ldrb	r3, [r7, #23]
 801234a:	2b01      	cmp	r3, #1
 801234c:	d105      	bne.n	801235a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801234e:	4b56      	ldr	r3, [pc, #344]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 8012350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012352:	4a55      	ldr	r2, [pc, #340]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 8012354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012358:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	699b      	ldr	r3, [r3, #24]
 801235e:	2b00      	cmp	r3, #0
 8012360:	f000 809b 	beq.w	801249a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012364:	4b50      	ldr	r3, [pc, #320]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 8012366:	689b      	ldr	r3, [r3, #8]
 8012368:	f003 030c 	and.w	r3, r3, #12
 801236c:	2b08      	cmp	r3, #8
 801236e:	d05c      	beq.n	801242a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	699b      	ldr	r3, [r3, #24]
 8012374:	2b02      	cmp	r3, #2
 8012376:	d141      	bne.n	80123fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012378:	4b4c      	ldr	r3, [pc, #304]	; (80124ac <HAL_RCC_OscConfig+0x4ec>)
 801237a:	2200      	movs	r2, #0
 801237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801237e:	f7ff f87b 	bl	8011478 <HAL_GetTick>
 8012382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012384:	e008      	b.n	8012398 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012386:	f7ff f877 	bl	8011478 <HAL_GetTick>
 801238a:	4602      	mov	r2, r0
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	1ad3      	subs	r3, r2, r3
 8012390:	2b02      	cmp	r3, #2
 8012392:	d901      	bls.n	8012398 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012394:	2303      	movs	r3, #3
 8012396:	e081      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012398:	4b43      	ldr	r3, [pc, #268]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d1f0      	bne.n	8012386 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	69da      	ldr	r2, [r3, #28]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6a1b      	ldr	r3, [r3, #32]
 80123ac:	431a      	orrs	r2, r3
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123b2:	019b      	lsls	r3, r3, #6
 80123b4:	431a      	orrs	r2, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123ba:	085b      	lsrs	r3, r3, #1
 80123bc:	3b01      	subs	r3, #1
 80123be:	041b      	lsls	r3, r3, #16
 80123c0:	431a      	orrs	r2, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123c6:	061b      	lsls	r3, r3, #24
 80123c8:	4937      	ldr	r1, [pc, #220]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80123ca:	4313      	orrs	r3, r2
 80123cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80123ce:	4b37      	ldr	r3, [pc, #220]	; (80124ac <HAL_RCC_OscConfig+0x4ec>)
 80123d0:	2201      	movs	r2, #1
 80123d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80123d4:	f7ff f850 	bl	8011478 <HAL_GetTick>
 80123d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80123da:	e008      	b.n	80123ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80123dc:	f7ff f84c 	bl	8011478 <HAL_GetTick>
 80123e0:	4602      	mov	r2, r0
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	1ad3      	subs	r3, r2, r3
 80123e6:	2b02      	cmp	r3, #2
 80123e8:	d901      	bls.n	80123ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80123ea:	2303      	movs	r3, #3
 80123ec:	e056      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80123ee:	4b2e      	ldr	r3, [pc, #184]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d0f0      	beq.n	80123dc <HAL_RCC_OscConfig+0x41c>
 80123fa:	e04e      	b.n	801249a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80123fc:	4b2b      	ldr	r3, [pc, #172]	; (80124ac <HAL_RCC_OscConfig+0x4ec>)
 80123fe:	2200      	movs	r2, #0
 8012400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012402:	f7ff f839 	bl	8011478 <HAL_GetTick>
 8012406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012408:	e008      	b.n	801241c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801240a:	f7ff f835 	bl	8011478 <HAL_GetTick>
 801240e:	4602      	mov	r2, r0
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	1ad3      	subs	r3, r2, r3
 8012414:	2b02      	cmp	r3, #2
 8012416:	d901      	bls.n	801241c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012418:	2303      	movs	r3, #3
 801241a:	e03f      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801241c:	4b22      	ldr	r3, [pc, #136]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012424:	2b00      	cmp	r3, #0
 8012426:	d1f0      	bne.n	801240a <HAL_RCC_OscConfig+0x44a>
 8012428:	e037      	b.n	801249a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	699b      	ldr	r3, [r3, #24]
 801242e:	2b01      	cmp	r3, #1
 8012430:	d101      	bne.n	8012436 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8012432:	2301      	movs	r3, #1
 8012434:	e032      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012436:	4b1c      	ldr	r3, [pc, #112]	; (80124a8 <HAL_RCC_OscConfig+0x4e8>)
 8012438:	685b      	ldr	r3, [r3, #4]
 801243a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	699b      	ldr	r3, [r3, #24]
 8012440:	2b01      	cmp	r3, #1
 8012442:	d028      	beq.n	8012496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801244e:	429a      	cmp	r2, r3
 8012450:	d121      	bne.n	8012496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801245c:	429a      	cmp	r2, r3
 801245e:	d11a      	bne.n	8012496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012466:	4013      	ands	r3, r2
 8012468:	687a      	ldr	r2, [r7, #4]
 801246a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801246c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801246e:	4293      	cmp	r3, r2
 8012470:	d111      	bne.n	8012496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801247c:	085b      	lsrs	r3, r3, #1
 801247e:	3b01      	subs	r3, #1
 8012480:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012482:	429a      	cmp	r2, r3
 8012484:	d107      	bne.n	8012496 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012490:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012492:	429a      	cmp	r2, r3
 8012494:	d001      	beq.n	801249a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8012496:	2301      	movs	r3, #1
 8012498:	e000      	b.n	801249c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 801249a:	2300      	movs	r3, #0
}
 801249c:	4618      	mov	r0, r3
 801249e:	3718      	adds	r7, #24
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	40007000 	.word	0x40007000
 80124a8:	40023800 	.word	0x40023800
 80124ac:	42470060 	.word	0x42470060

080124b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d101      	bne.n	80124c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80124c0:	2301      	movs	r3, #1
 80124c2:	e0cc      	b.n	801265e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80124c4:	4b68      	ldr	r3, [pc, #416]	; (8012668 <HAL_RCC_ClockConfig+0x1b8>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	f003 0307 	and.w	r3, r3, #7
 80124cc:	683a      	ldr	r2, [r7, #0]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d90c      	bls.n	80124ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80124d2:	4b65      	ldr	r3, [pc, #404]	; (8012668 <HAL_RCC_ClockConfig+0x1b8>)
 80124d4:	683a      	ldr	r2, [r7, #0]
 80124d6:	b2d2      	uxtb	r2, r2
 80124d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80124da:	4b63      	ldr	r3, [pc, #396]	; (8012668 <HAL_RCC_ClockConfig+0x1b8>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f003 0307 	and.w	r3, r3, #7
 80124e2:	683a      	ldr	r2, [r7, #0]
 80124e4:	429a      	cmp	r2, r3
 80124e6:	d001      	beq.n	80124ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80124e8:	2301      	movs	r3, #1
 80124ea:	e0b8      	b.n	801265e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	f003 0302 	and.w	r3, r3, #2
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d020      	beq.n	801253a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f003 0304 	and.w	r3, r3, #4
 8012500:	2b00      	cmp	r3, #0
 8012502:	d005      	beq.n	8012510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012504:	4b59      	ldr	r3, [pc, #356]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 8012506:	689b      	ldr	r3, [r3, #8]
 8012508:	4a58      	ldr	r2, [pc, #352]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 801250a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801250e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	f003 0308 	and.w	r3, r3, #8
 8012518:	2b00      	cmp	r3, #0
 801251a:	d005      	beq.n	8012528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801251c:	4b53      	ldr	r3, [pc, #332]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 801251e:	689b      	ldr	r3, [r3, #8]
 8012520:	4a52      	ldr	r2, [pc, #328]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 8012522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012528:	4b50      	ldr	r3, [pc, #320]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 801252a:	689b      	ldr	r3, [r3, #8]
 801252c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	689b      	ldr	r3, [r3, #8]
 8012534:	494d      	ldr	r1, [pc, #308]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 8012536:	4313      	orrs	r3, r2
 8012538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	f003 0301 	and.w	r3, r3, #1
 8012542:	2b00      	cmp	r3, #0
 8012544:	d044      	beq.n	80125d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	685b      	ldr	r3, [r3, #4]
 801254a:	2b01      	cmp	r3, #1
 801254c:	d107      	bne.n	801255e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801254e:	4b47      	ldr	r3, [pc, #284]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012556:	2b00      	cmp	r3, #0
 8012558:	d119      	bne.n	801258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801255a:	2301      	movs	r3, #1
 801255c:	e07f      	b.n	801265e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	2b02      	cmp	r3, #2
 8012564:	d003      	beq.n	801256e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801256a:	2b03      	cmp	r3, #3
 801256c:	d107      	bne.n	801257e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801256e:	4b3f      	ldr	r3, [pc, #252]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012576:	2b00      	cmp	r3, #0
 8012578:	d109      	bne.n	801258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801257a:	2301      	movs	r3, #1
 801257c:	e06f      	b.n	801265e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801257e:	4b3b      	ldr	r3, [pc, #236]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	f003 0302 	and.w	r3, r3, #2
 8012586:	2b00      	cmp	r3, #0
 8012588:	d101      	bne.n	801258e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801258a:	2301      	movs	r3, #1
 801258c:	e067      	b.n	801265e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801258e:	4b37      	ldr	r3, [pc, #220]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 8012590:	689b      	ldr	r3, [r3, #8]
 8012592:	f023 0203 	bic.w	r2, r3, #3
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	4934      	ldr	r1, [pc, #208]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 801259c:	4313      	orrs	r3, r2
 801259e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80125a0:	f7fe ff6a 	bl	8011478 <HAL_GetTick>
 80125a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80125a6:	e00a      	b.n	80125be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125a8:	f7fe ff66 	bl	8011478 <HAL_GetTick>
 80125ac:	4602      	mov	r2, r0
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	1ad3      	subs	r3, r2, r3
 80125b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80125b6:	4293      	cmp	r3, r2
 80125b8:	d901      	bls.n	80125be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80125ba:	2303      	movs	r3, #3
 80125bc:	e04f      	b.n	801265e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80125be:	4b2b      	ldr	r3, [pc, #172]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 80125c0:	689b      	ldr	r3, [r3, #8]
 80125c2:	f003 020c 	and.w	r2, r3, #12
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	009b      	lsls	r3, r3, #2
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d1eb      	bne.n	80125a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80125d0:	4b25      	ldr	r3, [pc, #148]	; (8012668 <HAL_RCC_ClockConfig+0x1b8>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	f003 0307 	and.w	r3, r3, #7
 80125d8:	683a      	ldr	r2, [r7, #0]
 80125da:	429a      	cmp	r2, r3
 80125dc:	d20c      	bcs.n	80125f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80125de:	4b22      	ldr	r3, [pc, #136]	; (8012668 <HAL_RCC_ClockConfig+0x1b8>)
 80125e0:	683a      	ldr	r2, [r7, #0]
 80125e2:	b2d2      	uxtb	r2, r2
 80125e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80125e6:	4b20      	ldr	r3, [pc, #128]	; (8012668 <HAL_RCC_ClockConfig+0x1b8>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	f003 0307 	and.w	r3, r3, #7
 80125ee:	683a      	ldr	r2, [r7, #0]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d001      	beq.n	80125f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80125f4:	2301      	movs	r3, #1
 80125f6:	e032      	b.n	801265e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	f003 0304 	and.w	r3, r3, #4
 8012600:	2b00      	cmp	r3, #0
 8012602:	d008      	beq.n	8012616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012604:	4b19      	ldr	r3, [pc, #100]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 8012606:	689b      	ldr	r3, [r3, #8]
 8012608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	4916      	ldr	r1, [pc, #88]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 8012612:	4313      	orrs	r3, r2
 8012614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	f003 0308 	and.w	r3, r3, #8
 801261e:	2b00      	cmp	r3, #0
 8012620:	d009      	beq.n	8012636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012622:	4b12      	ldr	r3, [pc, #72]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 8012624:	689b      	ldr	r3, [r3, #8]
 8012626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	691b      	ldr	r3, [r3, #16]
 801262e:	00db      	lsls	r3, r3, #3
 8012630:	490e      	ldr	r1, [pc, #56]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 8012632:	4313      	orrs	r3, r2
 8012634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012636:	f000 f821 	bl	801267c <HAL_RCC_GetSysClockFreq>
 801263a:	4602      	mov	r2, r0
 801263c:	4b0b      	ldr	r3, [pc, #44]	; (801266c <HAL_RCC_ClockConfig+0x1bc>)
 801263e:	689b      	ldr	r3, [r3, #8]
 8012640:	091b      	lsrs	r3, r3, #4
 8012642:	f003 030f 	and.w	r3, r3, #15
 8012646:	490a      	ldr	r1, [pc, #40]	; (8012670 <HAL_RCC_ClockConfig+0x1c0>)
 8012648:	5ccb      	ldrb	r3, [r1, r3]
 801264a:	fa22 f303 	lsr.w	r3, r2, r3
 801264e:	4a09      	ldr	r2, [pc, #36]	; (8012674 <HAL_RCC_ClockConfig+0x1c4>)
 8012650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012652:	4b09      	ldr	r3, [pc, #36]	; (8012678 <HAL_RCC_ClockConfig+0x1c8>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	4618      	mov	r0, r3
 8012658:	f7fe feca 	bl	80113f0 <HAL_InitTick>

  return HAL_OK;
 801265c:	2300      	movs	r3, #0
}
 801265e:	4618      	mov	r0, r3
 8012660:	3710      	adds	r7, #16
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}
 8012666:	bf00      	nop
 8012668:	40023c00 	.word	0x40023c00
 801266c:	40023800 	.word	0x40023800
 8012670:	0801ac30 	.word	0x0801ac30
 8012674:	20000020 	.word	0x20000020
 8012678:	20000024 	.word	0x20000024

0801267c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801267c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012680:	b084      	sub	sp, #16
 8012682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012684:	2300      	movs	r3, #0
 8012686:	607b      	str	r3, [r7, #4]
 8012688:	2300      	movs	r3, #0
 801268a:	60fb      	str	r3, [r7, #12]
 801268c:	2300      	movs	r3, #0
 801268e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8012690:	2300      	movs	r3, #0
 8012692:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012694:	4b67      	ldr	r3, [pc, #412]	; (8012834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	f003 030c 	and.w	r3, r3, #12
 801269c:	2b08      	cmp	r3, #8
 801269e:	d00d      	beq.n	80126bc <HAL_RCC_GetSysClockFreq+0x40>
 80126a0:	2b08      	cmp	r3, #8
 80126a2:	f200 80bd 	bhi.w	8012820 <HAL_RCC_GetSysClockFreq+0x1a4>
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d002      	beq.n	80126b0 <HAL_RCC_GetSysClockFreq+0x34>
 80126aa:	2b04      	cmp	r3, #4
 80126ac:	d003      	beq.n	80126b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80126ae:	e0b7      	b.n	8012820 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80126b0:	4b61      	ldr	r3, [pc, #388]	; (8012838 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80126b2:	60bb      	str	r3, [r7, #8]
       break;
 80126b4:	e0b7      	b.n	8012826 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80126b6:	4b61      	ldr	r3, [pc, #388]	; (801283c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80126b8:	60bb      	str	r3, [r7, #8]
      break;
 80126ba:	e0b4      	b.n	8012826 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80126bc:	4b5d      	ldr	r3, [pc, #372]	; (8012834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80126be:	685b      	ldr	r3, [r3, #4]
 80126c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80126c6:	4b5b      	ldr	r3, [pc, #364]	; (8012834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d04d      	beq.n	801276e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80126d2:	4b58      	ldr	r3, [pc, #352]	; (8012834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	099b      	lsrs	r3, r3, #6
 80126d8:	461a      	mov	r2, r3
 80126da:	f04f 0300 	mov.w	r3, #0
 80126de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80126e2:	f04f 0100 	mov.w	r1, #0
 80126e6:	ea02 0800 	and.w	r8, r2, r0
 80126ea:	ea03 0901 	and.w	r9, r3, r1
 80126ee:	4640      	mov	r0, r8
 80126f0:	4649      	mov	r1, r9
 80126f2:	f04f 0200 	mov.w	r2, #0
 80126f6:	f04f 0300 	mov.w	r3, #0
 80126fa:	014b      	lsls	r3, r1, #5
 80126fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012700:	0142      	lsls	r2, r0, #5
 8012702:	4610      	mov	r0, r2
 8012704:	4619      	mov	r1, r3
 8012706:	ebb0 0008 	subs.w	r0, r0, r8
 801270a:	eb61 0109 	sbc.w	r1, r1, r9
 801270e:	f04f 0200 	mov.w	r2, #0
 8012712:	f04f 0300 	mov.w	r3, #0
 8012716:	018b      	lsls	r3, r1, #6
 8012718:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801271c:	0182      	lsls	r2, r0, #6
 801271e:	1a12      	subs	r2, r2, r0
 8012720:	eb63 0301 	sbc.w	r3, r3, r1
 8012724:	f04f 0000 	mov.w	r0, #0
 8012728:	f04f 0100 	mov.w	r1, #0
 801272c:	00d9      	lsls	r1, r3, #3
 801272e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012732:	00d0      	lsls	r0, r2, #3
 8012734:	4602      	mov	r2, r0
 8012736:	460b      	mov	r3, r1
 8012738:	eb12 0208 	adds.w	r2, r2, r8
 801273c:	eb43 0309 	adc.w	r3, r3, r9
 8012740:	f04f 0000 	mov.w	r0, #0
 8012744:	f04f 0100 	mov.w	r1, #0
 8012748:	0259      	lsls	r1, r3, #9
 801274a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801274e:	0250      	lsls	r0, r2, #9
 8012750:	4602      	mov	r2, r0
 8012752:	460b      	mov	r3, r1
 8012754:	4610      	mov	r0, r2
 8012756:	4619      	mov	r1, r3
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	461a      	mov	r2, r3
 801275c:	f04f 0300 	mov.w	r3, #0
 8012760:	f7ee fa22 	bl	8000ba8 <__aeabi_uldivmod>
 8012764:	4602      	mov	r2, r0
 8012766:	460b      	mov	r3, r1
 8012768:	4613      	mov	r3, r2
 801276a:	60fb      	str	r3, [r7, #12]
 801276c:	e04a      	b.n	8012804 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801276e:	4b31      	ldr	r3, [pc, #196]	; (8012834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	099b      	lsrs	r3, r3, #6
 8012774:	461a      	mov	r2, r3
 8012776:	f04f 0300 	mov.w	r3, #0
 801277a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801277e:	f04f 0100 	mov.w	r1, #0
 8012782:	ea02 0400 	and.w	r4, r2, r0
 8012786:	ea03 0501 	and.w	r5, r3, r1
 801278a:	4620      	mov	r0, r4
 801278c:	4629      	mov	r1, r5
 801278e:	f04f 0200 	mov.w	r2, #0
 8012792:	f04f 0300 	mov.w	r3, #0
 8012796:	014b      	lsls	r3, r1, #5
 8012798:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801279c:	0142      	lsls	r2, r0, #5
 801279e:	4610      	mov	r0, r2
 80127a0:	4619      	mov	r1, r3
 80127a2:	1b00      	subs	r0, r0, r4
 80127a4:	eb61 0105 	sbc.w	r1, r1, r5
 80127a8:	f04f 0200 	mov.w	r2, #0
 80127ac:	f04f 0300 	mov.w	r3, #0
 80127b0:	018b      	lsls	r3, r1, #6
 80127b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80127b6:	0182      	lsls	r2, r0, #6
 80127b8:	1a12      	subs	r2, r2, r0
 80127ba:	eb63 0301 	sbc.w	r3, r3, r1
 80127be:	f04f 0000 	mov.w	r0, #0
 80127c2:	f04f 0100 	mov.w	r1, #0
 80127c6:	00d9      	lsls	r1, r3, #3
 80127c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80127cc:	00d0      	lsls	r0, r2, #3
 80127ce:	4602      	mov	r2, r0
 80127d0:	460b      	mov	r3, r1
 80127d2:	1912      	adds	r2, r2, r4
 80127d4:	eb45 0303 	adc.w	r3, r5, r3
 80127d8:	f04f 0000 	mov.w	r0, #0
 80127dc:	f04f 0100 	mov.w	r1, #0
 80127e0:	0299      	lsls	r1, r3, #10
 80127e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80127e6:	0290      	lsls	r0, r2, #10
 80127e8:	4602      	mov	r2, r0
 80127ea:	460b      	mov	r3, r1
 80127ec:	4610      	mov	r0, r2
 80127ee:	4619      	mov	r1, r3
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	461a      	mov	r2, r3
 80127f4:	f04f 0300 	mov.w	r3, #0
 80127f8:	f7ee f9d6 	bl	8000ba8 <__aeabi_uldivmod>
 80127fc:	4602      	mov	r2, r0
 80127fe:	460b      	mov	r3, r1
 8012800:	4613      	mov	r3, r2
 8012802:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012804:	4b0b      	ldr	r3, [pc, #44]	; (8012834 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	0c1b      	lsrs	r3, r3, #16
 801280a:	f003 0303 	and.w	r3, r3, #3
 801280e:	3301      	adds	r3, #1
 8012810:	005b      	lsls	r3, r3, #1
 8012812:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8012814:	68fa      	ldr	r2, [r7, #12]
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	fbb2 f3f3 	udiv	r3, r2, r3
 801281c:	60bb      	str	r3, [r7, #8]
      break;
 801281e:	e002      	b.n	8012826 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012820:	4b05      	ldr	r3, [pc, #20]	; (8012838 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8012822:	60bb      	str	r3, [r7, #8]
      break;
 8012824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012826:	68bb      	ldr	r3, [r7, #8]
}
 8012828:	4618      	mov	r0, r3
 801282a:	3710      	adds	r7, #16
 801282c:	46bd      	mov	sp, r7
 801282e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012832:	bf00      	nop
 8012834:	40023800 	.word	0x40023800
 8012838:	00f42400 	.word	0x00f42400
 801283c:	007a1200 	.word	0x007a1200

08012840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012840:	b480      	push	{r7}
 8012842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012844:	4b03      	ldr	r3, [pc, #12]	; (8012854 <HAL_RCC_GetHCLKFreq+0x14>)
 8012846:	681b      	ldr	r3, [r3, #0]
}
 8012848:	4618      	mov	r0, r3
 801284a:	46bd      	mov	sp, r7
 801284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012850:	4770      	bx	lr
 8012852:	bf00      	nop
 8012854:	20000020 	.word	0x20000020

08012858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801285c:	f7ff fff0 	bl	8012840 <HAL_RCC_GetHCLKFreq>
 8012860:	4602      	mov	r2, r0
 8012862:	4b05      	ldr	r3, [pc, #20]	; (8012878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012864:	689b      	ldr	r3, [r3, #8]
 8012866:	0a9b      	lsrs	r3, r3, #10
 8012868:	f003 0307 	and.w	r3, r3, #7
 801286c:	4903      	ldr	r1, [pc, #12]	; (801287c <HAL_RCC_GetPCLK1Freq+0x24>)
 801286e:	5ccb      	ldrb	r3, [r1, r3]
 8012870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012874:	4618      	mov	r0, r3
 8012876:	bd80      	pop	{r7, pc}
 8012878:	40023800 	.word	0x40023800
 801287c:	0801ac40 	.word	0x0801ac40

08012880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012884:	f7ff ffdc 	bl	8012840 <HAL_RCC_GetHCLKFreq>
 8012888:	4602      	mov	r2, r0
 801288a:	4b05      	ldr	r3, [pc, #20]	; (80128a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 801288c:	689b      	ldr	r3, [r3, #8]
 801288e:	0b5b      	lsrs	r3, r3, #13
 8012890:	f003 0307 	and.w	r3, r3, #7
 8012894:	4903      	ldr	r1, [pc, #12]	; (80128a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012896:	5ccb      	ldrb	r3, [r1, r3]
 8012898:	fa22 f303 	lsr.w	r3, r2, r3
}
 801289c:	4618      	mov	r0, r3
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	40023800 	.word	0x40023800
 80128a4:	0801ac40 	.word	0x0801ac40

080128a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d101      	bne.n	80128ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80128b6:	2301      	movs	r3, #1
 80128b8:	e022      	b.n	8012900 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d105      	bne.n	80128d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2200      	movs	r2, #0
 80128ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f7fe f91b 	bl	8010b08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2203      	movs	r2, #3
 80128d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f000 f814 	bl	8012908 <HAL_SD_InitCard>
 80128e0:	4603      	mov	r3, r0
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d001      	beq.n	80128ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80128e6:	2301      	movs	r3, #1
 80128e8:	e00a      	b.n	8012900 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2200      	movs	r2, #0
 80128ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2200      	movs	r2, #0
 80128f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	2201      	movs	r2, #1
 80128fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80128fe:	2300      	movs	r3, #0
}
 8012900:	4618      	mov	r0, r3
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8012908:	b5b0      	push	{r4, r5, r7, lr}
 801290a:	b08e      	sub	sp, #56	; 0x38
 801290c:	af04      	add	r7, sp, #16
 801290e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8012910:	2300      	movs	r3, #0
 8012912:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8012914:	2300      	movs	r3, #0
 8012916:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8012918:	2300      	movs	r3, #0
 801291a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 801291c:	2300      	movs	r3, #0
 801291e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8012920:	2300      	movs	r3, #0
 8012922:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8012924:	2376      	movs	r3, #118	; 0x76
 8012926:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681d      	ldr	r5, [r3, #0]
 801292c:	466c      	mov	r4, sp
 801292e:	f107 0314 	add.w	r3, r7, #20
 8012932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801293a:	f107 0308 	add.w	r3, r7, #8
 801293e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012940:	4628      	mov	r0, r5
 8012942:	f001 fd81 	bl	8014448 <SDIO_Init>
 8012946:	4603      	mov	r3, r0
 8012948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 801294c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012950:	2b00      	cmp	r3, #0
 8012952:	d001      	beq.n	8012958 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8012954:	2301      	movs	r3, #1
 8012956:	e04c      	b.n	80129f2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8012958:	4b28      	ldr	r3, [pc, #160]	; (80129fc <HAL_SD_InitCard+0xf4>)
 801295a:	2200      	movs	r2, #0
 801295c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	4618      	mov	r0, r3
 8012964:	f001 fdb9 	bl	80144da <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8012968:	4b24      	ldr	r3, [pc, #144]	; (80129fc <HAL_SD_InitCard+0xf4>)
 801296a:	2201      	movs	r2, #1
 801296c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	f000 fe68 	bl	8013644 <SD_PowerON>
 8012974:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012976:	6a3b      	ldr	r3, [r7, #32]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d00b      	beq.n	8012994 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2201      	movs	r2, #1
 8012980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012988:	6a3b      	ldr	r3, [r7, #32]
 801298a:	431a      	orrs	r2, r3
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8012990:	2301      	movs	r3, #1
 8012992:	e02e      	b.n	80129f2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f000 fd89 	bl	80134ac <SD_InitCard>
 801299a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801299c:	6a3b      	ldr	r3, [r7, #32]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d00b      	beq.n	80129ba <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2201      	movs	r2, #1
 80129a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80129ae:	6a3b      	ldr	r3, [r7, #32]
 80129b0:	431a      	orrs	r2, r3
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80129b6:	2301      	movs	r3, #1
 80129b8:	e01b      	b.n	80129f2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80129c2:	4618      	mov	r0, r3
 80129c4:	f001 fe1c 	bl	8014600 <SDMMC_CmdBlockLength>
 80129c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80129ca:	6a3b      	ldr	r3, [r7, #32]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d00f      	beq.n	80129f0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	4a0a      	ldr	r2, [pc, #40]	; (8012a00 <HAL_SD_InitCard+0xf8>)
 80129d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80129dc:	6a3b      	ldr	r3, [r7, #32]
 80129de:	431a      	orrs	r2, r3
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2201      	movs	r2, #1
 80129e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80129ec:	2301      	movs	r3, #1
 80129ee:	e000      	b.n	80129f2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80129f0:	2300      	movs	r3, #0
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	3728      	adds	r7, #40	; 0x28
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bdb0      	pop	{r4, r5, r7, pc}
 80129fa:	bf00      	nop
 80129fc:	422580a0 	.word	0x422580a0
 8012a00:	004005ff 	.word	0x004005ff

08012a04 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b092      	sub	sp, #72	; 0x48
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	60f8      	str	r0, [r7, #12]
 8012a0c:	60b9      	str	r1, [r7, #8]
 8012a0e:	607a      	str	r2, [r7, #4]
 8012a10:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8012a12:	f7fe fd31 	bl	8011478 <HAL_GetTick>
 8012a16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d107      	bne.n	8012a36 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8012a32:	2301      	movs	r3, #1
 8012a34:	e1bd      	b.n	8012db2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	f040 81b0 	bne.w	8012da4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	2200      	movs	r2, #0
 8012a48:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8012a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	441a      	add	r2, r3
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d907      	bls.n	8012a68 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a5c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8012a64:	2301      	movs	r3, #1
 8012a66:	e1a4      	b.n	8012db2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2203      	movs	r2, #3
 8012a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2200      	movs	r2, #0
 8012a76:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a7c:	2b01      	cmp	r3, #1
 8012a7e:	d002      	beq.n	8012a86 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8012a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a82:	025b      	lsls	r3, r3, #9
 8012a84:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8012a86:	f04f 33ff 	mov.w	r3, #4294967295
 8012a8a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	025b      	lsls	r3, r3, #9
 8012a90:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8012a92:	2390      	movs	r3, #144	; 0x90
 8012a94:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8012a96:	2302      	movs	r3, #2
 8012a98:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f107 0214 	add.w	r2, r7, #20
 8012aaa:	4611      	mov	r1, r2
 8012aac:	4618      	mov	r0, r3
 8012aae:	f001 fd7b 	bl	80145a8 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d90a      	bls.n	8012ace <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	2202      	movs	r2, #2
 8012abc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f001 fddf 	bl	8014688 <SDMMC_CmdReadMultiBlock>
 8012aca:	6478      	str	r0, [r7, #68]	; 0x44
 8012acc:	e009      	b.n	8012ae2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	2201      	movs	r2, #1
 8012ad2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ada:	4618      	mov	r0, r3
 8012adc:	f001 fdb2 	bl	8014644 <SDMMC_CmdReadSingleBlock>
 8012ae0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8012ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d012      	beq.n	8012b0e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	4a7a      	ldr	r2, [pc, #488]	; (8012cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8012aee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012af6:	431a      	orrs	r2, r3
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	2201      	movs	r2, #1
 8012b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2200      	movs	r2, #0
 8012b08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	e151      	b.n	8012db2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8012b0e:	69bb      	ldr	r3, [r7, #24]
 8012b10:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8012b12:	e061      	b.n	8012bd8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d03c      	beq.n	8012b9c <HAL_SD_ReadBlocks+0x198>
 8012b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d039      	beq.n	8012b9c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8012b28:	2300      	movs	r3, #0
 8012b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8012b2c:	e033      	b.n	8012b96 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	4618      	mov	r0, r3
 8012b34:	f001 fcb3 	bl	801449e <SDIO_ReadFIFO>
 8012b38:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8012b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3c:	b2da      	uxtb	r2, r3
 8012b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8012b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b44:	3301      	adds	r3, #1
 8012b46:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8012b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b4a:	3b01      	subs	r3, #1
 8012b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8012b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b50:	0a1b      	lsrs	r3, r3, #8
 8012b52:	b2da      	uxtb	r2, r3
 8012b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b56:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8012b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8012b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b60:	3b01      	subs	r3, #1
 8012b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8012b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b66:	0c1b      	lsrs	r3, r3, #16
 8012b68:	b2da      	uxtb	r2, r3
 8012b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8012b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b70:	3301      	adds	r3, #1
 8012b72:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8012b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b76:	3b01      	subs	r3, #1
 8012b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8012b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7c:	0e1b      	lsrs	r3, r3, #24
 8012b7e:	b2da      	uxtb	r2, r3
 8012b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b82:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8012b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b86:	3301      	adds	r3, #1
 8012b88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8012b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b8c:	3b01      	subs	r3, #1
 8012b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8012b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b92:	3301      	adds	r3, #1
 8012b94:	643b      	str	r3, [r7, #64]	; 0x40
 8012b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b98:	2b07      	cmp	r3, #7
 8012b9a:	d9c8      	bls.n	8012b2e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8012b9c:	f7fe fc6c 	bl	8011478 <HAL_GetTick>
 8012ba0:	4602      	mov	r2, r0
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba4:	1ad3      	subs	r3, r2, r3
 8012ba6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ba8:	429a      	cmp	r2, r3
 8012baa:	d902      	bls.n	8012bb2 <HAL_SD_ReadBlocks+0x1ae>
 8012bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d112      	bne.n	8012bd8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	4a48      	ldr	r2, [pc, #288]	; (8012cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8012bb8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	2201      	movs	r2, #1
 8012bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8012bd4:	2303      	movs	r3, #3
 8012bd6:	e0ec      	b.n	8012db2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012bde:	f240 332a 	movw	r3, #810	; 0x32a
 8012be2:	4013      	ands	r3, r2
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d095      	beq.n	8012b14 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d022      	beq.n	8012c3c <HAL_SD_ReadBlocks+0x238>
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d91f      	bls.n	8012c3c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c00:	2b03      	cmp	r3, #3
 8012c02:	d01b      	beq.n	8012c3c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f001 fda3 	bl	8014754 <SDMMC_CmdStopTransfer>
 8012c0e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8012c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d012      	beq.n	8012c3c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	4a2f      	ldr	r2, [pc, #188]	; (8012cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8012c1c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c24:	431a      	orrs	r2, r3
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	2200      	movs	r2, #0
 8012c36:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e0ba      	b.n	8012db2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c42:	f003 0308 	and.w	r3, r3, #8
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d012      	beq.n	8012c70 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	4a22      	ldr	r2, [pc, #136]	; (8012cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8012c50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c56:	f043 0208 	orr.w	r2, r3, #8
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	2201      	movs	r2, #1
 8012c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	2200      	movs	r2, #0
 8012c6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	e0a0      	b.n	8012db2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c76:	f003 0302 	and.w	r3, r3, #2
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d012      	beq.n	8012ca4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	4a15      	ldr	r2, [pc, #84]	; (8012cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8012c84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c8a:	f043 0202 	orr.w	r2, r3, #2
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	2201      	movs	r2, #1
 8012c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e086      	b.n	8012db2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012caa:	f003 0320 	and.w	r3, r3, #32
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d063      	beq.n	8012d7a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	4a08      	ldr	r2, [pc, #32]	; (8012cd8 <HAL_SD_ReadBlocks+0x2d4>)
 8012cb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cbe:	f043 0220 	orr.w	r2, r3, #32
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2201      	movs	r2, #1
 8012cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	e06c      	b.n	8012db2 <HAL_SD_ReadBlocks+0x3ae>
 8012cd8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f001 fbdc 	bl	801449e <SDIO_ReadFIFO>
 8012ce6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8012ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8012cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cf2:	3301      	adds	r3, #1
 8012cf4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8012cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cf8:	3b01      	subs	r3, #1
 8012cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8012cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfe:	0a1b      	lsrs	r3, r3, #8
 8012d00:	b2da      	uxtb	r2, r3
 8012d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d04:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8012d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d08:	3301      	adds	r3, #1
 8012d0a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8012d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d0e:	3b01      	subs	r3, #1
 8012d10:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8012d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d14:	0c1b      	lsrs	r3, r3, #16
 8012d16:	b2da      	uxtb	r2, r3
 8012d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d1a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8012d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d1e:	3301      	adds	r3, #1
 8012d20:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8012d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d24:	3b01      	subs	r3, #1
 8012d26:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8012d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d2a:	0e1b      	lsrs	r3, r3, #24
 8012d2c:	b2da      	uxtb	r2, r3
 8012d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d30:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8012d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d34:	3301      	adds	r3, #1
 8012d36:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8012d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d3a:	3b01      	subs	r3, #1
 8012d3c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8012d3e:	f7fe fb9b 	bl	8011478 <HAL_GetTick>
 8012d42:	4602      	mov	r2, r0
 8012d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d46:	1ad3      	subs	r3, r2, r3
 8012d48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d902      	bls.n	8012d54 <HAL_SD_ReadBlocks+0x350>
 8012d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d112      	bne.n	8012d7a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	4a18      	ldr	r2, [pc, #96]	; (8012dbc <HAL_SD_ReadBlocks+0x3b8>)
 8012d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	2201      	movs	r2, #1
 8012d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	2200      	movs	r2, #0
 8012d74:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8012d76:	2301      	movs	r3, #1
 8012d78:	e01b      	b.n	8012db2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d002      	beq.n	8012d8e <HAL_SD_ReadBlocks+0x38a>
 8012d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d1a6      	bne.n	8012cdc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	f240 523a 	movw	r2, #1338	; 0x53a
 8012d96:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8012da0:	2300      	movs	r3, #0
 8012da2:	e006      	b.n	8012db2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012da8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8012db0:	2301      	movs	r3, #1
  }
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3748      	adds	r7, #72	; 0x48
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	004005ff 	.word	0x004005ff

08012dc0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b092      	sub	sp, #72	; 0x48
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60f8      	str	r0, [r7, #12]
 8012dc8:	60b9      	str	r1, [r7, #8]
 8012dca:	607a      	str	r2, [r7, #4]
 8012dcc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8012dce:	f7fe fb53 	bl	8011478 <HAL_GetTick>
 8012dd2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d107      	bne.n	8012df2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012de6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8012dee:	2301      	movs	r3, #1
 8012df0:	e166      	b.n	80130c0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012df8:	b2db      	uxtb	r3, r3
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	f040 8159 	bne.w	80130b2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2200      	movs	r2, #0
 8012e04:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8012e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	441a      	add	r2, r3
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d907      	bls.n	8012e24 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e18:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8012e20:	2301      	movs	r3, #1
 8012e22:	e14d      	b.n	80130c0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	2203      	movs	r2, #3
 8012e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	2200      	movs	r2, #0
 8012e32:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e38:	2b01      	cmp	r3, #1
 8012e3a:	d002      	beq.n	8012e42 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8012e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3e:	025b      	lsls	r3, r3, #9
 8012e40:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8012e42:	f04f 33ff 	mov.w	r3, #4294967295
 8012e46:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	025b      	lsls	r3, r3, #9
 8012e4c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8012e4e:	2390      	movs	r3, #144	; 0x90
 8012e50:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8012e52:	2300      	movs	r3, #0
 8012e54:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8012e56:	2300      	movs	r3, #0
 8012e58:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	f107 0218 	add.w	r2, r7, #24
 8012e66:	4611      	mov	r1, r2
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f001 fb9d 	bl	80145a8 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	d90a      	bls.n	8012e8a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2220      	movs	r2, #32
 8012e78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e80:	4618      	mov	r0, r3
 8012e82:	f001 fc45 	bl	8014710 <SDMMC_CmdWriteMultiBlock>
 8012e86:	6478      	str	r0, [r7, #68]	; 0x44
 8012e88:	e009      	b.n	8012e9e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	2210      	movs	r2, #16
 8012e8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e96:	4618      	mov	r0, r3
 8012e98:	f001 fc18 	bl	80146cc <SDMMC_CmdWriteSingleBlock>
 8012e9c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8012e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d012      	beq.n	8012eca <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	4a87      	ldr	r2, [pc, #540]	; (80130c8 <HAL_SD_WriteBlocks+0x308>)
 8012eaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012eb2:	431a      	orrs	r2, r3
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2201      	movs	r2, #1
 8012ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e0fa      	b.n	80130c0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8012eca:	69fb      	ldr	r3, [r7, #28]
 8012ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8012ece:	e065      	b.n	8012f9c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d040      	beq.n	8012f60 <HAL_SD_WriteBlocks+0x1a0>
 8012ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d03d      	beq.n	8012f60 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8012ee8:	e037      	b.n	8012f5a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8012eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eec:	781b      	ldrb	r3, [r3, #0]
 8012eee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8012ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8012ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ef8:	3b01      	subs	r3, #1
 8012efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8012efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	021a      	lsls	r2, r3, #8
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	4313      	orrs	r3, r2
 8012f06:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8012f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8012f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f10:	3b01      	subs	r3, #1
 8012f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8012f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	041a      	lsls	r2, r3, #16
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	4313      	orrs	r3, r2
 8012f1e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8012f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f22:	3301      	adds	r3, #1
 8012f24:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8012f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f28:	3b01      	subs	r3, #1
 8012f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8012f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	061a      	lsls	r2, r3, #24
 8012f32:	697b      	ldr	r3, [r7, #20]
 8012f34:	4313      	orrs	r3, r2
 8012f36:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8012f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8012f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f40:	3b01      	subs	r3, #1
 8012f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	f107 0214 	add.w	r2, r7, #20
 8012f4c:	4611      	mov	r1, r2
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f001 fab2 	bl	80144b8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8012f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f56:	3301      	adds	r3, #1
 8012f58:	643b      	str	r3, [r7, #64]	; 0x40
 8012f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f5c:	2b07      	cmp	r3, #7
 8012f5e:	d9c4      	bls.n	8012eea <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8012f60:	f7fe fa8a 	bl	8011478 <HAL_GetTick>
 8012f64:	4602      	mov	r2, r0
 8012f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f68:	1ad3      	subs	r3, r2, r3
 8012f6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d902      	bls.n	8012f76 <HAL_SD_WriteBlocks+0x1b6>
 8012f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d112      	bne.n	8012f9c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	4a53      	ldr	r2, [pc, #332]	; (80130c8 <HAL_SD_WriteBlocks+0x308>)
 8012f7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f84:	431a      	orrs	r2, r3
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2201      	movs	r2, #1
 8012f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2200      	movs	r2, #0
 8012f96:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8012f98:	2303      	movs	r3, #3
 8012f9a:	e091      	b.n	80130c0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012fa2:	f240 331a 	movw	r3, #794	; 0x31a
 8012fa6:	4013      	ands	r3, r2
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d091      	beq.n	8012ed0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d022      	beq.n	8013000 <HAL_SD_WriteBlocks+0x240>
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d91f      	bls.n	8013000 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fc4:	2b03      	cmp	r3, #3
 8012fc6:	d01b      	beq.n	8013000 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f001 fbc1 	bl	8014754 <SDMMC_CmdStopTransfer>
 8012fd2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8012fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d012      	beq.n	8013000 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	4a3a      	ldr	r2, [pc, #232]	; (80130c8 <HAL_SD_WriteBlocks+0x308>)
 8012fe0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fe8:	431a      	orrs	r2, r3
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	2201      	movs	r2, #1
 8012ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	e05f      	b.n	80130c0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013006:	f003 0308 	and.w	r3, r3, #8
 801300a:	2b00      	cmp	r3, #0
 801300c:	d012      	beq.n	8013034 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	4a2d      	ldr	r2, [pc, #180]	; (80130c8 <HAL_SD_WriteBlocks+0x308>)
 8013014:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801301a:	f043 0208 	orr.w	r2, r3, #8
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2201      	movs	r2, #1
 8013026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	2200      	movs	r2, #0
 801302e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8013030:	2301      	movs	r3, #1
 8013032:	e045      	b.n	80130c0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801303a:	f003 0302 	and.w	r3, r3, #2
 801303e:	2b00      	cmp	r3, #0
 8013040:	d012      	beq.n	8013068 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	4a20      	ldr	r2, [pc, #128]	; (80130c8 <HAL_SD_WriteBlocks+0x308>)
 8013048:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801304e:	f043 0202 	orr.w	r2, r3, #2
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2201      	movs	r2, #1
 801305a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2200      	movs	r2, #0
 8013062:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8013064:	2301      	movs	r3, #1
 8013066:	e02b      	b.n	80130c0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801306e:	f003 0310 	and.w	r3, r3, #16
 8013072:	2b00      	cmp	r3, #0
 8013074:	d012      	beq.n	801309c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	4a13      	ldr	r2, [pc, #76]	; (80130c8 <HAL_SD_WriteBlocks+0x308>)
 801307c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013082:	f043 0210 	orr.w	r2, r3, #16
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	2201      	movs	r2, #1
 801308e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	2200      	movs	r2, #0
 8013096:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8013098:	2301      	movs	r3, #1
 801309a:	e011      	b.n	80130c0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	f240 523a 	movw	r2, #1338	; 0x53a
 80130a4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	2201      	movs	r2, #1
 80130aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80130ae:	2300      	movs	r3, #0
 80130b0:	e006      	b.n	80130c0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80130be:	2301      	movs	r3, #1
  }
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	3748      	adds	r7, #72	; 0x48
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	004005ff 	.word	0x004005ff

080130cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80130cc:	b480      	push	{r7}
 80130ce:	b083      	sub	sp, #12
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80130da:	0f9b      	lsrs	r3, r3, #30
 80130dc:	b2da      	uxtb	r2, r3
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80130e6:	0e9b      	lsrs	r3, r3, #26
 80130e8:	b2db      	uxtb	r3, r3
 80130ea:	f003 030f 	and.w	r3, r3, #15
 80130ee:	b2da      	uxtb	r2, r3
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80130f8:	0e1b      	lsrs	r3, r3, #24
 80130fa:	b2db      	uxtb	r3, r3
 80130fc:	f003 0303 	and.w	r3, r3, #3
 8013100:	b2da      	uxtb	r2, r3
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801310a:	0c1b      	lsrs	r3, r3, #16
 801310c:	b2da      	uxtb	r2, r3
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013116:	0a1b      	lsrs	r3, r3, #8
 8013118:	b2da      	uxtb	r2, r3
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013122:	b2da      	uxtb	r2, r3
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801312c:	0d1b      	lsrs	r3, r3, #20
 801312e:	b29a      	uxth	r2, r3
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013138:	0c1b      	lsrs	r3, r3, #16
 801313a:	b2db      	uxtb	r3, r3
 801313c:	f003 030f 	and.w	r3, r3, #15
 8013140:	b2da      	uxtb	r2, r3
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801314a:	0bdb      	lsrs	r3, r3, #15
 801314c:	b2db      	uxtb	r3, r3
 801314e:	f003 0301 	and.w	r3, r3, #1
 8013152:	b2da      	uxtb	r2, r3
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801315c:	0b9b      	lsrs	r3, r3, #14
 801315e:	b2db      	uxtb	r3, r3
 8013160:	f003 0301 	and.w	r3, r3, #1
 8013164:	b2da      	uxtb	r2, r3
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801316e:	0b5b      	lsrs	r3, r3, #13
 8013170:	b2db      	uxtb	r3, r3
 8013172:	f003 0301 	and.w	r3, r3, #1
 8013176:	b2da      	uxtb	r2, r3
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013180:	0b1b      	lsrs	r3, r3, #12
 8013182:	b2db      	uxtb	r3, r3
 8013184:	f003 0301 	and.w	r3, r3, #1
 8013188:	b2da      	uxtb	r2, r3
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	2200      	movs	r2, #0
 8013192:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013198:	2b00      	cmp	r3, #0
 801319a:	d163      	bne.n	8013264 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80131a0:	009a      	lsls	r2, r3, #2
 80131a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80131a6:	4013      	ands	r3, r2
 80131a8:	687a      	ldr	r2, [r7, #4]
 80131aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80131ac:	0f92      	lsrs	r2, r2, #30
 80131ae:	431a      	orrs	r2, r3
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131b8:	0edb      	lsrs	r3, r3, #27
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	f003 0307 	and.w	r3, r3, #7
 80131c0:	b2da      	uxtb	r2, r3
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131ca:	0e1b      	lsrs	r3, r3, #24
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	f003 0307 	and.w	r3, r3, #7
 80131d2:	b2da      	uxtb	r2, r3
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131dc:	0d5b      	lsrs	r3, r3, #21
 80131de:	b2db      	uxtb	r3, r3
 80131e0:	f003 0307 	and.w	r3, r3, #7
 80131e4:	b2da      	uxtb	r2, r3
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131ee:	0c9b      	lsrs	r3, r3, #18
 80131f0:	b2db      	uxtb	r3, r3
 80131f2:	f003 0307 	and.w	r3, r3, #7
 80131f6:	b2da      	uxtb	r2, r3
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013200:	0bdb      	lsrs	r3, r3, #15
 8013202:	b2db      	uxtb	r3, r3
 8013204:	f003 0307 	and.w	r3, r3, #7
 8013208:	b2da      	uxtb	r2, r3
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	691b      	ldr	r3, [r3, #16]
 8013212:	1c5a      	adds	r2, r3, #1
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	7e1b      	ldrb	r3, [r3, #24]
 801321c:	b2db      	uxtb	r3, r3
 801321e:	f003 0307 	and.w	r3, r3, #7
 8013222:	3302      	adds	r3, #2
 8013224:	2201      	movs	r2, #1
 8013226:	fa02 f303 	lsl.w	r3, r2, r3
 801322a:	687a      	ldr	r2, [r7, #4]
 801322c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801322e:	fb02 f203 	mul.w	r2, r2, r3
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	7a1b      	ldrb	r3, [r3, #8]
 801323a:	b2db      	uxtb	r3, r3
 801323c:	f003 030f 	and.w	r3, r3, #15
 8013240:	2201      	movs	r2, #1
 8013242:	409a      	lsls	r2, r3
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8013250:	0a52      	lsrs	r2, r2, #9
 8013252:	fb02 f203 	mul.w	r2, r2, r3
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013260:	661a      	str	r2, [r3, #96]	; 0x60
 8013262:	e031      	b.n	80132c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013268:	2b01      	cmp	r3, #1
 801326a:	d11d      	bne.n	80132a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013270:	041b      	lsls	r3, r3, #16
 8013272:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801327a:	0c1b      	lsrs	r3, r3, #16
 801327c:	431a      	orrs	r2, r3
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	691b      	ldr	r3, [r3, #16]
 8013286:	3301      	adds	r3, #1
 8013288:	029a      	lsls	r2, r3, #10
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	f44f 7200 	mov.w	r2, #512	; 0x200
 801329c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	661a      	str	r2, [r3, #96]	; 0x60
 80132a6:	e00f      	b.n	80132c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	4a58      	ldr	r2, [pc, #352]	; (8013410 <HAL_SD_GetCardCSD+0x344>)
 80132ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	2201      	movs	r2, #1
 80132c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80132c4:	2301      	movs	r3, #1
 80132c6:	e09d      	b.n	8013404 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132cc:	0b9b      	lsrs	r3, r3, #14
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	f003 0301 	and.w	r3, r3, #1
 80132d4:	b2da      	uxtb	r2, r3
 80132d6:	683b      	ldr	r3, [r7, #0]
 80132d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132de:	09db      	lsrs	r3, r3, #7
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132e6:	b2da      	uxtb	r2, r3
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132f0:	b2db      	uxtb	r3, r3
 80132f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132f6:	b2da      	uxtb	r2, r3
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013300:	0fdb      	lsrs	r3, r3, #31
 8013302:	b2da      	uxtb	r2, r3
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801330c:	0f5b      	lsrs	r3, r3, #29
 801330e:	b2db      	uxtb	r3, r3
 8013310:	f003 0303 	and.w	r3, r3, #3
 8013314:	b2da      	uxtb	r2, r3
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801331e:	0e9b      	lsrs	r3, r3, #26
 8013320:	b2db      	uxtb	r3, r3
 8013322:	f003 0307 	and.w	r3, r3, #7
 8013326:	b2da      	uxtb	r2, r3
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013330:	0d9b      	lsrs	r3, r3, #22
 8013332:	b2db      	uxtb	r3, r3
 8013334:	f003 030f 	and.w	r3, r3, #15
 8013338:	b2da      	uxtb	r2, r3
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013342:	0d5b      	lsrs	r3, r3, #21
 8013344:	b2db      	uxtb	r3, r3
 8013346:	f003 0301 	and.w	r3, r3, #1
 801334a:	b2da      	uxtb	r2, r3
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	2200      	movs	r2, #0
 8013356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801335e:	0c1b      	lsrs	r3, r3, #16
 8013360:	b2db      	uxtb	r3, r3
 8013362:	f003 0301 	and.w	r3, r3, #1
 8013366:	b2da      	uxtb	r2, r3
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013372:	0bdb      	lsrs	r3, r3, #15
 8013374:	b2db      	uxtb	r3, r3
 8013376:	f003 0301 	and.w	r3, r3, #1
 801337a:	b2da      	uxtb	r2, r3
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013386:	0b9b      	lsrs	r3, r3, #14
 8013388:	b2db      	uxtb	r3, r3
 801338a:	f003 0301 	and.w	r3, r3, #1
 801338e:	b2da      	uxtb	r2, r3
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801339a:	0b5b      	lsrs	r3, r3, #13
 801339c:	b2db      	uxtb	r3, r3
 801339e:	f003 0301 	and.w	r3, r3, #1
 80133a2:	b2da      	uxtb	r2, r3
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133ae:	0b1b      	lsrs	r3, r3, #12
 80133b0:	b2db      	uxtb	r3, r3
 80133b2:	f003 0301 	and.w	r3, r3, #1
 80133b6:	b2da      	uxtb	r2, r3
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133c2:	0a9b      	lsrs	r3, r3, #10
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	f003 0303 	and.w	r3, r3, #3
 80133ca:	b2da      	uxtb	r2, r3
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133d6:	0a1b      	lsrs	r3, r3, #8
 80133d8:	b2db      	uxtb	r3, r3
 80133da:	f003 0303 	and.w	r3, r3, #3
 80133de:	b2da      	uxtb	r2, r3
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133ea:	085b      	lsrs	r3, r3, #1
 80133ec:	b2db      	uxtb	r3, r3
 80133ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133f2:	b2da      	uxtb	r2, r3
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	2201      	movs	r2, #1
 80133fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8013402:	2300      	movs	r3, #0
}
 8013404:	4618      	mov	r0, r3
 8013406:	370c      	adds	r7, #12
 8013408:	46bd      	mov	sp, r7
 801340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340e:	4770      	bx	lr
 8013410:	004005ff 	.word	0x004005ff

08013414 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8013414:	b480      	push	{r7}
 8013416:	b083      	sub	sp, #12
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801345e:	2300      	movs	r3, #0
}
 8013460:	4618      	mov	r0, r3
 8013462:	370c      	adds	r7, #12
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr

0801346c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b086      	sub	sp, #24
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8013474:	2300      	movs	r3, #0
 8013476:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8013478:	f107 030c 	add.w	r3, r7, #12
 801347c:	4619      	mov	r1, r3
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f000 f96e 	bl	8013760 <SD_SendStatus>
 8013484:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d005      	beq.n	8013498 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	431a      	orrs	r2, r3
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	0a5b      	lsrs	r3, r3, #9
 801349c:	f003 030f 	and.w	r3, r3, #15
 80134a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80134a2:	693b      	ldr	r3, [r7, #16]
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3718      	adds	r7, #24
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}

080134ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80134ac:	b5b0      	push	{r4, r5, r7, lr}
 80134ae:	b094      	sub	sp, #80	; 0x50
 80134b0:	af04      	add	r7, sp, #16
 80134b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80134b4:	2301      	movs	r3, #1
 80134b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	4618      	mov	r0, r3
 80134be:	f001 f81b 	bl	80144f8 <SDIO_GetPowerState>
 80134c2:	4603      	mov	r3, r0
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d102      	bne.n	80134ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80134c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80134cc:	e0b6      	b.n	801363c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134d2:	2b03      	cmp	r3, #3
 80134d4:	d02f      	beq.n	8013536 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	4618      	mov	r0, r3
 80134dc:	f001 fa01 	bl	80148e2 <SDMMC_CmdSendCID>
 80134e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80134e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d001      	beq.n	80134ec <SD_InitCard+0x40>
    {
      return errorstate;
 80134e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134ea:	e0a7      	b.n	801363c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	2100      	movs	r1, #0
 80134f2:	4618      	mov	r0, r3
 80134f4:	f001 f845 	bl	8014582 <SDIO_GetResponse>
 80134f8:	4602      	mov	r2, r0
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	2104      	movs	r1, #4
 8013504:	4618      	mov	r0, r3
 8013506:	f001 f83c 	bl	8014582 <SDIO_GetResponse>
 801350a:	4602      	mov	r2, r0
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2108      	movs	r1, #8
 8013516:	4618      	mov	r0, r3
 8013518:	f001 f833 	bl	8014582 <SDIO_GetResponse>
 801351c:	4602      	mov	r2, r0
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	210c      	movs	r1, #12
 8013528:	4618      	mov	r0, r3
 801352a:	f001 f82a 	bl	8014582 <SDIO_GetResponse>
 801352e:	4602      	mov	r2, r0
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801353a:	2b03      	cmp	r3, #3
 801353c:	d00d      	beq.n	801355a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f107 020e 	add.w	r2, r7, #14
 8013546:	4611      	mov	r1, r2
 8013548:	4618      	mov	r0, r3
 801354a:	f001 fa07 	bl	801495c <SDMMC_CmdSetRelAdd>
 801354e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8013550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013552:	2b00      	cmp	r3, #0
 8013554:	d001      	beq.n	801355a <SD_InitCard+0xae>
    {
      return errorstate;
 8013556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013558:	e070      	b.n	801363c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801355e:	2b03      	cmp	r3, #3
 8013560:	d036      	beq.n	80135d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8013562:	89fb      	ldrh	r3, [r7, #14]
 8013564:	461a      	mov	r2, r3
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	681a      	ldr	r2, [r3, #0]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013572:	041b      	lsls	r3, r3, #16
 8013574:	4619      	mov	r1, r3
 8013576:	4610      	mov	r0, r2
 8013578:	f001 f9d1 	bl	801491e <SDMMC_CmdSendCSD>
 801357c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013580:	2b00      	cmp	r3, #0
 8013582:	d001      	beq.n	8013588 <SD_InitCard+0xdc>
    {
      return errorstate;
 8013584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013586:	e059      	b.n	801363c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	2100      	movs	r1, #0
 801358e:	4618      	mov	r0, r3
 8013590:	f000 fff7 	bl	8014582 <SDIO_GetResponse>
 8013594:	4602      	mov	r2, r0
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	2104      	movs	r1, #4
 80135a0:	4618      	mov	r0, r3
 80135a2:	f000 ffee 	bl	8014582 <SDIO_GetResponse>
 80135a6:	4602      	mov	r2, r0
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2108      	movs	r1, #8
 80135b2:	4618      	mov	r0, r3
 80135b4:	f000 ffe5 	bl	8014582 <SDIO_GetResponse>
 80135b8:	4602      	mov	r2, r0
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	210c      	movs	r1, #12
 80135c4:	4618      	mov	r0, r3
 80135c6:	f000 ffdc 	bl	8014582 <SDIO_GetResponse>
 80135ca:	4602      	mov	r2, r0
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	2104      	movs	r1, #4
 80135d6:	4618      	mov	r0, r3
 80135d8:	f000 ffd3 	bl	8014582 <SDIO_GetResponse>
 80135dc:	4603      	mov	r3, r0
 80135de:	0d1a      	lsrs	r2, r3, #20
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80135e4:	f107 0310 	add.w	r3, r7, #16
 80135e8:	4619      	mov	r1, r3
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f7ff fd6e 	bl	80130cc <HAL_SD_GetCardCSD>
 80135f0:	4603      	mov	r3, r0
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d002      	beq.n	80135fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80135f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80135fa:	e01f      	b.n	801363c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6819      	ldr	r1, [r3, #0]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013604:	041b      	lsls	r3, r3, #16
 8013606:	461a      	mov	r2, r3
 8013608:	f04f 0300 	mov.w	r3, #0
 801360c:	4608      	mov	r0, r1
 801360e:	f001 f8c3 	bl	8014798 <SDMMC_CmdSelDesel>
 8013612:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8013614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013616:	2b00      	cmp	r3, #0
 8013618:	d001      	beq.n	801361e <SD_InitCard+0x172>
  {
    return errorstate;
 801361a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801361c:	e00e      	b.n	801363c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681d      	ldr	r5, [r3, #0]
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	466c      	mov	r4, sp
 8013626:	f103 0210 	add.w	r2, r3, #16
 801362a:	ca07      	ldmia	r2, {r0, r1, r2}
 801362c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013630:	3304      	adds	r3, #4
 8013632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013634:	4628      	mov	r0, r5
 8013636:	f000 ff07 	bl	8014448 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801363a:	2300      	movs	r3, #0
}
 801363c:	4618      	mov	r0, r3
 801363e:	3740      	adds	r7, #64	; 0x40
 8013640:	46bd      	mov	sp, r7
 8013642:	bdb0      	pop	{r4, r5, r7, pc}

08013644 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b086      	sub	sp, #24
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801364c:	2300      	movs	r3, #0
 801364e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8013650:	2300      	movs	r3, #0
 8013652:	617b      	str	r3, [r7, #20]
 8013654:	2300      	movs	r3, #0
 8013656:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	4618      	mov	r0, r3
 801365e:	f001 f8be 	bl	80147de <SDMMC_CmdGoIdleState>
 8013662:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d001      	beq.n	801366e <SD_PowerON+0x2a>
  {
    return errorstate;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	e072      	b.n	8013754 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	4618      	mov	r0, r3
 8013674:	f001 f8d1 	bl	801481a <SDMMC_CmdOperCond>
 8013678:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d00d      	beq.n	801369c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2200      	movs	r2, #0
 8013684:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	4618      	mov	r0, r3
 801368c:	f001 f8a7 	bl	80147de <SDMMC_CmdGoIdleState>
 8013690:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d004      	beq.n	80136a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	e05b      	b.n	8013754 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2201      	movs	r2, #1
 80136a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136a6:	2b01      	cmp	r3, #1
 80136a8:	d137      	bne.n	801371a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	2100      	movs	r1, #0
 80136b0:	4618      	mov	r0, r3
 80136b2:	f001 f8d1 	bl	8014858 <SDMMC_CmdAppCommand>
 80136b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d02d      	beq.n	801371a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80136be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80136c2:	e047      	b.n	8013754 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2100      	movs	r1, #0
 80136ca:	4618      	mov	r0, r3
 80136cc:	f001 f8c4 	bl	8014858 <SDMMC_CmdAppCommand>
 80136d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d001      	beq.n	80136dc <SD_PowerON+0x98>
    {
      return errorstate;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	e03b      	b.n	8013754 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	491e      	ldr	r1, [pc, #120]	; (801375c <SD_PowerON+0x118>)
 80136e2:	4618      	mov	r0, r3
 80136e4:	f001 f8da 	bl	801489c <SDMMC_CmdAppOperCommand>
 80136e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d002      	beq.n	80136f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80136f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80136f4:	e02e      	b.n	8013754 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	2100      	movs	r1, #0
 80136fc:	4618      	mov	r0, r3
 80136fe:	f000 ff40 	bl	8014582 <SDIO_GetResponse>
 8013702:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	0fdb      	lsrs	r3, r3, #31
 8013708:	2b01      	cmp	r3, #1
 801370a:	d101      	bne.n	8013710 <SD_PowerON+0xcc>
 801370c:	2301      	movs	r3, #1
 801370e:	e000      	b.n	8013712 <SD_PowerON+0xce>
 8013710:	2300      	movs	r3, #0
 8013712:	613b      	str	r3, [r7, #16]

    count++;
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	3301      	adds	r3, #1
 8013718:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013720:	4293      	cmp	r3, r2
 8013722:	d802      	bhi.n	801372a <SD_PowerON+0xe6>
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d0cc      	beq.n	80136c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013730:	4293      	cmp	r3, r2
 8013732:	d902      	bls.n	801373a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8013734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013738:	e00c      	b.n	8013754 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013740:	2b00      	cmp	r3, #0
 8013742:	d003      	beq.n	801374c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2201      	movs	r2, #1
 8013748:	645a      	str	r2, [r3, #68]	; 0x44
 801374a:	e002      	b.n	8013752 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2200      	movs	r2, #0
 8013750:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8013752:	2300      	movs	r3, #0
}
 8013754:	4618      	mov	r0, r3
 8013756:	3718      	adds	r7, #24
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}
 801375c:	c1100000 	.word	0xc1100000

08013760 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b084      	sub	sp, #16
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d102      	bne.n	8013776 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8013770:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013774:	e018      	b.n	80137a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681a      	ldr	r2, [r3, #0]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801377e:	041b      	lsls	r3, r3, #16
 8013780:	4619      	mov	r1, r3
 8013782:	4610      	mov	r0, r2
 8013784:	f001 f90b 	bl	801499e <SDMMC_CmdSendStatus>
 8013788:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d001      	beq.n	8013794 <SD_SendStatus+0x34>
  {
    return errorstate;
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	e009      	b.n	80137a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	2100      	movs	r1, #0
 801379a:	4618      	mov	r0, r3
 801379c:	f000 fef1 	bl	8014582 <SDIO_GetResponse>
 80137a0:	4602      	mov	r2, r0
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80137a6:	2300      	movs	r3, #0
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	3710      	adds	r7, #16
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d101      	bne.n	80137c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80137be:	2301      	movs	r3, #1
 80137c0:	e041      	b.n	8013846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80137c8:	b2db      	uxtb	r3, r3
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d106      	bne.n	80137dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2200      	movs	r2, #0
 80137d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f7fd f9fe 	bl	8010bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2202      	movs	r2, #2
 80137e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681a      	ldr	r2, [r3, #0]
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	3304      	adds	r3, #4
 80137ec:	4619      	mov	r1, r3
 80137ee:	4610      	mov	r0, r2
 80137f0:	f000 f95e 	bl	8013ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2201      	movs	r2, #1
 80137f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2201      	movs	r2, #1
 8013800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	2201      	movs	r2, #1
 8013808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2201      	movs	r2, #1
 8013810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2201      	movs	r2, #1
 8013818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2201      	movs	r2, #1
 8013820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2201      	movs	r2, #1
 8013828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2201      	movs	r2, #1
 8013830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2201      	movs	r2, #1
 8013838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2201      	movs	r2, #1
 8013840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013844:	2300      	movs	r3, #0
}
 8013846:	4618      	mov	r0, r3
 8013848:	3708      	adds	r7, #8
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
	...

08013850 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8013850:	b480      	push	{r7}
 8013852:	b085      	sub	sp, #20
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801385e:	b2db      	uxtb	r3, r3
 8013860:	2b01      	cmp	r3, #1
 8013862:	d001      	beq.n	8013868 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8013864:	2301      	movs	r3, #1
 8013866:	e046      	b.n	80138f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2202      	movs	r2, #2
 801386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	4a23      	ldr	r2, [pc, #140]	; (8013904 <HAL_TIM_Base_Start+0xb4>)
 8013876:	4293      	cmp	r3, r2
 8013878:	d022      	beq.n	80138c0 <HAL_TIM_Base_Start+0x70>
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013882:	d01d      	beq.n	80138c0 <HAL_TIM_Base_Start+0x70>
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	4a1f      	ldr	r2, [pc, #124]	; (8013908 <HAL_TIM_Base_Start+0xb8>)
 801388a:	4293      	cmp	r3, r2
 801388c:	d018      	beq.n	80138c0 <HAL_TIM_Base_Start+0x70>
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	4a1e      	ldr	r2, [pc, #120]	; (801390c <HAL_TIM_Base_Start+0xbc>)
 8013894:	4293      	cmp	r3, r2
 8013896:	d013      	beq.n	80138c0 <HAL_TIM_Base_Start+0x70>
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	4a1c      	ldr	r2, [pc, #112]	; (8013910 <HAL_TIM_Base_Start+0xc0>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	d00e      	beq.n	80138c0 <HAL_TIM_Base_Start+0x70>
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	4a1b      	ldr	r2, [pc, #108]	; (8013914 <HAL_TIM_Base_Start+0xc4>)
 80138a8:	4293      	cmp	r3, r2
 80138aa:	d009      	beq.n	80138c0 <HAL_TIM_Base_Start+0x70>
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	4a19      	ldr	r2, [pc, #100]	; (8013918 <HAL_TIM_Base_Start+0xc8>)
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d004      	beq.n	80138c0 <HAL_TIM_Base_Start+0x70>
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	4a18      	ldr	r2, [pc, #96]	; (801391c <HAL_TIM_Base_Start+0xcc>)
 80138bc:	4293      	cmp	r3, r2
 80138be:	d111      	bne.n	80138e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	689b      	ldr	r3, [r3, #8]
 80138c6:	f003 0307 	and.w	r3, r3, #7
 80138ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	2b06      	cmp	r3, #6
 80138d0:	d010      	beq.n	80138f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f042 0201 	orr.w	r2, r2, #1
 80138e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80138e2:	e007      	b.n	80138f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	681a      	ldr	r2, [r3, #0]
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	f042 0201 	orr.w	r2, r2, #1
 80138f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80138f4:	2300      	movs	r3, #0
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3714      	adds	r7, #20
 80138fa:	46bd      	mov	sp, r7
 80138fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013900:	4770      	bx	lr
 8013902:	bf00      	nop
 8013904:	40010000 	.word	0x40010000
 8013908:	40000400 	.word	0x40000400
 801390c:	40000800 	.word	0x40000800
 8013910:	40000c00 	.word	0x40000c00
 8013914:	40010400 	.word	0x40010400
 8013918:	40014000 	.word	0x40014000
 801391c:	40001800 	.word	0x40001800

08013920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b084      	sub	sp, #16
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801392a:	2300      	movs	r3, #0
 801392c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013934:	2b01      	cmp	r3, #1
 8013936:	d101      	bne.n	801393c <HAL_TIM_ConfigClockSource+0x1c>
 8013938:	2302      	movs	r3, #2
 801393a:	e0b4      	b.n	8013aa6 <HAL_TIM_ConfigClockSource+0x186>
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2201      	movs	r2, #1
 8013940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2202      	movs	r2, #2
 8013948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	689b      	ldr	r3, [r3, #8]
 8013952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801395a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	68ba      	ldr	r2, [r7, #8]
 801396a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013974:	d03e      	beq.n	80139f4 <HAL_TIM_ConfigClockSource+0xd4>
 8013976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801397a:	f200 8087 	bhi.w	8013a8c <HAL_TIM_ConfigClockSource+0x16c>
 801397e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013982:	f000 8086 	beq.w	8013a92 <HAL_TIM_ConfigClockSource+0x172>
 8013986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801398a:	d87f      	bhi.n	8013a8c <HAL_TIM_ConfigClockSource+0x16c>
 801398c:	2b70      	cmp	r3, #112	; 0x70
 801398e:	d01a      	beq.n	80139c6 <HAL_TIM_ConfigClockSource+0xa6>
 8013990:	2b70      	cmp	r3, #112	; 0x70
 8013992:	d87b      	bhi.n	8013a8c <HAL_TIM_ConfigClockSource+0x16c>
 8013994:	2b60      	cmp	r3, #96	; 0x60
 8013996:	d050      	beq.n	8013a3a <HAL_TIM_ConfigClockSource+0x11a>
 8013998:	2b60      	cmp	r3, #96	; 0x60
 801399a:	d877      	bhi.n	8013a8c <HAL_TIM_ConfigClockSource+0x16c>
 801399c:	2b50      	cmp	r3, #80	; 0x50
 801399e:	d03c      	beq.n	8013a1a <HAL_TIM_ConfigClockSource+0xfa>
 80139a0:	2b50      	cmp	r3, #80	; 0x50
 80139a2:	d873      	bhi.n	8013a8c <HAL_TIM_ConfigClockSource+0x16c>
 80139a4:	2b40      	cmp	r3, #64	; 0x40
 80139a6:	d058      	beq.n	8013a5a <HAL_TIM_ConfigClockSource+0x13a>
 80139a8:	2b40      	cmp	r3, #64	; 0x40
 80139aa:	d86f      	bhi.n	8013a8c <HAL_TIM_ConfigClockSource+0x16c>
 80139ac:	2b30      	cmp	r3, #48	; 0x30
 80139ae:	d064      	beq.n	8013a7a <HAL_TIM_ConfigClockSource+0x15a>
 80139b0:	2b30      	cmp	r3, #48	; 0x30
 80139b2:	d86b      	bhi.n	8013a8c <HAL_TIM_ConfigClockSource+0x16c>
 80139b4:	2b20      	cmp	r3, #32
 80139b6:	d060      	beq.n	8013a7a <HAL_TIM_ConfigClockSource+0x15a>
 80139b8:	2b20      	cmp	r3, #32
 80139ba:	d867      	bhi.n	8013a8c <HAL_TIM_ConfigClockSource+0x16c>
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d05c      	beq.n	8013a7a <HAL_TIM_ConfigClockSource+0x15a>
 80139c0:	2b10      	cmp	r3, #16
 80139c2:	d05a      	beq.n	8013a7a <HAL_TIM_ConfigClockSource+0x15a>
 80139c4:	e062      	b.n	8013a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	6818      	ldr	r0, [r3, #0]
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	6899      	ldr	r1, [r3, #8]
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	685a      	ldr	r2, [r3, #4]
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	68db      	ldr	r3, [r3, #12]
 80139d6:	f000 f985 	bl	8013ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	689b      	ldr	r3, [r3, #8]
 80139e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80139e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	68ba      	ldr	r2, [r7, #8]
 80139f0:	609a      	str	r2, [r3, #8]
      break;
 80139f2:	e04f      	b.n	8013a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	6818      	ldr	r0, [r3, #0]
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	6899      	ldr	r1, [r3, #8]
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	685a      	ldr	r2, [r3, #4]
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	68db      	ldr	r3, [r3, #12]
 8013a04:	f000 f96e 	bl	8013ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	689a      	ldr	r2, [r3, #8]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013a16:	609a      	str	r2, [r3, #8]
      break;
 8013a18:	e03c      	b.n	8013a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6818      	ldr	r0, [r3, #0]
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	6859      	ldr	r1, [r3, #4]
 8013a22:	683b      	ldr	r3, [r7, #0]
 8013a24:	68db      	ldr	r3, [r3, #12]
 8013a26:	461a      	mov	r2, r3
 8013a28:	f000 f8e2 	bl	8013bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2150      	movs	r1, #80	; 0x50
 8013a32:	4618      	mov	r0, r3
 8013a34:	f000 f93b 	bl	8013cae <TIM_ITRx_SetConfig>
      break;
 8013a38:	e02c      	b.n	8013a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	6818      	ldr	r0, [r3, #0]
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	6859      	ldr	r1, [r3, #4]
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	68db      	ldr	r3, [r3, #12]
 8013a46:	461a      	mov	r2, r3
 8013a48:	f000 f901 	bl	8013c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2160      	movs	r1, #96	; 0x60
 8013a52:	4618      	mov	r0, r3
 8013a54:	f000 f92b 	bl	8013cae <TIM_ITRx_SetConfig>
      break;
 8013a58:	e01c      	b.n	8013a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	6818      	ldr	r0, [r3, #0]
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	6859      	ldr	r1, [r3, #4]
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	68db      	ldr	r3, [r3, #12]
 8013a66:	461a      	mov	r2, r3
 8013a68:	f000 f8c2 	bl	8013bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	2140      	movs	r1, #64	; 0x40
 8013a72:	4618      	mov	r0, r3
 8013a74:	f000 f91b 	bl	8013cae <TIM_ITRx_SetConfig>
      break;
 8013a78:	e00c      	b.n	8013a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681a      	ldr	r2, [r3, #0]
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	4619      	mov	r1, r3
 8013a84:	4610      	mov	r0, r2
 8013a86:	f000 f912 	bl	8013cae <TIM_ITRx_SetConfig>
      break;
 8013a8a:	e003      	b.n	8013a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8013a8c:	2301      	movs	r3, #1
 8013a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8013a90:	e000      	b.n	8013a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8013a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	2201      	movs	r2, #1
 8013a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	3710      	adds	r7, #16
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
	...

08013ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013ab0:	b480      	push	{r7}
 8013ab2:	b085      	sub	sp, #20
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	4a40      	ldr	r2, [pc, #256]	; (8013bc4 <TIM_Base_SetConfig+0x114>)
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	d013      	beq.n	8013af0 <TIM_Base_SetConfig+0x40>
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013ace:	d00f      	beq.n	8013af0 <TIM_Base_SetConfig+0x40>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	4a3d      	ldr	r2, [pc, #244]	; (8013bc8 <TIM_Base_SetConfig+0x118>)
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	d00b      	beq.n	8013af0 <TIM_Base_SetConfig+0x40>
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	4a3c      	ldr	r2, [pc, #240]	; (8013bcc <TIM_Base_SetConfig+0x11c>)
 8013adc:	4293      	cmp	r3, r2
 8013ade:	d007      	beq.n	8013af0 <TIM_Base_SetConfig+0x40>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	4a3b      	ldr	r2, [pc, #236]	; (8013bd0 <TIM_Base_SetConfig+0x120>)
 8013ae4:	4293      	cmp	r3, r2
 8013ae6:	d003      	beq.n	8013af0 <TIM_Base_SetConfig+0x40>
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	4a3a      	ldr	r2, [pc, #232]	; (8013bd4 <TIM_Base_SetConfig+0x124>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d108      	bne.n	8013b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	685b      	ldr	r3, [r3, #4]
 8013afc:	68fa      	ldr	r2, [r7, #12]
 8013afe:	4313      	orrs	r3, r2
 8013b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	4a2f      	ldr	r2, [pc, #188]	; (8013bc4 <TIM_Base_SetConfig+0x114>)
 8013b06:	4293      	cmp	r3, r2
 8013b08:	d02b      	beq.n	8013b62 <TIM_Base_SetConfig+0xb2>
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b10:	d027      	beq.n	8013b62 <TIM_Base_SetConfig+0xb2>
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	4a2c      	ldr	r2, [pc, #176]	; (8013bc8 <TIM_Base_SetConfig+0x118>)
 8013b16:	4293      	cmp	r3, r2
 8013b18:	d023      	beq.n	8013b62 <TIM_Base_SetConfig+0xb2>
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	4a2b      	ldr	r2, [pc, #172]	; (8013bcc <TIM_Base_SetConfig+0x11c>)
 8013b1e:	4293      	cmp	r3, r2
 8013b20:	d01f      	beq.n	8013b62 <TIM_Base_SetConfig+0xb2>
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	4a2a      	ldr	r2, [pc, #168]	; (8013bd0 <TIM_Base_SetConfig+0x120>)
 8013b26:	4293      	cmp	r3, r2
 8013b28:	d01b      	beq.n	8013b62 <TIM_Base_SetConfig+0xb2>
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	4a29      	ldr	r2, [pc, #164]	; (8013bd4 <TIM_Base_SetConfig+0x124>)
 8013b2e:	4293      	cmp	r3, r2
 8013b30:	d017      	beq.n	8013b62 <TIM_Base_SetConfig+0xb2>
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	4a28      	ldr	r2, [pc, #160]	; (8013bd8 <TIM_Base_SetConfig+0x128>)
 8013b36:	4293      	cmp	r3, r2
 8013b38:	d013      	beq.n	8013b62 <TIM_Base_SetConfig+0xb2>
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	4a27      	ldr	r2, [pc, #156]	; (8013bdc <TIM_Base_SetConfig+0x12c>)
 8013b3e:	4293      	cmp	r3, r2
 8013b40:	d00f      	beq.n	8013b62 <TIM_Base_SetConfig+0xb2>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	4a26      	ldr	r2, [pc, #152]	; (8013be0 <TIM_Base_SetConfig+0x130>)
 8013b46:	4293      	cmp	r3, r2
 8013b48:	d00b      	beq.n	8013b62 <TIM_Base_SetConfig+0xb2>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	4a25      	ldr	r2, [pc, #148]	; (8013be4 <TIM_Base_SetConfig+0x134>)
 8013b4e:	4293      	cmp	r3, r2
 8013b50:	d007      	beq.n	8013b62 <TIM_Base_SetConfig+0xb2>
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	4a24      	ldr	r2, [pc, #144]	; (8013be8 <TIM_Base_SetConfig+0x138>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d003      	beq.n	8013b62 <TIM_Base_SetConfig+0xb2>
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	4a23      	ldr	r2, [pc, #140]	; (8013bec <TIM_Base_SetConfig+0x13c>)
 8013b5e:	4293      	cmp	r3, r2
 8013b60:	d108      	bne.n	8013b74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	68db      	ldr	r3, [r3, #12]
 8013b6e:	68fa      	ldr	r2, [r7, #12]
 8013b70:	4313      	orrs	r3, r2
 8013b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	695b      	ldr	r3, [r3, #20]
 8013b7e:	4313      	orrs	r3, r2
 8013b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	68fa      	ldr	r2, [r7, #12]
 8013b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	689a      	ldr	r2, [r3, #8]
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	681a      	ldr	r2, [r3, #0]
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	4a0a      	ldr	r2, [pc, #40]	; (8013bc4 <TIM_Base_SetConfig+0x114>)
 8013b9c:	4293      	cmp	r3, r2
 8013b9e:	d003      	beq.n	8013ba8 <TIM_Base_SetConfig+0xf8>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	4a0c      	ldr	r2, [pc, #48]	; (8013bd4 <TIM_Base_SetConfig+0x124>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d103      	bne.n	8013bb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	691a      	ldr	r2, [r3, #16]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2201      	movs	r2, #1
 8013bb4:	615a      	str	r2, [r3, #20]
}
 8013bb6:	bf00      	nop
 8013bb8:	3714      	adds	r7, #20
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc0:	4770      	bx	lr
 8013bc2:	bf00      	nop
 8013bc4:	40010000 	.word	0x40010000
 8013bc8:	40000400 	.word	0x40000400
 8013bcc:	40000800 	.word	0x40000800
 8013bd0:	40000c00 	.word	0x40000c00
 8013bd4:	40010400 	.word	0x40010400
 8013bd8:	40014000 	.word	0x40014000
 8013bdc:	40014400 	.word	0x40014400
 8013be0:	40014800 	.word	0x40014800
 8013be4:	40001800 	.word	0x40001800
 8013be8:	40001c00 	.word	0x40001c00
 8013bec:	40002000 	.word	0x40002000

08013bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b087      	sub	sp, #28
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	60f8      	str	r0, [r7, #12]
 8013bf8:	60b9      	str	r1, [r7, #8]
 8013bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	6a1b      	ldr	r3, [r3, #32]
 8013c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	6a1b      	ldr	r3, [r3, #32]
 8013c06:	f023 0201 	bic.w	r2, r3, #1
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	699b      	ldr	r3, [r3, #24]
 8013c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013c14:	693b      	ldr	r3, [r7, #16]
 8013c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	011b      	lsls	r3, r3, #4
 8013c20:	693a      	ldr	r2, [r7, #16]
 8013c22:	4313      	orrs	r3, r2
 8013c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	f023 030a 	bic.w	r3, r3, #10
 8013c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013c2e:	697a      	ldr	r2, [r7, #20]
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	4313      	orrs	r3, r2
 8013c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	693a      	ldr	r2, [r7, #16]
 8013c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	697a      	ldr	r2, [r7, #20]
 8013c40:	621a      	str	r2, [r3, #32]
}
 8013c42:	bf00      	nop
 8013c44:	371c      	adds	r7, #28
 8013c46:	46bd      	mov	sp, r7
 8013c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4c:	4770      	bx	lr

08013c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013c4e:	b480      	push	{r7}
 8013c50:	b087      	sub	sp, #28
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	60f8      	str	r0, [r7, #12]
 8013c56:	60b9      	str	r1, [r7, #8]
 8013c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	6a1b      	ldr	r3, [r3, #32]
 8013c5e:	f023 0210 	bic.w	r2, r3, #16
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	699b      	ldr	r3, [r3, #24]
 8013c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	6a1b      	ldr	r3, [r3, #32]
 8013c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013c72:	697b      	ldr	r3, [r7, #20]
 8013c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	031b      	lsls	r3, r3, #12
 8013c7e:	697a      	ldr	r2, [r7, #20]
 8013c80:	4313      	orrs	r3, r2
 8013c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	011b      	lsls	r3, r3, #4
 8013c90:	693a      	ldr	r2, [r7, #16]
 8013c92:	4313      	orrs	r3, r2
 8013c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	697a      	ldr	r2, [r7, #20]
 8013c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	693a      	ldr	r2, [r7, #16]
 8013ca0:	621a      	str	r2, [r3, #32]
}
 8013ca2:	bf00      	nop
 8013ca4:	371c      	adds	r7, #28
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cac:	4770      	bx	lr

08013cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013cae:	b480      	push	{r7}
 8013cb0:	b085      	sub	sp, #20
 8013cb2:	af00      	add	r7, sp, #0
 8013cb4:	6078      	str	r0, [r7, #4]
 8013cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	689b      	ldr	r3, [r3, #8]
 8013cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013cc6:	683a      	ldr	r2, [r7, #0]
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	4313      	orrs	r3, r2
 8013ccc:	f043 0307 	orr.w	r3, r3, #7
 8013cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	68fa      	ldr	r2, [r7, #12]
 8013cd6:	609a      	str	r2, [r3, #8]
}
 8013cd8:	bf00      	nop
 8013cda:	3714      	adds	r7, #20
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce2:	4770      	bx	lr

08013ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b087      	sub	sp, #28
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	60f8      	str	r0, [r7, #12]
 8013cec:	60b9      	str	r1, [r7, #8]
 8013cee:	607a      	str	r2, [r7, #4]
 8013cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	689b      	ldr	r3, [r3, #8]
 8013cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	021a      	lsls	r2, r3, #8
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	431a      	orrs	r2, r3
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	4313      	orrs	r3, r2
 8013d0c:	697a      	ldr	r2, [r7, #20]
 8013d0e:	4313      	orrs	r3, r2
 8013d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	697a      	ldr	r2, [r7, #20]
 8013d16:	609a      	str	r2, [r3, #8]
}
 8013d18:	bf00      	nop
 8013d1a:	371c      	adds	r7, #28
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr

08013d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013d24:	b480      	push	{r7}
 8013d26:	b085      	sub	sp, #20
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d34:	2b01      	cmp	r3, #1
 8013d36:	d101      	bne.n	8013d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013d38:	2302      	movs	r3, #2
 8013d3a:	e05a      	b.n	8013df2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2201      	movs	r2, #1
 8013d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2202      	movs	r2, #2
 8013d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	685b      	ldr	r3, [r3, #4]
 8013d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	689b      	ldr	r3, [r3, #8]
 8013d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	68fa      	ldr	r2, [r7, #12]
 8013d6a:	4313      	orrs	r3, r2
 8013d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	68fa      	ldr	r2, [r7, #12]
 8013d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	4a21      	ldr	r2, [pc, #132]	; (8013e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8013d7c:	4293      	cmp	r3, r2
 8013d7e:	d022      	beq.n	8013dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d88:	d01d      	beq.n	8013dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	4a1d      	ldr	r2, [pc, #116]	; (8013e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8013d90:	4293      	cmp	r3, r2
 8013d92:	d018      	beq.n	8013dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	4a1b      	ldr	r2, [pc, #108]	; (8013e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	d013      	beq.n	8013dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	4a1a      	ldr	r2, [pc, #104]	; (8013e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013da4:	4293      	cmp	r3, r2
 8013da6:	d00e      	beq.n	8013dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	4a18      	ldr	r2, [pc, #96]	; (8013e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8013dae:	4293      	cmp	r3, r2
 8013db0:	d009      	beq.n	8013dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	4a17      	ldr	r2, [pc, #92]	; (8013e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8013db8:	4293      	cmp	r3, r2
 8013dba:	d004      	beq.n	8013dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	4a15      	ldr	r2, [pc, #84]	; (8013e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013dc2:	4293      	cmp	r3, r2
 8013dc4:	d10c      	bne.n	8013de0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	685b      	ldr	r3, [r3, #4]
 8013dd2:	68ba      	ldr	r2, [r7, #8]
 8013dd4:	4313      	orrs	r3, r2
 8013dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	68ba      	ldr	r2, [r7, #8]
 8013dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2201      	movs	r2, #1
 8013de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2200      	movs	r2, #0
 8013dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013df0:	2300      	movs	r3, #0
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3714      	adds	r7, #20
 8013df6:	46bd      	mov	sp, r7
 8013df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfc:	4770      	bx	lr
 8013dfe:	bf00      	nop
 8013e00:	40010000 	.word	0x40010000
 8013e04:	40000400 	.word	0x40000400
 8013e08:	40000800 	.word	0x40000800
 8013e0c:	40000c00 	.word	0x40000c00
 8013e10:	40010400 	.word	0x40010400
 8013e14:	40014000 	.word	0x40014000
 8013e18:	40001800 	.word	0x40001800

08013e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b082      	sub	sp, #8
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d101      	bne.n	8013e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	e03f      	b.n	8013eae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e34:	b2db      	uxtb	r3, r3
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d106      	bne.n	8013e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f7fc feea 	bl	8010c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2224      	movs	r2, #36	; 0x24
 8013e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	68da      	ldr	r2, [r3, #12]
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f000 f929 	bl	80140b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	691a      	ldr	r2, [r3, #16]
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	695a      	ldr	r2, [r3, #20]
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	68da      	ldr	r2, [r3, #12]
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	2200      	movs	r2, #0
 8013e9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2220      	movs	r2, #32
 8013ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2220      	movs	r2, #32
 8013ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013eac:	2300      	movs	r3, #0
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3708      	adds	r7, #8
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}

08013eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013eb6:	b580      	push	{r7, lr}
 8013eb8:	b08a      	sub	sp, #40	; 0x28
 8013eba:	af02      	add	r7, sp, #8
 8013ebc:	60f8      	str	r0, [r7, #12]
 8013ebe:	60b9      	str	r1, [r7, #8]
 8013ec0:	603b      	str	r3, [r7, #0]
 8013ec2:	4613      	mov	r3, r2
 8013ec4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ed0:	b2db      	uxtb	r3, r3
 8013ed2:	2b20      	cmp	r3, #32
 8013ed4:	d17c      	bne.n	8013fd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d002      	beq.n	8013ee2 <HAL_UART_Transmit+0x2c>
 8013edc:	88fb      	ldrh	r3, [r7, #6]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d101      	bne.n	8013ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	e075      	b.n	8013fd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013eec:	2b01      	cmp	r3, #1
 8013eee:	d101      	bne.n	8013ef4 <HAL_UART_Transmit+0x3e>
 8013ef0:	2302      	movs	r3, #2
 8013ef2:	e06e      	b.n	8013fd2 <HAL_UART_Transmit+0x11c>
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2201      	movs	r2, #1
 8013ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	2200      	movs	r2, #0
 8013f00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	2221      	movs	r2, #33	; 0x21
 8013f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013f0a:	f7fd fab5 	bl	8011478 <HAL_GetTick>
 8013f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	88fa      	ldrh	r2, [r7, #6]
 8013f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	88fa      	ldrh	r2, [r7, #6]
 8013f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	689b      	ldr	r3, [r3, #8]
 8013f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013f24:	d108      	bne.n	8013f38 <HAL_UART_Transmit+0x82>
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	691b      	ldr	r3, [r3, #16]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d104      	bne.n	8013f38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	61bb      	str	r3, [r7, #24]
 8013f36:	e003      	b.n	8013f40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	2200      	movs	r2, #0
 8013f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8013f48:	e02a      	b.n	8013fa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	9300      	str	r3, [sp, #0]
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	2200      	movs	r2, #0
 8013f52:	2180      	movs	r1, #128	; 0x80
 8013f54:	68f8      	ldr	r0, [r7, #12]
 8013f56:	f000 f840 	bl	8013fda <UART_WaitOnFlagUntilTimeout>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d001      	beq.n	8013f64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8013f60:	2303      	movs	r3, #3
 8013f62:	e036      	b.n	8013fd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8013f64:	69fb      	ldr	r3, [r7, #28]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d10b      	bne.n	8013f82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013f6a:	69bb      	ldr	r3, [r7, #24]
 8013f6c:	881b      	ldrh	r3, [r3, #0]
 8013f6e:	461a      	mov	r2, r3
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8013f7a:	69bb      	ldr	r3, [r7, #24]
 8013f7c:	3302      	adds	r3, #2
 8013f7e:	61bb      	str	r3, [r7, #24]
 8013f80:	e007      	b.n	8013f92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	781a      	ldrb	r2, [r3, #0]
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8013f8c:	69fb      	ldr	r3, [r7, #28]
 8013f8e:	3301      	adds	r3, #1
 8013f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013f96:	b29b      	uxth	r3, r3
 8013f98:	3b01      	subs	r3, #1
 8013f9a:	b29a      	uxth	r2, r3
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013fa4:	b29b      	uxth	r3, r3
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d1cf      	bne.n	8013f4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	9300      	str	r3, [sp, #0]
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	2140      	movs	r1, #64	; 0x40
 8013fb4:	68f8      	ldr	r0, [r7, #12]
 8013fb6:	f000 f810 	bl	8013fda <UART_WaitOnFlagUntilTimeout>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d001      	beq.n	8013fc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8013fc0:	2303      	movs	r3, #3
 8013fc2:	e006      	b.n	8013fd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2220      	movs	r2, #32
 8013fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	e000      	b.n	8013fd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8013fd0:	2302      	movs	r3, #2
  }
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3720      	adds	r7, #32
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}

08013fda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8013fda:	b580      	push	{r7, lr}
 8013fdc:	b090      	sub	sp, #64	; 0x40
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	60f8      	str	r0, [r7, #12]
 8013fe2:	60b9      	str	r1, [r7, #8]
 8013fe4:	603b      	str	r3, [r7, #0]
 8013fe6:	4613      	mov	r3, r2
 8013fe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013fea:	e050      	b.n	801408e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ff2:	d04c      	beq.n	801408e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8013ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d007      	beq.n	801400a <UART_WaitOnFlagUntilTimeout+0x30>
 8013ffa:	f7fd fa3d 	bl	8011478 <HAL_GetTick>
 8013ffe:	4602      	mov	r2, r0
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	1ad3      	subs	r3, r2, r3
 8014004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014006:	429a      	cmp	r2, r3
 8014008:	d241      	bcs.n	801408e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	330c      	adds	r3, #12
 8014010:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014014:	e853 3f00 	ldrex	r3, [r3]
 8014018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014020:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	330c      	adds	r3, #12
 8014028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801402a:	637a      	str	r2, [r7, #52]	; 0x34
 801402c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801402e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014032:	e841 2300 	strex	r3, r2, [r1]
 8014036:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801403a:	2b00      	cmp	r3, #0
 801403c:	d1e5      	bne.n	801400a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	3314      	adds	r3, #20
 8014044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	e853 3f00 	ldrex	r3, [r3]
 801404c:	613b      	str	r3, [r7, #16]
   return(result);
 801404e:	693b      	ldr	r3, [r7, #16]
 8014050:	f023 0301 	bic.w	r3, r3, #1
 8014054:	63bb      	str	r3, [r7, #56]	; 0x38
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	3314      	adds	r3, #20
 801405c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801405e:	623a      	str	r2, [r7, #32]
 8014060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014062:	69f9      	ldr	r1, [r7, #28]
 8014064:	6a3a      	ldr	r2, [r7, #32]
 8014066:	e841 2300 	strex	r3, r2, [r1]
 801406a:	61bb      	str	r3, [r7, #24]
   return(result);
 801406c:	69bb      	ldr	r3, [r7, #24]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d1e5      	bne.n	801403e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	2220      	movs	r2, #32
 8014076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2220      	movs	r2, #32
 801407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	2200      	movs	r2, #0
 8014086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801408a:	2303      	movs	r3, #3
 801408c:	e00f      	b.n	80140ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	681a      	ldr	r2, [r3, #0]
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	4013      	ands	r3, r2
 8014098:	68ba      	ldr	r2, [r7, #8]
 801409a:	429a      	cmp	r2, r3
 801409c:	bf0c      	ite	eq
 801409e:	2301      	moveq	r3, #1
 80140a0:	2300      	movne	r3, #0
 80140a2:	b2db      	uxtb	r3, r3
 80140a4:	461a      	mov	r2, r3
 80140a6:	79fb      	ldrb	r3, [r7, #7]
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d09f      	beq.n	8013fec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80140ac:	2300      	movs	r3, #0
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	3740      	adds	r7, #64	; 0x40
 80140b2:	46bd      	mov	sp, r7
 80140b4:	bd80      	pop	{r7, pc}
	...

080140b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80140b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140bc:	b09f      	sub	sp, #124	; 0x7c
 80140be:	af00      	add	r7, sp, #0
 80140c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80140c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	691b      	ldr	r3, [r3, #16]
 80140c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80140cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140ce:	68d9      	ldr	r1, [r3, #12]
 80140d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140d2:	681a      	ldr	r2, [r3, #0]
 80140d4:	ea40 0301 	orr.w	r3, r0, r1
 80140d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80140da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140dc:	689a      	ldr	r2, [r3, #8]
 80140de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140e0:	691b      	ldr	r3, [r3, #16]
 80140e2:	431a      	orrs	r2, r3
 80140e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140e6:	695b      	ldr	r3, [r3, #20]
 80140e8:	431a      	orrs	r2, r3
 80140ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140ec:	69db      	ldr	r3, [r3, #28]
 80140ee:	4313      	orrs	r3, r2
 80140f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80140f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	68db      	ldr	r3, [r3, #12]
 80140f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80140fc:	f021 010c 	bic.w	r1, r1, #12
 8014100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014102:	681a      	ldr	r2, [r3, #0]
 8014104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014106:	430b      	orrs	r3, r1
 8014108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801410a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	695b      	ldr	r3, [r3, #20]
 8014110:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8014114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014116:	6999      	ldr	r1, [r3, #24]
 8014118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801411a:	681a      	ldr	r2, [r3, #0]
 801411c:	ea40 0301 	orr.w	r3, r0, r1
 8014120:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014124:	681a      	ldr	r2, [r3, #0]
 8014126:	4bc5      	ldr	r3, [pc, #788]	; (801443c <UART_SetConfig+0x384>)
 8014128:	429a      	cmp	r2, r3
 801412a:	d004      	beq.n	8014136 <UART_SetConfig+0x7e>
 801412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801412e:	681a      	ldr	r2, [r3, #0]
 8014130:	4bc3      	ldr	r3, [pc, #780]	; (8014440 <UART_SetConfig+0x388>)
 8014132:	429a      	cmp	r2, r3
 8014134:	d103      	bne.n	801413e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014136:	f7fe fba3 	bl	8012880 <HAL_RCC_GetPCLK2Freq>
 801413a:	6778      	str	r0, [r7, #116]	; 0x74
 801413c:	e002      	b.n	8014144 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801413e:	f7fe fb8b 	bl	8012858 <HAL_RCC_GetPCLK1Freq>
 8014142:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014146:	69db      	ldr	r3, [r3, #28]
 8014148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801414c:	f040 80b6 	bne.w	80142bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014152:	461c      	mov	r4, r3
 8014154:	f04f 0500 	mov.w	r5, #0
 8014158:	4622      	mov	r2, r4
 801415a:	462b      	mov	r3, r5
 801415c:	1891      	adds	r1, r2, r2
 801415e:	6439      	str	r1, [r7, #64]	; 0x40
 8014160:	415b      	adcs	r3, r3
 8014162:	647b      	str	r3, [r7, #68]	; 0x44
 8014164:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8014168:	1912      	adds	r2, r2, r4
 801416a:	eb45 0303 	adc.w	r3, r5, r3
 801416e:	f04f 0000 	mov.w	r0, #0
 8014172:	f04f 0100 	mov.w	r1, #0
 8014176:	00d9      	lsls	r1, r3, #3
 8014178:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801417c:	00d0      	lsls	r0, r2, #3
 801417e:	4602      	mov	r2, r0
 8014180:	460b      	mov	r3, r1
 8014182:	1911      	adds	r1, r2, r4
 8014184:	6639      	str	r1, [r7, #96]	; 0x60
 8014186:	416b      	adcs	r3, r5
 8014188:	667b      	str	r3, [r7, #100]	; 0x64
 801418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	461a      	mov	r2, r3
 8014190:	f04f 0300 	mov.w	r3, #0
 8014194:	1891      	adds	r1, r2, r2
 8014196:	63b9      	str	r1, [r7, #56]	; 0x38
 8014198:	415b      	adcs	r3, r3
 801419a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801419c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80141a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80141a4:	f7ec fd00 	bl	8000ba8 <__aeabi_uldivmod>
 80141a8:	4602      	mov	r2, r0
 80141aa:	460b      	mov	r3, r1
 80141ac:	4ba5      	ldr	r3, [pc, #660]	; (8014444 <UART_SetConfig+0x38c>)
 80141ae:	fba3 2302 	umull	r2, r3, r3, r2
 80141b2:	095b      	lsrs	r3, r3, #5
 80141b4:	011e      	lsls	r6, r3, #4
 80141b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80141b8:	461c      	mov	r4, r3
 80141ba:	f04f 0500 	mov.w	r5, #0
 80141be:	4622      	mov	r2, r4
 80141c0:	462b      	mov	r3, r5
 80141c2:	1891      	adds	r1, r2, r2
 80141c4:	6339      	str	r1, [r7, #48]	; 0x30
 80141c6:	415b      	adcs	r3, r3
 80141c8:	637b      	str	r3, [r7, #52]	; 0x34
 80141ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80141ce:	1912      	adds	r2, r2, r4
 80141d0:	eb45 0303 	adc.w	r3, r5, r3
 80141d4:	f04f 0000 	mov.w	r0, #0
 80141d8:	f04f 0100 	mov.w	r1, #0
 80141dc:	00d9      	lsls	r1, r3, #3
 80141de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80141e2:	00d0      	lsls	r0, r2, #3
 80141e4:	4602      	mov	r2, r0
 80141e6:	460b      	mov	r3, r1
 80141e8:	1911      	adds	r1, r2, r4
 80141ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80141ec:	416b      	adcs	r3, r5
 80141ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80141f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141f2:	685b      	ldr	r3, [r3, #4]
 80141f4:	461a      	mov	r2, r3
 80141f6:	f04f 0300 	mov.w	r3, #0
 80141fa:	1891      	adds	r1, r2, r2
 80141fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80141fe:	415b      	adcs	r3, r3
 8014200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014206:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801420a:	f7ec fccd 	bl	8000ba8 <__aeabi_uldivmod>
 801420e:	4602      	mov	r2, r0
 8014210:	460b      	mov	r3, r1
 8014212:	4b8c      	ldr	r3, [pc, #560]	; (8014444 <UART_SetConfig+0x38c>)
 8014214:	fba3 1302 	umull	r1, r3, r3, r2
 8014218:	095b      	lsrs	r3, r3, #5
 801421a:	2164      	movs	r1, #100	; 0x64
 801421c:	fb01 f303 	mul.w	r3, r1, r3
 8014220:	1ad3      	subs	r3, r2, r3
 8014222:	00db      	lsls	r3, r3, #3
 8014224:	3332      	adds	r3, #50	; 0x32
 8014226:	4a87      	ldr	r2, [pc, #540]	; (8014444 <UART_SetConfig+0x38c>)
 8014228:	fba2 2303 	umull	r2, r3, r2, r3
 801422c:	095b      	lsrs	r3, r3, #5
 801422e:	005b      	lsls	r3, r3, #1
 8014230:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014234:	441e      	add	r6, r3
 8014236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014238:	4618      	mov	r0, r3
 801423a:	f04f 0100 	mov.w	r1, #0
 801423e:	4602      	mov	r2, r0
 8014240:	460b      	mov	r3, r1
 8014242:	1894      	adds	r4, r2, r2
 8014244:	623c      	str	r4, [r7, #32]
 8014246:	415b      	adcs	r3, r3
 8014248:	627b      	str	r3, [r7, #36]	; 0x24
 801424a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801424e:	1812      	adds	r2, r2, r0
 8014250:	eb41 0303 	adc.w	r3, r1, r3
 8014254:	f04f 0400 	mov.w	r4, #0
 8014258:	f04f 0500 	mov.w	r5, #0
 801425c:	00dd      	lsls	r5, r3, #3
 801425e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014262:	00d4      	lsls	r4, r2, #3
 8014264:	4622      	mov	r2, r4
 8014266:	462b      	mov	r3, r5
 8014268:	1814      	adds	r4, r2, r0
 801426a:	653c      	str	r4, [r7, #80]	; 0x50
 801426c:	414b      	adcs	r3, r1
 801426e:	657b      	str	r3, [r7, #84]	; 0x54
 8014270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014272:	685b      	ldr	r3, [r3, #4]
 8014274:	461a      	mov	r2, r3
 8014276:	f04f 0300 	mov.w	r3, #0
 801427a:	1891      	adds	r1, r2, r2
 801427c:	61b9      	str	r1, [r7, #24]
 801427e:	415b      	adcs	r3, r3
 8014280:	61fb      	str	r3, [r7, #28]
 8014282:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014286:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801428a:	f7ec fc8d 	bl	8000ba8 <__aeabi_uldivmod>
 801428e:	4602      	mov	r2, r0
 8014290:	460b      	mov	r3, r1
 8014292:	4b6c      	ldr	r3, [pc, #432]	; (8014444 <UART_SetConfig+0x38c>)
 8014294:	fba3 1302 	umull	r1, r3, r3, r2
 8014298:	095b      	lsrs	r3, r3, #5
 801429a:	2164      	movs	r1, #100	; 0x64
 801429c:	fb01 f303 	mul.w	r3, r1, r3
 80142a0:	1ad3      	subs	r3, r2, r3
 80142a2:	00db      	lsls	r3, r3, #3
 80142a4:	3332      	adds	r3, #50	; 0x32
 80142a6:	4a67      	ldr	r2, [pc, #412]	; (8014444 <UART_SetConfig+0x38c>)
 80142a8:	fba2 2303 	umull	r2, r3, r2, r3
 80142ac:	095b      	lsrs	r3, r3, #5
 80142ae:	f003 0207 	and.w	r2, r3, #7
 80142b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	4432      	add	r2, r6
 80142b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80142ba:	e0b9      	b.n	8014430 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80142bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80142be:	461c      	mov	r4, r3
 80142c0:	f04f 0500 	mov.w	r5, #0
 80142c4:	4622      	mov	r2, r4
 80142c6:	462b      	mov	r3, r5
 80142c8:	1891      	adds	r1, r2, r2
 80142ca:	6139      	str	r1, [r7, #16]
 80142cc:	415b      	adcs	r3, r3
 80142ce:	617b      	str	r3, [r7, #20]
 80142d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80142d4:	1912      	adds	r2, r2, r4
 80142d6:	eb45 0303 	adc.w	r3, r5, r3
 80142da:	f04f 0000 	mov.w	r0, #0
 80142de:	f04f 0100 	mov.w	r1, #0
 80142e2:	00d9      	lsls	r1, r3, #3
 80142e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80142e8:	00d0      	lsls	r0, r2, #3
 80142ea:	4602      	mov	r2, r0
 80142ec:	460b      	mov	r3, r1
 80142ee:	eb12 0804 	adds.w	r8, r2, r4
 80142f2:	eb43 0905 	adc.w	r9, r3, r5
 80142f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142f8:	685b      	ldr	r3, [r3, #4]
 80142fa:	4618      	mov	r0, r3
 80142fc:	f04f 0100 	mov.w	r1, #0
 8014300:	f04f 0200 	mov.w	r2, #0
 8014304:	f04f 0300 	mov.w	r3, #0
 8014308:	008b      	lsls	r3, r1, #2
 801430a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801430e:	0082      	lsls	r2, r0, #2
 8014310:	4640      	mov	r0, r8
 8014312:	4649      	mov	r1, r9
 8014314:	f7ec fc48 	bl	8000ba8 <__aeabi_uldivmod>
 8014318:	4602      	mov	r2, r0
 801431a:	460b      	mov	r3, r1
 801431c:	4b49      	ldr	r3, [pc, #292]	; (8014444 <UART_SetConfig+0x38c>)
 801431e:	fba3 2302 	umull	r2, r3, r3, r2
 8014322:	095b      	lsrs	r3, r3, #5
 8014324:	011e      	lsls	r6, r3, #4
 8014326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014328:	4618      	mov	r0, r3
 801432a:	f04f 0100 	mov.w	r1, #0
 801432e:	4602      	mov	r2, r0
 8014330:	460b      	mov	r3, r1
 8014332:	1894      	adds	r4, r2, r2
 8014334:	60bc      	str	r4, [r7, #8]
 8014336:	415b      	adcs	r3, r3
 8014338:	60fb      	str	r3, [r7, #12]
 801433a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801433e:	1812      	adds	r2, r2, r0
 8014340:	eb41 0303 	adc.w	r3, r1, r3
 8014344:	f04f 0400 	mov.w	r4, #0
 8014348:	f04f 0500 	mov.w	r5, #0
 801434c:	00dd      	lsls	r5, r3, #3
 801434e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014352:	00d4      	lsls	r4, r2, #3
 8014354:	4622      	mov	r2, r4
 8014356:	462b      	mov	r3, r5
 8014358:	1814      	adds	r4, r2, r0
 801435a:	64bc      	str	r4, [r7, #72]	; 0x48
 801435c:	414b      	adcs	r3, r1
 801435e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014362:	685b      	ldr	r3, [r3, #4]
 8014364:	4618      	mov	r0, r3
 8014366:	f04f 0100 	mov.w	r1, #0
 801436a:	f04f 0200 	mov.w	r2, #0
 801436e:	f04f 0300 	mov.w	r3, #0
 8014372:	008b      	lsls	r3, r1, #2
 8014374:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014378:	0082      	lsls	r2, r0, #2
 801437a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801437e:	f7ec fc13 	bl	8000ba8 <__aeabi_uldivmod>
 8014382:	4602      	mov	r2, r0
 8014384:	460b      	mov	r3, r1
 8014386:	4b2f      	ldr	r3, [pc, #188]	; (8014444 <UART_SetConfig+0x38c>)
 8014388:	fba3 1302 	umull	r1, r3, r3, r2
 801438c:	095b      	lsrs	r3, r3, #5
 801438e:	2164      	movs	r1, #100	; 0x64
 8014390:	fb01 f303 	mul.w	r3, r1, r3
 8014394:	1ad3      	subs	r3, r2, r3
 8014396:	011b      	lsls	r3, r3, #4
 8014398:	3332      	adds	r3, #50	; 0x32
 801439a:	4a2a      	ldr	r2, [pc, #168]	; (8014444 <UART_SetConfig+0x38c>)
 801439c:	fba2 2303 	umull	r2, r3, r2, r3
 80143a0:	095b      	lsrs	r3, r3, #5
 80143a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143a6:	441e      	add	r6, r3
 80143a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80143aa:	4618      	mov	r0, r3
 80143ac:	f04f 0100 	mov.w	r1, #0
 80143b0:	4602      	mov	r2, r0
 80143b2:	460b      	mov	r3, r1
 80143b4:	1894      	adds	r4, r2, r2
 80143b6:	603c      	str	r4, [r7, #0]
 80143b8:	415b      	adcs	r3, r3
 80143ba:	607b      	str	r3, [r7, #4]
 80143bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80143c0:	1812      	adds	r2, r2, r0
 80143c2:	eb41 0303 	adc.w	r3, r1, r3
 80143c6:	f04f 0400 	mov.w	r4, #0
 80143ca:	f04f 0500 	mov.w	r5, #0
 80143ce:	00dd      	lsls	r5, r3, #3
 80143d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80143d4:	00d4      	lsls	r4, r2, #3
 80143d6:	4622      	mov	r2, r4
 80143d8:	462b      	mov	r3, r5
 80143da:	eb12 0a00 	adds.w	sl, r2, r0
 80143de:	eb43 0b01 	adc.w	fp, r3, r1
 80143e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80143e4:	685b      	ldr	r3, [r3, #4]
 80143e6:	4618      	mov	r0, r3
 80143e8:	f04f 0100 	mov.w	r1, #0
 80143ec:	f04f 0200 	mov.w	r2, #0
 80143f0:	f04f 0300 	mov.w	r3, #0
 80143f4:	008b      	lsls	r3, r1, #2
 80143f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80143fa:	0082      	lsls	r2, r0, #2
 80143fc:	4650      	mov	r0, sl
 80143fe:	4659      	mov	r1, fp
 8014400:	f7ec fbd2 	bl	8000ba8 <__aeabi_uldivmod>
 8014404:	4602      	mov	r2, r0
 8014406:	460b      	mov	r3, r1
 8014408:	4b0e      	ldr	r3, [pc, #56]	; (8014444 <UART_SetConfig+0x38c>)
 801440a:	fba3 1302 	umull	r1, r3, r3, r2
 801440e:	095b      	lsrs	r3, r3, #5
 8014410:	2164      	movs	r1, #100	; 0x64
 8014412:	fb01 f303 	mul.w	r3, r1, r3
 8014416:	1ad3      	subs	r3, r2, r3
 8014418:	011b      	lsls	r3, r3, #4
 801441a:	3332      	adds	r3, #50	; 0x32
 801441c:	4a09      	ldr	r2, [pc, #36]	; (8014444 <UART_SetConfig+0x38c>)
 801441e:	fba2 2303 	umull	r2, r3, r2, r3
 8014422:	095b      	lsrs	r3, r3, #5
 8014424:	f003 020f 	and.w	r2, r3, #15
 8014428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	4432      	add	r2, r6
 801442e:	609a      	str	r2, [r3, #8]
}
 8014430:	bf00      	nop
 8014432:	377c      	adds	r7, #124	; 0x7c
 8014434:	46bd      	mov	sp, r7
 8014436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801443a:	bf00      	nop
 801443c:	40011000 	.word	0x40011000
 8014440:	40011400 	.word	0x40011400
 8014444:	51eb851f 	.word	0x51eb851f

08014448 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8014448:	b084      	sub	sp, #16
 801444a:	b480      	push	{r7}
 801444c:	b085      	sub	sp, #20
 801444e:	af00      	add	r7, sp, #0
 8014450:	6078      	str	r0, [r7, #4]
 8014452:	f107 001c 	add.w	r0, r7, #28
 8014456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801445a:	2300      	movs	r3, #0
 801445c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801445e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8014460:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8014462:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8014464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8014466:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8014468:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801446a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801446e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8014470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8014472:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8014474:	68fa      	ldr	r2, [r7, #12]
 8014476:	4313      	orrs	r3, r2
 8014478:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8014482:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014486:	68fa      	ldr	r2, [r7, #12]
 8014488:	431a      	orrs	r2, r3
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801448e:	2300      	movs	r3, #0
}
 8014490:	4618      	mov	r0, r3
 8014492:	3714      	adds	r7, #20
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	b004      	add	sp, #16
 801449c:	4770      	bx	lr

0801449e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801449e:	b480      	push	{r7}
 80144a0:	b083      	sub	sp, #12
 80144a2:	af00      	add	r7, sp, #0
 80144a4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	370c      	adds	r7, #12
 80144b0:	46bd      	mov	sp, r7
 80144b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b6:	4770      	bx	lr

080144b8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80144b8:	b480      	push	{r7}
 80144ba:	b083      	sub	sp, #12
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80144c2:	683b      	ldr	r3, [r7, #0]
 80144c4:	681a      	ldr	r2, [r3, #0]
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80144cc:	2300      	movs	r3, #0
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	370c      	adds	r7, #12
 80144d2:	46bd      	mov	sp, r7
 80144d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d8:	4770      	bx	lr

080144da <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80144da:	b580      	push	{r7, lr}
 80144dc:	b082      	sub	sp, #8
 80144de:	af00      	add	r7, sp, #0
 80144e0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	2203      	movs	r2, #3
 80144e6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80144e8:	2002      	movs	r0, #2
 80144ea:	f7fc ffd1 	bl	8011490 <HAL_Delay>
  
  return HAL_OK;
 80144ee:	2300      	movs	r3, #0
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3708      	adds	r7, #8
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}

080144f8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80144f8:	b480      	push	{r7}
 80144fa:	b083      	sub	sp, #12
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	f003 0303 	and.w	r3, r3, #3
}
 8014508:	4618      	mov	r0, r3
 801450a:	370c      	adds	r7, #12
 801450c:	46bd      	mov	sp, r7
 801450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014512:	4770      	bx	lr

08014514 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8014514:	b480      	push	{r7}
 8014516:	b085      	sub	sp, #20
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801451e:	2300      	movs	r3, #0
 8014520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	681a      	ldr	r2, [r3, #0]
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8014532:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8014538:	431a      	orrs	r2, r3
                       Command->CPSM);
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801453e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8014540:	68fa      	ldr	r2, [r7, #12]
 8014542:	4313      	orrs	r3, r2
 8014544:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	68db      	ldr	r3, [r3, #12]
 801454a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801454e:	f023 030f 	bic.w	r3, r3, #15
 8014552:	68fa      	ldr	r2, [r7, #12]
 8014554:	431a      	orrs	r2, r3
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801455a:	2300      	movs	r3, #0
}
 801455c:	4618      	mov	r0, r3
 801455e:	3714      	adds	r7, #20
 8014560:	46bd      	mov	sp, r7
 8014562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014566:	4770      	bx	lr

08014568 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8014568:	b480      	push	{r7}
 801456a:	b083      	sub	sp, #12
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	691b      	ldr	r3, [r3, #16]
 8014574:	b2db      	uxtb	r3, r3
}
 8014576:	4618      	mov	r0, r3
 8014578:	370c      	adds	r7, #12
 801457a:	46bd      	mov	sp, r7
 801457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014580:	4770      	bx	lr

08014582 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8014582:	b480      	push	{r7}
 8014584:	b085      	sub	sp, #20
 8014586:	af00      	add	r7, sp, #0
 8014588:	6078      	str	r0, [r7, #4]
 801458a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	3314      	adds	r3, #20
 8014590:	461a      	mov	r2, r3
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	4413      	add	r3, r2
 8014596:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	681b      	ldr	r3, [r3, #0]
}  
 801459c:	4618      	mov	r0, r3
 801459e:	3714      	adds	r7, #20
 80145a0:	46bd      	mov	sp, r7
 80145a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a6:	4770      	bx	lr

080145a8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80145a8:	b480      	push	{r7}
 80145aa:	b085      	sub	sp, #20
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80145b2:	2300      	movs	r3, #0
 80145b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	681a      	ldr	r2, [r3, #0]
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	685a      	ldr	r2, [r3, #4]
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80145ce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80145d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80145da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80145dc:	68fa      	ldr	r2, [r7, #12]
 80145de:	4313      	orrs	r3, r2
 80145e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145e6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	431a      	orrs	r2, r3
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80145f2:	2300      	movs	r3, #0

}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3714      	adds	r7, #20
 80145f8:	46bd      	mov	sp, r7
 80145fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fe:	4770      	bx	lr

08014600 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b088      	sub	sp, #32
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801460a:	683b      	ldr	r3, [r7, #0]
 801460c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801460e:	2310      	movs	r3, #16
 8014610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8014612:	2340      	movs	r3, #64	; 0x40
 8014614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014616:	2300      	movs	r3, #0
 8014618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801461a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801461e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014620:	f107 0308 	add.w	r3, r7, #8
 8014624:	4619      	mov	r1, r3
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f7ff ff74 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801462c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014630:	2110      	movs	r1, #16
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f000 fa02 	bl	8014a3c <SDMMC_GetCmdResp1>
 8014638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801463a:	69fb      	ldr	r3, [r7, #28]
}
 801463c:	4618      	mov	r0, r3
 801463e:	3720      	adds	r7, #32
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b088      	sub	sp, #32
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8014652:	2311      	movs	r3, #17
 8014654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8014656:	2340      	movs	r3, #64	; 0x40
 8014658:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801465a:	2300      	movs	r3, #0
 801465c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801465e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014662:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014664:	f107 0308 	add.w	r3, r7, #8
 8014668:	4619      	mov	r1, r3
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f7ff ff52 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8014670:	f241 3288 	movw	r2, #5000	; 0x1388
 8014674:	2111      	movs	r1, #17
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 f9e0 	bl	8014a3c <SDMMC_GetCmdResp1>
 801467c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801467e:	69fb      	ldr	r3, [r7, #28]
}
 8014680:	4618      	mov	r0, r3
 8014682:	3720      	adds	r7, #32
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}

08014688 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b088      	sub	sp, #32
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8014696:	2312      	movs	r3, #18
 8014698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801469a:	2340      	movs	r3, #64	; 0x40
 801469c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801469e:	2300      	movs	r3, #0
 80146a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80146a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80146a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80146a8:	f107 0308 	add.w	r3, r7, #8
 80146ac:	4619      	mov	r1, r3
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f7ff ff30 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80146b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80146b8:	2112      	movs	r1, #18
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 f9be 	bl	8014a3c <SDMMC_GetCmdResp1>
 80146c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80146c2:	69fb      	ldr	r3, [r7, #28]
}
 80146c4:	4618      	mov	r0, r3
 80146c6:	3720      	adds	r7, #32
 80146c8:	46bd      	mov	sp, r7
 80146ca:	bd80      	pop	{r7, pc}

080146cc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b088      	sub	sp, #32
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80146da:	2318      	movs	r3, #24
 80146dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80146de:	2340      	movs	r3, #64	; 0x40
 80146e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80146e2:	2300      	movs	r3, #0
 80146e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80146e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80146ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80146ec:	f107 0308 	add.w	r3, r7, #8
 80146f0:	4619      	mov	r1, r3
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7ff ff0e 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80146f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80146fc:	2118      	movs	r1, #24
 80146fe:	6878      	ldr	r0, [r7, #4]
 8014700:	f000 f99c 	bl	8014a3c <SDMMC_GetCmdResp1>
 8014704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014706:	69fb      	ldr	r3, [r7, #28]
}
 8014708:	4618      	mov	r0, r3
 801470a:	3720      	adds	r7, #32
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}

08014710 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b088      	sub	sp, #32
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801471e:	2319      	movs	r3, #25
 8014720:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8014722:	2340      	movs	r3, #64	; 0x40
 8014724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014726:	2300      	movs	r3, #0
 8014728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801472a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801472e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014730:	f107 0308 	add.w	r3, r7, #8
 8014734:	4619      	mov	r1, r3
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f7ff feec 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801473c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014740:	2119      	movs	r1, #25
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f000 f97a 	bl	8014a3c <SDMMC_GetCmdResp1>
 8014748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801474a:	69fb      	ldr	r3, [r7, #28]
}
 801474c:	4618      	mov	r0, r3
 801474e:	3720      	adds	r7, #32
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}

08014754 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b088      	sub	sp, #32
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801475c:	2300      	movs	r3, #0
 801475e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8014760:	230c      	movs	r3, #12
 8014762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8014764:	2340      	movs	r3, #64	; 0x40
 8014766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014768:	2300      	movs	r3, #0
 801476a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801476c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014770:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014772:	f107 0308 	add.w	r3, r7, #8
 8014776:	4619      	mov	r1, r3
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f7ff fecb 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801477e:	4a05      	ldr	r2, [pc, #20]	; (8014794 <SDMMC_CmdStopTransfer+0x40>)
 8014780:	210c      	movs	r1, #12
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 f95a 	bl	8014a3c <SDMMC_GetCmdResp1>
 8014788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801478a:	69fb      	ldr	r3, [r7, #28]
}
 801478c:	4618      	mov	r0, r3
 801478e:	3720      	adds	r7, #32
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}
 8014794:	05f5e100 	.word	0x05f5e100

08014798 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b08a      	sub	sp, #40	; 0x28
 801479c:	af00      	add	r7, sp, #0
 801479e:	60f8      	str	r0, [r7, #12]
 80147a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80147a8:	2307      	movs	r3, #7
 80147aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80147ac:	2340      	movs	r3, #64	; 0x40
 80147ae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80147b0:	2300      	movs	r3, #0
 80147b2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80147b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80147b8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80147ba:	f107 0310 	add.w	r3, r7, #16
 80147be:	4619      	mov	r1, r3
 80147c0:	68f8      	ldr	r0, [r7, #12]
 80147c2:	f7ff fea7 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80147c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80147ca:	2107      	movs	r1, #7
 80147cc:	68f8      	ldr	r0, [r7, #12]
 80147ce:	f000 f935 	bl	8014a3c <SDMMC_GetCmdResp1>
 80147d2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80147d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3728      	adds	r7, #40	; 0x28
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}

080147de <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80147de:	b580      	push	{r7, lr}
 80147e0:	b088      	sub	sp, #32
 80147e2:	af00      	add	r7, sp, #0
 80147e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80147e6:	2300      	movs	r3, #0
 80147e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80147ea:	2300      	movs	r3, #0
 80147ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80147ee:	2300      	movs	r3, #0
 80147f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80147f2:	2300      	movs	r3, #0
 80147f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80147f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80147fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80147fc:	f107 0308 	add.w	r3, r7, #8
 8014800:	4619      	mov	r1, r3
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f7ff fe86 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f000 f8eb 	bl	80149e4 <SDMMC_GetCmdError>
 801480e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014810:	69fb      	ldr	r3, [r7, #28]
}
 8014812:	4618      	mov	r0, r3
 8014814:	3720      	adds	r7, #32
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}

0801481a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801481a:	b580      	push	{r7, lr}
 801481c:	b088      	sub	sp, #32
 801481e:	af00      	add	r7, sp, #0
 8014820:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8014822:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8014826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8014828:	2308      	movs	r3, #8
 801482a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801482c:	2340      	movs	r3, #64	; 0x40
 801482e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014830:	2300      	movs	r3, #0
 8014832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8014834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014838:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801483a:	f107 0308 	add.w	r3, r7, #8
 801483e:	4619      	mov	r1, r3
 8014840:	6878      	ldr	r0, [r7, #4]
 8014842:	f7ff fe67 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f000 fae2 	bl	8014e10 <SDMMC_GetCmdResp7>
 801484c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801484e:	69fb      	ldr	r3, [r7, #28]
}
 8014850:	4618      	mov	r0, r3
 8014852:	3720      	adds	r7, #32
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b088      	sub	sp, #32
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8014866:	2337      	movs	r3, #55	; 0x37
 8014868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801486a:	2340      	movs	r3, #64	; 0x40
 801486c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801486e:	2300      	movs	r3, #0
 8014870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8014872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014876:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014878:	f107 0308 	add.w	r3, r7, #8
 801487c:	4619      	mov	r1, r3
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f7ff fe48 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8014884:	f241 3288 	movw	r2, #5000	; 0x1388
 8014888:	2137      	movs	r1, #55	; 0x37
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f000 f8d6 	bl	8014a3c <SDMMC_GetCmdResp1>
 8014890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014892:	69fb      	ldr	r3, [r7, #28]
}
 8014894:	4618      	mov	r0, r3
 8014896:	3720      	adds	r7, #32
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}

0801489c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b088      	sub	sp, #32
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80148ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80148b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80148b2:	2329      	movs	r3, #41	; 0x29
 80148b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80148b6:	2340      	movs	r3, #64	; 0x40
 80148b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80148ba:	2300      	movs	r3, #0
 80148bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80148be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80148c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80148c4:	f107 0308 	add.w	r3, r7, #8
 80148c8:	4619      	mov	r1, r3
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f7ff fe22 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f000 f9e9 	bl	8014ca8 <SDMMC_GetCmdResp3>
 80148d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80148d8:	69fb      	ldr	r3, [r7, #28]
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3720      	adds	r7, #32
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}

080148e2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80148e2:	b580      	push	{r7, lr}
 80148e4:	b088      	sub	sp, #32
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80148ea:	2300      	movs	r3, #0
 80148ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80148ee:	2302      	movs	r3, #2
 80148f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80148f2:	23c0      	movs	r3, #192	; 0xc0
 80148f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80148f6:	2300      	movs	r3, #0
 80148f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80148fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80148fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8014900:	f107 0308 	add.w	r3, r7, #8
 8014904:	4619      	mov	r1, r3
 8014906:	6878      	ldr	r0, [r7, #4]
 8014908:	f7ff fe04 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f000 f983 	bl	8014c18 <SDMMC_GetCmdResp2>
 8014912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014914:	69fb      	ldr	r3, [r7, #28]
}
 8014916:	4618      	mov	r0, r3
 8014918:	3720      	adds	r7, #32
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}

0801491e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801491e:	b580      	push	{r7, lr}
 8014920:	b088      	sub	sp, #32
 8014922:	af00      	add	r7, sp, #0
 8014924:	6078      	str	r0, [r7, #4]
 8014926:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801492c:	2309      	movs	r3, #9
 801492e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8014930:	23c0      	movs	r3, #192	; 0xc0
 8014932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014934:	2300      	movs	r3, #0
 8014936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8014938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801493c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801493e:	f107 0308 	add.w	r3, r7, #8
 8014942:	4619      	mov	r1, r3
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f7ff fde5 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f000 f964 	bl	8014c18 <SDMMC_GetCmdResp2>
 8014950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014952:	69fb      	ldr	r3, [r7, #28]
}
 8014954:	4618      	mov	r0, r3
 8014956:	3720      	adds	r7, #32
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}

0801495c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b088      	sub	sp, #32
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
 8014964:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8014966:	2300      	movs	r3, #0
 8014968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801496a:	2303      	movs	r3, #3
 801496c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801496e:	2340      	movs	r3, #64	; 0x40
 8014970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8014972:	2300      	movs	r3, #0
 8014974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8014976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801497a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801497c:	f107 0308 	add.w	r3, r7, #8
 8014980:	4619      	mov	r1, r3
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f7ff fdc6 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8014988:	683a      	ldr	r2, [r7, #0]
 801498a:	2103      	movs	r1, #3
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f000 f9c9 	bl	8014d24 <SDMMC_GetCmdResp6>
 8014992:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014994:	69fb      	ldr	r3, [r7, #28]
}
 8014996:	4618      	mov	r0, r3
 8014998:	3720      	adds	r7, #32
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}

0801499e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801499e:	b580      	push	{r7, lr}
 80149a0:	b088      	sub	sp, #32
 80149a2:	af00      	add	r7, sp, #0
 80149a4:	6078      	str	r0, [r7, #4]
 80149a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80149ac:	230d      	movs	r3, #13
 80149ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80149b0:	2340      	movs	r3, #64	; 0x40
 80149b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80149b4:	2300      	movs	r3, #0
 80149b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80149b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80149be:	f107 0308 	add.w	r3, r7, #8
 80149c2:	4619      	mov	r1, r3
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f7ff fda5 	bl	8014514 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80149ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80149ce:	210d      	movs	r1, #13
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f000 f833 	bl	8014a3c <SDMMC_GetCmdResp1>
 80149d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80149d8:	69fb      	ldr	r3, [r7, #28]
}
 80149da:	4618      	mov	r0, r3
 80149dc:	3720      	adds	r7, #32
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
	...

080149e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80149e4:	b480      	push	{r7}
 80149e6:	b085      	sub	sp, #20
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80149ec:	4b11      	ldr	r3, [pc, #68]	; (8014a34 <SDMMC_GetCmdError+0x50>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	4a11      	ldr	r2, [pc, #68]	; (8014a38 <SDMMC_GetCmdError+0x54>)
 80149f2:	fba2 2303 	umull	r2, r3, r2, r3
 80149f6:	0a5b      	lsrs	r3, r3, #9
 80149f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80149fc:	fb02 f303 	mul.w	r3, r2, r3
 8014a00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	1e5a      	subs	r2, r3, #1
 8014a06:	60fa      	str	r2, [r7, #12]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d102      	bne.n	8014a12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014a0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014a10:	e009      	b.n	8014a26 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d0f1      	beq.n	8014a02 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	22c5      	movs	r2, #197	; 0xc5
 8014a22:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8014a24:	2300      	movs	r3, #0
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3714      	adds	r7, #20
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a30:	4770      	bx	lr
 8014a32:	bf00      	nop
 8014a34:	20000020 	.word	0x20000020
 8014a38:	10624dd3 	.word	0x10624dd3

08014a3c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b088      	sub	sp, #32
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	460b      	mov	r3, r1
 8014a46:	607a      	str	r2, [r7, #4]
 8014a48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014a4a:	4b70      	ldr	r3, [pc, #448]	; (8014c0c <SDMMC_GetCmdResp1+0x1d0>)
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	4a70      	ldr	r2, [pc, #448]	; (8014c10 <SDMMC_GetCmdResp1+0x1d4>)
 8014a50:	fba2 2303 	umull	r2, r3, r2, r3
 8014a54:	0a5a      	lsrs	r2, r3, #9
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	fb02 f303 	mul.w	r3, r2, r3
 8014a5c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8014a5e:	69fb      	ldr	r3, [r7, #28]
 8014a60:	1e5a      	subs	r2, r3, #1
 8014a62:	61fa      	str	r2, [r7, #28]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d102      	bne.n	8014a6e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014a68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014a6c:	e0c9      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a72:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014a74:	69bb      	ldr	r3, [r7, #24]
 8014a76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d0ef      	beq.n	8014a5e <SDMMC_GetCmdResp1+0x22>
 8014a7e:	69bb      	ldr	r3, [r7, #24]
 8014a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d1ea      	bne.n	8014a5e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a8c:	f003 0304 	and.w	r3, r3, #4
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d004      	beq.n	8014a9e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	2204      	movs	r2, #4
 8014a98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014a9a:	2304      	movs	r3, #4
 8014a9c:	e0b1      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014aa2:	f003 0301 	and.w	r3, r3, #1
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d004      	beq.n	8014ab4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	2201      	movs	r2, #1
 8014aae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	e0a6      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	22c5      	movs	r2, #197	; 0xc5
 8014ab8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8014aba:	68f8      	ldr	r0, [r7, #12]
 8014abc:	f7ff fd54 	bl	8014568 <SDIO_GetCommandResponse>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	461a      	mov	r2, r3
 8014ac4:	7afb      	ldrb	r3, [r7, #11]
 8014ac6:	4293      	cmp	r3, r2
 8014ac8:	d001      	beq.n	8014ace <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014aca:	2301      	movs	r3, #1
 8014acc:	e099      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8014ace:	2100      	movs	r1, #0
 8014ad0:	68f8      	ldr	r0, [r7, #12]
 8014ad2:	f7ff fd56 	bl	8014582 <SDIO_GetResponse>
 8014ad6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014ad8:	697a      	ldr	r2, [r7, #20]
 8014ada:	4b4e      	ldr	r3, [pc, #312]	; (8014c14 <SDMMC_GetCmdResp1+0x1d8>)
 8014adc:	4013      	ands	r3, r2
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d101      	bne.n	8014ae6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	e08d      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014ae6:	697b      	ldr	r3, [r7, #20]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	da02      	bge.n	8014af2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014af0:	e087      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d001      	beq.n	8014b00 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014afc:	2340      	movs	r3, #64	; 0x40
 8014afe:	e080      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014b00:	697b      	ldr	r3, [r7, #20]
 8014b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d001      	beq.n	8014b0e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014b0a:	2380      	movs	r3, #128	; 0x80
 8014b0c:	e079      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d002      	beq.n	8014b1e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014b1c:	e071      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014b1e:	697b      	ldr	r3, [r7, #20]
 8014b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d002      	beq.n	8014b2e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014b2c:	e069      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d002      	beq.n	8014b3e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b3c:	e061      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014b3e:	697b      	ldr	r3, [r7, #20]
 8014b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d002      	beq.n	8014b4e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014b48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014b4c:	e059      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d002      	beq.n	8014b5e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014b5c:	e051      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d002      	beq.n	8014b6e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014b6c:	e049      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d002      	beq.n	8014b7e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014b78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014b7c:	e041      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d002      	beq.n	8014b8e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014b8c:	e039      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d002      	beq.n	8014b9e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014b9c:	e031      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014b9e:	697b      	ldr	r3, [r7, #20]
 8014ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d002      	beq.n	8014bae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014ba8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014bac:	e029      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d002      	beq.n	8014bbe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014bb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014bbc:	e021      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014bbe:	697b      	ldr	r3, [r7, #20]
 8014bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d002      	beq.n	8014bce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014bc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014bcc:	e019      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d002      	beq.n	8014bde <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014bd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014bdc:	e011      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d002      	beq.n	8014bee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014bec:	e009      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	f003 0308 	and.w	r3, r3, #8
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d002      	beq.n	8014bfe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014bf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014bfc:	e001      	b.n	8014c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014c02:	4618      	mov	r0, r3
 8014c04:	3720      	adds	r7, #32
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}
 8014c0a:	bf00      	nop
 8014c0c:	20000020 	.word	0x20000020
 8014c10:	10624dd3 	.word	0x10624dd3
 8014c14:	fdffe008 	.word	0xfdffe008

08014c18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8014c18:	b480      	push	{r7}
 8014c1a:	b085      	sub	sp, #20
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014c20:	4b1f      	ldr	r3, [pc, #124]	; (8014ca0 <SDMMC_GetCmdResp2+0x88>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	4a1f      	ldr	r2, [pc, #124]	; (8014ca4 <SDMMC_GetCmdResp2+0x8c>)
 8014c26:	fba2 2303 	umull	r2, r3, r2, r3
 8014c2a:	0a5b      	lsrs	r3, r3, #9
 8014c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c30:	fb02 f303 	mul.w	r3, r2, r3
 8014c34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	1e5a      	subs	r2, r3, #1
 8014c3a:	60fa      	str	r2, [r7, #12]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d102      	bne.n	8014c46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014c40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014c44:	e026      	b.n	8014c94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d0ef      	beq.n	8014c36 <SDMMC_GetCmdResp2+0x1e>
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d1ea      	bne.n	8014c36 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c64:	f003 0304 	and.w	r3, r3, #4
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d004      	beq.n	8014c76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	2204      	movs	r2, #4
 8014c70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014c72:	2304      	movs	r3, #4
 8014c74:	e00e      	b.n	8014c94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c7a:	f003 0301 	and.w	r3, r3, #1
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d004      	beq.n	8014c8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2201      	movs	r2, #1
 8014c86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014c88:	2301      	movs	r3, #1
 8014c8a:	e003      	b.n	8014c94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	22c5      	movs	r2, #197	; 0xc5
 8014c90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014c92:	2300      	movs	r3, #0
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3714      	adds	r7, #20
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr
 8014ca0:	20000020 	.word	0x20000020
 8014ca4:	10624dd3 	.word	0x10624dd3

08014ca8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b085      	sub	sp, #20
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014cb0:	4b1a      	ldr	r3, [pc, #104]	; (8014d1c <SDMMC_GetCmdResp3+0x74>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	4a1a      	ldr	r2, [pc, #104]	; (8014d20 <SDMMC_GetCmdResp3+0x78>)
 8014cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8014cba:	0a5b      	lsrs	r3, r3, #9
 8014cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8014cc0:	fb02 f303 	mul.w	r3, r2, r3
 8014cc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	1e5a      	subs	r2, r3, #1
 8014cca:	60fa      	str	r2, [r7, #12]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d102      	bne.n	8014cd6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014cd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014cd4:	e01b      	b.n	8014d0e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d0ef      	beq.n	8014cc6 <SDMMC_GetCmdResp3+0x1e>
 8014ce6:	68bb      	ldr	r3, [r7, #8]
 8014ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d1ea      	bne.n	8014cc6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cf4:	f003 0304 	and.w	r3, r3, #4
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d004      	beq.n	8014d06 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	2204      	movs	r2, #4
 8014d00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014d02:	2304      	movs	r3, #4
 8014d04:	e003      	b.n	8014d0e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	22c5      	movs	r2, #197	; 0xc5
 8014d0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8014d0c:	2300      	movs	r3, #0
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	3714      	adds	r7, #20
 8014d12:	46bd      	mov	sp, r7
 8014d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d18:	4770      	bx	lr
 8014d1a:	bf00      	nop
 8014d1c:	20000020 	.word	0x20000020
 8014d20:	10624dd3 	.word	0x10624dd3

08014d24 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b088      	sub	sp, #32
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	60f8      	str	r0, [r7, #12]
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	607a      	str	r2, [r7, #4]
 8014d30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014d32:	4b35      	ldr	r3, [pc, #212]	; (8014e08 <SDMMC_GetCmdResp6+0xe4>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	4a35      	ldr	r2, [pc, #212]	; (8014e0c <SDMMC_GetCmdResp6+0xe8>)
 8014d38:	fba2 2303 	umull	r2, r3, r2, r3
 8014d3c:	0a5b      	lsrs	r3, r3, #9
 8014d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014d42:	fb02 f303 	mul.w	r3, r2, r3
 8014d46:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8014d48:	69fb      	ldr	r3, [r7, #28]
 8014d4a:	1e5a      	subs	r2, r3, #1
 8014d4c:	61fa      	str	r2, [r7, #28]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d102      	bne.n	8014d58 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014d52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014d56:	e052      	b.n	8014dfe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d5c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014d5e:	69bb      	ldr	r3, [r7, #24]
 8014d60:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d0ef      	beq.n	8014d48 <SDMMC_GetCmdResp6+0x24>
 8014d68:	69bb      	ldr	r3, [r7, #24]
 8014d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d1ea      	bne.n	8014d48 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d76:	f003 0304 	and.w	r3, r3, #4
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d004      	beq.n	8014d88 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	2204      	movs	r2, #4
 8014d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014d84:	2304      	movs	r3, #4
 8014d86:	e03a      	b.n	8014dfe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d8c:	f003 0301 	and.w	r3, r3, #1
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d004      	beq.n	8014d9e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2201      	movs	r2, #1
 8014d98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	e02f      	b.n	8014dfe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8014d9e:	68f8      	ldr	r0, [r7, #12]
 8014da0:	f7ff fbe2 	bl	8014568 <SDIO_GetCommandResponse>
 8014da4:	4603      	mov	r3, r0
 8014da6:	461a      	mov	r2, r3
 8014da8:	7afb      	ldrb	r3, [r7, #11]
 8014daa:	4293      	cmp	r3, r2
 8014dac:	d001      	beq.n	8014db2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014dae:	2301      	movs	r3, #1
 8014db0:	e025      	b.n	8014dfe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	22c5      	movs	r2, #197	; 0xc5
 8014db6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8014db8:	2100      	movs	r1, #0
 8014dba:	68f8      	ldr	r0, [r7, #12]
 8014dbc:	f7ff fbe1 	bl	8014582 <SDIO_GetResponse>
 8014dc0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d106      	bne.n	8014dda <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	0c1b      	lsrs	r3, r3, #16
 8014dd0:	b29a      	uxth	r2, r3
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	e011      	b.n	8014dfe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014dda:	697b      	ldr	r3, [r7, #20]
 8014ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d002      	beq.n	8014dea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014de8:	e009      	b.n	8014dfe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d002      	beq.n	8014dfa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014df8:	e001      	b.n	8014dfe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3720      	adds	r7, #32
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop
 8014e08:	20000020 	.word	0x20000020
 8014e0c:	10624dd3 	.word	0x10624dd3

08014e10 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8014e10:	b480      	push	{r7}
 8014e12:	b085      	sub	sp, #20
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014e18:	4b22      	ldr	r3, [pc, #136]	; (8014ea4 <SDMMC_GetCmdResp7+0x94>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	4a22      	ldr	r2, [pc, #136]	; (8014ea8 <SDMMC_GetCmdResp7+0x98>)
 8014e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8014e22:	0a5b      	lsrs	r3, r3, #9
 8014e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8014e28:	fb02 f303 	mul.w	r3, r2, r3
 8014e2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	1e5a      	subs	r2, r3, #1
 8014e32:	60fa      	str	r2, [r7, #12]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d102      	bne.n	8014e3e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014e38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014e3c:	e02c      	b.n	8014e98 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d0ef      	beq.n	8014e2e <SDMMC_GetCmdResp7+0x1e>
 8014e4e:	68bb      	ldr	r3, [r7, #8]
 8014e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d1ea      	bne.n	8014e2e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e5c:	f003 0304 	and.w	r3, r3, #4
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d004      	beq.n	8014e6e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2204      	movs	r2, #4
 8014e68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014e6a:	2304      	movs	r3, #4
 8014e6c:	e014      	b.n	8014e98 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e72:	f003 0301 	and.w	r3, r3, #1
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d004      	beq.n	8014e84 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014e80:	2301      	movs	r3, #1
 8014e82:	e009      	b.n	8014e98 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d002      	beq.n	8014e96 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2240      	movs	r2, #64	; 0x40
 8014e94:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8014e96:	2300      	movs	r3, #0
  
}
 8014e98:	4618      	mov	r0, r3
 8014e9a:	3714      	adds	r7, #20
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea2:	4770      	bx	lr
 8014ea4:	20000020 	.word	0x20000020
 8014ea8:	10624dd3 	.word	0x10624dd3

08014eac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014eb0:	4904      	ldr	r1, [pc, #16]	; (8014ec4 <MX_FATFS_Init+0x18>)
 8014eb2:	4805      	ldr	r0, [pc, #20]	; (8014ec8 <MX_FATFS_Init+0x1c>)
 8014eb4:	f002 faee 	bl	8017494 <FATFS_LinkDriver>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	461a      	mov	r2, r3
 8014ebc:	4b03      	ldr	r3, [pc, #12]	; (8014ecc <MX_FATFS_Init+0x20>)
 8014ebe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014ec0:	bf00      	nop
 8014ec2:	bd80      	pop	{r7, pc}
 8014ec4:	20000588 	.word	0x20000588
 8014ec8:	0801ac48 	.word	0x0801ac48
 8014ecc:	20000584 	.word	0x20000584

08014ed0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014ed4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ede:	4770      	bx	lr

08014ee0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b082      	sub	sp, #8
 8014ee4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014eea:	f000 f86b 	bl	8014fc4 <BSP_SD_IsDetected>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	2b01      	cmp	r3, #1
 8014ef2:	d001      	beq.n	8014ef8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	e005      	b.n	8014f04 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8014ef8:	4804      	ldr	r0, [pc, #16]	; (8014f0c <BSP_SD_Init+0x2c>)
 8014efa:	f7fd fcd5 	bl	80128a8 <HAL_SD_Init>
 8014efe:	4603      	mov	r3, r0
 8014f00:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8014f02:	79fb      	ldrb	r3, [r7, #7]
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	3708      	adds	r7, #8
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}
 8014f0c:	20000450 	.word	0x20000450

08014f10 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b088      	sub	sp, #32
 8014f14:	af02      	add	r7, sp, #8
 8014f16:	60f8      	str	r0, [r7, #12]
 8014f18:	60b9      	str	r1, [r7, #8]
 8014f1a:	607a      	str	r2, [r7, #4]
 8014f1c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	9300      	str	r3, [sp, #0]
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	68ba      	ldr	r2, [r7, #8]
 8014f2a:	68f9      	ldr	r1, [r7, #12]
 8014f2c:	4806      	ldr	r0, [pc, #24]	; (8014f48 <BSP_SD_ReadBlocks+0x38>)
 8014f2e:	f7fd fd69 	bl	8012a04 <HAL_SD_ReadBlocks>
 8014f32:	4603      	mov	r3, r0
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d001      	beq.n	8014f3c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8014f38:	2301      	movs	r3, #1
 8014f3a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3718      	adds	r7, #24
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}
 8014f46:	bf00      	nop
 8014f48:	20000450 	.word	0x20000450

08014f4c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b088      	sub	sp, #32
 8014f50:	af02      	add	r7, sp, #8
 8014f52:	60f8      	str	r0, [r7, #12]
 8014f54:	60b9      	str	r1, [r7, #8]
 8014f56:	607a      	str	r2, [r7, #4]
 8014f58:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	9300      	str	r3, [sp, #0]
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	68ba      	ldr	r2, [r7, #8]
 8014f66:	68f9      	ldr	r1, [r7, #12]
 8014f68:	4806      	ldr	r0, [pc, #24]	; (8014f84 <BSP_SD_WriteBlocks+0x38>)
 8014f6a:	f7fd ff29 	bl	8012dc0 <HAL_SD_WriteBlocks>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d001      	beq.n	8014f78 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8014f74:	2301      	movs	r3, #1
 8014f76:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3718      	adds	r7, #24
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}
 8014f82:	bf00      	nop
 8014f84:	20000450 	.word	0x20000450

08014f88 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014f8c:	4805      	ldr	r0, [pc, #20]	; (8014fa4 <BSP_SD_GetCardState+0x1c>)
 8014f8e:	f7fe fa6d 	bl	801346c <HAL_SD_GetCardState>
 8014f92:	4603      	mov	r3, r0
 8014f94:	2b04      	cmp	r3, #4
 8014f96:	bf14      	ite	ne
 8014f98:	2301      	movne	r3, #1
 8014f9a:	2300      	moveq	r3, #0
 8014f9c:	b2db      	uxtb	r3, r3
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	20000450 	.word	0x20000450

08014fa8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b082      	sub	sp, #8
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8014fb0:	6879      	ldr	r1, [r7, #4]
 8014fb2:	4803      	ldr	r0, [pc, #12]	; (8014fc0 <BSP_SD_GetCardInfo+0x18>)
 8014fb4:	f7fe fa2e 	bl	8013414 <HAL_SD_GetCardInfo>
}
 8014fb8:	bf00      	nop
 8014fba:	3708      	adds	r7, #8
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	20000450 	.word	0x20000450

08014fc4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014fc4:	b480      	push	{r7}
 8014fc6:	b083      	sub	sp, #12
 8014fc8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014fca:	2301      	movs	r3, #1
 8014fcc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8014fce:	79fb      	ldrb	r3, [r7, #7]
 8014fd0:	b2db      	uxtb	r3, r3
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	370c      	adds	r7, #12
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fdc:	4770      	bx	lr
	...

08014fe0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014fea:	4b0b      	ldr	r3, [pc, #44]	; (8015018 <SD_CheckStatus+0x38>)
 8014fec:	2201      	movs	r2, #1
 8014fee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014ff0:	f7ff ffca 	bl	8014f88 <BSP_SD_GetCardState>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d107      	bne.n	801500a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014ffa:	4b07      	ldr	r3, [pc, #28]	; (8015018 <SD_CheckStatus+0x38>)
 8014ffc:	781b      	ldrb	r3, [r3, #0]
 8014ffe:	b2db      	uxtb	r3, r3
 8015000:	f023 0301 	bic.w	r3, r3, #1
 8015004:	b2da      	uxtb	r2, r3
 8015006:	4b04      	ldr	r3, [pc, #16]	; (8015018 <SD_CheckStatus+0x38>)
 8015008:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801500a:	4b03      	ldr	r3, [pc, #12]	; (8015018 <SD_CheckStatus+0x38>)
 801500c:	781b      	ldrb	r3, [r3, #0]
 801500e:	b2db      	uxtb	r3, r3
}
 8015010:	4618      	mov	r0, r3
 8015012:	3708      	adds	r7, #8
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}
 8015018:	20000029 	.word	0x20000029

0801501c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
 8015022:	4603      	mov	r3, r0
 8015024:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8015026:	4b0b      	ldr	r3, [pc, #44]	; (8015054 <SD_initialize+0x38>)
 8015028:	2201      	movs	r2, #1
 801502a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801502c:	f7ff ff58 	bl	8014ee0 <BSP_SD_Init>
 8015030:	4603      	mov	r3, r0
 8015032:	2b00      	cmp	r3, #0
 8015034:	d107      	bne.n	8015046 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8015036:	79fb      	ldrb	r3, [r7, #7]
 8015038:	4618      	mov	r0, r3
 801503a:	f7ff ffd1 	bl	8014fe0 <SD_CheckStatus>
 801503e:	4603      	mov	r3, r0
 8015040:	461a      	mov	r2, r3
 8015042:	4b04      	ldr	r3, [pc, #16]	; (8015054 <SD_initialize+0x38>)
 8015044:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8015046:	4b03      	ldr	r3, [pc, #12]	; (8015054 <SD_initialize+0x38>)
 8015048:	781b      	ldrb	r3, [r3, #0]
 801504a:	b2db      	uxtb	r3, r3
}
 801504c:	4618      	mov	r0, r3
 801504e:	3708      	adds	r7, #8
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	20000029 	.word	0x20000029

08015058 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b082      	sub	sp, #8
 801505c:	af00      	add	r7, sp, #0
 801505e:	4603      	mov	r3, r0
 8015060:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8015062:	79fb      	ldrb	r3, [r7, #7]
 8015064:	4618      	mov	r0, r3
 8015066:	f7ff ffbb 	bl	8014fe0 <SD_CheckStatus>
 801506a:	4603      	mov	r3, r0
}
 801506c:	4618      	mov	r0, r3
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b086      	sub	sp, #24
 8015078:	af00      	add	r7, sp, #0
 801507a:	60b9      	str	r1, [r7, #8]
 801507c:	607a      	str	r2, [r7, #4]
 801507e:	603b      	str	r3, [r7, #0]
 8015080:	4603      	mov	r3, r0
 8015082:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015084:	2301      	movs	r3, #1
 8015086:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8015088:	f04f 33ff 	mov.w	r3, #4294967295
 801508c:	683a      	ldr	r2, [r7, #0]
 801508e:	6879      	ldr	r1, [r7, #4]
 8015090:	68b8      	ldr	r0, [r7, #8]
 8015092:	f7ff ff3d 	bl	8014f10 <BSP_SD_ReadBlocks>
 8015096:	4603      	mov	r3, r0
 8015098:	2b00      	cmp	r3, #0
 801509a:	d107      	bne.n	80150ac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 801509c:	bf00      	nop
 801509e:	f7ff ff73 	bl	8014f88 <BSP_SD_GetCardState>
 80150a2:	4603      	mov	r3, r0
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d1fa      	bne.n	801509e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80150a8:	2300      	movs	r3, #0
 80150aa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80150ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3718      	adds	r7, #24
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}

080150b6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80150b6:	b580      	push	{r7, lr}
 80150b8:	b086      	sub	sp, #24
 80150ba:	af00      	add	r7, sp, #0
 80150bc:	60b9      	str	r1, [r7, #8]
 80150be:	607a      	str	r2, [r7, #4]
 80150c0:	603b      	str	r3, [r7, #0]
 80150c2:	4603      	mov	r3, r0
 80150c4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80150c6:	2301      	movs	r3, #1
 80150c8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80150ca:	f04f 33ff 	mov.w	r3, #4294967295
 80150ce:	683a      	ldr	r2, [r7, #0]
 80150d0:	6879      	ldr	r1, [r7, #4]
 80150d2:	68b8      	ldr	r0, [r7, #8]
 80150d4:	f7ff ff3a 	bl	8014f4c <BSP_SD_WriteBlocks>
 80150d8:	4603      	mov	r3, r0
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d107      	bne.n	80150ee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80150de:	bf00      	nop
 80150e0:	f7ff ff52 	bl	8014f88 <BSP_SD_GetCardState>
 80150e4:	4603      	mov	r3, r0
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d1fa      	bne.n	80150e0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80150ea:	2300      	movs	r3, #0
 80150ec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80150ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80150f0:	4618      	mov	r0, r3
 80150f2:	3718      	adds	r7, #24
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}

080150f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b08c      	sub	sp, #48	; 0x30
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	4603      	mov	r3, r0
 8015100:	603a      	str	r2, [r7, #0]
 8015102:	71fb      	strb	r3, [r7, #7]
 8015104:	460b      	mov	r3, r1
 8015106:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015108:	2301      	movs	r3, #1
 801510a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801510e:	4b25      	ldr	r3, [pc, #148]	; (80151a4 <SD_ioctl+0xac>)
 8015110:	781b      	ldrb	r3, [r3, #0]
 8015112:	b2db      	uxtb	r3, r3
 8015114:	f003 0301 	and.w	r3, r3, #1
 8015118:	2b00      	cmp	r3, #0
 801511a:	d001      	beq.n	8015120 <SD_ioctl+0x28>
 801511c:	2303      	movs	r3, #3
 801511e:	e03c      	b.n	801519a <SD_ioctl+0xa2>

  switch (cmd)
 8015120:	79bb      	ldrb	r3, [r7, #6]
 8015122:	2b03      	cmp	r3, #3
 8015124:	d834      	bhi.n	8015190 <SD_ioctl+0x98>
 8015126:	a201      	add	r2, pc, #4	; (adr r2, 801512c <SD_ioctl+0x34>)
 8015128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801512c:	0801513d 	.word	0x0801513d
 8015130:	08015145 	.word	0x08015145
 8015134:	0801515d 	.word	0x0801515d
 8015138:	08015177 	.word	0x08015177
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801513c:	2300      	movs	r3, #0
 801513e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015142:	e028      	b.n	8015196 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015144:	f107 030c 	add.w	r3, r7, #12
 8015148:	4618      	mov	r0, r3
 801514a:	f7ff ff2d 	bl	8014fa8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015154:	2300      	movs	r3, #0
 8015156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801515a:	e01c      	b.n	8015196 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801515c:	f107 030c 	add.w	r3, r7, #12
 8015160:	4618      	mov	r0, r3
 8015162:	f7ff ff21 	bl	8014fa8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015168:	b29a      	uxth	r2, r3
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801516e:	2300      	movs	r3, #0
 8015170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015174:	e00f      	b.n	8015196 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015176:	f107 030c 	add.w	r3, r7, #12
 801517a:	4618      	mov	r0, r3
 801517c:	f7ff ff14 	bl	8014fa8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8015180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015182:	0a5a      	lsrs	r2, r3, #9
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015188:	2300      	movs	r3, #0
 801518a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801518e:	e002      	b.n	8015196 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8015190:	2304      	movs	r3, #4
 8015192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8015196:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801519a:	4618      	mov	r0, r3
 801519c:	3730      	adds	r7, #48	; 0x30
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}
 80151a2:	bf00      	nop
 80151a4:	20000029 	.word	0x20000029

080151a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b084      	sub	sp, #16
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	4603      	mov	r3, r0
 80151b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80151b2:	79fb      	ldrb	r3, [r7, #7]
 80151b4:	4a08      	ldr	r2, [pc, #32]	; (80151d8 <disk_status+0x30>)
 80151b6:	009b      	lsls	r3, r3, #2
 80151b8:	4413      	add	r3, r2
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	685b      	ldr	r3, [r3, #4]
 80151be:	79fa      	ldrb	r2, [r7, #7]
 80151c0:	4905      	ldr	r1, [pc, #20]	; (80151d8 <disk_status+0x30>)
 80151c2:	440a      	add	r2, r1
 80151c4:	7a12      	ldrb	r2, [r2, #8]
 80151c6:	4610      	mov	r0, r2
 80151c8:	4798      	blx	r3
 80151ca:	4603      	mov	r3, r0
 80151cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80151ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	3710      	adds	r7, #16
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	200002c8 	.word	0x200002c8

080151dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b084      	sub	sp, #16
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	4603      	mov	r3, r0
 80151e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80151e6:	2300      	movs	r3, #0
 80151e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80151ea:	79fb      	ldrb	r3, [r7, #7]
 80151ec:	4a0d      	ldr	r2, [pc, #52]	; (8015224 <disk_initialize+0x48>)
 80151ee:	5cd3      	ldrb	r3, [r2, r3]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d111      	bne.n	8015218 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80151f4:	79fb      	ldrb	r3, [r7, #7]
 80151f6:	4a0b      	ldr	r2, [pc, #44]	; (8015224 <disk_initialize+0x48>)
 80151f8:	2101      	movs	r1, #1
 80151fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80151fc:	79fb      	ldrb	r3, [r7, #7]
 80151fe:	4a09      	ldr	r2, [pc, #36]	; (8015224 <disk_initialize+0x48>)
 8015200:	009b      	lsls	r3, r3, #2
 8015202:	4413      	add	r3, r2
 8015204:	685b      	ldr	r3, [r3, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	79fa      	ldrb	r2, [r7, #7]
 801520a:	4906      	ldr	r1, [pc, #24]	; (8015224 <disk_initialize+0x48>)
 801520c:	440a      	add	r2, r1
 801520e:	7a12      	ldrb	r2, [r2, #8]
 8015210:	4610      	mov	r0, r2
 8015212:	4798      	blx	r3
 8015214:	4603      	mov	r3, r0
 8015216:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8015218:	7bfb      	ldrb	r3, [r7, #15]
}
 801521a:	4618      	mov	r0, r3
 801521c:	3710      	adds	r7, #16
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
 8015222:	bf00      	nop
 8015224:	200002c8 	.word	0x200002c8

08015228 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015228:	b590      	push	{r4, r7, lr}
 801522a:	b087      	sub	sp, #28
 801522c:	af00      	add	r7, sp, #0
 801522e:	60b9      	str	r1, [r7, #8]
 8015230:	607a      	str	r2, [r7, #4]
 8015232:	603b      	str	r3, [r7, #0]
 8015234:	4603      	mov	r3, r0
 8015236:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8015238:	7bfb      	ldrb	r3, [r7, #15]
 801523a:	4a0a      	ldr	r2, [pc, #40]	; (8015264 <disk_read+0x3c>)
 801523c:	009b      	lsls	r3, r3, #2
 801523e:	4413      	add	r3, r2
 8015240:	685b      	ldr	r3, [r3, #4]
 8015242:	689c      	ldr	r4, [r3, #8]
 8015244:	7bfb      	ldrb	r3, [r7, #15]
 8015246:	4a07      	ldr	r2, [pc, #28]	; (8015264 <disk_read+0x3c>)
 8015248:	4413      	add	r3, r2
 801524a:	7a18      	ldrb	r0, [r3, #8]
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	687a      	ldr	r2, [r7, #4]
 8015250:	68b9      	ldr	r1, [r7, #8]
 8015252:	47a0      	blx	r4
 8015254:	4603      	mov	r3, r0
 8015256:	75fb      	strb	r3, [r7, #23]
  return res;
 8015258:	7dfb      	ldrb	r3, [r7, #23]
}
 801525a:	4618      	mov	r0, r3
 801525c:	371c      	adds	r7, #28
 801525e:	46bd      	mov	sp, r7
 8015260:	bd90      	pop	{r4, r7, pc}
 8015262:	bf00      	nop
 8015264:	200002c8 	.word	0x200002c8

08015268 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015268:	b590      	push	{r4, r7, lr}
 801526a:	b087      	sub	sp, #28
 801526c:	af00      	add	r7, sp, #0
 801526e:	60b9      	str	r1, [r7, #8]
 8015270:	607a      	str	r2, [r7, #4]
 8015272:	603b      	str	r3, [r7, #0]
 8015274:	4603      	mov	r3, r0
 8015276:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015278:	7bfb      	ldrb	r3, [r7, #15]
 801527a:	4a0a      	ldr	r2, [pc, #40]	; (80152a4 <disk_write+0x3c>)
 801527c:	009b      	lsls	r3, r3, #2
 801527e:	4413      	add	r3, r2
 8015280:	685b      	ldr	r3, [r3, #4]
 8015282:	68dc      	ldr	r4, [r3, #12]
 8015284:	7bfb      	ldrb	r3, [r7, #15]
 8015286:	4a07      	ldr	r2, [pc, #28]	; (80152a4 <disk_write+0x3c>)
 8015288:	4413      	add	r3, r2
 801528a:	7a18      	ldrb	r0, [r3, #8]
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	68b9      	ldr	r1, [r7, #8]
 8015292:	47a0      	blx	r4
 8015294:	4603      	mov	r3, r0
 8015296:	75fb      	strb	r3, [r7, #23]
  return res;
 8015298:	7dfb      	ldrb	r3, [r7, #23]
}
 801529a:	4618      	mov	r0, r3
 801529c:	371c      	adds	r7, #28
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd90      	pop	{r4, r7, pc}
 80152a2:	bf00      	nop
 80152a4:	200002c8 	.word	0x200002c8

080152a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b084      	sub	sp, #16
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	4603      	mov	r3, r0
 80152b0:	603a      	str	r2, [r7, #0]
 80152b2:	71fb      	strb	r3, [r7, #7]
 80152b4:	460b      	mov	r3, r1
 80152b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80152b8:	79fb      	ldrb	r3, [r7, #7]
 80152ba:	4a09      	ldr	r2, [pc, #36]	; (80152e0 <disk_ioctl+0x38>)
 80152bc:	009b      	lsls	r3, r3, #2
 80152be:	4413      	add	r3, r2
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	691b      	ldr	r3, [r3, #16]
 80152c4:	79fa      	ldrb	r2, [r7, #7]
 80152c6:	4906      	ldr	r1, [pc, #24]	; (80152e0 <disk_ioctl+0x38>)
 80152c8:	440a      	add	r2, r1
 80152ca:	7a10      	ldrb	r0, [r2, #8]
 80152cc:	79b9      	ldrb	r1, [r7, #6]
 80152ce:	683a      	ldr	r2, [r7, #0]
 80152d0:	4798      	blx	r3
 80152d2:	4603      	mov	r3, r0
 80152d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80152d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3710      	adds	r7, #16
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}
 80152e0:	200002c8 	.word	0x200002c8

080152e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80152e4:	b480      	push	{r7}
 80152e6:	b085      	sub	sp, #20
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	3301      	adds	r3, #1
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80152f4:	89fb      	ldrh	r3, [r7, #14]
 80152f6:	021b      	lsls	r3, r3, #8
 80152f8:	b21a      	sxth	r2, r3
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	781b      	ldrb	r3, [r3, #0]
 80152fe:	b21b      	sxth	r3, r3
 8015300:	4313      	orrs	r3, r2
 8015302:	b21b      	sxth	r3, r3
 8015304:	81fb      	strh	r3, [r7, #14]
	return rv;
 8015306:	89fb      	ldrh	r3, [r7, #14]
}
 8015308:	4618      	mov	r0, r3
 801530a:	3714      	adds	r7, #20
 801530c:	46bd      	mov	sp, r7
 801530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015312:	4770      	bx	lr

08015314 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015314:	b480      	push	{r7}
 8015316:	b085      	sub	sp, #20
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	3303      	adds	r3, #3
 8015320:	781b      	ldrb	r3, [r3, #0]
 8015322:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	021b      	lsls	r3, r3, #8
 8015328:	687a      	ldr	r2, [r7, #4]
 801532a:	3202      	adds	r2, #2
 801532c:	7812      	ldrb	r2, [r2, #0]
 801532e:	4313      	orrs	r3, r2
 8015330:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	021b      	lsls	r3, r3, #8
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	3201      	adds	r2, #1
 801533a:	7812      	ldrb	r2, [r2, #0]
 801533c:	4313      	orrs	r3, r2
 801533e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	021b      	lsls	r3, r3, #8
 8015344:	687a      	ldr	r2, [r7, #4]
 8015346:	7812      	ldrb	r2, [r2, #0]
 8015348:	4313      	orrs	r3, r2
 801534a:	60fb      	str	r3, [r7, #12]
	return rv;
 801534c:	68fb      	ldr	r3, [r7, #12]
}
 801534e:	4618      	mov	r0, r3
 8015350:	3714      	adds	r7, #20
 8015352:	46bd      	mov	sp, r7
 8015354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015358:	4770      	bx	lr

0801535a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801535a:	b480      	push	{r7}
 801535c:	b083      	sub	sp, #12
 801535e:	af00      	add	r7, sp, #0
 8015360:	6078      	str	r0, [r7, #4]
 8015362:	460b      	mov	r3, r1
 8015364:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	1c5a      	adds	r2, r3, #1
 801536a:	607a      	str	r2, [r7, #4]
 801536c:	887a      	ldrh	r2, [r7, #2]
 801536e:	b2d2      	uxtb	r2, r2
 8015370:	701a      	strb	r2, [r3, #0]
 8015372:	887b      	ldrh	r3, [r7, #2]
 8015374:	0a1b      	lsrs	r3, r3, #8
 8015376:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	1c5a      	adds	r2, r3, #1
 801537c:	607a      	str	r2, [r7, #4]
 801537e:	887a      	ldrh	r2, [r7, #2]
 8015380:	b2d2      	uxtb	r2, r2
 8015382:	701a      	strb	r2, [r3, #0]
}
 8015384:	bf00      	nop
 8015386:	370c      	adds	r7, #12
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015390:	b480      	push	{r7}
 8015392:	b083      	sub	sp, #12
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	1c5a      	adds	r2, r3, #1
 801539e:	607a      	str	r2, [r7, #4]
 80153a0:	683a      	ldr	r2, [r7, #0]
 80153a2:	b2d2      	uxtb	r2, r2
 80153a4:	701a      	strb	r2, [r3, #0]
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	0a1b      	lsrs	r3, r3, #8
 80153aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	1c5a      	adds	r2, r3, #1
 80153b0:	607a      	str	r2, [r7, #4]
 80153b2:	683a      	ldr	r2, [r7, #0]
 80153b4:	b2d2      	uxtb	r2, r2
 80153b6:	701a      	strb	r2, [r3, #0]
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	0a1b      	lsrs	r3, r3, #8
 80153bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	1c5a      	adds	r2, r3, #1
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	683a      	ldr	r2, [r7, #0]
 80153c6:	b2d2      	uxtb	r2, r2
 80153c8:	701a      	strb	r2, [r3, #0]
 80153ca:	683b      	ldr	r3, [r7, #0]
 80153cc:	0a1b      	lsrs	r3, r3, #8
 80153ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	1c5a      	adds	r2, r3, #1
 80153d4:	607a      	str	r2, [r7, #4]
 80153d6:	683a      	ldr	r2, [r7, #0]
 80153d8:	b2d2      	uxtb	r2, r2
 80153da:	701a      	strb	r2, [r3, #0]
}
 80153dc:	bf00      	nop
 80153de:	370c      	adds	r7, #12
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr

080153e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80153e8:	b480      	push	{r7}
 80153ea:	b087      	sub	sp, #28
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	60f8      	str	r0, [r7, #12]
 80153f0:	60b9      	str	r1, [r7, #8]
 80153f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d00d      	beq.n	801541e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8015402:	693a      	ldr	r2, [r7, #16]
 8015404:	1c53      	adds	r3, r2, #1
 8015406:	613b      	str	r3, [r7, #16]
 8015408:	697b      	ldr	r3, [r7, #20]
 801540a:	1c59      	adds	r1, r3, #1
 801540c:	6179      	str	r1, [r7, #20]
 801540e:	7812      	ldrb	r2, [r2, #0]
 8015410:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	3b01      	subs	r3, #1
 8015416:	607b      	str	r3, [r7, #4]
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d1f1      	bne.n	8015402 <mem_cpy+0x1a>
	}
}
 801541e:	bf00      	nop
 8015420:	371c      	adds	r7, #28
 8015422:	46bd      	mov	sp, r7
 8015424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015428:	4770      	bx	lr

0801542a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801542a:	b480      	push	{r7}
 801542c:	b087      	sub	sp, #28
 801542e:	af00      	add	r7, sp, #0
 8015430:	60f8      	str	r0, [r7, #12]
 8015432:	60b9      	str	r1, [r7, #8]
 8015434:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	1c5a      	adds	r2, r3, #1
 801543e:	617a      	str	r2, [r7, #20]
 8015440:	68ba      	ldr	r2, [r7, #8]
 8015442:	b2d2      	uxtb	r2, r2
 8015444:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	3b01      	subs	r3, #1
 801544a:	607b      	str	r3, [r7, #4]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d1f3      	bne.n	801543a <mem_set+0x10>
}
 8015452:	bf00      	nop
 8015454:	bf00      	nop
 8015456:	371c      	adds	r7, #28
 8015458:	46bd      	mov	sp, r7
 801545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545e:	4770      	bx	lr

08015460 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8015460:	b480      	push	{r7}
 8015462:	b089      	sub	sp, #36	; 0x24
 8015464:	af00      	add	r7, sp, #0
 8015466:	60f8      	str	r0, [r7, #12]
 8015468:	60b9      	str	r1, [r7, #8]
 801546a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	61fb      	str	r3, [r7, #28]
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8015474:	2300      	movs	r3, #0
 8015476:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8015478:	69fb      	ldr	r3, [r7, #28]
 801547a:	1c5a      	adds	r2, r3, #1
 801547c:	61fa      	str	r2, [r7, #28]
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	4619      	mov	r1, r3
 8015482:	69bb      	ldr	r3, [r7, #24]
 8015484:	1c5a      	adds	r2, r3, #1
 8015486:	61ba      	str	r2, [r7, #24]
 8015488:	781b      	ldrb	r3, [r3, #0]
 801548a:	1acb      	subs	r3, r1, r3
 801548c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	3b01      	subs	r3, #1
 8015492:	607b      	str	r3, [r7, #4]
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d002      	beq.n	80154a0 <mem_cmp+0x40>
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d0eb      	beq.n	8015478 <mem_cmp+0x18>

	return r;
 80154a0:	697b      	ldr	r3, [r7, #20]
}
 80154a2:	4618      	mov	r0, r3
 80154a4:	3724      	adds	r7, #36	; 0x24
 80154a6:	46bd      	mov	sp, r7
 80154a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ac:	4770      	bx	lr

080154ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80154ae:	b480      	push	{r7}
 80154b0:	b083      	sub	sp, #12
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	6078      	str	r0, [r7, #4]
 80154b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80154b8:	e002      	b.n	80154c0 <chk_chr+0x12>
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	3301      	adds	r3, #1
 80154be:	607b      	str	r3, [r7, #4]
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d005      	beq.n	80154d4 <chk_chr+0x26>
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	461a      	mov	r2, r3
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	4293      	cmp	r3, r2
 80154d2:	d1f2      	bne.n	80154ba <chk_chr+0xc>
	return *str;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	781b      	ldrb	r3, [r3, #0]
}
 80154d8:	4618      	mov	r0, r3
 80154da:	370c      	adds	r7, #12
 80154dc:	46bd      	mov	sp, r7
 80154de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e2:	4770      	bx	lr

080154e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80154e4:	b480      	push	{r7}
 80154e6:	b085      	sub	sp, #20
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
 80154ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80154ee:	2300      	movs	r3, #0
 80154f0:	60bb      	str	r3, [r7, #8]
 80154f2:	68bb      	ldr	r3, [r7, #8]
 80154f4:	60fb      	str	r3, [r7, #12]
 80154f6:	e029      	b.n	801554c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80154f8:	4a27      	ldr	r2, [pc, #156]	; (8015598 <chk_lock+0xb4>)
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	011b      	lsls	r3, r3, #4
 80154fe:	4413      	add	r3, r2
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d01d      	beq.n	8015542 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015506:	4a24      	ldr	r2, [pc, #144]	; (8015598 <chk_lock+0xb4>)
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	011b      	lsls	r3, r3, #4
 801550c:	4413      	add	r3, r2
 801550e:	681a      	ldr	r2, [r3, #0]
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	429a      	cmp	r2, r3
 8015516:	d116      	bne.n	8015546 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8015518:	4a1f      	ldr	r2, [pc, #124]	; (8015598 <chk_lock+0xb4>)
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	011b      	lsls	r3, r3, #4
 801551e:	4413      	add	r3, r2
 8015520:	3304      	adds	r3, #4
 8015522:	681a      	ldr	r2, [r3, #0]
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8015528:	429a      	cmp	r2, r3
 801552a:	d10c      	bne.n	8015546 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801552c:	4a1a      	ldr	r2, [pc, #104]	; (8015598 <chk_lock+0xb4>)
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	011b      	lsls	r3, r3, #4
 8015532:	4413      	add	r3, r2
 8015534:	3308      	adds	r3, #8
 8015536:	681a      	ldr	r2, [r3, #0]
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801553c:	429a      	cmp	r2, r3
 801553e:	d102      	bne.n	8015546 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8015540:	e007      	b.n	8015552 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8015542:	2301      	movs	r3, #1
 8015544:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	3301      	adds	r3, #1
 801554a:	60fb      	str	r3, [r7, #12]
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	2b01      	cmp	r3, #1
 8015550:	d9d2      	bls.n	80154f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	2b02      	cmp	r3, #2
 8015556:	d109      	bne.n	801556c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d102      	bne.n	8015564 <chk_lock+0x80>
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	2b02      	cmp	r3, #2
 8015562:	d101      	bne.n	8015568 <chk_lock+0x84>
 8015564:	2300      	movs	r3, #0
 8015566:	e010      	b.n	801558a <chk_lock+0xa6>
 8015568:	2312      	movs	r3, #18
 801556a:	e00e      	b.n	801558a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d108      	bne.n	8015584 <chk_lock+0xa0>
 8015572:	4a09      	ldr	r2, [pc, #36]	; (8015598 <chk_lock+0xb4>)
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	011b      	lsls	r3, r3, #4
 8015578:	4413      	add	r3, r2
 801557a:	330c      	adds	r3, #12
 801557c:	881b      	ldrh	r3, [r3, #0]
 801557e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015582:	d101      	bne.n	8015588 <chk_lock+0xa4>
 8015584:	2310      	movs	r3, #16
 8015586:	e000      	b.n	801558a <chk_lock+0xa6>
 8015588:	2300      	movs	r3, #0
}
 801558a:	4618      	mov	r0, r3
 801558c:	3714      	adds	r7, #20
 801558e:	46bd      	mov	sp, r7
 8015590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015594:	4770      	bx	lr
 8015596:	bf00      	nop
 8015598:	200002a8 	.word	0x200002a8

0801559c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801559c:	b480      	push	{r7}
 801559e:	b083      	sub	sp, #12
 80155a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80155a2:	2300      	movs	r3, #0
 80155a4:	607b      	str	r3, [r7, #4]
 80155a6:	e002      	b.n	80155ae <enq_lock+0x12>
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	3301      	adds	r3, #1
 80155ac:	607b      	str	r3, [r7, #4]
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	2b01      	cmp	r3, #1
 80155b2:	d806      	bhi.n	80155c2 <enq_lock+0x26>
 80155b4:	4a09      	ldr	r2, [pc, #36]	; (80155dc <enq_lock+0x40>)
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	011b      	lsls	r3, r3, #4
 80155ba:	4413      	add	r3, r2
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d1f2      	bne.n	80155a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	2b02      	cmp	r3, #2
 80155c6:	bf14      	ite	ne
 80155c8:	2301      	movne	r3, #1
 80155ca:	2300      	moveq	r3, #0
 80155cc:	b2db      	uxtb	r3, r3
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	370c      	adds	r7, #12
 80155d2:	46bd      	mov	sp, r7
 80155d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d8:	4770      	bx	lr
 80155da:	bf00      	nop
 80155dc:	200002a8 	.word	0x200002a8

080155e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80155e0:	b480      	push	{r7}
 80155e2:	b085      	sub	sp, #20
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80155ea:	2300      	movs	r3, #0
 80155ec:	60fb      	str	r3, [r7, #12]
 80155ee:	e01f      	b.n	8015630 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80155f0:	4a41      	ldr	r2, [pc, #260]	; (80156f8 <inc_lock+0x118>)
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	011b      	lsls	r3, r3, #4
 80155f6:	4413      	add	r3, r2
 80155f8:	681a      	ldr	r2, [r3, #0]
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	429a      	cmp	r2, r3
 8015600:	d113      	bne.n	801562a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8015602:	4a3d      	ldr	r2, [pc, #244]	; (80156f8 <inc_lock+0x118>)
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	011b      	lsls	r3, r3, #4
 8015608:	4413      	add	r3, r2
 801560a:	3304      	adds	r3, #4
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8015612:	429a      	cmp	r2, r3
 8015614:	d109      	bne.n	801562a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8015616:	4a38      	ldr	r2, [pc, #224]	; (80156f8 <inc_lock+0x118>)
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	011b      	lsls	r3, r3, #4
 801561c:	4413      	add	r3, r2
 801561e:	3308      	adds	r3, #8
 8015620:	681a      	ldr	r2, [r3, #0]
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8015626:	429a      	cmp	r2, r3
 8015628:	d006      	beq.n	8015638 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	3301      	adds	r3, #1
 801562e:	60fb      	str	r3, [r7, #12]
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	2b01      	cmp	r3, #1
 8015634:	d9dc      	bls.n	80155f0 <inc_lock+0x10>
 8015636:	e000      	b.n	801563a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8015638:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	2b02      	cmp	r3, #2
 801563e:	d132      	bne.n	80156a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015640:	2300      	movs	r3, #0
 8015642:	60fb      	str	r3, [r7, #12]
 8015644:	e002      	b.n	801564c <inc_lock+0x6c>
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	3301      	adds	r3, #1
 801564a:	60fb      	str	r3, [r7, #12]
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	2b01      	cmp	r3, #1
 8015650:	d806      	bhi.n	8015660 <inc_lock+0x80>
 8015652:	4a29      	ldr	r2, [pc, #164]	; (80156f8 <inc_lock+0x118>)
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	011b      	lsls	r3, r3, #4
 8015658:	4413      	add	r3, r2
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d1f2      	bne.n	8015646 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	2b02      	cmp	r3, #2
 8015664:	d101      	bne.n	801566a <inc_lock+0x8a>
 8015666:	2300      	movs	r3, #0
 8015668:	e040      	b.n	80156ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	681a      	ldr	r2, [r3, #0]
 801566e:	4922      	ldr	r1, [pc, #136]	; (80156f8 <inc_lock+0x118>)
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	011b      	lsls	r3, r3, #4
 8015674:	440b      	add	r3, r1
 8015676:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	689a      	ldr	r2, [r3, #8]
 801567c:	491e      	ldr	r1, [pc, #120]	; (80156f8 <inc_lock+0x118>)
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	011b      	lsls	r3, r3, #4
 8015682:	440b      	add	r3, r1
 8015684:	3304      	adds	r3, #4
 8015686:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	695a      	ldr	r2, [r3, #20]
 801568c:	491a      	ldr	r1, [pc, #104]	; (80156f8 <inc_lock+0x118>)
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	011b      	lsls	r3, r3, #4
 8015692:	440b      	add	r3, r1
 8015694:	3308      	adds	r3, #8
 8015696:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015698:	4a17      	ldr	r2, [pc, #92]	; (80156f8 <inc_lock+0x118>)
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	011b      	lsls	r3, r3, #4
 801569e:	4413      	add	r3, r2
 80156a0:	330c      	adds	r3, #12
 80156a2:	2200      	movs	r2, #0
 80156a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d009      	beq.n	80156c0 <inc_lock+0xe0>
 80156ac:	4a12      	ldr	r2, [pc, #72]	; (80156f8 <inc_lock+0x118>)
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	011b      	lsls	r3, r3, #4
 80156b2:	4413      	add	r3, r2
 80156b4:	330c      	adds	r3, #12
 80156b6:	881b      	ldrh	r3, [r3, #0]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d001      	beq.n	80156c0 <inc_lock+0xe0>
 80156bc:	2300      	movs	r3, #0
 80156be:	e015      	b.n	80156ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d108      	bne.n	80156d8 <inc_lock+0xf8>
 80156c6:	4a0c      	ldr	r2, [pc, #48]	; (80156f8 <inc_lock+0x118>)
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	011b      	lsls	r3, r3, #4
 80156cc:	4413      	add	r3, r2
 80156ce:	330c      	adds	r3, #12
 80156d0:	881b      	ldrh	r3, [r3, #0]
 80156d2:	3301      	adds	r3, #1
 80156d4:	b29a      	uxth	r2, r3
 80156d6:	e001      	b.n	80156dc <inc_lock+0xfc>
 80156d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80156dc:	4906      	ldr	r1, [pc, #24]	; (80156f8 <inc_lock+0x118>)
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	011b      	lsls	r3, r3, #4
 80156e2:	440b      	add	r3, r1
 80156e4:	330c      	adds	r3, #12
 80156e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	3301      	adds	r3, #1
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	3714      	adds	r7, #20
 80156f0:	46bd      	mov	sp, r7
 80156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f6:	4770      	bx	lr
 80156f8:	200002a8 	.word	0x200002a8

080156fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80156fc:	b480      	push	{r7}
 80156fe:	b085      	sub	sp, #20
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	3b01      	subs	r3, #1
 8015708:	607b      	str	r3, [r7, #4]
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2b01      	cmp	r3, #1
 801570e:	d825      	bhi.n	801575c <dec_lock+0x60>
		n = Files[i].ctr;
 8015710:	4a17      	ldr	r2, [pc, #92]	; (8015770 <dec_lock+0x74>)
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	011b      	lsls	r3, r3, #4
 8015716:	4413      	add	r3, r2
 8015718:	330c      	adds	r3, #12
 801571a:	881b      	ldrh	r3, [r3, #0]
 801571c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801571e:	89fb      	ldrh	r3, [r7, #14]
 8015720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015724:	d101      	bne.n	801572a <dec_lock+0x2e>
 8015726:	2300      	movs	r3, #0
 8015728:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801572a:	89fb      	ldrh	r3, [r7, #14]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d002      	beq.n	8015736 <dec_lock+0x3a>
 8015730:	89fb      	ldrh	r3, [r7, #14]
 8015732:	3b01      	subs	r3, #1
 8015734:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8015736:	4a0e      	ldr	r2, [pc, #56]	; (8015770 <dec_lock+0x74>)
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	011b      	lsls	r3, r3, #4
 801573c:	4413      	add	r3, r2
 801573e:	330c      	adds	r3, #12
 8015740:	89fa      	ldrh	r2, [r7, #14]
 8015742:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8015744:	89fb      	ldrh	r3, [r7, #14]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d105      	bne.n	8015756 <dec_lock+0x5a>
 801574a:	4a09      	ldr	r2, [pc, #36]	; (8015770 <dec_lock+0x74>)
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	011b      	lsls	r3, r3, #4
 8015750:	4413      	add	r3, r2
 8015752:	2200      	movs	r2, #0
 8015754:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015756:	2300      	movs	r3, #0
 8015758:	737b      	strb	r3, [r7, #13]
 801575a:	e001      	b.n	8015760 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801575c:	2302      	movs	r3, #2
 801575e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015760:	7b7b      	ldrb	r3, [r7, #13]
}
 8015762:	4618      	mov	r0, r3
 8015764:	3714      	adds	r7, #20
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	200002a8 	.word	0x200002a8

08015774 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015774:	b480      	push	{r7}
 8015776:	b085      	sub	sp, #20
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801577c:	2300      	movs	r3, #0
 801577e:	60fb      	str	r3, [r7, #12]
 8015780:	e010      	b.n	80157a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015782:	4a0d      	ldr	r2, [pc, #52]	; (80157b8 <clear_lock+0x44>)
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	011b      	lsls	r3, r3, #4
 8015788:	4413      	add	r3, r2
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	687a      	ldr	r2, [r7, #4]
 801578e:	429a      	cmp	r2, r3
 8015790:	d105      	bne.n	801579e <clear_lock+0x2a>
 8015792:	4a09      	ldr	r2, [pc, #36]	; (80157b8 <clear_lock+0x44>)
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	011b      	lsls	r3, r3, #4
 8015798:	4413      	add	r3, r2
 801579a:	2200      	movs	r2, #0
 801579c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	3301      	adds	r3, #1
 80157a2:	60fb      	str	r3, [r7, #12]
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	2b01      	cmp	r3, #1
 80157a8:	d9eb      	bls.n	8015782 <clear_lock+0xe>
	}
}
 80157aa:	bf00      	nop
 80157ac:	bf00      	nop
 80157ae:	3714      	adds	r7, #20
 80157b0:	46bd      	mov	sp, r7
 80157b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b6:	4770      	bx	lr
 80157b8:	200002a8 	.word	0x200002a8

080157bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b086      	sub	sp, #24
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80157c4:	2300      	movs	r3, #0
 80157c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	78db      	ldrb	r3, [r3, #3]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d034      	beq.n	801583a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	7858      	ldrb	r0, [r3, #1]
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80157e0:	2301      	movs	r3, #1
 80157e2:	697a      	ldr	r2, [r7, #20]
 80157e4:	f7ff fd40 	bl	8015268 <disk_write>
 80157e8:	4603      	mov	r3, r0
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d002      	beq.n	80157f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80157ee:	2301      	movs	r3, #1
 80157f0:	73fb      	strb	r3, [r7, #15]
 80157f2:	e022      	b.n	801583a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2200      	movs	r2, #0
 80157f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	6a1b      	ldr	r3, [r3, #32]
 80157fe:	697a      	ldr	r2, [r7, #20]
 8015800:	1ad2      	subs	r2, r2, r3
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	699b      	ldr	r3, [r3, #24]
 8015806:	429a      	cmp	r2, r3
 8015808:	d217      	bcs.n	801583a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	789b      	ldrb	r3, [r3, #2]
 801580e:	613b      	str	r3, [r7, #16]
 8015810:	e010      	b.n	8015834 <sync_window+0x78>
					wsect += fs->fsize;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	699b      	ldr	r3, [r3, #24]
 8015816:	697a      	ldr	r2, [r7, #20]
 8015818:	4413      	add	r3, r2
 801581a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	7858      	ldrb	r0, [r3, #1]
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015826:	2301      	movs	r3, #1
 8015828:	697a      	ldr	r2, [r7, #20]
 801582a:	f7ff fd1d 	bl	8015268 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	3b01      	subs	r3, #1
 8015832:	613b      	str	r3, [r7, #16]
 8015834:	693b      	ldr	r3, [r7, #16]
 8015836:	2b01      	cmp	r3, #1
 8015838:	d8eb      	bhi.n	8015812 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801583a:	7bfb      	ldrb	r3, [r7, #15]
}
 801583c:	4618      	mov	r0, r3
 801583e:	3718      	adds	r7, #24
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b084      	sub	sp, #16
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801584e:	2300      	movs	r3, #0
 8015850:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015856:	683a      	ldr	r2, [r7, #0]
 8015858:	429a      	cmp	r2, r3
 801585a:	d01b      	beq.n	8015894 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f7ff ffad 	bl	80157bc <sync_window>
 8015862:	4603      	mov	r3, r0
 8015864:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015866:	7bfb      	ldrb	r3, [r7, #15]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d113      	bne.n	8015894 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	7858      	ldrb	r0, [r3, #1]
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015876:	2301      	movs	r3, #1
 8015878:	683a      	ldr	r2, [r7, #0]
 801587a:	f7ff fcd5 	bl	8015228 <disk_read>
 801587e:	4603      	mov	r3, r0
 8015880:	2b00      	cmp	r3, #0
 8015882:	d004      	beq.n	801588e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015884:	f04f 33ff 	mov.w	r3, #4294967295
 8015888:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801588a:	2301      	movs	r3, #1
 801588c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	683a      	ldr	r2, [r7, #0]
 8015892:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8015894:	7bfb      	ldrb	r3, [r7, #15]
}
 8015896:	4618      	mov	r0, r3
 8015898:	3710      	adds	r7, #16
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
	...

080158a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b084      	sub	sp, #16
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f7ff ff87 	bl	80157bc <sync_window>
 80158ae:	4603      	mov	r3, r0
 80158b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80158b2:	7bfb      	ldrb	r3, [r7, #15]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d158      	bne.n	801596a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	781b      	ldrb	r3, [r3, #0]
 80158bc:	2b03      	cmp	r3, #3
 80158be:	d148      	bne.n	8015952 <sync_fs+0xb2>
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	791b      	ldrb	r3, [r3, #4]
 80158c4:	2b01      	cmp	r3, #1
 80158c6:	d144      	bne.n	8015952 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	3330      	adds	r3, #48	; 0x30
 80158cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80158d0:	2100      	movs	r1, #0
 80158d2:	4618      	mov	r0, r3
 80158d4:	f7ff fda9 	bl	801542a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	3330      	adds	r3, #48	; 0x30
 80158dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80158e0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80158e4:	4618      	mov	r0, r3
 80158e6:	f7ff fd38 	bl	801535a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	3330      	adds	r3, #48	; 0x30
 80158ee:	4921      	ldr	r1, [pc, #132]	; (8015974 <sync_fs+0xd4>)
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7ff fd4d 	bl	8015390 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	3330      	adds	r3, #48	; 0x30
 80158fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80158fe:	491e      	ldr	r1, [pc, #120]	; (8015978 <sync_fs+0xd8>)
 8015900:	4618      	mov	r0, r3
 8015902:	f7ff fd45 	bl	8015390 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	3330      	adds	r3, #48	; 0x30
 801590a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	691b      	ldr	r3, [r3, #16]
 8015912:	4619      	mov	r1, r3
 8015914:	4610      	mov	r0, r2
 8015916:	f7ff fd3b 	bl	8015390 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	3330      	adds	r3, #48	; 0x30
 801591e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	68db      	ldr	r3, [r3, #12]
 8015926:	4619      	mov	r1, r3
 8015928:	4610      	mov	r0, r2
 801592a:	f7ff fd31 	bl	8015390 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	69db      	ldr	r3, [r3, #28]
 8015932:	1c5a      	adds	r2, r3, #1
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	7858      	ldrb	r0, [r3, #1]
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015946:	2301      	movs	r3, #1
 8015948:	f7ff fc8e 	bl	8015268 <disk_write>
			fs->fsi_flag = 0;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2200      	movs	r2, #0
 8015950:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	785b      	ldrb	r3, [r3, #1]
 8015956:	2200      	movs	r2, #0
 8015958:	2100      	movs	r1, #0
 801595a:	4618      	mov	r0, r3
 801595c:	f7ff fca4 	bl	80152a8 <disk_ioctl>
 8015960:	4603      	mov	r3, r0
 8015962:	2b00      	cmp	r3, #0
 8015964:	d001      	beq.n	801596a <sync_fs+0xca>
 8015966:	2301      	movs	r3, #1
 8015968:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801596a:	7bfb      	ldrb	r3, [r7, #15]
}
 801596c:	4618      	mov	r0, r3
 801596e:	3710      	adds	r7, #16
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}
 8015974:	41615252 	.word	0x41615252
 8015978:	61417272 	.word	0x61417272

0801597c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801597c:	b480      	push	{r7}
 801597e:	b083      	sub	sp, #12
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
 8015984:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	3b02      	subs	r3, #2
 801598a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	695b      	ldr	r3, [r3, #20]
 8015990:	3b02      	subs	r3, #2
 8015992:	683a      	ldr	r2, [r7, #0]
 8015994:	429a      	cmp	r2, r3
 8015996:	d301      	bcc.n	801599c <clust2sect+0x20>
 8015998:	2300      	movs	r3, #0
 801599a:	e008      	b.n	80159ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	895b      	ldrh	r3, [r3, #10]
 80159a0:	461a      	mov	r2, r3
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	fb03 f202 	mul.w	r2, r3, r2
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159ac:	4413      	add	r3, r2
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	370c      	adds	r7, #12
 80159b2:	46bd      	mov	sp, r7
 80159b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b8:	4770      	bx	lr

080159ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80159ba:	b580      	push	{r7, lr}
 80159bc:	b086      	sub	sp, #24
 80159be:	af00      	add	r7, sp, #0
 80159c0:	6078      	str	r0, [r7, #4]
 80159c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	2b01      	cmp	r3, #1
 80159ce:	d904      	bls.n	80159da <get_fat+0x20>
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	695b      	ldr	r3, [r3, #20]
 80159d4:	683a      	ldr	r2, [r7, #0]
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d302      	bcc.n	80159e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80159da:	2301      	movs	r3, #1
 80159dc:	617b      	str	r3, [r7, #20]
 80159de:	e08f      	b.n	8015b00 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80159e0:	f04f 33ff 	mov.w	r3, #4294967295
 80159e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80159e6:	693b      	ldr	r3, [r7, #16]
 80159e8:	781b      	ldrb	r3, [r3, #0]
 80159ea:	2b03      	cmp	r3, #3
 80159ec:	d062      	beq.n	8015ab4 <get_fat+0xfa>
 80159ee:	2b03      	cmp	r3, #3
 80159f0:	dc7c      	bgt.n	8015aec <get_fat+0x132>
 80159f2:	2b01      	cmp	r3, #1
 80159f4:	d002      	beq.n	80159fc <get_fat+0x42>
 80159f6:	2b02      	cmp	r3, #2
 80159f8:	d042      	beq.n	8015a80 <get_fat+0xc6>
 80159fa:	e077      	b.n	8015aec <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	60fb      	str	r3, [r7, #12]
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	085b      	lsrs	r3, r3, #1
 8015a04:	68fa      	ldr	r2, [r7, #12]
 8015a06:	4413      	add	r3, r2
 8015a08:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015a0a:	693b      	ldr	r3, [r7, #16]
 8015a0c:	6a1a      	ldr	r2, [r3, #32]
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	0a5b      	lsrs	r3, r3, #9
 8015a12:	4413      	add	r3, r2
 8015a14:	4619      	mov	r1, r3
 8015a16:	6938      	ldr	r0, [r7, #16]
 8015a18:	f7ff ff14 	bl	8015844 <move_window>
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d167      	bne.n	8015af2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	1c5a      	adds	r2, r3, #1
 8015a26:	60fa      	str	r2, [r7, #12]
 8015a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a2c:	693a      	ldr	r2, [r7, #16]
 8015a2e:	4413      	add	r3, r2
 8015a30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015a34:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015a36:	693b      	ldr	r3, [r7, #16]
 8015a38:	6a1a      	ldr	r2, [r3, #32]
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	0a5b      	lsrs	r3, r3, #9
 8015a3e:	4413      	add	r3, r2
 8015a40:	4619      	mov	r1, r3
 8015a42:	6938      	ldr	r0, [r7, #16]
 8015a44:	f7ff fefe 	bl	8015844 <move_window>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d153      	bne.n	8015af6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a54:	693a      	ldr	r2, [r7, #16]
 8015a56:	4413      	add	r3, r2
 8015a58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015a5c:	021b      	lsls	r3, r3, #8
 8015a5e:	461a      	mov	r2, r3
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	4313      	orrs	r3, r2
 8015a64:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	f003 0301 	and.w	r3, r3, #1
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d002      	beq.n	8015a76 <get_fat+0xbc>
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	091b      	lsrs	r3, r3, #4
 8015a74:	e002      	b.n	8015a7c <get_fat+0xc2>
 8015a76:	68bb      	ldr	r3, [r7, #8]
 8015a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015a7c:	617b      	str	r3, [r7, #20]
			break;
 8015a7e:	e03f      	b.n	8015b00 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	6a1a      	ldr	r2, [r3, #32]
 8015a84:	683b      	ldr	r3, [r7, #0]
 8015a86:	0a1b      	lsrs	r3, r3, #8
 8015a88:	4413      	add	r3, r2
 8015a8a:	4619      	mov	r1, r3
 8015a8c:	6938      	ldr	r0, [r7, #16]
 8015a8e:	f7ff fed9 	bl	8015844 <move_window>
 8015a92:	4603      	mov	r3, r0
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d130      	bne.n	8015afa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015a98:	693b      	ldr	r3, [r7, #16]
 8015a9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015a9e:	683b      	ldr	r3, [r7, #0]
 8015aa0:	005b      	lsls	r3, r3, #1
 8015aa2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015aa6:	4413      	add	r3, r2
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7ff fc1b 	bl	80152e4 <ld_word>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	617b      	str	r3, [r7, #20]
			break;
 8015ab2:	e025      	b.n	8015b00 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015ab4:	693b      	ldr	r3, [r7, #16]
 8015ab6:	6a1a      	ldr	r2, [r3, #32]
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	09db      	lsrs	r3, r3, #7
 8015abc:	4413      	add	r3, r2
 8015abe:	4619      	mov	r1, r3
 8015ac0:	6938      	ldr	r0, [r7, #16]
 8015ac2:	f7ff febf 	bl	8015844 <move_window>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d118      	bne.n	8015afe <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	009b      	lsls	r3, r3, #2
 8015ad6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015ada:	4413      	add	r3, r2
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7ff fc19 	bl	8015314 <ld_dword>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015ae8:	617b      	str	r3, [r7, #20]
			break;
 8015aea:	e009      	b.n	8015b00 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015aec:	2301      	movs	r3, #1
 8015aee:	617b      	str	r3, [r7, #20]
 8015af0:	e006      	b.n	8015b00 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015af2:	bf00      	nop
 8015af4:	e004      	b.n	8015b00 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015af6:	bf00      	nop
 8015af8:	e002      	b.n	8015b00 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015afa:	bf00      	nop
 8015afc:	e000      	b.n	8015b00 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015afe:	bf00      	nop
		}
	}

	return val;
 8015b00:	697b      	ldr	r3, [r7, #20]
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3718      	adds	r7, #24
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}

08015b0a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015b0a:	b590      	push	{r4, r7, lr}
 8015b0c:	b089      	sub	sp, #36	; 0x24
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	60f8      	str	r0, [r7, #12]
 8015b12:	60b9      	str	r1, [r7, #8]
 8015b14:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015b16:	2302      	movs	r3, #2
 8015b18:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015b1a:	68bb      	ldr	r3, [r7, #8]
 8015b1c:	2b01      	cmp	r3, #1
 8015b1e:	f240 80d2 	bls.w	8015cc6 <put_fat+0x1bc>
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	695b      	ldr	r3, [r3, #20]
 8015b26:	68ba      	ldr	r2, [r7, #8]
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	f080 80cc 	bcs.w	8015cc6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	781b      	ldrb	r3, [r3, #0]
 8015b32:	2b03      	cmp	r3, #3
 8015b34:	f000 8096 	beq.w	8015c64 <put_fat+0x15a>
 8015b38:	2b03      	cmp	r3, #3
 8015b3a:	f300 80cd 	bgt.w	8015cd8 <put_fat+0x1ce>
 8015b3e:	2b01      	cmp	r3, #1
 8015b40:	d002      	beq.n	8015b48 <put_fat+0x3e>
 8015b42:	2b02      	cmp	r3, #2
 8015b44:	d06e      	beq.n	8015c24 <put_fat+0x11a>
 8015b46:	e0c7      	b.n	8015cd8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	61bb      	str	r3, [r7, #24]
 8015b4c:	69bb      	ldr	r3, [r7, #24]
 8015b4e:	085b      	lsrs	r3, r3, #1
 8015b50:	69ba      	ldr	r2, [r7, #24]
 8015b52:	4413      	add	r3, r2
 8015b54:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	6a1a      	ldr	r2, [r3, #32]
 8015b5a:	69bb      	ldr	r3, [r7, #24]
 8015b5c:	0a5b      	lsrs	r3, r3, #9
 8015b5e:	4413      	add	r3, r2
 8015b60:	4619      	mov	r1, r3
 8015b62:	68f8      	ldr	r0, [r7, #12]
 8015b64:	f7ff fe6e 	bl	8015844 <move_window>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015b6c:	7ffb      	ldrb	r3, [r7, #31]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	f040 80ab 	bne.w	8015cca <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015b7a:	69bb      	ldr	r3, [r7, #24]
 8015b7c:	1c59      	adds	r1, r3, #1
 8015b7e:	61b9      	str	r1, [r7, #24]
 8015b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015b84:	4413      	add	r3, r2
 8015b86:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	f003 0301 	and.w	r3, r3, #1
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d00d      	beq.n	8015bae <put_fat+0xa4>
 8015b92:	697b      	ldr	r3, [r7, #20]
 8015b94:	781b      	ldrb	r3, [r3, #0]
 8015b96:	b25b      	sxtb	r3, r3
 8015b98:	f003 030f 	and.w	r3, r3, #15
 8015b9c:	b25a      	sxtb	r2, r3
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	b2db      	uxtb	r3, r3
 8015ba2:	011b      	lsls	r3, r3, #4
 8015ba4:	b25b      	sxtb	r3, r3
 8015ba6:	4313      	orrs	r3, r2
 8015ba8:	b25b      	sxtb	r3, r3
 8015baa:	b2db      	uxtb	r3, r3
 8015bac:	e001      	b.n	8015bb2 <put_fat+0xa8>
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	b2db      	uxtb	r3, r3
 8015bb2:	697a      	ldr	r2, [r7, #20]
 8015bb4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	2201      	movs	r2, #1
 8015bba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	6a1a      	ldr	r2, [r3, #32]
 8015bc0:	69bb      	ldr	r3, [r7, #24]
 8015bc2:	0a5b      	lsrs	r3, r3, #9
 8015bc4:	4413      	add	r3, r2
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	68f8      	ldr	r0, [r7, #12]
 8015bca:	f7ff fe3b 	bl	8015844 <move_window>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015bd2:	7ffb      	ldrb	r3, [r7, #31]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d17a      	bne.n	8015cce <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015bde:	69bb      	ldr	r3, [r7, #24]
 8015be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015be4:	4413      	add	r3, r2
 8015be6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	f003 0301 	and.w	r3, r3, #1
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d003      	beq.n	8015bfa <put_fat+0xf0>
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	091b      	lsrs	r3, r3, #4
 8015bf6:	b2db      	uxtb	r3, r3
 8015bf8:	e00e      	b.n	8015c18 <put_fat+0x10e>
 8015bfa:	697b      	ldr	r3, [r7, #20]
 8015bfc:	781b      	ldrb	r3, [r3, #0]
 8015bfe:	b25b      	sxtb	r3, r3
 8015c00:	f023 030f 	bic.w	r3, r3, #15
 8015c04:	b25a      	sxtb	r2, r3
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	0a1b      	lsrs	r3, r3, #8
 8015c0a:	b25b      	sxtb	r3, r3
 8015c0c:	f003 030f 	and.w	r3, r3, #15
 8015c10:	b25b      	sxtb	r3, r3
 8015c12:	4313      	orrs	r3, r2
 8015c14:	b25b      	sxtb	r3, r3
 8015c16:	b2db      	uxtb	r3, r3
 8015c18:	697a      	ldr	r2, [r7, #20]
 8015c1a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	2201      	movs	r2, #1
 8015c20:	70da      	strb	r2, [r3, #3]
			break;
 8015c22:	e059      	b.n	8015cd8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	6a1a      	ldr	r2, [r3, #32]
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	0a1b      	lsrs	r3, r3, #8
 8015c2c:	4413      	add	r3, r2
 8015c2e:	4619      	mov	r1, r3
 8015c30:	68f8      	ldr	r0, [r7, #12]
 8015c32:	f7ff fe07 	bl	8015844 <move_window>
 8015c36:	4603      	mov	r3, r0
 8015c38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015c3a:	7ffb      	ldrb	r3, [r7, #31]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d148      	bne.n	8015cd2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015c46:	68bb      	ldr	r3, [r7, #8]
 8015c48:	005b      	lsls	r3, r3, #1
 8015c4a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015c4e:	4413      	add	r3, r2
 8015c50:	687a      	ldr	r2, [r7, #4]
 8015c52:	b292      	uxth	r2, r2
 8015c54:	4611      	mov	r1, r2
 8015c56:	4618      	mov	r0, r3
 8015c58:	f7ff fb7f 	bl	801535a <st_word>
			fs->wflag = 1;
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	2201      	movs	r2, #1
 8015c60:	70da      	strb	r2, [r3, #3]
			break;
 8015c62:	e039      	b.n	8015cd8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	6a1a      	ldr	r2, [r3, #32]
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	09db      	lsrs	r3, r3, #7
 8015c6c:	4413      	add	r3, r2
 8015c6e:	4619      	mov	r1, r3
 8015c70:	68f8      	ldr	r0, [r7, #12]
 8015c72:	f7ff fde7 	bl	8015844 <move_window>
 8015c76:	4603      	mov	r3, r0
 8015c78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015c7a:	7ffb      	ldrb	r3, [r7, #31]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d12a      	bne.n	8015cd6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	009b      	lsls	r3, r3, #2
 8015c90:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015c94:	4413      	add	r3, r2
 8015c96:	4618      	mov	r0, r3
 8015c98:	f7ff fb3c 	bl	8015314 <ld_dword>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015ca2:	4323      	orrs	r3, r4
 8015ca4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015cac:	68bb      	ldr	r3, [r7, #8]
 8015cae:	009b      	lsls	r3, r3, #2
 8015cb0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015cb4:	4413      	add	r3, r2
 8015cb6:	6879      	ldr	r1, [r7, #4]
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f7ff fb69 	bl	8015390 <st_dword>
			fs->wflag = 1;
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	2201      	movs	r2, #1
 8015cc2:	70da      	strb	r2, [r3, #3]
			break;
 8015cc4:	e008      	b.n	8015cd8 <put_fat+0x1ce>
		}
	}
 8015cc6:	bf00      	nop
 8015cc8:	e006      	b.n	8015cd8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015cca:	bf00      	nop
 8015ccc:	e004      	b.n	8015cd8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015cce:	bf00      	nop
 8015cd0:	e002      	b.n	8015cd8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015cd2:	bf00      	nop
 8015cd4:	e000      	b.n	8015cd8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015cd6:	bf00      	nop
	return res;
 8015cd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3724      	adds	r7, #36	; 0x24
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd90      	pop	{r4, r7, pc}

08015ce2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015ce2:	b580      	push	{r7, lr}
 8015ce4:	b088      	sub	sp, #32
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	60f8      	str	r0, [r7, #12]
 8015cea:	60b9      	str	r1, [r7, #8]
 8015cec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015cf8:	68bb      	ldr	r3, [r7, #8]
 8015cfa:	2b01      	cmp	r3, #1
 8015cfc:	d904      	bls.n	8015d08 <remove_chain+0x26>
 8015cfe:	69bb      	ldr	r3, [r7, #24]
 8015d00:	695b      	ldr	r3, [r3, #20]
 8015d02:	68ba      	ldr	r2, [r7, #8]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d301      	bcc.n	8015d0c <remove_chain+0x2a>
 8015d08:	2302      	movs	r3, #2
 8015d0a:	e04b      	b.n	8015da4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d00c      	beq.n	8015d2c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015d12:	f04f 32ff 	mov.w	r2, #4294967295
 8015d16:	6879      	ldr	r1, [r7, #4]
 8015d18:	69b8      	ldr	r0, [r7, #24]
 8015d1a:	f7ff fef6 	bl	8015b0a <put_fat>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015d22:	7ffb      	ldrb	r3, [r7, #31]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d001      	beq.n	8015d2c <remove_chain+0x4a>
 8015d28:	7ffb      	ldrb	r3, [r7, #31]
 8015d2a:	e03b      	b.n	8015da4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015d2c:	68b9      	ldr	r1, [r7, #8]
 8015d2e:	68f8      	ldr	r0, [r7, #12]
 8015d30:	f7ff fe43 	bl	80159ba <get_fat>
 8015d34:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015d36:	697b      	ldr	r3, [r7, #20]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d031      	beq.n	8015da0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015d3c:	697b      	ldr	r3, [r7, #20]
 8015d3e:	2b01      	cmp	r3, #1
 8015d40:	d101      	bne.n	8015d46 <remove_chain+0x64>
 8015d42:	2302      	movs	r3, #2
 8015d44:	e02e      	b.n	8015da4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d4c:	d101      	bne.n	8015d52 <remove_chain+0x70>
 8015d4e:	2301      	movs	r3, #1
 8015d50:	e028      	b.n	8015da4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015d52:	2200      	movs	r2, #0
 8015d54:	68b9      	ldr	r1, [r7, #8]
 8015d56:	69b8      	ldr	r0, [r7, #24]
 8015d58:	f7ff fed7 	bl	8015b0a <put_fat>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015d60:	7ffb      	ldrb	r3, [r7, #31]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d001      	beq.n	8015d6a <remove_chain+0x88>
 8015d66:	7ffb      	ldrb	r3, [r7, #31]
 8015d68:	e01c      	b.n	8015da4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015d6a:	69bb      	ldr	r3, [r7, #24]
 8015d6c:	691a      	ldr	r2, [r3, #16]
 8015d6e:	69bb      	ldr	r3, [r7, #24]
 8015d70:	695b      	ldr	r3, [r3, #20]
 8015d72:	3b02      	subs	r3, #2
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d20b      	bcs.n	8015d90 <remove_chain+0xae>
			fs->free_clst++;
 8015d78:	69bb      	ldr	r3, [r7, #24]
 8015d7a:	691b      	ldr	r3, [r3, #16]
 8015d7c:	1c5a      	adds	r2, r3, #1
 8015d7e:	69bb      	ldr	r3, [r7, #24]
 8015d80:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8015d82:	69bb      	ldr	r3, [r7, #24]
 8015d84:	791b      	ldrb	r3, [r3, #4]
 8015d86:	f043 0301 	orr.w	r3, r3, #1
 8015d8a:	b2da      	uxtb	r2, r3
 8015d8c:	69bb      	ldr	r3, [r7, #24]
 8015d8e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015d94:	69bb      	ldr	r3, [r7, #24]
 8015d96:	695b      	ldr	r3, [r3, #20]
 8015d98:	68ba      	ldr	r2, [r7, #8]
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d3c6      	bcc.n	8015d2c <remove_chain+0x4a>
 8015d9e:	e000      	b.n	8015da2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015da0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015da2:	2300      	movs	r3, #0
}
 8015da4:	4618      	mov	r0, r3
 8015da6:	3720      	adds	r7, #32
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}

08015dac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b088      	sub	sp, #32
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
 8015db4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d10d      	bne.n	8015dde <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015dc2:	693b      	ldr	r3, [r7, #16]
 8015dc4:	68db      	ldr	r3, [r3, #12]
 8015dc6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015dc8:	69bb      	ldr	r3, [r7, #24]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d004      	beq.n	8015dd8 <create_chain+0x2c>
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	695b      	ldr	r3, [r3, #20]
 8015dd2:	69ba      	ldr	r2, [r7, #24]
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	d31b      	bcc.n	8015e10 <create_chain+0x64>
 8015dd8:	2301      	movs	r3, #1
 8015dda:	61bb      	str	r3, [r7, #24]
 8015ddc:	e018      	b.n	8015e10 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015dde:	6839      	ldr	r1, [r7, #0]
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f7ff fdea 	bl	80159ba <get_fat>
 8015de6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	2b01      	cmp	r3, #1
 8015dec:	d801      	bhi.n	8015df2 <create_chain+0x46>
 8015dee:	2301      	movs	r3, #1
 8015df0:	e070      	b.n	8015ed4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015df8:	d101      	bne.n	8015dfe <create_chain+0x52>
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	e06a      	b.n	8015ed4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	695b      	ldr	r3, [r3, #20]
 8015e02:	68fa      	ldr	r2, [r7, #12]
 8015e04:	429a      	cmp	r2, r3
 8015e06:	d201      	bcs.n	8015e0c <create_chain+0x60>
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	e063      	b.n	8015ed4 <create_chain+0x128>
		scl = clst;
 8015e0c:	683b      	ldr	r3, [r7, #0]
 8015e0e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015e10:	69bb      	ldr	r3, [r7, #24]
 8015e12:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015e14:	69fb      	ldr	r3, [r7, #28]
 8015e16:	3301      	adds	r3, #1
 8015e18:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	695b      	ldr	r3, [r3, #20]
 8015e1e:	69fa      	ldr	r2, [r7, #28]
 8015e20:	429a      	cmp	r2, r3
 8015e22:	d307      	bcc.n	8015e34 <create_chain+0x88>
				ncl = 2;
 8015e24:	2302      	movs	r3, #2
 8015e26:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015e28:	69fa      	ldr	r2, [r7, #28]
 8015e2a:	69bb      	ldr	r3, [r7, #24]
 8015e2c:	429a      	cmp	r2, r3
 8015e2e:	d901      	bls.n	8015e34 <create_chain+0x88>
 8015e30:	2300      	movs	r3, #0
 8015e32:	e04f      	b.n	8015ed4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015e34:	69f9      	ldr	r1, [r7, #28]
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f7ff fdbf 	bl	80159ba <get_fat>
 8015e3c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d00e      	beq.n	8015e62 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	2b01      	cmp	r3, #1
 8015e48:	d003      	beq.n	8015e52 <create_chain+0xa6>
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e50:	d101      	bne.n	8015e56 <create_chain+0xaa>
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	e03e      	b.n	8015ed4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8015e56:	69fa      	ldr	r2, [r7, #28]
 8015e58:	69bb      	ldr	r3, [r7, #24]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d1da      	bne.n	8015e14 <create_chain+0x68>
 8015e5e:	2300      	movs	r3, #0
 8015e60:	e038      	b.n	8015ed4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015e62:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015e64:	f04f 32ff 	mov.w	r2, #4294967295
 8015e68:	69f9      	ldr	r1, [r7, #28]
 8015e6a:	6938      	ldr	r0, [r7, #16]
 8015e6c:	f7ff fe4d 	bl	8015b0a <put_fat>
 8015e70:	4603      	mov	r3, r0
 8015e72:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015e74:	7dfb      	ldrb	r3, [r7, #23]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d109      	bne.n	8015e8e <create_chain+0xe2>
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d006      	beq.n	8015e8e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015e80:	69fa      	ldr	r2, [r7, #28]
 8015e82:	6839      	ldr	r1, [r7, #0]
 8015e84:	6938      	ldr	r0, [r7, #16]
 8015e86:	f7ff fe40 	bl	8015b0a <put_fat>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015e8e:	7dfb      	ldrb	r3, [r7, #23]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d116      	bne.n	8015ec2 <create_chain+0x116>
		fs->last_clst = ncl;
 8015e94:	693b      	ldr	r3, [r7, #16]
 8015e96:	69fa      	ldr	r2, [r7, #28]
 8015e98:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015e9a:	693b      	ldr	r3, [r7, #16]
 8015e9c:	691a      	ldr	r2, [r3, #16]
 8015e9e:	693b      	ldr	r3, [r7, #16]
 8015ea0:	695b      	ldr	r3, [r3, #20]
 8015ea2:	3b02      	subs	r3, #2
 8015ea4:	429a      	cmp	r2, r3
 8015ea6:	d804      	bhi.n	8015eb2 <create_chain+0x106>
 8015ea8:	693b      	ldr	r3, [r7, #16]
 8015eaa:	691b      	ldr	r3, [r3, #16]
 8015eac:	1e5a      	subs	r2, r3, #1
 8015eae:	693b      	ldr	r3, [r7, #16]
 8015eb0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8015eb2:	693b      	ldr	r3, [r7, #16]
 8015eb4:	791b      	ldrb	r3, [r3, #4]
 8015eb6:	f043 0301 	orr.w	r3, r3, #1
 8015eba:	b2da      	uxtb	r2, r3
 8015ebc:	693b      	ldr	r3, [r7, #16]
 8015ebe:	711a      	strb	r2, [r3, #4]
 8015ec0:	e007      	b.n	8015ed2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015ec2:	7dfb      	ldrb	r3, [r7, #23]
 8015ec4:	2b01      	cmp	r3, #1
 8015ec6:	d102      	bne.n	8015ece <create_chain+0x122>
 8015ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8015ecc:	e000      	b.n	8015ed0 <create_chain+0x124>
 8015ece:	2301      	movs	r3, #1
 8015ed0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015ed2:	69fb      	ldr	r3, [r7, #28]
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3720      	adds	r7, #32
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}

08015edc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015edc:	b480      	push	{r7}
 8015ede:	b087      	sub	sp, #28
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	6078      	str	r0, [r7, #4]
 8015ee4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ef0:	3304      	adds	r3, #4
 8015ef2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	0a5b      	lsrs	r3, r3, #9
 8015ef8:	68fa      	ldr	r2, [r7, #12]
 8015efa:	8952      	ldrh	r2, [r2, #10]
 8015efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8015f00:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015f02:	693b      	ldr	r3, [r7, #16]
 8015f04:	1d1a      	adds	r2, r3, #4
 8015f06:	613a      	str	r2, [r7, #16]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015f0c:	68bb      	ldr	r3, [r7, #8]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d101      	bne.n	8015f16 <clmt_clust+0x3a>
 8015f12:	2300      	movs	r3, #0
 8015f14:	e010      	b.n	8015f38 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8015f16:	697a      	ldr	r2, [r7, #20]
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	429a      	cmp	r2, r3
 8015f1c:	d307      	bcc.n	8015f2e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8015f1e:	697a      	ldr	r2, [r7, #20]
 8015f20:	68bb      	ldr	r3, [r7, #8]
 8015f22:	1ad3      	subs	r3, r2, r3
 8015f24:	617b      	str	r3, [r7, #20]
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	3304      	adds	r3, #4
 8015f2a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015f2c:	e7e9      	b.n	8015f02 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8015f2e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	681a      	ldr	r2, [r3, #0]
 8015f34:	697b      	ldr	r3, [r7, #20]
 8015f36:	4413      	add	r3, r2
}
 8015f38:	4618      	mov	r0, r3
 8015f3a:	371c      	adds	r7, #28
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f42:	4770      	bx	lr

08015f44 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b086      	sub	sp, #24
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
 8015f4c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015f5a:	d204      	bcs.n	8015f66 <dir_sdi+0x22>
 8015f5c:	683b      	ldr	r3, [r7, #0]
 8015f5e:	f003 031f 	and.w	r3, r3, #31
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d001      	beq.n	8015f6a <dir_sdi+0x26>
		return FR_INT_ERR;
 8015f66:	2302      	movs	r3, #2
 8015f68:	e063      	b.n	8016032 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	683a      	ldr	r2, [r7, #0]
 8015f6e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	689b      	ldr	r3, [r3, #8]
 8015f74:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015f76:	697b      	ldr	r3, [r7, #20]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d106      	bne.n	8015f8a <dir_sdi+0x46>
 8015f7c:	693b      	ldr	r3, [r7, #16]
 8015f7e:	781b      	ldrb	r3, [r3, #0]
 8015f80:	2b02      	cmp	r3, #2
 8015f82:	d902      	bls.n	8015f8a <dir_sdi+0x46>
		clst = fs->dirbase;
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f88:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015f8a:	697b      	ldr	r3, [r7, #20]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d10c      	bne.n	8015faa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	095b      	lsrs	r3, r3, #5
 8015f94:	693a      	ldr	r2, [r7, #16]
 8015f96:	8912      	ldrh	r2, [r2, #8]
 8015f98:	4293      	cmp	r3, r2
 8015f9a:	d301      	bcc.n	8015fa0 <dir_sdi+0x5c>
 8015f9c:	2302      	movs	r3, #2
 8015f9e:	e048      	b.n	8016032 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8015fa0:	693b      	ldr	r3, [r7, #16]
 8015fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	61da      	str	r2, [r3, #28]
 8015fa8:	e029      	b.n	8015ffe <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015faa:	693b      	ldr	r3, [r7, #16]
 8015fac:	895b      	ldrh	r3, [r3, #10]
 8015fae:	025b      	lsls	r3, r3, #9
 8015fb0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015fb2:	e019      	b.n	8015fe8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	6979      	ldr	r1, [r7, #20]
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f7ff fcfe 	bl	80159ba <get_fat>
 8015fbe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fc6:	d101      	bne.n	8015fcc <dir_sdi+0x88>
 8015fc8:	2301      	movs	r3, #1
 8015fca:	e032      	b.n	8016032 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	2b01      	cmp	r3, #1
 8015fd0:	d904      	bls.n	8015fdc <dir_sdi+0x98>
 8015fd2:	693b      	ldr	r3, [r7, #16]
 8015fd4:	695b      	ldr	r3, [r3, #20]
 8015fd6:	697a      	ldr	r2, [r7, #20]
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	d301      	bcc.n	8015fe0 <dir_sdi+0x9c>
 8015fdc:	2302      	movs	r3, #2
 8015fde:	e028      	b.n	8016032 <dir_sdi+0xee>
			ofs -= csz;
 8015fe0:	683a      	ldr	r2, [r7, #0]
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	1ad3      	subs	r3, r2, r3
 8015fe6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015fe8:	683a      	ldr	r2, [r7, #0]
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d2e1      	bcs.n	8015fb4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8015ff0:	6979      	ldr	r1, [r7, #20]
 8015ff2:	6938      	ldr	r0, [r7, #16]
 8015ff4:	f7ff fcc2 	bl	801597c <clust2sect>
 8015ff8:	4602      	mov	r2, r0
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	697a      	ldr	r2, [r7, #20]
 8016002:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	69db      	ldr	r3, [r3, #28]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d101      	bne.n	8016010 <dir_sdi+0xcc>
 801600c:	2302      	movs	r3, #2
 801600e:	e010      	b.n	8016032 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	69da      	ldr	r2, [r3, #28]
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	0a5b      	lsrs	r3, r3, #9
 8016018:	441a      	add	r2, r3
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801602a:	441a      	add	r2, r3
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016030:	2300      	movs	r3, #0
}
 8016032:	4618      	mov	r0, r3
 8016034:	3718      	adds	r7, #24
 8016036:	46bd      	mov	sp, r7
 8016038:	bd80      	pop	{r7, pc}

0801603a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801603a:	b580      	push	{r7, lr}
 801603c:	b086      	sub	sp, #24
 801603e:	af00      	add	r7, sp, #0
 8016040:	6078      	str	r0, [r7, #4]
 8016042:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	695b      	ldr	r3, [r3, #20]
 801604e:	3320      	adds	r3, #32
 8016050:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	69db      	ldr	r3, [r3, #28]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d003      	beq.n	8016062 <dir_next+0x28>
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016060:	d301      	bcc.n	8016066 <dir_next+0x2c>
 8016062:	2304      	movs	r3, #4
 8016064:	e0aa      	b.n	80161bc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016066:	68bb      	ldr	r3, [r7, #8]
 8016068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801606c:	2b00      	cmp	r3, #0
 801606e:	f040 8098 	bne.w	80161a2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	69db      	ldr	r3, [r3, #28]
 8016076:	1c5a      	adds	r2, r3, #1
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	699b      	ldr	r3, [r3, #24]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d10b      	bne.n	801609c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	095b      	lsrs	r3, r3, #5
 8016088:	68fa      	ldr	r2, [r7, #12]
 801608a:	8912      	ldrh	r2, [r2, #8]
 801608c:	4293      	cmp	r3, r2
 801608e:	f0c0 8088 	bcc.w	80161a2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	2200      	movs	r2, #0
 8016096:	61da      	str	r2, [r3, #28]
 8016098:	2304      	movs	r3, #4
 801609a:	e08f      	b.n	80161bc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	0a5b      	lsrs	r3, r3, #9
 80160a0:	68fa      	ldr	r2, [r7, #12]
 80160a2:	8952      	ldrh	r2, [r2, #10]
 80160a4:	3a01      	subs	r2, #1
 80160a6:	4013      	ands	r3, r2
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d17a      	bne.n	80161a2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80160ac:	687a      	ldr	r2, [r7, #4]
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	699b      	ldr	r3, [r3, #24]
 80160b2:	4619      	mov	r1, r3
 80160b4:	4610      	mov	r0, r2
 80160b6:	f7ff fc80 	bl	80159ba <get_fat>
 80160ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80160bc:	697b      	ldr	r3, [r7, #20]
 80160be:	2b01      	cmp	r3, #1
 80160c0:	d801      	bhi.n	80160c6 <dir_next+0x8c>
 80160c2:	2302      	movs	r3, #2
 80160c4:	e07a      	b.n	80161bc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80160c6:	697b      	ldr	r3, [r7, #20]
 80160c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160cc:	d101      	bne.n	80160d2 <dir_next+0x98>
 80160ce:	2301      	movs	r3, #1
 80160d0:	e074      	b.n	80161bc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	695b      	ldr	r3, [r3, #20]
 80160d6:	697a      	ldr	r2, [r7, #20]
 80160d8:	429a      	cmp	r2, r3
 80160da:	d358      	bcc.n	801618e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80160dc:	683b      	ldr	r3, [r7, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d104      	bne.n	80160ec <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	2200      	movs	r2, #0
 80160e6:	61da      	str	r2, [r3, #28]
 80160e8:	2304      	movs	r3, #4
 80160ea:	e067      	b.n	80161bc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80160ec:	687a      	ldr	r2, [r7, #4]
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	699b      	ldr	r3, [r3, #24]
 80160f2:	4619      	mov	r1, r3
 80160f4:	4610      	mov	r0, r2
 80160f6:	f7ff fe59 	bl	8015dac <create_chain>
 80160fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d101      	bne.n	8016106 <dir_next+0xcc>
 8016102:	2307      	movs	r3, #7
 8016104:	e05a      	b.n	80161bc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8016106:	697b      	ldr	r3, [r7, #20]
 8016108:	2b01      	cmp	r3, #1
 801610a:	d101      	bne.n	8016110 <dir_next+0xd6>
 801610c:	2302      	movs	r3, #2
 801610e:	e055      	b.n	80161bc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016110:	697b      	ldr	r3, [r7, #20]
 8016112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016116:	d101      	bne.n	801611c <dir_next+0xe2>
 8016118:	2301      	movs	r3, #1
 801611a:	e04f      	b.n	80161bc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801611c:	68f8      	ldr	r0, [r7, #12]
 801611e:	f7ff fb4d 	bl	80157bc <sync_window>
 8016122:	4603      	mov	r3, r0
 8016124:	2b00      	cmp	r3, #0
 8016126:	d001      	beq.n	801612c <dir_next+0xf2>
 8016128:	2301      	movs	r3, #1
 801612a:	e047      	b.n	80161bc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	3330      	adds	r3, #48	; 0x30
 8016130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016134:	2100      	movs	r1, #0
 8016136:	4618      	mov	r0, r3
 8016138:	f7ff f977 	bl	801542a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801613c:	2300      	movs	r3, #0
 801613e:	613b      	str	r3, [r7, #16]
 8016140:	6979      	ldr	r1, [r7, #20]
 8016142:	68f8      	ldr	r0, [r7, #12]
 8016144:	f7ff fc1a 	bl	801597c <clust2sect>
 8016148:	4602      	mov	r2, r0
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	62da      	str	r2, [r3, #44]	; 0x2c
 801614e:	e012      	b.n	8016176 <dir_next+0x13c>
						fs->wflag = 1;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2201      	movs	r2, #1
 8016154:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8016156:	68f8      	ldr	r0, [r7, #12]
 8016158:	f7ff fb30 	bl	80157bc <sync_window>
 801615c:	4603      	mov	r3, r0
 801615e:	2b00      	cmp	r3, #0
 8016160:	d001      	beq.n	8016166 <dir_next+0x12c>
 8016162:	2301      	movs	r3, #1
 8016164:	e02a      	b.n	80161bc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016166:	693b      	ldr	r3, [r7, #16]
 8016168:	3301      	adds	r3, #1
 801616a:	613b      	str	r3, [r7, #16]
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016170:	1c5a      	adds	r2, r3, #1
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	62da      	str	r2, [r3, #44]	; 0x2c
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	895b      	ldrh	r3, [r3, #10]
 801617a:	461a      	mov	r2, r3
 801617c:	693b      	ldr	r3, [r7, #16]
 801617e:	4293      	cmp	r3, r2
 8016180:	d3e6      	bcc.n	8016150 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	1ad2      	subs	r2, r2, r3
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	697a      	ldr	r2, [r7, #20]
 8016192:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8016194:	6979      	ldr	r1, [r7, #20]
 8016196:	68f8      	ldr	r0, [r7, #12]
 8016198:	f7ff fbf0 	bl	801597c <clust2sect>
 801619c:	4602      	mov	r2, r0
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	68ba      	ldr	r2, [r7, #8]
 80161a6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80161ae:	68bb      	ldr	r3, [r7, #8]
 80161b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80161b4:	441a      	add	r2, r3
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80161ba:	2300      	movs	r3, #0
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3718      	adds	r7, #24
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b086      	sub	sp, #24
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80161d4:	2100      	movs	r1, #0
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f7ff feb4 	bl	8015f44 <dir_sdi>
 80161dc:	4603      	mov	r3, r0
 80161de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80161e0:	7dfb      	ldrb	r3, [r7, #23]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d12b      	bne.n	801623e <dir_alloc+0x7a>
		n = 0;
 80161e6:	2300      	movs	r3, #0
 80161e8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	69db      	ldr	r3, [r3, #28]
 80161ee:	4619      	mov	r1, r3
 80161f0:	68f8      	ldr	r0, [r7, #12]
 80161f2:	f7ff fb27 	bl	8015844 <move_window>
 80161f6:	4603      	mov	r3, r0
 80161f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80161fa:	7dfb      	ldrb	r3, [r7, #23]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d11d      	bne.n	801623c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	6a1b      	ldr	r3, [r3, #32]
 8016204:	781b      	ldrb	r3, [r3, #0]
 8016206:	2be5      	cmp	r3, #229	; 0xe5
 8016208:	d004      	beq.n	8016214 <dir_alloc+0x50>
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	6a1b      	ldr	r3, [r3, #32]
 801620e:	781b      	ldrb	r3, [r3, #0]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d107      	bne.n	8016224 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8016214:	693b      	ldr	r3, [r7, #16]
 8016216:	3301      	adds	r3, #1
 8016218:	613b      	str	r3, [r7, #16]
 801621a:	693a      	ldr	r2, [r7, #16]
 801621c:	683b      	ldr	r3, [r7, #0]
 801621e:	429a      	cmp	r2, r3
 8016220:	d102      	bne.n	8016228 <dir_alloc+0x64>
 8016222:	e00c      	b.n	801623e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8016224:	2300      	movs	r3, #0
 8016226:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016228:	2101      	movs	r1, #1
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f7ff ff05 	bl	801603a <dir_next>
 8016230:	4603      	mov	r3, r0
 8016232:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8016234:	7dfb      	ldrb	r3, [r7, #23]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d0d7      	beq.n	80161ea <dir_alloc+0x26>
 801623a:	e000      	b.n	801623e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801623c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801623e:	7dfb      	ldrb	r3, [r7, #23]
 8016240:	2b04      	cmp	r3, #4
 8016242:	d101      	bne.n	8016248 <dir_alloc+0x84>
 8016244:	2307      	movs	r3, #7
 8016246:	75fb      	strb	r3, [r7, #23]
	return res;
 8016248:	7dfb      	ldrb	r3, [r7, #23]
}
 801624a:	4618      	mov	r0, r3
 801624c:	3718      	adds	r7, #24
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}

08016252 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8016252:	b580      	push	{r7, lr}
 8016254:	b084      	sub	sp, #16
 8016256:	af00      	add	r7, sp, #0
 8016258:	6078      	str	r0, [r7, #4]
 801625a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	331a      	adds	r3, #26
 8016260:	4618      	mov	r0, r3
 8016262:	f7ff f83f 	bl	80152e4 <ld_word>
 8016266:	4603      	mov	r3, r0
 8016268:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	781b      	ldrb	r3, [r3, #0]
 801626e:	2b03      	cmp	r3, #3
 8016270:	d109      	bne.n	8016286 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016272:	683b      	ldr	r3, [r7, #0]
 8016274:	3314      	adds	r3, #20
 8016276:	4618      	mov	r0, r3
 8016278:	f7ff f834 	bl	80152e4 <ld_word>
 801627c:	4603      	mov	r3, r0
 801627e:	041b      	lsls	r3, r3, #16
 8016280:	68fa      	ldr	r2, [r7, #12]
 8016282:	4313      	orrs	r3, r2
 8016284:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016286:	68fb      	ldr	r3, [r7, #12]
}
 8016288:	4618      	mov	r0, r3
 801628a:	3710      	adds	r7, #16
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}

08016290 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b084      	sub	sp, #16
 8016294:	af00      	add	r7, sp, #0
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	60b9      	str	r1, [r7, #8]
 801629a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	331a      	adds	r3, #26
 80162a0:	687a      	ldr	r2, [r7, #4]
 80162a2:	b292      	uxth	r2, r2
 80162a4:	4611      	mov	r1, r2
 80162a6:	4618      	mov	r0, r3
 80162a8:	f7ff f857 	bl	801535a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	781b      	ldrb	r3, [r3, #0]
 80162b0:	2b03      	cmp	r3, #3
 80162b2:	d109      	bne.n	80162c8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	f103 0214 	add.w	r2, r3, #20
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	0c1b      	lsrs	r3, r3, #16
 80162be:	b29b      	uxth	r3, r3
 80162c0:	4619      	mov	r1, r3
 80162c2:	4610      	mov	r0, r2
 80162c4:	f7ff f849 	bl	801535a <st_word>
	}
}
 80162c8:	bf00      	nop
 80162ca:	3710      	adds	r7, #16
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}

080162d0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b086      	sub	sp, #24
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80162de:	2100      	movs	r1, #0
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f7ff fe2f 	bl	8015f44 <dir_sdi>
 80162e6:	4603      	mov	r3, r0
 80162e8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80162ea:	7dfb      	ldrb	r3, [r7, #23]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d001      	beq.n	80162f4 <dir_find+0x24>
 80162f0:	7dfb      	ldrb	r3, [r7, #23]
 80162f2:	e03e      	b.n	8016372 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	69db      	ldr	r3, [r3, #28]
 80162f8:	4619      	mov	r1, r3
 80162fa:	6938      	ldr	r0, [r7, #16]
 80162fc:	f7ff faa2 	bl	8015844 <move_window>
 8016300:	4603      	mov	r3, r0
 8016302:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8016304:	7dfb      	ldrb	r3, [r7, #23]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d12f      	bne.n	801636a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	6a1b      	ldr	r3, [r3, #32]
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8016312:	7bfb      	ldrb	r3, [r7, #15]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d102      	bne.n	801631e <dir_find+0x4e>
 8016318:	2304      	movs	r3, #4
 801631a:	75fb      	strb	r3, [r7, #23]
 801631c:	e028      	b.n	8016370 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	6a1b      	ldr	r3, [r3, #32]
 8016322:	330b      	adds	r3, #11
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801632a:	b2da      	uxtb	r2, r3
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	6a1b      	ldr	r3, [r3, #32]
 8016334:	330b      	adds	r3, #11
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	f003 0308 	and.w	r3, r3, #8
 801633c:	2b00      	cmp	r3, #0
 801633e:	d10a      	bne.n	8016356 <dir_find+0x86>
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	6a18      	ldr	r0, [r3, #32]
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	3324      	adds	r3, #36	; 0x24
 8016348:	220b      	movs	r2, #11
 801634a:	4619      	mov	r1, r3
 801634c:	f7ff f888 	bl	8015460 <mem_cmp>
 8016350:	4603      	mov	r3, r0
 8016352:	2b00      	cmp	r3, #0
 8016354:	d00b      	beq.n	801636e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8016356:	2100      	movs	r1, #0
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f7ff fe6e 	bl	801603a <dir_next>
 801635e:	4603      	mov	r3, r0
 8016360:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8016362:	7dfb      	ldrb	r3, [r7, #23]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d0c5      	beq.n	80162f4 <dir_find+0x24>
 8016368:	e002      	b.n	8016370 <dir_find+0xa0>
		if (res != FR_OK) break;
 801636a:	bf00      	nop
 801636c:	e000      	b.n	8016370 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801636e:	bf00      	nop

	return res;
 8016370:	7dfb      	ldrb	r3, [r7, #23]
}
 8016372:	4618      	mov	r0, r3
 8016374:	3718      	adds	r7, #24
 8016376:	46bd      	mov	sp, r7
 8016378:	bd80      	pop	{r7, pc}

0801637a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801637a:	b580      	push	{r7, lr}
 801637c:	b084      	sub	sp, #16
 801637e:	af00      	add	r7, sp, #0
 8016380:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8016388:	2101      	movs	r1, #1
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7ff ff1a 	bl	80161c4 <dir_alloc>
 8016390:	4603      	mov	r3, r0
 8016392:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8016394:	7bfb      	ldrb	r3, [r7, #15]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d11c      	bne.n	80163d4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	69db      	ldr	r3, [r3, #28]
 801639e:	4619      	mov	r1, r3
 80163a0:	68b8      	ldr	r0, [r7, #8]
 80163a2:	f7ff fa4f 	bl	8015844 <move_window>
 80163a6:	4603      	mov	r3, r0
 80163a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80163aa:	7bfb      	ldrb	r3, [r7, #15]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d111      	bne.n	80163d4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	6a1b      	ldr	r3, [r3, #32]
 80163b4:	2220      	movs	r2, #32
 80163b6:	2100      	movs	r1, #0
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7ff f836 	bl	801542a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	6a18      	ldr	r0, [r3, #32]
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	3324      	adds	r3, #36	; 0x24
 80163c6:	220b      	movs	r2, #11
 80163c8:	4619      	mov	r1, r3
 80163ca:	f7ff f80d 	bl	80153e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80163ce:	68bb      	ldr	r3, [r7, #8]
 80163d0:	2201      	movs	r2, #1
 80163d2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80163d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80163d6:	4618      	mov	r0, r3
 80163d8:	3710      	adds	r7, #16
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}
	...

080163e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b088      	sub	sp, #32
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	60fb      	str	r3, [r7, #12]
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	3324      	adds	r3, #36	; 0x24
 80163f4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80163f6:	220b      	movs	r2, #11
 80163f8:	2120      	movs	r1, #32
 80163fa:	68b8      	ldr	r0, [r7, #8]
 80163fc:	f7ff f815 	bl	801542a <mem_set>
	si = i = 0; ni = 8;
 8016400:	2300      	movs	r3, #0
 8016402:	613b      	str	r3, [r7, #16]
 8016404:	693b      	ldr	r3, [r7, #16]
 8016406:	61fb      	str	r3, [r7, #28]
 8016408:	2308      	movs	r3, #8
 801640a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801640c:	69fb      	ldr	r3, [r7, #28]
 801640e:	1c5a      	adds	r2, r3, #1
 8016410:	61fa      	str	r2, [r7, #28]
 8016412:	68fa      	ldr	r2, [r7, #12]
 8016414:	4413      	add	r3, r2
 8016416:	781b      	ldrb	r3, [r3, #0]
 8016418:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801641a:	7efb      	ldrb	r3, [r7, #27]
 801641c:	2b20      	cmp	r3, #32
 801641e:	d94e      	bls.n	80164be <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8016420:	7efb      	ldrb	r3, [r7, #27]
 8016422:	2b2f      	cmp	r3, #47	; 0x2f
 8016424:	d006      	beq.n	8016434 <create_name+0x54>
 8016426:	7efb      	ldrb	r3, [r7, #27]
 8016428:	2b5c      	cmp	r3, #92	; 0x5c
 801642a:	d110      	bne.n	801644e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801642c:	e002      	b.n	8016434 <create_name+0x54>
 801642e:	69fb      	ldr	r3, [r7, #28]
 8016430:	3301      	adds	r3, #1
 8016432:	61fb      	str	r3, [r7, #28]
 8016434:	68fa      	ldr	r2, [r7, #12]
 8016436:	69fb      	ldr	r3, [r7, #28]
 8016438:	4413      	add	r3, r2
 801643a:	781b      	ldrb	r3, [r3, #0]
 801643c:	2b2f      	cmp	r3, #47	; 0x2f
 801643e:	d0f6      	beq.n	801642e <create_name+0x4e>
 8016440:	68fa      	ldr	r2, [r7, #12]
 8016442:	69fb      	ldr	r3, [r7, #28]
 8016444:	4413      	add	r3, r2
 8016446:	781b      	ldrb	r3, [r3, #0]
 8016448:	2b5c      	cmp	r3, #92	; 0x5c
 801644a:	d0f0      	beq.n	801642e <create_name+0x4e>
			break;
 801644c:	e038      	b.n	80164c0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801644e:	7efb      	ldrb	r3, [r7, #27]
 8016450:	2b2e      	cmp	r3, #46	; 0x2e
 8016452:	d003      	beq.n	801645c <create_name+0x7c>
 8016454:	693a      	ldr	r2, [r7, #16]
 8016456:	697b      	ldr	r3, [r7, #20]
 8016458:	429a      	cmp	r2, r3
 801645a:	d30c      	bcc.n	8016476 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801645c:	697b      	ldr	r3, [r7, #20]
 801645e:	2b0b      	cmp	r3, #11
 8016460:	d002      	beq.n	8016468 <create_name+0x88>
 8016462:	7efb      	ldrb	r3, [r7, #27]
 8016464:	2b2e      	cmp	r3, #46	; 0x2e
 8016466:	d001      	beq.n	801646c <create_name+0x8c>
 8016468:	2306      	movs	r3, #6
 801646a:	e044      	b.n	80164f6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801646c:	2308      	movs	r3, #8
 801646e:	613b      	str	r3, [r7, #16]
 8016470:	230b      	movs	r3, #11
 8016472:	617b      	str	r3, [r7, #20]
			continue;
 8016474:	e022      	b.n	80164bc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8016476:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801647a:	2b00      	cmp	r3, #0
 801647c:	da04      	bge.n	8016488 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801647e:	7efb      	ldrb	r3, [r7, #27]
 8016480:	3b80      	subs	r3, #128	; 0x80
 8016482:	4a1f      	ldr	r2, [pc, #124]	; (8016500 <create_name+0x120>)
 8016484:	5cd3      	ldrb	r3, [r2, r3]
 8016486:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8016488:	7efb      	ldrb	r3, [r7, #27]
 801648a:	4619      	mov	r1, r3
 801648c:	481d      	ldr	r0, [pc, #116]	; (8016504 <create_name+0x124>)
 801648e:	f7ff f80e 	bl	80154ae <chk_chr>
 8016492:	4603      	mov	r3, r0
 8016494:	2b00      	cmp	r3, #0
 8016496:	d001      	beq.n	801649c <create_name+0xbc>
 8016498:	2306      	movs	r3, #6
 801649a:	e02c      	b.n	80164f6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801649c:	7efb      	ldrb	r3, [r7, #27]
 801649e:	2b60      	cmp	r3, #96	; 0x60
 80164a0:	d905      	bls.n	80164ae <create_name+0xce>
 80164a2:	7efb      	ldrb	r3, [r7, #27]
 80164a4:	2b7a      	cmp	r3, #122	; 0x7a
 80164a6:	d802      	bhi.n	80164ae <create_name+0xce>
 80164a8:	7efb      	ldrb	r3, [r7, #27]
 80164aa:	3b20      	subs	r3, #32
 80164ac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80164ae:	693b      	ldr	r3, [r7, #16]
 80164b0:	1c5a      	adds	r2, r3, #1
 80164b2:	613a      	str	r2, [r7, #16]
 80164b4:	68ba      	ldr	r2, [r7, #8]
 80164b6:	4413      	add	r3, r2
 80164b8:	7efa      	ldrb	r2, [r7, #27]
 80164ba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80164bc:	e7a6      	b.n	801640c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80164be:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80164c0:	68fa      	ldr	r2, [r7, #12]
 80164c2:	69fb      	ldr	r3, [r7, #28]
 80164c4:	441a      	add	r2, r3
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d101      	bne.n	80164d4 <create_name+0xf4>
 80164d0:	2306      	movs	r3, #6
 80164d2:	e010      	b.n	80164f6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	781b      	ldrb	r3, [r3, #0]
 80164d8:	2be5      	cmp	r3, #229	; 0xe5
 80164da:	d102      	bne.n	80164e2 <create_name+0x102>
 80164dc:	68bb      	ldr	r3, [r7, #8]
 80164de:	2205      	movs	r2, #5
 80164e0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80164e2:	7efb      	ldrb	r3, [r7, #27]
 80164e4:	2b20      	cmp	r3, #32
 80164e6:	d801      	bhi.n	80164ec <create_name+0x10c>
 80164e8:	2204      	movs	r2, #4
 80164ea:	e000      	b.n	80164ee <create_name+0x10e>
 80164ec:	2200      	movs	r2, #0
 80164ee:	68bb      	ldr	r3, [r7, #8]
 80164f0:	330b      	adds	r3, #11
 80164f2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80164f4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3720      	adds	r7, #32
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	0801ac5c 	.word	0x0801ac5c
 8016504:	0801a510 	.word	0x0801a510

08016508 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b086      	sub	sp, #24
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016516:	693b      	ldr	r3, [r7, #16]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801651c:	e002      	b.n	8016524 <follow_path+0x1c>
 801651e:	683b      	ldr	r3, [r7, #0]
 8016520:	3301      	adds	r3, #1
 8016522:	603b      	str	r3, [r7, #0]
 8016524:	683b      	ldr	r3, [r7, #0]
 8016526:	781b      	ldrb	r3, [r3, #0]
 8016528:	2b2f      	cmp	r3, #47	; 0x2f
 801652a:	d0f8      	beq.n	801651e <follow_path+0x16>
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	781b      	ldrb	r3, [r3, #0]
 8016530:	2b5c      	cmp	r3, #92	; 0x5c
 8016532:	d0f4      	beq.n	801651e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016534:	693b      	ldr	r3, [r7, #16]
 8016536:	2200      	movs	r2, #0
 8016538:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801653a:	683b      	ldr	r3, [r7, #0]
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	2b1f      	cmp	r3, #31
 8016540:	d80a      	bhi.n	8016558 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	2280      	movs	r2, #128	; 0x80
 8016546:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801654a:	2100      	movs	r1, #0
 801654c:	6878      	ldr	r0, [r7, #4]
 801654e:	f7ff fcf9 	bl	8015f44 <dir_sdi>
 8016552:	4603      	mov	r3, r0
 8016554:	75fb      	strb	r3, [r7, #23]
 8016556:	e043      	b.n	80165e0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016558:	463b      	mov	r3, r7
 801655a:	4619      	mov	r1, r3
 801655c:	6878      	ldr	r0, [r7, #4]
 801655e:	f7ff ff3f 	bl	80163e0 <create_name>
 8016562:	4603      	mov	r3, r0
 8016564:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016566:	7dfb      	ldrb	r3, [r7, #23]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d134      	bne.n	80165d6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801656c:	6878      	ldr	r0, [r7, #4]
 801656e:	f7ff feaf 	bl	80162d0 <dir_find>
 8016572:	4603      	mov	r3, r0
 8016574:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801657c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801657e:	7dfb      	ldrb	r3, [r7, #23]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d00a      	beq.n	801659a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016584:	7dfb      	ldrb	r3, [r7, #23]
 8016586:	2b04      	cmp	r3, #4
 8016588:	d127      	bne.n	80165da <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801658a:	7afb      	ldrb	r3, [r7, #11]
 801658c:	f003 0304 	and.w	r3, r3, #4
 8016590:	2b00      	cmp	r3, #0
 8016592:	d122      	bne.n	80165da <follow_path+0xd2>
 8016594:	2305      	movs	r3, #5
 8016596:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016598:	e01f      	b.n	80165da <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801659a:	7afb      	ldrb	r3, [r7, #11]
 801659c:	f003 0304 	and.w	r3, r3, #4
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d11c      	bne.n	80165de <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80165a4:	693b      	ldr	r3, [r7, #16]
 80165a6:	799b      	ldrb	r3, [r3, #6]
 80165a8:	f003 0310 	and.w	r3, r3, #16
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d102      	bne.n	80165b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80165b0:	2305      	movs	r3, #5
 80165b2:	75fb      	strb	r3, [r7, #23]
 80165b4:	e014      	b.n	80165e0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	695b      	ldr	r3, [r3, #20]
 80165c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80165c4:	4413      	add	r3, r2
 80165c6:	4619      	mov	r1, r3
 80165c8:	68f8      	ldr	r0, [r7, #12]
 80165ca:	f7ff fe42 	bl	8016252 <ld_clust>
 80165ce:	4602      	mov	r2, r0
 80165d0:	693b      	ldr	r3, [r7, #16]
 80165d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80165d4:	e7c0      	b.n	8016558 <follow_path+0x50>
			if (res != FR_OK) break;
 80165d6:	bf00      	nop
 80165d8:	e002      	b.n	80165e0 <follow_path+0xd8>
				break;
 80165da:	bf00      	nop
 80165dc:	e000      	b.n	80165e0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80165de:	bf00      	nop
			}
		}
	}

	return res;
 80165e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3718      	adds	r7, #24
 80165e6:	46bd      	mov	sp, r7
 80165e8:	bd80      	pop	{r7, pc}

080165ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80165ea:	b480      	push	{r7}
 80165ec:	b087      	sub	sp, #28
 80165ee:	af00      	add	r7, sp, #0
 80165f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80165f2:	f04f 33ff 	mov.w	r3, #4294967295
 80165f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d031      	beq.n	8016664 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	617b      	str	r3, [r7, #20]
 8016606:	e002      	b.n	801660e <get_ldnumber+0x24>
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	3301      	adds	r3, #1
 801660c:	617b      	str	r3, [r7, #20]
 801660e:	697b      	ldr	r3, [r7, #20]
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	2b20      	cmp	r3, #32
 8016614:	d903      	bls.n	801661e <get_ldnumber+0x34>
 8016616:	697b      	ldr	r3, [r7, #20]
 8016618:	781b      	ldrb	r3, [r3, #0]
 801661a:	2b3a      	cmp	r3, #58	; 0x3a
 801661c:	d1f4      	bne.n	8016608 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801661e:	697b      	ldr	r3, [r7, #20]
 8016620:	781b      	ldrb	r3, [r3, #0]
 8016622:	2b3a      	cmp	r3, #58	; 0x3a
 8016624:	d11c      	bne.n	8016660 <get_ldnumber+0x76>
			tp = *path;
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	1c5a      	adds	r2, r3, #1
 8016630:	60fa      	str	r2, [r7, #12]
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	3b30      	subs	r3, #48	; 0x30
 8016636:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	2b09      	cmp	r3, #9
 801663c:	d80e      	bhi.n	801665c <get_ldnumber+0x72>
 801663e:	68fa      	ldr	r2, [r7, #12]
 8016640:	697b      	ldr	r3, [r7, #20]
 8016642:	429a      	cmp	r2, r3
 8016644:	d10a      	bne.n	801665c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d107      	bne.n	801665c <get_ldnumber+0x72>
					vol = (int)i;
 801664c:	68bb      	ldr	r3, [r7, #8]
 801664e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016650:	697b      	ldr	r3, [r7, #20]
 8016652:	3301      	adds	r3, #1
 8016654:	617b      	str	r3, [r7, #20]
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	697a      	ldr	r2, [r7, #20]
 801665a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801665c:	693b      	ldr	r3, [r7, #16]
 801665e:	e002      	b.n	8016666 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016660:	2300      	movs	r3, #0
 8016662:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016664:	693b      	ldr	r3, [r7, #16]
}
 8016666:	4618      	mov	r0, r3
 8016668:	371c      	adds	r7, #28
 801666a:	46bd      	mov	sp, r7
 801666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016670:	4770      	bx	lr
	...

08016674 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b082      	sub	sp, #8
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2200      	movs	r2, #0
 8016682:	70da      	strb	r2, [r3, #3]
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f04f 32ff 	mov.w	r2, #4294967295
 801668a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801668c:	6839      	ldr	r1, [r7, #0]
 801668e:	6878      	ldr	r0, [r7, #4]
 8016690:	f7ff f8d8 	bl	8015844 <move_window>
 8016694:	4603      	mov	r3, r0
 8016696:	2b00      	cmp	r3, #0
 8016698:	d001      	beq.n	801669e <check_fs+0x2a>
 801669a:	2304      	movs	r3, #4
 801669c:	e038      	b.n	8016710 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	3330      	adds	r3, #48	; 0x30
 80166a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80166a6:	4618      	mov	r0, r3
 80166a8:	f7fe fe1c 	bl	80152e4 <ld_word>
 80166ac:	4603      	mov	r3, r0
 80166ae:	461a      	mov	r2, r3
 80166b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80166b4:	429a      	cmp	r2, r3
 80166b6:	d001      	beq.n	80166bc <check_fs+0x48>
 80166b8:	2303      	movs	r3, #3
 80166ba:	e029      	b.n	8016710 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80166c2:	2be9      	cmp	r3, #233	; 0xe9
 80166c4:	d009      	beq.n	80166da <check_fs+0x66>
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80166cc:	2beb      	cmp	r3, #235	; 0xeb
 80166ce:	d11e      	bne.n	801670e <check_fs+0x9a>
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80166d6:	2b90      	cmp	r3, #144	; 0x90
 80166d8:	d119      	bne.n	801670e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	3330      	adds	r3, #48	; 0x30
 80166de:	3336      	adds	r3, #54	; 0x36
 80166e0:	4618      	mov	r0, r3
 80166e2:	f7fe fe17 	bl	8015314 <ld_dword>
 80166e6:	4603      	mov	r3, r0
 80166e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80166ec:	4a0a      	ldr	r2, [pc, #40]	; (8016718 <check_fs+0xa4>)
 80166ee:	4293      	cmp	r3, r2
 80166f0:	d101      	bne.n	80166f6 <check_fs+0x82>
 80166f2:	2300      	movs	r3, #0
 80166f4:	e00c      	b.n	8016710 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	3330      	adds	r3, #48	; 0x30
 80166fa:	3352      	adds	r3, #82	; 0x52
 80166fc:	4618      	mov	r0, r3
 80166fe:	f7fe fe09 	bl	8015314 <ld_dword>
 8016702:	4603      	mov	r3, r0
 8016704:	4a05      	ldr	r2, [pc, #20]	; (801671c <check_fs+0xa8>)
 8016706:	4293      	cmp	r3, r2
 8016708:	d101      	bne.n	801670e <check_fs+0x9a>
 801670a:	2300      	movs	r3, #0
 801670c:	e000      	b.n	8016710 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801670e:	2302      	movs	r3, #2
}
 8016710:	4618      	mov	r0, r3
 8016712:	3708      	adds	r7, #8
 8016714:	46bd      	mov	sp, r7
 8016716:	bd80      	pop	{r7, pc}
 8016718:	00544146 	.word	0x00544146
 801671c:	33544146 	.word	0x33544146

08016720 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b096      	sub	sp, #88	; 0x58
 8016724:	af00      	add	r7, sp, #0
 8016726:	60f8      	str	r0, [r7, #12]
 8016728:	60b9      	str	r1, [r7, #8]
 801672a:	4613      	mov	r3, r2
 801672c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801672e:	68bb      	ldr	r3, [r7, #8]
 8016730:	2200      	movs	r2, #0
 8016732:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016734:	68f8      	ldr	r0, [r7, #12]
 8016736:	f7ff ff58 	bl	80165ea <get_ldnumber>
 801673a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801673c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801673e:	2b00      	cmp	r3, #0
 8016740:	da01      	bge.n	8016746 <find_volume+0x26>
 8016742:	230b      	movs	r3, #11
 8016744:	e22e      	b.n	8016ba4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016746:	4aa8      	ldr	r2, [pc, #672]	; (80169e8 <find_volume+0x2c8>)
 8016748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801674a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801674e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016752:	2b00      	cmp	r3, #0
 8016754:	d101      	bne.n	801675a <find_volume+0x3a>
 8016756:	230c      	movs	r3, #12
 8016758:	e224      	b.n	8016ba4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801675a:	68bb      	ldr	r3, [r7, #8]
 801675c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801675e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016760:	79fb      	ldrb	r3, [r7, #7]
 8016762:	f023 0301 	bic.w	r3, r3, #1
 8016766:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801676a:	781b      	ldrb	r3, [r3, #0]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d01a      	beq.n	80167a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016772:	785b      	ldrb	r3, [r3, #1]
 8016774:	4618      	mov	r0, r3
 8016776:	f7fe fd17 	bl	80151a8 <disk_status>
 801677a:	4603      	mov	r3, r0
 801677c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016784:	f003 0301 	and.w	r3, r3, #1
 8016788:	2b00      	cmp	r3, #0
 801678a:	d10c      	bne.n	80167a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801678c:	79fb      	ldrb	r3, [r7, #7]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d007      	beq.n	80167a2 <find_volume+0x82>
 8016792:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016796:	f003 0304 	and.w	r3, r3, #4
 801679a:	2b00      	cmp	r3, #0
 801679c:	d001      	beq.n	80167a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801679e:	230a      	movs	r3, #10
 80167a0:	e200      	b.n	8016ba4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80167a2:	2300      	movs	r3, #0
 80167a4:	e1fe      	b.n	8016ba4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80167a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a8:	2200      	movs	r2, #0
 80167aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80167ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80167ae:	b2da      	uxtb	r2, r3
 80167b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80167b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167b6:	785b      	ldrb	r3, [r3, #1]
 80167b8:	4618      	mov	r0, r3
 80167ba:	f7fe fd0f 	bl	80151dc <disk_initialize>
 80167be:	4603      	mov	r3, r0
 80167c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80167c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80167c8:	f003 0301 	and.w	r3, r3, #1
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d001      	beq.n	80167d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80167d0:	2303      	movs	r3, #3
 80167d2:	e1e7      	b.n	8016ba4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80167d4:	79fb      	ldrb	r3, [r7, #7]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d007      	beq.n	80167ea <find_volume+0xca>
 80167da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80167de:	f003 0304 	and.w	r3, r3, #4
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d001      	beq.n	80167ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80167e6:	230a      	movs	r3, #10
 80167e8:	e1dc      	b.n	8016ba4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80167ea:	2300      	movs	r3, #0
 80167ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80167ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80167f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80167f2:	f7ff ff3f 	bl	8016674 <check_fs>
 80167f6:	4603      	mov	r3, r0
 80167f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80167fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016800:	2b02      	cmp	r3, #2
 8016802:	d14b      	bne.n	801689c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016804:	2300      	movs	r3, #0
 8016806:	643b      	str	r3, [r7, #64]	; 0x40
 8016808:	e01f      	b.n	801684a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801680c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016812:	011b      	lsls	r3, r3, #4
 8016814:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016818:	4413      	add	r3, r2
 801681a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801681e:	3304      	adds	r3, #4
 8016820:	781b      	ldrb	r3, [r3, #0]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d006      	beq.n	8016834 <find_volume+0x114>
 8016826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016828:	3308      	adds	r3, #8
 801682a:	4618      	mov	r0, r3
 801682c:	f7fe fd72 	bl	8015314 <ld_dword>
 8016830:	4602      	mov	r2, r0
 8016832:	e000      	b.n	8016836 <find_volume+0x116>
 8016834:	2200      	movs	r2, #0
 8016836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016838:	009b      	lsls	r3, r3, #2
 801683a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801683e:	440b      	add	r3, r1
 8016840:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016846:	3301      	adds	r3, #1
 8016848:	643b      	str	r3, [r7, #64]	; 0x40
 801684a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801684c:	2b03      	cmp	r3, #3
 801684e:	d9dc      	bls.n	801680a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016850:	2300      	movs	r3, #0
 8016852:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016856:	2b00      	cmp	r3, #0
 8016858:	d002      	beq.n	8016860 <find_volume+0x140>
 801685a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801685c:	3b01      	subs	r3, #1
 801685e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016862:	009b      	lsls	r3, r3, #2
 8016864:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8016868:	4413      	add	r3, r2
 801686a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801686e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016872:	2b00      	cmp	r3, #0
 8016874:	d005      	beq.n	8016882 <find_volume+0x162>
 8016876:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016878:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801687a:	f7ff fefb 	bl	8016674 <check_fs>
 801687e:	4603      	mov	r3, r0
 8016880:	e000      	b.n	8016884 <find_volume+0x164>
 8016882:	2303      	movs	r3, #3
 8016884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801688c:	2b01      	cmp	r3, #1
 801688e:	d905      	bls.n	801689c <find_volume+0x17c>
 8016890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016892:	3301      	adds	r3, #1
 8016894:	643b      	str	r3, [r7, #64]	; 0x40
 8016896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016898:	2b03      	cmp	r3, #3
 801689a:	d9e1      	bls.n	8016860 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801689c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80168a0:	2b04      	cmp	r3, #4
 80168a2:	d101      	bne.n	80168a8 <find_volume+0x188>
 80168a4:	2301      	movs	r3, #1
 80168a6:	e17d      	b.n	8016ba4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80168a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80168ac:	2b01      	cmp	r3, #1
 80168ae:	d901      	bls.n	80168b4 <find_volume+0x194>
 80168b0:	230d      	movs	r3, #13
 80168b2:	e177      	b.n	8016ba4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80168b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168b6:	3330      	adds	r3, #48	; 0x30
 80168b8:	330b      	adds	r3, #11
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7fe fd12 	bl	80152e4 <ld_word>
 80168c0:	4603      	mov	r3, r0
 80168c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80168c6:	d001      	beq.n	80168cc <find_volume+0x1ac>
 80168c8:	230d      	movs	r3, #13
 80168ca:	e16b      	b.n	8016ba4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80168cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ce:	3330      	adds	r3, #48	; 0x30
 80168d0:	3316      	adds	r3, #22
 80168d2:	4618      	mov	r0, r3
 80168d4:	f7fe fd06 	bl	80152e4 <ld_word>
 80168d8:	4603      	mov	r3, r0
 80168da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80168dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d106      	bne.n	80168f0 <find_volume+0x1d0>
 80168e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168e4:	3330      	adds	r3, #48	; 0x30
 80168e6:	3324      	adds	r3, #36	; 0x24
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7fe fd13 	bl	8015314 <ld_dword>
 80168ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80168f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80168f4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80168f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168f8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80168fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016902:	789b      	ldrb	r3, [r3, #2]
 8016904:	2b01      	cmp	r3, #1
 8016906:	d005      	beq.n	8016914 <find_volume+0x1f4>
 8016908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801690a:	789b      	ldrb	r3, [r3, #2]
 801690c:	2b02      	cmp	r3, #2
 801690e:	d001      	beq.n	8016914 <find_volume+0x1f4>
 8016910:	230d      	movs	r3, #13
 8016912:	e147      	b.n	8016ba4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016916:	789b      	ldrb	r3, [r3, #2]
 8016918:	461a      	mov	r2, r3
 801691a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801691c:	fb02 f303 	mul.w	r3, r2, r3
 8016920:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016928:	b29a      	uxth	r2, r3
 801692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801692c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016930:	895b      	ldrh	r3, [r3, #10]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d008      	beq.n	8016948 <find_volume+0x228>
 8016936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016938:	895b      	ldrh	r3, [r3, #10]
 801693a:	461a      	mov	r2, r3
 801693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801693e:	895b      	ldrh	r3, [r3, #10]
 8016940:	3b01      	subs	r3, #1
 8016942:	4013      	ands	r3, r2
 8016944:	2b00      	cmp	r3, #0
 8016946:	d001      	beq.n	801694c <find_volume+0x22c>
 8016948:	230d      	movs	r3, #13
 801694a:	e12b      	b.n	8016ba4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801694e:	3330      	adds	r3, #48	; 0x30
 8016950:	3311      	adds	r3, #17
 8016952:	4618      	mov	r0, r3
 8016954:	f7fe fcc6 	bl	80152e4 <ld_word>
 8016958:	4603      	mov	r3, r0
 801695a:	461a      	mov	r2, r3
 801695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801695e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016962:	891b      	ldrh	r3, [r3, #8]
 8016964:	f003 030f 	and.w	r3, r3, #15
 8016968:	b29b      	uxth	r3, r3
 801696a:	2b00      	cmp	r3, #0
 801696c:	d001      	beq.n	8016972 <find_volume+0x252>
 801696e:	230d      	movs	r3, #13
 8016970:	e118      	b.n	8016ba4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016974:	3330      	adds	r3, #48	; 0x30
 8016976:	3313      	adds	r3, #19
 8016978:	4618      	mov	r0, r3
 801697a:	f7fe fcb3 	bl	80152e4 <ld_word>
 801697e:	4603      	mov	r3, r0
 8016980:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016984:	2b00      	cmp	r3, #0
 8016986:	d106      	bne.n	8016996 <find_volume+0x276>
 8016988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801698a:	3330      	adds	r3, #48	; 0x30
 801698c:	3320      	adds	r3, #32
 801698e:	4618      	mov	r0, r3
 8016990:	f7fe fcc0 	bl	8015314 <ld_dword>
 8016994:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016998:	3330      	adds	r3, #48	; 0x30
 801699a:	330e      	adds	r3, #14
 801699c:	4618      	mov	r0, r3
 801699e:	f7fe fca1 	bl	80152e4 <ld_word>
 80169a2:	4603      	mov	r3, r0
 80169a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80169a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d101      	bne.n	80169b0 <find_volume+0x290>
 80169ac:	230d      	movs	r3, #13
 80169ae:	e0f9      	b.n	8016ba4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80169b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80169b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169b4:	4413      	add	r3, r2
 80169b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169b8:	8912      	ldrh	r2, [r2, #8]
 80169ba:	0912      	lsrs	r2, r2, #4
 80169bc:	b292      	uxth	r2, r2
 80169be:	4413      	add	r3, r2
 80169c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80169c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80169c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169c6:	429a      	cmp	r2, r3
 80169c8:	d201      	bcs.n	80169ce <find_volume+0x2ae>
 80169ca:	230d      	movs	r3, #13
 80169cc:	e0ea      	b.n	8016ba4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80169ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80169d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169d2:	1ad3      	subs	r3, r2, r3
 80169d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169d6:	8952      	ldrh	r2, [r2, #10]
 80169d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80169dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80169de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d103      	bne.n	80169ec <find_volume+0x2cc>
 80169e4:	230d      	movs	r3, #13
 80169e6:	e0dd      	b.n	8016ba4 <find_volume+0x484>
 80169e8:	200002a0 	.word	0x200002a0
		fmt = FS_FAT32;
 80169ec:	2303      	movs	r3, #3
 80169ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80169f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80169f8:	4293      	cmp	r3, r2
 80169fa:	d802      	bhi.n	8016a02 <find_volume+0x2e2>
 80169fc:	2302      	movs	r3, #2
 80169fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a04:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016a08:	4293      	cmp	r3, r2
 8016a0a:	d802      	bhi.n	8016a12 <find_volume+0x2f2>
 8016a0c:	2301      	movs	r3, #1
 8016a0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a14:	1c9a      	adds	r2, r3, #2
 8016a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a18:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8016a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016a1e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016a20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a24:	441a      	add	r2, r3
 8016a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a28:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8016a2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a2e:	441a      	add	r2, r3
 8016a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a32:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8016a34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016a38:	2b03      	cmp	r3, #3
 8016a3a:	d11e      	bne.n	8016a7a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a3e:	3330      	adds	r3, #48	; 0x30
 8016a40:	332a      	adds	r3, #42	; 0x2a
 8016a42:	4618      	mov	r0, r3
 8016a44:	f7fe fc4e 	bl	80152e4 <ld_word>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d001      	beq.n	8016a52 <find_volume+0x332>
 8016a4e:	230d      	movs	r3, #13
 8016a50:	e0a8      	b.n	8016ba4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a54:	891b      	ldrh	r3, [r3, #8]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d001      	beq.n	8016a5e <find_volume+0x33e>
 8016a5a:	230d      	movs	r3, #13
 8016a5c:	e0a2      	b.n	8016ba4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a60:	3330      	adds	r3, #48	; 0x30
 8016a62:	332c      	adds	r3, #44	; 0x2c
 8016a64:	4618      	mov	r0, r3
 8016a66:	f7fe fc55 	bl	8015314 <ld_dword>
 8016a6a:	4602      	mov	r2, r0
 8016a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a6e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a72:	695b      	ldr	r3, [r3, #20]
 8016a74:	009b      	lsls	r3, r3, #2
 8016a76:	647b      	str	r3, [r7, #68]	; 0x44
 8016a78:	e01f      	b.n	8016aba <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a7c:	891b      	ldrh	r3, [r3, #8]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d101      	bne.n	8016a86 <find_volume+0x366>
 8016a82:	230d      	movs	r3, #13
 8016a84:	e08e      	b.n	8016ba4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a88:	6a1a      	ldr	r2, [r3, #32]
 8016a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016a8c:	441a      	add	r2, r3
 8016a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a90:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016a92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016a96:	2b02      	cmp	r3, #2
 8016a98:	d103      	bne.n	8016aa2 <find_volume+0x382>
 8016a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a9c:	695b      	ldr	r3, [r3, #20]
 8016a9e:	005b      	lsls	r3, r3, #1
 8016aa0:	e00a      	b.n	8016ab8 <find_volume+0x398>
 8016aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aa4:	695a      	ldr	r2, [r3, #20]
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	005b      	lsls	r3, r3, #1
 8016aaa:	4413      	add	r3, r2
 8016aac:	085a      	lsrs	r2, r3, #1
 8016aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ab0:	695b      	ldr	r3, [r3, #20]
 8016ab2:	f003 0301 	and.w	r3, r3, #1
 8016ab6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016ab8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016abc:	699a      	ldr	r2, [r3, #24]
 8016abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ac0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016ac4:	0a5b      	lsrs	r3, r3, #9
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d201      	bcs.n	8016ace <find_volume+0x3ae>
 8016aca:	230d      	movs	r3, #13
 8016acc:	e06a      	b.n	8016ba4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8016ad4:	611a      	str	r2, [r3, #16]
 8016ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ad8:	691a      	ldr	r2, [r3, #16]
 8016ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016adc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8016ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ae0:	2280      	movs	r2, #128	; 0x80
 8016ae2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ae8:	2b03      	cmp	r3, #3
 8016aea:	d149      	bne.n	8016b80 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aee:	3330      	adds	r3, #48	; 0x30
 8016af0:	3330      	adds	r3, #48	; 0x30
 8016af2:	4618      	mov	r0, r3
 8016af4:	f7fe fbf6 	bl	80152e4 <ld_word>
 8016af8:	4603      	mov	r3, r0
 8016afa:	2b01      	cmp	r3, #1
 8016afc:	d140      	bne.n	8016b80 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b00:	3301      	adds	r3, #1
 8016b02:	4619      	mov	r1, r3
 8016b04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016b06:	f7fe fe9d 	bl	8015844 <move_window>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d137      	bne.n	8016b80 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8016b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b12:	2200      	movs	r2, #0
 8016b14:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b18:	3330      	adds	r3, #48	; 0x30
 8016b1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016b1e:	4618      	mov	r0, r3
 8016b20:	f7fe fbe0 	bl	80152e4 <ld_word>
 8016b24:	4603      	mov	r3, r0
 8016b26:	461a      	mov	r2, r3
 8016b28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016b2c:	429a      	cmp	r2, r3
 8016b2e:	d127      	bne.n	8016b80 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b32:	3330      	adds	r3, #48	; 0x30
 8016b34:	4618      	mov	r0, r3
 8016b36:	f7fe fbed 	bl	8015314 <ld_dword>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	4a1b      	ldr	r2, [pc, #108]	; (8016bac <find_volume+0x48c>)
 8016b3e:	4293      	cmp	r3, r2
 8016b40:	d11e      	bne.n	8016b80 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b44:	3330      	adds	r3, #48	; 0x30
 8016b46:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	f7fe fbe2 	bl	8015314 <ld_dword>
 8016b50:	4603      	mov	r3, r0
 8016b52:	4a17      	ldr	r2, [pc, #92]	; (8016bb0 <find_volume+0x490>)
 8016b54:	4293      	cmp	r3, r2
 8016b56:	d113      	bne.n	8016b80 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b5a:	3330      	adds	r3, #48	; 0x30
 8016b5c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016b60:	4618      	mov	r0, r3
 8016b62:	f7fe fbd7 	bl	8015314 <ld_dword>
 8016b66:	4602      	mov	r2, r0
 8016b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b6a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b6e:	3330      	adds	r3, #48	; 0x30
 8016b70:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016b74:	4618      	mov	r0, r3
 8016b76:	f7fe fbcd 	bl	8015314 <ld_dword>
 8016b7a:	4602      	mov	r2, r0
 8016b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b7e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b82:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016b86:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016b88:	4b0a      	ldr	r3, [pc, #40]	; (8016bb4 <find_volume+0x494>)
 8016b8a:	881b      	ldrh	r3, [r3, #0]
 8016b8c:	3301      	adds	r3, #1
 8016b8e:	b29a      	uxth	r2, r3
 8016b90:	4b08      	ldr	r3, [pc, #32]	; (8016bb4 <find_volume+0x494>)
 8016b92:	801a      	strh	r2, [r3, #0]
 8016b94:	4b07      	ldr	r3, [pc, #28]	; (8016bb4 <find_volume+0x494>)
 8016b96:	881a      	ldrh	r2, [r3, #0]
 8016b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b9a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8016b9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016b9e:	f7fe fde9 	bl	8015774 <clear_lock>
#endif
	return FR_OK;
 8016ba2:	2300      	movs	r3, #0
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3758      	adds	r7, #88	; 0x58
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	41615252 	.word	0x41615252
 8016bb0:	61417272 	.word	0x61417272
 8016bb4:	200002a4 	.word	0x200002a4

08016bb8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b084      	sub	sp, #16
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
 8016bc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016bc2:	2309      	movs	r3, #9
 8016bc4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d01c      	beq.n	8016c06 <validate+0x4e>
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d018      	beq.n	8016c06 <validate+0x4e>
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d013      	beq.n	8016c06 <validate+0x4e>
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	889a      	ldrh	r2, [r3, #4]
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	88db      	ldrh	r3, [r3, #6]
 8016be8:	429a      	cmp	r2, r3
 8016bea:	d10c      	bne.n	8016c06 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	785b      	ldrb	r3, [r3, #1]
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	f7fe fad8 	bl	80151a8 <disk_status>
 8016bf8:	4603      	mov	r3, r0
 8016bfa:	f003 0301 	and.w	r3, r3, #1
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d101      	bne.n	8016c06 <validate+0x4e>
			res = FR_OK;
 8016c02:	2300      	movs	r3, #0
 8016c04:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016c06:	7bfb      	ldrb	r3, [r7, #15]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d102      	bne.n	8016c12 <validate+0x5a>
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	e000      	b.n	8016c14 <validate+0x5c>
 8016c12:	2300      	movs	r3, #0
 8016c14:	683a      	ldr	r2, [r7, #0]
 8016c16:	6013      	str	r3, [r2, #0]
	return res;
 8016c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	3710      	adds	r7, #16
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}
	...

08016c24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b088      	sub	sp, #32
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	60f8      	str	r0, [r7, #12]
 8016c2c:	60b9      	str	r1, [r7, #8]
 8016c2e:	4613      	mov	r3, r2
 8016c30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016c36:	f107 0310 	add.w	r3, r7, #16
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f7ff fcd5 	bl	80165ea <get_ldnumber>
 8016c40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016c42:	69fb      	ldr	r3, [r7, #28]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	da01      	bge.n	8016c4c <f_mount+0x28>
 8016c48:	230b      	movs	r3, #11
 8016c4a:	e02b      	b.n	8016ca4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016c4c:	4a17      	ldr	r2, [pc, #92]	; (8016cac <f_mount+0x88>)
 8016c4e:	69fb      	ldr	r3, [r7, #28]
 8016c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016c56:	69bb      	ldr	r3, [r7, #24]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d005      	beq.n	8016c68 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016c5c:	69b8      	ldr	r0, [r7, #24]
 8016c5e:	f7fe fd89 	bl	8015774 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016c62:	69bb      	ldr	r3, [r7, #24]
 8016c64:	2200      	movs	r2, #0
 8016c66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d002      	beq.n	8016c74 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	2200      	movs	r2, #0
 8016c72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016c74:	68fa      	ldr	r2, [r7, #12]
 8016c76:	490d      	ldr	r1, [pc, #52]	; (8016cac <f_mount+0x88>)
 8016c78:	69fb      	ldr	r3, [r7, #28]
 8016c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d002      	beq.n	8016c8a <f_mount+0x66>
 8016c84:	79fb      	ldrb	r3, [r7, #7]
 8016c86:	2b01      	cmp	r3, #1
 8016c88:	d001      	beq.n	8016c8e <f_mount+0x6a>
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	e00a      	b.n	8016ca4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016c8e:	f107 010c 	add.w	r1, r7, #12
 8016c92:	f107 0308 	add.w	r3, r7, #8
 8016c96:	2200      	movs	r2, #0
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f7ff fd41 	bl	8016720 <find_volume>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	3720      	adds	r7, #32
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bd80      	pop	{r7, pc}
 8016cac:	200002a0 	.word	0x200002a0

08016cb0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b098      	sub	sp, #96	; 0x60
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	60f8      	str	r0, [r7, #12]
 8016cb8:	60b9      	str	r1, [r7, #8]
 8016cba:	4613      	mov	r3, r2
 8016cbc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d101      	bne.n	8016cc8 <f_open+0x18>
 8016cc4:	2309      	movs	r3, #9
 8016cc6:	e1ad      	b.n	8017024 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016cc8:	79fb      	ldrb	r3, [r7, #7]
 8016cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016cce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016cd0:	79fa      	ldrb	r2, [r7, #7]
 8016cd2:	f107 0110 	add.w	r1, r7, #16
 8016cd6:	f107 0308 	add.w	r3, r7, #8
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f7ff fd20 	bl	8016720 <find_volume>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8016ce6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	f040 8191 	bne.w	8017012 <f_open+0x362>
		dj.obj.fs = fs;
 8016cf0:	693b      	ldr	r3, [r7, #16]
 8016cf2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016cf4:	68ba      	ldr	r2, [r7, #8]
 8016cf6:	f107 0314 	add.w	r3, r7, #20
 8016cfa:	4611      	mov	r1, r2
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f7ff fc03 	bl	8016508 <follow_path>
 8016d02:	4603      	mov	r3, r0
 8016d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016d08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d11a      	bne.n	8016d46 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016d10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016d14:	b25b      	sxtb	r3, r3
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	da03      	bge.n	8016d22 <f_open+0x72>
				res = FR_INVALID_NAME;
 8016d1a:	2306      	movs	r3, #6
 8016d1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016d20:	e011      	b.n	8016d46 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016d22:	79fb      	ldrb	r3, [r7, #7]
 8016d24:	f023 0301 	bic.w	r3, r3, #1
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	bf14      	ite	ne
 8016d2c:	2301      	movne	r3, #1
 8016d2e:	2300      	moveq	r3, #0
 8016d30:	b2db      	uxtb	r3, r3
 8016d32:	461a      	mov	r2, r3
 8016d34:	f107 0314 	add.w	r3, r7, #20
 8016d38:	4611      	mov	r1, r2
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7fe fbd2 	bl	80154e4 <chk_lock>
 8016d40:	4603      	mov	r3, r0
 8016d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016d46:	79fb      	ldrb	r3, [r7, #7]
 8016d48:	f003 031c 	and.w	r3, r3, #28
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d07f      	beq.n	8016e50 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8016d50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d017      	beq.n	8016d88 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016d58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016d5c:	2b04      	cmp	r3, #4
 8016d5e:	d10e      	bne.n	8016d7e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016d60:	f7fe fc1c 	bl	801559c <enq_lock>
 8016d64:	4603      	mov	r3, r0
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d006      	beq.n	8016d78 <f_open+0xc8>
 8016d6a:	f107 0314 	add.w	r3, r7, #20
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f7ff fb03 	bl	801637a <dir_register>
 8016d74:	4603      	mov	r3, r0
 8016d76:	e000      	b.n	8016d7a <f_open+0xca>
 8016d78:	2312      	movs	r3, #18
 8016d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016d7e:	79fb      	ldrb	r3, [r7, #7]
 8016d80:	f043 0308 	orr.w	r3, r3, #8
 8016d84:	71fb      	strb	r3, [r7, #7]
 8016d86:	e010      	b.n	8016daa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016d88:	7ebb      	ldrb	r3, [r7, #26]
 8016d8a:	f003 0311 	and.w	r3, r3, #17
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d003      	beq.n	8016d9a <f_open+0xea>
					res = FR_DENIED;
 8016d92:	2307      	movs	r3, #7
 8016d94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016d98:	e007      	b.n	8016daa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016d9a:	79fb      	ldrb	r3, [r7, #7]
 8016d9c:	f003 0304 	and.w	r3, r3, #4
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d002      	beq.n	8016daa <f_open+0xfa>
 8016da4:	2308      	movs	r3, #8
 8016da6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016daa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d168      	bne.n	8016e84 <f_open+0x1d4>
 8016db2:	79fb      	ldrb	r3, [r7, #7]
 8016db4:	f003 0308 	and.w	r3, r3, #8
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d063      	beq.n	8016e84 <f_open+0x1d4>
				dw = GET_FATTIME();
 8016dbc:	f7fe f888 	bl	8014ed0 <get_fattime>
 8016dc0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dc4:	330e      	adds	r3, #14
 8016dc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f7fe fae1 	bl	8015390 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dd0:	3316      	adds	r3, #22
 8016dd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f7fe fadb 	bl	8015390 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ddc:	330b      	adds	r3, #11
 8016dde:	2220      	movs	r2, #32
 8016de0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016de2:	693b      	ldr	r3, [r7, #16]
 8016de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016de6:	4611      	mov	r1, r2
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7ff fa32 	bl	8016252 <ld_clust>
 8016dee:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016df4:	2200      	movs	r2, #0
 8016df6:	4618      	mov	r0, r3
 8016df8:	f7ff fa4a 	bl	8016290 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dfe:	331c      	adds	r3, #28
 8016e00:	2100      	movs	r1, #0
 8016e02:	4618      	mov	r0, r3
 8016e04:	f7fe fac4 	bl	8015390 <st_dword>
					fs->wflag = 1;
 8016e08:	693b      	ldr	r3, [r7, #16]
 8016e0a:	2201      	movs	r2, #1
 8016e0c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d037      	beq.n	8016e84 <f_open+0x1d4>
						dw = fs->winsect;
 8016e14:	693b      	ldr	r3, [r7, #16]
 8016e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e18:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8016e1a:	f107 0314 	add.w	r3, r7, #20
 8016e1e:	2200      	movs	r2, #0
 8016e20:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016e22:	4618      	mov	r0, r3
 8016e24:	f7fe ff5d 	bl	8015ce2 <remove_chain>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8016e2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d126      	bne.n	8016e84 <f_open+0x1d4>
							res = move_window(fs, dw);
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	f7fe fd02 	bl	8015844 <move_window>
 8016e40:	4603      	mov	r3, r0
 8016e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016e46:	693b      	ldr	r3, [r7, #16]
 8016e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016e4a:	3a01      	subs	r2, #1
 8016e4c:	60da      	str	r2, [r3, #12]
 8016e4e:	e019      	b.n	8016e84 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016e50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d115      	bne.n	8016e84 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016e58:	7ebb      	ldrb	r3, [r7, #26]
 8016e5a:	f003 0310 	and.w	r3, r3, #16
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d003      	beq.n	8016e6a <f_open+0x1ba>
					res = FR_NO_FILE;
 8016e62:	2304      	movs	r3, #4
 8016e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016e68:	e00c      	b.n	8016e84 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016e6a:	79fb      	ldrb	r3, [r7, #7]
 8016e6c:	f003 0302 	and.w	r3, r3, #2
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d007      	beq.n	8016e84 <f_open+0x1d4>
 8016e74:	7ebb      	ldrb	r3, [r7, #26]
 8016e76:	f003 0301 	and.w	r3, r3, #1
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d002      	beq.n	8016e84 <f_open+0x1d4>
						res = FR_DENIED;
 8016e7e:	2307      	movs	r3, #7
 8016e80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8016e84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d128      	bne.n	8016ede <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016e8c:	79fb      	ldrb	r3, [r7, #7]
 8016e8e:	f003 0308 	and.w	r3, r3, #8
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d003      	beq.n	8016e9e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8016e96:	79fb      	ldrb	r3, [r7, #7]
 8016e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e9c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016e9e:	693b      	ldr	r3, [r7, #16]
 8016ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8016ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016eac:	79fb      	ldrb	r3, [r7, #7]
 8016eae:	f023 0301 	bic.w	r3, r3, #1
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	bf14      	ite	ne
 8016eb6:	2301      	movne	r3, #1
 8016eb8:	2300      	moveq	r3, #0
 8016eba:	b2db      	uxtb	r3, r3
 8016ebc:	461a      	mov	r2, r3
 8016ebe:	f107 0314 	add.w	r3, r7, #20
 8016ec2:	4611      	mov	r1, r2
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f7fe fb8b 	bl	80155e0 <inc_lock>
 8016eca:	4602      	mov	r2, r0
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	691b      	ldr	r3, [r3, #16]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d102      	bne.n	8016ede <f_open+0x22e>
 8016ed8:	2302      	movs	r3, #2
 8016eda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016ede:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	f040 8095 	bne.w	8017012 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016ee8:	693b      	ldr	r3, [r7, #16]
 8016eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016eec:	4611      	mov	r1, r2
 8016eee:	4618      	mov	r0, r3
 8016ef0:	f7ff f9af 	bl	8016252 <ld_clust>
 8016ef4:	4602      	mov	r2, r0
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016efc:	331c      	adds	r3, #28
 8016efe:	4618      	mov	r0, r3
 8016f00:	f7fe fa08 	bl	8015314 <ld_dword>
 8016f04:	4602      	mov	r2, r0
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016f10:	693a      	ldr	r2, [r7, #16]
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016f16:	693b      	ldr	r3, [r7, #16]
 8016f18:	88da      	ldrh	r2, [r3, #6]
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	79fa      	ldrb	r2, [r7, #7]
 8016f22:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	2200      	movs	r2, #0
 8016f28:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	2200      	movs	r2, #0
 8016f34:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	3330      	adds	r3, #48	; 0x30
 8016f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f3e:	2100      	movs	r1, #0
 8016f40:	4618      	mov	r0, r3
 8016f42:	f7fe fa72 	bl	801542a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016f46:	79fb      	ldrb	r3, [r7, #7]
 8016f48:	f003 0320 	and.w	r3, r3, #32
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d060      	beq.n	8017012 <f_open+0x362>
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	68db      	ldr	r3, [r3, #12]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d05c      	beq.n	8017012 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	68da      	ldr	r2, [r3, #12]
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016f60:	693b      	ldr	r3, [r7, #16]
 8016f62:	895b      	ldrh	r3, [r3, #10]
 8016f64:	025b      	lsls	r3, r3, #9
 8016f66:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	689b      	ldr	r3, [r3, #8]
 8016f6c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	68db      	ldr	r3, [r3, #12]
 8016f72:	657b      	str	r3, [r7, #84]	; 0x54
 8016f74:	e016      	b.n	8016fa4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	f7fe fd1d 	bl	80159ba <get_fat>
 8016f80:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8016f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f84:	2b01      	cmp	r3, #1
 8016f86:	d802      	bhi.n	8016f8e <f_open+0x2de>
 8016f88:	2302      	movs	r3, #2
 8016f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f94:	d102      	bne.n	8016f9c <f_open+0x2ec>
 8016f96:	2301      	movs	r3, #1
 8016f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016f9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fa0:	1ad3      	subs	r3, r2, r3
 8016fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8016fa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d103      	bne.n	8016fb4 <f_open+0x304>
 8016fac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fb0:	429a      	cmp	r2, r3
 8016fb2:	d8e0      	bhi.n	8016f76 <f_open+0x2c6>
				}
				fp->clust = clst;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016fb8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016fba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d127      	bne.n	8017012 <f_open+0x362>
 8016fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d022      	beq.n	8017012 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016fcc:	693b      	ldr	r3, [r7, #16]
 8016fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f7fe fcd3 	bl	801597c <clust2sect>
 8016fd6:	6478      	str	r0, [r7, #68]	; 0x44
 8016fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d103      	bne.n	8016fe6 <f_open+0x336>
						res = FR_INT_ERR;
 8016fde:	2302      	movs	r3, #2
 8016fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016fe4:	e015      	b.n	8017012 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016fe8:	0a5a      	lsrs	r2, r3, #9
 8016fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016fec:	441a      	add	r2, r3
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016ff2:	693b      	ldr	r3, [r7, #16]
 8016ff4:	7858      	ldrb	r0, [r3, #1]
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	6a1a      	ldr	r2, [r3, #32]
 8017000:	2301      	movs	r3, #1
 8017002:	f7fe f911 	bl	8015228 <disk_read>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d002      	beq.n	8017012 <f_open+0x362>
 801700c:	2301      	movs	r3, #1
 801700e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017016:	2b00      	cmp	r3, #0
 8017018:	d002      	beq.n	8017020 <f_open+0x370>
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	2200      	movs	r2, #0
 801701e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017020:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8017024:	4618      	mov	r0, r3
 8017026:	3760      	adds	r7, #96	; 0x60
 8017028:	46bd      	mov	sp, r7
 801702a:	bd80      	pop	{r7, pc}

0801702c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b08e      	sub	sp, #56	; 0x38
 8017030:	af00      	add	r7, sp, #0
 8017032:	60f8      	str	r0, [r7, #12]
 8017034:	60b9      	str	r1, [r7, #8]
 8017036:	607a      	str	r2, [r7, #4]
 8017038:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	2200      	movs	r2, #0
 8017042:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	f107 0214 	add.w	r2, r7, #20
 801704a:	4611      	mov	r1, r2
 801704c:	4618      	mov	r0, r3
 801704e:	f7ff fdb3 	bl	8016bb8 <validate>
 8017052:	4603      	mov	r3, r0
 8017054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801705c:	2b00      	cmp	r3, #0
 801705e:	d107      	bne.n	8017070 <f_read+0x44>
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	7d5b      	ldrb	r3, [r3, #21]
 8017064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8017068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801706c:	2b00      	cmp	r3, #0
 801706e:	d002      	beq.n	8017076 <f_read+0x4a>
 8017070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017074:	e115      	b.n	80172a2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	7d1b      	ldrb	r3, [r3, #20]
 801707a:	f003 0301 	and.w	r3, r3, #1
 801707e:	2b00      	cmp	r3, #0
 8017080:	d101      	bne.n	8017086 <f_read+0x5a>
 8017082:	2307      	movs	r3, #7
 8017084:	e10d      	b.n	80172a2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	68da      	ldr	r2, [r3, #12]
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	699b      	ldr	r3, [r3, #24]
 801708e:	1ad3      	subs	r3, r2, r3
 8017090:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8017092:	687a      	ldr	r2, [r7, #4]
 8017094:	6a3b      	ldr	r3, [r7, #32]
 8017096:	429a      	cmp	r2, r3
 8017098:	f240 80fe 	bls.w	8017298 <f_read+0x26c>
 801709c:	6a3b      	ldr	r3, [r7, #32]
 801709e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80170a0:	e0fa      	b.n	8017298 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	699b      	ldr	r3, [r3, #24]
 80170a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	f040 80c6 	bne.w	801723c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	699b      	ldr	r3, [r3, #24]
 80170b4:	0a5b      	lsrs	r3, r3, #9
 80170b6:	697a      	ldr	r2, [r7, #20]
 80170b8:	8952      	ldrh	r2, [r2, #10]
 80170ba:	3a01      	subs	r2, #1
 80170bc:	4013      	ands	r3, r2
 80170be:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80170c0:	69fb      	ldr	r3, [r7, #28]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d12f      	bne.n	8017126 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	699b      	ldr	r3, [r3, #24]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d103      	bne.n	80170d6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	689b      	ldr	r3, [r3, #8]
 80170d2:	633b      	str	r3, [r7, #48]	; 0x30
 80170d4:	e013      	b.n	80170fe <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d007      	beq.n	80170ee <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	699b      	ldr	r3, [r3, #24]
 80170e2:	4619      	mov	r1, r3
 80170e4:	68f8      	ldr	r0, [r7, #12]
 80170e6:	f7fe fef9 	bl	8015edc <clmt_clust>
 80170ea:	6338      	str	r0, [r7, #48]	; 0x30
 80170ec:	e007      	b.n	80170fe <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80170ee:	68fa      	ldr	r2, [r7, #12]
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	69db      	ldr	r3, [r3, #28]
 80170f4:	4619      	mov	r1, r3
 80170f6:	4610      	mov	r0, r2
 80170f8:	f7fe fc5f 	bl	80159ba <get_fat>
 80170fc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80170fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017100:	2b01      	cmp	r3, #1
 8017102:	d804      	bhi.n	801710e <f_read+0xe2>
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	2202      	movs	r2, #2
 8017108:	755a      	strb	r2, [r3, #21]
 801710a:	2302      	movs	r3, #2
 801710c:	e0c9      	b.n	80172a2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017114:	d104      	bne.n	8017120 <f_read+0xf4>
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	2201      	movs	r2, #1
 801711a:	755a      	strb	r2, [r3, #21]
 801711c:	2301      	movs	r3, #1
 801711e:	e0c0      	b.n	80172a2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017124:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8017126:	697a      	ldr	r2, [r7, #20]
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	69db      	ldr	r3, [r3, #28]
 801712c:	4619      	mov	r1, r3
 801712e:	4610      	mov	r0, r2
 8017130:	f7fe fc24 	bl	801597c <clust2sect>
 8017134:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017136:	69bb      	ldr	r3, [r7, #24]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d104      	bne.n	8017146 <f_read+0x11a>
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	2202      	movs	r2, #2
 8017140:	755a      	strb	r2, [r3, #21]
 8017142:	2302      	movs	r3, #2
 8017144:	e0ad      	b.n	80172a2 <f_read+0x276>
			sect += csect;
 8017146:	69ba      	ldr	r2, [r7, #24]
 8017148:	69fb      	ldr	r3, [r7, #28]
 801714a:	4413      	add	r3, r2
 801714c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	0a5b      	lsrs	r3, r3, #9
 8017152:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8017154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017156:	2b00      	cmp	r3, #0
 8017158:	d039      	beq.n	80171ce <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801715a:	69fa      	ldr	r2, [r7, #28]
 801715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801715e:	4413      	add	r3, r2
 8017160:	697a      	ldr	r2, [r7, #20]
 8017162:	8952      	ldrh	r2, [r2, #10]
 8017164:	4293      	cmp	r3, r2
 8017166:	d905      	bls.n	8017174 <f_read+0x148>
					cc = fs->csize - csect;
 8017168:	697b      	ldr	r3, [r7, #20]
 801716a:	895b      	ldrh	r3, [r3, #10]
 801716c:	461a      	mov	r2, r3
 801716e:	69fb      	ldr	r3, [r7, #28]
 8017170:	1ad3      	subs	r3, r2, r3
 8017172:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017174:	697b      	ldr	r3, [r7, #20]
 8017176:	7858      	ldrb	r0, [r3, #1]
 8017178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801717a:	69ba      	ldr	r2, [r7, #24]
 801717c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801717e:	f7fe f853 	bl	8015228 <disk_read>
 8017182:	4603      	mov	r3, r0
 8017184:	2b00      	cmp	r3, #0
 8017186:	d004      	beq.n	8017192 <f_read+0x166>
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	2201      	movs	r2, #1
 801718c:	755a      	strb	r2, [r3, #21]
 801718e:	2301      	movs	r3, #1
 8017190:	e087      	b.n	80172a2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	7d1b      	ldrb	r3, [r3, #20]
 8017196:	b25b      	sxtb	r3, r3
 8017198:	2b00      	cmp	r3, #0
 801719a:	da14      	bge.n	80171c6 <f_read+0x19a>
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	6a1a      	ldr	r2, [r3, #32]
 80171a0:	69bb      	ldr	r3, [r7, #24]
 80171a2:	1ad3      	subs	r3, r2, r3
 80171a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80171a6:	429a      	cmp	r2, r3
 80171a8:	d90d      	bls.n	80171c6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	6a1a      	ldr	r2, [r3, #32]
 80171ae:	69bb      	ldr	r3, [r7, #24]
 80171b0:	1ad3      	subs	r3, r2, r3
 80171b2:	025b      	lsls	r3, r3, #9
 80171b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171b6:	18d0      	adds	r0, r2, r3
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	3330      	adds	r3, #48	; 0x30
 80171bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80171c0:	4619      	mov	r1, r3
 80171c2:	f7fe f911 	bl	80153e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80171c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171c8:	025b      	lsls	r3, r3, #9
 80171ca:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80171cc:	e050      	b.n	8017270 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	6a1b      	ldr	r3, [r3, #32]
 80171d2:	69ba      	ldr	r2, [r7, #24]
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d02e      	beq.n	8017236 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	7d1b      	ldrb	r3, [r3, #20]
 80171dc:	b25b      	sxtb	r3, r3
 80171de:	2b00      	cmp	r3, #0
 80171e0:	da18      	bge.n	8017214 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80171e2:	697b      	ldr	r3, [r7, #20]
 80171e4:	7858      	ldrb	r0, [r3, #1]
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	6a1a      	ldr	r2, [r3, #32]
 80171f0:	2301      	movs	r3, #1
 80171f2:	f7fe f839 	bl	8015268 <disk_write>
 80171f6:	4603      	mov	r3, r0
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d004      	beq.n	8017206 <f_read+0x1da>
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	2201      	movs	r2, #1
 8017200:	755a      	strb	r2, [r3, #21]
 8017202:	2301      	movs	r3, #1
 8017204:	e04d      	b.n	80172a2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	7d1b      	ldrb	r3, [r3, #20]
 801720a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801720e:	b2da      	uxtb	r2, r3
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8017214:	697b      	ldr	r3, [r7, #20]
 8017216:	7858      	ldrb	r0, [r3, #1]
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801721e:	2301      	movs	r3, #1
 8017220:	69ba      	ldr	r2, [r7, #24]
 8017222:	f7fe f801 	bl	8015228 <disk_read>
 8017226:	4603      	mov	r3, r0
 8017228:	2b00      	cmp	r3, #0
 801722a:	d004      	beq.n	8017236 <f_read+0x20a>
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	2201      	movs	r2, #1
 8017230:	755a      	strb	r2, [r3, #21]
 8017232:	2301      	movs	r3, #1
 8017234:	e035      	b.n	80172a2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	69ba      	ldr	r2, [r7, #24]
 801723a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	699b      	ldr	r3, [r3, #24]
 8017240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017244:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8017248:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801724a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	429a      	cmp	r2, r3
 8017250:	d901      	bls.n	8017256 <f_read+0x22a>
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	699b      	ldr	r3, [r3, #24]
 8017260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017264:	4413      	add	r3, r2
 8017266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017268:	4619      	mov	r1, r3
 801726a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801726c:	f7fe f8bc 	bl	80153e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017274:	4413      	add	r3, r2
 8017276:	627b      	str	r3, [r7, #36]	; 0x24
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	699a      	ldr	r2, [r3, #24]
 801727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801727e:	441a      	add	r2, r3
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	619a      	str	r2, [r3, #24]
 8017284:	683b      	ldr	r3, [r7, #0]
 8017286:	681a      	ldr	r2, [r3, #0]
 8017288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801728a:	441a      	add	r2, r3
 801728c:	683b      	ldr	r3, [r7, #0]
 801728e:	601a      	str	r2, [r3, #0]
 8017290:	687a      	ldr	r2, [r7, #4]
 8017292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017294:	1ad3      	subs	r3, r2, r3
 8017296:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2b00      	cmp	r3, #0
 801729c:	f47f af01 	bne.w	80170a2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80172a0:	2300      	movs	r3, #0
}
 80172a2:	4618      	mov	r0, r3
 80172a4:	3738      	adds	r7, #56	; 0x38
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}

080172aa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80172aa:	b580      	push	{r7, lr}
 80172ac:	b086      	sub	sp, #24
 80172ae:	af00      	add	r7, sp, #0
 80172b0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	f107 0208 	add.w	r2, r7, #8
 80172b8:	4611      	mov	r1, r2
 80172ba:	4618      	mov	r0, r3
 80172bc:	f7ff fc7c 	bl	8016bb8 <validate>
 80172c0:	4603      	mov	r3, r0
 80172c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80172c4:	7dfb      	ldrb	r3, [r7, #23]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d168      	bne.n	801739c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	7d1b      	ldrb	r3, [r3, #20]
 80172ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d062      	beq.n	801739c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	7d1b      	ldrb	r3, [r3, #20]
 80172da:	b25b      	sxtb	r3, r3
 80172dc:	2b00      	cmp	r3, #0
 80172de:	da15      	bge.n	801730c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80172e0:	68bb      	ldr	r3, [r7, #8]
 80172e2:	7858      	ldrb	r0, [r3, #1]
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	6a1a      	ldr	r2, [r3, #32]
 80172ee:	2301      	movs	r3, #1
 80172f0:	f7fd ffba 	bl	8015268 <disk_write>
 80172f4:	4603      	mov	r3, r0
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d001      	beq.n	80172fe <f_sync+0x54>
 80172fa:	2301      	movs	r3, #1
 80172fc:	e04f      	b.n	801739e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	7d1b      	ldrb	r3, [r3, #20]
 8017302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017306:	b2da      	uxtb	r2, r3
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801730c:	f7fd fde0 	bl	8014ed0 <get_fattime>
 8017310:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8017312:	68ba      	ldr	r2, [r7, #8]
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017318:	4619      	mov	r1, r3
 801731a:	4610      	mov	r0, r2
 801731c:	f7fe fa92 	bl	8015844 <move_window>
 8017320:	4603      	mov	r3, r0
 8017322:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8017324:	7dfb      	ldrb	r3, [r7, #23]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d138      	bne.n	801739c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801732e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	330b      	adds	r3, #11
 8017334:	781a      	ldrb	r2, [r3, #0]
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	330b      	adds	r3, #11
 801733a:	f042 0220 	orr.w	r2, r2, #32
 801733e:	b2d2      	uxtb	r2, r2
 8017340:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	6818      	ldr	r0, [r3, #0]
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	689b      	ldr	r3, [r3, #8]
 801734a:	461a      	mov	r2, r3
 801734c:	68f9      	ldr	r1, [r7, #12]
 801734e:	f7fe ff9f 	bl	8016290 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	f103 021c 	add.w	r2, r3, #28
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	68db      	ldr	r3, [r3, #12]
 801735c:	4619      	mov	r1, r3
 801735e:	4610      	mov	r0, r2
 8017360:	f7fe f816 	bl	8015390 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	3316      	adds	r3, #22
 8017368:	6939      	ldr	r1, [r7, #16]
 801736a:	4618      	mov	r0, r3
 801736c:	f7fe f810 	bl	8015390 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	3312      	adds	r3, #18
 8017374:	2100      	movs	r1, #0
 8017376:	4618      	mov	r0, r3
 8017378:	f7fd ffef 	bl	801535a <st_word>
					fs->wflag = 1;
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	2201      	movs	r2, #1
 8017380:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	4618      	mov	r0, r3
 8017386:	f7fe fa8b 	bl	80158a0 <sync_fs>
 801738a:	4603      	mov	r3, r0
 801738c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	7d1b      	ldrb	r3, [r3, #20]
 8017392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017396:	b2da      	uxtb	r2, r3
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801739c:	7dfb      	ldrb	r3, [r7, #23]
}
 801739e:	4618      	mov	r0, r3
 80173a0:	3718      	adds	r7, #24
 80173a2:	46bd      	mov	sp, r7
 80173a4:	bd80      	pop	{r7, pc}

080173a6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80173a6:	b580      	push	{r7, lr}
 80173a8:	b084      	sub	sp, #16
 80173aa:	af00      	add	r7, sp, #0
 80173ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f7ff ff7b 	bl	80172aa <f_sync>
 80173b4:	4603      	mov	r3, r0
 80173b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80173b8:	7bfb      	ldrb	r3, [r7, #15]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d118      	bne.n	80173f0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	f107 0208 	add.w	r2, r7, #8
 80173c4:	4611      	mov	r1, r2
 80173c6:	4618      	mov	r0, r3
 80173c8:	f7ff fbf6 	bl	8016bb8 <validate>
 80173cc:	4603      	mov	r3, r0
 80173ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80173d0:	7bfb      	ldrb	r3, [r7, #15]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d10c      	bne.n	80173f0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	691b      	ldr	r3, [r3, #16]
 80173da:	4618      	mov	r0, r3
 80173dc:	f7fe f98e 	bl	80156fc <dec_lock>
 80173e0:	4603      	mov	r3, r0
 80173e2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80173e4:	7bfb      	ldrb	r3, [r7, #15]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d102      	bne.n	80173f0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	2200      	movs	r2, #0
 80173ee:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80173f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80173f2:	4618      	mov	r0, r3
 80173f4:	3710      	adds	r7, #16
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}
	...

080173fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80173fc:	b480      	push	{r7}
 80173fe:	b087      	sub	sp, #28
 8017400:	af00      	add	r7, sp, #0
 8017402:	60f8      	str	r0, [r7, #12]
 8017404:	60b9      	str	r1, [r7, #8]
 8017406:	4613      	mov	r3, r2
 8017408:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801740a:	2301      	movs	r3, #1
 801740c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801740e:	2300      	movs	r3, #0
 8017410:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017412:	4b1f      	ldr	r3, [pc, #124]	; (8017490 <FATFS_LinkDriverEx+0x94>)
 8017414:	7a5b      	ldrb	r3, [r3, #9]
 8017416:	b2db      	uxtb	r3, r3
 8017418:	2b00      	cmp	r3, #0
 801741a:	d131      	bne.n	8017480 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801741c:	4b1c      	ldr	r3, [pc, #112]	; (8017490 <FATFS_LinkDriverEx+0x94>)
 801741e:	7a5b      	ldrb	r3, [r3, #9]
 8017420:	b2db      	uxtb	r3, r3
 8017422:	461a      	mov	r2, r3
 8017424:	4b1a      	ldr	r3, [pc, #104]	; (8017490 <FATFS_LinkDriverEx+0x94>)
 8017426:	2100      	movs	r1, #0
 8017428:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801742a:	4b19      	ldr	r3, [pc, #100]	; (8017490 <FATFS_LinkDriverEx+0x94>)
 801742c:	7a5b      	ldrb	r3, [r3, #9]
 801742e:	b2db      	uxtb	r3, r3
 8017430:	4a17      	ldr	r2, [pc, #92]	; (8017490 <FATFS_LinkDriverEx+0x94>)
 8017432:	009b      	lsls	r3, r3, #2
 8017434:	4413      	add	r3, r2
 8017436:	68fa      	ldr	r2, [r7, #12]
 8017438:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801743a:	4b15      	ldr	r3, [pc, #84]	; (8017490 <FATFS_LinkDriverEx+0x94>)
 801743c:	7a5b      	ldrb	r3, [r3, #9]
 801743e:	b2db      	uxtb	r3, r3
 8017440:	461a      	mov	r2, r3
 8017442:	4b13      	ldr	r3, [pc, #76]	; (8017490 <FATFS_LinkDriverEx+0x94>)
 8017444:	4413      	add	r3, r2
 8017446:	79fa      	ldrb	r2, [r7, #7]
 8017448:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801744a:	4b11      	ldr	r3, [pc, #68]	; (8017490 <FATFS_LinkDriverEx+0x94>)
 801744c:	7a5b      	ldrb	r3, [r3, #9]
 801744e:	b2db      	uxtb	r3, r3
 8017450:	1c5a      	adds	r2, r3, #1
 8017452:	b2d1      	uxtb	r1, r2
 8017454:	4a0e      	ldr	r2, [pc, #56]	; (8017490 <FATFS_LinkDriverEx+0x94>)
 8017456:	7251      	strb	r1, [r2, #9]
 8017458:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801745a:	7dbb      	ldrb	r3, [r7, #22]
 801745c:	3330      	adds	r3, #48	; 0x30
 801745e:	b2da      	uxtb	r2, r3
 8017460:	68bb      	ldr	r3, [r7, #8]
 8017462:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017464:	68bb      	ldr	r3, [r7, #8]
 8017466:	3301      	adds	r3, #1
 8017468:	223a      	movs	r2, #58	; 0x3a
 801746a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801746c:	68bb      	ldr	r3, [r7, #8]
 801746e:	3302      	adds	r3, #2
 8017470:	222f      	movs	r2, #47	; 0x2f
 8017472:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017474:	68bb      	ldr	r3, [r7, #8]
 8017476:	3303      	adds	r3, #3
 8017478:	2200      	movs	r2, #0
 801747a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801747c:	2300      	movs	r3, #0
 801747e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017480:	7dfb      	ldrb	r3, [r7, #23]
}
 8017482:	4618      	mov	r0, r3
 8017484:	371c      	adds	r7, #28
 8017486:	46bd      	mov	sp, r7
 8017488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748c:	4770      	bx	lr
 801748e:	bf00      	nop
 8017490:	200002c8 	.word	0x200002c8

08017494 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b082      	sub	sp, #8
 8017498:	af00      	add	r7, sp, #0
 801749a:	6078      	str	r0, [r7, #4]
 801749c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801749e:	2200      	movs	r2, #0
 80174a0:	6839      	ldr	r1, [r7, #0]
 80174a2:	6878      	ldr	r0, [r7, #4]
 80174a4:	f7ff ffaa 	bl	80173fc <FATFS_LinkDriverEx>
 80174a8:	4603      	mov	r3, r0
}
 80174aa:	4618      	mov	r0, r3
 80174ac:	3708      	adds	r7, #8
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}
	...

080174b4 <__errno>:
 80174b4:	4b01      	ldr	r3, [pc, #4]	; (80174bc <__errno+0x8>)
 80174b6:	6818      	ldr	r0, [r3, #0]
 80174b8:	4770      	bx	lr
 80174ba:	bf00      	nop
 80174bc:	2000002c 	.word	0x2000002c

080174c0 <__sflush_r>:
 80174c0:	898a      	ldrh	r2, [r1, #12]
 80174c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174c6:	4605      	mov	r5, r0
 80174c8:	0710      	lsls	r0, r2, #28
 80174ca:	460c      	mov	r4, r1
 80174cc:	d458      	bmi.n	8017580 <__sflush_r+0xc0>
 80174ce:	684b      	ldr	r3, [r1, #4]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	dc05      	bgt.n	80174e0 <__sflush_r+0x20>
 80174d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	dc02      	bgt.n	80174e0 <__sflush_r+0x20>
 80174da:	2000      	movs	r0, #0
 80174dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80174e2:	2e00      	cmp	r6, #0
 80174e4:	d0f9      	beq.n	80174da <__sflush_r+0x1a>
 80174e6:	2300      	movs	r3, #0
 80174e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80174ec:	682f      	ldr	r7, [r5, #0]
 80174ee:	602b      	str	r3, [r5, #0]
 80174f0:	d032      	beq.n	8017558 <__sflush_r+0x98>
 80174f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80174f4:	89a3      	ldrh	r3, [r4, #12]
 80174f6:	075a      	lsls	r2, r3, #29
 80174f8:	d505      	bpl.n	8017506 <__sflush_r+0x46>
 80174fa:	6863      	ldr	r3, [r4, #4]
 80174fc:	1ac0      	subs	r0, r0, r3
 80174fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017500:	b10b      	cbz	r3, 8017506 <__sflush_r+0x46>
 8017502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017504:	1ac0      	subs	r0, r0, r3
 8017506:	2300      	movs	r3, #0
 8017508:	4602      	mov	r2, r0
 801750a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801750c:	6a21      	ldr	r1, [r4, #32]
 801750e:	4628      	mov	r0, r5
 8017510:	47b0      	blx	r6
 8017512:	1c43      	adds	r3, r0, #1
 8017514:	89a3      	ldrh	r3, [r4, #12]
 8017516:	d106      	bne.n	8017526 <__sflush_r+0x66>
 8017518:	6829      	ldr	r1, [r5, #0]
 801751a:	291d      	cmp	r1, #29
 801751c:	d82c      	bhi.n	8017578 <__sflush_r+0xb8>
 801751e:	4a2a      	ldr	r2, [pc, #168]	; (80175c8 <__sflush_r+0x108>)
 8017520:	40ca      	lsrs	r2, r1
 8017522:	07d6      	lsls	r6, r2, #31
 8017524:	d528      	bpl.n	8017578 <__sflush_r+0xb8>
 8017526:	2200      	movs	r2, #0
 8017528:	6062      	str	r2, [r4, #4]
 801752a:	04d9      	lsls	r1, r3, #19
 801752c:	6922      	ldr	r2, [r4, #16]
 801752e:	6022      	str	r2, [r4, #0]
 8017530:	d504      	bpl.n	801753c <__sflush_r+0x7c>
 8017532:	1c42      	adds	r2, r0, #1
 8017534:	d101      	bne.n	801753a <__sflush_r+0x7a>
 8017536:	682b      	ldr	r3, [r5, #0]
 8017538:	b903      	cbnz	r3, 801753c <__sflush_r+0x7c>
 801753a:	6560      	str	r0, [r4, #84]	; 0x54
 801753c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801753e:	602f      	str	r7, [r5, #0]
 8017540:	2900      	cmp	r1, #0
 8017542:	d0ca      	beq.n	80174da <__sflush_r+0x1a>
 8017544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017548:	4299      	cmp	r1, r3
 801754a:	d002      	beq.n	8017552 <__sflush_r+0x92>
 801754c:	4628      	mov	r0, r5
 801754e:	f000 fa11 	bl	8017974 <_free_r>
 8017552:	2000      	movs	r0, #0
 8017554:	6360      	str	r0, [r4, #52]	; 0x34
 8017556:	e7c1      	b.n	80174dc <__sflush_r+0x1c>
 8017558:	6a21      	ldr	r1, [r4, #32]
 801755a:	2301      	movs	r3, #1
 801755c:	4628      	mov	r0, r5
 801755e:	47b0      	blx	r6
 8017560:	1c41      	adds	r1, r0, #1
 8017562:	d1c7      	bne.n	80174f4 <__sflush_r+0x34>
 8017564:	682b      	ldr	r3, [r5, #0]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d0c4      	beq.n	80174f4 <__sflush_r+0x34>
 801756a:	2b1d      	cmp	r3, #29
 801756c:	d001      	beq.n	8017572 <__sflush_r+0xb2>
 801756e:	2b16      	cmp	r3, #22
 8017570:	d101      	bne.n	8017576 <__sflush_r+0xb6>
 8017572:	602f      	str	r7, [r5, #0]
 8017574:	e7b1      	b.n	80174da <__sflush_r+0x1a>
 8017576:	89a3      	ldrh	r3, [r4, #12]
 8017578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801757c:	81a3      	strh	r3, [r4, #12]
 801757e:	e7ad      	b.n	80174dc <__sflush_r+0x1c>
 8017580:	690f      	ldr	r7, [r1, #16]
 8017582:	2f00      	cmp	r7, #0
 8017584:	d0a9      	beq.n	80174da <__sflush_r+0x1a>
 8017586:	0793      	lsls	r3, r2, #30
 8017588:	680e      	ldr	r6, [r1, #0]
 801758a:	bf08      	it	eq
 801758c:	694b      	ldreq	r3, [r1, #20]
 801758e:	600f      	str	r7, [r1, #0]
 8017590:	bf18      	it	ne
 8017592:	2300      	movne	r3, #0
 8017594:	eba6 0807 	sub.w	r8, r6, r7
 8017598:	608b      	str	r3, [r1, #8]
 801759a:	f1b8 0f00 	cmp.w	r8, #0
 801759e:	dd9c      	ble.n	80174da <__sflush_r+0x1a>
 80175a0:	6a21      	ldr	r1, [r4, #32]
 80175a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80175a4:	4643      	mov	r3, r8
 80175a6:	463a      	mov	r2, r7
 80175a8:	4628      	mov	r0, r5
 80175aa:	47b0      	blx	r6
 80175ac:	2800      	cmp	r0, #0
 80175ae:	dc06      	bgt.n	80175be <__sflush_r+0xfe>
 80175b0:	89a3      	ldrh	r3, [r4, #12]
 80175b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175b6:	81a3      	strh	r3, [r4, #12]
 80175b8:	f04f 30ff 	mov.w	r0, #4294967295
 80175bc:	e78e      	b.n	80174dc <__sflush_r+0x1c>
 80175be:	4407      	add	r7, r0
 80175c0:	eba8 0800 	sub.w	r8, r8, r0
 80175c4:	e7e9      	b.n	801759a <__sflush_r+0xda>
 80175c6:	bf00      	nop
 80175c8:	20400001 	.word	0x20400001

080175cc <_fflush_r>:
 80175cc:	b538      	push	{r3, r4, r5, lr}
 80175ce:	690b      	ldr	r3, [r1, #16]
 80175d0:	4605      	mov	r5, r0
 80175d2:	460c      	mov	r4, r1
 80175d4:	b913      	cbnz	r3, 80175dc <_fflush_r+0x10>
 80175d6:	2500      	movs	r5, #0
 80175d8:	4628      	mov	r0, r5
 80175da:	bd38      	pop	{r3, r4, r5, pc}
 80175dc:	b118      	cbz	r0, 80175e6 <_fflush_r+0x1a>
 80175de:	6983      	ldr	r3, [r0, #24]
 80175e0:	b90b      	cbnz	r3, 80175e6 <_fflush_r+0x1a>
 80175e2:	f000 f887 	bl	80176f4 <__sinit>
 80175e6:	4b14      	ldr	r3, [pc, #80]	; (8017638 <_fflush_r+0x6c>)
 80175e8:	429c      	cmp	r4, r3
 80175ea:	d11b      	bne.n	8017624 <_fflush_r+0x58>
 80175ec:	686c      	ldr	r4, [r5, #4]
 80175ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d0ef      	beq.n	80175d6 <_fflush_r+0xa>
 80175f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80175f8:	07d0      	lsls	r0, r2, #31
 80175fa:	d404      	bmi.n	8017606 <_fflush_r+0x3a>
 80175fc:	0599      	lsls	r1, r3, #22
 80175fe:	d402      	bmi.n	8017606 <_fflush_r+0x3a>
 8017600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017602:	f000 f93a 	bl	801787a <__retarget_lock_acquire_recursive>
 8017606:	4628      	mov	r0, r5
 8017608:	4621      	mov	r1, r4
 801760a:	f7ff ff59 	bl	80174c0 <__sflush_r>
 801760e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017610:	07da      	lsls	r2, r3, #31
 8017612:	4605      	mov	r5, r0
 8017614:	d4e0      	bmi.n	80175d8 <_fflush_r+0xc>
 8017616:	89a3      	ldrh	r3, [r4, #12]
 8017618:	059b      	lsls	r3, r3, #22
 801761a:	d4dd      	bmi.n	80175d8 <_fflush_r+0xc>
 801761c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801761e:	f000 f92d 	bl	801787c <__retarget_lock_release_recursive>
 8017622:	e7d9      	b.n	80175d8 <_fflush_r+0xc>
 8017624:	4b05      	ldr	r3, [pc, #20]	; (801763c <_fflush_r+0x70>)
 8017626:	429c      	cmp	r4, r3
 8017628:	d101      	bne.n	801762e <_fflush_r+0x62>
 801762a:	68ac      	ldr	r4, [r5, #8]
 801762c:	e7df      	b.n	80175ee <_fflush_r+0x22>
 801762e:	4b04      	ldr	r3, [pc, #16]	; (8017640 <_fflush_r+0x74>)
 8017630:	429c      	cmp	r4, r3
 8017632:	bf08      	it	eq
 8017634:	68ec      	ldreq	r4, [r5, #12]
 8017636:	e7da      	b.n	80175ee <_fflush_r+0x22>
 8017638:	0801acfc 	.word	0x0801acfc
 801763c:	0801ad1c 	.word	0x0801ad1c
 8017640:	0801acdc 	.word	0x0801acdc

08017644 <std>:
 8017644:	2300      	movs	r3, #0
 8017646:	b510      	push	{r4, lr}
 8017648:	4604      	mov	r4, r0
 801764a:	e9c0 3300 	strd	r3, r3, [r0]
 801764e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017652:	6083      	str	r3, [r0, #8]
 8017654:	8181      	strh	r1, [r0, #12]
 8017656:	6643      	str	r3, [r0, #100]	; 0x64
 8017658:	81c2      	strh	r2, [r0, #14]
 801765a:	6183      	str	r3, [r0, #24]
 801765c:	4619      	mov	r1, r3
 801765e:	2208      	movs	r2, #8
 8017660:	305c      	adds	r0, #92	; 0x5c
 8017662:	f000 f97f 	bl	8017964 <memset>
 8017666:	4b05      	ldr	r3, [pc, #20]	; (801767c <std+0x38>)
 8017668:	6263      	str	r3, [r4, #36]	; 0x24
 801766a:	4b05      	ldr	r3, [pc, #20]	; (8017680 <std+0x3c>)
 801766c:	62a3      	str	r3, [r4, #40]	; 0x28
 801766e:	4b05      	ldr	r3, [pc, #20]	; (8017684 <std+0x40>)
 8017670:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017672:	4b05      	ldr	r3, [pc, #20]	; (8017688 <std+0x44>)
 8017674:	6224      	str	r4, [r4, #32]
 8017676:	6323      	str	r3, [r4, #48]	; 0x30
 8017678:	bd10      	pop	{r4, pc}
 801767a:	bf00      	nop
 801767c:	080183fd 	.word	0x080183fd
 8017680:	0801841f 	.word	0x0801841f
 8017684:	08018457 	.word	0x08018457
 8017688:	0801847b 	.word	0x0801847b

0801768c <_cleanup_r>:
 801768c:	4901      	ldr	r1, [pc, #4]	; (8017694 <_cleanup_r+0x8>)
 801768e:	f000 b8af 	b.w	80177f0 <_fwalk_reent>
 8017692:	bf00      	nop
 8017694:	080175cd 	.word	0x080175cd

08017698 <__sfmoreglue>:
 8017698:	b570      	push	{r4, r5, r6, lr}
 801769a:	1e4a      	subs	r2, r1, #1
 801769c:	2568      	movs	r5, #104	; 0x68
 801769e:	4355      	muls	r5, r2
 80176a0:	460e      	mov	r6, r1
 80176a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80176a6:	f000 f9b5 	bl	8017a14 <_malloc_r>
 80176aa:	4604      	mov	r4, r0
 80176ac:	b140      	cbz	r0, 80176c0 <__sfmoreglue+0x28>
 80176ae:	2100      	movs	r1, #0
 80176b0:	e9c0 1600 	strd	r1, r6, [r0]
 80176b4:	300c      	adds	r0, #12
 80176b6:	60a0      	str	r0, [r4, #8]
 80176b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80176bc:	f000 f952 	bl	8017964 <memset>
 80176c0:	4620      	mov	r0, r4
 80176c2:	bd70      	pop	{r4, r5, r6, pc}

080176c4 <__sfp_lock_acquire>:
 80176c4:	4801      	ldr	r0, [pc, #4]	; (80176cc <__sfp_lock_acquire+0x8>)
 80176c6:	f000 b8d8 	b.w	801787a <__retarget_lock_acquire_recursive>
 80176ca:	bf00      	nop
 80176cc:	200009f4 	.word	0x200009f4

080176d0 <__sfp_lock_release>:
 80176d0:	4801      	ldr	r0, [pc, #4]	; (80176d8 <__sfp_lock_release+0x8>)
 80176d2:	f000 b8d3 	b.w	801787c <__retarget_lock_release_recursive>
 80176d6:	bf00      	nop
 80176d8:	200009f4 	.word	0x200009f4

080176dc <__sinit_lock_acquire>:
 80176dc:	4801      	ldr	r0, [pc, #4]	; (80176e4 <__sinit_lock_acquire+0x8>)
 80176de:	f000 b8cc 	b.w	801787a <__retarget_lock_acquire_recursive>
 80176e2:	bf00      	nop
 80176e4:	200009ef 	.word	0x200009ef

080176e8 <__sinit_lock_release>:
 80176e8:	4801      	ldr	r0, [pc, #4]	; (80176f0 <__sinit_lock_release+0x8>)
 80176ea:	f000 b8c7 	b.w	801787c <__retarget_lock_release_recursive>
 80176ee:	bf00      	nop
 80176f0:	200009ef 	.word	0x200009ef

080176f4 <__sinit>:
 80176f4:	b510      	push	{r4, lr}
 80176f6:	4604      	mov	r4, r0
 80176f8:	f7ff fff0 	bl	80176dc <__sinit_lock_acquire>
 80176fc:	69a3      	ldr	r3, [r4, #24]
 80176fe:	b11b      	cbz	r3, 8017708 <__sinit+0x14>
 8017700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017704:	f7ff bff0 	b.w	80176e8 <__sinit_lock_release>
 8017708:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801770c:	6523      	str	r3, [r4, #80]	; 0x50
 801770e:	4b13      	ldr	r3, [pc, #76]	; (801775c <__sinit+0x68>)
 8017710:	4a13      	ldr	r2, [pc, #76]	; (8017760 <__sinit+0x6c>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	62a2      	str	r2, [r4, #40]	; 0x28
 8017716:	42a3      	cmp	r3, r4
 8017718:	bf04      	itt	eq
 801771a:	2301      	moveq	r3, #1
 801771c:	61a3      	streq	r3, [r4, #24]
 801771e:	4620      	mov	r0, r4
 8017720:	f000 f820 	bl	8017764 <__sfp>
 8017724:	6060      	str	r0, [r4, #4]
 8017726:	4620      	mov	r0, r4
 8017728:	f000 f81c 	bl	8017764 <__sfp>
 801772c:	60a0      	str	r0, [r4, #8]
 801772e:	4620      	mov	r0, r4
 8017730:	f000 f818 	bl	8017764 <__sfp>
 8017734:	2200      	movs	r2, #0
 8017736:	60e0      	str	r0, [r4, #12]
 8017738:	2104      	movs	r1, #4
 801773a:	6860      	ldr	r0, [r4, #4]
 801773c:	f7ff ff82 	bl	8017644 <std>
 8017740:	68a0      	ldr	r0, [r4, #8]
 8017742:	2201      	movs	r2, #1
 8017744:	2109      	movs	r1, #9
 8017746:	f7ff ff7d 	bl	8017644 <std>
 801774a:	68e0      	ldr	r0, [r4, #12]
 801774c:	2202      	movs	r2, #2
 801774e:	2112      	movs	r1, #18
 8017750:	f7ff ff78 	bl	8017644 <std>
 8017754:	2301      	movs	r3, #1
 8017756:	61a3      	str	r3, [r4, #24]
 8017758:	e7d2      	b.n	8017700 <__sinit+0xc>
 801775a:	bf00      	nop
 801775c:	0801ad3c 	.word	0x0801ad3c
 8017760:	0801768d 	.word	0x0801768d

08017764 <__sfp>:
 8017764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017766:	4607      	mov	r7, r0
 8017768:	f7ff ffac 	bl	80176c4 <__sfp_lock_acquire>
 801776c:	4b1e      	ldr	r3, [pc, #120]	; (80177e8 <__sfp+0x84>)
 801776e:	681e      	ldr	r6, [r3, #0]
 8017770:	69b3      	ldr	r3, [r6, #24]
 8017772:	b913      	cbnz	r3, 801777a <__sfp+0x16>
 8017774:	4630      	mov	r0, r6
 8017776:	f7ff ffbd 	bl	80176f4 <__sinit>
 801777a:	3648      	adds	r6, #72	; 0x48
 801777c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017780:	3b01      	subs	r3, #1
 8017782:	d503      	bpl.n	801778c <__sfp+0x28>
 8017784:	6833      	ldr	r3, [r6, #0]
 8017786:	b30b      	cbz	r3, 80177cc <__sfp+0x68>
 8017788:	6836      	ldr	r6, [r6, #0]
 801778a:	e7f7      	b.n	801777c <__sfp+0x18>
 801778c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017790:	b9d5      	cbnz	r5, 80177c8 <__sfp+0x64>
 8017792:	4b16      	ldr	r3, [pc, #88]	; (80177ec <__sfp+0x88>)
 8017794:	60e3      	str	r3, [r4, #12]
 8017796:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801779a:	6665      	str	r5, [r4, #100]	; 0x64
 801779c:	f000 f86c 	bl	8017878 <__retarget_lock_init_recursive>
 80177a0:	f7ff ff96 	bl	80176d0 <__sfp_lock_release>
 80177a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80177a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80177ac:	6025      	str	r5, [r4, #0]
 80177ae:	61a5      	str	r5, [r4, #24]
 80177b0:	2208      	movs	r2, #8
 80177b2:	4629      	mov	r1, r5
 80177b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80177b8:	f000 f8d4 	bl	8017964 <memset>
 80177bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80177c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80177c4:	4620      	mov	r0, r4
 80177c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177c8:	3468      	adds	r4, #104	; 0x68
 80177ca:	e7d9      	b.n	8017780 <__sfp+0x1c>
 80177cc:	2104      	movs	r1, #4
 80177ce:	4638      	mov	r0, r7
 80177d0:	f7ff ff62 	bl	8017698 <__sfmoreglue>
 80177d4:	4604      	mov	r4, r0
 80177d6:	6030      	str	r0, [r6, #0]
 80177d8:	2800      	cmp	r0, #0
 80177da:	d1d5      	bne.n	8017788 <__sfp+0x24>
 80177dc:	f7ff ff78 	bl	80176d0 <__sfp_lock_release>
 80177e0:	230c      	movs	r3, #12
 80177e2:	603b      	str	r3, [r7, #0]
 80177e4:	e7ee      	b.n	80177c4 <__sfp+0x60>
 80177e6:	bf00      	nop
 80177e8:	0801ad3c 	.word	0x0801ad3c
 80177ec:	ffff0001 	.word	0xffff0001

080177f0 <_fwalk_reent>:
 80177f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177f4:	4606      	mov	r6, r0
 80177f6:	4688      	mov	r8, r1
 80177f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80177fc:	2700      	movs	r7, #0
 80177fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017802:	f1b9 0901 	subs.w	r9, r9, #1
 8017806:	d505      	bpl.n	8017814 <_fwalk_reent+0x24>
 8017808:	6824      	ldr	r4, [r4, #0]
 801780a:	2c00      	cmp	r4, #0
 801780c:	d1f7      	bne.n	80177fe <_fwalk_reent+0xe>
 801780e:	4638      	mov	r0, r7
 8017810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017814:	89ab      	ldrh	r3, [r5, #12]
 8017816:	2b01      	cmp	r3, #1
 8017818:	d907      	bls.n	801782a <_fwalk_reent+0x3a>
 801781a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801781e:	3301      	adds	r3, #1
 8017820:	d003      	beq.n	801782a <_fwalk_reent+0x3a>
 8017822:	4629      	mov	r1, r5
 8017824:	4630      	mov	r0, r6
 8017826:	47c0      	blx	r8
 8017828:	4307      	orrs	r7, r0
 801782a:	3568      	adds	r5, #104	; 0x68
 801782c:	e7e9      	b.n	8017802 <_fwalk_reent+0x12>
	...

08017830 <__libc_init_array>:
 8017830:	b570      	push	{r4, r5, r6, lr}
 8017832:	4d0d      	ldr	r5, [pc, #52]	; (8017868 <__libc_init_array+0x38>)
 8017834:	4c0d      	ldr	r4, [pc, #52]	; (801786c <__libc_init_array+0x3c>)
 8017836:	1b64      	subs	r4, r4, r5
 8017838:	10a4      	asrs	r4, r4, #2
 801783a:	2600      	movs	r6, #0
 801783c:	42a6      	cmp	r6, r4
 801783e:	d109      	bne.n	8017854 <__libc_init_array+0x24>
 8017840:	4d0b      	ldr	r5, [pc, #44]	; (8017870 <__libc_init_array+0x40>)
 8017842:	4c0c      	ldr	r4, [pc, #48]	; (8017874 <__libc_init_array+0x44>)
 8017844:	f002 fcfc 	bl	801a240 <_init>
 8017848:	1b64      	subs	r4, r4, r5
 801784a:	10a4      	asrs	r4, r4, #2
 801784c:	2600      	movs	r6, #0
 801784e:	42a6      	cmp	r6, r4
 8017850:	d105      	bne.n	801785e <__libc_init_array+0x2e>
 8017852:	bd70      	pop	{r4, r5, r6, pc}
 8017854:	f855 3b04 	ldr.w	r3, [r5], #4
 8017858:	4798      	blx	r3
 801785a:	3601      	adds	r6, #1
 801785c:	e7ee      	b.n	801783c <__libc_init_array+0xc>
 801785e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017862:	4798      	blx	r3
 8017864:	3601      	adds	r6, #1
 8017866:	e7f2      	b.n	801784e <__libc_init_array+0x1e>
 8017868:	0801b0c4 	.word	0x0801b0c4
 801786c:	0801b0c4 	.word	0x0801b0c4
 8017870:	0801b0c4 	.word	0x0801b0c4
 8017874:	0801b0c8 	.word	0x0801b0c8

08017878 <__retarget_lock_init_recursive>:
 8017878:	4770      	bx	lr

0801787a <__retarget_lock_acquire_recursive>:
 801787a:	4770      	bx	lr

0801787c <__retarget_lock_release_recursive>:
 801787c:	4770      	bx	lr

0801787e <__swhatbuf_r>:
 801787e:	b570      	push	{r4, r5, r6, lr}
 8017880:	460e      	mov	r6, r1
 8017882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017886:	2900      	cmp	r1, #0
 8017888:	b096      	sub	sp, #88	; 0x58
 801788a:	4614      	mov	r4, r2
 801788c:	461d      	mov	r5, r3
 801788e:	da07      	bge.n	80178a0 <__swhatbuf_r+0x22>
 8017890:	2300      	movs	r3, #0
 8017892:	602b      	str	r3, [r5, #0]
 8017894:	89b3      	ldrh	r3, [r6, #12]
 8017896:	061a      	lsls	r2, r3, #24
 8017898:	d410      	bmi.n	80178bc <__swhatbuf_r+0x3e>
 801789a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801789e:	e00e      	b.n	80178be <__swhatbuf_r+0x40>
 80178a0:	466a      	mov	r2, sp
 80178a2:	f001 fc89 	bl	80191b8 <_fstat_r>
 80178a6:	2800      	cmp	r0, #0
 80178a8:	dbf2      	blt.n	8017890 <__swhatbuf_r+0x12>
 80178aa:	9a01      	ldr	r2, [sp, #4]
 80178ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80178b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80178b4:	425a      	negs	r2, r3
 80178b6:	415a      	adcs	r2, r3
 80178b8:	602a      	str	r2, [r5, #0]
 80178ba:	e7ee      	b.n	801789a <__swhatbuf_r+0x1c>
 80178bc:	2340      	movs	r3, #64	; 0x40
 80178be:	2000      	movs	r0, #0
 80178c0:	6023      	str	r3, [r4, #0]
 80178c2:	b016      	add	sp, #88	; 0x58
 80178c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080178c8 <__smakebuf_r>:
 80178c8:	898b      	ldrh	r3, [r1, #12]
 80178ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178cc:	079d      	lsls	r5, r3, #30
 80178ce:	4606      	mov	r6, r0
 80178d0:	460c      	mov	r4, r1
 80178d2:	d507      	bpl.n	80178e4 <__smakebuf_r+0x1c>
 80178d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80178d8:	6023      	str	r3, [r4, #0]
 80178da:	6123      	str	r3, [r4, #16]
 80178dc:	2301      	movs	r3, #1
 80178de:	6163      	str	r3, [r4, #20]
 80178e0:	b002      	add	sp, #8
 80178e2:	bd70      	pop	{r4, r5, r6, pc}
 80178e4:	ab01      	add	r3, sp, #4
 80178e6:	466a      	mov	r2, sp
 80178e8:	f7ff ffc9 	bl	801787e <__swhatbuf_r>
 80178ec:	9900      	ldr	r1, [sp, #0]
 80178ee:	4605      	mov	r5, r0
 80178f0:	4630      	mov	r0, r6
 80178f2:	f000 f88f 	bl	8017a14 <_malloc_r>
 80178f6:	b948      	cbnz	r0, 801790c <__smakebuf_r+0x44>
 80178f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178fc:	059a      	lsls	r2, r3, #22
 80178fe:	d4ef      	bmi.n	80178e0 <__smakebuf_r+0x18>
 8017900:	f023 0303 	bic.w	r3, r3, #3
 8017904:	f043 0302 	orr.w	r3, r3, #2
 8017908:	81a3      	strh	r3, [r4, #12]
 801790a:	e7e3      	b.n	80178d4 <__smakebuf_r+0xc>
 801790c:	4b0d      	ldr	r3, [pc, #52]	; (8017944 <__smakebuf_r+0x7c>)
 801790e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017910:	89a3      	ldrh	r3, [r4, #12]
 8017912:	6020      	str	r0, [r4, #0]
 8017914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017918:	81a3      	strh	r3, [r4, #12]
 801791a:	9b00      	ldr	r3, [sp, #0]
 801791c:	6163      	str	r3, [r4, #20]
 801791e:	9b01      	ldr	r3, [sp, #4]
 8017920:	6120      	str	r0, [r4, #16]
 8017922:	b15b      	cbz	r3, 801793c <__smakebuf_r+0x74>
 8017924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017928:	4630      	mov	r0, r6
 801792a:	f001 fc57 	bl	80191dc <_isatty_r>
 801792e:	b128      	cbz	r0, 801793c <__smakebuf_r+0x74>
 8017930:	89a3      	ldrh	r3, [r4, #12]
 8017932:	f023 0303 	bic.w	r3, r3, #3
 8017936:	f043 0301 	orr.w	r3, r3, #1
 801793a:	81a3      	strh	r3, [r4, #12]
 801793c:	89a0      	ldrh	r0, [r4, #12]
 801793e:	4305      	orrs	r5, r0
 8017940:	81a5      	strh	r5, [r4, #12]
 8017942:	e7cd      	b.n	80178e0 <__smakebuf_r+0x18>
 8017944:	0801768d 	.word	0x0801768d

08017948 <memcpy>:
 8017948:	440a      	add	r2, r1
 801794a:	4291      	cmp	r1, r2
 801794c:	f100 33ff 	add.w	r3, r0, #4294967295
 8017950:	d100      	bne.n	8017954 <memcpy+0xc>
 8017952:	4770      	bx	lr
 8017954:	b510      	push	{r4, lr}
 8017956:	f811 4b01 	ldrb.w	r4, [r1], #1
 801795a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801795e:	4291      	cmp	r1, r2
 8017960:	d1f9      	bne.n	8017956 <memcpy+0xe>
 8017962:	bd10      	pop	{r4, pc}

08017964 <memset>:
 8017964:	4402      	add	r2, r0
 8017966:	4603      	mov	r3, r0
 8017968:	4293      	cmp	r3, r2
 801796a:	d100      	bne.n	801796e <memset+0xa>
 801796c:	4770      	bx	lr
 801796e:	f803 1b01 	strb.w	r1, [r3], #1
 8017972:	e7f9      	b.n	8017968 <memset+0x4>

08017974 <_free_r>:
 8017974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017976:	2900      	cmp	r1, #0
 8017978:	d048      	beq.n	8017a0c <_free_r+0x98>
 801797a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801797e:	9001      	str	r0, [sp, #4]
 8017980:	2b00      	cmp	r3, #0
 8017982:	f1a1 0404 	sub.w	r4, r1, #4
 8017986:	bfb8      	it	lt
 8017988:	18e4      	addlt	r4, r4, r3
 801798a:	f001 fc55 	bl	8019238 <__malloc_lock>
 801798e:	4a20      	ldr	r2, [pc, #128]	; (8017a10 <_free_r+0x9c>)
 8017990:	9801      	ldr	r0, [sp, #4]
 8017992:	6813      	ldr	r3, [r2, #0]
 8017994:	4615      	mov	r5, r2
 8017996:	b933      	cbnz	r3, 80179a6 <_free_r+0x32>
 8017998:	6063      	str	r3, [r4, #4]
 801799a:	6014      	str	r4, [r2, #0]
 801799c:	b003      	add	sp, #12
 801799e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80179a2:	f001 bc4f 	b.w	8019244 <__malloc_unlock>
 80179a6:	42a3      	cmp	r3, r4
 80179a8:	d90b      	bls.n	80179c2 <_free_r+0x4e>
 80179aa:	6821      	ldr	r1, [r4, #0]
 80179ac:	1862      	adds	r2, r4, r1
 80179ae:	4293      	cmp	r3, r2
 80179b0:	bf04      	itt	eq
 80179b2:	681a      	ldreq	r2, [r3, #0]
 80179b4:	685b      	ldreq	r3, [r3, #4]
 80179b6:	6063      	str	r3, [r4, #4]
 80179b8:	bf04      	itt	eq
 80179ba:	1852      	addeq	r2, r2, r1
 80179bc:	6022      	streq	r2, [r4, #0]
 80179be:	602c      	str	r4, [r5, #0]
 80179c0:	e7ec      	b.n	801799c <_free_r+0x28>
 80179c2:	461a      	mov	r2, r3
 80179c4:	685b      	ldr	r3, [r3, #4]
 80179c6:	b10b      	cbz	r3, 80179cc <_free_r+0x58>
 80179c8:	42a3      	cmp	r3, r4
 80179ca:	d9fa      	bls.n	80179c2 <_free_r+0x4e>
 80179cc:	6811      	ldr	r1, [r2, #0]
 80179ce:	1855      	adds	r5, r2, r1
 80179d0:	42a5      	cmp	r5, r4
 80179d2:	d10b      	bne.n	80179ec <_free_r+0x78>
 80179d4:	6824      	ldr	r4, [r4, #0]
 80179d6:	4421      	add	r1, r4
 80179d8:	1854      	adds	r4, r2, r1
 80179da:	42a3      	cmp	r3, r4
 80179dc:	6011      	str	r1, [r2, #0]
 80179de:	d1dd      	bne.n	801799c <_free_r+0x28>
 80179e0:	681c      	ldr	r4, [r3, #0]
 80179e2:	685b      	ldr	r3, [r3, #4]
 80179e4:	6053      	str	r3, [r2, #4]
 80179e6:	4421      	add	r1, r4
 80179e8:	6011      	str	r1, [r2, #0]
 80179ea:	e7d7      	b.n	801799c <_free_r+0x28>
 80179ec:	d902      	bls.n	80179f4 <_free_r+0x80>
 80179ee:	230c      	movs	r3, #12
 80179f0:	6003      	str	r3, [r0, #0]
 80179f2:	e7d3      	b.n	801799c <_free_r+0x28>
 80179f4:	6825      	ldr	r5, [r4, #0]
 80179f6:	1961      	adds	r1, r4, r5
 80179f8:	428b      	cmp	r3, r1
 80179fa:	bf04      	itt	eq
 80179fc:	6819      	ldreq	r1, [r3, #0]
 80179fe:	685b      	ldreq	r3, [r3, #4]
 8017a00:	6063      	str	r3, [r4, #4]
 8017a02:	bf04      	itt	eq
 8017a04:	1949      	addeq	r1, r1, r5
 8017a06:	6021      	streq	r1, [r4, #0]
 8017a08:	6054      	str	r4, [r2, #4]
 8017a0a:	e7c7      	b.n	801799c <_free_r+0x28>
 8017a0c:	b003      	add	sp, #12
 8017a0e:	bd30      	pop	{r4, r5, pc}
 8017a10:	200002d4 	.word	0x200002d4

08017a14 <_malloc_r>:
 8017a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a16:	1ccd      	adds	r5, r1, #3
 8017a18:	f025 0503 	bic.w	r5, r5, #3
 8017a1c:	3508      	adds	r5, #8
 8017a1e:	2d0c      	cmp	r5, #12
 8017a20:	bf38      	it	cc
 8017a22:	250c      	movcc	r5, #12
 8017a24:	2d00      	cmp	r5, #0
 8017a26:	4606      	mov	r6, r0
 8017a28:	db01      	blt.n	8017a2e <_malloc_r+0x1a>
 8017a2a:	42a9      	cmp	r1, r5
 8017a2c:	d903      	bls.n	8017a36 <_malloc_r+0x22>
 8017a2e:	230c      	movs	r3, #12
 8017a30:	6033      	str	r3, [r6, #0]
 8017a32:	2000      	movs	r0, #0
 8017a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a36:	f001 fbff 	bl	8019238 <__malloc_lock>
 8017a3a:	4921      	ldr	r1, [pc, #132]	; (8017ac0 <_malloc_r+0xac>)
 8017a3c:	680a      	ldr	r2, [r1, #0]
 8017a3e:	4614      	mov	r4, r2
 8017a40:	b99c      	cbnz	r4, 8017a6a <_malloc_r+0x56>
 8017a42:	4f20      	ldr	r7, [pc, #128]	; (8017ac4 <_malloc_r+0xb0>)
 8017a44:	683b      	ldr	r3, [r7, #0]
 8017a46:	b923      	cbnz	r3, 8017a52 <_malloc_r+0x3e>
 8017a48:	4621      	mov	r1, r4
 8017a4a:	4630      	mov	r0, r6
 8017a4c:	f000 fca6 	bl	801839c <_sbrk_r>
 8017a50:	6038      	str	r0, [r7, #0]
 8017a52:	4629      	mov	r1, r5
 8017a54:	4630      	mov	r0, r6
 8017a56:	f000 fca1 	bl	801839c <_sbrk_r>
 8017a5a:	1c43      	adds	r3, r0, #1
 8017a5c:	d123      	bne.n	8017aa6 <_malloc_r+0x92>
 8017a5e:	230c      	movs	r3, #12
 8017a60:	6033      	str	r3, [r6, #0]
 8017a62:	4630      	mov	r0, r6
 8017a64:	f001 fbee 	bl	8019244 <__malloc_unlock>
 8017a68:	e7e3      	b.n	8017a32 <_malloc_r+0x1e>
 8017a6a:	6823      	ldr	r3, [r4, #0]
 8017a6c:	1b5b      	subs	r3, r3, r5
 8017a6e:	d417      	bmi.n	8017aa0 <_malloc_r+0x8c>
 8017a70:	2b0b      	cmp	r3, #11
 8017a72:	d903      	bls.n	8017a7c <_malloc_r+0x68>
 8017a74:	6023      	str	r3, [r4, #0]
 8017a76:	441c      	add	r4, r3
 8017a78:	6025      	str	r5, [r4, #0]
 8017a7a:	e004      	b.n	8017a86 <_malloc_r+0x72>
 8017a7c:	6863      	ldr	r3, [r4, #4]
 8017a7e:	42a2      	cmp	r2, r4
 8017a80:	bf0c      	ite	eq
 8017a82:	600b      	streq	r3, [r1, #0]
 8017a84:	6053      	strne	r3, [r2, #4]
 8017a86:	4630      	mov	r0, r6
 8017a88:	f001 fbdc 	bl	8019244 <__malloc_unlock>
 8017a8c:	f104 000b 	add.w	r0, r4, #11
 8017a90:	1d23      	adds	r3, r4, #4
 8017a92:	f020 0007 	bic.w	r0, r0, #7
 8017a96:	1ac2      	subs	r2, r0, r3
 8017a98:	d0cc      	beq.n	8017a34 <_malloc_r+0x20>
 8017a9a:	1a1b      	subs	r3, r3, r0
 8017a9c:	50a3      	str	r3, [r4, r2]
 8017a9e:	e7c9      	b.n	8017a34 <_malloc_r+0x20>
 8017aa0:	4622      	mov	r2, r4
 8017aa2:	6864      	ldr	r4, [r4, #4]
 8017aa4:	e7cc      	b.n	8017a40 <_malloc_r+0x2c>
 8017aa6:	1cc4      	adds	r4, r0, #3
 8017aa8:	f024 0403 	bic.w	r4, r4, #3
 8017aac:	42a0      	cmp	r0, r4
 8017aae:	d0e3      	beq.n	8017a78 <_malloc_r+0x64>
 8017ab0:	1a21      	subs	r1, r4, r0
 8017ab2:	4630      	mov	r0, r6
 8017ab4:	f000 fc72 	bl	801839c <_sbrk_r>
 8017ab8:	3001      	adds	r0, #1
 8017aba:	d1dd      	bne.n	8017a78 <_malloc_r+0x64>
 8017abc:	e7cf      	b.n	8017a5e <_malloc_r+0x4a>
 8017abe:	bf00      	nop
 8017ac0:	200002d4 	.word	0x200002d4
 8017ac4:	200002d8 	.word	0x200002d8

08017ac8 <__cvt>:
 8017ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017acc:	ec55 4b10 	vmov	r4, r5, d0
 8017ad0:	2d00      	cmp	r5, #0
 8017ad2:	460e      	mov	r6, r1
 8017ad4:	4619      	mov	r1, r3
 8017ad6:	462b      	mov	r3, r5
 8017ad8:	bfbb      	ittet	lt
 8017ada:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017ade:	461d      	movlt	r5, r3
 8017ae0:	2300      	movge	r3, #0
 8017ae2:	232d      	movlt	r3, #45	; 0x2d
 8017ae4:	700b      	strb	r3, [r1, #0]
 8017ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ae8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017aec:	4691      	mov	r9, r2
 8017aee:	f023 0820 	bic.w	r8, r3, #32
 8017af2:	bfbc      	itt	lt
 8017af4:	4622      	movlt	r2, r4
 8017af6:	4614      	movlt	r4, r2
 8017af8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017afc:	d005      	beq.n	8017b0a <__cvt+0x42>
 8017afe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017b02:	d100      	bne.n	8017b06 <__cvt+0x3e>
 8017b04:	3601      	adds	r6, #1
 8017b06:	2102      	movs	r1, #2
 8017b08:	e000      	b.n	8017b0c <__cvt+0x44>
 8017b0a:	2103      	movs	r1, #3
 8017b0c:	ab03      	add	r3, sp, #12
 8017b0e:	9301      	str	r3, [sp, #4]
 8017b10:	ab02      	add	r3, sp, #8
 8017b12:	9300      	str	r3, [sp, #0]
 8017b14:	ec45 4b10 	vmov	d0, r4, r5
 8017b18:	4653      	mov	r3, sl
 8017b1a:	4632      	mov	r2, r6
 8017b1c:	f000 fd60 	bl	80185e0 <_dtoa_r>
 8017b20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017b24:	4607      	mov	r7, r0
 8017b26:	d102      	bne.n	8017b2e <__cvt+0x66>
 8017b28:	f019 0f01 	tst.w	r9, #1
 8017b2c:	d022      	beq.n	8017b74 <__cvt+0xac>
 8017b2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017b32:	eb07 0906 	add.w	r9, r7, r6
 8017b36:	d110      	bne.n	8017b5a <__cvt+0x92>
 8017b38:	783b      	ldrb	r3, [r7, #0]
 8017b3a:	2b30      	cmp	r3, #48	; 0x30
 8017b3c:	d10a      	bne.n	8017b54 <__cvt+0x8c>
 8017b3e:	2200      	movs	r2, #0
 8017b40:	2300      	movs	r3, #0
 8017b42:	4620      	mov	r0, r4
 8017b44:	4629      	mov	r1, r5
 8017b46:	f7e8 ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b4a:	b918      	cbnz	r0, 8017b54 <__cvt+0x8c>
 8017b4c:	f1c6 0601 	rsb	r6, r6, #1
 8017b50:	f8ca 6000 	str.w	r6, [sl]
 8017b54:	f8da 3000 	ldr.w	r3, [sl]
 8017b58:	4499      	add	r9, r3
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	4620      	mov	r0, r4
 8017b60:	4629      	mov	r1, r5
 8017b62:	f7e8 ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b66:	b108      	cbz	r0, 8017b6c <__cvt+0xa4>
 8017b68:	f8cd 900c 	str.w	r9, [sp, #12]
 8017b6c:	2230      	movs	r2, #48	; 0x30
 8017b6e:	9b03      	ldr	r3, [sp, #12]
 8017b70:	454b      	cmp	r3, r9
 8017b72:	d307      	bcc.n	8017b84 <__cvt+0xbc>
 8017b74:	9b03      	ldr	r3, [sp, #12]
 8017b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017b78:	1bdb      	subs	r3, r3, r7
 8017b7a:	4638      	mov	r0, r7
 8017b7c:	6013      	str	r3, [r2, #0]
 8017b7e:	b004      	add	sp, #16
 8017b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b84:	1c59      	adds	r1, r3, #1
 8017b86:	9103      	str	r1, [sp, #12]
 8017b88:	701a      	strb	r2, [r3, #0]
 8017b8a:	e7f0      	b.n	8017b6e <__cvt+0xa6>

08017b8c <__exponent>:
 8017b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b8e:	4603      	mov	r3, r0
 8017b90:	2900      	cmp	r1, #0
 8017b92:	bfb8      	it	lt
 8017b94:	4249      	neglt	r1, r1
 8017b96:	f803 2b02 	strb.w	r2, [r3], #2
 8017b9a:	bfb4      	ite	lt
 8017b9c:	222d      	movlt	r2, #45	; 0x2d
 8017b9e:	222b      	movge	r2, #43	; 0x2b
 8017ba0:	2909      	cmp	r1, #9
 8017ba2:	7042      	strb	r2, [r0, #1]
 8017ba4:	dd2a      	ble.n	8017bfc <__exponent+0x70>
 8017ba6:	f10d 0407 	add.w	r4, sp, #7
 8017baa:	46a4      	mov	ip, r4
 8017bac:	270a      	movs	r7, #10
 8017bae:	46a6      	mov	lr, r4
 8017bb0:	460a      	mov	r2, r1
 8017bb2:	fb91 f6f7 	sdiv	r6, r1, r7
 8017bb6:	fb07 1516 	mls	r5, r7, r6, r1
 8017bba:	3530      	adds	r5, #48	; 0x30
 8017bbc:	2a63      	cmp	r2, #99	; 0x63
 8017bbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8017bc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017bc6:	4631      	mov	r1, r6
 8017bc8:	dcf1      	bgt.n	8017bae <__exponent+0x22>
 8017bca:	3130      	adds	r1, #48	; 0x30
 8017bcc:	f1ae 0502 	sub.w	r5, lr, #2
 8017bd0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017bd4:	1c44      	adds	r4, r0, #1
 8017bd6:	4629      	mov	r1, r5
 8017bd8:	4561      	cmp	r1, ip
 8017bda:	d30a      	bcc.n	8017bf2 <__exponent+0x66>
 8017bdc:	f10d 0209 	add.w	r2, sp, #9
 8017be0:	eba2 020e 	sub.w	r2, r2, lr
 8017be4:	4565      	cmp	r5, ip
 8017be6:	bf88      	it	hi
 8017be8:	2200      	movhi	r2, #0
 8017bea:	4413      	add	r3, r2
 8017bec:	1a18      	subs	r0, r3, r0
 8017bee:	b003      	add	sp, #12
 8017bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bf6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017bfa:	e7ed      	b.n	8017bd8 <__exponent+0x4c>
 8017bfc:	2330      	movs	r3, #48	; 0x30
 8017bfe:	3130      	adds	r1, #48	; 0x30
 8017c00:	7083      	strb	r3, [r0, #2]
 8017c02:	70c1      	strb	r1, [r0, #3]
 8017c04:	1d03      	adds	r3, r0, #4
 8017c06:	e7f1      	b.n	8017bec <__exponent+0x60>

08017c08 <_printf_float>:
 8017c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c0c:	ed2d 8b02 	vpush	{d8}
 8017c10:	b08d      	sub	sp, #52	; 0x34
 8017c12:	460c      	mov	r4, r1
 8017c14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017c18:	4616      	mov	r6, r2
 8017c1a:	461f      	mov	r7, r3
 8017c1c:	4605      	mov	r5, r0
 8017c1e:	f001 faed 	bl	80191fc <_localeconv_r>
 8017c22:	f8d0 a000 	ldr.w	sl, [r0]
 8017c26:	4650      	mov	r0, sl
 8017c28:	f7e8 fad2 	bl	80001d0 <strlen>
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8017c30:	6823      	ldr	r3, [r4, #0]
 8017c32:	9305      	str	r3, [sp, #20]
 8017c34:	f8d8 3000 	ldr.w	r3, [r8]
 8017c38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017c3c:	3307      	adds	r3, #7
 8017c3e:	f023 0307 	bic.w	r3, r3, #7
 8017c42:	f103 0208 	add.w	r2, r3, #8
 8017c46:	f8c8 2000 	str.w	r2, [r8]
 8017c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017c52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017c56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017c5a:	9307      	str	r3, [sp, #28]
 8017c5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8017c60:	ee08 0a10 	vmov	s16, r0
 8017c64:	4b9f      	ldr	r3, [pc, #636]	; (8017ee4 <_printf_float+0x2dc>)
 8017c66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c6e:	f7e8 ff5d 	bl	8000b2c <__aeabi_dcmpun>
 8017c72:	bb88      	cbnz	r0, 8017cd8 <_printf_float+0xd0>
 8017c74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017c78:	4b9a      	ldr	r3, [pc, #616]	; (8017ee4 <_printf_float+0x2dc>)
 8017c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c7e:	f7e8 ff37 	bl	8000af0 <__aeabi_dcmple>
 8017c82:	bb48      	cbnz	r0, 8017cd8 <_printf_float+0xd0>
 8017c84:	2200      	movs	r2, #0
 8017c86:	2300      	movs	r3, #0
 8017c88:	4640      	mov	r0, r8
 8017c8a:	4649      	mov	r1, r9
 8017c8c:	f7e8 ff26 	bl	8000adc <__aeabi_dcmplt>
 8017c90:	b110      	cbz	r0, 8017c98 <_printf_float+0x90>
 8017c92:	232d      	movs	r3, #45	; 0x2d
 8017c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c98:	4b93      	ldr	r3, [pc, #588]	; (8017ee8 <_printf_float+0x2e0>)
 8017c9a:	4894      	ldr	r0, [pc, #592]	; (8017eec <_printf_float+0x2e4>)
 8017c9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017ca0:	bf94      	ite	ls
 8017ca2:	4698      	movls	r8, r3
 8017ca4:	4680      	movhi	r8, r0
 8017ca6:	2303      	movs	r3, #3
 8017ca8:	6123      	str	r3, [r4, #16]
 8017caa:	9b05      	ldr	r3, [sp, #20]
 8017cac:	f023 0204 	bic.w	r2, r3, #4
 8017cb0:	6022      	str	r2, [r4, #0]
 8017cb2:	f04f 0900 	mov.w	r9, #0
 8017cb6:	9700      	str	r7, [sp, #0]
 8017cb8:	4633      	mov	r3, r6
 8017cba:	aa0b      	add	r2, sp, #44	; 0x2c
 8017cbc:	4621      	mov	r1, r4
 8017cbe:	4628      	mov	r0, r5
 8017cc0:	f000 f9d8 	bl	8018074 <_printf_common>
 8017cc4:	3001      	adds	r0, #1
 8017cc6:	f040 8090 	bne.w	8017dea <_printf_float+0x1e2>
 8017cca:	f04f 30ff 	mov.w	r0, #4294967295
 8017cce:	b00d      	add	sp, #52	; 0x34
 8017cd0:	ecbd 8b02 	vpop	{d8}
 8017cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cd8:	4642      	mov	r2, r8
 8017cda:	464b      	mov	r3, r9
 8017cdc:	4640      	mov	r0, r8
 8017cde:	4649      	mov	r1, r9
 8017ce0:	f7e8 ff24 	bl	8000b2c <__aeabi_dcmpun>
 8017ce4:	b140      	cbz	r0, 8017cf8 <_printf_float+0xf0>
 8017ce6:	464b      	mov	r3, r9
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	bfbc      	itt	lt
 8017cec:	232d      	movlt	r3, #45	; 0x2d
 8017cee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017cf2:	487f      	ldr	r0, [pc, #508]	; (8017ef0 <_printf_float+0x2e8>)
 8017cf4:	4b7f      	ldr	r3, [pc, #508]	; (8017ef4 <_printf_float+0x2ec>)
 8017cf6:	e7d1      	b.n	8017c9c <_printf_float+0x94>
 8017cf8:	6863      	ldr	r3, [r4, #4]
 8017cfa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017cfe:	9206      	str	r2, [sp, #24]
 8017d00:	1c5a      	adds	r2, r3, #1
 8017d02:	d13f      	bne.n	8017d84 <_printf_float+0x17c>
 8017d04:	2306      	movs	r3, #6
 8017d06:	6063      	str	r3, [r4, #4]
 8017d08:	9b05      	ldr	r3, [sp, #20]
 8017d0a:	6861      	ldr	r1, [r4, #4]
 8017d0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017d10:	2300      	movs	r3, #0
 8017d12:	9303      	str	r3, [sp, #12]
 8017d14:	ab0a      	add	r3, sp, #40	; 0x28
 8017d16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017d1a:	ab09      	add	r3, sp, #36	; 0x24
 8017d1c:	ec49 8b10 	vmov	d0, r8, r9
 8017d20:	9300      	str	r3, [sp, #0]
 8017d22:	6022      	str	r2, [r4, #0]
 8017d24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017d28:	4628      	mov	r0, r5
 8017d2a:	f7ff fecd 	bl	8017ac8 <__cvt>
 8017d2e:	9b06      	ldr	r3, [sp, #24]
 8017d30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017d32:	2b47      	cmp	r3, #71	; 0x47
 8017d34:	4680      	mov	r8, r0
 8017d36:	d108      	bne.n	8017d4a <_printf_float+0x142>
 8017d38:	1cc8      	adds	r0, r1, #3
 8017d3a:	db02      	blt.n	8017d42 <_printf_float+0x13a>
 8017d3c:	6863      	ldr	r3, [r4, #4]
 8017d3e:	4299      	cmp	r1, r3
 8017d40:	dd41      	ble.n	8017dc6 <_printf_float+0x1be>
 8017d42:	f1ab 0b02 	sub.w	fp, fp, #2
 8017d46:	fa5f fb8b 	uxtb.w	fp, fp
 8017d4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017d4e:	d820      	bhi.n	8017d92 <_printf_float+0x18a>
 8017d50:	3901      	subs	r1, #1
 8017d52:	465a      	mov	r2, fp
 8017d54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017d58:	9109      	str	r1, [sp, #36]	; 0x24
 8017d5a:	f7ff ff17 	bl	8017b8c <__exponent>
 8017d5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d60:	1813      	adds	r3, r2, r0
 8017d62:	2a01      	cmp	r2, #1
 8017d64:	4681      	mov	r9, r0
 8017d66:	6123      	str	r3, [r4, #16]
 8017d68:	dc02      	bgt.n	8017d70 <_printf_float+0x168>
 8017d6a:	6822      	ldr	r2, [r4, #0]
 8017d6c:	07d2      	lsls	r2, r2, #31
 8017d6e:	d501      	bpl.n	8017d74 <_printf_float+0x16c>
 8017d70:	3301      	adds	r3, #1
 8017d72:	6123      	str	r3, [r4, #16]
 8017d74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d09c      	beq.n	8017cb6 <_printf_float+0xae>
 8017d7c:	232d      	movs	r3, #45	; 0x2d
 8017d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d82:	e798      	b.n	8017cb6 <_printf_float+0xae>
 8017d84:	9a06      	ldr	r2, [sp, #24]
 8017d86:	2a47      	cmp	r2, #71	; 0x47
 8017d88:	d1be      	bne.n	8017d08 <_printf_float+0x100>
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d1bc      	bne.n	8017d08 <_printf_float+0x100>
 8017d8e:	2301      	movs	r3, #1
 8017d90:	e7b9      	b.n	8017d06 <_printf_float+0xfe>
 8017d92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017d96:	d118      	bne.n	8017dca <_printf_float+0x1c2>
 8017d98:	2900      	cmp	r1, #0
 8017d9a:	6863      	ldr	r3, [r4, #4]
 8017d9c:	dd0b      	ble.n	8017db6 <_printf_float+0x1ae>
 8017d9e:	6121      	str	r1, [r4, #16]
 8017da0:	b913      	cbnz	r3, 8017da8 <_printf_float+0x1a0>
 8017da2:	6822      	ldr	r2, [r4, #0]
 8017da4:	07d0      	lsls	r0, r2, #31
 8017da6:	d502      	bpl.n	8017dae <_printf_float+0x1a6>
 8017da8:	3301      	adds	r3, #1
 8017daa:	440b      	add	r3, r1
 8017dac:	6123      	str	r3, [r4, #16]
 8017dae:	65a1      	str	r1, [r4, #88]	; 0x58
 8017db0:	f04f 0900 	mov.w	r9, #0
 8017db4:	e7de      	b.n	8017d74 <_printf_float+0x16c>
 8017db6:	b913      	cbnz	r3, 8017dbe <_printf_float+0x1b6>
 8017db8:	6822      	ldr	r2, [r4, #0]
 8017dba:	07d2      	lsls	r2, r2, #31
 8017dbc:	d501      	bpl.n	8017dc2 <_printf_float+0x1ba>
 8017dbe:	3302      	adds	r3, #2
 8017dc0:	e7f4      	b.n	8017dac <_printf_float+0x1a4>
 8017dc2:	2301      	movs	r3, #1
 8017dc4:	e7f2      	b.n	8017dac <_printf_float+0x1a4>
 8017dc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017dcc:	4299      	cmp	r1, r3
 8017dce:	db05      	blt.n	8017ddc <_printf_float+0x1d4>
 8017dd0:	6823      	ldr	r3, [r4, #0]
 8017dd2:	6121      	str	r1, [r4, #16]
 8017dd4:	07d8      	lsls	r0, r3, #31
 8017dd6:	d5ea      	bpl.n	8017dae <_printf_float+0x1a6>
 8017dd8:	1c4b      	adds	r3, r1, #1
 8017dda:	e7e7      	b.n	8017dac <_printf_float+0x1a4>
 8017ddc:	2900      	cmp	r1, #0
 8017dde:	bfd4      	ite	le
 8017de0:	f1c1 0202 	rsble	r2, r1, #2
 8017de4:	2201      	movgt	r2, #1
 8017de6:	4413      	add	r3, r2
 8017de8:	e7e0      	b.n	8017dac <_printf_float+0x1a4>
 8017dea:	6823      	ldr	r3, [r4, #0]
 8017dec:	055a      	lsls	r2, r3, #21
 8017dee:	d407      	bmi.n	8017e00 <_printf_float+0x1f8>
 8017df0:	6923      	ldr	r3, [r4, #16]
 8017df2:	4642      	mov	r2, r8
 8017df4:	4631      	mov	r1, r6
 8017df6:	4628      	mov	r0, r5
 8017df8:	47b8      	blx	r7
 8017dfa:	3001      	adds	r0, #1
 8017dfc:	d12c      	bne.n	8017e58 <_printf_float+0x250>
 8017dfe:	e764      	b.n	8017cca <_printf_float+0xc2>
 8017e00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017e04:	f240 80e0 	bls.w	8017fc8 <_printf_float+0x3c0>
 8017e08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	2300      	movs	r3, #0
 8017e10:	f7e8 fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e14:	2800      	cmp	r0, #0
 8017e16:	d034      	beq.n	8017e82 <_printf_float+0x27a>
 8017e18:	4a37      	ldr	r2, [pc, #220]	; (8017ef8 <_printf_float+0x2f0>)
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	4631      	mov	r1, r6
 8017e1e:	4628      	mov	r0, r5
 8017e20:	47b8      	blx	r7
 8017e22:	3001      	adds	r0, #1
 8017e24:	f43f af51 	beq.w	8017cca <_printf_float+0xc2>
 8017e28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017e2c:	429a      	cmp	r2, r3
 8017e2e:	db02      	blt.n	8017e36 <_printf_float+0x22e>
 8017e30:	6823      	ldr	r3, [r4, #0]
 8017e32:	07d8      	lsls	r0, r3, #31
 8017e34:	d510      	bpl.n	8017e58 <_printf_float+0x250>
 8017e36:	ee18 3a10 	vmov	r3, s16
 8017e3a:	4652      	mov	r2, sl
 8017e3c:	4631      	mov	r1, r6
 8017e3e:	4628      	mov	r0, r5
 8017e40:	47b8      	blx	r7
 8017e42:	3001      	adds	r0, #1
 8017e44:	f43f af41 	beq.w	8017cca <_printf_float+0xc2>
 8017e48:	f04f 0800 	mov.w	r8, #0
 8017e4c:	f104 091a 	add.w	r9, r4, #26
 8017e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e52:	3b01      	subs	r3, #1
 8017e54:	4543      	cmp	r3, r8
 8017e56:	dc09      	bgt.n	8017e6c <_printf_float+0x264>
 8017e58:	6823      	ldr	r3, [r4, #0]
 8017e5a:	079b      	lsls	r3, r3, #30
 8017e5c:	f100 8105 	bmi.w	801806a <_printf_float+0x462>
 8017e60:	68e0      	ldr	r0, [r4, #12]
 8017e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e64:	4298      	cmp	r0, r3
 8017e66:	bfb8      	it	lt
 8017e68:	4618      	movlt	r0, r3
 8017e6a:	e730      	b.n	8017cce <_printf_float+0xc6>
 8017e6c:	2301      	movs	r3, #1
 8017e6e:	464a      	mov	r2, r9
 8017e70:	4631      	mov	r1, r6
 8017e72:	4628      	mov	r0, r5
 8017e74:	47b8      	blx	r7
 8017e76:	3001      	adds	r0, #1
 8017e78:	f43f af27 	beq.w	8017cca <_printf_float+0xc2>
 8017e7c:	f108 0801 	add.w	r8, r8, #1
 8017e80:	e7e6      	b.n	8017e50 <_printf_float+0x248>
 8017e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	dc39      	bgt.n	8017efc <_printf_float+0x2f4>
 8017e88:	4a1b      	ldr	r2, [pc, #108]	; (8017ef8 <_printf_float+0x2f0>)
 8017e8a:	2301      	movs	r3, #1
 8017e8c:	4631      	mov	r1, r6
 8017e8e:	4628      	mov	r0, r5
 8017e90:	47b8      	blx	r7
 8017e92:	3001      	adds	r0, #1
 8017e94:	f43f af19 	beq.w	8017cca <_printf_float+0xc2>
 8017e98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017e9c:	4313      	orrs	r3, r2
 8017e9e:	d102      	bne.n	8017ea6 <_printf_float+0x29e>
 8017ea0:	6823      	ldr	r3, [r4, #0]
 8017ea2:	07d9      	lsls	r1, r3, #31
 8017ea4:	d5d8      	bpl.n	8017e58 <_printf_float+0x250>
 8017ea6:	ee18 3a10 	vmov	r3, s16
 8017eaa:	4652      	mov	r2, sl
 8017eac:	4631      	mov	r1, r6
 8017eae:	4628      	mov	r0, r5
 8017eb0:	47b8      	blx	r7
 8017eb2:	3001      	adds	r0, #1
 8017eb4:	f43f af09 	beq.w	8017cca <_printf_float+0xc2>
 8017eb8:	f04f 0900 	mov.w	r9, #0
 8017ebc:	f104 0a1a 	add.w	sl, r4, #26
 8017ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ec2:	425b      	negs	r3, r3
 8017ec4:	454b      	cmp	r3, r9
 8017ec6:	dc01      	bgt.n	8017ecc <_printf_float+0x2c4>
 8017ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017eca:	e792      	b.n	8017df2 <_printf_float+0x1ea>
 8017ecc:	2301      	movs	r3, #1
 8017ece:	4652      	mov	r2, sl
 8017ed0:	4631      	mov	r1, r6
 8017ed2:	4628      	mov	r0, r5
 8017ed4:	47b8      	blx	r7
 8017ed6:	3001      	adds	r0, #1
 8017ed8:	f43f aef7 	beq.w	8017cca <_printf_float+0xc2>
 8017edc:	f109 0901 	add.w	r9, r9, #1
 8017ee0:	e7ee      	b.n	8017ec0 <_printf_float+0x2b8>
 8017ee2:	bf00      	nop
 8017ee4:	7fefffff 	.word	0x7fefffff
 8017ee8:	0801ad40 	.word	0x0801ad40
 8017eec:	0801ad44 	.word	0x0801ad44
 8017ef0:	0801ad4c 	.word	0x0801ad4c
 8017ef4:	0801ad48 	.word	0x0801ad48
 8017ef8:	0801ad50 	.word	0x0801ad50
 8017efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017efe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017f00:	429a      	cmp	r2, r3
 8017f02:	bfa8      	it	ge
 8017f04:	461a      	movge	r2, r3
 8017f06:	2a00      	cmp	r2, #0
 8017f08:	4691      	mov	r9, r2
 8017f0a:	dc37      	bgt.n	8017f7c <_printf_float+0x374>
 8017f0c:	f04f 0b00 	mov.w	fp, #0
 8017f10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017f14:	f104 021a 	add.w	r2, r4, #26
 8017f18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017f1a:	9305      	str	r3, [sp, #20]
 8017f1c:	eba3 0309 	sub.w	r3, r3, r9
 8017f20:	455b      	cmp	r3, fp
 8017f22:	dc33      	bgt.n	8017f8c <_printf_float+0x384>
 8017f24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	db3b      	blt.n	8017fa4 <_printf_float+0x39c>
 8017f2c:	6823      	ldr	r3, [r4, #0]
 8017f2e:	07da      	lsls	r2, r3, #31
 8017f30:	d438      	bmi.n	8017fa4 <_printf_float+0x39c>
 8017f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f34:	9b05      	ldr	r3, [sp, #20]
 8017f36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f38:	1ad3      	subs	r3, r2, r3
 8017f3a:	eba2 0901 	sub.w	r9, r2, r1
 8017f3e:	4599      	cmp	r9, r3
 8017f40:	bfa8      	it	ge
 8017f42:	4699      	movge	r9, r3
 8017f44:	f1b9 0f00 	cmp.w	r9, #0
 8017f48:	dc35      	bgt.n	8017fb6 <_printf_float+0x3ae>
 8017f4a:	f04f 0800 	mov.w	r8, #0
 8017f4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017f52:	f104 0a1a 	add.w	sl, r4, #26
 8017f56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017f5a:	1a9b      	subs	r3, r3, r2
 8017f5c:	eba3 0309 	sub.w	r3, r3, r9
 8017f60:	4543      	cmp	r3, r8
 8017f62:	f77f af79 	ble.w	8017e58 <_printf_float+0x250>
 8017f66:	2301      	movs	r3, #1
 8017f68:	4652      	mov	r2, sl
 8017f6a:	4631      	mov	r1, r6
 8017f6c:	4628      	mov	r0, r5
 8017f6e:	47b8      	blx	r7
 8017f70:	3001      	adds	r0, #1
 8017f72:	f43f aeaa 	beq.w	8017cca <_printf_float+0xc2>
 8017f76:	f108 0801 	add.w	r8, r8, #1
 8017f7a:	e7ec      	b.n	8017f56 <_printf_float+0x34e>
 8017f7c:	4613      	mov	r3, r2
 8017f7e:	4631      	mov	r1, r6
 8017f80:	4642      	mov	r2, r8
 8017f82:	4628      	mov	r0, r5
 8017f84:	47b8      	blx	r7
 8017f86:	3001      	adds	r0, #1
 8017f88:	d1c0      	bne.n	8017f0c <_printf_float+0x304>
 8017f8a:	e69e      	b.n	8017cca <_printf_float+0xc2>
 8017f8c:	2301      	movs	r3, #1
 8017f8e:	4631      	mov	r1, r6
 8017f90:	4628      	mov	r0, r5
 8017f92:	9205      	str	r2, [sp, #20]
 8017f94:	47b8      	blx	r7
 8017f96:	3001      	adds	r0, #1
 8017f98:	f43f ae97 	beq.w	8017cca <_printf_float+0xc2>
 8017f9c:	9a05      	ldr	r2, [sp, #20]
 8017f9e:	f10b 0b01 	add.w	fp, fp, #1
 8017fa2:	e7b9      	b.n	8017f18 <_printf_float+0x310>
 8017fa4:	ee18 3a10 	vmov	r3, s16
 8017fa8:	4652      	mov	r2, sl
 8017faa:	4631      	mov	r1, r6
 8017fac:	4628      	mov	r0, r5
 8017fae:	47b8      	blx	r7
 8017fb0:	3001      	adds	r0, #1
 8017fb2:	d1be      	bne.n	8017f32 <_printf_float+0x32a>
 8017fb4:	e689      	b.n	8017cca <_printf_float+0xc2>
 8017fb6:	9a05      	ldr	r2, [sp, #20]
 8017fb8:	464b      	mov	r3, r9
 8017fba:	4442      	add	r2, r8
 8017fbc:	4631      	mov	r1, r6
 8017fbe:	4628      	mov	r0, r5
 8017fc0:	47b8      	blx	r7
 8017fc2:	3001      	adds	r0, #1
 8017fc4:	d1c1      	bne.n	8017f4a <_printf_float+0x342>
 8017fc6:	e680      	b.n	8017cca <_printf_float+0xc2>
 8017fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017fca:	2a01      	cmp	r2, #1
 8017fcc:	dc01      	bgt.n	8017fd2 <_printf_float+0x3ca>
 8017fce:	07db      	lsls	r3, r3, #31
 8017fd0:	d538      	bpl.n	8018044 <_printf_float+0x43c>
 8017fd2:	2301      	movs	r3, #1
 8017fd4:	4642      	mov	r2, r8
 8017fd6:	4631      	mov	r1, r6
 8017fd8:	4628      	mov	r0, r5
 8017fda:	47b8      	blx	r7
 8017fdc:	3001      	adds	r0, #1
 8017fde:	f43f ae74 	beq.w	8017cca <_printf_float+0xc2>
 8017fe2:	ee18 3a10 	vmov	r3, s16
 8017fe6:	4652      	mov	r2, sl
 8017fe8:	4631      	mov	r1, r6
 8017fea:	4628      	mov	r0, r5
 8017fec:	47b8      	blx	r7
 8017fee:	3001      	adds	r0, #1
 8017ff0:	f43f ae6b 	beq.w	8017cca <_printf_float+0xc2>
 8017ff4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	f7e8 fd64 	bl	8000ac8 <__aeabi_dcmpeq>
 8018000:	b9d8      	cbnz	r0, 801803a <_printf_float+0x432>
 8018002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018004:	f108 0201 	add.w	r2, r8, #1
 8018008:	3b01      	subs	r3, #1
 801800a:	4631      	mov	r1, r6
 801800c:	4628      	mov	r0, r5
 801800e:	47b8      	blx	r7
 8018010:	3001      	adds	r0, #1
 8018012:	d10e      	bne.n	8018032 <_printf_float+0x42a>
 8018014:	e659      	b.n	8017cca <_printf_float+0xc2>
 8018016:	2301      	movs	r3, #1
 8018018:	4652      	mov	r2, sl
 801801a:	4631      	mov	r1, r6
 801801c:	4628      	mov	r0, r5
 801801e:	47b8      	blx	r7
 8018020:	3001      	adds	r0, #1
 8018022:	f43f ae52 	beq.w	8017cca <_printf_float+0xc2>
 8018026:	f108 0801 	add.w	r8, r8, #1
 801802a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801802c:	3b01      	subs	r3, #1
 801802e:	4543      	cmp	r3, r8
 8018030:	dcf1      	bgt.n	8018016 <_printf_float+0x40e>
 8018032:	464b      	mov	r3, r9
 8018034:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018038:	e6dc      	b.n	8017df4 <_printf_float+0x1ec>
 801803a:	f04f 0800 	mov.w	r8, #0
 801803e:	f104 0a1a 	add.w	sl, r4, #26
 8018042:	e7f2      	b.n	801802a <_printf_float+0x422>
 8018044:	2301      	movs	r3, #1
 8018046:	4642      	mov	r2, r8
 8018048:	e7df      	b.n	801800a <_printf_float+0x402>
 801804a:	2301      	movs	r3, #1
 801804c:	464a      	mov	r2, r9
 801804e:	4631      	mov	r1, r6
 8018050:	4628      	mov	r0, r5
 8018052:	47b8      	blx	r7
 8018054:	3001      	adds	r0, #1
 8018056:	f43f ae38 	beq.w	8017cca <_printf_float+0xc2>
 801805a:	f108 0801 	add.w	r8, r8, #1
 801805e:	68e3      	ldr	r3, [r4, #12]
 8018060:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018062:	1a5b      	subs	r3, r3, r1
 8018064:	4543      	cmp	r3, r8
 8018066:	dcf0      	bgt.n	801804a <_printf_float+0x442>
 8018068:	e6fa      	b.n	8017e60 <_printf_float+0x258>
 801806a:	f04f 0800 	mov.w	r8, #0
 801806e:	f104 0919 	add.w	r9, r4, #25
 8018072:	e7f4      	b.n	801805e <_printf_float+0x456>

08018074 <_printf_common>:
 8018074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018078:	4616      	mov	r6, r2
 801807a:	4699      	mov	r9, r3
 801807c:	688a      	ldr	r2, [r1, #8]
 801807e:	690b      	ldr	r3, [r1, #16]
 8018080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018084:	4293      	cmp	r3, r2
 8018086:	bfb8      	it	lt
 8018088:	4613      	movlt	r3, r2
 801808a:	6033      	str	r3, [r6, #0]
 801808c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018090:	4607      	mov	r7, r0
 8018092:	460c      	mov	r4, r1
 8018094:	b10a      	cbz	r2, 801809a <_printf_common+0x26>
 8018096:	3301      	adds	r3, #1
 8018098:	6033      	str	r3, [r6, #0]
 801809a:	6823      	ldr	r3, [r4, #0]
 801809c:	0699      	lsls	r1, r3, #26
 801809e:	bf42      	ittt	mi
 80180a0:	6833      	ldrmi	r3, [r6, #0]
 80180a2:	3302      	addmi	r3, #2
 80180a4:	6033      	strmi	r3, [r6, #0]
 80180a6:	6825      	ldr	r5, [r4, #0]
 80180a8:	f015 0506 	ands.w	r5, r5, #6
 80180ac:	d106      	bne.n	80180bc <_printf_common+0x48>
 80180ae:	f104 0a19 	add.w	sl, r4, #25
 80180b2:	68e3      	ldr	r3, [r4, #12]
 80180b4:	6832      	ldr	r2, [r6, #0]
 80180b6:	1a9b      	subs	r3, r3, r2
 80180b8:	42ab      	cmp	r3, r5
 80180ba:	dc26      	bgt.n	801810a <_printf_common+0x96>
 80180bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80180c0:	1e13      	subs	r3, r2, #0
 80180c2:	6822      	ldr	r2, [r4, #0]
 80180c4:	bf18      	it	ne
 80180c6:	2301      	movne	r3, #1
 80180c8:	0692      	lsls	r2, r2, #26
 80180ca:	d42b      	bmi.n	8018124 <_printf_common+0xb0>
 80180cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80180d0:	4649      	mov	r1, r9
 80180d2:	4638      	mov	r0, r7
 80180d4:	47c0      	blx	r8
 80180d6:	3001      	adds	r0, #1
 80180d8:	d01e      	beq.n	8018118 <_printf_common+0xa4>
 80180da:	6823      	ldr	r3, [r4, #0]
 80180dc:	68e5      	ldr	r5, [r4, #12]
 80180de:	6832      	ldr	r2, [r6, #0]
 80180e0:	f003 0306 	and.w	r3, r3, #6
 80180e4:	2b04      	cmp	r3, #4
 80180e6:	bf08      	it	eq
 80180e8:	1aad      	subeq	r5, r5, r2
 80180ea:	68a3      	ldr	r3, [r4, #8]
 80180ec:	6922      	ldr	r2, [r4, #16]
 80180ee:	bf0c      	ite	eq
 80180f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80180f4:	2500      	movne	r5, #0
 80180f6:	4293      	cmp	r3, r2
 80180f8:	bfc4      	itt	gt
 80180fa:	1a9b      	subgt	r3, r3, r2
 80180fc:	18ed      	addgt	r5, r5, r3
 80180fe:	2600      	movs	r6, #0
 8018100:	341a      	adds	r4, #26
 8018102:	42b5      	cmp	r5, r6
 8018104:	d11a      	bne.n	801813c <_printf_common+0xc8>
 8018106:	2000      	movs	r0, #0
 8018108:	e008      	b.n	801811c <_printf_common+0xa8>
 801810a:	2301      	movs	r3, #1
 801810c:	4652      	mov	r2, sl
 801810e:	4649      	mov	r1, r9
 8018110:	4638      	mov	r0, r7
 8018112:	47c0      	blx	r8
 8018114:	3001      	adds	r0, #1
 8018116:	d103      	bne.n	8018120 <_printf_common+0xac>
 8018118:	f04f 30ff 	mov.w	r0, #4294967295
 801811c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018120:	3501      	adds	r5, #1
 8018122:	e7c6      	b.n	80180b2 <_printf_common+0x3e>
 8018124:	18e1      	adds	r1, r4, r3
 8018126:	1c5a      	adds	r2, r3, #1
 8018128:	2030      	movs	r0, #48	; 0x30
 801812a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801812e:	4422      	add	r2, r4
 8018130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018138:	3302      	adds	r3, #2
 801813a:	e7c7      	b.n	80180cc <_printf_common+0x58>
 801813c:	2301      	movs	r3, #1
 801813e:	4622      	mov	r2, r4
 8018140:	4649      	mov	r1, r9
 8018142:	4638      	mov	r0, r7
 8018144:	47c0      	blx	r8
 8018146:	3001      	adds	r0, #1
 8018148:	d0e6      	beq.n	8018118 <_printf_common+0xa4>
 801814a:	3601      	adds	r6, #1
 801814c:	e7d9      	b.n	8018102 <_printf_common+0x8e>
	...

08018150 <_printf_i>:
 8018150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018154:	460c      	mov	r4, r1
 8018156:	4691      	mov	r9, r2
 8018158:	7e27      	ldrb	r7, [r4, #24]
 801815a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801815c:	2f78      	cmp	r7, #120	; 0x78
 801815e:	4680      	mov	r8, r0
 8018160:	469a      	mov	sl, r3
 8018162:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018166:	d807      	bhi.n	8018178 <_printf_i+0x28>
 8018168:	2f62      	cmp	r7, #98	; 0x62
 801816a:	d80a      	bhi.n	8018182 <_printf_i+0x32>
 801816c:	2f00      	cmp	r7, #0
 801816e:	f000 80d8 	beq.w	8018322 <_printf_i+0x1d2>
 8018172:	2f58      	cmp	r7, #88	; 0x58
 8018174:	f000 80a3 	beq.w	80182be <_printf_i+0x16e>
 8018178:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801817c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018180:	e03a      	b.n	80181f8 <_printf_i+0xa8>
 8018182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018186:	2b15      	cmp	r3, #21
 8018188:	d8f6      	bhi.n	8018178 <_printf_i+0x28>
 801818a:	a001      	add	r0, pc, #4	; (adr r0, 8018190 <_printf_i+0x40>)
 801818c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018190:	080181e9 	.word	0x080181e9
 8018194:	080181fd 	.word	0x080181fd
 8018198:	08018179 	.word	0x08018179
 801819c:	08018179 	.word	0x08018179
 80181a0:	08018179 	.word	0x08018179
 80181a4:	08018179 	.word	0x08018179
 80181a8:	080181fd 	.word	0x080181fd
 80181ac:	08018179 	.word	0x08018179
 80181b0:	08018179 	.word	0x08018179
 80181b4:	08018179 	.word	0x08018179
 80181b8:	08018179 	.word	0x08018179
 80181bc:	08018309 	.word	0x08018309
 80181c0:	0801822d 	.word	0x0801822d
 80181c4:	080182eb 	.word	0x080182eb
 80181c8:	08018179 	.word	0x08018179
 80181cc:	08018179 	.word	0x08018179
 80181d0:	0801832b 	.word	0x0801832b
 80181d4:	08018179 	.word	0x08018179
 80181d8:	0801822d 	.word	0x0801822d
 80181dc:	08018179 	.word	0x08018179
 80181e0:	08018179 	.word	0x08018179
 80181e4:	080182f3 	.word	0x080182f3
 80181e8:	680b      	ldr	r3, [r1, #0]
 80181ea:	1d1a      	adds	r2, r3, #4
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	600a      	str	r2, [r1, #0]
 80181f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80181f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80181f8:	2301      	movs	r3, #1
 80181fa:	e0a3      	b.n	8018344 <_printf_i+0x1f4>
 80181fc:	6825      	ldr	r5, [r4, #0]
 80181fe:	6808      	ldr	r0, [r1, #0]
 8018200:	062e      	lsls	r6, r5, #24
 8018202:	f100 0304 	add.w	r3, r0, #4
 8018206:	d50a      	bpl.n	801821e <_printf_i+0xce>
 8018208:	6805      	ldr	r5, [r0, #0]
 801820a:	600b      	str	r3, [r1, #0]
 801820c:	2d00      	cmp	r5, #0
 801820e:	da03      	bge.n	8018218 <_printf_i+0xc8>
 8018210:	232d      	movs	r3, #45	; 0x2d
 8018212:	426d      	negs	r5, r5
 8018214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018218:	485e      	ldr	r0, [pc, #376]	; (8018394 <_printf_i+0x244>)
 801821a:	230a      	movs	r3, #10
 801821c:	e019      	b.n	8018252 <_printf_i+0x102>
 801821e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018222:	6805      	ldr	r5, [r0, #0]
 8018224:	600b      	str	r3, [r1, #0]
 8018226:	bf18      	it	ne
 8018228:	b22d      	sxthne	r5, r5
 801822a:	e7ef      	b.n	801820c <_printf_i+0xbc>
 801822c:	680b      	ldr	r3, [r1, #0]
 801822e:	6825      	ldr	r5, [r4, #0]
 8018230:	1d18      	adds	r0, r3, #4
 8018232:	6008      	str	r0, [r1, #0]
 8018234:	0628      	lsls	r0, r5, #24
 8018236:	d501      	bpl.n	801823c <_printf_i+0xec>
 8018238:	681d      	ldr	r5, [r3, #0]
 801823a:	e002      	b.n	8018242 <_printf_i+0xf2>
 801823c:	0669      	lsls	r1, r5, #25
 801823e:	d5fb      	bpl.n	8018238 <_printf_i+0xe8>
 8018240:	881d      	ldrh	r5, [r3, #0]
 8018242:	4854      	ldr	r0, [pc, #336]	; (8018394 <_printf_i+0x244>)
 8018244:	2f6f      	cmp	r7, #111	; 0x6f
 8018246:	bf0c      	ite	eq
 8018248:	2308      	moveq	r3, #8
 801824a:	230a      	movne	r3, #10
 801824c:	2100      	movs	r1, #0
 801824e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018252:	6866      	ldr	r6, [r4, #4]
 8018254:	60a6      	str	r6, [r4, #8]
 8018256:	2e00      	cmp	r6, #0
 8018258:	bfa2      	ittt	ge
 801825a:	6821      	ldrge	r1, [r4, #0]
 801825c:	f021 0104 	bicge.w	r1, r1, #4
 8018260:	6021      	strge	r1, [r4, #0]
 8018262:	b90d      	cbnz	r5, 8018268 <_printf_i+0x118>
 8018264:	2e00      	cmp	r6, #0
 8018266:	d04d      	beq.n	8018304 <_printf_i+0x1b4>
 8018268:	4616      	mov	r6, r2
 801826a:	fbb5 f1f3 	udiv	r1, r5, r3
 801826e:	fb03 5711 	mls	r7, r3, r1, r5
 8018272:	5dc7      	ldrb	r7, [r0, r7]
 8018274:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018278:	462f      	mov	r7, r5
 801827a:	42bb      	cmp	r3, r7
 801827c:	460d      	mov	r5, r1
 801827e:	d9f4      	bls.n	801826a <_printf_i+0x11a>
 8018280:	2b08      	cmp	r3, #8
 8018282:	d10b      	bne.n	801829c <_printf_i+0x14c>
 8018284:	6823      	ldr	r3, [r4, #0]
 8018286:	07df      	lsls	r7, r3, #31
 8018288:	d508      	bpl.n	801829c <_printf_i+0x14c>
 801828a:	6923      	ldr	r3, [r4, #16]
 801828c:	6861      	ldr	r1, [r4, #4]
 801828e:	4299      	cmp	r1, r3
 8018290:	bfde      	ittt	le
 8018292:	2330      	movle	r3, #48	; 0x30
 8018294:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018298:	f106 36ff 	addle.w	r6, r6, #4294967295
 801829c:	1b92      	subs	r2, r2, r6
 801829e:	6122      	str	r2, [r4, #16]
 80182a0:	f8cd a000 	str.w	sl, [sp]
 80182a4:	464b      	mov	r3, r9
 80182a6:	aa03      	add	r2, sp, #12
 80182a8:	4621      	mov	r1, r4
 80182aa:	4640      	mov	r0, r8
 80182ac:	f7ff fee2 	bl	8018074 <_printf_common>
 80182b0:	3001      	adds	r0, #1
 80182b2:	d14c      	bne.n	801834e <_printf_i+0x1fe>
 80182b4:	f04f 30ff 	mov.w	r0, #4294967295
 80182b8:	b004      	add	sp, #16
 80182ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182be:	4835      	ldr	r0, [pc, #212]	; (8018394 <_printf_i+0x244>)
 80182c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80182c4:	6823      	ldr	r3, [r4, #0]
 80182c6:	680e      	ldr	r6, [r1, #0]
 80182c8:	061f      	lsls	r7, r3, #24
 80182ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80182ce:	600e      	str	r6, [r1, #0]
 80182d0:	d514      	bpl.n	80182fc <_printf_i+0x1ac>
 80182d2:	07d9      	lsls	r1, r3, #31
 80182d4:	bf44      	itt	mi
 80182d6:	f043 0320 	orrmi.w	r3, r3, #32
 80182da:	6023      	strmi	r3, [r4, #0]
 80182dc:	b91d      	cbnz	r5, 80182e6 <_printf_i+0x196>
 80182de:	6823      	ldr	r3, [r4, #0]
 80182e0:	f023 0320 	bic.w	r3, r3, #32
 80182e4:	6023      	str	r3, [r4, #0]
 80182e6:	2310      	movs	r3, #16
 80182e8:	e7b0      	b.n	801824c <_printf_i+0xfc>
 80182ea:	6823      	ldr	r3, [r4, #0]
 80182ec:	f043 0320 	orr.w	r3, r3, #32
 80182f0:	6023      	str	r3, [r4, #0]
 80182f2:	2378      	movs	r3, #120	; 0x78
 80182f4:	4828      	ldr	r0, [pc, #160]	; (8018398 <_printf_i+0x248>)
 80182f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80182fa:	e7e3      	b.n	80182c4 <_printf_i+0x174>
 80182fc:	065e      	lsls	r6, r3, #25
 80182fe:	bf48      	it	mi
 8018300:	b2ad      	uxthmi	r5, r5
 8018302:	e7e6      	b.n	80182d2 <_printf_i+0x182>
 8018304:	4616      	mov	r6, r2
 8018306:	e7bb      	b.n	8018280 <_printf_i+0x130>
 8018308:	680b      	ldr	r3, [r1, #0]
 801830a:	6826      	ldr	r6, [r4, #0]
 801830c:	6960      	ldr	r0, [r4, #20]
 801830e:	1d1d      	adds	r5, r3, #4
 8018310:	600d      	str	r5, [r1, #0]
 8018312:	0635      	lsls	r5, r6, #24
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	d501      	bpl.n	801831c <_printf_i+0x1cc>
 8018318:	6018      	str	r0, [r3, #0]
 801831a:	e002      	b.n	8018322 <_printf_i+0x1d2>
 801831c:	0671      	lsls	r1, r6, #25
 801831e:	d5fb      	bpl.n	8018318 <_printf_i+0x1c8>
 8018320:	8018      	strh	r0, [r3, #0]
 8018322:	2300      	movs	r3, #0
 8018324:	6123      	str	r3, [r4, #16]
 8018326:	4616      	mov	r6, r2
 8018328:	e7ba      	b.n	80182a0 <_printf_i+0x150>
 801832a:	680b      	ldr	r3, [r1, #0]
 801832c:	1d1a      	adds	r2, r3, #4
 801832e:	600a      	str	r2, [r1, #0]
 8018330:	681e      	ldr	r6, [r3, #0]
 8018332:	6862      	ldr	r2, [r4, #4]
 8018334:	2100      	movs	r1, #0
 8018336:	4630      	mov	r0, r6
 8018338:	f7e7 ff52 	bl	80001e0 <memchr>
 801833c:	b108      	cbz	r0, 8018342 <_printf_i+0x1f2>
 801833e:	1b80      	subs	r0, r0, r6
 8018340:	6060      	str	r0, [r4, #4]
 8018342:	6863      	ldr	r3, [r4, #4]
 8018344:	6123      	str	r3, [r4, #16]
 8018346:	2300      	movs	r3, #0
 8018348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801834c:	e7a8      	b.n	80182a0 <_printf_i+0x150>
 801834e:	6923      	ldr	r3, [r4, #16]
 8018350:	4632      	mov	r2, r6
 8018352:	4649      	mov	r1, r9
 8018354:	4640      	mov	r0, r8
 8018356:	47d0      	blx	sl
 8018358:	3001      	adds	r0, #1
 801835a:	d0ab      	beq.n	80182b4 <_printf_i+0x164>
 801835c:	6823      	ldr	r3, [r4, #0]
 801835e:	079b      	lsls	r3, r3, #30
 8018360:	d413      	bmi.n	801838a <_printf_i+0x23a>
 8018362:	68e0      	ldr	r0, [r4, #12]
 8018364:	9b03      	ldr	r3, [sp, #12]
 8018366:	4298      	cmp	r0, r3
 8018368:	bfb8      	it	lt
 801836a:	4618      	movlt	r0, r3
 801836c:	e7a4      	b.n	80182b8 <_printf_i+0x168>
 801836e:	2301      	movs	r3, #1
 8018370:	4632      	mov	r2, r6
 8018372:	4649      	mov	r1, r9
 8018374:	4640      	mov	r0, r8
 8018376:	47d0      	blx	sl
 8018378:	3001      	adds	r0, #1
 801837a:	d09b      	beq.n	80182b4 <_printf_i+0x164>
 801837c:	3501      	adds	r5, #1
 801837e:	68e3      	ldr	r3, [r4, #12]
 8018380:	9903      	ldr	r1, [sp, #12]
 8018382:	1a5b      	subs	r3, r3, r1
 8018384:	42ab      	cmp	r3, r5
 8018386:	dcf2      	bgt.n	801836e <_printf_i+0x21e>
 8018388:	e7eb      	b.n	8018362 <_printf_i+0x212>
 801838a:	2500      	movs	r5, #0
 801838c:	f104 0619 	add.w	r6, r4, #25
 8018390:	e7f5      	b.n	801837e <_printf_i+0x22e>
 8018392:	bf00      	nop
 8018394:	0801ad52 	.word	0x0801ad52
 8018398:	0801ad63 	.word	0x0801ad63

0801839c <_sbrk_r>:
 801839c:	b538      	push	{r3, r4, r5, lr}
 801839e:	4d06      	ldr	r5, [pc, #24]	; (80183b8 <_sbrk_r+0x1c>)
 80183a0:	2300      	movs	r3, #0
 80183a2:	4604      	mov	r4, r0
 80183a4:	4608      	mov	r0, r1
 80183a6:	602b      	str	r3, [r5, #0]
 80183a8:	f7f8 fda2 	bl	8010ef0 <_sbrk>
 80183ac:	1c43      	adds	r3, r0, #1
 80183ae:	d102      	bne.n	80183b6 <_sbrk_r+0x1a>
 80183b0:	682b      	ldr	r3, [r5, #0]
 80183b2:	b103      	cbz	r3, 80183b6 <_sbrk_r+0x1a>
 80183b4:	6023      	str	r3, [r4, #0]
 80183b6:	bd38      	pop	{r3, r4, r5, pc}
 80183b8:	200009f8 	.word	0x200009f8

080183bc <siprintf>:
 80183bc:	b40e      	push	{r1, r2, r3}
 80183be:	b500      	push	{lr}
 80183c0:	b09c      	sub	sp, #112	; 0x70
 80183c2:	ab1d      	add	r3, sp, #116	; 0x74
 80183c4:	9002      	str	r0, [sp, #8]
 80183c6:	9006      	str	r0, [sp, #24]
 80183c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80183cc:	4809      	ldr	r0, [pc, #36]	; (80183f4 <siprintf+0x38>)
 80183ce:	9107      	str	r1, [sp, #28]
 80183d0:	9104      	str	r1, [sp, #16]
 80183d2:	4909      	ldr	r1, [pc, #36]	; (80183f8 <siprintf+0x3c>)
 80183d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80183d8:	9105      	str	r1, [sp, #20]
 80183da:	6800      	ldr	r0, [r0, #0]
 80183dc:	9301      	str	r3, [sp, #4]
 80183de:	a902      	add	r1, sp, #8
 80183e0:	f001 fb1e 	bl	8019a20 <_svfiprintf_r>
 80183e4:	9b02      	ldr	r3, [sp, #8]
 80183e6:	2200      	movs	r2, #0
 80183e8:	701a      	strb	r2, [r3, #0]
 80183ea:	b01c      	add	sp, #112	; 0x70
 80183ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80183f0:	b003      	add	sp, #12
 80183f2:	4770      	bx	lr
 80183f4:	2000002c 	.word	0x2000002c
 80183f8:	ffff0208 	.word	0xffff0208

080183fc <__sread>:
 80183fc:	b510      	push	{r4, lr}
 80183fe:	460c      	mov	r4, r1
 8018400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018404:	f001 fc0c 	bl	8019c20 <_read_r>
 8018408:	2800      	cmp	r0, #0
 801840a:	bfab      	itete	ge
 801840c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801840e:	89a3      	ldrhlt	r3, [r4, #12]
 8018410:	181b      	addge	r3, r3, r0
 8018412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018416:	bfac      	ite	ge
 8018418:	6563      	strge	r3, [r4, #84]	; 0x54
 801841a:	81a3      	strhlt	r3, [r4, #12]
 801841c:	bd10      	pop	{r4, pc}

0801841e <__swrite>:
 801841e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018422:	461f      	mov	r7, r3
 8018424:	898b      	ldrh	r3, [r1, #12]
 8018426:	05db      	lsls	r3, r3, #23
 8018428:	4605      	mov	r5, r0
 801842a:	460c      	mov	r4, r1
 801842c:	4616      	mov	r6, r2
 801842e:	d505      	bpl.n	801843c <__swrite+0x1e>
 8018430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018434:	2302      	movs	r3, #2
 8018436:	2200      	movs	r2, #0
 8018438:	f000 fee4 	bl	8019204 <_lseek_r>
 801843c:	89a3      	ldrh	r3, [r4, #12]
 801843e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018446:	81a3      	strh	r3, [r4, #12]
 8018448:	4632      	mov	r2, r6
 801844a:	463b      	mov	r3, r7
 801844c:	4628      	mov	r0, r5
 801844e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018452:	f000 b817 	b.w	8018484 <_write_r>

08018456 <__sseek>:
 8018456:	b510      	push	{r4, lr}
 8018458:	460c      	mov	r4, r1
 801845a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801845e:	f000 fed1 	bl	8019204 <_lseek_r>
 8018462:	1c43      	adds	r3, r0, #1
 8018464:	89a3      	ldrh	r3, [r4, #12]
 8018466:	bf15      	itete	ne
 8018468:	6560      	strne	r0, [r4, #84]	; 0x54
 801846a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801846e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018472:	81a3      	strheq	r3, [r4, #12]
 8018474:	bf18      	it	ne
 8018476:	81a3      	strhne	r3, [r4, #12]
 8018478:	bd10      	pop	{r4, pc}

0801847a <__sclose>:
 801847a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801847e:	f000 b813 	b.w	80184a8 <_close_r>
	...

08018484 <_write_r>:
 8018484:	b538      	push	{r3, r4, r5, lr}
 8018486:	4d07      	ldr	r5, [pc, #28]	; (80184a4 <_write_r+0x20>)
 8018488:	4604      	mov	r4, r0
 801848a:	4608      	mov	r0, r1
 801848c:	4611      	mov	r1, r2
 801848e:	2200      	movs	r2, #0
 8018490:	602a      	str	r2, [r5, #0]
 8018492:	461a      	mov	r2, r3
 8018494:	f7f8 fcdb 	bl	8010e4e <_write>
 8018498:	1c43      	adds	r3, r0, #1
 801849a:	d102      	bne.n	80184a2 <_write_r+0x1e>
 801849c:	682b      	ldr	r3, [r5, #0]
 801849e:	b103      	cbz	r3, 80184a2 <_write_r+0x1e>
 80184a0:	6023      	str	r3, [r4, #0]
 80184a2:	bd38      	pop	{r3, r4, r5, pc}
 80184a4:	200009f8 	.word	0x200009f8

080184a8 <_close_r>:
 80184a8:	b538      	push	{r3, r4, r5, lr}
 80184aa:	4d06      	ldr	r5, [pc, #24]	; (80184c4 <_close_r+0x1c>)
 80184ac:	2300      	movs	r3, #0
 80184ae:	4604      	mov	r4, r0
 80184b0:	4608      	mov	r0, r1
 80184b2:	602b      	str	r3, [r5, #0]
 80184b4:	f7f8 fce7 	bl	8010e86 <_close>
 80184b8:	1c43      	adds	r3, r0, #1
 80184ba:	d102      	bne.n	80184c2 <_close_r+0x1a>
 80184bc:	682b      	ldr	r3, [r5, #0]
 80184be:	b103      	cbz	r3, 80184c2 <_close_r+0x1a>
 80184c0:	6023      	str	r3, [r4, #0]
 80184c2:	bd38      	pop	{r3, r4, r5, pc}
 80184c4:	200009f8 	.word	0x200009f8

080184c8 <quorem>:
 80184c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184cc:	6903      	ldr	r3, [r0, #16]
 80184ce:	690c      	ldr	r4, [r1, #16]
 80184d0:	42a3      	cmp	r3, r4
 80184d2:	4607      	mov	r7, r0
 80184d4:	f2c0 8081 	blt.w	80185da <quorem+0x112>
 80184d8:	3c01      	subs	r4, #1
 80184da:	f101 0814 	add.w	r8, r1, #20
 80184de:	f100 0514 	add.w	r5, r0, #20
 80184e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80184e6:	9301      	str	r3, [sp, #4]
 80184e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80184ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80184f0:	3301      	adds	r3, #1
 80184f2:	429a      	cmp	r2, r3
 80184f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80184f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80184fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8018500:	d331      	bcc.n	8018566 <quorem+0x9e>
 8018502:	f04f 0e00 	mov.w	lr, #0
 8018506:	4640      	mov	r0, r8
 8018508:	46ac      	mov	ip, r5
 801850a:	46f2      	mov	sl, lr
 801850c:	f850 2b04 	ldr.w	r2, [r0], #4
 8018510:	b293      	uxth	r3, r2
 8018512:	fb06 e303 	mla	r3, r6, r3, lr
 8018516:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801851a:	b29b      	uxth	r3, r3
 801851c:	ebaa 0303 	sub.w	r3, sl, r3
 8018520:	0c12      	lsrs	r2, r2, #16
 8018522:	f8dc a000 	ldr.w	sl, [ip]
 8018526:	fb06 e202 	mla	r2, r6, r2, lr
 801852a:	fa13 f38a 	uxtah	r3, r3, sl
 801852e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018532:	fa1f fa82 	uxth.w	sl, r2
 8018536:	f8dc 2000 	ldr.w	r2, [ip]
 801853a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801853e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018542:	b29b      	uxth	r3, r3
 8018544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018548:	4581      	cmp	r9, r0
 801854a:	f84c 3b04 	str.w	r3, [ip], #4
 801854e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018552:	d2db      	bcs.n	801850c <quorem+0x44>
 8018554:	f855 300b 	ldr.w	r3, [r5, fp]
 8018558:	b92b      	cbnz	r3, 8018566 <quorem+0x9e>
 801855a:	9b01      	ldr	r3, [sp, #4]
 801855c:	3b04      	subs	r3, #4
 801855e:	429d      	cmp	r5, r3
 8018560:	461a      	mov	r2, r3
 8018562:	d32e      	bcc.n	80185c2 <quorem+0xfa>
 8018564:	613c      	str	r4, [r7, #16]
 8018566:	4638      	mov	r0, r7
 8018568:	f001 f8f0 	bl	801974c <__mcmp>
 801856c:	2800      	cmp	r0, #0
 801856e:	db24      	blt.n	80185ba <quorem+0xf2>
 8018570:	3601      	adds	r6, #1
 8018572:	4628      	mov	r0, r5
 8018574:	f04f 0c00 	mov.w	ip, #0
 8018578:	f858 2b04 	ldr.w	r2, [r8], #4
 801857c:	f8d0 e000 	ldr.w	lr, [r0]
 8018580:	b293      	uxth	r3, r2
 8018582:	ebac 0303 	sub.w	r3, ip, r3
 8018586:	0c12      	lsrs	r2, r2, #16
 8018588:	fa13 f38e 	uxtah	r3, r3, lr
 801858c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018594:	b29b      	uxth	r3, r3
 8018596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801859a:	45c1      	cmp	r9, r8
 801859c:	f840 3b04 	str.w	r3, [r0], #4
 80185a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80185a4:	d2e8      	bcs.n	8018578 <quorem+0xb0>
 80185a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80185aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80185ae:	b922      	cbnz	r2, 80185ba <quorem+0xf2>
 80185b0:	3b04      	subs	r3, #4
 80185b2:	429d      	cmp	r5, r3
 80185b4:	461a      	mov	r2, r3
 80185b6:	d30a      	bcc.n	80185ce <quorem+0x106>
 80185b8:	613c      	str	r4, [r7, #16]
 80185ba:	4630      	mov	r0, r6
 80185bc:	b003      	add	sp, #12
 80185be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185c2:	6812      	ldr	r2, [r2, #0]
 80185c4:	3b04      	subs	r3, #4
 80185c6:	2a00      	cmp	r2, #0
 80185c8:	d1cc      	bne.n	8018564 <quorem+0x9c>
 80185ca:	3c01      	subs	r4, #1
 80185cc:	e7c7      	b.n	801855e <quorem+0x96>
 80185ce:	6812      	ldr	r2, [r2, #0]
 80185d0:	3b04      	subs	r3, #4
 80185d2:	2a00      	cmp	r2, #0
 80185d4:	d1f0      	bne.n	80185b8 <quorem+0xf0>
 80185d6:	3c01      	subs	r4, #1
 80185d8:	e7eb      	b.n	80185b2 <quorem+0xea>
 80185da:	2000      	movs	r0, #0
 80185dc:	e7ee      	b.n	80185bc <quorem+0xf4>
	...

080185e0 <_dtoa_r>:
 80185e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e4:	ed2d 8b02 	vpush	{d8}
 80185e8:	ec57 6b10 	vmov	r6, r7, d0
 80185ec:	b095      	sub	sp, #84	; 0x54
 80185ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80185f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80185f4:	9105      	str	r1, [sp, #20]
 80185f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80185fa:	4604      	mov	r4, r0
 80185fc:	9209      	str	r2, [sp, #36]	; 0x24
 80185fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8018600:	b975      	cbnz	r5, 8018620 <_dtoa_r+0x40>
 8018602:	2010      	movs	r0, #16
 8018604:	f000 fe10 	bl	8019228 <malloc>
 8018608:	4602      	mov	r2, r0
 801860a:	6260      	str	r0, [r4, #36]	; 0x24
 801860c:	b920      	cbnz	r0, 8018618 <_dtoa_r+0x38>
 801860e:	4bb2      	ldr	r3, [pc, #712]	; (80188d8 <_dtoa_r+0x2f8>)
 8018610:	21ea      	movs	r1, #234	; 0xea
 8018612:	48b2      	ldr	r0, [pc, #712]	; (80188dc <_dtoa_r+0x2fc>)
 8018614:	f001 fb16 	bl	8019c44 <__assert_func>
 8018618:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801861c:	6005      	str	r5, [r0, #0]
 801861e:	60c5      	str	r5, [r0, #12]
 8018620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018622:	6819      	ldr	r1, [r3, #0]
 8018624:	b151      	cbz	r1, 801863c <_dtoa_r+0x5c>
 8018626:	685a      	ldr	r2, [r3, #4]
 8018628:	604a      	str	r2, [r1, #4]
 801862a:	2301      	movs	r3, #1
 801862c:	4093      	lsls	r3, r2
 801862e:	608b      	str	r3, [r1, #8]
 8018630:	4620      	mov	r0, r4
 8018632:	f000 fe4d 	bl	80192d0 <_Bfree>
 8018636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018638:	2200      	movs	r2, #0
 801863a:	601a      	str	r2, [r3, #0]
 801863c:	1e3b      	subs	r3, r7, #0
 801863e:	bfb9      	ittee	lt
 8018640:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018644:	9303      	strlt	r3, [sp, #12]
 8018646:	2300      	movge	r3, #0
 8018648:	f8c8 3000 	strge.w	r3, [r8]
 801864c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018650:	4ba3      	ldr	r3, [pc, #652]	; (80188e0 <_dtoa_r+0x300>)
 8018652:	bfbc      	itt	lt
 8018654:	2201      	movlt	r2, #1
 8018656:	f8c8 2000 	strlt.w	r2, [r8]
 801865a:	ea33 0309 	bics.w	r3, r3, r9
 801865e:	d11b      	bne.n	8018698 <_dtoa_r+0xb8>
 8018660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018662:	f242 730f 	movw	r3, #9999	; 0x270f
 8018666:	6013      	str	r3, [r2, #0]
 8018668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801866c:	4333      	orrs	r3, r6
 801866e:	f000 857a 	beq.w	8019166 <_dtoa_r+0xb86>
 8018672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018674:	b963      	cbnz	r3, 8018690 <_dtoa_r+0xb0>
 8018676:	4b9b      	ldr	r3, [pc, #620]	; (80188e4 <_dtoa_r+0x304>)
 8018678:	e024      	b.n	80186c4 <_dtoa_r+0xe4>
 801867a:	4b9b      	ldr	r3, [pc, #620]	; (80188e8 <_dtoa_r+0x308>)
 801867c:	9300      	str	r3, [sp, #0]
 801867e:	3308      	adds	r3, #8
 8018680:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018682:	6013      	str	r3, [r2, #0]
 8018684:	9800      	ldr	r0, [sp, #0]
 8018686:	b015      	add	sp, #84	; 0x54
 8018688:	ecbd 8b02 	vpop	{d8}
 801868c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018690:	4b94      	ldr	r3, [pc, #592]	; (80188e4 <_dtoa_r+0x304>)
 8018692:	9300      	str	r3, [sp, #0]
 8018694:	3303      	adds	r3, #3
 8018696:	e7f3      	b.n	8018680 <_dtoa_r+0xa0>
 8018698:	ed9d 7b02 	vldr	d7, [sp, #8]
 801869c:	2200      	movs	r2, #0
 801869e:	ec51 0b17 	vmov	r0, r1, d7
 80186a2:	2300      	movs	r3, #0
 80186a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80186a8:	f7e8 fa0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80186ac:	4680      	mov	r8, r0
 80186ae:	b158      	cbz	r0, 80186c8 <_dtoa_r+0xe8>
 80186b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80186b2:	2301      	movs	r3, #1
 80186b4:	6013      	str	r3, [r2, #0]
 80186b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	f000 8551 	beq.w	8019160 <_dtoa_r+0xb80>
 80186be:	488b      	ldr	r0, [pc, #556]	; (80188ec <_dtoa_r+0x30c>)
 80186c0:	6018      	str	r0, [r3, #0]
 80186c2:	1e43      	subs	r3, r0, #1
 80186c4:	9300      	str	r3, [sp, #0]
 80186c6:	e7dd      	b.n	8018684 <_dtoa_r+0xa4>
 80186c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80186cc:	aa12      	add	r2, sp, #72	; 0x48
 80186ce:	a913      	add	r1, sp, #76	; 0x4c
 80186d0:	4620      	mov	r0, r4
 80186d2:	f001 f8df 	bl	8019894 <__d2b>
 80186d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80186da:	4683      	mov	fp, r0
 80186dc:	2d00      	cmp	r5, #0
 80186de:	d07c      	beq.n	80187da <_dtoa_r+0x1fa>
 80186e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80186e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80186ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80186ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80186f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80186f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80186fa:	4b7d      	ldr	r3, [pc, #500]	; (80188f0 <_dtoa_r+0x310>)
 80186fc:	2200      	movs	r2, #0
 80186fe:	4630      	mov	r0, r6
 8018700:	4639      	mov	r1, r7
 8018702:	f7e7 fdc1 	bl	8000288 <__aeabi_dsub>
 8018706:	a36e      	add	r3, pc, #440	; (adr r3, 80188c0 <_dtoa_r+0x2e0>)
 8018708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801870c:	f7e7 ff74 	bl	80005f8 <__aeabi_dmul>
 8018710:	a36d      	add	r3, pc, #436	; (adr r3, 80188c8 <_dtoa_r+0x2e8>)
 8018712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018716:	f7e7 fdb9 	bl	800028c <__adddf3>
 801871a:	4606      	mov	r6, r0
 801871c:	4628      	mov	r0, r5
 801871e:	460f      	mov	r7, r1
 8018720:	f7e7 ff00 	bl	8000524 <__aeabi_i2d>
 8018724:	a36a      	add	r3, pc, #424	; (adr r3, 80188d0 <_dtoa_r+0x2f0>)
 8018726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801872a:	f7e7 ff65 	bl	80005f8 <__aeabi_dmul>
 801872e:	4602      	mov	r2, r0
 8018730:	460b      	mov	r3, r1
 8018732:	4630      	mov	r0, r6
 8018734:	4639      	mov	r1, r7
 8018736:	f7e7 fda9 	bl	800028c <__adddf3>
 801873a:	4606      	mov	r6, r0
 801873c:	460f      	mov	r7, r1
 801873e:	f7e8 fa0b 	bl	8000b58 <__aeabi_d2iz>
 8018742:	2200      	movs	r2, #0
 8018744:	4682      	mov	sl, r0
 8018746:	2300      	movs	r3, #0
 8018748:	4630      	mov	r0, r6
 801874a:	4639      	mov	r1, r7
 801874c:	f7e8 f9c6 	bl	8000adc <__aeabi_dcmplt>
 8018750:	b148      	cbz	r0, 8018766 <_dtoa_r+0x186>
 8018752:	4650      	mov	r0, sl
 8018754:	f7e7 fee6 	bl	8000524 <__aeabi_i2d>
 8018758:	4632      	mov	r2, r6
 801875a:	463b      	mov	r3, r7
 801875c:	f7e8 f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8018760:	b908      	cbnz	r0, 8018766 <_dtoa_r+0x186>
 8018762:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018766:	f1ba 0f16 	cmp.w	sl, #22
 801876a:	d854      	bhi.n	8018816 <_dtoa_r+0x236>
 801876c:	4b61      	ldr	r3, [pc, #388]	; (80188f4 <_dtoa_r+0x314>)
 801876e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801877a:	f7e8 f9af 	bl	8000adc <__aeabi_dcmplt>
 801877e:	2800      	cmp	r0, #0
 8018780:	d04b      	beq.n	801881a <_dtoa_r+0x23a>
 8018782:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018786:	2300      	movs	r3, #0
 8018788:	930e      	str	r3, [sp, #56]	; 0x38
 801878a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801878c:	1b5d      	subs	r5, r3, r5
 801878e:	1e6b      	subs	r3, r5, #1
 8018790:	9304      	str	r3, [sp, #16]
 8018792:	bf43      	ittte	mi
 8018794:	2300      	movmi	r3, #0
 8018796:	f1c5 0801 	rsbmi	r8, r5, #1
 801879a:	9304      	strmi	r3, [sp, #16]
 801879c:	f04f 0800 	movpl.w	r8, #0
 80187a0:	f1ba 0f00 	cmp.w	sl, #0
 80187a4:	db3b      	blt.n	801881e <_dtoa_r+0x23e>
 80187a6:	9b04      	ldr	r3, [sp, #16]
 80187a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80187ac:	4453      	add	r3, sl
 80187ae:	9304      	str	r3, [sp, #16]
 80187b0:	2300      	movs	r3, #0
 80187b2:	9306      	str	r3, [sp, #24]
 80187b4:	9b05      	ldr	r3, [sp, #20]
 80187b6:	2b09      	cmp	r3, #9
 80187b8:	d869      	bhi.n	801888e <_dtoa_r+0x2ae>
 80187ba:	2b05      	cmp	r3, #5
 80187bc:	bfc4      	itt	gt
 80187be:	3b04      	subgt	r3, #4
 80187c0:	9305      	strgt	r3, [sp, #20]
 80187c2:	9b05      	ldr	r3, [sp, #20]
 80187c4:	f1a3 0302 	sub.w	r3, r3, #2
 80187c8:	bfcc      	ite	gt
 80187ca:	2500      	movgt	r5, #0
 80187cc:	2501      	movle	r5, #1
 80187ce:	2b03      	cmp	r3, #3
 80187d0:	d869      	bhi.n	80188a6 <_dtoa_r+0x2c6>
 80187d2:	e8df f003 	tbb	[pc, r3]
 80187d6:	4e2c      	.short	0x4e2c
 80187d8:	5a4c      	.short	0x5a4c
 80187da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80187de:	441d      	add	r5, r3
 80187e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80187e4:	2b20      	cmp	r3, #32
 80187e6:	bfc1      	itttt	gt
 80187e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80187ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80187f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80187f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80187f8:	bfda      	itte	le
 80187fa:	f1c3 0320 	rsble	r3, r3, #32
 80187fe:	fa06 f003 	lslle.w	r0, r6, r3
 8018802:	4318      	orrgt	r0, r3
 8018804:	f7e7 fe7e 	bl	8000504 <__aeabi_ui2d>
 8018808:	2301      	movs	r3, #1
 801880a:	4606      	mov	r6, r0
 801880c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018810:	3d01      	subs	r5, #1
 8018812:	9310      	str	r3, [sp, #64]	; 0x40
 8018814:	e771      	b.n	80186fa <_dtoa_r+0x11a>
 8018816:	2301      	movs	r3, #1
 8018818:	e7b6      	b.n	8018788 <_dtoa_r+0x1a8>
 801881a:	900e      	str	r0, [sp, #56]	; 0x38
 801881c:	e7b5      	b.n	801878a <_dtoa_r+0x1aa>
 801881e:	f1ca 0300 	rsb	r3, sl, #0
 8018822:	9306      	str	r3, [sp, #24]
 8018824:	2300      	movs	r3, #0
 8018826:	eba8 080a 	sub.w	r8, r8, sl
 801882a:	930d      	str	r3, [sp, #52]	; 0x34
 801882c:	e7c2      	b.n	80187b4 <_dtoa_r+0x1d4>
 801882e:	2300      	movs	r3, #0
 8018830:	9308      	str	r3, [sp, #32]
 8018832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018834:	2b00      	cmp	r3, #0
 8018836:	dc39      	bgt.n	80188ac <_dtoa_r+0x2cc>
 8018838:	f04f 0901 	mov.w	r9, #1
 801883c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018840:	464b      	mov	r3, r9
 8018842:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018846:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018848:	2200      	movs	r2, #0
 801884a:	6042      	str	r2, [r0, #4]
 801884c:	2204      	movs	r2, #4
 801884e:	f102 0614 	add.w	r6, r2, #20
 8018852:	429e      	cmp	r6, r3
 8018854:	6841      	ldr	r1, [r0, #4]
 8018856:	d92f      	bls.n	80188b8 <_dtoa_r+0x2d8>
 8018858:	4620      	mov	r0, r4
 801885a:	f000 fcf9 	bl	8019250 <_Balloc>
 801885e:	9000      	str	r0, [sp, #0]
 8018860:	2800      	cmp	r0, #0
 8018862:	d14b      	bne.n	80188fc <_dtoa_r+0x31c>
 8018864:	4b24      	ldr	r3, [pc, #144]	; (80188f8 <_dtoa_r+0x318>)
 8018866:	4602      	mov	r2, r0
 8018868:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801886c:	e6d1      	b.n	8018612 <_dtoa_r+0x32>
 801886e:	2301      	movs	r3, #1
 8018870:	e7de      	b.n	8018830 <_dtoa_r+0x250>
 8018872:	2300      	movs	r3, #0
 8018874:	9308      	str	r3, [sp, #32]
 8018876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018878:	eb0a 0903 	add.w	r9, sl, r3
 801887c:	f109 0301 	add.w	r3, r9, #1
 8018880:	2b01      	cmp	r3, #1
 8018882:	9301      	str	r3, [sp, #4]
 8018884:	bfb8      	it	lt
 8018886:	2301      	movlt	r3, #1
 8018888:	e7dd      	b.n	8018846 <_dtoa_r+0x266>
 801888a:	2301      	movs	r3, #1
 801888c:	e7f2      	b.n	8018874 <_dtoa_r+0x294>
 801888e:	2501      	movs	r5, #1
 8018890:	2300      	movs	r3, #0
 8018892:	9305      	str	r3, [sp, #20]
 8018894:	9508      	str	r5, [sp, #32]
 8018896:	f04f 39ff 	mov.w	r9, #4294967295
 801889a:	2200      	movs	r2, #0
 801889c:	f8cd 9004 	str.w	r9, [sp, #4]
 80188a0:	2312      	movs	r3, #18
 80188a2:	9209      	str	r2, [sp, #36]	; 0x24
 80188a4:	e7cf      	b.n	8018846 <_dtoa_r+0x266>
 80188a6:	2301      	movs	r3, #1
 80188a8:	9308      	str	r3, [sp, #32]
 80188aa:	e7f4      	b.n	8018896 <_dtoa_r+0x2b6>
 80188ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80188b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80188b4:	464b      	mov	r3, r9
 80188b6:	e7c6      	b.n	8018846 <_dtoa_r+0x266>
 80188b8:	3101      	adds	r1, #1
 80188ba:	6041      	str	r1, [r0, #4]
 80188bc:	0052      	lsls	r2, r2, #1
 80188be:	e7c6      	b.n	801884e <_dtoa_r+0x26e>
 80188c0:	636f4361 	.word	0x636f4361
 80188c4:	3fd287a7 	.word	0x3fd287a7
 80188c8:	8b60c8b3 	.word	0x8b60c8b3
 80188cc:	3fc68a28 	.word	0x3fc68a28
 80188d0:	509f79fb 	.word	0x509f79fb
 80188d4:	3fd34413 	.word	0x3fd34413
 80188d8:	0801ad81 	.word	0x0801ad81
 80188dc:	0801ad98 	.word	0x0801ad98
 80188e0:	7ff00000 	.word	0x7ff00000
 80188e4:	0801ad7d 	.word	0x0801ad7d
 80188e8:	0801ad74 	.word	0x0801ad74
 80188ec:	0801ad51 	.word	0x0801ad51
 80188f0:	3ff80000 	.word	0x3ff80000
 80188f4:	0801ae90 	.word	0x0801ae90
 80188f8:	0801adf7 	.word	0x0801adf7
 80188fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188fe:	9a00      	ldr	r2, [sp, #0]
 8018900:	601a      	str	r2, [r3, #0]
 8018902:	9b01      	ldr	r3, [sp, #4]
 8018904:	2b0e      	cmp	r3, #14
 8018906:	f200 80ad 	bhi.w	8018a64 <_dtoa_r+0x484>
 801890a:	2d00      	cmp	r5, #0
 801890c:	f000 80aa 	beq.w	8018a64 <_dtoa_r+0x484>
 8018910:	f1ba 0f00 	cmp.w	sl, #0
 8018914:	dd36      	ble.n	8018984 <_dtoa_r+0x3a4>
 8018916:	4ac3      	ldr	r2, [pc, #780]	; (8018c24 <_dtoa_r+0x644>)
 8018918:	f00a 030f 	and.w	r3, sl, #15
 801891c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018920:	ed93 7b00 	vldr	d7, [r3]
 8018924:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018928:	ea4f 172a 	mov.w	r7, sl, asr #4
 801892c:	eeb0 8a47 	vmov.f32	s16, s14
 8018930:	eef0 8a67 	vmov.f32	s17, s15
 8018934:	d016      	beq.n	8018964 <_dtoa_r+0x384>
 8018936:	4bbc      	ldr	r3, [pc, #752]	; (8018c28 <_dtoa_r+0x648>)
 8018938:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801893c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018940:	f7e7 ff84 	bl	800084c <__aeabi_ddiv>
 8018944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018948:	f007 070f 	and.w	r7, r7, #15
 801894c:	2503      	movs	r5, #3
 801894e:	4eb6      	ldr	r6, [pc, #728]	; (8018c28 <_dtoa_r+0x648>)
 8018950:	b957      	cbnz	r7, 8018968 <_dtoa_r+0x388>
 8018952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018956:	ec53 2b18 	vmov	r2, r3, d8
 801895a:	f7e7 ff77 	bl	800084c <__aeabi_ddiv>
 801895e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018962:	e029      	b.n	80189b8 <_dtoa_r+0x3d8>
 8018964:	2502      	movs	r5, #2
 8018966:	e7f2      	b.n	801894e <_dtoa_r+0x36e>
 8018968:	07f9      	lsls	r1, r7, #31
 801896a:	d508      	bpl.n	801897e <_dtoa_r+0x39e>
 801896c:	ec51 0b18 	vmov	r0, r1, d8
 8018970:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018974:	f7e7 fe40 	bl	80005f8 <__aeabi_dmul>
 8018978:	ec41 0b18 	vmov	d8, r0, r1
 801897c:	3501      	adds	r5, #1
 801897e:	107f      	asrs	r7, r7, #1
 8018980:	3608      	adds	r6, #8
 8018982:	e7e5      	b.n	8018950 <_dtoa_r+0x370>
 8018984:	f000 80a6 	beq.w	8018ad4 <_dtoa_r+0x4f4>
 8018988:	f1ca 0600 	rsb	r6, sl, #0
 801898c:	4ba5      	ldr	r3, [pc, #660]	; (8018c24 <_dtoa_r+0x644>)
 801898e:	4fa6      	ldr	r7, [pc, #664]	; (8018c28 <_dtoa_r+0x648>)
 8018990:	f006 020f 	and.w	r2, r6, #15
 8018994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801899c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80189a0:	f7e7 fe2a 	bl	80005f8 <__aeabi_dmul>
 80189a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189a8:	1136      	asrs	r6, r6, #4
 80189aa:	2300      	movs	r3, #0
 80189ac:	2502      	movs	r5, #2
 80189ae:	2e00      	cmp	r6, #0
 80189b0:	f040 8085 	bne.w	8018abe <_dtoa_r+0x4de>
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d1d2      	bne.n	801895e <_dtoa_r+0x37e>
 80189b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	f000 808c 	beq.w	8018ad8 <_dtoa_r+0x4f8>
 80189c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80189c4:	4b99      	ldr	r3, [pc, #612]	; (8018c2c <_dtoa_r+0x64c>)
 80189c6:	2200      	movs	r2, #0
 80189c8:	4630      	mov	r0, r6
 80189ca:	4639      	mov	r1, r7
 80189cc:	f7e8 f886 	bl	8000adc <__aeabi_dcmplt>
 80189d0:	2800      	cmp	r0, #0
 80189d2:	f000 8081 	beq.w	8018ad8 <_dtoa_r+0x4f8>
 80189d6:	9b01      	ldr	r3, [sp, #4]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d07d      	beq.n	8018ad8 <_dtoa_r+0x4f8>
 80189dc:	f1b9 0f00 	cmp.w	r9, #0
 80189e0:	dd3c      	ble.n	8018a5c <_dtoa_r+0x47c>
 80189e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80189e6:	9307      	str	r3, [sp, #28]
 80189e8:	2200      	movs	r2, #0
 80189ea:	4b91      	ldr	r3, [pc, #580]	; (8018c30 <_dtoa_r+0x650>)
 80189ec:	4630      	mov	r0, r6
 80189ee:	4639      	mov	r1, r7
 80189f0:	f7e7 fe02 	bl	80005f8 <__aeabi_dmul>
 80189f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189f8:	3501      	adds	r5, #1
 80189fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80189fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018a02:	4628      	mov	r0, r5
 8018a04:	f7e7 fd8e 	bl	8000524 <__aeabi_i2d>
 8018a08:	4632      	mov	r2, r6
 8018a0a:	463b      	mov	r3, r7
 8018a0c:	f7e7 fdf4 	bl	80005f8 <__aeabi_dmul>
 8018a10:	4b88      	ldr	r3, [pc, #544]	; (8018c34 <_dtoa_r+0x654>)
 8018a12:	2200      	movs	r2, #0
 8018a14:	f7e7 fc3a 	bl	800028c <__adddf3>
 8018a18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a20:	9303      	str	r3, [sp, #12]
 8018a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d15c      	bne.n	8018ae2 <_dtoa_r+0x502>
 8018a28:	4b83      	ldr	r3, [pc, #524]	; (8018c38 <_dtoa_r+0x658>)
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	4630      	mov	r0, r6
 8018a2e:	4639      	mov	r1, r7
 8018a30:	f7e7 fc2a 	bl	8000288 <__aeabi_dsub>
 8018a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018a38:	4606      	mov	r6, r0
 8018a3a:	460f      	mov	r7, r1
 8018a3c:	f7e8 f86c 	bl	8000b18 <__aeabi_dcmpgt>
 8018a40:	2800      	cmp	r0, #0
 8018a42:	f040 8296 	bne.w	8018f72 <_dtoa_r+0x992>
 8018a46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018a4a:	4630      	mov	r0, r6
 8018a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a50:	4639      	mov	r1, r7
 8018a52:	f7e8 f843 	bl	8000adc <__aeabi_dcmplt>
 8018a56:	2800      	cmp	r0, #0
 8018a58:	f040 8288 	bne.w	8018f6c <_dtoa_r+0x98c>
 8018a5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018a60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018a64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	f2c0 8158 	blt.w	8018d1c <_dtoa_r+0x73c>
 8018a6c:	f1ba 0f0e 	cmp.w	sl, #14
 8018a70:	f300 8154 	bgt.w	8018d1c <_dtoa_r+0x73c>
 8018a74:	4b6b      	ldr	r3, [pc, #428]	; (8018c24 <_dtoa_r+0x644>)
 8018a76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018a7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	f280 80e3 	bge.w	8018c4c <_dtoa_r+0x66c>
 8018a86:	9b01      	ldr	r3, [sp, #4]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	f300 80df 	bgt.w	8018c4c <_dtoa_r+0x66c>
 8018a8e:	f040 826d 	bne.w	8018f6c <_dtoa_r+0x98c>
 8018a92:	4b69      	ldr	r3, [pc, #420]	; (8018c38 <_dtoa_r+0x658>)
 8018a94:	2200      	movs	r2, #0
 8018a96:	4640      	mov	r0, r8
 8018a98:	4649      	mov	r1, r9
 8018a9a:	f7e7 fdad 	bl	80005f8 <__aeabi_dmul>
 8018a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018aa2:	f7e8 f82f 	bl	8000b04 <__aeabi_dcmpge>
 8018aa6:	9e01      	ldr	r6, [sp, #4]
 8018aa8:	4637      	mov	r7, r6
 8018aaa:	2800      	cmp	r0, #0
 8018aac:	f040 8243 	bne.w	8018f36 <_dtoa_r+0x956>
 8018ab0:	9d00      	ldr	r5, [sp, #0]
 8018ab2:	2331      	movs	r3, #49	; 0x31
 8018ab4:	f805 3b01 	strb.w	r3, [r5], #1
 8018ab8:	f10a 0a01 	add.w	sl, sl, #1
 8018abc:	e23f      	b.n	8018f3e <_dtoa_r+0x95e>
 8018abe:	07f2      	lsls	r2, r6, #31
 8018ac0:	d505      	bpl.n	8018ace <_dtoa_r+0x4ee>
 8018ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ac6:	f7e7 fd97 	bl	80005f8 <__aeabi_dmul>
 8018aca:	3501      	adds	r5, #1
 8018acc:	2301      	movs	r3, #1
 8018ace:	1076      	asrs	r6, r6, #1
 8018ad0:	3708      	adds	r7, #8
 8018ad2:	e76c      	b.n	80189ae <_dtoa_r+0x3ce>
 8018ad4:	2502      	movs	r5, #2
 8018ad6:	e76f      	b.n	80189b8 <_dtoa_r+0x3d8>
 8018ad8:	9b01      	ldr	r3, [sp, #4]
 8018ada:	f8cd a01c 	str.w	sl, [sp, #28]
 8018ade:	930c      	str	r3, [sp, #48]	; 0x30
 8018ae0:	e78d      	b.n	80189fe <_dtoa_r+0x41e>
 8018ae2:	9900      	ldr	r1, [sp, #0]
 8018ae4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018ae8:	4b4e      	ldr	r3, [pc, #312]	; (8018c24 <_dtoa_r+0x644>)
 8018aea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018aee:	4401      	add	r1, r0
 8018af0:	9102      	str	r1, [sp, #8]
 8018af2:	9908      	ldr	r1, [sp, #32]
 8018af4:	eeb0 8a47 	vmov.f32	s16, s14
 8018af8:	eef0 8a67 	vmov.f32	s17, s15
 8018afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018b00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018b04:	2900      	cmp	r1, #0
 8018b06:	d045      	beq.n	8018b94 <_dtoa_r+0x5b4>
 8018b08:	494c      	ldr	r1, [pc, #304]	; (8018c3c <_dtoa_r+0x65c>)
 8018b0a:	2000      	movs	r0, #0
 8018b0c:	f7e7 fe9e 	bl	800084c <__aeabi_ddiv>
 8018b10:	ec53 2b18 	vmov	r2, r3, d8
 8018b14:	f7e7 fbb8 	bl	8000288 <__aeabi_dsub>
 8018b18:	9d00      	ldr	r5, [sp, #0]
 8018b1a:	ec41 0b18 	vmov	d8, r0, r1
 8018b1e:	4639      	mov	r1, r7
 8018b20:	4630      	mov	r0, r6
 8018b22:	f7e8 f819 	bl	8000b58 <__aeabi_d2iz>
 8018b26:	900c      	str	r0, [sp, #48]	; 0x30
 8018b28:	f7e7 fcfc 	bl	8000524 <__aeabi_i2d>
 8018b2c:	4602      	mov	r2, r0
 8018b2e:	460b      	mov	r3, r1
 8018b30:	4630      	mov	r0, r6
 8018b32:	4639      	mov	r1, r7
 8018b34:	f7e7 fba8 	bl	8000288 <__aeabi_dsub>
 8018b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018b3a:	3330      	adds	r3, #48	; 0x30
 8018b3c:	f805 3b01 	strb.w	r3, [r5], #1
 8018b40:	ec53 2b18 	vmov	r2, r3, d8
 8018b44:	4606      	mov	r6, r0
 8018b46:	460f      	mov	r7, r1
 8018b48:	f7e7 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8018b4c:	2800      	cmp	r0, #0
 8018b4e:	d165      	bne.n	8018c1c <_dtoa_r+0x63c>
 8018b50:	4632      	mov	r2, r6
 8018b52:	463b      	mov	r3, r7
 8018b54:	4935      	ldr	r1, [pc, #212]	; (8018c2c <_dtoa_r+0x64c>)
 8018b56:	2000      	movs	r0, #0
 8018b58:	f7e7 fb96 	bl	8000288 <__aeabi_dsub>
 8018b5c:	ec53 2b18 	vmov	r2, r3, d8
 8018b60:	f7e7 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8018b64:	2800      	cmp	r0, #0
 8018b66:	f040 80b9 	bne.w	8018cdc <_dtoa_r+0x6fc>
 8018b6a:	9b02      	ldr	r3, [sp, #8]
 8018b6c:	429d      	cmp	r5, r3
 8018b6e:	f43f af75 	beq.w	8018a5c <_dtoa_r+0x47c>
 8018b72:	4b2f      	ldr	r3, [pc, #188]	; (8018c30 <_dtoa_r+0x650>)
 8018b74:	ec51 0b18 	vmov	r0, r1, d8
 8018b78:	2200      	movs	r2, #0
 8018b7a:	f7e7 fd3d 	bl	80005f8 <__aeabi_dmul>
 8018b7e:	4b2c      	ldr	r3, [pc, #176]	; (8018c30 <_dtoa_r+0x650>)
 8018b80:	ec41 0b18 	vmov	d8, r0, r1
 8018b84:	2200      	movs	r2, #0
 8018b86:	4630      	mov	r0, r6
 8018b88:	4639      	mov	r1, r7
 8018b8a:	f7e7 fd35 	bl	80005f8 <__aeabi_dmul>
 8018b8e:	4606      	mov	r6, r0
 8018b90:	460f      	mov	r7, r1
 8018b92:	e7c4      	b.n	8018b1e <_dtoa_r+0x53e>
 8018b94:	ec51 0b17 	vmov	r0, r1, d7
 8018b98:	f7e7 fd2e 	bl	80005f8 <__aeabi_dmul>
 8018b9c:	9b02      	ldr	r3, [sp, #8]
 8018b9e:	9d00      	ldr	r5, [sp, #0]
 8018ba0:	930c      	str	r3, [sp, #48]	; 0x30
 8018ba2:	ec41 0b18 	vmov	d8, r0, r1
 8018ba6:	4639      	mov	r1, r7
 8018ba8:	4630      	mov	r0, r6
 8018baa:	f7e7 ffd5 	bl	8000b58 <__aeabi_d2iz>
 8018bae:	9011      	str	r0, [sp, #68]	; 0x44
 8018bb0:	f7e7 fcb8 	bl	8000524 <__aeabi_i2d>
 8018bb4:	4602      	mov	r2, r0
 8018bb6:	460b      	mov	r3, r1
 8018bb8:	4630      	mov	r0, r6
 8018bba:	4639      	mov	r1, r7
 8018bbc:	f7e7 fb64 	bl	8000288 <__aeabi_dsub>
 8018bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018bc2:	3330      	adds	r3, #48	; 0x30
 8018bc4:	f805 3b01 	strb.w	r3, [r5], #1
 8018bc8:	9b02      	ldr	r3, [sp, #8]
 8018bca:	429d      	cmp	r5, r3
 8018bcc:	4606      	mov	r6, r0
 8018bce:	460f      	mov	r7, r1
 8018bd0:	f04f 0200 	mov.w	r2, #0
 8018bd4:	d134      	bne.n	8018c40 <_dtoa_r+0x660>
 8018bd6:	4b19      	ldr	r3, [pc, #100]	; (8018c3c <_dtoa_r+0x65c>)
 8018bd8:	ec51 0b18 	vmov	r0, r1, d8
 8018bdc:	f7e7 fb56 	bl	800028c <__adddf3>
 8018be0:	4602      	mov	r2, r0
 8018be2:	460b      	mov	r3, r1
 8018be4:	4630      	mov	r0, r6
 8018be6:	4639      	mov	r1, r7
 8018be8:	f7e7 ff96 	bl	8000b18 <__aeabi_dcmpgt>
 8018bec:	2800      	cmp	r0, #0
 8018bee:	d175      	bne.n	8018cdc <_dtoa_r+0x6fc>
 8018bf0:	ec53 2b18 	vmov	r2, r3, d8
 8018bf4:	4911      	ldr	r1, [pc, #68]	; (8018c3c <_dtoa_r+0x65c>)
 8018bf6:	2000      	movs	r0, #0
 8018bf8:	f7e7 fb46 	bl	8000288 <__aeabi_dsub>
 8018bfc:	4602      	mov	r2, r0
 8018bfe:	460b      	mov	r3, r1
 8018c00:	4630      	mov	r0, r6
 8018c02:	4639      	mov	r1, r7
 8018c04:	f7e7 ff6a 	bl	8000adc <__aeabi_dcmplt>
 8018c08:	2800      	cmp	r0, #0
 8018c0a:	f43f af27 	beq.w	8018a5c <_dtoa_r+0x47c>
 8018c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018c10:	1e6b      	subs	r3, r5, #1
 8018c12:	930c      	str	r3, [sp, #48]	; 0x30
 8018c14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018c18:	2b30      	cmp	r3, #48	; 0x30
 8018c1a:	d0f8      	beq.n	8018c0e <_dtoa_r+0x62e>
 8018c1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018c20:	e04a      	b.n	8018cb8 <_dtoa_r+0x6d8>
 8018c22:	bf00      	nop
 8018c24:	0801ae90 	.word	0x0801ae90
 8018c28:	0801ae68 	.word	0x0801ae68
 8018c2c:	3ff00000 	.word	0x3ff00000
 8018c30:	40240000 	.word	0x40240000
 8018c34:	401c0000 	.word	0x401c0000
 8018c38:	40140000 	.word	0x40140000
 8018c3c:	3fe00000 	.word	0x3fe00000
 8018c40:	4baf      	ldr	r3, [pc, #700]	; (8018f00 <_dtoa_r+0x920>)
 8018c42:	f7e7 fcd9 	bl	80005f8 <__aeabi_dmul>
 8018c46:	4606      	mov	r6, r0
 8018c48:	460f      	mov	r7, r1
 8018c4a:	e7ac      	b.n	8018ba6 <_dtoa_r+0x5c6>
 8018c4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018c50:	9d00      	ldr	r5, [sp, #0]
 8018c52:	4642      	mov	r2, r8
 8018c54:	464b      	mov	r3, r9
 8018c56:	4630      	mov	r0, r6
 8018c58:	4639      	mov	r1, r7
 8018c5a:	f7e7 fdf7 	bl	800084c <__aeabi_ddiv>
 8018c5e:	f7e7 ff7b 	bl	8000b58 <__aeabi_d2iz>
 8018c62:	9002      	str	r0, [sp, #8]
 8018c64:	f7e7 fc5e 	bl	8000524 <__aeabi_i2d>
 8018c68:	4642      	mov	r2, r8
 8018c6a:	464b      	mov	r3, r9
 8018c6c:	f7e7 fcc4 	bl	80005f8 <__aeabi_dmul>
 8018c70:	4602      	mov	r2, r0
 8018c72:	460b      	mov	r3, r1
 8018c74:	4630      	mov	r0, r6
 8018c76:	4639      	mov	r1, r7
 8018c78:	f7e7 fb06 	bl	8000288 <__aeabi_dsub>
 8018c7c:	9e02      	ldr	r6, [sp, #8]
 8018c7e:	9f01      	ldr	r7, [sp, #4]
 8018c80:	3630      	adds	r6, #48	; 0x30
 8018c82:	f805 6b01 	strb.w	r6, [r5], #1
 8018c86:	9e00      	ldr	r6, [sp, #0]
 8018c88:	1bae      	subs	r6, r5, r6
 8018c8a:	42b7      	cmp	r7, r6
 8018c8c:	4602      	mov	r2, r0
 8018c8e:	460b      	mov	r3, r1
 8018c90:	d137      	bne.n	8018d02 <_dtoa_r+0x722>
 8018c92:	f7e7 fafb 	bl	800028c <__adddf3>
 8018c96:	4642      	mov	r2, r8
 8018c98:	464b      	mov	r3, r9
 8018c9a:	4606      	mov	r6, r0
 8018c9c:	460f      	mov	r7, r1
 8018c9e:	f7e7 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 8018ca2:	b9c8      	cbnz	r0, 8018cd8 <_dtoa_r+0x6f8>
 8018ca4:	4642      	mov	r2, r8
 8018ca6:	464b      	mov	r3, r9
 8018ca8:	4630      	mov	r0, r6
 8018caa:	4639      	mov	r1, r7
 8018cac:	f7e7 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8018cb0:	b110      	cbz	r0, 8018cb8 <_dtoa_r+0x6d8>
 8018cb2:	9b02      	ldr	r3, [sp, #8]
 8018cb4:	07d9      	lsls	r1, r3, #31
 8018cb6:	d40f      	bmi.n	8018cd8 <_dtoa_r+0x6f8>
 8018cb8:	4620      	mov	r0, r4
 8018cba:	4659      	mov	r1, fp
 8018cbc:	f000 fb08 	bl	80192d0 <_Bfree>
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	702b      	strb	r3, [r5, #0]
 8018cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cc6:	f10a 0001 	add.w	r0, sl, #1
 8018cca:	6018      	str	r0, [r3, #0]
 8018ccc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	f43f acd8 	beq.w	8018684 <_dtoa_r+0xa4>
 8018cd4:	601d      	str	r5, [r3, #0]
 8018cd6:	e4d5      	b.n	8018684 <_dtoa_r+0xa4>
 8018cd8:	f8cd a01c 	str.w	sl, [sp, #28]
 8018cdc:	462b      	mov	r3, r5
 8018cde:	461d      	mov	r5, r3
 8018ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ce4:	2a39      	cmp	r2, #57	; 0x39
 8018ce6:	d108      	bne.n	8018cfa <_dtoa_r+0x71a>
 8018ce8:	9a00      	ldr	r2, [sp, #0]
 8018cea:	429a      	cmp	r2, r3
 8018cec:	d1f7      	bne.n	8018cde <_dtoa_r+0x6fe>
 8018cee:	9a07      	ldr	r2, [sp, #28]
 8018cf0:	9900      	ldr	r1, [sp, #0]
 8018cf2:	3201      	adds	r2, #1
 8018cf4:	9207      	str	r2, [sp, #28]
 8018cf6:	2230      	movs	r2, #48	; 0x30
 8018cf8:	700a      	strb	r2, [r1, #0]
 8018cfa:	781a      	ldrb	r2, [r3, #0]
 8018cfc:	3201      	adds	r2, #1
 8018cfe:	701a      	strb	r2, [r3, #0]
 8018d00:	e78c      	b.n	8018c1c <_dtoa_r+0x63c>
 8018d02:	4b7f      	ldr	r3, [pc, #508]	; (8018f00 <_dtoa_r+0x920>)
 8018d04:	2200      	movs	r2, #0
 8018d06:	f7e7 fc77 	bl	80005f8 <__aeabi_dmul>
 8018d0a:	2200      	movs	r2, #0
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	4606      	mov	r6, r0
 8018d10:	460f      	mov	r7, r1
 8018d12:	f7e7 fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 8018d16:	2800      	cmp	r0, #0
 8018d18:	d09b      	beq.n	8018c52 <_dtoa_r+0x672>
 8018d1a:	e7cd      	b.n	8018cb8 <_dtoa_r+0x6d8>
 8018d1c:	9a08      	ldr	r2, [sp, #32]
 8018d1e:	2a00      	cmp	r2, #0
 8018d20:	f000 80c4 	beq.w	8018eac <_dtoa_r+0x8cc>
 8018d24:	9a05      	ldr	r2, [sp, #20]
 8018d26:	2a01      	cmp	r2, #1
 8018d28:	f300 80a8 	bgt.w	8018e7c <_dtoa_r+0x89c>
 8018d2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018d2e:	2a00      	cmp	r2, #0
 8018d30:	f000 80a0 	beq.w	8018e74 <_dtoa_r+0x894>
 8018d34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018d38:	9e06      	ldr	r6, [sp, #24]
 8018d3a:	4645      	mov	r5, r8
 8018d3c:	9a04      	ldr	r2, [sp, #16]
 8018d3e:	2101      	movs	r1, #1
 8018d40:	441a      	add	r2, r3
 8018d42:	4620      	mov	r0, r4
 8018d44:	4498      	add	r8, r3
 8018d46:	9204      	str	r2, [sp, #16]
 8018d48:	f000 fb7e 	bl	8019448 <__i2b>
 8018d4c:	4607      	mov	r7, r0
 8018d4e:	2d00      	cmp	r5, #0
 8018d50:	dd0b      	ble.n	8018d6a <_dtoa_r+0x78a>
 8018d52:	9b04      	ldr	r3, [sp, #16]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	dd08      	ble.n	8018d6a <_dtoa_r+0x78a>
 8018d58:	42ab      	cmp	r3, r5
 8018d5a:	9a04      	ldr	r2, [sp, #16]
 8018d5c:	bfa8      	it	ge
 8018d5e:	462b      	movge	r3, r5
 8018d60:	eba8 0803 	sub.w	r8, r8, r3
 8018d64:	1aed      	subs	r5, r5, r3
 8018d66:	1ad3      	subs	r3, r2, r3
 8018d68:	9304      	str	r3, [sp, #16]
 8018d6a:	9b06      	ldr	r3, [sp, #24]
 8018d6c:	b1fb      	cbz	r3, 8018dae <_dtoa_r+0x7ce>
 8018d6e:	9b08      	ldr	r3, [sp, #32]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	f000 809f 	beq.w	8018eb4 <_dtoa_r+0x8d4>
 8018d76:	2e00      	cmp	r6, #0
 8018d78:	dd11      	ble.n	8018d9e <_dtoa_r+0x7be>
 8018d7a:	4639      	mov	r1, r7
 8018d7c:	4632      	mov	r2, r6
 8018d7e:	4620      	mov	r0, r4
 8018d80:	f000 fc1e 	bl	80195c0 <__pow5mult>
 8018d84:	465a      	mov	r2, fp
 8018d86:	4601      	mov	r1, r0
 8018d88:	4607      	mov	r7, r0
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	f000 fb72 	bl	8019474 <__multiply>
 8018d90:	4659      	mov	r1, fp
 8018d92:	9007      	str	r0, [sp, #28]
 8018d94:	4620      	mov	r0, r4
 8018d96:	f000 fa9b 	bl	80192d0 <_Bfree>
 8018d9a:	9b07      	ldr	r3, [sp, #28]
 8018d9c:	469b      	mov	fp, r3
 8018d9e:	9b06      	ldr	r3, [sp, #24]
 8018da0:	1b9a      	subs	r2, r3, r6
 8018da2:	d004      	beq.n	8018dae <_dtoa_r+0x7ce>
 8018da4:	4659      	mov	r1, fp
 8018da6:	4620      	mov	r0, r4
 8018da8:	f000 fc0a 	bl	80195c0 <__pow5mult>
 8018dac:	4683      	mov	fp, r0
 8018dae:	2101      	movs	r1, #1
 8018db0:	4620      	mov	r0, r4
 8018db2:	f000 fb49 	bl	8019448 <__i2b>
 8018db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	4606      	mov	r6, r0
 8018dbc:	dd7c      	ble.n	8018eb8 <_dtoa_r+0x8d8>
 8018dbe:	461a      	mov	r2, r3
 8018dc0:	4601      	mov	r1, r0
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	f000 fbfc 	bl	80195c0 <__pow5mult>
 8018dc8:	9b05      	ldr	r3, [sp, #20]
 8018dca:	2b01      	cmp	r3, #1
 8018dcc:	4606      	mov	r6, r0
 8018dce:	dd76      	ble.n	8018ebe <_dtoa_r+0x8de>
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	9306      	str	r3, [sp, #24]
 8018dd4:	6933      	ldr	r3, [r6, #16]
 8018dd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018dda:	6918      	ldr	r0, [r3, #16]
 8018ddc:	f000 fae4 	bl	80193a8 <__hi0bits>
 8018de0:	f1c0 0020 	rsb	r0, r0, #32
 8018de4:	9b04      	ldr	r3, [sp, #16]
 8018de6:	4418      	add	r0, r3
 8018de8:	f010 001f 	ands.w	r0, r0, #31
 8018dec:	f000 8086 	beq.w	8018efc <_dtoa_r+0x91c>
 8018df0:	f1c0 0320 	rsb	r3, r0, #32
 8018df4:	2b04      	cmp	r3, #4
 8018df6:	dd7f      	ble.n	8018ef8 <_dtoa_r+0x918>
 8018df8:	f1c0 001c 	rsb	r0, r0, #28
 8018dfc:	9b04      	ldr	r3, [sp, #16]
 8018dfe:	4403      	add	r3, r0
 8018e00:	4480      	add	r8, r0
 8018e02:	4405      	add	r5, r0
 8018e04:	9304      	str	r3, [sp, #16]
 8018e06:	f1b8 0f00 	cmp.w	r8, #0
 8018e0a:	dd05      	ble.n	8018e18 <_dtoa_r+0x838>
 8018e0c:	4659      	mov	r1, fp
 8018e0e:	4642      	mov	r2, r8
 8018e10:	4620      	mov	r0, r4
 8018e12:	f000 fc2f 	bl	8019674 <__lshift>
 8018e16:	4683      	mov	fp, r0
 8018e18:	9b04      	ldr	r3, [sp, #16]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	dd05      	ble.n	8018e2a <_dtoa_r+0x84a>
 8018e1e:	4631      	mov	r1, r6
 8018e20:	461a      	mov	r2, r3
 8018e22:	4620      	mov	r0, r4
 8018e24:	f000 fc26 	bl	8019674 <__lshift>
 8018e28:	4606      	mov	r6, r0
 8018e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d069      	beq.n	8018f04 <_dtoa_r+0x924>
 8018e30:	4631      	mov	r1, r6
 8018e32:	4658      	mov	r0, fp
 8018e34:	f000 fc8a 	bl	801974c <__mcmp>
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	da63      	bge.n	8018f04 <_dtoa_r+0x924>
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	4659      	mov	r1, fp
 8018e40:	220a      	movs	r2, #10
 8018e42:	4620      	mov	r0, r4
 8018e44:	f000 fa66 	bl	8019314 <__multadd>
 8018e48:	9b08      	ldr	r3, [sp, #32]
 8018e4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018e4e:	4683      	mov	fp, r0
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	f000 818f 	beq.w	8019174 <_dtoa_r+0xb94>
 8018e56:	4639      	mov	r1, r7
 8018e58:	2300      	movs	r3, #0
 8018e5a:	220a      	movs	r2, #10
 8018e5c:	4620      	mov	r0, r4
 8018e5e:	f000 fa59 	bl	8019314 <__multadd>
 8018e62:	f1b9 0f00 	cmp.w	r9, #0
 8018e66:	4607      	mov	r7, r0
 8018e68:	f300 808e 	bgt.w	8018f88 <_dtoa_r+0x9a8>
 8018e6c:	9b05      	ldr	r3, [sp, #20]
 8018e6e:	2b02      	cmp	r3, #2
 8018e70:	dc50      	bgt.n	8018f14 <_dtoa_r+0x934>
 8018e72:	e089      	b.n	8018f88 <_dtoa_r+0x9a8>
 8018e74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018e7a:	e75d      	b.n	8018d38 <_dtoa_r+0x758>
 8018e7c:	9b01      	ldr	r3, [sp, #4]
 8018e7e:	1e5e      	subs	r6, r3, #1
 8018e80:	9b06      	ldr	r3, [sp, #24]
 8018e82:	42b3      	cmp	r3, r6
 8018e84:	bfbf      	itttt	lt
 8018e86:	9b06      	ldrlt	r3, [sp, #24]
 8018e88:	9606      	strlt	r6, [sp, #24]
 8018e8a:	1af2      	sublt	r2, r6, r3
 8018e8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018e8e:	bfb6      	itet	lt
 8018e90:	189b      	addlt	r3, r3, r2
 8018e92:	1b9e      	subge	r6, r3, r6
 8018e94:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018e96:	9b01      	ldr	r3, [sp, #4]
 8018e98:	bfb8      	it	lt
 8018e9a:	2600      	movlt	r6, #0
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	bfb5      	itete	lt
 8018ea0:	eba8 0503 	sublt.w	r5, r8, r3
 8018ea4:	9b01      	ldrge	r3, [sp, #4]
 8018ea6:	2300      	movlt	r3, #0
 8018ea8:	4645      	movge	r5, r8
 8018eaa:	e747      	b.n	8018d3c <_dtoa_r+0x75c>
 8018eac:	9e06      	ldr	r6, [sp, #24]
 8018eae:	9f08      	ldr	r7, [sp, #32]
 8018eb0:	4645      	mov	r5, r8
 8018eb2:	e74c      	b.n	8018d4e <_dtoa_r+0x76e>
 8018eb4:	9a06      	ldr	r2, [sp, #24]
 8018eb6:	e775      	b.n	8018da4 <_dtoa_r+0x7c4>
 8018eb8:	9b05      	ldr	r3, [sp, #20]
 8018eba:	2b01      	cmp	r3, #1
 8018ebc:	dc18      	bgt.n	8018ef0 <_dtoa_r+0x910>
 8018ebe:	9b02      	ldr	r3, [sp, #8]
 8018ec0:	b9b3      	cbnz	r3, 8018ef0 <_dtoa_r+0x910>
 8018ec2:	9b03      	ldr	r3, [sp, #12]
 8018ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018ec8:	b9a3      	cbnz	r3, 8018ef4 <_dtoa_r+0x914>
 8018eca:	9b03      	ldr	r3, [sp, #12]
 8018ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018ed0:	0d1b      	lsrs	r3, r3, #20
 8018ed2:	051b      	lsls	r3, r3, #20
 8018ed4:	b12b      	cbz	r3, 8018ee2 <_dtoa_r+0x902>
 8018ed6:	9b04      	ldr	r3, [sp, #16]
 8018ed8:	3301      	adds	r3, #1
 8018eda:	9304      	str	r3, [sp, #16]
 8018edc:	f108 0801 	add.w	r8, r8, #1
 8018ee0:	2301      	movs	r3, #1
 8018ee2:	9306      	str	r3, [sp, #24]
 8018ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	f47f af74 	bne.w	8018dd4 <_dtoa_r+0x7f4>
 8018eec:	2001      	movs	r0, #1
 8018eee:	e779      	b.n	8018de4 <_dtoa_r+0x804>
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	e7f6      	b.n	8018ee2 <_dtoa_r+0x902>
 8018ef4:	9b02      	ldr	r3, [sp, #8]
 8018ef6:	e7f4      	b.n	8018ee2 <_dtoa_r+0x902>
 8018ef8:	d085      	beq.n	8018e06 <_dtoa_r+0x826>
 8018efa:	4618      	mov	r0, r3
 8018efc:	301c      	adds	r0, #28
 8018efe:	e77d      	b.n	8018dfc <_dtoa_r+0x81c>
 8018f00:	40240000 	.word	0x40240000
 8018f04:	9b01      	ldr	r3, [sp, #4]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	dc38      	bgt.n	8018f7c <_dtoa_r+0x99c>
 8018f0a:	9b05      	ldr	r3, [sp, #20]
 8018f0c:	2b02      	cmp	r3, #2
 8018f0e:	dd35      	ble.n	8018f7c <_dtoa_r+0x99c>
 8018f10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f14:	f1b9 0f00 	cmp.w	r9, #0
 8018f18:	d10d      	bne.n	8018f36 <_dtoa_r+0x956>
 8018f1a:	4631      	mov	r1, r6
 8018f1c:	464b      	mov	r3, r9
 8018f1e:	2205      	movs	r2, #5
 8018f20:	4620      	mov	r0, r4
 8018f22:	f000 f9f7 	bl	8019314 <__multadd>
 8018f26:	4601      	mov	r1, r0
 8018f28:	4606      	mov	r6, r0
 8018f2a:	4658      	mov	r0, fp
 8018f2c:	f000 fc0e 	bl	801974c <__mcmp>
 8018f30:	2800      	cmp	r0, #0
 8018f32:	f73f adbd 	bgt.w	8018ab0 <_dtoa_r+0x4d0>
 8018f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f38:	9d00      	ldr	r5, [sp, #0]
 8018f3a:	ea6f 0a03 	mvn.w	sl, r3
 8018f3e:	f04f 0800 	mov.w	r8, #0
 8018f42:	4631      	mov	r1, r6
 8018f44:	4620      	mov	r0, r4
 8018f46:	f000 f9c3 	bl	80192d0 <_Bfree>
 8018f4a:	2f00      	cmp	r7, #0
 8018f4c:	f43f aeb4 	beq.w	8018cb8 <_dtoa_r+0x6d8>
 8018f50:	f1b8 0f00 	cmp.w	r8, #0
 8018f54:	d005      	beq.n	8018f62 <_dtoa_r+0x982>
 8018f56:	45b8      	cmp	r8, r7
 8018f58:	d003      	beq.n	8018f62 <_dtoa_r+0x982>
 8018f5a:	4641      	mov	r1, r8
 8018f5c:	4620      	mov	r0, r4
 8018f5e:	f000 f9b7 	bl	80192d0 <_Bfree>
 8018f62:	4639      	mov	r1, r7
 8018f64:	4620      	mov	r0, r4
 8018f66:	f000 f9b3 	bl	80192d0 <_Bfree>
 8018f6a:	e6a5      	b.n	8018cb8 <_dtoa_r+0x6d8>
 8018f6c:	2600      	movs	r6, #0
 8018f6e:	4637      	mov	r7, r6
 8018f70:	e7e1      	b.n	8018f36 <_dtoa_r+0x956>
 8018f72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018f74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018f78:	4637      	mov	r7, r6
 8018f7a:	e599      	b.n	8018ab0 <_dtoa_r+0x4d0>
 8018f7c:	9b08      	ldr	r3, [sp, #32]
 8018f7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	f000 80fd 	beq.w	8019182 <_dtoa_r+0xba2>
 8018f88:	2d00      	cmp	r5, #0
 8018f8a:	dd05      	ble.n	8018f98 <_dtoa_r+0x9b8>
 8018f8c:	4639      	mov	r1, r7
 8018f8e:	462a      	mov	r2, r5
 8018f90:	4620      	mov	r0, r4
 8018f92:	f000 fb6f 	bl	8019674 <__lshift>
 8018f96:	4607      	mov	r7, r0
 8018f98:	9b06      	ldr	r3, [sp, #24]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d05c      	beq.n	8019058 <_dtoa_r+0xa78>
 8018f9e:	6879      	ldr	r1, [r7, #4]
 8018fa0:	4620      	mov	r0, r4
 8018fa2:	f000 f955 	bl	8019250 <_Balloc>
 8018fa6:	4605      	mov	r5, r0
 8018fa8:	b928      	cbnz	r0, 8018fb6 <_dtoa_r+0x9d6>
 8018faa:	4b80      	ldr	r3, [pc, #512]	; (80191ac <_dtoa_r+0xbcc>)
 8018fac:	4602      	mov	r2, r0
 8018fae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018fb2:	f7ff bb2e 	b.w	8018612 <_dtoa_r+0x32>
 8018fb6:	693a      	ldr	r2, [r7, #16]
 8018fb8:	3202      	adds	r2, #2
 8018fba:	0092      	lsls	r2, r2, #2
 8018fbc:	f107 010c 	add.w	r1, r7, #12
 8018fc0:	300c      	adds	r0, #12
 8018fc2:	f7fe fcc1 	bl	8017948 <memcpy>
 8018fc6:	2201      	movs	r2, #1
 8018fc8:	4629      	mov	r1, r5
 8018fca:	4620      	mov	r0, r4
 8018fcc:	f000 fb52 	bl	8019674 <__lshift>
 8018fd0:	9b00      	ldr	r3, [sp, #0]
 8018fd2:	3301      	adds	r3, #1
 8018fd4:	9301      	str	r3, [sp, #4]
 8018fd6:	9b00      	ldr	r3, [sp, #0]
 8018fd8:	444b      	add	r3, r9
 8018fda:	9307      	str	r3, [sp, #28]
 8018fdc:	9b02      	ldr	r3, [sp, #8]
 8018fde:	f003 0301 	and.w	r3, r3, #1
 8018fe2:	46b8      	mov	r8, r7
 8018fe4:	9306      	str	r3, [sp, #24]
 8018fe6:	4607      	mov	r7, r0
 8018fe8:	9b01      	ldr	r3, [sp, #4]
 8018fea:	4631      	mov	r1, r6
 8018fec:	3b01      	subs	r3, #1
 8018fee:	4658      	mov	r0, fp
 8018ff0:	9302      	str	r3, [sp, #8]
 8018ff2:	f7ff fa69 	bl	80184c8 <quorem>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	3330      	adds	r3, #48	; 0x30
 8018ffa:	9004      	str	r0, [sp, #16]
 8018ffc:	4641      	mov	r1, r8
 8018ffe:	4658      	mov	r0, fp
 8019000:	9308      	str	r3, [sp, #32]
 8019002:	f000 fba3 	bl	801974c <__mcmp>
 8019006:	463a      	mov	r2, r7
 8019008:	4681      	mov	r9, r0
 801900a:	4631      	mov	r1, r6
 801900c:	4620      	mov	r0, r4
 801900e:	f000 fbb9 	bl	8019784 <__mdiff>
 8019012:	68c2      	ldr	r2, [r0, #12]
 8019014:	9b08      	ldr	r3, [sp, #32]
 8019016:	4605      	mov	r5, r0
 8019018:	bb02      	cbnz	r2, 801905c <_dtoa_r+0xa7c>
 801901a:	4601      	mov	r1, r0
 801901c:	4658      	mov	r0, fp
 801901e:	f000 fb95 	bl	801974c <__mcmp>
 8019022:	9b08      	ldr	r3, [sp, #32]
 8019024:	4602      	mov	r2, r0
 8019026:	4629      	mov	r1, r5
 8019028:	4620      	mov	r0, r4
 801902a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801902e:	f000 f94f 	bl	80192d0 <_Bfree>
 8019032:	9b05      	ldr	r3, [sp, #20]
 8019034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019036:	9d01      	ldr	r5, [sp, #4]
 8019038:	ea43 0102 	orr.w	r1, r3, r2
 801903c:	9b06      	ldr	r3, [sp, #24]
 801903e:	430b      	orrs	r3, r1
 8019040:	9b08      	ldr	r3, [sp, #32]
 8019042:	d10d      	bne.n	8019060 <_dtoa_r+0xa80>
 8019044:	2b39      	cmp	r3, #57	; 0x39
 8019046:	d029      	beq.n	801909c <_dtoa_r+0xabc>
 8019048:	f1b9 0f00 	cmp.w	r9, #0
 801904c:	dd01      	ble.n	8019052 <_dtoa_r+0xa72>
 801904e:	9b04      	ldr	r3, [sp, #16]
 8019050:	3331      	adds	r3, #49	; 0x31
 8019052:	9a02      	ldr	r2, [sp, #8]
 8019054:	7013      	strb	r3, [r2, #0]
 8019056:	e774      	b.n	8018f42 <_dtoa_r+0x962>
 8019058:	4638      	mov	r0, r7
 801905a:	e7b9      	b.n	8018fd0 <_dtoa_r+0x9f0>
 801905c:	2201      	movs	r2, #1
 801905e:	e7e2      	b.n	8019026 <_dtoa_r+0xa46>
 8019060:	f1b9 0f00 	cmp.w	r9, #0
 8019064:	db06      	blt.n	8019074 <_dtoa_r+0xa94>
 8019066:	9905      	ldr	r1, [sp, #20]
 8019068:	ea41 0909 	orr.w	r9, r1, r9
 801906c:	9906      	ldr	r1, [sp, #24]
 801906e:	ea59 0101 	orrs.w	r1, r9, r1
 8019072:	d120      	bne.n	80190b6 <_dtoa_r+0xad6>
 8019074:	2a00      	cmp	r2, #0
 8019076:	ddec      	ble.n	8019052 <_dtoa_r+0xa72>
 8019078:	4659      	mov	r1, fp
 801907a:	2201      	movs	r2, #1
 801907c:	4620      	mov	r0, r4
 801907e:	9301      	str	r3, [sp, #4]
 8019080:	f000 faf8 	bl	8019674 <__lshift>
 8019084:	4631      	mov	r1, r6
 8019086:	4683      	mov	fp, r0
 8019088:	f000 fb60 	bl	801974c <__mcmp>
 801908c:	2800      	cmp	r0, #0
 801908e:	9b01      	ldr	r3, [sp, #4]
 8019090:	dc02      	bgt.n	8019098 <_dtoa_r+0xab8>
 8019092:	d1de      	bne.n	8019052 <_dtoa_r+0xa72>
 8019094:	07da      	lsls	r2, r3, #31
 8019096:	d5dc      	bpl.n	8019052 <_dtoa_r+0xa72>
 8019098:	2b39      	cmp	r3, #57	; 0x39
 801909a:	d1d8      	bne.n	801904e <_dtoa_r+0xa6e>
 801909c:	9a02      	ldr	r2, [sp, #8]
 801909e:	2339      	movs	r3, #57	; 0x39
 80190a0:	7013      	strb	r3, [r2, #0]
 80190a2:	462b      	mov	r3, r5
 80190a4:	461d      	mov	r5, r3
 80190a6:	3b01      	subs	r3, #1
 80190a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80190ac:	2a39      	cmp	r2, #57	; 0x39
 80190ae:	d050      	beq.n	8019152 <_dtoa_r+0xb72>
 80190b0:	3201      	adds	r2, #1
 80190b2:	701a      	strb	r2, [r3, #0]
 80190b4:	e745      	b.n	8018f42 <_dtoa_r+0x962>
 80190b6:	2a00      	cmp	r2, #0
 80190b8:	dd03      	ble.n	80190c2 <_dtoa_r+0xae2>
 80190ba:	2b39      	cmp	r3, #57	; 0x39
 80190bc:	d0ee      	beq.n	801909c <_dtoa_r+0xabc>
 80190be:	3301      	adds	r3, #1
 80190c0:	e7c7      	b.n	8019052 <_dtoa_r+0xa72>
 80190c2:	9a01      	ldr	r2, [sp, #4]
 80190c4:	9907      	ldr	r1, [sp, #28]
 80190c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80190ca:	428a      	cmp	r2, r1
 80190cc:	d02a      	beq.n	8019124 <_dtoa_r+0xb44>
 80190ce:	4659      	mov	r1, fp
 80190d0:	2300      	movs	r3, #0
 80190d2:	220a      	movs	r2, #10
 80190d4:	4620      	mov	r0, r4
 80190d6:	f000 f91d 	bl	8019314 <__multadd>
 80190da:	45b8      	cmp	r8, r7
 80190dc:	4683      	mov	fp, r0
 80190de:	f04f 0300 	mov.w	r3, #0
 80190e2:	f04f 020a 	mov.w	r2, #10
 80190e6:	4641      	mov	r1, r8
 80190e8:	4620      	mov	r0, r4
 80190ea:	d107      	bne.n	80190fc <_dtoa_r+0xb1c>
 80190ec:	f000 f912 	bl	8019314 <__multadd>
 80190f0:	4680      	mov	r8, r0
 80190f2:	4607      	mov	r7, r0
 80190f4:	9b01      	ldr	r3, [sp, #4]
 80190f6:	3301      	adds	r3, #1
 80190f8:	9301      	str	r3, [sp, #4]
 80190fa:	e775      	b.n	8018fe8 <_dtoa_r+0xa08>
 80190fc:	f000 f90a 	bl	8019314 <__multadd>
 8019100:	4639      	mov	r1, r7
 8019102:	4680      	mov	r8, r0
 8019104:	2300      	movs	r3, #0
 8019106:	220a      	movs	r2, #10
 8019108:	4620      	mov	r0, r4
 801910a:	f000 f903 	bl	8019314 <__multadd>
 801910e:	4607      	mov	r7, r0
 8019110:	e7f0      	b.n	80190f4 <_dtoa_r+0xb14>
 8019112:	f1b9 0f00 	cmp.w	r9, #0
 8019116:	9a00      	ldr	r2, [sp, #0]
 8019118:	bfcc      	ite	gt
 801911a:	464d      	movgt	r5, r9
 801911c:	2501      	movle	r5, #1
 801911e:	4415      	add	r5, r2
 8019120:	f04f 0800 	mov.w	r8, #0
 8019124:	4659      	mov	r1, fp
 8019126:	2201      	movs	r2, #1
 8019128:	4620      	mov	r0, r4
 801912a:	9301      	str	r3, [sp, #4]
 801912c:	f000 faa2 	bl	8019674 <__lshift>
 8019130:	4631      	mov	r1, r6
 8019132:	4683      	mov	fp, r0
 8019134:	f000 fb0a 	bl	801974c <__mcmp>
 8019138:	2800      	cmp	r0, #0
 801913a:	dcb2      	bgt.n	80190a2 <_dtoa_r+0xac2>
 801913c:	d102      	bne.n	8019144 <_dtoa_r+0xb64>
 801913e:	9b01      	ldr	r3, [sp, #4]
 8019140:	07db      	lsls	r3, r3, #31
 8019142:	d4ae      	bmi.n	80190a2 <_dtoa_r+0xac2>
 8019144:	462b      	mov	r3, r5
 8019146:	461d      	mov	r5, r3
 8019148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801914c:	2a30      	cmp	r2, #48	; 0x30
 801914e:	d0fa      	beq.n	8019146 <_dtoa_r+0xb66>
 8019150:	e6f7      	b.n	8018f42 <_dtoa_r+0x962>
 8019152:	9a00      	ldr	r2, [sp, #0]
 8019154:	429a      	cmp	r2, r3
 8019156:	d1a5      	bne.n	80190a4 <_dtoa_r+0xac4>
 8019158:	f10a 0a01 	add.w	sl, sl, #1
 801915c:	2331      	movs	r3, #49	; 0x31
 801915e:	e779      	b.n	8019054 <_dtoa_r+0xa74>
 8019160:	4b13      	ldr	r3, [pc, #76]	; (80191b0 <_dtoa_r+0xbd0>)
 8019162:	f7ff baaf 	b.w	80186c4 <_dtoa_r+0xe4>
 8019166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019168:	2b00      	cmp	r3, #0
 801916a:	f47f aa86 	bne.w	801867a <_dtoa_r+0x9a>
 801916e:	4b11      	ldr	r3, [pc, #68]	; (80191b4 <_dtoa_r+0xbd4>)
 8019170:	f7ff baa8 	b.w	80186c4 <_dtoa_r+0xe4>
 8019174:	f1b9 0f00 	cmp.w	r9, #0
 8019178:	dc03      	bgt.n	8019182 <_dtoa_r+0xba2>
 801917a:	9b05      	ldr	r3, [sp, #20]
 801917c:	2b02      	cmp	r3, #2
 801917e:	f73f aec9 	bgt.w	8018f14 <_dtoa_r+0x934>
 8019182:	9d00      	ldr	r5, [sp, #0]
 8019184:	4631      	mov	r1, r6
 8019186:	4658      	mov	r0, fp
 8019188:	f7ff f99e 	bl	80184c8 <quorem>
 801918c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019190:	f805 3b01 	strb.w	r3, [r5], #1
 8019194:	9a00      	ldr	r2, [sp, #0]
 8019196:	1aaa      	subs	r2, r5, r2
 8019198:	4591      	cmp	r9, r2
 801919a:	ddba      	ble.n	8019112 <_dtoa_r+0xb32>
 801919c:	4659      	mov	r1, fp
 801919e:	2300      	movs	r3, #0
 80191a0:	220a      	movs	r2, #10
 80191a2:	4620      	mov	r0, r4
 80191a4:	f000 f8b6 	bl	8019314 <__multadd>
 80191a8:	4683      	mov	fp, r0
 80191aa:	e7eb      	b.n	8019184 <_dtoa_r+0xba4>
 80191ac:	0801adf7 	.word	0x0801adf7
 80191b0:	0801ad50 	.word	0x0801ad50
 80191b4:	0801ad74 	.word	0x0801ad74

080191b8 <_fstat_r>:
 80191b8:	b538      	push	{r3, r4, r5, lr}
 80191ba:	4d07      	ldr	r5, [pc, #28]	; (80191d8 <_fstat_r+0x20>)
 80191bc:	2300      	movs	r3, #0
 80191be:	4604      	mov	r4, r0
 80191c0:	4608      	mov	r0, r1
 80191c2:	4611      	mov	r1, r2
 80191c4:	602b      	str	r3, [r5, #0]
 80191c6:	f7f7 fe6a 	bl	8010e9e <_fstat>
 80191ca:	1c43      	adds	r3, r0, #1
 80191cc:	d102      	bne.n	80191d4 <_fstat_r+0x1c>
 80191ce:	682b      	ldr	r3, [r5, #0]
 80191d0:	b103      	cbz	r3, 80191d4 <_fstat_r+0x1c>
 80191d2:	6023      	str	r3, [r4, #0]
 80191d4:	bd38      	pop	{r3, r4, r5, pc}
 80191d6:	bf00      	nop
 80191d8:	200009f8 	.word	0x200009f8

080191dc <_isatty_r>:
 80191dc:	b538      	push	{r3, r4, r5, lr}
 80191de:	4d06      	ldr	r5, [pc, #24]	; (80191f8 <_isatty_r+0x1c>)
 80191e0:	2300      	movs	r3, #0
 80191e2:	4604      	mov	r4, r0
 80191e4:	4608      	mov	r0, r1
 80191e6:	602b      	str	r3, [r5, #0]
 80191e8:	f7f7 fe69 	bl	8010ebe <_isatty>
 80191ec:	1c43      	adds	r3, r0, #1
 80191ee:	d102      	bne.n	80191f6 <_isatty_r+0x1a>
 80191f0:	682b      	ldr	r3, [r5, #0]
 80191f2:	b103      	cbz	r3, 80191f6 <_isatty_r+0x1a>
 80191f4:	6023      	str	r3, [r4, #0]
 80191f6:	bd38      	pop	{r3, r4, r5, pc}
 80191f8:	200009f8 	.word	0x200009f8

080191fc <_localeconv_r>:
 80191fc:	4800      	ldr	r0, [pc, #0]	; (8019200 <_localeconv_r+0x4>)
 80191fe:	4770      	bx	lr
 8019200:	20000180 	.word	0x20000180

08019204 <_lseek_r>:
 8019204:	b538      	push	{r3, r4, r5, lr}
 8019206:	4d07      	ldr	r5, [pc, #28]	; (8019224 <_lseek_r+0x20>)
 8019208:	4604      	mov	r4, r0
 801920a:	4608      	mov	r0, r1
 801920c:	4611      	mov	r1, r2
 801920e:	2200      	movs	r2, #0
 8019210:	602a      	str	r2, [r5, #0]
 8019212:	461a      	mov	r2, r3
 8019214:	f7f7 fe5e 	bl	8010ed4 <_lseek>
 8019218:	1c43      	adds	r3, r0, #1
 801921a:	d102      	bne.n	8019222 <_lseek_r+0x1e>
 801921c:	682b      	ldr	r3, [r5, #0]
 801921e:	b103      	cbz	r3, 8019222 <_lseek_r+0x1e>
 8019220:	6023      	str	r3, [r4, #0]
 8019222:	bd38      	pop	{r3, r4, r5, pc}
 8019224:	200009f8 	.word	0x200009f8

08019228 <malloc>:
 8019228:	4b02      	ldr	r3, [pc, #8]	; (8019234 <malloc+0xc>)
 801922a:	4601      	mov	r1, r0
 801922c:	6818      	ldr	r0, [r3, #0]
 801922e:	f7fe bbf1 	b.w	8017a14 <_malloc_r>
 8019232:	bf00      	nop
 8019234:	2000002c 	.word	0x2000002c

08019238 <__malloc_lock>:
 8019238:	4801      	ldr	r0, [pc, #4]	; (8019240 <__malloc_lock+0x8>)
 801923a:	f7fe bb1e 	b.w	801787a <__retarget_lock_acquire_recursive>
 801923e:	bf00      	nop
 8019240:	200009f0 	.word	0x200009f0

08019244 <__malloc_unlock>:
 8019244:	4801      	ldr	r0, [pc, #4]	; (801924c <__malloc_unlock+0x8>)
 8019246:	f7fe bb19 	b.w	801787c <__retarget_lock_release_recursive>
 801924a:	bf00      	nop
 801924c:	200009f0 	.word	0x200009f0

08019250 <_Balloc>:
 8019250:	b570      	push	{r4, r5, r6, lr}
 8019252:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019254:	4604      	mov	r4, r0
 8019256:	460d      	mov	r5, r1
 8019258:	b976      	cbnz	r6, 8019278 <_Balloc+0x28>
 801925a:	2010      	movs	r0, #16
 801925c:	f7ff ffe4 	bl	8019228 <malloc>
 8019260:	4602      	mov	r2, r0
 8019262:	6260      	str	r0, [r4, #36]	; 0x24
 8019264:	b920      	cbnz	r0, 8019270 <_Balloc+0x20>
 8019266:	4b18      	ldr	r3, [pc, #96]	; (80192c8 <_Balloc+0x78>)
 8019268:	4818      	ldr	r0, [pc, #96]	; (80192cc <_Balloc+0x7c>)
 801926a:	2166      	movs	r1, #102	; 0x66
 801926c:	f000 fcea 	bl	8019c44 <__assert_func>
 8019270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019274:	6006      	str	r6, [r0, #0]
 8019276:	60c6      	str	r6, [r0, #12]
 8019278:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801927a:	68f3      	ldr	r3, [r6, #12]
 801927c:	b183      	cbz	r3, 80192a0 <_Balloc+0x50>
 801927e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019280:	68db      	ldr	r3, [r3, #12]
 8019282:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019286:	b9b8      	cbnz	r0, 80192b8 <_Balloc+0x68>
 8019288:	2101      	movs	r1, #1
 801928a:	fa01 f605 	lsl.w	r6, r1, r5
 801928e:	1d72      	adds	r2, r6, #5
 8019290:	0092      	lsls	r2, r2, #2
 8019292:	4620      	mov	r0, r4
 8019294:	f000 fb5a 	bl	801994c <_calloc_r>
 8019298:	b160      	cbz	r0, 80192b4 <_Balloc+0x64>
 801929a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801929e:	e00e      	b.n	80192be <_Balloc+0x6e>
 80192a0:	2221      	movs	r2, #33	; 0x21
 80192a2:	2104      	movs	r1, #4
 80192a4:	4620      	mov	r0, r4
 80192a6:	f000 fb51 	bl	801994c <_calloc_r>
 80192aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80192ac:	60f0      	str	r0, [r6, #12]
 80192ae:	68db      	ldr	r3, [r3, #12]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d1e4      	bne.n	801927e <_Balloc+0x2e>
 80192b4:	2000      	movs	r0, #0
 80192b6:	bd70      	pop	{r4, r5, r6, pc}
 80192b8:	6802      	ldr	r2, [r0, #0]
 80192ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80192be:	2300      	movs	r3, #0
 80192c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80192c4:	e7f7      	b.n	80192b6 <_Balloc+0x66>
 80192c6:	bf00      	nop
 80192c8:	0801ad81 	.word	0x0801ad81
 80192cc:	0801ae08 	.word	0x0801ae08

080192d0 <_Bfree>:
 80192d0:	b570      	push	{r4, r5, r6, lr}
 80192d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80192d4:	4605      	mov	r5, r0
 80192d6:	460c      	mov	r4, r1
 80192d8:	b976      	cbnz	r6, 80192f8 <_Bfree+0x28>
 80192da:	2010      	movs	r0, #16
 80192dc:	f7ff ffa4 	bl	8019228 <malloc>
 80192e0:	4602      	mov	r2, r0
 80192e2:	6268      	str	r0, [r5, #36]	; 0x24
 80192e4:	b920      	cbnz	r0, 80192f0 <_Bfree+0x20>
 80192e6:	4b09      	ldr	r3, [pc, #36]	; (801930c <_Bfree+0x3c>)
 80192e8:	4809      	ldr	r0, [pc, #36]	; (8019310 <_Bfree+0x40>)
 80192ea:	218a      	movs	r1, #138	; 0x8a
 80192ec:	f000 fcaa 	bl	8019c44 <__assert_func>
 80192f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80192f4:	6006      	str	r6, [r0, #0]
 80192f6:	60c6      	str	r6, [r0, #12]
 80192f8:	b13c      	cbz	r4, 801930a <_Bfree+0x3a>
 80192fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80192fc:	6862      	ldr	r2, [r4, #4]
 80192fe:	68db      	ldr	r3, [r3, #12]
 8019300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019304:	6021      	str	r1, [r4, #0]
 8019306:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801930a:	bd70      	pop	{r4, r5, r6, pc}
 801930c:	0801ad81 	.word	0x0801ad81
 8019310:	0801ae08 	.word	0x0801ae08

08019314 <__multadd>:
 8019314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019318:	690e      	ldr	r6, [r1, #16]
 801931a:	4607      	mov	r7, r0
 801931c:	4698      	mov	r8, r3
 801931e:	460c      	mov	r4, r1
 8019320:	f101 0014 	add.w	r0, r1, #20
 8019324:	2300      	movs	r3, #0
 8019326:	6805      	ldr	r5, [r0, #0]
 8019328:	b2a9      	uxth	r1, r5
 801932a:	fb02 8101 	mla	r1, r2, r1, r8
 801932e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019332:	0c2d      	lsrs	r5, r5, #16
 8019334:	fb02 c505 	mla	r5, r2, r5, ip
 8019338:	b289      	uxth	r1, r1
 801933a:	3301      	adds	r3, #1
 801933c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019340:	429e      	cmp	r6, r3
 8019342:	f840 1b04 	str.w	r1, [r0], #4
 8019346:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801934a:	dcec      	bgt.n	8019326 <__multadd+0x12>
 801934c:	f1b8 0f00 	cmp.w	r8, #0
 8019350:	d022      	beq.n	8019398 <__multadd+0x84>
 8019352:	68a3      	ldr	r3, [r4, #8]
 8019354:	42b3      	cmp	r3, r6
 8019356:	dc19      	bgt.n	801938c <__multadd+0x78>
 8019358:	6861      	ldr	r1, [r4, #4]
 801935a:	4638      	mov	r0, r7
 801935c:	3101      	adds	r1, #1
 801935e:	f7ff ff77 	bl	8019250 <_Balloc>
 8019362:	4605      	mov	r5, r0
 8019364:	b928      	cbnz	r0, 8019372 <__multadd+0x5e>
 8019366:	4602      	mov	r2, r0
 8019368:	4b0d      	ldr	r3, [pc, #52]	; (80193a0 <__multadd+0x8c>)
 801936a:	480e      	ldr	r0, [pc, #56]	; (80193a4 <__multadd+0x90>)
 801936c:	21b5      	movs	r1, #181	; 0xb5
 801936e:	f000 fc69 	bl	8019c44 <__assert_func>
 8019372:	6922      	ldr	r2, [r4, #16]
 8019374:	3202      	adds	r2, #2
 8019376:	f104 010c 	add.w	r1, r4, #12
 801937a:	0092      	lsls	r2, r2, #2
 801937c:	300c      	adds	r0, #12
 801937e:	f7fe fae3 	bl	8017948 <memcpy>
 8019382:	4621      	mov	r1, r4
 8019384:	4638      	mov	r0, r7
 8019386:	f7ff ffa3 	bl	80192d0 <_Bfree>
 801938a:	462c      	mov	r4, r5
 801938c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019390:	3601      	adds	r6, #1
 8019392:	f8c3 8014 	str.w	r8, [r3, #20]
 8019396:	6126      	str	r6, [r4, #16]
 8019398:	4620      	mov	r0, r4
 801939a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801939e:	bf00      	nop
 80193a0:	0801adf7 	.word	0x0801adf7
 80193a4:	0801ae08 	.word	0x0801ae08

080193a8 <__hi0bits>:
 80193a8:	0c03      	lsrs	r3, r0, #16
 80193aa:	041b      	lsls	r3, r3, #16
 80193ac:	b9d3      	cbnz	r3, 80193e4 <__hi0bits+0x3c>
 80193ae:	0400      	lsls	r0, r0, #16
 80193b0:	2310      	movs	r3, #16
 80193b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80193b6:	bf04      	itt	eq
 80193b8:	0200      	lsleq	r0, r0, #8
 80193ba:	3308      	addeq	r3, #8
 80193bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80193c0:	bf04      	itt	eq
 80193c2:	0100      	lsleq	r0, r0, #4
 80193c4:	3304      	addeq	r3, #4
 80193c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80193ca:	bf04      	itt	eq
 80193cc:	0080      	lsleq	r0, r0, #2
 80193ce:	3302      	addeq	r3, #2
 80193d0:	2800      	cmp	r0, #0
 80193d2:	db05      	blt.n	80193e0 <__hi0bits+0x38>
 80193d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80193d8:	f103 0301 	add.w	r3, r3, #1
 80193dc:	bf08      	it	eq
 80193de:	2320      	moveq	r3, #32
 80193e0:	4618      	mov	r0, r3
 80193e2:	4770      	bx	lr
 80193e4:	2300      	movs	r3, #0
 80193e6:	e7e4      	b.n	80193b2 <__hi0bits+0xa>

080193e8 <__lo0bits>:
 80193e8:	6803      	ldr	r3, [r0, #0]
 80193ea:	f013 0207 	ands.w	r2, r3, #7
 80193ee:	4601      	mov	r1, r0
 80193f0:	d00b      	beq.n	801940a <__lo0bits+0x22>
 80193f2:	07da      	lsls	r2, r3, #31
 80193f4:	d424      	bmi.n	8019440 <__lo0bits+0x58>
 80193f6:	0798      	lsls	r0, r3, #30
 80193f8:	bf49      	itett	mi
 80193fa:	085b      	lsrmi	r3, r3, #1
 80193fc:	089b      	lsrpl	r3, r3, #2
 80193fe:	2001      	movmi	r0, #1
 8019400:	600b      	strmi	r3, [r1, #0]
 8019402:	bf5c      	itt	pl
 8019404:	600b      	strpl	r3, [r1, #0]
 8019406:	2002      	movpl	r0, #2
 8019408:	4770      	bx	lr
 801940a:	b298      	uxth	r0, r3
 801940c:	b9b0      	cbnz	r0, 801943c <__lo0bits+0x54>
 801940e:	0c1b      	lsrs	r3, r3, #16
 8019410:	2010      	movs	r0, #16
 8019412:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019416:	bf04      	itt	eq
 8019418:	0a1b      	lsreq	r3, r3, #8
 801941a:	3008      	addeq	r0, #8
 801941c:	071a      	lsls	r2, r3, #28
 801941e:	bf04      	itt	eq
 8019420:	091b      	lsreq	r3, r3, #4
 8019422:	3004      	addeq	r0, #4
 8019424:	079a      	lsls	r2, r3, #30
 8019426:	bf04      	itt	eq
 8019428:	089b      	lsreq	r3, r3, #2
 801942a:	3002      	addeq	r0, #2
 801942c:	07da      	lsls	r2, r3, #31
 801942e:	d403      	bmi.n	8019438 <__lo0bits+0x50>
 8019430:	085b      	lsrs	r3, r3, #1
 8019432:	f100 0001 	add.w	r0, r0, #1
 8019436:	d005      	beq.n	8019444 <__lo0bits+0x5c>
 8019438:	600b      	str	r3, [r1, #0]
 801943a:	4770      	bx	lr
 801943c:	4610      	mov	r0, r2
 801943e:	e7e8      	b.n	8019412 <__lo0bits+0x2a>
 8019440:	2000      	movs	r0, #0
 8019442:	4770      	bx	lr
 8019444:	2020      	movs	r0, #32
 8019446:	4770      	bx	lr

08019448 <__i2b>:
 8019448:	b510      	push	{r4, lr}
 801944a:	460c      	mov	r4, r1
 801944c:	2101      	movs	r1, #1
 801944e:	f7ff feff 	bl	8019250 <_Balloc>
 8019452:	4602      	mov	r2, r0
 8019454:	b928      	cbnz	r0, 8019462 <__i2b+0x1a>
 8019456:	4b05      	ldr	r3, [pc, #20]	; (801946c <__i2b+0x24>)
 8019458:	4805      	ldr	r0, [pc, #20]	; (8019470 <__i2b+0x28>)
 801945a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801945e:	f000 fbf1 	bl	8019c44 <__assert_func>
 8019462:	2301      	movs	r3, #1
 8019464:	6144      	str	r4, [r0, #20]
 8019466:	6103      	str	r3, [r0, #16]
 8019468:	bd10      	pop	{r4, pc}
 801946a:	bf00      	nop
 801946c:	0801adf7 	.word	0x0801adf7
 8019470:	0801ae08 	.word	0x0801ae08

08019474 <__multiply>:
 8019474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019478:	4614      	mov	r4, r2
 801947a:	690a      	ldr	r2, [r1, #16]
 801947c:	6923      	ldr	r3, [r4, #16]
 801947e:	429a      	cmp	r2, r3
 8019480:	bfb8      	it	lt
 8019482:	460b      	movlt	r3, r1
 8019484:	460d      	mov	r5, r1
 8019486:	bfbc      	itt	lt
 8019488:	4625      	movlt	r5, r4
 801948a:	461c      	movlt	r4, r3
 801948c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019490:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019494:	68ab      	ldr	r3, [r5, #8]
 8019496:	6869      	ldr	r1, [r5, #4]
 8019498:	eb0a 0709 	add.w	r7, sl, r9
 801949c:	42bb      	cmp	r3, r7
 801949e:	b085      	sub	sp, #20
 80194a0:	bfb8      	it	lt
 80194a2:	3101      	addlt	r1, #1
 80194a4:	f7ff fed4 	bl	8019250 <_Balloc>
 80194a8:	b930      	cbnz	r0, 80194b8 <__multiply+0x44>
 80194aa:	4602      	mov	r2, r0
 80194ac:	4b42      	ldr	r3, [pc, #264]	; (80195b8 <__multiply+0x144>)
 80194ae:	4843      	ldr	r0, [pc, #268]	; (80195bc <__multiply+0x148>)
 80194b0:	f240 115d 	movw	r1, #349	; 0x15d
 80194b4:	f000 fbc6 	bl	8019c44 <__assert_func>
 80194b8:	f100 0614 	add.w	r6, r0, #20
 80194bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80194c0:	4633      	mov	r3, r6
 80194c2:	2200      	movs	r2, #0
 80194c4:	4543      	cmp	r3, r8
 80194c6:	d31e      	bcc.n	8019506 <__multiply+0x92>
 80194c8:	f105 0c14 	add.w	ip, r5, #20
 80194cc:	f104 0314 	add.w	r3, r4, #20
 80194d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80194d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80194d8:	9202      	str	r2, [sp, #8]
 80194da:	ebac 0205 	sub.w	r2, ip, r5
 80194de:	3a15      	subs	r2, #21
 80194e0:	f022 0203 	bic.w	r2, r2, #3
 80194e4:	3204      	adds	r2, #4
 80194e6:	f105 0115 	add.w	r1, r5, #21
 80194ea:	458c      	cmp	ip, r1
 80194ec:	bf38      	it	cc
 80194ee:	2204      	movcc	r2, #4
 80194f0:	9201      	str	r2, [sp, #4]
 80194f2:	9a02      	ldr	r2, [sp, #8]
 80194f4:	9303      	str	r3, [sp, #12]
 80194f6:	429a      	cmp	r2, r3
 80194f8:	d808      	bhi.n	801950c <__multiply+0x98>
 80194fa:	2f00      	cmp	r7, #0
 80194fc:	dc55      	bgt.n	80195aa <__multiply+0x136>
 80194fe:	6107      	str	r7, [r0, #16]
 8019500:	b005      	add	sp, #20
 8019502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019506:	f843 2b04 	str.w	r2, [r3], #4
 801950a:	e7db      	b.n	80194c4 <__multiply+0x50>
 801950c:	f8b3 a000 	ldrh.w	sl, [r3]
 8019510:	f1ba 0f00 	cmp.w	sl, #0
 8019514:	d020      	beq.n	8019558 <__multiply+0xe4>
 8019516:	f105 0e14 	add.w	lr, r5, #20
 801951a:	46b1      	mov	r9, r6
 801951c:	2200      	movs	r2, #0
 801951e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019522:	f8d9 b000 	ldr.w	fp, [r9]
 8019526:	b2a1      	uxth	r1, r4
 8019528:	fa1f fb8b 	uxth.w	fp, fp
 801952c:	fb0a b101 	mla	r1, sl, r1, fp
 8019530:	4411      	add	r1, r2
 8019532:	f8d9 2000 	ldr.w	r2, [r9]
 8019536:	0c24      	lsrs	r4, r4, #16
 8019538:	0c12      	lsrs	r2, r2, #16
 801953a:	fb0a 2404 	mla	r4, sl, r4, r2
 801953e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019542:	b289      	uxth	r1, r1
 8019544:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019548:	45f4      	cmp	ip, lr
 801954a:	f849 1b04 	str.w	r1, [r9], #4
 801954e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019552:	d8e4      	bhi.n	801951e <__multiply+0xaa>
 8019554:	9901      	ldr	r1, [sp, #4]
 8019556:	5072      	str	r2, [r6, r1]
 8019558:	9a03      	ldr	r2, [sp, #12]
 801955a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801955e:	3304      	adds	r3, #4
 8019560:	f1b9 0f00 	cmp.w	r9, #0
 8019564:	d01f      	beq.n	80195a6 <__multiply+0x132>
 8019566:	6834      	ldr	r4, [r6, #0]
 8019568:	f105 0114 	add.w	r1, r5, #20
 801956c:	46b6      	mov	lr, r6
 801956e:	f04f 0a00 	mov.w	sl, #0
 8019572:	880a      	ldrh	r2, [r1, #0]
 8019574:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019578:	fb09 b202 	mla	r2, r9, r2, fp
 801957c:	4492      	add	sl, r2
 801957e:	b2a4      	uxth	r4, r4
 8019580:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019584:	f84e 4b04 	str.w	r4, [lr], #4
 8019588:	f851 4b04 	ldr.w	r4, [r1], #4
 801958c:	f8be 2000 	ldrh.w	r2, [lr]
 8019590:	0c24      	lsrs	r4, r4, #16
 8019592:	fb09 2404 	mla	r4, r9, r4, r2
 8019596:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801959a:	458c      	cmp	ip, r1
 801959c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80195a0:	d8e7      	bhi.n	8019572 <__multiply+0xfe>
 80195a2:	9a01      	ldr	r2, [sp, #4]
 80195a4:	50b4      	str	r4, [r6, r2]
 80195a6:	3604      	adds	r6, #4
 80195a8:	e7a3      	b.n	80194f2 <__multiply+0x7e>
 80195aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d1a5      	bne.n	80194fe <__multiply+0x8a>
 80195b2:	3f01      	subs	r7, #1
 80195b4:	e7a1      	b.n	80194fa <__multiply+0x86>
 80195b6:	bf00      	nop
 80195b8:	0801adf7 	.word	0x0801adf7
 80195bc:	0801ae08 	.word	0x0801ae08

080195c0 <__pow5mult>:
 80195c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195c4:	4615      	mov	r5, r2
 80195c6:	f012 0203 	ands.w	r2, r2, #3
 80195ca:	4606      	mov	r6, r0
 80195cc:	460f      	mov	r7, r1
 80195ce:	d007      	beq.n	80195e0 <__pow5mult+0x20>
 80195d0:	4c25      	ldr	r4, [pc, #148]	; (8019668 <__pow5mult+0xa8>)
 80195d2:	3a01      	subs	r2, #1
 80195d4:	2300      	movs	r3, #0
 80195d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80195da:	f7ff fe9b 	bl	8019314 <__multadd>
 80195de:	4607      	mov	r7, r0
 80195e0:	10ad      	asrs	r5, r5, #2
 80195e2:	d03d      	beq.n	8019660 <__pow5mult+0xa0>
 80195e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80195e6:	b97c      	cbnz	r4, 8019608 <__pow5mult+0x48>
 80195e8:	2010      	movs	r0, #16
 80195ea:	f7ff fe1d 	bl	8019228 <malloc>
 80195ee:	4602      	mov	r2, r0
 80195f0:	6270      	str	r0, [r6, #36]	; 0x24
 80195f2:	b928      	cbnz	r0, 8019600 <__pow5mult+0x40>
 80195f4:	4b1d      	ldr	r3, [pc, #116]	; (801966c <__pow5mult+0xac>)
 80195f6:	481e      	ldr	r0, [pc, #120]	; (8019670 <__pow5mult+0xb0>)
 80195f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80195fc:	f000 fb22 	bl	8019c44 <__assert_func>
 8019600:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019604:	6004      	str	r4, [r0, #0]
 8019606:	60c4      	str	r4, [r0, #12]
 8019608:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801960c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019610:	b94c      	cbnz	r4, 8019626 <__pow5mult+0x66>
 8019612:	f240 2171 	movw	r1, #625	; 0x271
 8019616:	4630      	mov	r0, r6
 8019618:	f7ff ff16 	bl	8019448 <__i2b>
 801961c:	2300      	movs	r3, #0
 801961e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019622:	4604      	mov	r4, r0
 8019624:	6003      	str	r3, [r0, #0]
 8019626:	f04f 0900 	mov.w	r9, #0
 801962a:	07eb      	lsls	r3, r5, #31
 801962c:	d50a      	bpl.n	8019644 <__pow5mult+0x84>
 801962e:	4639      	mov	r1, r7
 8019630:	4622      	mov	r2, r4
 8019632:	4630      	mov	r0, r6
 8019634:	f7ff ff1e 	bl	8019474 <__multiply>
 8019638:	4639      	mov	r1, r7
 801963a:	4680      	mov	r8, r0
 801963c:	4630      	mov	r0, r6
 801963e:	f7ff fe47 	bl	80192d0 <_Bfree>
 8019642:	4647      	mov	r7, r8
 8019644:	106d      	asrs	r5, r5, #1
 8019646:	d00b      	beq.n	8019660 <__pow5mult+0xa0>
 8019648:	6820      	ldr	r0, [r4, #0]
 801964a:	b938      	cbnz	r0, 801965c <__pow5mult+0x9c>
 801964c:	4622      	mov	r2, r4
 801964e:	4621      	mov	r1, r4
 8019650:	4630      	mov	r0, r6
 8019652:	f7ff ff0f 	bl	8019474 <__multiply>
 8019656:	6020      	str	r0, [r4, #0]
 8019658:	f8c0 9000 	str.w	r9, [r0]
 801965c:	4604      	mov	r4, r0
 801965e:	e7e4      	b.n	801962a <__pow5mult+0x6a>
 8019660:	4638      	mov	r0, r7
 8019662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019666:	bf00      	nop
 8019668:	0801af58 	.word	0x0801af58
 801966c:	0801ad81 	.word	0x0801ad81
 8019670:	0801ae08 	.word	0x0801ae08

08019674 <__lshift>:
 8019674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019678:	460c      	mov	r4, r1
 801967a:	6849      	ldr	r1, [r1, #4]
 801967c:	6923      	ldr	r3, [r4, #16]
 801967e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019682:	68a3      	ldr	r3, [r4, #8]
 8019684:	4607      	mov	r7, r0
 8019686:	4691      	mov	r9, r2
 8019688:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801968c:	f108 0601 	add.w	r6, r8, #1
 8019690:	42b3      	cmp	r3, r6
 8019692:	db0b      	blt.n	80196ac <__lshift+0x38>
 8019694:	4638      	mov	r0, r7
 8019696:	f7ff fddb 	bl	8019250 <_Balloc>
 801969a:	4605      	mov	r5, r0
 801969c:	b948      	cbnz	r0, 80196b2 <__lshift+0x3e>
 801969e:	4602      	mov	r2, r0
 80196a0:	4b28      	ldr	r3, [pc, #160]	; (8019744 <__lshift+0xd0>)
 80196a2:	4829      	ldr	r0, [pc, #164]	; (8019748 <__lshift+0xd4>)
 80196a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80196a8:	f000 facc 	bl	8019c44 <__assert_func>
 80196ac:	3101      	adds	r1, #1
 80196ae:	005b      	lsls	r3, r3, #1
 80196b0:	e7ee      	b.n	8019690 <__lshift+0x1c>
 80196b2:	2300      	movs	r3, #0
 80196b4:	f100 0114 	add.w	r1, r0, #20
 80196b8:	f100 0210 	add.w	r2, r0, #16
 80196bc:	4618      	mov	r0, r3
 80196be:	4553      	cmp	r3, sl
 80196c0:	db33      	blt.n	801972a <__lshift+0xb6>
 80196c2:	6920      	ldr	r0, [r4, #16]
 80196c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80196c8:	f104 0314 	add.w	r3, r4, #20
 80196cc:	f019 091f 	ands.w	r9, r9, #31
 80196d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80196d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80196d8:	d02b      	beq.n	8019732 <__lshift+0xbe>
 80196da:	f1c9 0e20 	rsb	lr, r9, #32
 80196de:	468a      	mov	sl, r1
 80196e0:	2200      	movs	r2, #0
 80196e2:	6818      	ldr	r0, [r3, #0]
 80196e4:	fa00 f009 	lsl.w	r0, r0, r9
 80196e8:	4302      	orrs	r2, r0
 80196ea:	f84a 2b04 	str.w	r2, [sl], #4
 80196ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80196f2:	459c      	cmp	ip, r3
 80196f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80196f8:	d8f3      	bhi.n	80196e2 <__lshift+0x6e>
 80196fa:	ebac 0304 	sub.w	r3, ip, r4
 80196fe:	3b15      	subs	r3, #21
 8019700:	f023 0303 	bic.w	r3, r3, #3
 8019704:	3304      	adds	r3, #4
 8019706:	f104 0015 	add.w	r0, r4, #21
 801970a:	4584      	cmp	ip, r0
 801970c:	bf38      	it	cc
 801970e:	2304      	movcc	r3, #4
 8019710:	50ca      	str	r2, [r1, r3]
 8019712:	b10a      	cbz	r2, 8019718 <__lshift+0xa4>
 8019714:	f108 0602 	add.w	r6, r8, #2
 8019718:	3e01      	subs	r6, #1
 801971a:	4638      	mov	r0, r7
 801971c:	612e      	str	r6, [r5, #16]
 801971e:	4621      	mov	r1, r4
 8019720:	f7ff fdd6 	bl	80192d0 <_Bfree>
 8019724:	4628      	mov	r0, r5
 8019726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801972a:	f842 0f04 	str.w	r0, [r2, #4]!
 801972e:	3301      	adds	r3, #1
 8019730:	e7c5      	b.n	80196be <__lshift+0x4a>
 8019732:	3904      	subs	r1, #4
 8019734:	f853 2b04 	ldr.w	r2, [r3], #4
 8019738:	f841 2f04 	str.w	r2, [r1, #4]!
 801973c:	459c      	cmp	ip, r3
 801973e:	d8f9      	bhi.n	8019734 <__lshift+0xc0>
 8019740:	e7ea      	b.n	8019718 <__lshift+0xa4>
 8019742:	bf00      	nop
 8019744:	0801adf7 	.word	0x0801adf7
 8019748:	0801ae08 	.word	0x0801ae08

0801974c <__mcmp>:
 801974c:	b530      	push	{r4, r5, lr}
 801974e:	6902      	ldr	r2, [r0, #16]
 8019750:	690c      	ldr	r4, [r1, #16]
 8019752:	1b12      	subs	r2, r2, r4
 8019754:	d10e      	bne.n	8019774 <__mcmp+0x28>
 8019756:	f100 0314 	add.w	r3, r0, #20
 801975a:	3114      	adds	r1, #20
 801975c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019760:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019764:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019768:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801976c:	42a5      	cmp	r5, r4
 801976e:	d003      	beq.n	8019778 <__mcmp+0x2c>
 8019770:	d305      	bcc.n	801977e <__mcmp+0x32>
 8019772:	2201      	movs	r2, #1
 8019774:	4610      	mov	r0, r2
 8019776:	bd30      	pop	{r4, r5, pc}
 8019778:	4283      	cmp	r3, r0
 801977a:	d3f3      	bcc.n	8019764 <__mcmp+0x18>
 801977c:	e7fa      	b.n	8019774 <__mcmp+0x28>
 801977e:	f04f 32ff 	mov.w	r2, #4294967295
 8019782:	e7f7      	b.n	8019774 <__mcmp+0x28>

08019784 <__mdiff>:
 8019784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019788:	460c      	mov	r4, r1
 801978a:	4606      	mov	r6, r0
 801978c:	4611      	mov	r1, r2
 801978e:	4620      	mov	r0, r4
 8019790:	4617      	mov	r7, r2
 8019792:	f7ff ffdb 	bl	801974c <__mcmp>
 8019796:	1e05      	subs	r5, r0, #0
 8019798:	d110      	bne.n	80197bc <__mdiff+0x38>
 801979a:	4629      	mov	r1, r5
 801979c:	4630      	mov	r0, r6
 801979e:	f7ff fd57 	bl	8019250 <_Balloc>
 80197a2:	b930      	cbnz	r0, 80197b2 <__mdiff+0x2e>
 80197a4:	4b39      	ldr	r3, [pc, #228]	; (801988c <__mdiff+0x108>)
 80197a6:	4602      	mov	r2, r0
 80197a8:	f240 2132 	movw	r1, #562	; 0x232
 80197ac:	4838      	ldr	r0, [pc, #224]	; (8019890 <__mdiff+0x10c>)
 80197ae:	f000 fa49 	bl	8019c44 <__assert_func>
 80197b2:	2301      	movs	r3, #1
 80197b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80197b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197bc:	bfa4      	itt	ge
 80197be:	463b      	movge	r3, r7
 80197c0:	4627      	movge	r7, r4
 80197c2:	4630      	mov	r0, r6
 80197c4:	6879      	ldr	r1, [r7, #4]
 80197c6:	bfa6      	itte	ge
 80197c8:	461c      	movge	r4, r3
 80197ca:	2500      	movge	r5, #0
 80197cc:	2501      	movlt	r5, #1
 80197ce:	f7ff fd3f 	bl	8019250 <_Balloc>
 80197d2:	b920      	cbnz	r0, 80197de <__mdiff+0x5a>
 80197d4:	4b2d      	ldr	r3, [pc, #180]	; (801988c <__mdiff+0x108>)
 80197d6:	4602      	mov	r2, r0
 80197d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80197dc:	e7e6      	b.n	80197ac <__mdiff+0x28>
 80197de:	693e      	ldr	r6, [r7, #16]
 80197e0:	60c5      	str	r5, [r0, #12]
 80197e2:	6925      	ldr	r5, [r4, #16]
 80197e4:	f107 0114 	add.w	r1, r7, #20
 80197e8:	f104 0914 	add.w	r9, r4, #20
 80197ec:	f100 0e14 	add.w	lr, r0, #20
 80197f0:	f107 0210 	add.w	r2, r7, #16
 80197f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80197f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80197fc:	46f2      	mov	sl, lr
 80197fe:	2700      	movs	r7, #0
 8019800:	f859 3b04 	ldr.w	r3, [r9], #4
 8019804:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019808:	fa1f f883 	uxth.w	r8, r3
 801980c:	fa17 f78b 	uxtah	r7, r7, fp
 8019810:	0c1b      	lsrs	r3, r3, #16
 8019812:	eba7 0808 	sub.w	r8, r7, r8
 8019816:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801981a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801981e:	fa1f f888 	uxth.w	r8, r8
 8019822:	141f      	asrs	r7, r3, #16
 8019824:	454d      	cmp	r5, r9
 8019826:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801982a:	f84a 3b04 	str.w	r3, [sl], #4
 801982e:	d8e7      	bhi.n	8019800 <__mdiff+0x7c>
 8019830:	1b2b      	subs	r3, r5, r4
 8019832:	3b15      	subs	r3, #21
 8019834:	f023 0303 	bic.w	r3, r3, #3
 8019838:	3304      	adds	r3, #4
 801983a:	3415      	adds	r4, #21
 801983c:	42a5      	cmp	r5, r4
 801983e:	bf38      	it	cc
 8019840:	2304      	movcc	r3, #4
 8019842:	4419      	add	r1, r3
 8019844:	4473      	add	r3, lr
 8019846:	469e      	mov	lr, r3
 8019848:	460d      	mov	r5, r1
 801984a:	4565      	cmp	r5, ip
 801984c:	d30e      	bcc.n	801986c <__mdiff+0xe8>
 801984e:	f10c 0203 	add.w	r2, ip, #3
 8019852:	1a52      	subs	r2, r2, r1
 8019854:	f022 0203 	bic.w	r2, r2, #3
 8019858:	3903      	subs	r1, #3
 801985a:	458c      	cmp	ip, r1
 801985c:	bf38      	it	cc
 801985e:	2200      	movcc	r2, #0
 8019860:	441a      	add	r2, r3
 8019862:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019866:	b17b      	cbz	r3, 8019888 <__mdiff+0x104>
 8019868:	6106      	str	r6, [r0, #16]
 801986a:	e7a5      	b.n	80197b8 <__mdiff+0x34>
 801986c:	f855 8b04 	ldr.w	r8, [r5], #4
 8019870:	fa17 f488 	uxtah	r4, r7, r8
 8019874:	1422      	asrs	r2, r4, #16
 8019876:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801987a:	b2a4      	uxth	r4, r4
 801987c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019880:	f84e 4b04 	str.w	r4, [lr], #4
 8019884:	1417      	asrs	r7, r2, #16
 8019886:	e7e0      	b.n	801984a <__mdiff+0xc6>
 8019888:	3e01      	subs	r6, #1
 801988a:	e7ea      	b.n	8019862 <__mdiff+0xde>
 801988c:	0801adf7 	.word	0x0801adf7
 8019890:	0801ae08 	.word	0x0801ae08

08019894 <__d2b>:
 8019894:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019898:	4689      	mov	r9, r1
 801989a:	2101      	movs	r1, #1
 801989c:	ec57 6b10 	vmov	r6, r7, d0
 80198a0:	4690      	mov	r8, r2
 80198a2:	f7ff fcd5 	bl	8019250 <_Balloc>
 80198a6:	4604      	mov	r4, r0
 80198a8:	b930      	cbnz	r0, 80198b8 <__d2b+0x24>
 80198aa:	4602      	mov	r2, r0
 80198ac:	4b25      	ldr	r3, [pc, #148]	; (8019944 <__d2b+0xb0>)
 80198ae:	4826      	ldr	r0, [pc, #152]	; (8019948 <__d2b+0xb4>)
 80198b0:	f240 310a 	movw	r1, #778	; 0x30a
 80198b4:	f000 f9c6 	bl	8019c44 <__assert_func>
 80198b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80198bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80198c0:	bb35      	cbnz	r5, 8019910 <__d2b+0x7c>
 80198c2:	2e00      	cmp	r6, #0
 80198c4:	9301      	str	r3, [sp, #4]
 80198c6:	d028      	beq.n	801991a <__d2b+0x86>
 80198c8:	4668      	mov	r0, sp
 80198ca:	9600      	str	r6, [sp, #0]
 80198cc:	f7ff fd8c 	bl	80193e8 <__lo0bits>
 80198d0:	9900      	ldr	r1, [sp, #0]
 80198d2:	b300      	cbz	r0, 8019916 <__d2b+0x82>
 80198d4:	9a01      	ldr	r2, [sp, #4]
 80198d6:	f1c0 0320 	rsb	r3, r0, #32
 80198da:	fa02 f303 	lsl.w	r3, r2, r3
 80198de:	430b      	orrs	r3, r1
 80198e0:	40c2      	lsrs	r2, r0
 80198e2:	6163      	str	r3, [r4, #20]
 80198e4:	9201      	str	r2, [sp, #4]
 80198e6:	9b01      	ldr	r3, [sp, #4]
 80198e8:	61a3      	str	r3, [r4, #24]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	bf14      	ite	ne
 80198ee:	2202      	movne	r2, #2
 80198f0:	2201      	moveq	r2, #1
 80198f2:	6122      	str	r2, [r4, #16]
 80198f4:	b1d5      	cbz	r5, 801992c <__d2b+0x98>
 80198f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80198fa:	4405      	add	r5, r0
 80198fc:	f8c9 5000 	str.w	r5, [r9]
 8019900:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019904:	f8c8 0000 	str.w	r0, [r8]
 8019908:	4620      	mov	r0, r4
 801990a:	b003      	add	sp, #12
 801990c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019910:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019914:	e7d5      	b.n	80198c2 <__d2b+0x2e>
 8019916:	6161      	str	r1, [r4, #20]
 8019918:	e7e5      	b.n	80198e6 <__d2b+0x52>
 801991a:	a801      	add	r0, sp, #4
 801991c:	f7ff fd64 	bl	80193e8 <__lo0bits>
 8019920:	9b01      	ldr	r3, [sp, #4]
 8019922:	6163      	str	r3, [r4, #20]
 8019924:	2201      	movs	r2, #1
 8019926:	6122      	str	r2, [r4, #16]
 8019928:	3020      	adds	r0, #32
 801992a:	e7e3      	b.n	80198f4 <__d2b+0x60>
 801992c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019930:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019934:	f8c9 0000 	str.w	r0, [r9]
 8019938:	6918      	ldr	r0, [r3, #16]
 801993a:	f7ff fd35 	bl	80193a8 <__hi0bits>
 801993e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019942:	e7df      	b.n	8019904 <__d2b+0x70>
 8019944:	0801adf7 	.word	0x0801adf7
 8019948:	0801ae08 	.word	0x0801ae08

0801994c <_calloc_r>:
 801994c:	b513      	push	{r0, r1, r4, lr}
 801994e:	434a      	muls	r2, r1
 8019950:	4611      	mov	r1, r2
 8019952:	9201      	str	r2, [sp, #4]
 8019954:	f7fe f85e 	bl	8017a14 <_malloc_r>
 8019958:	4604      	mov	r4, r0
 801995a:	b118      	cbz	r0, 8019964 <_calloc_r+0x18>
 801995c:	9a01      	ldr	r2, [sp, #4]
 801995e:	2100      	movs	r1, #0
 8019960:	f7fe f800 	bl	8017964 <memset>
 8019964:	4620      	mov	r0, r4
 8019966:	b002      	add	sp, #8
 8019968:	bd10      	pop	{r4, pc}

0801996a <__ssputs_r>:
 801996a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801996e:	688e      	ldr	r6, [r1, #8]
 8019970:	429e      	cmp	r6, r3
 8019972:	4682      	mov	sl, r0
 8019974:	460c      	mov	r4, r1
 8019976:	4690      	mov	r8, r2
 8019978:	461f      	mov	r7, r3
 801997a:	d838      	bhi.n	80199ee <__ssputs_r+0x84>
 801997c:	898a      	ldrh	r2, [r1, #12]
 801997e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019982:	d032      	beq.n	80199ea <__ssputs_r+0x80>
 8019984:	6825      	ldr	r5, [r4, #0]
 8019986:	6909      	ldr	r1, [r1, #16]
 8019988:	eba5 0901 	sub.w	r9, r5, r1
 801998c:	6965      	ldr	r5, [r4, #20]
 801998e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019992:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019996:	3301      	adds	r3, #1
 8019998:	444b      	add	r3, r9
 801999a:	106d      	asrs	r5, r5, #1
 801999c:	429d      	cmp	r5, r3
 801999e:	bf38      	it	cc
 80199a0:	461d      	movcc	r5, r3
 80199a2:	0553      	lsls	r3, r2, #21
 80199a4:	d531      	bpl.n	8019a0a <__ssputs_r+0xa0>
 80199a6:	4629      	mov	r1, r5
 80199a8:	f7fe f834 	bl	8017a14 <_malloc_r>
 80199ac:	4606      	mov	r6, r0
 80199ae:	b950      	cbnz	r0, 80199c6 <__ssputs_r+0x5c>
 80199b0:	230c      	movs	r3, #12
 80199b2:	f8ca 3000 	str.w	r3, [sl]
 80199b6:	89a3      	ldrh	r3, [r4, #12]
 80199b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199bc:	81a3      	strh	r3, [r4, #12]
 80199be:	f04f 30ff 	mov.w	r0, #4294967295
 80199c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199c6:	6921      	ldr	r1, [r4, #16]
 80199c8:	464a      	mov	r2, r9
 80199ca:	f7fd ffbd 	bl	8017948 <memcpy>
 80199ce:	89a3      	ldrh	r3, [r4, #12]
 80199d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80199d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80199d8:	81a3      	strh	r3, [r4, #12]
 80199da:	6126      	str	r6, [r4, #16]
 80199dc:	6165      	str	r5, [r4, #20]
 80199de:	444e      	add	r6, r9
 80199e0:	eba5 0509 	sub.w	r5, r5, r9
 80199e4:	6026      	str	r6, [r4, #0]
 80199e6:	60a5      	str	r5, [r4, #8]
 80199e8:	463e      	mov	r6, r7
 80199ea:	42be      	cmp	r6, r7
 80199ec:	d900      	bls.n	80199f0 <__ssputs_r+0x86>
 80199ee:	463e      	mov	r6, r7
 80199f0:	4632      	mov	r2, r6
 80199f2:	6820      	ldr	r0, [r4, #0]
 80199f4:	4641      	mov	r1, r8
 80199f6:	f000 f967 	bl	8019cc8 <memmove>
 80199fa:	68a3      	ldr	r3, [r4, #8]
 80199fc:	6822      	ldr	r2, [r4, #0]
 80199fe:	1b9b      	subs	r3, r3, r6
 8019a00:	4432      	add	r2, r6
 8019a02:	60a3      	str	r3, [r4, #8]
 8019a04:	6022      	str	r2, [r4, #0]
 8019a06:	2000      	movs	r0, #0
 8019a08:	e7db      	b.n	80199c2 <__ssputs_r+0x58>
 8019a0a:	462a      	mov	r2, r5
 8019a0c:	f000 f976 	bl	8019cfc <_realloc_r>
 8019a10:	4606      	mov	r6, r0
 8019a12:	2800      	cmp	r0, #0
 8019a14:	d1e1      	bne.n	80199da <__ssputs_r+0x70>
 8019a16:	6921      	ldr	r1, [r4, #16]
 8019a18:	4650      	mov	r0, sl
 8019a1a:	f7fd ffab 	bl	8017974 <_free_r>
 8019a1e:	e7c7      	b.n	80199b0 <__ssputs_r+0x46>

08019a20 <_svfiprintf_r>:
 8019a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a24:	4698      	mov	r8, r3
 8019a26:	898b      	ldrh	r3, [r1, #12]
 8019a28:	061b      	lsls	r3, r3, #24
 8019a2a:	b09d      	sub	sp, #116	; 0x74
 8019a2c:	4607      	mov	r7, r0
 8019a2e:	460d      	mov	r5, r1
 8019a30:	4614      	mov	r4, r2
 8019a32:	d50e      	bpl.n	8019a52 <_svfiprintf_r+0x32>
 8019a34:	690b      	ldr	r3, [r1, #16]
 8019a36:	b963      	cbnz	r3, 8019a52 <_svfiprintf_r+0x32>
 8019a38:	2140      	movs	r1, #64	; 0x40
 8019a3a:	f7fd ffeb 	bl	8017a14 <_malloc_r>
 8019a3e:	6028      	str	r0, [r5, #0]
 8019a40:	6128      	str	r0, [r5, #16]
 8019a42:	b920      	cbnz	r0, 8019a4e <_svfiprintf_r+0x2e>
 8019a44:	230c      	movs	r3, #12
 8019a46:	603b      	str	r3, [r7, #0]
 8019a48:	f04f 30ff 	mov.w	r0, #4294967295
 8019a4c:	e0d1      	b.n	8019bf2 <_svfiprintf_r+0x1d2>
 8019a4e:	2340      	movs	r3, #64	; 0x40
 8019a50:	616b      	str	r3, [r5, #20]
 8019a52:	2300      	movs	r3, #0
 8019a54:	9309      	str	r3, [sp, #36]	; 0x24
 8019a56:	2320      	movs	r3, #32
 8019a58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a60:	2330      	movs	r3, #48	; 0x30
 8019a62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019c0c <_svfiprintf_r+0x1ec>
 8019a66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019a6a:	f04f 0901 	mov.w	r9, #1
 8019a6e:	4623      	mov	r3, r4
 8019a70:	469a      	mov	sl, r3
 8019a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a76:	b10a      	cbz	r2, 8019a7c <_svfiprintf_r+0x5c>
 8019a78:	2a25      	cmp	r2, #37	; 0x25
 8019a7a:	d1f9      	bne.n	8019a70 <_svfiprintf_r+0x50>
 8019a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8019a80:	d00b      	beq.n	8019a9a <_svfiprintf_r+0x7a>
 8019a82:	465b      	mov	r3, fp
 8019a84:	4622      	mov	r2, r4
 8019a86:	4629      	mov	r1, r5
 8019a88:	4638      	mov	r0, r7
 8019a8a:	f7ff ff6e 	bl	801996a <__ssputs_r>
 8019a8e:	3001      	adds	r0, #1
 8019a90:	f000 80aa 	beq.w	8019be8 <_svfiprintf_r+0x1c8>
 8019a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a96:	445a      	add	r2, fp
 8019a98:	9209      	str	r2, [sp, #36]	; 0x24
 8019a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	f000 80a2 	beq.w	8019be8 <_svfiprintf_r+0x1c8>
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8019aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019aae:	f10a 0a01 	add.w	sl, sl, #1
 8019ab2:	9304      	str	r3, [sp, #16]
 8019ab4:	9307      	str	r3, [sp, #28]
 8019ab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019aba:	931a      	str	r3, [sp, #104]	; 0x68
 8019abc:	4654      	mov	r4, sl
 8019abe:	2205      	movs	r2, #5
 8019ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ac4:	4851      	ldr	r0, [pc, #324]	; (8019c0c <_svfiprintf_r+0x1ec>)
 8019ac6:	f7e6 fb8b 	bl	80001e0 <memchr>
 8019aca:	9a04      	ldr	r2, [sp, #16]
 8019acc:	b9d8      	cbnz	r0, 8019b06 <_svfiprintf_r+0xe6>
 8019ace:	06d0      	lsls	r0, r2, #27
 8019ad0:	bf44      	itt	mi
 8019ad2:	2320      	movmi	r3, #32
 8019ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ad8:	0711      	lsls	r1, r2, #28
 8019ada:	bf44      	itt	mi
 8019adc:	232b      	movmi	r3, #43	; 0x2b
 8019ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8019ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8019ae8:	d015      	beq.n	8019b16 <_svfiprintf_r+0xf6>
 8019aea:	9a07      	ldr	r2, [sp, #28]
 8019aec:	4654      	mov	r4, sl
 8019aee:	2000      	movs	r0, #0
 8019af0:	f04f 0c0a 	mov.w	ip, #10
 8019af4:	4621      	mov	r1, r4
 8019af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019afa:	3b30      	subs	r3, #48	; 0x30
 8019afc:	2b09      	cmp	r3, #9
 8019afe:	d94e      	bls.n	8019b9e <_svfiprintf_r+0x17e>
 8019b00:	b1b0      	cbz	r0, 8019b30 <_svfiprintf_r+0x110>
 8019b02:	9207      	str	r2, [sp, #28]
 8019b04:	e014      	b.n	8019b30 <_svfiprintf_r+0x110>
 8019b06:	eba0 0308 	sub.w	r3, r0, r8
 8019b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8019b0e:	4313      	orrs	r3, r2
 8019b10:	9304      	str	r3, [sp, #16]
 8019b12:	46a2      	mov	sl, r4
 8019b14:	e7d2      	b.n	8019abc <_svfiprintf_r+0x9c>
 8019b16:	9b03      	ldr	r3, [sp, #12]
 8019b18:	1d19      	adds	r1, r3, #4
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	9103      	str	r1, [sp, #12]
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	bfbb      	ittet	lt
 8019b22:	425b      	neglt	r3, r3
 8019b24:	f042 0202 	orrlt.w	r2, r2, #2
 8019b28:	9307      	strge	r3, [sp, #28]
 8019b2a:	9307      	strlt	r3, [sp, #28]
 8019b2c:	bfb8      	it	lt
 8019b2e:	9204      	strlt	r2, [sp, #16]
 8019b30:	7823      	ldrb	r3, [r4, #0]
 8019b32:	2b2e      	cmp	r3, #46	; 0x2e
 8019b34:	d10c      	bne.n	8019b50 <_svfiprintf_r+0x130>
 8019b36:	7863      	ldrb	r3, [r4, #1]
 8019b38:	2b2a      	cmp	r3, #42	; 0x2a
 8019b3a:	d135      	bne.n	8019ba8 <_svfiprintf_r+0x188>
 8019b3c:	9b03      	ldr	r3, [sp, #12]
 8019b3e:	1d1a      	adds	r2, r3, #4
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	9203      	str	r2, [sp, #12]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	bfb8      	it	lt
 8019b48:	f04f 33ff 	movlt.w	r3, #4294967295
 8019b4c:	3402      	adds	r4, #2
 8019b4e:	9305      	str	r3, [sp, #20]
 8019b50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019c1c <_svfiprintf_r+0x1fc>
 8019b54:	7821      	ldrb	r1, [r4, #0]
 8019b56:	2203      	movs	r2, #3
 8019b58:	4650      	mov	r0, sl
 8019b5a:	f7e6 fb41 	bl	80001e0 <memchr>
 8019b5e:	b140      	cbz	r0, 8019b72 <_svfiprintf_r+0x152>
 8019b60:	2340      	movs	r3, #64	; 0x40
 8019b62:	eba0 000a 	sub.w	r0, r0, sl
 8019b66:	fa03 f000 	lsl.w	r0, r3, r0
 8019b6a:	9b04      	ldr	r3, [sp, #16]
 8019b6c:	4303      	orrs	r3, r0
 8019b6e:	3401      	adds	r4, #1
 8019b70:	9304      	str	r3, [sp, #16]
 8019b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b76:	4826      	ldr	r0, [pc, #152]	; (8019c10 <_svfiprintf_r+0x1f0>)
 8019b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019b7c:	2206      	movs	r2, #6
 8019b7e:	f7e6 fb2f 	bl	80001e0 <memchr>
 8019b82:	2800      	cmp	r0, #0
 8019b84:	d038      	beq.n	8019bf8 <_svfiprintf_r+0x1d8>
 8019b86:	4b23      	ldr	r3, [pc, #140]	; (8019c14 <_svfiprintf_r+0x1f4>)
 8019b88:	bb1b      	cbnz	r3, 8019bd2 <_svfiprintf_r+0x1b2>
 8019b8a:	9b03      	ldr	r3, [sp, #12]
 8019b8c:	3307      	adds	r3, #7
 8019b8e:	f023 0307 	bic.w	r3, r3, #7
 8019b92:	3308      	adds	r3, #8
 8019b94:	9303      	str	r3, [sp, #12]
 8019b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b98:	4433      	add	r3, r6
 8019b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8019b9c:	e767      	b.n	8019a6e <_svfiprintf_r+0x4e>
 8019b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019ba2:	460c      	mov	r4, r1
 8019ba4:	2001      	movs	r0, #1
 8019ba6:	e7a5      	b.n	8019af4 <_svfiprintf_r+0xd4>
 8019ba8:	2300      	movs	r3, #0
 8019baa:	3401      	adds	r4, #1
 8019bac:	9305      	str	r3, [sp, #20]
 8019bae:	4619      	mov	r1, r3
 8019bb0:	f04f 0c0a 	mov.w	ip, #10
 8019bb4:	4620      	mov	r0, r4
 8019bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019bba:	3a30      	subs	r2, #48	; 0x30
 8019bbc:	2a09      	cmp	r2, #9
 8019bbe:	d903      	bls.n	8019bc8 <_svfiprintf_r+0x1a8>
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d0c5      	beq.n	8019b50 <_svfiprintf_r+0x130>
 8019bc4:	9105      	str	r1, [sp, #20]
 8019bc6:	e7c3      	b.n	8019b50 <_svfiprintf_r+0x130>
 8019bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8019bcc:	4604      	mov	r4, r0
 8019bce:	2301      	movs	r3, #1
 8019bd0:	e7f0      	b.n	8019bb4 <_svfiprintf_r+0x194>
 8019bd2:	ab03      	add	r3, sp, #12
 8019bd4:	9300      	str	r3, [sp, #0]
 8019bd6:	462a      	mov	r2, r5
 8019bd8:	4b0f      	ldr	r3, [pc, #60]	; (8019c18 <_svfiprintf_r+0x1f8>)
 8019bda:	a904      	add	r1, sp, #16
 8019bdc:	4638      	mov	r0, r7
 8019bde:	f7fe f813 	bl	8017c08 <_printf_float>
 8019be2:	1c42      	adds	r2, r0, #1
 8019be4:	4606      	mov	r6, r0
 8019be6:	d1d6      	bne.n	8019b96 <_svfiprintf_r+0x176>
 8019be8:	89ab      	ldrh	r3, [r5, #12]
 8019bea:	065b      	lsls	r3, r3, #25
 8019bec:	f53f af2c 	bmi.w	8019a48 <_svfiprintf_r+0x28>
 8019bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019bf2:	b01d      	add	sp, #116	; 0x74
 8019bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bf8:	ab03      	add	r3, sp, #12
 8019bfa:	9300      	str	r3, [sp, #0]
 8019bfc:	462a      	mov	r2, r5
 8019bfe:	4b06      	ldr	r3, [pc, #24]	; (8019c18 <_svfiprintf_r+0x1f8>)
 8019c00:	a904      	add	r1, sp, #16
 8019c02:	4638      	mov	r0, r7
 8019c04:	f7fe faa4 	bl	8018150 <_printf_i>
 8019c08:	e7eb      	b.n	8019be2 <_svfiprintf_r+0x1c2>
 8019c0a:	bf00      	nop
 8019c0c:	0801af64 	.word	0x0801af64
 8019c10:	0801af6e 	.word	0x0801af6e
 8019c14:	08017c09 	.word	0x08017c09
 8019c18:	0801996b 	.word	0x0801996b
 8019c1c:	0801af6a 	.word	0x0801af6a

08019c20 <_read_r>:
 8019c20:	b538      	push	{r3, r4, r5, lr}
 8019c22:	4d07      	ldr	r5, [pc, #28]	; (8019c40 <_read_r+0x20>)
 8019c24:	4604      	mov	r4, r0
 8019c26:	4608      	mov	r0, r1
 8019c28:	4611      	mov	r1, r2
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	602a      	str	r2, [r5, #0]
 8019c2e:	461a      	mov	r2, r3
 8019c30:	f7f7 f8f0 	bl	8010e14 <_read>
 8019c34:	1c43      	adds	r3, r0, #1
 8019c36:	d102      	bne.n	8019c3e <_read_r+0x1e>
 8019c38:	682b      	ldr	r3, [r5, #0]
 8019c3a:	b103      	cbz	r3, 8019c3e <_read_r+0x1e>
 8019c3c:	6023      	str	r3, [r4, #0]
 8019c3e:	bd38      	pop	{r3, r4, r5, pc}
 8019c40:	200009f8 	.word	0x200009f8

08019c44 <__assert_func>:
 8019c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019c46:	4614      	mov	r4, r2
 8019c48:	461a      	mov	r2, r3
 8019c4a:	4b09      	ldr	r3, [pc, #36]	; (8019c70 <__assert_func+0x2c>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	4605      	mov	r5, r0
 8019c50:	68d8      	ldr	r0, [r3, #12]
 8019c52:	b14c      	cbz	r4, 8019c68 <__assert_func+0x24>
 8019c54:	4b07      	ldr	r3, [pc, #28]	; (8019c74 <__assert_func+0x30>)
 8019c56:	9100      	str	r1, [sp, #0]
 8019c58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019c5c:	4906      	ldr	r1, [pc, #24]	; (8019c78 <__assert_func+0x34>)
 8019c5e:	462b      	mov	r3, r5
 8019c60:	f000 f80e 	bl	8019c80 <fiprintf>
 8019c64:	f000 fa98 	bl	801a198 <abort>
 8019c68:	4b04      	ldr	r3, [pc, #16]	; (8019c7c <__assert_func+0x38>)
 8019c6a:	461c      	mov	r4, r3
 8019c6c:	e7f3      	b.n	8019c56 <__assert_func+0x12>
 8019c6e:	bf00      	nop
 8019c70:	2000002c 	.word	0x2000002c
 8019c74:	0801af75 	.word	0x0801af75
 8019c78:	0801af82 	.word	0x0801af82
 8019c7c:	0801afb0 	.word	0x0801afb0

08019c80 <fiprintf>:
 8019c80:	b40e      	push	{r1, r2, r3}
 8019c82:	b503      	push	{r0, r1, lr}
 8019c84:	4601      	mov	r1, r0
 8019c86:	ab03      	add	r3, sp, #12
 8019c88:	4805      	ldr	r0, [pc, #20]	; (8019ca0 <fiprintf+0x20>)
 8019c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019c8e:	6800      	ldr	r0, [r0, #0]
 8019c90:	9301      	str	r3, [sp, #4]
 8019c92:	f000 f883 	bl	8019d9c <_vfiprintf_r>
 8019c96:	b002      	add	sp, #8
 8019c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8019c9c:	b003      	add	sp, #12
 8019c9e:	4770      	bx	lr
 8019ca0:	2000002c 	.word	0x2000002c

08019ca4 <__ascii_mbtowc>:
 8019ca4:	b082      	sub	sp, #8
 8019ca6:	b901      	cbnz	r1, 8019caa <__ascii_mbtowc+0x6>
 8019ca8:	a901      	add	r1, sp, #4
 8019caa:	b142      	cbz	r2, 8019cbe <__ascii_mbtowc+0x1a>
 8019cac:	b14b      	cbz	r3, 8019cc2 <__ascii_mbtowc+0x1e>
 8019cae:	7813      	ldrb	r3, [r2, #0]
 8019cb0:	600b      	str	r3, [r1, #0]
 8019cb2:	7812      	ldrb	r2, [r2, #0]
 8019cb4:	1e10      	subs	r0, r2, #0
 8019cb6:	bf18      	it	ne
 8019cb8:	2001      	movne	r0, #1
 8019cba:	b002      	add	sp, #8
 8019cbc:	4770      	bx	lr
 8019cbe:	4610      	mov	r0, r2
 8019cc0:	e7fb      	b.n	8019cba <__ascii_mbtowc+0x16>
 8019cc2:	f06f 0001 	mvn.w	r0, #1
 8019cc6:	e7f8      	b.n	8019cba <__ascii_mbtowc+0x16>

08019cc8 <memmove>:
 8019cc8:	4288      	cmp	r0, r1
 8019cca:	b510      	push	{r4, lr}
 8019ccc:	eb01 0402 	add.w	r4, r1, r2
 8019cd0:	d902      	bls.n	8019cd8 <memmove+0x10>
 8019cd2:	4284      	cmp	r4, r0
 8019cd4:	4623      	mov	r3, r4
 8019cd6:	d807      	bhi.n	8019ce8 <memmove+0x20>
 8019cd8:	1e43      	subs	r3, r0, #1
 8019cda:	42a1      	cmp	r1, r4
 8019cdc:	d008      	beq.n	8019cf0 <memmove+0x28>
 8019cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019ce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019ce6:	e7f8      	b.n	8019cda <memmove+0x12>
 8019ce8:	4402      	add	r2, r0
 8019cea:	4601      	mov	r1, r0
 8019cec:	428a      	cmp	r2, r1
 8019cee:	d100      	bne.n	8019cf2 <memmove+0x2a>
 8019cf0:	bd10      	pop	{r4, pc}
 8019cf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019cf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019cfa:	e7f7      	b.n	8019cec <memmove+0x24>

08019cfc <_realloc_r>:
 8019cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cfe:	4607      	mov	r7, r0
 8019d00:	4614      	mov	r4, r2
 8019d02:	460e      	mov	r6, r1
 8019d04:	b921      	cbnz	r1, 8019d10 <_realloc_r+0x14>
 8019d06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019d0a:	4611      	mov	r1, r2
 8019d0c:	f7fd be82 	b.w	8017a14 <_malloc_r>
 8019d10:	b922      	cbnz	r2, 8019d1c <_realloc_r+0x20>
 8019d12:	f7fd fe2f 	bl	8017974 <_free_r>
 8019d16:	4625      	mov	r5, r4
 8019d18:	4628      	mov	r0, r5
 8019d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d1c:	f000 fa43 	bl	801a1a6 <_malloc_usable_size_r>
 8019d20:	42a0      	cmp	r0, r4
 8019d22:	d20f      	bcs.n	8019d44 <_realloc_r+0x48>
 8019d24:	4621      	mov	r1, r4
 8019d26:	4638      	mov	r0, r7
 8019d28:	f7fd fe74 	bl	8017a14 <_malloc_r>
 8019d2c:	4605      	mov	r5, r0
 8019d2e:	2800      	cmp	r0, #0
 8019d30:	d0f2      	beq.n	8019d18 <_realloc_r+0x1c>
 8019d32:	4631      	mov	r1, r6
 8019d34:	4622      	mov	r2, r4
 8019d36:	f7fd fe07 	bl	8017948 <memcpy>
 8019d3a:	4631      	mov	r1, r6
 8019d3c:	4638      	mov	r0, r7
 8019d3e:	f7fd fe19 	bl	8017974 <_free_r>
 8019d42:	e7e9      	b.n	8019d18 <_realloc_r+0x1c>
 8019d44:	4635      	mov	r5, r6
 8019d46:	e7e7      	b.n	8019d18 <_realloc_r+0x1c>

08019d48 <__sfputc_r>:
 8019d48:	6893      	ldr	r3, [r2, #8]
 8019d4a:	3b01      	subs	r3, #1
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	b410      	push	{r4}
 8019d50:	6093      	str	r3, [r2, #8]
 8019d52:	da08      	bge.n	8019d66 <__sfputc_r+0x1e>
 8019d54:	6994      	ldr	r4, [r2, #24]
 8019d56:	42a3      	cmp	r3, r4
 8019d58:	db01      	blt.n	8019d5e <__sfputc_r+0x16>
 8019d5a:	290a      	cmp	r1, #10
 8019d5c:	d103      	bne.n	8019d66 <__sfputc_r+0x1e>
 8019d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d62:	f000 b94b 	b.w	8019ffc <__swbuf_r>
 8019d66:	6813      	ldr	r3, [r2, #0]
 8019d68:	1c58      	adds	r0, r3, #1
 8019d6a:	6010      	str	r0, [r2, #0]
 8019d6c:	7019      	strb	r1, [r3, #0]
 8019d6e:	4608      	mov	r0, r1
 8019d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d74:	4770      	bx	lr

08019d76 <__sfputs_r>:
 8019d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d78:	4606      	mov	r6, r0
 8019d7a:	460f      	mov	r7, r1
 8019d7c:	4614      	mov	r4, r2
 8019d7e:	18d5      	adds	r5, r2, r3
 8019d80:	42ac      	cmp	r4, r5
 8019d82:	d101      	bne.n	8019d88 <__sfputs_r+0x12>
 8019d84:	2000      	movs	r0, #0
 8019d86:	e007      	b.n	8019d98 <__sfputs_r+0x22>
 8019d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d8c:	463a      	mov	r2, r7
 8019d8e:	4630      	mov	r0, r6
 8019d90:	f7ff ffda 	bl	8019d48 <__sfputc_r>
 8019d94:	1c43      	adds	r3, r0, #1
 8019d96:	d1f3      	bne.n	8019d80 <__sfputs_r+0xa>
 8019d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019d9c <_vfiprintf_r>:
 8019d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da0:	460d      	mov	r5, r1
 8019da2:	b09d      	sub	sp, #116	; 0x74
 8019da4:	4614      	mov	r4, r2
 8019da6:	4698      	mov	r8, r3
 8019da8:	4606      	mov	r6, r0
 8019daa:	b118      	cbz	r0, 8019db4 <_vfiprintf_r+0x18>
 8019dac:	6983      	ldr	r3, [r0, #24]
 8019dae:	b90b      	cbnz	r3, 8019db4 <_vfiprintf_r+0x18>
 8019db0:	f7fd fca0 	bl	80176f4 <__sinit>
 8019db4:	4b89      	ldr	r3, [pc, #548]	; (8019fdc <_vfiprintf_r+0x240>)
 8019db6:	429d      	cmp	r5, r3
 8019db8:	d11b      	bne.n	8019df2 <_vfiprintf_r+0x56>
 8019dba:	6875      	ldr	r5, [r6, #4]
 8019dbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019dbe:	07d9      	lsls	r1, r3, #31
 8019dc0:	d405      	bmi.n	8019dce <_vfiprintf_r+0x32>
 8019dc2:	89ab      	ldrh	r3, [r5, #12]
 8019dc4:	059a      	lsls	r2, r3, #22
 8019dc6:	d402      	bmi.n	8019dce <_vfiprintf_r+0x32>
 8019dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019dca:	f7fd fd56 	bl	801787a <__retarget_lock_acquire_recursive>
 8019dce:	89ab      	ldrh	r3, [r5, #12]
 8019dd0:	071b      	lsls	r3, r3, #28
 8019dd2:	d501      	bpl.n	8019dd8 <_vfiprintf_r+0x3c>
 8019dd4:	692b      	ldr	r3, [r5, #16]
 8019dd6:	b9eb      	cbnz	r3, 8019e14 <_vfiprintf_r+0x78>
 8019dd8:	4629      	mov	r1, r5
 8019dda:	4630      	mov	r0, r6
 8019ddc:	f000 f96e 	bl	801a0bc <__swsetup_r>
 8019de0:	b1c0      	cbz	r0, 8019e14 <_vfiprintf_r+0x78>
 8019de2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019de4:	07dc      	lsls	r4, r3, #31
 8019de6:	d50e      	bpl.n	8019e06 <_vfiprintf_r+0x6a>
 8019de8:	f04f 30ff 	mov.w	r0, #4294967295
 8019dec:	b01d      	add	sp, #116	; 0x74
 8019dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019df2:	4b7b      	ldr	r3, [pc, #492]	; (8019fe0 <_vfiprintf_r+0x244>)
 8019df4:	429d      	cmp	r5, r3
 8019df6:	d101      	bne.n	8019dfc <_vfiprintf_r+0x60>
 8019df8:	68b5      	ldr	r5, [r6, #8]
 8019dfa:	e7df      	b.n	8019dbc <_vfiprintf_r+0x20>
 8019dfc:	4b79      	ldr	r3, [pc, #484]	; (8019fe4 <_vfiprintf_r+0x248>)
 8019dfe:	429d      	cmp	r5, r3
 8019e00:	bf08      	it	eq
 8019e02:	68f5      	ldreq	r5, [r6, #12]
 8019e04:	e7da      	b.n	8019dbc <_vfiprintf_r+0x20>
 8019e06:	89ab      	ldrh	r3, [r5, #12]
 8019e08:	0598      	lsls	r0, r3, #22
 8019e0a:	d4ed      	bmi.n	8019de8 <_vfiprintf_r+0x4c>
 8019e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e0e:	f7fd fd35 	bl	801787c <__retarget_lock_release_recursive>
 8019e12:	e7e9      	b.n	8019de8 <_vfiprintf_r+0x4c>
 8019e14:	2300      	movs	r3, #0
 8019e16:	9309      	str	r3, [sp, #36]	; 0x24
 8019e18:	2320      	movs	r3, #32
 8019e1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e22:	2330      	movs	r3, #48	; 0x30
 8019e24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019fe8 <_vfiprintf_r+0x24c>
 8019e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e2c:	f04f 0901 	mov.w	r9, #1
 8019e30:	4623      	mov	r3, r4
 8019e32:	469a      	mov	sl, r3
 8019e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e38:	b10a      	cbz	r2, 8019e3e <_vfiprintf_r+0xa2>
 8019e3a:	2a25      	cmp	r2, #37	; 0x25
 8019e3c:	d1f9      	bne.n	8019e32 <_vfiprintf_r+0x96>
 8019e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8019e42:	d00b      	beq.n	8019e5c <_vfiprintf_r+0xc0>
 8019e44:	465b      	mov	r3, fp
 8019e46:	4622      	mov	r2, r4
 8019e48:	4629      	mov	r1, r5
 8019e4a:	4630      	mov	r0, r6
 8019e4c:	f7ff ff93 	bl	8019d76 <__sfputs_r>
 8019e50:	3001      	adds	r0, #1
 8019e52:	f000 80aa 	beq.w	8019faa <_vfiprintf_r+0x20e>
 8019e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e58:	445a      	add	r2, fp
 8019e5a:	9209      	str	r2, [sp, #36]	; 0x24
 8019e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	f000 80a2 	beq.w	8019faa <_vfiprintf_r+0x20e>
 8019e66:	2300      	movs	r3, #0
 8019e68:	f04f 32ff 	mov.w	r2, #4294967295
 8019e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e70:	f10a 0a01 	add.w	sl, sl, #1
 8019e74:	9304      	str	r3, [sp, #16]
 8019e76:	9307      	str	r3, [sp, #28]
 8019e78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e7c:	931a      	str	r3, [sp, #104]	; 0x68
 8019e7e:	4654      	mov	r4, sl
 8019e80:	2205      	movs	r2, #5
 8019e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e86:	4858      	ldr	r0, [pc, #352]	; (8019fe8 <_vfiprintf_r+0x24c>)
 8019e88:	f7e6 f9aa 	bl	80001e0 <memchr>
 8019e8c:	9a04      	ldr	r2, [sp, #16]
 8019e8e:	b9d8      	cbnz	r0, 8019ec8 <_vfiprintf_r+0x12c>
 8019e90:	06d1      	lsls	r1, r2, #27
 8019e92:	bf44      	itt	mi
 8019e94:	2320      	movmi	r3, #32
 8019e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e9a:	0713      	lsls	r3, r2, #28
 8019e9c:	bf44      	itt	mi
 8019e9e:	232b      	movmi	r3, #43	; 0x2b
 8019ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8019ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8019eaa:	d015      	beq.n	8019ed8 <_vfiprintf_r+0x13c>
 8019eac:	9a07      	ldr	r2, [sp, #28]
 8019eae:	4654      	mov	r4, sl
 8019eb0:	2000      	movs	r0, #0
 8019eb2:	f04f 0c0a 	mov.w	ip, #10
 8019eb6:	4621      	mov	r1, r4
 8019eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ebc:	3b30      	subs	r3, #48	; 0x30
 8019ebe:	2b09      	cmp	r3, #9
 8019ec0:	d94e      	bls.n	8019f60 <_vfiprintf_r+0x1c4>
 8019ec2:	b1b0      	cbz	r0, 8019ef2 <_vfiprintf_r+0x156>
 8019ec4:	9207      	str	r2, [sp, #28]
 8019ec6:	e014      	b.n	8019ef2 <_vfiprintf_r+0x156>
 8019ec8:	eba0 0308 	sub.w	r3, r0, r8
 8019ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8019ed0:	4313      	orrs	r3, r2
 8019ed2:	9304      	str	r3, [sp, #16]
 8019ed4:	46a2      	mov	sl, r4
 8019ed6:	e7d2      	b.n	8019e7e <_vfiprintf_r+0xe2>
 8019ed8:	9b03      	ldr	r3, [sp, #12]
 8019eda:	1d19      	adds	r1, r3, #4
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	9103      	str	r1, [sp, #12]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	bfbb      	ittet	lt
 8019ee4:	425b      	neglt	r3, r3
 8019ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8019eea:	9307      	strge	r3, [sp, #28]
 8019eec:	9307      	strlt	r3, [sp, #28]
 8019eee:	bfb8      	it	lt
 8019ef0:	9204      	strlt	r2, [sp, #16]
 8019ef2:	7823      	ldrb	r3, [r4, #0]
 8019ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8019ef6:	d10c      	bne.n	8019f12 <_vfiprintf_r+0x176>
 8019ef8:	7863      	ldrb	r3, [r4, #1]
 8019efa:	2b2a      	cmp	r3, #42	; 0x2a
 8019efc:	d135      	bne.n	8019f6a <_vfiprintf_r+0x1ce>
 8019efe:	9b03      	ldr	r3, [sp, #12]
 8019f00:	1d1a      	adds	r2, r3, #4
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	9203      	str	r2, [sp, #12]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	bfb8      	it	lt
 8019f0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f0e:	3402      	adds	r4, #2
 8019f10:	9305      	str	r3, [sp, #20]
 8019f12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019ff8 <_vfiprintf_r+0x25c>
 8019f16:	7821      	ldrb	r1, [r4, #0]
 8019f18:	2203      	movs	r2, #3
 8019f1a:	4650      	mov	r0, sl
 8019f1c:	f7e6 f960 	bl	80001e0 <memchr>
 8019f20:	b140      	cbz	r0, 8019f34 <_vfiprintf_r+0x198>
 8019f22:	2340      	movs	r3, #64	; 0x40
 8019f24:	eba0 000a 	sub.w	r0, r0, sl
 8019f28:	fa03 f000 	lsl.w	r0, r3, r0
 8019f2c:	9b04      	ldr	r3, [sp, #16]
 8019f2e:	4303      	orrs	r3, r0
 8019f30:	3401      	adds	r4, #1
 8019f32:	9304      	str	r3, [sp, #16]
 8019f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f38:	482c      	ldr	r0, [pc, #176]	; (8019fec <_vfiprintf_r+0x250>)
 8019f3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f3e:	2206      	movs	r2, #6
 8019f40:	f7e6 f94e 	bl	80001e0 <memchr>
 8019f44:	2800      	cmp	r0, #0
 8019f46:	d03f      	beq.n	8019fc8 <_vfiprintf_r+0x22c>
 8019f48:	4b29      	ldr	r3, [pc, #164]	; (8019ff0 <_vfiprintf_r+0x254>)
 8019f4a:	bb1b      	cbnz	r3, 8019f94 <_vfiprintf_r+0x1f8>
 8019f4c:	9b03      	ldr	r3, [sp, #12]
 8019f4e:	3307      	adds	r3, #7
 8019f50:	f023 0307 	bic.w	r3, r3, #7
 8019f54:	3308      	adds	r3, #8
 8019f56:	9303      	str	r3, [sp, #12]
 8019f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f5a:	443b      	add	r3, r7
 8019f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8019f5e:	e767      	b.n	8019e30 <_vfiprintf_r+0x94>
 8019f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f64:	460c      	mov	r4, r1
 8019f66:	2001      	movs	r0, #1
 8019f68:	e7a5      	b.n	8019eb6 <_vfiprintf_r+0x11a>
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	3401      	adds	r4, #1
 8019f6e:	9305      	str	r3, [sp, #20]
 8019f70:	4619      	mov	r1, r3
 8019f72:	f04f 0c0a 	mov.w	ip, #10
 8019f76:	4620      	mov	r0, r4
 8019f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f7c:	3a30      	subs	r2, #48	; 0x30
 8019f7e:	2a09      	cmp	r2, #9
 8019f80:	d903      	bls.n	8019f8a <_vfiprintf_r+0x1ee>
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d0c5      	beq.n	8019f12 <_vfiprintf_r+0x176>
 8019f86:	9105      	str	r1, [sp, #20]
 8019f88:	e7c3      	b.n	8019f12 <_vfiprintf_r+0x176>
 8019f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f8e:	4604      	mov	r4, r0
 8019f90:	2301      	movs	r3, #1
 8019f92:	e7f0      	b.n	8019f76 <_vfiprintf_r+0x1da>
 8019f94:	ab03      	add	r3, sp, #12
 8019f96:	9300      	str	r3, [sp, #0]
 8019f98:	462a      	mov	r2, r5
 8019f9a:	4b16      	ldr	r3, [pc, #88]	; (8019ff4 <_vfiprintf_r+0x258>)
 8019f9c:	a904      	add	r1, sp, #16
 8019f9e:	4630      	mov	r0, r6
 8019fa0:	f7fd fe32 	bl	8017c08 <_printf_float>
 8019fa4:	4607      	mov	r7, r0
 8019fa6:	1c78      	adds	r0, r7, #1
 8019fa8:	d1d6      	bne.n	8019f58 <_vfiprintf_r+0x1bc>
 8019faa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019fac:	07d9      	lsls	r1, r3, #31
 8019fae:	d405      	bmi.n	8019fbc <_vfiprintf_r+0x220>
 8019fb0:	89ab      	ldrh	r3, [r5, #12]
 8019fb2:	059a      	lsls	r2, r3, #22
 8019fb4:	d402      	bmi.n	8019fbc <_vfiprintf_r+0x220>
 8019fb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019fb8:	f7fd fc60 	bl	801787c <__retarget_lock_release_recursive>
 8019fbc:	89ab      	ldrh	r3, [r5, #12]
 8019fbe:	065b      	lsls	r3, r3, #25
 8019fc0:	f53f af12 	bmi.w	8019de8 <_vfiprintf_r+0x4c>
 8019fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019fc6:	e711      	b.n	8019dec <_vfiprintf_r+0x50>
 8019fc8:	ab03      	add	r3, sp, #12
 8019fca:	9300      	str	r3, [sp, #0]
 8019fcc:	462a      	mov	r2, r5
 8019fce:	4b09      	ldr	r3, [pc, #36]	; (8019ff4 <_vfiprintf_r+0x258>)
 8019fd0:	a904      	add	r1, sp, #16
 8019fd2:	4630      	mov	r0, r6
 8019fd4:	f7fe f8bc 	bl	8018150 <_printf_i>
 8019fd8:	e7e4      	b.n	8019fa4 <_vfiprintf_r+0x208>
 8019fda:	bf00      	nop
 8019fdc:	0801acfc 	.word	0x0801acfc
 8019fe0:	0801ad1c 	.word	0x0801ad1c
 8019fe4:	0801acdc 	.word	0x0801acdc
 8019fe8:	0801af64 	.word	0x0801af64
 8019fec:	0801af6e 	.word	0x0801af6e
 8019ff0:	08017c09 	.word	0x08017c09
 8019ff4:	08019d77 	.word	0x08019d77
 8019ff8:	0801af6a 	.word	0x0801af6a

08019ffc <__swbuf_r>:
 8019ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ffe:	460e      	mov	r6, r1
 801a000:	4614      	mov	r4, r2
 801a002:	4605      	mov	r5, r0
 801a004:	b118      	cbz	r0, 801a00e <__swbuf_r+0x12>
 801a006:	6983      	ldr	r3, [r0, #24]
 801a008:	b90b      	cbnz	r3, 801a00e <__swbuf_r+0x12>
 801a00a:	f7fd fb73 	bl	80176f4 <__sinit>
 801a00e:	4b21      	ldr	r3, [pc, #132]	; (801a094 <__swbuf_r+0x98>)
 801a010:	429c      	cmp	r4, r3
 801a012:	d12b      	bne.n	801a06c <__swbuf_r+0x70>
 801a014:	686c      	ldr	r4, [r5, #4]
 801a016:	69a3      	ldr	r3, [r4, #24]
 801a018:	60a3      	str	r3, [r4, #8]
 801a01a:	89a3      	ldrh	r3, [r4, #12]
 801a01c:	071a      	lsls	r2, r3, #28
 801a01e:	d52f      	bpl.n	801a080 <__swbuf_r+0x84>
 801a020:	6923      	ldr	r3, [r4, #16]
 801a022:	b36b      	cbz	r3, 801a080 <__swbuf_r+0x84>
 801a024:	6923      	ldr	r3, [r4, #16]
 801a026:	6820      	ldr	r0, [r4, #0]
 801a028:	1ac0      	subs	r0, r0, r3
 801a02a:	6963      	ldr	r3, [r4, #20]
 801a02c:	b2f6      	uxtb	r6, r6
 801a02e:	4283      	cmp	r3, r0
 801a030:	4637      	mov	r7, r6
 801a032:	dc04      	bgt.n	801a03e <__swbuf_r+0x42>
 801a034:	4621      	mov	r1, r4
 801a036:	4628      	mov	r0, r5
 801a038:	f7fd fac8 	bl	80175cc <_fflush_r>
 801a03c:	bb30      	cbnz	r0, 801a08c <__swbuf_r+0x90>
 801a03e:	68a3      	ldr	r3, [r4, #8]
 801a040:	3b01      	subs	r3, #1
 801a042:	60a3      	str	r3, [r4, #8]
 801a044:	6823      	ldr	r3, [r4, #0]
 801a046:	1c5a      	adds	r2, r3, #1
 801a048:	6022      	str	r2, [r4, #0]
 801a04a:	701e      	strb	r6, [r3, #0]
 801a04c:	6963      	ldr	r3, [r4, #20]
 801a04e:	3001      	adds	r0, #1
 801a050:	4283      	cmp	r3, r0
 801a052:	d004      	beq.n	801a05e <__swbuf_r+0x62>
 801a054:	89a3      	ldrh	r3, [r4, #12]
 801a056:	07db      	lsls	r3, r3, #31
 801a058:	d506      	bpl.n	801a068 <__swbuf_r+0x6c>
 801a05a:	2e0a      	cmp	r6, #10
 801a05c:	d104      	bne.n	801a068 <__swbuf_r+0x6c>
 801a05e:	4621      	mov	r1, r4
 801a060:	4628      	mov	r0, r5
 801a062:	f7fd fab3 	bl	80175cc <_fflush_r>
 801a066:	b988      	cbnz	r0, 801a08c <__swbuf_r+0x90>
 801a068:	4638      	mov	r0, r7
 801a06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a06c:	4b0a      	ldr	r3, [pc, #40]	; (801a098 <__swbuf_r+0x9c>)
 801a06e:	429c      	cmp	r4, r3
 801a070:	d101      	bne.n	801a076 <__swbuf_r+0x7a>
 801a072:	68ac      	ldr	r4, [r5, #8]
 801a074:	e7cf      	b.n	801a016 <__swbuf_r+0x1a>
 801a076:	4b09      	ldr	r3, [pc, #36]	; (801a09c <__swbuf_r+0xa0>)
 801a078:	429c      	cmp	r4, r3
 801a07a:	bf08      	it	eq
 801a07c:	68ec      	ldreq	r4, [r5, #12]
 801a07e:	e7ca      	b.n	801a016 <__swbuf_r+0x1a>
 801a080:	4621      	mov	r1, r4
 801a082:	4628      	mov	r0, r5
 801a084:	f000 f81a 	bl	801a0bc <__swsetup_r>
 801a088:	2800      	cmp	r0, #0
 801a08a:	d0cb      	beq.n	801a024 <__swbuf_r+0x28>
 801a08c:	f04f 37ff 	mov.w	r7, #4294967295
 801a090:	e7ea      	b.n	801a068 <__swbuf_r+0x6c>
 801a092:	bf00      	nop
 801a094:	0801acfc 	.word	0x0801acfc
 801a098:	0801ad1c 	.word	0x0801ad1c
 801a09c:	0801acdc 	.word	0x0801acdc

0801a0a0 <__ascii_wctomb>:
 801a0a0:	b149      	cbz	r1, 801a0b6 <__ascii_wctomb+0x16>
 801a0a2:	2aff      	cmp	r2, #255	; 0xff
 801a0a4:	bf85      	ittet	hi
 801a0a6:	238a      	movhi	r3, #138	; 0x8a
 801a0a8:	6003      	strhi	r3, [r0, #0]
 801a0aa:	700a      	strbls	r2, [r1, #0]
 801a0ac:	f04f 30ff 	movhi.w	r0, #4294967295
 801a0b0:	bf98      	it	ls
 801a0b2:	2001      	movls	r0, #1
 801a0b4:	4770      	bx	lr
 801a0b6:	4608      	mov	r0, r1
 801a0b8:	4770      	bx	lr
	...

0801a0bc <__swsetup_r>:
 801a0bc:	4b32      	ldr	r3, [pc, #200]	; (801a188 <__swsetup_r+0xcc>)
 801a0be:	b570      	push	{r4, r5, r6, lr}
 801a0c0:	681d      	ldr	r5, [r3, #0]
 801a0c2:	4606      	mov	r6, r0
 801a0c4:	460c      	mov	r4, r1
 801a0c6:	b125      	cbz	r5, 801a0d2 <__swsetup_r+0x16>
 801a0c8:	69ab      	ldr	r3, [r5, #24]
 801a0ca:	b913      	cbnz	r3, 801a0d2 <__swsetup_r+0x16>
 801a0cc:	4628      	mov	r0, r5
 801a0ce:	f7fd fb11 	bl	80176f4 <__sinit>
 801a0d2:	4b2e      	ldr	r3, [pc, #184]	; (801a18c <__swsetup_r+0xd0>)
 801a0d4:	429c      	cmp	r4, r3
 801a0d6:	d10f      	bne.n	801a0f8 <__swsetup_r+0x3c>
 801a0d8:	686c      	ldr	r4, [r5, #4]
 801a0da:	89a3      	ldrh	r3, [r4, #12]
 801a0dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a0e0:	0719      	lsls	r1, r3, #28
 801a0e2:	d42c      	bmi.n	801a13e <__swsetup_r+0x82>
 801a0e4:	06dd      	lsls	r5, r3, #27
 801a0e6:	d411      	bmi.n	801a10c <__swsetup_r+0x50>
 801a0e8:	2309      	movs	r3, #9
 801a0ea:	6033      	str	r3, [r6, #0]
 801a0ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a0f0:	81a3      	strh	r3, [r4, #12]
 801a0f2:	f04f 30ff 	mov.w	r0, #4294967295
 801a0f6:	e03e      	b.n	801a176 <__swsetup_r+0xba>
 801a0f8:	4b25      	ldr	r3, [pc, #148]	; (801a190 <__swsetup_r+0xd4>)
 801a0fa:	429c      	cmp	r4, r3
 801a0fc:	d101      	bne.n	801a102 <__swsetup_r+0x46>
 801a0fe:	68ac      	ldr	r4, [r5, #8]
 801a100:	e7eb      	b.n	801a0da <__swsetup_r+0x1e>
 801a102:	4b24      	ldr	r3, [pc, #144]	; (801a194 <__swsetup_r+0xd8>)
 801a104:	429c      	cmp	r4, r3
 801a106:	bf08      	it	eq
 801a108:	68ec      	ldreq	r4, [r5, #12]
 801a10a:	e7e6      	b.n	801a0da <__swsetup_r+0x1e>
 801a10c:	0758      	lsls	r0, r3, #29
 801a10e:	d512      	bpl.n	801a136 <__swsetup_r+0x7a>
 801a110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a112:	b141      	cbz	r1, 801a126 <__swsetup_r+0x6a>
 801a114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a118:	4299      	cmp	r1, r3
 801a11a:	d002      	beq.n	801a122 <__swsetup_r+0x66>
 801a11c:	4630      	mov	r0, r6
 801a11e:	f7fd fc29 	bl	8017974 <_free_r>
 801a122:	2300      	movs	r3, #0
 801a124:	6363      	str	r3, [r4, #52]	; 0x34
 801a126:	89a3      	ldrh	r3, [r4, #12]
 801a128:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a12c:	81a3      	strh	r3, [r4, #12]
 801a12e:	2300      	movs	r3, #0
 801a130:	6063      	str	r3, [r4, #4]
 801a132:	6923      	ldr	r3, [r4, #16]
 801a134:	6023      	str	r3, [r4, #0]
 801a136:	89a3      	ldrh	r3, [r4, #12]
 801a138:	f043 0308 	orr.w	r3, r3, #8
 801a13c:	81a3      	strh	r3, [r4, #12]
 801a13e:	6923      	ldr	r3, [r4, #16]
 801a140:	b94b      	cbnz	r3, 801a156 <__swsetup_r+0x9a>
 801a142:	89a3      	ldrh	r3, [r4, #12]
 801a144:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a14c:	d003      	beq.n	801a156 <__swsetup_r+0x9a>
 801a14e:	4621      	mov	r1, r4
 801a150:	4630      	mov	r0, r6
 801a152:	f7fd fbb9 	bl	80178c8 <__smakebuf_r>
 801a156:	89a0      	ldrh	r0, [r4, #12]
 801a158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a15c:	f010 0301 	ands.w	r3, r0, #1
 801a160:	d00a      	beq.n	801a178 <__swsetup_r+0xbc>
 801a162:	2300      	movs	r3, #0
 801a164:	60a3      	str	r3, [r4, #8]
 801a166:	6963      	ldr	r3, [r4, #20]
 801a168:	425b      	negs	r3, r3
 801a16a:	61a3      	str	r3, [r4, #24]
 801a16c:	6923      	ldr	r3, [r4, #16]
 801a16e:	b943      	cbnz	r3, 801a182 <__swsetup_r+0xc6>
 801a170:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a174:	d1ba      	bne.n	801a0ec <__swsetup_r+0x30>
 801a176:	bd70      	pop	{r4, r5, r6, pc}
 801a178:	0781      	lsls	r1, r0, #30
 801a17a:	bf58      	it	pl
 801a17c:	6963      	ldrpl	r3, [r4, #20]
 801a17e:	60a3      	str	r3, [r4, #8]
 801a180:	e7f4      	b.n	801a16c <__swsetup_r+0xb0>
 801a182:	2000      	movs	r0, #0
 801a184:	e7f7      	b.n	801a176 <__swsetup_r+0xba>
 801a186:	bf00      	nop
 801a188:	2000002c 	.word	0x2000002c
 801a18c:	0801acfc 	.word	0x0801acfc
 801a190:	0801ad1c 	.word	0x0801ad1c
 801a194:	0801acdc 	.word	0x0801acdc

0801a198 <abort>:
 801a198:	b508      	push	{r3, lr}
 801a19a:	2006      	movs	r0, #6
 801a19c:	f000 f834 	bl	801a208 <raise>
 801a1a0:	2001      	movs	r0, #1
 801a1a2:	f7f6 fe2d 	bl	8010e00 <_exit>

0801a1a6 <_malloc_usable_size_r>:
 801a1a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a1aa:	1f18      	subs	r0, r3, #4
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	bfbc      	itt	lt
 801a1b0:	580b      	ldrlt	r3, [r1, r0]
 801a1b2:	18c0      	addlt	r0, r0, r3
 801a1b4:	4770      	bx	lr

0801a1b6 <_raise_r>:
 801a1b6:	291f      	cmp	r1, #31
 801a1b8:	b538      	push	{r3, r4, r5, lr}
 801a1ba:	4604      	mov	r4, r0
 801a1bc:	460d      	mov	r5, r1
 801a1be:	d904      	bls.n	801a1ca <_raise_r+0x14>
 801a1c0:	2316      	movs	r3, #22
 801a1c2:	6003      	str	r3, [r0, #0]
 801a1c4:	f04f 30ff 	mov.w	r0, #4294967295
 801a1c8:	bd38      	pop	{r3, r4, r5, pc}
 801a1ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a1cc:	b112      	cbz	r2, 801a1d4 <_raise_r+0x1e>
 801a1ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a1d2:	b94b      	cbnz	r3, 801a1e8 <_raise_r+0x32>
 801a1d4:	4620      	mov	r0, r4
 801a1d6:	f000 f831 	bl	801a23c <_getpid_r>
 801a1da:	462a      	mov	r2, r5
 801a1dc:	4601      	mov	r1, r0
 801a1de:	4620      	mov	r0, r4
 801a1e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a1e4:	f000 b818 	b.w	801a218 <_kill_r>
 801a1e8:	2b01      	cmp	r3, #1
 801a1ea:	d00a      	beq.n	801a202 <_raise_r+0x4c>
 801a1ec:	1c59      	adds	r1, r3, #1
 801a1ee:	d103      	bne.n	801a1f8 <_raise_r+0x42>
 801a1f0:	2316      	movs	r3, #22
 801a1f2:	6003      	str	r3, [r0, #0]
 801a1f4:	2001      	movs	r0, #1
 801a1f6:	e7e7      	b.n	801a1c8 <_raise_r+0x12>
 801a1f8:	2400      	movs	r4, #0
 801a1fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a1fe:	4628      	mov	r0, r5
 801a200:	4798      	blx	r3
 801a202:	2000      	movs	r0, #0
 801a204:	e7e0      	b.n	801a1c8 <_raise_r+0x12>
	...

0801a208 <raise>:
 801a208:	4b02      	ldr	r3, [pc, #8]	; (801a214 <raise+0xc>)
 801a20a:	4601      	mov	r1, r0
 801a20c:	6818      	ldr	r0, [r3, #0]
 801a20e:	f7ff bfd2 	b.w	801a1b6 <_raise_r>
 801a212:	bf00      	nop
 801a214:	2000002c 	.word	0x2000002c

0801a218 <_kill_r>:
 801a218:	b538      	push	{r3, r4, r5, lr}
 801a21a:	4d07      	ldr	r5, [pc, #28]	; (801a238 <_kill_r+0x20>)
 801a21c:	2300      	movs	r3, #0
 801a21e:	4604      	mov	r4, r0
 801a220:	4608      	mov	r0, r1
 801a222:	4611      	mov	r1, r2
 801a224:	602b      	str	r3, [r5, #0]
 801a226:	f7f6 fddb 	bl	8010de0 <_kill>
 801a22a:	1c43      	adds	r3, r0, #1
 801a22c:	d102      	bne.n	801a234 <_kill_r+0x1c>
 801a22e:	682b      	ldr	r3, [r5, #0]
 801a230:	b103      	cbz	r3, 801a234 <_kill_r+0x1c>
 801a232:	6023      	str	r3, [r4, #0]
 801a234:	bd38      	pop	{r3, r4, r5, pc}
 801a236:	bf00      	nop
 801a238:	200009f8 	.word	0x200009f8

0801a23c <_getpid_r>:
 801a23c:	f7f6 bdc8 	b.w	8010dd0 <_getpid>

0801a240 <_init>:
 801a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a242:	bf00      	nop
 801a244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a246:	bc08      	pop	{r3}
 801a248:	469e      	mov	lr, r3
 801a24a:	4770      	bx	lr

0801a24c <_fini>:
 801a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a24e:	bf00      	nop
 801a250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a252:	bc08      	pop	{r3}
 801a254:	469e      	mov	lr, r3
 801a256:	4770      	bx	lr
