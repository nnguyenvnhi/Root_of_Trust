
RoT_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b030  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e64  0801b1c0  0801b1c0  0002b1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c024  0801c024  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801c024  0801c024  0002c024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c02c  0801c02c  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c02c  0801c02c  0002c02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c030  0801c030  0002c030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801c034  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301fc  2**0
                  CONTENTS
 10 .bss          00000920  200001fc  200001fc  000301fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b1c  20000b1c  000301fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022e61  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045df  00000000  00000000  0005308d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a40  00000000  00000000  00057670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018b0  00000000  00000000  000590b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000064fb  00000000  00000000  0005a960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021b25  00000000  00000000  00060e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d779d  00000000  00000000  00082980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015a11d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000803c  00000000  00000000  0015a170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b1a8 	.word	0x0801b1a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0801b1a8 	.word	0x0801b1a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <Chacha20_Xor>:
FUNC(void, CHACHA20_PUBLIC_FUNCTION) Chacha20_Xor(uint8 keyStream[],
						  uint32 cell[],
						  uint8 textInput[],
						  uint16 size,
						  uint8 textOutput[])
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
	// C: call setCell
	ChaCha20_SetCell(cell, Gb_sulConstant, Gb_sculChachaKey, \
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <Chacha20_Xor+0x38>)
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <Chacha20_Xor+0x3c>)
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <Chacha20_Xor+0x40>)
 8000eb6:	490b      	ldr	r1, [pc, #44]	; (8000ee4 <Chacha20_Xor+0x44>)
 8000eb8:	68b8      	ldr	r0, [r7, #8]
 8000eba:	f000 f815 	bl	8000ee8 <ChaCha20_SetCell>
	                 Gb_sulBlockNumber, Gb_sulNonce);

	ChaCha20_FinalXor((uint8*)keyStream, (uint8*)cell, \
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f000 fa97 	bl	80013fc <ChaCha20_FinalXor>
	                  (uint8*)textInput, size, (uint8*)textOutput);
} /* END ChaCha20_Xor */
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000018 	.word	0x20000018
 8000edc:	20000010 	.word	0x20000010
 8000ee0:	0801b4bc 	.word	0x0801b4bc
 8000ee4:	20000000 	.word	0x20000000

08000ee8 <ChaCha20_SetCell>:
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_SetCell(uint32 cell[],
						       uint32 constant[],
						       const uint32 key[],
						       uint32 blockNumber[],
						       uint32 nonce[])
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]

	// L: setConstant, i = 0 -> 3
	for (uint8 i = 0; i < 4; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	75fb      	strb	r3, [r7, #23]
 8000efa:	e00c      	b.n	8000f16 <ChaCha20_SetCell+0x2e>
		// C: Assign cell[i] = constant[i]
		cell[i] = constant[i];
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	441a      	add	r2, r3
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	68f9      	ldr	r1, [r7, #12]
 8000f0a:	440b      	add	r3, r1
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	601a      	str	r2, [r3, #0]
	for (uint8 i = 0; i < 4; i++)
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	3301      	adds	r3, #1
 8000f14:	75fb      	strb	r3, [r7, #23]
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d9ef      	bls.n	8000efc <ChaCha20_SetCell+0x14>

	// L: setkey, i = 4 -> 11
	for (uint8 i = 4; i < 12; i++)
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	75bb      	strb	r3, [r7, #22]
 8000f20:	e00f      	b.n	8000f42 <ChaCha20_SetCell+0x5a>

		// C: Assign cell[i] = key[i - 4]
		cell[i] = key[i - 4];
 8000f22:	7dbb      	ldrb	r3, [r7, #22]
 8000f24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f28:	3b04      	subs	r3, #4
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	441a      	add	r2, r3
 8000f30:	7dbb      	ldrb	r3, [r7, #22]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	68f9      	ldr	r1, [r7, #12]
 8000f36:	440b      	add	r3, r1
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	601a      	str	r2, [r3, #0]
	for (uint8 i = 4; i < 12; i++)
 8000f3c:	7dbb      	ldrb	r3, [r7, #22]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	75bb      	strb	r3, [r7, #22]
 8000f42:	7dbb      	ldrb	r3, [r7, #22]
 8000f44:	2b0b      	cmp	r3, #11
 8000f46:	d9ec      	bls.n	8000f22 <ChaCha20_SetCell+0x3a>

	// L: setBlockNumber, i = 12 -> 13
	for (uint8 i = 12; i < 14; i++)
 8000f48:	230c      	movs	r3, #12
 8000f4a:	757b      	strb	r3, [r7, #21]
 8000f4c:	e00f      	b.n	8000f6e <ChaCha20_SetCell+0x86>

		// C: Assign cell[i] = blockNumber[i - 12]
		cell[i] = blockNumber[i - 12];
 8000f4e:	7d7b      	ldrb	r3, [r7, #21]
 8000f50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f54:	3b0c      	subs	r3, #12
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	441a      	add	r2, r3
 8000f5c:	7d7b      	ldrb	r3, [r7, #21]
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	440b      	add	r3, r1
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	601a      	str	r2, [r3, #0]
	for (uint8 i = 12; i < 14; i++)
 8000f68:	7d7b      	ldrb	r3, [r7, #21]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	757b      	strb	r3, [r7, #21]
 8000f6e:	7d7b      	ldrb	r3, [r7, #21]
 8000f70:	2b0d      	cmp	r3, #13
 8000f72:	d9ec      	bls.n	8000f4e <ChaCha20_SetCell+0x66>

	// L: setBlockNumber, i = 14 -> 15
	for (uint8 i = 14; i < 16; i++)
 8000f74:	230e      	movs	r3, #14
 8000f76:	753b      	strb	r3, [r7, #20]
 8000f78:	e00f      	b.n	8000f9a <ChaCha20_SetCell+0xb2>

		// C: Assign cell[i] = nonce[i - 12]
		cell[i] = nonce[i - 14];
 8000f7a:	7d3b      	ldrb	r3, [r7, #20]
 8000f7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f80:	3b0e      	subs	r3, #14
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	6a3a      	ldr	r2, [r7, #32]
 8000f86:	441a      	add	r2, r3
 8000f88:	7d3b      	ldrb	r3, [r7, #20]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	440b      	add	r3, r1
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	601a      	str	r2, [r3, #0]
	for (uint8 i = 14; i < 16; i++)
 8000f94:	7d3b      	ldrb	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	753b      	strb	r3, [r7, #20]
 8000f9a:	7d3b      	ldrb	r3, [r7, #20]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d9ec      	bls.n	8000f7a <ChaCha20_SetCell+0x92>
}/* END ChaCha20_SetCell */
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	371c      	adds	r7, #28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <ChaCha20_Round>:
**
** Functions Invoked     : None
***********************************************************************************/
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_Round(uint8 keyStream[],
						     uint32 cell[])
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b095      	sub	sp, #84	; 0x54
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
	// C-DE: x-array for storing 16 cells KSG input
	uint32 x[16];

	//L: for storing 16 cells KSG input
	for (uint8 i = 0; i < 16; i++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000fbe:	e012      	b.n	8000fe6 <ChaCha20_Round+0x38>
		x[i] = cell[i];
 8000fc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	441a      	add	r2, r3
 8000fca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f843 2c44 	str.w	r2, [r3, #-68]
	for (uint8 i = 0; i < 16; i++)
 8000fdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000fe6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d9e8      	bls.n	8000fc0 <ChaCha20_Round+0x12>

	//Loop for mixing in Round function-------------
	for (uint8 i = 0; i < ROUNDS; i += 2)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000ff4:	e184      	b.n	8001300 <ChaCha20_Round+0x352>
	{
		//Odd rounds------------------------------
		QR(x[0], x[4], x[8], x[12]);
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4053      	eors	r3, r2
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001008:	ea4f 4333 	mov.w	r3, r3, ror #16
 800100c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800100e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001012:	4413      	add	r3, r2
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001016:	69fa      	ldr	r2, [r7, #28]
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	4053      	eors	r3, r2
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	ea4f 5333 	mov.w	r3, r3, ror #20
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4053      	eors	r3, r2
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001038:	ea4f 6333 	mov.w	r3, r3, ror #24
 800103c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800103e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001042:	4413      	add	r3, r2
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104a:	4053      	eors	r3, r2
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001054:	61fb      	str	r3, [r7, #28]
		QR(x[1], x[5], x[9], x[13]);
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	4413      	add	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4053      	eors	r3, r2
 8001064:	643b      	str	r3, [r7, #64]	; 0x40
 8001066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001068:	ea4f 4333 	mov.w	r3, r3, ror #16
 800106c:	643b      	str	r3, [r7, #64]	; 0x40
 800106e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001072:	4413      	add	r3, r2
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
 8001076:	6a3a      	ldr	r2, [r7, #32]
 8001078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107a:	4053      	eors	r3, r2
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	ea4f 5333 	mov.w	r3, r3, ror #20
 8001084:	623b      	str	r3, [r7, #32]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	4413      	add	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4053      	eors	r3, r2
 8001094:	643b      	str	r3, [r7, #64]	; 0x40
 8001096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001098:	ea4f 6333 	mov.w	r3, r3, ror #24
 800109c:	643b      	str	r3, [r7, #64]	; 0x40
 800109e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010a2:	4413      	add	r3, r2
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
 80010a6:	6a3a      	ldr	r2, [r7, #32]
 80010a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010aa:	4053      	eors	r3, r2
 80010ac:	623b      	str	r3, [r7, #32]
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80010b4:	623b      	str	r3, [r7, #32]
		QR(x[2], x[6], x[10], x[14]);
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	4413      	add	r3, r2
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	4053      	eors	r3, r2
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
 80010c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
 80010ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010d2:	4413      	add	r3, r2
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
 80010d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010da:	4053      	eors	r3, r2
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	4413      	add	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4053      	eors	r3, r2
 80010f4:	647b      	str	r3, [r7, #68]	; 0x44
 80010f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010f8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
 80010fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001102:	4413      	add	r3, r2
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
 8001106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	4053      	eors	r3, r2
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
		QR(x[3], x[7], x[11], x[15]);
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	4413      	add	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4053      	eors	r3, r2
 8001124:	64bb      	str	r3, [r7, #72]	; 0x48
 8001126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001128:	ea4f 4333 	mov.w	r3, r3, ror #16
 800112c:	64bb      	str	r3, [r7, #72]	; 0x48
 800112e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001132:	4413      	add	r3, r2
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
 8001136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800113a:	4053      	eors	r3, r2
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
 800113e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001140:	ea4f 5333 	mov.w	r3, r3, ror #20
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114a:	4413      	add	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	4053      	eors	r3, r2
 8001154:	64bb      	str	r3, [r7, #72]	; 0x48
 8001156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001158:	ea4f 6333 	mov.w	r3, r3, ror #24
 800115c:	64bb      	str	r3, [r7, #72]	; 0x48
 800115e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001162:	4413      	add	r3, r2
 8001164:	63bb      	str	r3, [r7, #56]	; 0x38
 8001166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800116a:	4053      	eors	r3, r2
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
 800116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001170:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
		//Even rounds-------------------------
		QR(x[0], x[5], x[10], x[15]);
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4053      	eors	r3, r2
 8001184:	64bb      	str	r3, [r7, #72]	; 0x48
 8001186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001188:	ea4f 4333 	mov.w	r3, r3, ror #16
 800118c:	64bb      	str	r3, [r7, #72]	; 0x48
 800118e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001192:	4413      	add	r3, r2
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
 8001196:	6a3a      	ldr	r2, [r7, #32]
 8001198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119a:	4053      	eors	r3, r2
 800119c:	623b      	str	r3, [r7, #32]
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80011a4:	623b      	str	r3, [r7, #32]
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4053      	eors	r3, r2
 80011b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80011b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011b8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80011bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80011be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011c2:	4413      	add	r3, r2
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
 80011c6:	6a3a      	ldr	r2, [r7, #32]
 80011c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ca:	4053      	eors	r3, r2
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80011d4:	623b      	str	r3, [r7, #32]
		QR(x[1], x[6], x[11], x[12]);
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	4413      	add	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4053      	eors	r3, r2
 80011e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011e8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80011ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011f2:	4413      	add	r3, r2
 80011f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80011f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fa:	4053      	eors	r3, r2
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	ea4f 5333 	mov.w	r3, r3, ror #20
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	4413      	add	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4053      	eors	r3, r2
 8001214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001218:	ea4f 6333 	mov.w	r3, r3, ror #24
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800121e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001222:	4413      	add	r3, r2
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
 8001226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800122a:	4053      	eors	r3, r2
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
		QR(x[2], x[7], x[8], x[13]);
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	4413      	add	r3, r2
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	4053      	eors	r3, r2
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
 8001246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001248:	ea4f 4333 	mov.w	r3, r3, ror #16
 800124c:	643b      	str	r3, [r7, #64]	; 0x40
 800124e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001252:	4413      	add	r3, r2
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125a:	4053      	eors	r3, r2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	ea4f 5333 	mov.w	r3, r3, ror #20
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126a:	4413      	add	r3, r2
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	4053      	eors	r3, r2
 8001274:	643b      	str	r3, [r7, #64]	; 0x40
 8001276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001278:	ea4f 6333 	mov.w	r3, r3, ror #24
 800127c:	643b      	str	r3, [r7, #64]	; 0x40
 800127e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001282:	4413      	add	r3, r2
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128a:	4053      	eors	r3, r2
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
		QR(x[3], x[4], x[9], x[14]);
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4413      	add	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	4053      	eors	r3, r2
 80012a4:	647b      	str	r3, [r7, #68]	; 0x44
 80012a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012a8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
 80012ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012b2:	4413      	add	r3, r2
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ba:	4053      	eors	r3, r2
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	4413      	add	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	4053      	eors	r3, r2
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
 80012d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012d8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80012dc:	647b      	str	r3, [r7, #68]	; 0x44
 80012de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012e2:	4413      	add	r3, r2
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
 80012e6:	69fa      	ldr	r2, [r7, #28]
 80012e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ea:	4053      	eors	r3, r2
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80012f4:	61fb      	str	r3, [r7, #28]
	for (uint8 i = 0; i < ROUNDS; i += 2)
 80012f6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80012fa:	3302      	adds	r3, #2
 80012fc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001300:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001304:	2b13      	cmp	r3, #19
 8001306:	f67f ae76 	bls.w	8000ff6 <ChaCha20_Round+0x48>
	}

	//Loop for adding KSG table input with output table of Round function
	for (uint8 i = 0, b = 0; i < 16; i++)
 800130a:	2300      	movs	r3, #0
 800130c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001310:	2300      	movs	r3, #0
 8001312:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001316:	e066      	b.n	80013e6 <ChaCha20_Round+0x438>
	{
		x[i] += cell[i];
 8001318:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001322:	4413      	add	r3, r2
 8001324:	f853 1c44 	ldr.w	r1, [r3, #-68]
 8001328:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4413      	add	r3, r2
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001338:	440a      	add	r2, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001340:	440b      	add	r3, r1
 8001342:	f843 2c44 	str.w	r2, [r3, #-68]

		// Store keystream
		keyStream[b++] = x[i] & 0xFF;
 8001346:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001350:	4413      	add	r3, r2
 8001352:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8001356:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800135a:	1c59      	adds	r1, r3, #1
 800135c:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 8001360:	4619      	mov	r1, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	440b      	add	r3, r1
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 8) & 0xFF;
 800136a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001374:	4413      	add	r3, r2
 8001376:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800137a:	0a1a      	lsrs	r2, r3, #8
 800137c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001380:	1c59      	adds	r1, r3, #1
 8001382:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 8001386:	4619      	mov	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	440b      	add	r3, r1
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 16) & 0xFF;
 8001390:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800139a:	4413      	add	r3, r2
 800139c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80013a0:	0c1a      	lsrs	r2, r3, #16
 80013a2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80013a6:	1c59      	adds	r1, r3, #1
 80013a8:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 80013ac:	4619      	mov	r1, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	440b      	add	r3, r1
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 24) & 0xFF;
 80013b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013c0:	4413      	add	r3, r2
 80013c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80013c6:	0e1a      	lsrs	r2, r3, #24
 80013c8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80013cc:	1c59      	adds	r1, r3, #1
 80013ce:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 80013d2:	4619      	mov	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	440b      	add	r3, r1
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	701a      	strb	r2, [r3, #0]
	for (uint8 i = 0, b = 0; i < 16; i++)
 80013dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013e0:	3301      	adds	r3, #1
 80013e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80013e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	d994      	bls.n	8001318 <ChaCha20_Round+0x36a>
	}
}/* END ChaCha20_Round */
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3754      	adds	r7, #84	; 0x54
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <ChaCha20_FinalXor>:
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_FinalXor(uint8 keyStream[],
							uint8 cell[],
							uint8 textInput[],
							uint16 size,
							uint8 textOutput[])
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
	// C: roundFunction
	ChaCha20_Round(keyStream, (uint32*)cell);
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f7ff fdce 	bl	8000fae <ChaCha20_Round>

	// L: textInput and textOutput
	uint16 j = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
	uint16 round = size/64;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	613b      	str	r3, [r7, #16]
		   round += (size%64!=0)?1:0;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <ChaCha20_FinalXor+0x2e>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <ChaCha20_FinalXor+0x30>
 800142a:	2300      	movs	r3, #0
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4413      	add	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
//	while (textInput[j])
//	{
	for(int16 r = 0; r < round; r++){
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	e020      	b.n	800147a <ChaCha20_FinalXor+0x7e>
		// L: keyStream
		for (uint8 i = 0; i < 64&&j<size; i++)
 8001438:	2300      	movs	r3, #0
 800143a:	75fb      	strb	r3, [r7, #23]
 800143c:	e013      	b.n	8001466 <ChaCha20_FinalXor+0x6a>
		{
			// C: xor cell8 and textInput8
			textOutput[j] = (keyStream[i] ^ textInput[j]);
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	7819      	ldrb	r1, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4413      	add	r3, r2
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4403      	add	r3, r0
 8001454:	404a      	eors	r2, r1
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
			j++;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
		for (uint8 i = 0; i < 64&&j<size; i++)
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	3301      	adds	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
 8001466:	7dfb      	ldrb	r3, [r7, #23]
 8001468:	2b3f      	cmp	r3, #63	; 0x3f
 800146a:	d803      	bhi.n	8001474 <ChaCha20_FinalXor+0x78>
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3e4      	bcc.n	800143e <ChaCha20_FinalXor+0x42>
	for(int16 r = 0; r < round; r++){
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	3301      	adds	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	429a      	cmp	r2, r3
 8001480:	d8da      	bhi.n	8001438 <ChaCha20_FinalXor+0x3c>
		}
	}

//	}
}/* END ChaCha20_FinalXor */
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8001496:	f107 020f 	add.w	r2, r7, #15
 800149a:	1df9      	adds	r1, r7, #7
 800149c:	2364      	movs	r3, #100	; 0x64
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	4804      	ldr	r0, [pc, #16]	; (80014b4 <W25qxx_Spi+0x28>)
 80014a4:	f012 fe66 	bl	8014174 <HAL_SPI_TransmitReceive>
	return ret;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000304 	.word	0x20000304

080014b8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d4:	4813      	ldr	r0, [pc, #76]	; (8001524 <W25qxx_ReadID+0x6c>)
 80014d6:	f011 f8a1 	bl	801261c <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 80014da:	209f      	movs	r0, #159	; 0x9f
 80014dc:	f7ff ffd6 	bl	800148c <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80014e0:	20a5      	movs	r0, #165	; 0xa5
 80014e2:	f7ff ffd3 	bl	800148c <W25qxx_Spi>
 80014e6:	4603      	mov	r3, r0
 80014e8:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80014ea:	20a5      	movs	r0, #165	; 0xa5
 80014ec:	f7ff ffce 	bl	800148c <W25qxx_Spi>
 80014f0:	4603      	mov	r3, r0
 80014f2:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80014f4:	20a5      	movs	r0, #165	; 0xa5
 80014f6:	f7ff ffc9 	bl	800148c <W25qxx_Spi>
 80014fa:	4603      	mov	r3, r0
 80014fc:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <W25qxx_ReadID+0x6c>)
 8001506:	f011 f889 	bl	801261c <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	041a      	lsls	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	4313      	orrs	r3, r2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  return Temp;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40020400 	.word	0x40020400

08001528 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001534:	4816      	ldr	r0, [pc, #88]	; (8001590 <W25qxx_ReadUniqID+0x68>)
 8001536:	f011 f871 	bl	801261c <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 800153a:	204b      	movs	r0, #75	; 0x4b
 800153c:	f7ff ffa6 	bl	800148c <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001540:	2300      	movs	r3, #0
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	e005      	b.n	8001552 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001546:	20a5      	movs	r0, #165	; 0xa5
 8001548:	f7ff ffa0 	bl	800148c <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	3301      	adds	r3, #1
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d9f6      	bls.n	8001546 <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 8001558:	2300      	movs	r3, #0
 800155a:	71bb      	strb	r3, [r7, #6]
 800155c:	e00b      	b.n	8001576 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800155e:	79bc      	ldrb	r4, [r7, #6]
 8001560:	20a5      	movs	r0, #165	; 0xa5
 8001562:	f7ff ff93 	bl	800148c <W25qxx_Spi>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <W25qxx_ReadUniqID+0x6c>)
 800156c:	4423      	add	r3, r4
 800156e:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	3301      	adds	r3, #1
 8001574:	71bb      	strb	r3, [r7, #6]
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	2b07      	cmp	r3, #7
 800157a:	d9f0      	bls.n	800155e <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001582:	4803      	ldr	r0, [pc, #12]	; (8001590 <W25qxx_ReadUniqID+0x68>)
 8001584:	f011 f84a 	bl	801261c <HAL_GPIO_WritePin>
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}
 8001590:	40020400 	.word	0x40020400
 8001594:	200002dc 	.word	0x200002dc

08001598 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ac:	481c      	ldr	r0, [pc, #112]	; (8001620 <W25qxx_ReadStatusRegister+0x88>)
 80015ae:	f011 f835 	bl	801261c <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d10c      	bne.n	80015d2 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 80015b8:	2005      	movs	r0, #5
 80015ba:	f7ff ff67 	bl	800148c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80015be:	20a5      	movs	r0, #165	; 0xa5
 80015c0:	f7ff ff64 	bl	800148c <W25qxx_Spi>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80015c8:	4a16      	ldr	r2, [pc, #88]	; (8001624 <W25qxx_ReadStatusRegister+0x8c>)
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80015d0:	e01b      	b.n	800160a <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d10c      	bne.n	80015f2 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 80015d8:	2035      	movs	r0, #53	; 0x35
 80015da:	f7ff ff57 	bl	800148c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80015de:	20a5      	movs	r0, #165	; 0xa5
 80015e0:	f7ff ff54 	bl	800148c <W25qxx_Spi>
 80015e4:	4603      	mov	r3, r0
 80015e6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <W25qxx_ReadStatusRegister+0x8c>)
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80015f0:	e00b      	b.n	800160a <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 80015f2:	2015      	movs	r0, #21
 80015f4:	f7ff ff4a 	bl	800148c <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80015f8:	20a5      	movs	r0, #165	; 0xa5
 80015fa:	f7ff ff47 	bl	800148c <W25qxx_Spi>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <W25qxx_ReadStatusRegister+0x8c>)
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <W25qxx_ReadStatusRegister+0x88>)
 8001612:	f011 f803 	bl	801261c <HAL_GPIO_WritePin>
	return status;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020400 	.word	0x40020400
 8001624:	200002dc 	.word	0x200002dc

08001628 <W25qxx_Init>:
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;
 800162e:	4b60      	ldr	r3, [pc, #384]	; (80017b0 <W25qxx_Init+0x188>)
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8001636:	e002      	b.n	800163e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8001638:	2001      	movs	r0, #1
 800163a:	f010 fa71 	bl	8011b20 <HAL_Delay>
	while(HAL_GetTick()<100)
 800163e:	f010 fa63 	bl	8011b08 <HAL_GetTick>
 8001642:	4603      	mov	r3, r0
 8001644:	2b63      	cmp	r3, #99	; 0x63
 8001646:	d9f7      	bls.n	8001638 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800164e:	4859      	ldr	r0, [pc, #356]	; (80017b4 <W25qxx_Init+0x18c>)
 8001650:	f010 ffe4 	bl	801261c <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8001654:	2064      	movs	r0, #100	; 0x64
 8001656:	f010 fa63 	bl	8011b20 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 800165a:	f7ff ff2d 	bl	80014b8 <W25qxx_ReadID>
 800165e:	6078      	str	r0, [r7, #4]

	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	b29b      	uxth	r3, r3
 8001664:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8001668:	3b11      	subs	r3, #17
 800166a:	2b09      	cmp	r3, #9
 800166c:	d85f      	bhi.n	800172e <W25qxx_Init+0x106>
 800166e:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <W25qxx_Init+0x4c>)
 8001670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001674:	08001721 	.word	0x08001721
 8001678:	08001713 	.word	0x08001713
 800167c:	08001705 	.word	0x08001705
 8001680:	080016f7 	.word	0x080016f7
 8001684:	080016e9 	.word	0x080016e9
 8001688:	080016db 	.word	0x080016db
 800168c:	080016cd 	.word	0x080016cd
 8001690:	080016bd 	.word	0x080016bd
 8001694:	080016ad 	.word	0x080016ad
 8001698:	0800169d 	.word	0x0800169d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 800169c:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <W25qxx_Init+0x188>)
 800169e:	220a      	movs	r2, #10
 80016a0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 80016a2:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <W25qxx_Init+0x188>)
 80016a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 80016aa:	e046      	b.n	800173a <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 80016ac:	4b40      	ldr	r3, [pc, #256]	; (80017b0 <W25qxx_Init+0x188>)
 80016ae:	2209      	movs	r2, #9
 80016b0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 80016b2:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <W25qxx_Init+0x188>)
 80016b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 80016ba:	e03e      	b.n	800173a <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 80016bc:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <W25qxx_Init+0x188>)
 80016be:	2208      	movs	r2, #8
 80016c0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <W25qxx_Init+0x188>)
 80016c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 80016ca:	e036      	b.n	800173a <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 80016cc:	4b38      	ldr	r3, [pc, #224]	; (80017b0 <W25qxx_Init+0x188>)
 80016ce:	2207      	movs	r2, #7
 80016d0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <W25qxx_Init+0x188>)
 80016d4:	2280      	movs	r2, #128	; 0x80
 80016d6:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 80016d8:	e02f      	b.n	800173a <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 80016da:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <W25qxx_Init+0x188>)
 80016dc:	2206      	movs	r2, #6
 80016de:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <W25qxx_Init+0x188>)
 80016e2:	2240      	movs	r2, #64	; 0x40
 80016e4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 80016e6:	e028      	b.n	800173a <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 80016e8:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <W25qxx_Init+0x188>)
 80016ea:	2205      	movs	r2, #5
 80016ec:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 80016ee:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <W25qxx_Init+0x188>)
 80016f0:	2220      	movs	r2, #32
 80016f2:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 80016f4:	e021      	b.n	800173a <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <W25qxx_Init+0x188>)
 80016f8:	2204      	movs	r2, #4
 80016fa:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <W25qxx_Init+0x188>)
 80016fe:	2210      	movs	r2, #16
 8001700:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8001702:	e01a      	b.n	800173a <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8001704:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <W25qxx_Init+0x188>)
 8001706:	2203      	movs	r2, #3
 8001708:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <W25qxx_Init+0x188>)
 800170c:	2208      	movs	r2, #8
 800170e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8001710:	e013      	b.n	800173a <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8001712:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <W25qxx_Init+0x188>)
 8001714:	2202      	movs	r2, #2
 8001716:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <W25qxx_Init+0x188>)
 800171a:	2204      	movs	r2, #4
 800171c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 800171e:	e00c      	b.n	800173a <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <W25qxx_Init+0x188>)
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <W25qxx_Init+0x188>)
 8001728:	2202      	movs	r2, #2
 800172a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 800172c:	e005      	b.n	800173a <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <W25qxx_Init+0x188>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8001736:	2300      	movs	r3, #0
 8001738:	e036      	b.n	80017a8 <W25qxx_Init+0x180>

	}
	w25qxx.PageSize=256;
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <W25qxx_Init+0x188>)
 800173c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001740:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <W25qxx_Init+0x188>)
 8001744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001748:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <W25qxx_Init+0x188>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <W25qxx_Init+0x188>)
 8001752:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <W25qxx_Init+0x188>)
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <W25qxx_Init+0x188>)
 800175a:	6912      	ldr	r2, [r2, #16]
 800175c:	fb02 f303 	mul.w	r3, r2, r3
 8001760:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <W25qxx_Init+0x188>)
 8001762:	8952      	ldrh	r2, [r2, #10]
 8001764:	fbb3 f3f2 	udiv	r3, r3, r2
 8001768:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <W25qxx_Init+0x188>)
 800176a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <W25qxx_Init+0x188>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	4a0f      	ldr	r2, [pc, #60]	; (80017b0 <W25qxx_Init+0x188>)
 8001774:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <W25qxx_Init+0x188>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <W25qxx_Init+0x188>)
 800177c:	6912      	ldr	r2, [r2, #16]
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	0a9b      	lsrs	r3, r3, #10
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <W25qxx_Init+0x188>)
 8001786:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001788:	f7ff fece 	bl	8001528 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff ff03 	bl	8001598 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001792:	2002      	movs	r0, #2
 8001794:	f7ff ff00 	bl	8001598 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001798:	2003      	movs	r0, #3
 800179a:	f7ff fefd 	bl	8001598 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <W25qxx_Init+0x188>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200002dc 	.word	0x200002dc
 80017b4:	40020400 	.word	0x40020400

080017b8 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <W25qxx_SectorToPage+0x28>)
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <W25qxx_SectorToPage+0x28>)
 80017cc:	8952      	ldrh	r2, [r2, #10]
 80017ce:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	200002dc 	.word	0x200002dc

080017e4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 80017f2:	e002      	b.n	80017fa <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f010 f993 	bl	8011b20 <HAL_Delay>
	while(w25qxx.Lock==1)
 80017fa:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <W25qxx_ReadPage+0xec>)
 80017fc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001800:	2b01      	cmp	r3, #1
 8001802:	d0f7      	beq.n	80017f4 <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 8001804:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <W25qxx_ReadPage+0xec>)
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <W25qxx_ReadPage+0xec>)
 800180e:	895b      	ldrh	r3, [r3, #10]
 8001810:	461a      	mov	r2, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	4293      	cmp	r3, r2
 8001816:	d802      	bhi.n	800181e <W25qxx_ReadPage+0x3a>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <W25qxx_ReadPage+0xec>)
 8001820:	895b      	ldrh	r3, [r3, #10]
 8001822:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	4413      	add	r3, r2
 800182a:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <W25qxx_ReadPage+0xec>)
 800182c:	8952      	ldrh	r2, [r2, #10]
 800182e:	4293      	cmp	r3, r2
 8001830:	d905      	bls.n	800183e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <W25qxx_ReadPage+0xec>)
 8001834:	895b      	ldrh	r3, [r3, #10]
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <W25qxx_ReadPage+0xec>)
 8001840:	895b      	ldrh	r3, [r3, #10]
 8001842:	461a      	mov	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	fb03 f302 	mul.w	r3, r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001856:	481f      	ldr	r0, [pc, #124]	; (80018d4 <W25qxx_ReadPage+0xf0>)
 8001858:	f010 fee0 	bl	801261c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 800185c:	200b      	movs	r0, #11
 800185e:	f7ff fe15 	bl	800148c <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <W25qxx_ReadPage+0xec>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b08      	cmp	r3, #8
 8001868:	d905      	bls.n	8001876 <W25qxx_ReadPage+0x92>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	0e1b      	lsrs	r3, r3, #24
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fe0b 	bl	800148c <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	0c1b      	lsrs	r3, r3, #16
 800187a:	b2db      	uxtb	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fe05 	bl	800148c <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fdff 	bl	800148c <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fdfa 	bl	800148c <W25qxx_Spi>
	W25qxx_Spi(0);
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff fdf7 	bl	800148c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	2364      	movs	r3, #100	; 0x64
 80018a4:	68f9      	ldr	r1, [r7, #12]
 80018a6:	480c      	ldr	r0, [pc, #48]	; (80018d8 <W25qxx_ReadPage+0xf4>)
 80018a8:	f012 fb53 	bl	8013f52 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	4808      	ldr	r0, [pc, #32]	; (80018d4 <W25qxx_ReadPage+0xf0>)
 80018b4:	f010 feb2 	bl	801261c <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 80018b8:	2001      	movs	r0, #1
 80018ba:	f010 f931 	bl	8011b20 <HAL_Delay>
	w25qxx.Lock=0;
 80018be:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <W25qxx_ReadPage+0xec>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200002dc 	.word	0x200002dc
 80018d4:	40020400 	.word	0x40020400
 80018d8:	20000304 	.word	0x20000304

080018dc <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 80018ea:	4b2c      	ldr	r3, [pc, #176]	; (800199c <W25qxx_ReadSector+0xc0>)
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d802      	bhi.n	80018fa <W25qxx_ReadSector+0x1e>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <W25qxx_ReadSector+0xc0>)
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif
	if(OffsetInByte>=w25qxx.SectorSize)
 8001900:	4b26      	ldr	r3, [pc, #152]	; (800199c <W25qxx_ReadSector+0xc0>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	d243      	bcs.n	8001992 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	441a      	add	r2, r3
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <W25qxx_ReadSector+0xc0>)
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	429a      	cmp	r2, r3
 8001916:	d905      	bls.n	8001924 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 8001918:	4b20      	ldr	r3, [pc, #128]	; (800199c <W25qxx_ReadSector+0xc0>)
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	e001      	b.n	8001928 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	f7ff ff45 	bl	80017b8 <W25qxx_SectorToPage>
 800192e:	4602      	mov	r2, r0
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <W25qxx_ReadSector+0xc0>)
 8001932:	895b      	ldrh	r3, [r3, #10]
 8001934:	4619      	mov	r1, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	fbb3 f3f1 	udiv	r3, r3, r1
 800193c:	4413      	add	r3, r2
 800193e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <W25qxx_ReadSector+0xc0>)
 8001942:	895b      	ldrh	r3, [r3, #10]
 8001944:	461a      	mov	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	fbb3 f1f2 	udiv	r1, r3, r2
 800194c:	fb02 f201 	mul.w	r2, r2, r1
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	69f9      	ldr	r1, [r7, #28]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff ff42 	bl	80017e4 <W25qxx_ReadPage>
		StartPage++;
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	3301      	adds	r3, #1
 8001964:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <W25qxx_ReadSector+0xc0>)
 8001968:	895b      	ldrh	r3, [r3, #10]
 800196a:	461a      	mov	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	1a9a      	subs	r2, r3, r2
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	4413      	add	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <W25qxx_ReadSector+0xc0>)
 8001978:	895b      	ldrh	r3, [r3, #10]
 800197a:	461a      	mov	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	dce1      	bgt.n	8001954 <W25qxx_ReadSector+0x78>
 8001990:	e000      	b.n	8001994 <W25qxx_ReadSector+0xb8>
		return;
 8001992:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif
}
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200002dc 	.word	0x200002dc

080019a0 <load_3>:


/*
    helper functions
*/
static uint64_t load_3(const unsigned char *in) {
 80019a0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
    uint64_t result;

    result = (uint64_t) in[0];
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result |= ((uint64_t) in[1]) << 8;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b2d8      	uxtb	r0, r3
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	020b      	lsls	r3, r1, #8
 80019ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80019d2:	0202      	lsls	r2, r0, #8
 80019d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019d8:	ea40 0802 	orr.w	r8, r0, r2
 80019dc:	ea41 0903 	orr.w	r9, r1, r3
 80019e0:	e9c7 8902 	strd	r8, r9, [r7, #8]
    result |= ((uint64_t) in[2]) << 16;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3302      	adds	r3, #2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	b2d8      	uxtb	r0, r3
 80019ec:	f04f 0100 	mov.w	r1, #0
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	040b      	lsls	r3, r1, #16
 80019fa:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80019fe:	0402      	lsls	r2, r0, #16
 8001a00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a04:	ea40 0402 	orr.w	r4, r0, r2
 8001a08:	ea41 0503 	orr.w	r5, r1, r3
 8001a0c:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return result;
 8001a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001a20:	4770      	bx	lr

08001a22 <load_4>:

static uint64_t load_4(const unsigned char *in) {
 8001a22:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
    uint64_t result;

    result = (uint64_t) in[0];
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[1]) << 8;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2d8      	uxtb	r0, r3
 8001a42:	f04f 0100 	mov.w	r1, #0
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	020b      	lsls	r3, r1, #8
 8001a50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001a54:	0202      	lsls	r2, r0, #8
 8001a56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a5a:	ea40 0602 	orr.w	r6, r0, r2
 8001a5e:	603e      	str	r6, [r7, #0]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[2]) << 16;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3302      	adds	r3, #2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2d8      	uxtb	r0, r3
 8001a74:	f04f 0100 	mov.w	r1, #0
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	040b      	lsls	r3, r1, #16
 8001a82:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001a86:	0402      	lsls	r2, r0, #16
 8001a88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a8c:	ea40 0a02 	orr.w	sl, r0, r2
 8001a90:	ea41 0b03 	orr.w	fp, r1, r3
 8001a94:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    result |= ((uint64_t) in[3]) << 24;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	0a15      	lsrs	r5, r2, #8
 8001aa6:	0614      	lsls	r4, r2, #24
 8001aa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aac:	ea42 0804 	orr.w	r8, r2, r4
 8001ab0:	ea43 0905 	orr.w	r9, r3, r5
 8001ab4:	e9c7 8904 	strd	r8, r9, [r7, #16]
    
    return result;
 8001ab8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001ac8:	4770      	bx	lr

08001aca <fe_0>:

/*
    h = 0
*/

void fe_0(fe h) {
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
    h[0] = 0;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
    h[1] = 0;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3304      	adds	r3, #4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
    h[2] = 0;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3308      	adds	r3, #8
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
    h[3] = 0;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	330c      	adds	r3, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
    h[4] = 0;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3310      	adds	r3, #16
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
    h[5] = 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3314      	adds	r3, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
    h[6] = 0;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3318      	adds	r3, #24
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
    h[7] = 0;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	331c      	adds	r3, #28
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
    h[8] = 0;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3320      	adds	r3, #32
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
    h[9] = 0;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3324      	adds	r3, #36	; 0x24
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <fe_1>:

/*
    h = 1
*/

void fe_1(fe h) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    h[0] = 1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
    h[1] = 0;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
    h[2] = 0;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3308      	adds	r3, #8
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
    h[3] = 0;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
    h[4] = 0;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3310      	adds	r3, #16
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
    h[5] = 0;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3314      	adds	r3, #20
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
    h[6] = 0;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3318      	adds	r3, #24
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
    h[7] = 0;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	331c      	adds	r3, #28
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
    h[8] = 0;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3320      	adds	r3, #32
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
    h[9] = 0;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3324      	adds	r3, #36	; 0x24
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <fe_add>:

    Postconditions:
       |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_add(fe h, const fe f, const fe g) {
 8001b8e:	b480      	push	{r7}
 8001b90:	b0a3      	sub	sp, #140	; 0x8c
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
    int32_t f0 = f[0];
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    int32_t f1 = f[1];
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t f2 = f[2];
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t f3 = f[3];
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t f4 = f[4];
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t f5 = f[5];
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	673b      	str	r3, [r7, #112]	; 0x70
    int32_t f6 = f[6];
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t f7 = f[7];
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t f8 = f[8];
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t f9 = f[9];
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	663b      	str	r3, [r7, #96]	; 0x60
    int32_t g0 = g[0];
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t g1 = g[1];
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t g2 = g[2];
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t g3 = g[3];
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t g4 = g[4];
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t g5 = g[5];
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t g6 = g[6];
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t g7 = g[7];
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t g8 = g[8];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t g9 = g[9];
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h0 = f0 + g0;
 8001c16:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1c:	4413      	add	r3, r2
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t h1 = f1 + g1;
 8001c20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c26:	4413      	add	r3, r2
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h2 = f2 + g2;
 8001c2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2e:	4413      	add	r3, r2
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h3 = f3 + g3;
 8001c32:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c36:	4413      	add	r3, r2
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h4 = f4 + g4;
 8001c3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3e:	4413      	add	r3, r2
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h5 = f5 + g5;
 8001c42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c46:	4413      	add	r3, r2
 8001c48:	623b      	str	r3, [r7, #32]
    int32_t h6 = f6 + g6;
 8001c4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4e:	4413      	add	r3, r2
 8001c50:	61fb      	str	r3, [r7, #28]
    int32_t h7 = f7 + g7;
 8001c52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c56:	4413      	add	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
    int32_t h8 = f8 + g8;
 8001c5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c5e:	4413      	add	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
    int32_t h9 = f9 + g9;
 8001c62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c66:	4413      	add	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
    
    h[0] = h0;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c6e:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3304      	adds	r3, #4
 8001c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c76:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3308      	adds	r3, #8
 8001c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7e:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	330c      	adds	r3, #12
 8001c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c86:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3310      	adds	r3, #16
 8001c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8e:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3314      	adds	r3, #20
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3318      	adds	r3, #24
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	331c      	adds	r3, #28
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3320      	adds	r3, #32
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3324      	adds	r3, #36	; 0x24
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	378c      	adds	r7, #140	; 0x8c
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <fe_copy>:

/*
    h = f
*/

void fe_copy(fe h, const fe f) {
 8001cc4:	b480      	push	{r7}
 8001cc6:	b08d      	sub	sp, #52	; 0x34
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    int32_t f0 = f[0];
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t f1 = f[1];
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t f2 = f[2];
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t f3 = f[3];
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	623b      	str	r3, [r7, #32]
    int32_t f4 = f[4];
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	61fb      	str	r3, [r7, #28]
    int32_t f5 = f[5];
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	61bb      	str	r3, [r7, #24]
    int32_t f6 = f[6];
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	617b      	str	r3, [r7, #20]
    int32_t f7 = f[7];
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	613b      	str	r3, [r7, #16]
    int32_t f8 = f[8];
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	60fb      	str	r3, [r7, #12]
    int32_t f9 = f[9];
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	60bb      	str	r3, [r7, #8]
    
    h[0] = f0;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0e:	601a      	str	r2, [r3, #0]
    h[1] = f1;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3304      	adds	r3, #4
 8001d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d16:	601a      	str	r2, [r3, #0]
    h[2] = f2;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1e:	601a      	str	r2, [r3, #0]
    h[3] = f3;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	330c      	adds	r3, #12
 8001d24:	6a3a      	ldr	r2, [r7, #32]
 8001d26:	601a      	str	r2, [r3, #0]
    h[4] = f4;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3310      	adds	r3, #16
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	601a      	str	r2, [r3, #0]
    h[5] = f5;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3314      	adds	r3, #20
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	601a      	str	r2, [r3, #0]
    h[6] = f6;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3318      	adds	r3, #24
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]
    h[7] = f7;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	331c      	adds	r3, #28
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	601a      	str	r2, [r3, #0]
    h[8] = f8;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3320      	adds	r3, #32
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]
    h[9] = f9;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3324      	adds	r3, #36	; 0x24
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	601a      	str	r2, [r3, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	3734      	adds	r7, #52	; 0x34
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <fe_frombytes>:

/*
    Ignores top bit of h.
*/

void fe_frombytes(fe h, const unsigned char *s) {
 8001d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d68:	b0e7      	sub	sp, #412	; 0x19c
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8001d70:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
    int64_t h0 = load_4(s);
 8001d74:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8001d78:	f7ff fe53 	bl	8001a22 <load_4>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
    int64_t h1 = load_3(s + 4) << 6;
 8001d84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001d88:	3304      	adds	r3, #4
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe08 	bl	80019a0 <load_3>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	f04f 0000 	mov.w	r0, #0
 8001d98:	f04f 0100 	mov.w	r1, #0
 8001d9c:	0199      	lsls	r1, r3, #6
 8001d9e:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001da2:	0190      	lsls	r0, r2, #6
 8001da4:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
    int64_t h2 = load_3(s + 7) << 5;
 8001da8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001dac:	3307      	adds	r3, #7
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fdf6 	bl	80019a0 <load_3>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	f04f 0000 	mov.w	r0, #0
 8001dbc:	f04f 0100 	mov.w	r1, #0
 8001dc0:	0159      	lsls	r1, r3, #5
 8001dc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc6:	0150      	lsls	r0, r2, #5
 8001dc8:	e9c7 0160 	strd	r0, r1, [r7, #384]	; 0x180
    int64_t h3 = load_3(s + 10) << 3;
 8001dcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001dd0:	330a      	adds	r3, #10
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fde4 	bl	80019a0 <load_3>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	f04f 0000 	mov.w	r0, #0
 8001de0:	f04f 0100 	mov.w	r1, #0
 8001de4:	00d9      	lsls	r1, r3, #3
 8001de6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dea:	00d0      	lsls	r0, r2, #3
 8001dec:	e9c7 015e 	strd	r0, r1, [r7, #376]	; 0x178
    int64_t h4 = load_3(s + 13) << 2;
 8001df0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001df4:	330d      	adds	r3, #13
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fdd2 	bl	80019a0 <load_3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	f04f 0000 	mov.w	r0, #0
 8001e04:	f04f 0100 	mov.w	r1, #0
 8001e08:	0099      	lsls	r1, r3, #2
 8001e0a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001e0e:	0090      	lsls	r0, r2, #2
 8001e10:	e9c7 015c 	strd	r0, r1, [r7, #368]	; 0x170
    int64_t h5 = load_4(s + 16);
 8001e14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e18:	3310      	adds	r3, #16
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fe01 	bl	8001a22 <load_4>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    int64_t h6 = load_3(s + 20) << 7;
 8001e28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e2c:	3314      	adds	r3, #20
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fdb6 	bl	80019a0 <load_3>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	f04f 0000 	mov.w	r0, #0
 8001e3c:	f04f 0100 	mov.w	r1, #0
 8001e40:	01d9      	lsls	r1, r3, #7
 8001e42:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8001e46:	01d0      	lsls	r0, r2, #7
 8001e48:	e9c7 0158 	strd	r0, r1, [r7, #352]	; 0x160
    int64_t h7 = load_3(s + 23) << 5;
 8001e4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e50:	3317      	adds	r3, #23
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fda4 	bl	80019a0 <load_3>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	f04f 0000 	mov.w	r0, #0
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	0159      	lsls	r1, r3, #5
 8001e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e6a:	0150      	lsls	r0, r2, #5
 8001e6c:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
    int64_t h8 = load_3(s + 26) << 4;
 8001e70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e74:	331a      	adds	r3, #26
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fd92 	bl	80019a0 <load_3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	f04f 0000 	mov.w	r0, #0
 8001e84:	f04f 0100 	mov.w	r1, #0
 8001e88:	0119      	lsls	r1, r3, #4
 8001e8a:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8001e8e:	0110      	lsls	r0, r2, #4
 8001e90:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    int64_t h9 = (load_3(s + 29) & 8388607) << 2;
 8001e94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001e98:	331d      	adds	r3, #29
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fd80 	bl	80019a0 <load_3>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	f04f 0000 	mov.w	r0, #0
 8001ea8:	f04f 0100 	mov.w	r1, #0
 8001eac:	0099      	lsls	r1, r3, #2
 8001eae:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001eb2:	0090      	lsls	r0, r2, #2
 8001eb4:	4aeb      	ldr	r2, [pc, #940]	; (8002264 <fe_frombytes+0x500>)
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	ea00 0602 	and.w	r6, r0, r2
 8001ebe:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001ec8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001ecc:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;

    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 8001ed0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001ed4:	f112 7480 	adds.w	r4, r2, #16777216	; 0x1000000
 8001ed8:	f143 0500 	adc.w	r5, r3, #0
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	0e62      	lsrs	r2, r4, #25
 8001ee6:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
 8001eea:	166b      	asrs	r3, r5, #25
 8001eec:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    h0 += carry9 * 19;
 8001ef0:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8001ef4:	4622      	mov	r2, r4
 8001ef6:	462b      	mov	r3, r5
 8001ef8:	f04f 0000 	mov.w	r0, #0
 8001efc:	f04f 0100 	mov.w	r1, #0
 8001f00:	00d9      	lsls	r1, r3, #3
 8001f02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f06:	00d0      	lsls	r0, r2, #3
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	1912      	adds	r2, r2, r4
 8001f0e:	eb45 0303 	adc.w	r3, r5, r3
 8001f12:	1891      	adds	r1, r2, r2
 8001f14:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001f18:	415b      	adcs	r3, r3
 8001f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001f1e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001f22:	eb12 0a04 	adds.w	sl, r2, r4
 8001f26:	eb43 0b05 	adc.w	fp, r3, r5
 8001f2a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001f2e:	eb12 010a 	adds.w	r1, r2, sl
 8001f32:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001f36:	eb43 030b 	adc.w	r3, r3, fp
 8001f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f3e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8001f42:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
    h9 -= carry9 << 25;
 8001f46:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001f4a:	f04f 0000 	mov.w	r0, #0
 8001f4e:	f04f 0100 	mov.w	r1, #0
 8001f52:	0659      	lsls	r1, r3, #25
 8001f54:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8001f58:	0650      	lsls	r0, r2, #25
 8001f5a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001f5e:	1a14      	subs	r4, r2, r0
 8001f60:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001f64:	eb63 0301 	sbc.w	r3, r3, r1
 8001f68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f6c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001f70:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 8001f74:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001f78:	f112 7880 	adds.w	r8, r2, #16777216	; 0x1000000
 8001f7c:	f143 0900 	adc.w	r9, r3, #0
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	ea4f 6258 	mov.w	r2, r8, lsr #25
 8001f8c:	ea42 12c9 	orr.w	r2, r2, r9, lsl #7
 8001f90:	ea4f 6369 	mov.w	r3, r9, asr #25
 8001f94:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
    h2 += carry1;
 8001f98:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8001f9c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001fa0:	1884      	adds	r4, r0, r2
 8001fa2:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8001fa6:	eb41 0303 	adc.w	r3, r1, r3
 8001faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001fae:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8001fb2:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
    h1 -= carry1 << 25;
 8001fb6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001fba:	f04f 0000 	mov.w	r0, #0
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	0659      	lsls	r1, r3, #25
 8001fc4:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8001fc8:	0650      	lsls	r0, r2, #25
 8001fca:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001fce:	1a14      	subs	r4, r2, r0
 8001fd0:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8001fd4:	eb63 0301 	sbc.w	r3, r3, r1
 8001fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fdc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8001fe0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8001fe4:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001fe8:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8001fec:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8001ff0:	f143 0300 	adc.w	r3, r3, #0
 8001ff4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002004:	4621      	mov	r1, r4
 8002006:	0e4a      	lsrs	r2, r1, #25
 8002008:	4629      	mov	r1, r5
 800200a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800200e:	4629      	mov	r1, r5
 8002010:	164b      	asrs	r3, r1, #25
 8002012:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
    h4 += carry3;
 8002016:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800201a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800201e:	1884      	adds	r4, r0, r2
 8002020:	67bc      	str	r4, [r7, #120]	; 0x78
 8002022:	eb41 0303 	adc.w	r3, r1, r3
 8002026:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002028:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800202c:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
    h3 -= carry3 << 25;
 8002030:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002034:	f04f 0000 	mov.w	r0, #0
 8002038:	f04f 0100 	mov.w	r1, #0
 800203c:	0659      	lsls	r1, r3, #25
 800203e:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8002042:	0650      	lsls	r0, r2, #25
 8002044:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002048:	1a14      	subs	r4, r2, r0
 800204a:	673c      	str	r4, [r7, #112]	; 0x70
 800204c:	eb63 0301 	sbc.w	r3, r3, r1
 8002050:	677b      	str	r3, [r7, #116]	; 0x74
 8002052:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8002056:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 800205a:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 800205e:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8002062:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8002066:	f143 0300 	adc.w	r3, r3, #0
 800206a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800207a:	4621      	mov	r1, r4
 800207c:	0e4a      	lsrs	r2, r1, #25
 800207e:	4629      	mov	r1, r5
 8002080:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002084:	4629      	mov	r1, r5
 8002086:	164b      	asrs	r3, r1, #25
 8002088:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    h6 += carry5;
 800208c:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8002090:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002094:	1884      	adds	r4, r0, r2
 8002096:	66bc      	str	r4, [r7, #104]	; 0x68
 8002098:	eb41 0303 	adc.w	r3, r1, r3
 800209c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800209e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80020a2:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
    h5 -= carry5 << 25;
 80020a6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80020aa:	f04f 0000 	mov.w	r0, #0
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	0659      	lsls	r1, r3, #25
 80020b4:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80020b8:	0650      	lsls	r0, r2, #25
 80020ba:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80020be:	1a14      	subs	r4, r2, r0
 80020c0:	663c      	str	r4, [r7, #96]	; 0x60
 80020c2:	eb63 0301 	sbc.w	r3, r3, r1
 80020c6:	667b      	str	r3, [r7, #100]	; 0x64
 80020c8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80020cc:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 80020d0:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80020d4:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80020d8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80020dc:	f143 0300 	adc.w	r3, r3, #0
 80020e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80020f0:	4621      	mov	r1, r4
 80020f2:	0e4a      	lsrs	r2, r1, #25
 80020f4:	4629      	mov	r1, r5
 80020f6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80020fa:	4629      	mov	r1, r5
 80020fc:	164b      	asrs	r3, r1, #25
 80020fe:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    h8 += carry7;
 8002102:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8002106:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800210a:	1884      	adds	r4, r0, r2
 800210c:	65bc      	str	r4, [r7, #88]	; 0x58
 800210e:	eb41 0303 	adc.w	r3, r1, r3
 8002112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002114:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002118:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    h7 -= carry7 << 25;
 800211c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002120:	f04f 0000 	mov.w	r0, #0
 8002124:	f04f 0100 	mov.w	r1, #0
 8002128:	0659      	lsls	r1, r3, #25
 800212a:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 800212e:	0650      	lsls	r0, r2, #25
 8002130:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8002134:	1a14      	subs	r4, r2, r0
 8002136:	653c      	str	r4, [r7, #80]	; 0x50
 8002138:	eb63 0301 	sbc.w	r3, r3, r1
 800213c:	657b      	str	r3, [r7, #84]	; 0x54
 800213e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002142:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8002146:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800214a:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 800214e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002152:	f143 0300 	adc.w	r3, r3, #0
 8002156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002166:	4621      	mov	r1, r4
 8002168:	0e8a      	lsrs	r2, r1, #26
 800216a:	4629      	mov	r1, r5
 800216c:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8002170:	4629      	mov	r1, r5
 8002172:	168b      	asrs	r3, r1, #26
 8002174:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
    h1 += carry0;
 8002178:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800217c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002180:	1884      	adds	r4, r0, r2
 8002182:	64bc      	str	r4, [r7, #72]	; 0x48
 8002184:	eb41 0303 	adc.w	r3, r1, r3
 8002188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800218a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800218e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
    h0 -= carry0 << 26;
 8002192:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002196:	f04f 0000 	mov.w	r0, #0
 800219a:	f04f 0100 	mov.w	r1, #0
 800219e:	0699      	lsls	r1, r3, #26
 80021a0:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80021a4:	0690      	lsls	r0, r2, #26
 80021a6:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80021aa:	1a14      	subs	r4, r2, r0
 80021ac:	643c      	str	r4, [r7, #64]	; 0x40
 80021ae:	eb63 0301 	sbc.w	r3, r3, r1
 80021b2:	647b      	str	r3, [r7, #68]	; 0x44
 80021b4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80021b8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 80021bc:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80021c0:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80021c4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80021c8:	f143 0300 	adc.w	r3, r3, #0
 80021cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80021dc:	4621      	mov	r1, r4
 80021de:	0e8a      	lsrs	r2, r1, #26
 80021e0:	4629      	mov	r1, r5
 80021e2:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80021e6:	4629      	mov	r1, r5
 80021e8:	168b      	asrs	r3, r1, #26
 80021ea:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    h3 += carry2;
 80021ee:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80021f2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80021f6:	1884      	adds	r4, r0, r2
 80021f8:	63bc      	str	r4, [r7, #56]	; 0x38
 80021fa:	eb41 0303 	adc.w	r3, r1, r3
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002200:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002204:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
    h2 -= carry2 << 26;
 8002208:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800220c:	f04f 0000 	mov.w	r0, #0
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	0699      	lsls	r1, r3, #26
 8002216:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 800221a:	0690      	lsls	r0, r2, #26
 800221c:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002220:	1a14      	subs	r4, r2, r0
 8002222:	633c      	str	r4, [r7, #48]	; 0x30
 8002224:	eb63 0301 	sbc.w	r3, r3, r1
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
 800222a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800222e:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8002232:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002236:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 800223a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800223e:	f143 0300 	adc.w	r3, r3, #0
 8002242:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8002252:	4621      	mov	r1, r4
 8002254:	0e8a      	lsrs	r2, r1, #26
 8002256:	4629      	mov	r1, r5
 8002258:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800225c:	4629      	mov	r1, r5
 800225e:	168b      	asrs	r3, r1, #26
 8002260:	e002      	b.n	8002268 <fe_frombytes+0x504>
 8002262:	bf00      	nop
 8002264:	01fffffc 	.word	0x01fffffc
 8002268:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
    h5 += carry4;
 800226c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8002270:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8002274:	1884      	adds	r4, r0, r2
 8002276:	62bc      	str	r4, [r7, #40]	; 0x28
 8002278:	eb41 0303 	adc.w	r3, r1, r3
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002282:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
    h4 -= carry4 << 26;
 8002286:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800228a:	f04f 0000 	mov.w	r0, #0
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	0699      	lsls	r1, r3, #26
 8002294:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8002298:	0690      	lsls	r0, r2, #26
 800229a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800229e:	1a14      	subs	r4, r2, r0
 80022a0:	623c      	str	r4, [r7, #32]
 80022a2:	eb63 0301 	sbc.w	r3, r3, r1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80022ac:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 80022b0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80022b4:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80022b8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80022bc:	f143 0300 	adc.w	r3, r3, #0
 80022c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80022d0:	4621      	mov	r1, r4
 80022d2:	0e8a      	lsrs	r2, r1, #26
 80022d4:	4629      	mov	r1, r5
 80022d6:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80022da:	4629      	mov	r1, r5
 80022dc:	168b      	asrs	r3, r1, #26
 80022de:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
    h7 += carry6;
 80022e2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80022e6:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80022ea:	1884      	adds	r4, r0, r2
 80022ec:	61bc      	str	r4, [r7, #24]
 80022ee:	eb41 0303 	adc.w	r3, r1, r3
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80022f8:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
    h6 -= carry6 << 26;
 80022fc:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	068b      	lsls	r3, r1, #26
 800230a:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 800230e:	0682      	lsls	r2, r0, #26
 8002310:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8002314:	1a84      	subs	r4, r0, r2
 8002316:	613c      	str	r4, [r7, #16]
 8002318:	eb61 0303 	sbc.w	r3, r1, r3
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002322:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 8002326:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 800232a:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 800232e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8002332:	f143 0300 	adc.w	r3, r3, #0
 8002336:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8002346:	4621      	mov	r1, r4
 8002348:	0e8a      	lsrs	r2, r1, #26
 800234a:	4629      	mov	r1, r5
 800234c:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8002350:	4629      	mov	r1, r5
 8002352:	168b      	asrs	r3, r1, #26
 8002354:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    h9 += carry8;
 8002358:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800235c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8002360:	1884      	adds	r4, r0, r2
 8002362:	60bc      	str	r4, [r7, #8]
 8002364:	eb41 0303 	adc.w	r3, r1, r3
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800236e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    h8 -= carry8 << 26;
 8002372:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	068b      	lsls	r3, r1, #26
 8002380:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8002384:	0682      	lsls	r2, r0, #26
 8002386:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 800238a:	1a84      	subs	r4, r0, r2
 800238c:	603c      	str	r4, [r7, #0]
 800238e:	eb61 0303 	sbc.w	r3, r1, r3
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002398:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150

    h[0] = (int32_t) h0;
 800239c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a4:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023aa:	3304      	adds	r3, #4
 80023ac:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80023b0:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 80023b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b6:	3308      	adds	r3, #8
 80023b8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80023bc:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c2:	330c      	adds	r3, #12
 80023c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023c8:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 80023ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ce:	3310      	adds	r3, #16
 80023d0:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80023d4:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 80023d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023da:	3314      	adds	r3, #20
 80023dc:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80023e0:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e6:	3318      	adds	r3, #24
 80023e8:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80023ec:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 80023ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f2:	331c      	adds	r3, #28
 80023f4:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80023f8:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 80023fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fe:	3320      	adds	r3, #32
 8002400:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002404:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 8002406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240a:	3324      	adds	r3, #36	; 0x24
 800240c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002410:	601a      	str	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8002418:	46bd      	mov	sp, r7
 800241a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800241e:	bf00      	nop

08002420 <fe_invert>:



void fe_invert(fe out, const fe z) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b0ac      	sub	sp, #176	; 0xb0
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
    fe t1;
    fe t2;
    fe t3;
    int i;

    fe_sq(t0, z);
 800242a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f003 f99a 	bl	800576a <fe_sq>

    for (i = 1; i < 1; ++i) {
 8002436:	2301      	movs	r3, #1
 8002438:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800243c:	e00c      	b.n	8002458 <fe_invert+0x38>
        fe_sq(t0, t0);
 800243e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002442:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f003 f98e 	bl	800576a <fe_sq>
    for (i = 1; i < 1; ++i) {
 800244e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002452:	3301      	adds	r3, #1
 8002454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800245c:	2b00      	cmp	r3, #0
 800245e:	ddee      	ble.n	800243e <fe_invert+0x1e>
    }

    fe_sq(t1, t0);
 8002460:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002464:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f003 f97d 	bl	800576a <fe_sq>

    for (i = 1; i < 2; ++i) {
 8002470:	2301      	movs	r3, #1
 8002472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002476:	e00c      	b.n	8002492 <fe_invert+0x72>
        fe_sq(t1, t1);
 8002478:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800247c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f003 f971 	bl	800576a <fe_sq>
    for (i = 1; i < 2; ++i) {
 8002488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800248c:	3301      	adds	r3, #1
 800248e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002496:	2b01      	cmp	r3, #1
 8002498:	ddee      	ble.n	8002478 <fe_invert+0x58>
    }

    fe_mul(t1, z, t1);
 800249a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800249e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024a2:	6839      	ldr	r1, [r7, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fa51 	bl	800294c <fe_mul>
    fe_mul(t0, t0, t1);
 80024aa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80024ae:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80024b2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fa48 	bl	800294c <fe_mul>
    fe_sq(t2, t0);
 80024bc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80024c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 f94f 	bl	800576a <fe_sq>

    for (i = 1; i < 1; ++i) {
 80024cc:	2301      	movs	r3, #1
 80024ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80024d2:	e00c      	b.n	80024ee <fe_invert+0xce>
        fe_sq(t2, t2);
 80024d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80024d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f003 f943 	bl	800576a <fe_sq>
    for (i = 1; i < 1; ++i) {
 80024e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024e8:	3301      	adds	r3, #1
 80024ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80024ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	ddee      	ble.n	80024d4 <fe_invert+0xb4>
    }

    fe_mul(t1, t1, t2);
 80024f6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80024fa:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80024fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fa22 	bl	800294c <fe_mul>
    fe_sq(t2, t1);
 8002508:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800250c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f003 f929 	bl	800576a <fe_sq>

    for (i = 1; i < 5; ++i) {
 8002518:	2301      	movs	r3, #1
 800251a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800251e:	e00c      	b.n	800253a <fe_invert+0x11a>
        fe_sq(t2, t2);
 8002520:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002524:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f003 f91d 	bl	800576a <fe_sq>
    for (i = 1; i < 5; ++i) {
 8002530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002534:	3301      	adds	r3, #1
 8002536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800253a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800253e:	2b04      	cmp	r3, #4
 8002540:	ddee      	ble.n	8002520 <fe_invert+0x100>
    }

    fe_mul(t1, t2, t1);
 8002542:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002546:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800254a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f9fc 	bl	800294c <fe_mul>
    fe_sq(t2, t1);
 8002554:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002558:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f003 f903 	bl	800576a <fe_sq>

    for (i = 1; i < 10; ++i) {
 8002564:	2301      	movs	r3, #1
 8002566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800256a:	e00c      	b.n	8002586 <fe_invert+0x166>
        fe_sq(t2, t2);
 800256c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002570:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f003 f8f7 	bl	800576a <fe_sq>
    for (i = 1; i < 10; ++i) {
 800257c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002580:	3301      	adds	r3, #1
 8002582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800258a:	2b09      	cmp	r3, #9
 800258c:	ddee      	ble.n	800256c <fe_invert+0x14c>
    }

    fe_mul(t2, t2, t1);
 800258e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002592:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002596:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f9d6 	bl	800294c <fe_mul>
    fe_sq(t3, t2);
 80025a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 f8dd 	bl	800576a <fe_sq>

    for (i = 1; i < 20; ++i) {
 80025b0:	2301      	movs	r3, #1
 80025b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025b6:	e00c      	b.n	80025d2 <fe_invert+0x1b2>
        fe_sq(t3, t3);
 80025b8:	f107 020c 	add.w	r2, r7, #12
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 f8d1 	bl	800576a <fe_sq>
    for (i = 1; i < 20; ++i) {
 80025c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025cc:	3301      	adds	r3, #1
 80025ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025d6:	2b13      	cmp	r3, #19
 80025d8:	ddee      	ble.n	80025b8 <fe_invert+0x198>
    }

    fe_mul(t2, t3, t2);
 80025da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025de:	f107 010c 	add.w	r1, r7, #12
 80025e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f9b0 	bl	800294c <fe_mul>
    fe_sq(t2, t2);
 80025ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 f8b7 	bl	800576a <fe_sq>

    for (i = 1; i < 10; ++i) {
 80025fc:	2301      	movs	r3, #1
 80025fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002602:	e00c      	b.n	800261e <fe_invert+0x1fe>
        fe_sq(t2, t2);
 8002604:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002608:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f003 f8ab 	bl	800576a <fe_sq>
    for (i = 1; i < 10; ++i) {
 8002614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002618:	3301      	adds	r3, #1
 800261a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800261e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002622:	2b09      	cmp	r3, #9
 8002624:	ddee      	ble.n	8002604 <fe_invert+0x1e4>
    }

    fe_mul(t1, t2, t1);
 8002626:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800262a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800262e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f98a 	bl	800294c <fe_mul>
    fe_sq(t2, t1);
 8002638:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800263c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f003 f891 	bl	800576a <fe_sq>

    for (i = 1; i < 50; ++i) {
 8002648:	2301      	movs	r3, #1
 800264a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800264e:	e00c      	b.n	800266a <fe_invert+0x24a>
        fe_sq(t2, t2);
 8002650:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002654:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f003 f885 	bl	800576a <fe_sq>
    for (i = 1; i < 50; ++i) {
 8002660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002664:	3301      	adds	r3, #1
 8002666:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800266a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800266e:	2b31      	cmp	r3, #49	; 0x31
 8002670:	ddee      	ble.n	8002650 <fe_invert+0x230>
    }

    fe_mul(t2, t2, t1);
 8002672:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002676:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800267a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f964 	bl	800294c <fe_mul>
    fe_sq(t3, t2);
 8002684:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002688:	f107 030c 	add.w	r3, r7, #12
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f003 f86b 	bl	800576a <fe_sq>

    for (i = 1; i < 100; ++i) {
 8002694:	2301      	movs	r3, #1
 8002696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800269a:	e00c      	b.n	80026b6 <fe_invert+0x296>
        fe_sq(t3, t3);
 800269c:	f107 020c 	add.w	r2, r7, #12
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 f85f 	bl	800576a <fe_sq>
    for (i = 1; i < 100; ++i) {
 80026ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026b0:	3301      	adds	r3, #1
 80026b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026ba:	2b63      	cmp	r3, #99	; 0x63
 80026bc:	ddee      	ble.n	800269c <fe_invert+0x27c>
    }

    fe_mul(t2, t3, t2);
 80026be:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80026c2:	f107 010c 	add.w	r1, r7, #12
 80026c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f93e 	bl	800294c <fe_mul>
    fe_sq(t2, t2);
 80026d0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80026d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 f845 	bl	800576a <fe_sq>

    for (i = 1; i < 50; ++i) {
 80026e0:	2301      	movs	r3, #1
 80026e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026e6:	e00c      	b.n	8002702 <fe_invert+0x2e2>
        fe_sq(t2, t2);
 80026e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80026ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 f839 	bl	800576a <fe_sq>
    for (i = 1; i < 50; ++i) {
 80026f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026fc:	3301      	adds	r3, #1
 80026fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002706:	2b31      	cmp	r3, #49	; 0x31
 8002708:	ddee      	ble.n	80026e8 <fe_invert+0x2c8>
    }

    fe_mul(t1, t2, t1);
 800270a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800270e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002712:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f918 	bl	800294c <fe_mul>
    fe_sq(t1, t1);
 800271c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002720:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f003 f81f 	bl	800576a <fe_sq>

    for (i = 1; i < 5; ++i) {
 800272c:	2301      	movs	r3, #1
 800272e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002732:	e00c      	b.n	800274e <fe_invert+0x32e>
        fe_sq(t1, t1);
 8002734:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002738:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f003 f813 	bl	800576a <fe_sq>
    for (i = 1; i < 5; ++i) {
 8002744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002748:	3301      	adds	r3, #1
 800274a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800274e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002752:	2b04      	cmp	r3, #4
 8002754:	ddee      	ble.n	8002734 <fe_invert+0x314>
    }

    fe_mul(out, t1, t0);
 8002756:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800275a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f8f3 	bl	800294c <fe_mul>
}
 8002766:	bf00      	nop
 8002768:	37b0      	adds	r7, #176	; 0xb0
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <fe_isnegative>:

    Preconditions:
       |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

int fe_isnegative(const fe f) {
 800276e:	b580      	push	{r7, lr}
 8002770:	b08a      	sub	sp, #40	; 0x28
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
    unsigned char s[32];

    fe_tobytes(s, f);
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4618      	mov	r0, r3
 800277e:	f006 f8e2 	bl	8008946 <fe_tobytes>
    
    return s[0] & 1;
 8002782:	7a3b      	ldrb	r3, [r7, #8]
 8002784:	f003 0301 	and.w	r3, r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <fe_isnonzero>:

    Preconditions:
       |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

int fe_isnonzero(const fe f) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
    unsigned char s[32];
    unsigned char r;

    fe_tobytes(s, f);
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4618      	mov	r0, r3
 80027a0:	f006 f8d1 	bl	8008946 <fe_tobytes>

    r = s[0];
 80027a4:	7b3b      	ldrb	r3, [r7, #12]
 80027a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    #define F(i) r |= s[i]
    F(1);
 80027aa:	7b7a      	ldrb	r2, [r7, #13]
 80027ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(2);
 80027b6:	7bba      	ldrb	r2, [r7, #14]
 80027b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027bc:	4313      	orrs	r3, r2
 80027be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(3);
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(4);
 80027ce:	7c3a      	ldrb	r2, [r7, #16]
 80027d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(5);
 80027da:	7c7a      	ldrb	r2, [r7, #17]
 80027dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(6);
 80027e6:	7cba      	ldrb	r2, [r7, #18]
 80027e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(7);
 80027f2:	7cfa      	ldrb	r2, [r7, #19]
 80027f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(8);
 80027fe:	7d3a      	ldrb	r2, [r7, #20]
 8002800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002804:	4313      	orrs	r3, r2
 8002806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(9);
 800280a:	7d7a      	ldrb	r2, [r7, #21]
 800280c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002810:	4313      	orrs	r3, r2
 8002812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(10);
 8002816:	7dba      	ldrb	r2, [r7, #22]
 8002818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800281c:	4313      	orrs	r3, r2
 800281e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(11);
 8002822:	7dfa      	ldrb	r2, [r7, #23]
 8002824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002828:	4313      	orrs	r3, r2
 800282a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(12);
 800282e:	7e3a      	ldrb	r2, [r7, #24]
 8002830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002834:	4313      	orrs	r3, r2
 8002836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(13);
 800283a:	7e7a      	ldrb	r2, [r7, #25]
 800283c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002840:	4313      	orrs	r3, r2
 8002842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(14);
 8002846:	7eba      	ldrb	r2, [r7, #26]
 8002848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800284c:	4313      	orrs	r3, r2
 800284e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(15);
 8002852:	7efa      	ldrb	r2, [r7, #27]
 8002854:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002858:	4313      	orrs	r3, r2
 800285a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(16);
 800285e:	7f3a      	ldrb	r2, [r7, #28]
 8002860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002864:	4313      	orrs	r3, r2
 8002866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(17);
 800286a:	7f7a      	ldrb	r2, [r7, #29]
 800286c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002870:	4313      	orrs	r3, r2
 8002872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(18);
 8002876:	7fba      	ldrb	r2, [r7, #30]
 8002878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800287c:	4313      	orrs	r3, r2
 800287e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(19);
 8002882:	7ffa      	ldrb	r2, [r7, #31]
 8002884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002888:	4313      	orrs	r3, r2
 800288a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(20);
 800288e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002896:	4313      	orrs	r3, r2
 8002898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(21);
 800289c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80028a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(22);
 80028aa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80028ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(23);
 80028b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80028bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(24);
 80028c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80028ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(25);
 80028d4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80028d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028dc:	4313      	orrs	r3, r2
 80028de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(26);
 80028e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80028e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(27);
 80028f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80028f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(28);
 80028fe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002906:	4313      	orrs	r3, r2
 8002908:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(29);
 800290c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002914:	4313      	orrs	r3, r2
 8002916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(30);
 800291a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800291e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002922:	4313      	orrs	r3, r2
 8002924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(31);
 8002928:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800292c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002930:	4313      	orrs	r3, r2
 8002932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    #undef F

    return r != 0;
 8002936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf14      	ite	ne
 800293e:	2301      	movne	r3, #1
 8002940:	2300      	moveq	r3, #0
 8002942:	b2db      	uxtb	r3, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	3730      	adds	r7, #48	; 0x30
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <fe_mul>:
    Can get away with 11 carries, but then data flow is much deeper.

    With tighter constraints on inputs can squeeze carries into int32.
*/

void fe_mul(fe h, const fe f, const fe g) {
 800294c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002950:	f6ad 0d4c 	subw	sp, sp, #2124	; 0x84c
 8002954:	af00      	add	r7, sp, #0
 8002956:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800295a:	6018      	str	r0, [r3, #0]
 800295c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002960:	6019      	str	r1, [r3, #0]
 8002962:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002966:	601a      	str	r2, [r3, #0]
    int32_t f0 = f[0];
 8002968:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
    int32_t f1 = f[1];
 8002974:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
    int32_t f2 = f[2];
 8002980:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
    int32_t f3 = f[3];
 800298c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
    int32_t f4 = f[4];
 8002998:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
    int32_t f5 = f[5];
 80029a4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
    int32_t f6 = f[6];
 80029b0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
    int32_t f7 = f[7];
 80029bc:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
    int32_t f8 = f[8];
 80029c8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
    int32_t f9 = f[9];
 80029d4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
    int32_t g0 = g[0];
 80029e0:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
    int32_t g1 = g[1];
 80029ec:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
    int32_t g2 = g[2];
 80029f8:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
    int32_t g3 = g[3];
 8002a04:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
    int32_t g4 = g[4];
 8002a10:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
    int32_t g5 = g[5];
 8002a1c:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    int32_t g6 = g[6];
 8002a28:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
    int32_t g7 = g[7];
 8002a34:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
    int32_t g8 = g[8];
 8002a40:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
    int32_t g9 = g[9];
 8002a4c:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
    int32_t g1_19 = 19 * g1; /* 1.959375*2^29 */
 8002a58:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
    int32_t g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 8002a6a:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
    int32_t g3_19 = 19 * g3;
 8002a7c:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
    int32_t g4_19 = 19 * g4;
 8002a8e:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
    int32_t g5_19 = 19 * g5;
 8002aa0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
    int32_t g6_19 = 19 * g6;
 8002ab2:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0
    int32_t g7_19 = 19 * g7;
 8002ac4:	f8d7 2800 	ldr.w	r2, [r7, #2048]	; 0x800
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
    int32_t g8_19 = 19 * g8;
 8002ad6:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
    int32_t g9_19 = 19 * g9;
 8002ae8:	f8d7 27f8 	ldr.w	r2, [r7, #2040]	; 0x7f8
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
    int32_t f1_2 = 2 * f1;
 8002afa:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
    int32_t f3_2 = 2 * f3;
 8002b04:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
    int32_t f5_2 = 2 * f5;
 8002b0e:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
    int32_t f7_2 = 2 * f7;
 8002b18:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
    int32_t f9_2 = 2 * f9;
 8002b22:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
    int64_t f0g0    = f0   * (int64_t) g0;
 8002b2c:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002b30:	4618      	mov	r0, r3
 8002b32:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002b36:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b40:	fb02 f501 	mul.w	r5, r2, r1
 8002b44:	fb00 f403 	mul.w	r4, r0, r3
 8002b48:	442c      	add	r4, r5
 8002b4a:	fba0 2302 	umull	r2, r3, r0, r2
 8002b4e:	18e1      	adds	r1, r4, r3
 8002b50:	460b      	mov	r3, r1
 8002b52:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8002b56:	e9c1 2300 	strd	r2, r3, [r1]
 8002b5a:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8002b5e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g1    = f0   * (int64_t) g1;
 8002b62:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002b66:	4618      	mov	r0, r3
 8002b68:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002b6c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002b70:	461a      	mov	r2, r3
 8002b72:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b76:	fb02 f501 	mul.w	r5, r2, r1
 8002b7a:	fb00 f403 	mul.w	r4, r0, r3
 8002b7e:	442c      	add	r4, r5
 8002b80:	fba0 2302 	umull	r2, r3, r0, r2
 8002b84:	18e1      	adds	r1, r4, r3
 8002b86:	460b      	mov	r3, r1
 8002b88:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 8002b8c:	e9c1 2300 	strd	r2, r3, [r1]
 8002b90:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 8002b94:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g2    = f0   * (int64_t) g2;
 8002b98:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002ba2:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002bac:	fb02 f501 	mul.w	r5, r2, r1
 8002bb0:	fb00 f403 	mul.w	r4, r0, r3
 8002bb4:	442c      	add	r4, r5
 8002bb6:	fba0 2302 	umull	r2, r3, r0, r2
 8002bba:	18e1      	adds	r1, r4, r3
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 8002bc2:	e9c1 2300 	strd	r2, r3, [r1]
 8002bc6:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 8002bca:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g3    = f0   * (int64_t) g3;
 8002bce:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002bd8:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8002bdc:	461a      	mov	r2, r3
 8002bde:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002be2:	fb02 f501 	mul.w	r5, r2, r1
 8002be6:	fb00 f403 	mul.w	r4, r0, r3
 8002bea:	442c      	add	r4, r5
 8002bec:	fba0 2302 	umull	r2, r3, r0, r2
 8002bf0:	18e1      	adds	r1, r4, r3
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8002bf8:	e9c1 2300 	strd	r2, r3, [r1]
 8002bfc:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8002c00:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g4    = f0   * (int64_t) g4;
 8002c04:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002c08:	4618      	mov	r0, r3
 8002c0a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c0e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002c12:	461a      	mov	r2, r3
 8002c14:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c18:	fb02 f501 	mul.w	r5, r2, r1
 8002c1c:	fb00 f403 	mul.w	r4, r0, r3
 8002c20:	442c      	add	r4, r5
 8002c22:	fba0 2302 	umull	r2, r3, r0, r2
 8002c26:	18e1      	adds	r1, r4, r3
 8002c28:	460b      	mov	r3, r1
 8002c2a:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 8002c2e:	e9c1 2300 	strd	r2, r3, [r1]
 8002c32:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 8002c36:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g5    = f0   * (int64_t) g5;
 8002c3a:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002c3e:	4618      	mov	r0, r3
 8002c40:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c44:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002c48:	461a      	mov	r2, r3
 8002c4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c4e:	fb02 f501 	mul.w	r5, r2, r1
 8002c52:	fb00 f403 	mul.w	r4, r0, r3
 8002c56:	442c      	add	r4, r5
 8002c58:	fba0 2302 	umull	r2, r3, r0, r2
 8002c5c:	18e1      	adds	r1, r4, r3
 8002c5e:	460b      	mov	r3, r1
 8002c60:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 8002c64:	e9c1 2300 	strd	r2, r3, [r1]
 8002c68:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 8002c6c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g6    = f0   * (int64_t) g6;
 8002c70:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002c74:	4618      	mov	r0, r3
 8002c76:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c7a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002c7e:	461a      	mov	r2, r3
 8002c80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c84:	fb02 f501 	mul.w	r5, r2, r1
 8002c88:	fb00 f403 	mul.w	r4, r0, r3
 8002c8c:	442c      	add	r4, r5
 8002c8e:	fba0 2302 	umull	r2, r3, r0, r2
 8002c92:	18e1      	adds	r1, r4, r3
 8002c94:	460b      	mov	r3, r1
 8002c96:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 8002c9a:	e9c1 2300 	strd	r2, r3, [r1]
 8002c9e:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 8002ca2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g7    = f0   * (int64_t) g7;
 8002ca6:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002caa:	4618      	mov	r0, r3
 8002cac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002cb0:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002cba:	fb02 f501 	mul.w	r5, r2, r1
 8002cbe:	fb00 f403 	mul.w	r4, r0, r3
 8002cc2:	442c      	add	r4, r5
 8002cc4:	fba0 2302 	umull	r2, r3, r0, r2
 8002cc8:	18e1      	adds	r1, r4, r3
 8002cca:	460b      	mov	r3, r1
 8002ccc:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8002cd0:	e9c1 2300 	strd	r2, r3, [r1]
 8002cd4:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8002cd8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g8    = f0   * (int64_t) g8;
 8002cdc:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002ce6:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8002cea:	461a      	mov	r2, r3
 8002cec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002cf0:	fb02 f501 	mul.w	r5, r2, r1
 8002cf4:	fb00 f403 	mul.w	r4, r0, r3
 8002cf8:	442c      	add	r4, r5
 8002cfa:	fba0 2302 	umull	r2, r3, r0, r2
 8002cfe:	18e1      	adds	r1, r4, r3
 8002d00:	460b      	mov	r3, r1
 8002d02:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 8002d06:	e9c1 2300 	strd	r2, r3, [r1]
 8002d0a:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 8002d0e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g9    = f0   * (int64_t) g9;
 8002d12:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002d16:	4618      	mov	r0, r3
 8002d18:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002d1c:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8002d20:	461a      	mov	r2, r3
 8002d22:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d26:	fb02 f501 	mul.w	r5, r2, r1
 8002d2a:	fb00 f403 	mul.w	r4, r0, r3
 8002d2e:	442c      	add	r4, r5
 8002d30:	fba0 2302 	umull	r2, r3, r0, r2
 8002d34:	18e1      	adds	r1, r4, r3
 8002d36:	460b      	mov	r3, r1
 8002d38:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8002d3c:	e9c1 2300 	strd	r2, r3, [r1]
 8002d40:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8002d44:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g0    = f1   * (int64_t) g0;
 8002d48:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002d52:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002d56:	461a      	mov	r2, r3
 8002d58:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d5c:	fb02 f501 	mul.w	r5, r2, r1
 8002d60:	fb00 f403 	mul.w	r4, r0, r3
 8002d64:	442c      	add	r4, r5
 8002d66:	fba0 2302 	umull	r2, r3, r0, r2
 8002d6a:	18e1      	adds	r1, r4, r3
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8002d72:	e9c1 2300 	strd	r2, r3, [r1]
 8002d76:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8002d7a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g1_2  = f1_2 * (int64_t) g1;
 8002d7e:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8002d82:	4618      	mov	r0, r3
 8002d84:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002d88:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d92:	fb02 f501 	mul.w	r5, r2, r1
 8002d96:	fb00 f403 	mul.w	r4, r0, r3
 8002d9a:	442c      	add	r4, r5
 8002d9c:	fba0 2302 	umull	r2, r3, r0, r2
 8002da0:	18e1      	adds	r1, r4, r3
 8002da2:	460b      	mov	r3, r1
 8002da4:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 8002da8:	e9c1 2300 	strd	r2, r3, [r1]
 8002dac:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 8002db0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g2    = f1   * (int64_t) g2;
 8002db4:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002db8:	4618      	mov	r0, r3
 8002dba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002dbe:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002dc8:	fb02 f501 	mul.w	r5, r2, r1
 8002dcc:	fb00 f403 	mul.w	r4, r0, r3
 8002dd0:	442c      	add	r4, r5
 8002dd2:	fba0 2302 	umull	r2, r3, r0, r2
 8002dd6:	18e1      	adds	r1, r4, r3
 8002dd8:	460b      	mov	r3, r1
 8002dda:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 8002dde:	e9c1 2300 	strd	r2, r3, [r1]
 8002de2:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 8002de6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g3_2  = f1_2 * (int64_t) g3;
 8002dea:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8002dee:	4618      	mov	r0, r3
 8002df0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002df4:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8002df8:	461a      	mov	r2, r3
 8002dfa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002dfe:	fb02 f501 	mul.w	r5, r2, r1
 8002e02:	fb00 f403 	mul.w	r4, r0, r3
 8002e06:	442c      	add	r4, r5
 8002e08:	fba0 2302 	umull	r2, r3, r0, r2
 8002e0c:	18e1      	adds	r1, r4, r3
 8002e0e:	460b      	mov	r3, r1
 8002e10:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 8002e14:	e9c1 2300 	strd	r2, r3, [r1]
 8002e18:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 8002e1c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g4    = f1   * (int64_t) g4;
 8002e20:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002e24:	4618      	mov	r0, r3
 8002e26:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e2a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002e2e:	461a      	mov	r2, r3
 8002e30:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e34:	fb02 f501 	mul.w	r5, r2, r1
 8002e38:	fb00 f403 	mul.w	r4, r0, r3
 8002e3c:	442c      	add	r4, r5
 8002e3e:	fba0 2302 	umull	r2, r3, r0, r2
 8002e42:	18e1      	adds	r1, r4, r3
 8002e44:	460b      	mov	r3, r1
 8002e46:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 8002e4a:	e9c1 2300 	strd	r2, r3, [r1]
 8002e4e:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 8002e52:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g5_2  = f1_2 * (int64_t) g5;
 8002e56:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e60:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002e64:	461a      	mov	r2, r3
 8002e66:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e6a:	fb02 f501 	mul.w	r5, r2, r1
 8002e6e:	fb00 f403 	mul.w	r4, r0, r3
 8002e72:	442c      	add	r4, r5
 8002e74:	fba0 2302 	umull	r2, r3, r0, r2
 8002e78:	18e1      	adds	r1, r4, r3
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 8002e80:	e9c1 2300 	strd	r2, r3, [r1]
 8002e84:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 8002e88:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g6    = f1   * (int64_t) g6;
 8002e8c:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002e90:	4618      	mov	r0, r3
 8002e92:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e96:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ea0:	fb02 f501 	mul.w	r5, r2, r1
 8002ea4:	fb00 f403 	mul.w	r4, r0, r3
 8002ea8:	442c      	add	r4, r5
 8002eaa:	fba0 2302 	umull	r2, r3, r0, r2
 8002eae:	18e1      	adds	r1, r4, r3
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 8002eb6:	e9c1 2300 	strd	r2, r3, [r1]
 8002eba:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 8002ebe:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g7_2  = f1_2 * (int64_t) g7;
 8002ec2:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002ecc:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ed6:	fb02 f501 	mul.w	r5, r2, r1
 8002eda:	fb00 f403 	mul.w	r4, r0, r3
 8002ede:	442c      	add	r4, r5
 8002ee0:	fba0 2302 	umull	r2, r3, r0, r2
 8002ee4:	18e1      	adds	r1, r4, r3
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8002eec:	e9c1 2300 	strd	r2, r3, [r1]
 8002ef0:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8002ef4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g8    = f1   * (int64_t) g8;
 8002ef8:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002efc:	4618      	mov	r0, r3
 8002efe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002f02:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8002f06:	461a      	mov	r2, r3
 8002f08:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f0c:	fb02 f501 	mul.w	r5, r2, r1
 8002f10:	fb00 f403 	mul.w	r4, r0, r3
 8002f14:	442c      	add	r4, r5
 8002f16:	fba0 2302 	umull	r2, r3, r0, r2
 8002f1a:	18e1      	adds	r1, r4, r3
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 8002f22:	e9c1 2300 	strd	r2, r3, [r1]
 8002f26:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 8002f2a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g9_38 = f1_2 * (int64_t) g9_19;
 8002f2e:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8002f32:	4618      	mov	r0, r3
 8002f34:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002f38:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f42:	fb02 f501 	mul.w	r5, r2, r1
 8002f46:	fb00 f403 	mul.w	r4, r0, r3
 8002f4a:	442c      	add	r4, r5
 8002f4c:	fba0 2302 	umull	r2, r3, r0, r2
 8002f50:	18e1      	adds	r1, r4, r3
 8002f52:	460b      	mov	r3, r1
 8002f54:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8002f58:	e9c1 2300 	strd	r2, r3, [r1]
 8002f5c:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8002f60:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g0    = f2   * (int64_t) g0;
 8002f64:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002f68:	4618      	mov	r0, r3
 8002f6a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002f6e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002f72:	461a      	mov	r2, r3
 8002f74:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002f78:	fb02 f501 	mul.w	r5, r2, r1
 8002f7c:	fb00 f403 	mul.w	r4, r0, r3
 8002f80:	442c      	add	r4, r5
 8002f82:	fba0 2302 	umull	r2, r3, r0, r2
 8002f86:	18e1      	adds	r1, r4, r3
 8002f88:	460b      	mov	r3, r1
 8002f8a:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 8002f8e:	e9c1 2300 	strd	r2, r3, [r1]
 8002f92:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 8002f96:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g1    = f2   * (int64_t) g1;
 8002f9a:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002fa4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002fa8:	461a      	mov	r2, r3
 8002faa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fae:	fb02 f501 	mul.w	r5, r2, r1
 8002fb2:	fb00 f403 	mul.w	r4, r0, r3
 8002fb6:	442c      	add	r4, r5
 8002fb8:	fba0 2302 	umull	r2, r3, r0, r2
 8002fbc:	18e1      	adds	r1, r4, r3
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 8002fc4:	e9c1 2300 	strd	r2, r3, [r1]
 8002fc8:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 8002fcc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g2    = f2   * (int64_t) g2;
 8002fd0:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002fda:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002fde:	461a      	mov	r2, r3
 8002fe0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fe4:	fb02 f501 	mul.w	r5, r2, r1
 8002fe8:	fb00 f403 	mul.w	r4, r0, r3
 8002fec:	442c      	add	r4, r5
 8002fee:	fba0 2302 	umull	r2, r3, r0, r2
 8002ff2:	18e1      	adds	r1, r4, r3
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8002ffa:	e9c1 2300 	strd	r2, r3, [r1]
 8002ffe:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8003002:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g3    = f2   * (int64_t) g3;
 8003006:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 800300a:	4618      	mov	r0, r3
 800300c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003010:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8003014:	461a      	mov	r2, r3
 8003016:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800301a:	fb02 f501 	mul.w	r5, r2, r1
 800301e:	fb00 f403 	mul.w	r4, r0, r3
 8003022:	442c      	add	r4, r5
 8003024:	fba0 2302 	umull	r2, r3, r0, r2
 8003028:	18e1      	adds	r1, r4, r3
 800302a:	460b      	mov	r3, r1
 800302c:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 8003030:	e9c1 2300 	strd	r2, r3, [r1]
 8003034:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 8003038:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g4    = f2   * (int64_t) g4;
 800303c:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8003040:	4618      	mov	r0, r3
 8003042:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003046:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800304a:	461a      	mov	r2, r3
 800304c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003050:	fb02 f501 	mul.w	r5, r2, r1
 8003054:	fb00 f403 	mul.w	r4, r0, r3
 8003058:	442c      	add	r4, r5
 800305a:	fba0 2302 	umull	r2, r3, r0, r2
 800305e:	18e1      	adds	r1, r4, r3
 8003060:	460b      	mov	r3, r1
 8003062:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 8003066:	e9c1 2300 	strd	r2, r3, [r1]
 800306a:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 800306e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g5    = f2   * (int64_t) g5;
 8003072:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8003076:	4618      	mov	r0, r3
 8003078:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800307c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003080:	461a      	mov	r2, r3
 8003082:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003086:	fb02 f501 	mul.w	r5, r2, r1
 800308a:	fb00 f403 	mul.w	r4, r0, r3
 800308e:	442c      	add	r4, r5
 8003090:	fba0 2302 	umull	r2, r3, r0, r2
 8003094:	18e1      	adds	r1, r4, r3
 8003096:	460b      	mov	r3, r1
 8003098:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 800309c:	e9c1 2300 	strd	r2, r3, [r1]
 80030a0:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 80030a4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g6    = f2   * (int64_t) g6;
 80030a8:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80030ac:	4618      	mov	r0, r3
 80030ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80030b2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80030b6:	461a      	mov	r2, r3
 80030b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030bc:	fb02 f501 	mul.w	r5, r2, r1
 80030c0:	fb00 f403 	mul.w	r4, r0, r3
 80030c4:	442c      	add	r4, r5
 80030c6:	fba0 2302 	umull	r2, r3, r0, r2
 80030ca:	18e1      	adds	r1, r4, r3
 80030cc:	460b      	mov	r3, r1
 80030ce:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 80030d2:	e9c1 2300 	strd	r2, r3, [r1]
 80030d6:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 80030da:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g7    = f2   * (int64_t) g7;
 80030de:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80030e2:	4618      	mov	r0, r3
 80030e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80030e8:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 80030ec:	461a      	mov	r2, r3
 80030ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030f2:	fb02 f501 	mul.w	r5, r2, r1
 80030f6:	fb00 f403 	mul.w	r4, r0, r3
 80030fa:	442c      	add	r4, r5
 80030fc:	fba0 2302 	umull	r2, r3, r0, r2
 8003100:	18e1      	adds	r1, r4, r3
 8003102:	460b      	mov	r3, r1
 8003104:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8003108:	e9c1 2300 	strd	r2, r3, [r1]
 800310c:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8003110:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g8_19 = f2   * (int64_t) g8_19;
 8003114:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8003118:	4618      	mov	r0, r3
 800311a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800311e:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8003122:	461a      	mov	r2, r3
 8003124:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003128:	fb02 f501 	mul.w	r5, r2, r1
 800312c:	fb00 f403 	mul.w	r4, r0, r3
 8003130:	442c      	add	r4, r5
 8003132:	fba0 2302 	umull	r2, r3, r0, r2
 8003136:	18e1      	adds	r1, r4, r3
 8003138:	460b      	mov	r3, r1
 800313a:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 800313e:	e9c1 2300 	strd	r2, r3, [r1]
 8003142:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8003146:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g9_19 = f2   * (int64_t) g9_19;
 800314a:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 800314e:	4618      	mov	r0, r3
 8003150:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003154:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8003158:	461a      	mov	r2, r3
 800315a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800315e:	fb02 f501 	mul.w	r5, r2, r1
 8003162:	fb00 f403 	mul.w	r4, r0, r3
 8003166:	442c      	add	r4, r5
 8003168:	fba0 2302 	umull	r2, r3, r0, r2
 800316c:	18e1      	adds	r1, r4, r3
 800316e:	460b      	mov	r3, r1
 8003170:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8003174:	e9c1 2300 	strd	r2, r3, [r1]
 8003178:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 800317c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g0    = f3   * (int64_t) g0;
 8003180:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8003184:	4618      	mov	r0, r3
 8003186:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800318a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800318e:	461a      	mov	r2, r3
 8003190:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003194:	fb02 f501 	mul.w	r5, r2, r1
 8003198:	fb00 f403 	mul.w	r4, r0, r3
 800319c:	442c      	add	r4, r5
 800319e:	fba0 2302 	umull	r2, r3, r0, r2
 80031a2:	18e1      	adds	r1, r4, r3
 80031a4:	460b      	mov	r3, r1
 80031a6:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 80031aa:	e9c1 2300 	strd	r2, r3, [r1]
 80031ae:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 80031b2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g1_2  = f3_2 * (int64_t) g1;
 80031b6:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 80031ba:	4618      	mov	r0, r3
 80031bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80031c0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80031c4:	461a      	mov	r2, r3
 80031c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80031ca:	fb02 f501 	mul.w	r5, r2, r1
 80031ce:	fb00 f403 	mul.w	r4, r0, r3
 80031d2:	442c      	add	r4, r5
 80031d4:	fba0 2302 	umull	r2, r3, r0, r2
 80031d8:	18e1      	adds	r1, r4, r3
 80031da:	460b      	mov	r3, r1
 80031dc:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 80031e0:	e9c1 2300 	strd	r2, r3, [r1]
 80031e4:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 80031e8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g2    = f3   * (int64_t) g2;
 80031ec:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 80031f0:	4618      	mov	r0, r3
 80031f2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80031f6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80031fa:	461a      	mov	r2, r3
 80031fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003200:	fb02 f501 	mul.w	r5, r2, r1
 8003204:	fb00 f403 	mul.w	r4, r0, r3
 8003208:	442c      	add	r4, r5
 800320a:	fba0 2302 	umull	r2, r3, r0, r2
 800320e:	18e1      	adds	r1, r4, r3
 8003210:	460b      	mov	r3, r1
 8003212:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8003216:	e9c1 2300 	strd	r2, r3, [r1]
 800321a:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800321e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g3_2  = f3_2 * (int64_t) g3;
 8003222:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8003226:	4618      	mov	r0, r3
 8003228:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800322c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8003230:	461a      	mov	r2, r3
 8003232:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003236:	fb02 f501 	mul.w	r5, r2, r1
 800323a:	fb00 f403 	mul.w	r4, r0, r3
 800323e:	442c      	add	r4, r5
 8003240:	fba0 2302 	umull	r2, r3, r0, r2
 8003244:	18e1      	adds	r1, r4, r3
 8003246:	460b      	mov	r3, r1
 8003248:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 800324c:	e9c1 2300 	strd	r2, r3, [r1]
 8003250:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8003254:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g4    = f3   * (int64_t) g4;
 8003258:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800325c:	4618      	mov	r0, r3
 800325e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003262:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003266:	461a      	mov	r2, r3
 8003268:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800326c:	fb02 f501 	mul.w	r5, r2, r1
 8003270:	fb00 f403 	mul.w	r4, r0, r3
 8003274:	442c      	add	r4, r5
 8003276:	fba0 2302 	umull	r2, r3, r0, r2
 800327a:	18e1      	adds	r1, r4, r3
 800327c:	460b      	mov	r3, r1
 800327e:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 8003282:	e9c1 2300 	strd	r2, r3, [r1]
 8003286:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 800328a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g5_2  = f3_2 * (int64_t) g5;
 800328e:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8003292:	4618      	mov	r0, r3
 8003294:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003298:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800329c:	461a      	mov	r2, r3
 800329e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80032a2:	fb02 f501 	mul.w	r5, r2, r1
 80032a6:	fb00 f403 	mul.w	r4, r0, r3
 80032aa:	442c      	add	r4, r5
 80032ac:	fba0 2302 	umull	r2, r3, r0, r2
 80032b0:	18e1      	adds	r1, r4, r3
 80032b2:	460b      	mov	r3, r1
 80032b4:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80032b8:	e9c1 2300 	strd	r2, r3, [r1]
 80032bc:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80032c0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g6    = f3   * (int64_t) g6;
 80032c4:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 80032c8:	4618      	mov	r0, r3
 80032ca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80032ce:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80032d2:	461a      	mov	r2, r3
 80032d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80032d8:	fb02 f501 	mul.w	r5, r2, r1
 80032dc:	fb00 f403 	mul.w	r4, r0, r3
 80032e0:	442c      	add	r4, r5
 80032e2:	fba0 2302 	umull	r2, r3, r0, r2
 80032e6:	18e1      	adds	r1, r4, r3
 80032e8:	460b      	mov	r3, r1
 80032ea:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 80032ee:	e9c1 2300 	strd	r2, r3, [r1]
 80032f2:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 80032f6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g7_38 = f3_2 * (int64_t) g7_19;
 80032fa:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 80032fe:	4618      	mov	r0, r3
 8003300:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003304:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8003308:	461a      	mov	r2, r3
 800330a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800330e:	fb02 f501 	mul.w	r5, r2, r1
 8003312:	fb00 f403 	mul.w	r4, r0, r3
 8003316:	442c      	add	r4, r5
 8003318:	fba0 2302 	umull	r2, r3, r0, r2
 800331c:	18e1      	adds	r1, r4, r3
 800331e:	460b      	mov	r3, r1
 8003320:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 8003324:	e9c1 2300 	strd	r2, r3, [r1]
 8003328:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 800332c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g8_19 = f3   * (int64_t) g8_19;
 8003330:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8003334:	4618      	mov	r0, r3
 8003336:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800333a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 800333e:	461a      	mov	r2, r3
 8003340:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003344:	fb02 f501 	mul.w	r5, r2, r1
 8003348:	fb00 f403 	mul.w	r4, r0, r3
 800334c:	442c      	add	r4, r5
 800334e:	fba0 2302 	umull	r2, r3, r0, r2
 8003352:	18e1      	adds	r1, r4, r3
 8003354:	460b      	mov	r3, r1
 8003356:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 800335a:	e9c1 2300 	strd	r2, r3, [r1]
 800335e:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8003362:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g9_38 = f3_2 * (int64_t) g9_19;
 8003366:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 800336a:	4618      	mov	r0, r3
 800336c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003370:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8003374:	461a      	mov	r2, r3
 8003376:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800337a:	fb02 f501 	mul.w	r5, r2, r1
 800337e:	fb00 f403 	mul.w	r4, r0, r3
 8003382:	442c      	add	r4, r5
 8003384:	fba0 2302 	umull	r2, r3, r0, r2
 8003388:	18e1      	adds	r1, r4, r3
 800338a:	460b      	mov	r3, r1
 800338c:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 8003390:	e9c1 2300 	strd	r2, r3, [r1]
 8003394:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 8003398:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g0    = f4   * (int64_t) g0;
 800339c:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80033a0:	4618      	mov	r0, r3
 80033a2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80033a6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80033aa:	461a      	mov	r2, r3
 80033ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80033b0:	fb02 f501 	mul.w	r5, r2, r1
 80033b4:	fb00 f403 	mul.w	r4, r0, r3
 80033b8:	442c      	add	r4, r5
 80033ba:	fba0 2302 	umull	r2, r3, r0, r2
 80033be:	18e1      	adds	r1, r4, r3
 80033c0:	460b      	mov	r3, r1
 80033c2:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 80033c6:	e9c1 2300 	strd	r2, r3, [r1]
 80033ca:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 80033ce:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g1    = f4   * (int64_t) g1;
 80033d2:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80033d6:	4618      	mov	r0, r3
 80033d8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80033dc:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80033e0:	461a      	mov	r2, r3
 80033e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80033e6:	fb02 f501 	mul.w	r5, r2, r1
 80033ea:	fb00 f403 	mul.w	r4, r0, r3
 80033ee:	442c      	add	r4, r5
 80033f0:	fba0 2302 	umull	r2, r3, r0, r2
 80033f4:	18e1      	adds	r1, r4, r3
 80033f6:	460b      	mov	r3, r1
 80033f8:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 80033fc:	e9c1 2300 	strd	r2, r3, [r1]
 8003400:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8003404:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g2    = f4   * (int64_t) g2;
 8003408:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800340c:	4618      	mov	r0, r3
 800340e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003412:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8003416:	461a      	mov	r2, r3
 8003418:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800341c:	fb02 f501 	mul.w	r5, r2, r1
 8003420:	fb00 f403 	mul.w	r4, r0, r3
 8003424:	442c      	add	r4, r5
 8003426:	fba0 2302 	umull	r2, r3, r0, r2
 800342a:	18e1      	adds	r1, r4, r3
 800342c:	460b      	mov	r3, r1
 800342e:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8003432:	e9c1 2300 	strd	r2, r3, [r1]
 8003436:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 800343a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g3    = f4   * (int64_t) g3;
 800343e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8003442:	4618      	mov	r0, r3
 8003444:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003448:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 800344c:	461a      	mov	r2, r3
 800344e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003452:	fb02 f501 	mul.w	r5, r2, r1
 8003456:	fb00 f403 	mul.w	r4, r0, r3
 800345a:	442c      	add	r4, r5
 800345c:	fba0 2302 	umull	r2, r3, r0, r2
 8003460:	18e1      	adds	r1, r4, r3
 8003462:	460b      	mov	r3, r1
 8003464:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8003468:	e9c1 2300 	strd	r2, r3, [r1]
 800346c:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8003470:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g4    = f4   * (int64_t) g4;
 8003474:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8003478:	4618      	mov	r0, r3
 800347a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800347e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003482:	461a      	mov	r2, r3
 8003484:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003488:	fb02 f501 	mul.w	r5, r2, r1
 800348c:	fb00 f403 	mul.w	r4, r0, r3
 8003490:	442c      	add	r4, r5
 8003492:	fba0 2302 	umull	r2, r3, r0, r2
 8003496:	18e1      	adds	r1, r4, r3
 8003498:	460b      	mov	r3, r1
 800349a:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 800349e:	e9c1 2300 	strd	r2, r3, [r1]
 80034a2:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 80034a6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g5    = f4   * (int64_t) g5;
 80034aa:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80034ae:	4618      	mov	r0, r3
 80034b0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80034b4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80034b8:	461a      	mov	r2, r3
 80034ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80034be:	fb02 f501 	mul.w	r5, r2, r1
 80034c2:	fb00 f403 	mul.w	r4, r0, r3
 80034c6:	442c      	add	r4, r5
 80034c8:	fba0 2302 	umull	r2, r3, r0, r2
 80034cc:	18e1      	adds	r1, r4, r3
 80034ce:	460b      	mov	r3, r1
 80034d0:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 80034d4:	e9c1 2300 	strd	r2, r3, [r1]
 80034d8:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 80034dc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g6_19 = f4   * (int64_t) g6_19;
 80034e0:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80034e4:	4618      	mov	r0, r3
 80034e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80034ea:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 80034ee:	461a      	mov	r2, r3
 80034f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80034f4:	fb02 f501 	mul.w	r5, r2, r1
 80034f8:	fb00 f403 	mul.w	r4, r0, r3
 80034fc:	442c      	add	r4, r5
 80034fe:	fba0 2302 	umull	r2, r3, r0, r2
 8003502:	18e1      	adds	r1, r4, r3
 8003504:	460b      	mov	r3, r1
 8003506:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 800350a:	e9c1 2300 	strd	r2, r3, [r1]
 800350e:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8003512:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g7_19 = f4   * (int64_t) g7_19;
 8003516:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800351a:	4618      	mov	r0, r3
 800351c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003520:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8003524:	461a      	mov	r2, r3
 8003526:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800352a:	fb02 f501 	mul.w	r5, r2, r1
 800352e:	fb00 f403 	mul.w	r4, r0, r3
 8003532:	442c      	add	r4, r5
 8003534:	fba0 2302 	umull	r2, r3, r0, r2
 8003538:	18e1      	adds	r1, r4, r3
 800353a:	460b      	mov	r3, r1
 800353c:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8003540:	e9c1 2300 	strd	r2, r3, [r1]
 8003544:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8003548:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g8_19 = f4   * (int64_t) g8_19;
 800354c:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8003550:	4618      	mov	r0, r3
 8003552:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003556:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 800355a:	461a      	mov	r2, r3
 800355c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003560:	fb02 f501 	mul.w	r5, r2, r1
 8003564:	fb00 f403 	mul.w	r4, r0, r3
 8003568:	442c      	add	r4, r5
 800356a:	fba0 2302 	umull	r2, r3, r0, r2
 800356e:	18e1      	adds	r1, r4, r3
 8003570:	460b      	mov	r3, r1
 8003572:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 8003576:	e9c1 2300 	strd	r2, r3, [r1]
 800357a:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 800357e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g9_19 = f4   * (int64_t) g9_19;
 8003582:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8003586:	4618      	mov	r0, r3
 8003588:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800358c:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8003590:	461a      	mov	r2, r3
 8003592:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003596:	fb02 f501 	mul.w	r5, r2, r1
 800359a:	fb00 f403 	mul.w	r4, r0, r3
 800359e:	442c      	add	r4, r5
 80035a0:	fba0 2302 	umull	r2, r3, r0, r2
 80035a4:	18e1      	adds	r1, r4, r3
 80035a6:	460b      	mov	r3, r1
 80035a8:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80035ac:	e9c1 2300 	strd	r2, r3, [r1]
 80035b0:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80035b4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g0    = f5   * (int64_t) g0;
 80035b8:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 80035bc:	4618      	mov	r0, r3
 80035be:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80035c2:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80035c6:	461a      	mov	r2, r3
 80035c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80035cc:	fb02 f501 	mul.w	r5, r2, r1
 80035d0:	fb00 f403 	mul.w	r4, r0, r3
 80035d4:	442c      	add	r4, r5
 80035d6:	fba0 2302 	umull	r2, r3, r0, r2
 80035da:	18e1      	adds	r1, r4, r3
 80035dc:	460b      	mov	r3, r1
 80035de:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 80035e2:	e9c1 2300 	strd	r2, r3, [r1]
 80035e6:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 80035ea:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g1_2  = f5_2 * (int64_t) g1;
 80035ee:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 80035f2:	4618      	mov	r0, r3
 80035f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80035f8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80035fc:	461a      	mov	r2, r3
 80035fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003602:	fb02 f501 	mul.w	r5, r2, r1
 8003606:	fb00 f403 	mul.w	r4, r0, r3
 800360a:	442c      	add	r4, r5
 800360c:	fba0 2302 	umull	r2, r3, r0, r2
 8003610:	18e1      	adds	r1, r4, r3
 8003612:	460b      	mov	r3, r1
 8003614:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8003618:	e9c1 2300 	strd	r2, r3, [r1]
 800361c:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8003620:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g2    = f5   * (int64_t) g2;
 8003624:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8003628:	4618      	mov	r0, r3
 800362a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800362e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8003632:	461a      	mov	r2, r3
 8003634:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003638:	fb02 f501 	mul.w	r5, r2, r1
 800363c:	fb00 f403 	mul.w	r4, r0, r3
 8003640:	442c      	add	r4, r5
 8003642:	fba0 2302 	umull	r2, r3, r0, r2
 8003646:	18e1      	adds	r1, r4, r3
 8003648:	460b      	mov	r3, r1
 800364a:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800364e:	e9c1 2300 	strd	r2, r3, [r1]
 8003652:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 8003656:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g3_2  = f5_2 * (int64_t) g3;
 800365a:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 800365e:	4618      	mov	r0, r3
 8003660:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003664:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8003668:	461a      	mov	r2, r3
 800366a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800366e:	fb02 f501 	mul.w	r5, r2, r1
 8003672:	fb00 f403 	mul.w	r4, r0, r3
 8003676:	442c      	add	r4, r5
 8003678:	fba0 2302 	umull	r2, r3, r0, r2
 800367c:	18e1      	adds	r1, r4, r3
 800367e:	460b      	mov	r3, r1
 8003680:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8003684:	e9c1 2300 	strd	r2, r3, [r1]
 8003688:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 800368c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g4    = f5   * (int64_t) g4;
 8003690:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8003694:	4618      	mov	r0, r3
 8003696:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800369a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800369e:	461a      	mov	r2, r3
 80036a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036a4:	fb02 f501 	mul.w	r5, r2, r1
 80036a8:	fb00 f403 	mul.w	r4, r0, r3
 80036ac:	442c      	add	r4, r5
 80036ae:	fba0 2302 	umull	r2, r3, r0, r2
 80036b2:	18e1      	adds	r1, r4, r3
 80036b4:	460b      	mov	r3, r1
 80036b6:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 80036ba:	e9c1 2300 	strd	r2, r3, [r1]
 80036be:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 80036c2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g5_38 = f5_2 * (int64_t) g5_19;
 80036c6:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 80036ca:	4618      	mov	r0, r3
 80036cc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80036d0:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 80036d4:	461a      	mov	r2, r3
 80036d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036da:	fb02 f501 	mul.w	r5, r2, r1
 80036de:	fb00 f403 	mul.w	r4, r0, r3
 80036e2:	442c      	add	r4, r5
 80036e4:	fba0 2302 	umull	r2, r3, r0, r2
 80036e8:	18e1      	adds	r1, r4, r3
 80036ea:	460b      	mov	r3, r1
 80036ec:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 80036f0:	e9c1 2300 	strd	r2, r3, [r1]
 80036f4:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 80036f8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g6_19 = f5   * (int64_t) g6_19;
 80036fc:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8003700:	4618      	mov	r0, r3
 8003702:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003706:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 800370a:	461a      	mov	r2, r3
 800370c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003710:	fb02 f501 	mul.w	r5, r2, r1
 8003714:	fb00 f403 	mul.w	r4, r0, r3
 8003718:	442c      	add	r4, r5
 800371a:	fba0 2302 	umull	r2, r3, r0, r2
 800371e:	18e1      	adds	r1, r4, r3
 8003720:	460b      	mov	r3, r1
 8003722:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 8003726:	e9c1 2300 	strd	r2, r3, [r1]
 800372a:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 800372e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g7_38 = f5_2 * (int64_t) g7_19;
 8003732:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8003736:	4618      	mov	r0, r3
 8003738:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800373c:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8003740:	461a      	mov	r2, r3
 8003742:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003746:	fb02 f501 	mul.w	r5, r2, r1
 800374a:	fb00 f403 	mul.w	r4, r0, r3
 800374e:	442c      	add	r4, r5
 8003750:	fba0 2302 	umull	r2, r3, r0, r2
 8003754:	18e1      	adds	r1, r4, r3
 8003756:	460b      	mov	r3, r1
 8003758:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 800375c:	e9c1 2300 	strd	r2, r3, [r1]
 8003760:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8003764:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g8_19 = f5   * (int64_t) g8_19;
 8003768:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 800376c:	4618      	mov	r0, r3
 800376e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003772:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8003776:	461a      	mov	r2, r3
 8003778:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800377c:	fb02 f501 	mul.w	r5, r2, r1
 8003780:	fb00 f403 	mul.w	r4, r0, r3
 8003784:	442c      	add	r4, r5
 8003786:	fba0 2302 	umull	r2, r3, r0, r2
 800378a:	18e1      	adds	r1, r4, r3
 800378c:	460b      	mov	r3, r1
 800378e:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8003792:	e9c1 2300 	strd	r2, r3, [r1]
 8003796:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 800379a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g9_38 = f5_2 * (int64_t) g9_19;
 800379e:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 80037a2:	4618      	mov	r0, r3
 80037a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80037a8:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 80037ac:	461a      	mov	r2, r3
 80037ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037b2:	fb02 f501 	mul.w	r5, r2, r1
 80037b6:	fb00 f403 	mul.w	r4, r0, r3
 80037ba:	442c      	add	r4, r5
 80037bc:	fba0 2302 	umull	r2, r3, r0, r2
 80037c0:	18e1      	adds	r1, r4, r3
 80037c2:	460b      	mov	r3, r1
 80037c4:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 80037c8:	e9c1 2300 	strd	r2, r3, [r1]
 80037cc:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 80037d0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g0    = f6   * (int64_t) g0;
 80037d4:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80037d8:	4618      	mov	r0, r3
 80037da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80037de:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80037e2:	461a      	mov	r2, r3
 80037e4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037e8:	fb02 f501 	mul.w	r5, r2, r1
 80037ec:	fb00 f403 	mul.w	r4, r0, r3
 80037f0:	442c      	add	r4, r5
 80037f2:	fba0 2302 	umull	r2, r3, r0, r2
 80037f6:	18e1      	adds	r1, r4, r3
 80037f8:	460b      	mov	r3, r1
 80037fa:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 80037fe:	e9c1 2300 	strd	r2, r3, [r1]
 8003802:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 8003806:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g1    = f6   * (int64_t) g1;
 800380a:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800380e:	4618      	mov	r0, r3
 8003810:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003814:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8003818:	461a      	mov	r2, r3
 800381a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800381e:	fb02 f501 	mul.w	r5, r2, r1
 8003822:	fb00 f403 	mul.w	r4, r0, r3
 8003826:	442c      	add	r4, r5
 8003828:	fba0 2302 	umull	r2, r3, r0, r2
 800382c:	18e1      	adds	r1, r4, r3
 800382e:	460b      	mov	r3, r1
 8003830:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 8003834:	e9c1 2300 	strd	r2, r3, [r1]
 8003838:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 800383c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g2    = f6   * (int64_t) g2;
 8003840:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8003844:	4618      	mov	r0, r3
 8003846:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800384a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800384e:	461a      	mov	r2, r3
 8003850:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003854:	fb02 f501 	mul.w	r5, r2, r1
 8003858:	fb00 f403 	mul.w	r4, r0, r3
 800385c:	442c      	add	r4, r5
 800385e:	fba0 2302 	umull	r2, r3, r0, r2
 8003862:	18e1      	adds	r1, r4, r3
 8003864:	460b      	mov	r3, r1
 8003866:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 800386a:	e9c1 2300 	strd	r2, r3, [r1]
 800386e:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 8003872:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g3    = f6   * (int64_t) g3;
 8003876:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800387a:	4618      	mov	r0, r3
 800387c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003880:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8003884:	461a      	mov	r2, r3
 8003886:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800388a:	fb02 f501 	mul.w	r5, r2, r1
 800388e:	fb00 f403 	mul.w	r4, r0, r3
 8003892:	442c      	add	r4, r5
 8003894:	fba0 2302 	umull	r2, r3, r0, r2
 8003898:	18e1      	adds	r1, r4, r3
 800389a:	460b      	mov	r3, r1
 800389c:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 80038a0:	e9c1 2300 	strd	r2, r3, [r1]
 80038a4:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 80038a8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g4_19 = f6   * (int64_t) g4_19;
 80038ac:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80038b0:	4618      	mov	r0, r3
 80038b2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80038b6:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80038ba:	461a      	mov	r2, r3
 80038bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80038c0:	fb02 f501 	mul.w	r5, r2, r1
 80038c4:	fb00 f403 	mul.w	r4, r0, r3
 80038c8:	442c      	add	r4, r5
 80038ca:	fba0 2302 	umull	r2, r3, r0, r2
 80038ce:	18e1      	adds	r1, r4, r3
 80038d0:	460b      	mov	r3, r1
 80038d2:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80038d6:	e9c1 2300 	strd	r2, r3, [r1]
 80038da:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80038de:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g5_19 = f6   * (int64_t) g5_19;
 80038e2:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80038e6:	4618      	mov	r0, r3
 80038e8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80038ec:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 80038f0:	461a      	mov	r2, r3
 80038f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80038f6:	fb02 f501 	mul.w	r5, r2, r1
 80038fa:	fb00 f403 	mul.w	r4, r0, r3
 80038fe:	442c      	add	r4, r5
 8003900:	fba0 2302 	umull	r2, r3, r0, r2
 8003904:	18e1      	adds	r1, r4, r3
 8003906:	460b      	mov	r3, r1
 8003908:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 800390c:	e9c1 2300 	strd	r2, r3, [r1]
 8003910:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8003914:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g6_19 = f6   * (int64_t) g6_19;
 8003918:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800391c:	4618      	mov	r0, r3
 800391e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003922:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8003926:	461a      	mov	r2, r3
 8003928:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800392c:	fb02 f501 	mul.w	r5, r2, r1
 8003930:	fb00 f403 	mul.w	r4, r0, r3
 8003934:	442c      	add	r4, r5
 8003936:	fba0 2302 	umull	r2, r3, r0, r2
 800393a:	18e1      	adds	r1, r4, r3
 800393c:	460b      	mov	r3, r1
 800393e:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 8003942:	e9c1 2300 	strd	r2, r3, [r1]
 8003946:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 800394a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g7_19 = f6   * (int64_t) g7_19;
 800394e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8003952:	4618      	mov	r0, r3
 8003954:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003958:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 800395c:	461a      	mov	r2, r3
 800395e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003962:	fb02 f501 	mul.w	r5, r2, r1
 8003966:	fb00 f403 	mul.w	r4, r0, r3
 800396a:	442c      	add	r4, r5
 800396c:	fba0 2302 	umull	r2, r3, r0, r2
 8003970:	18e1      	adds	r1, r4, r3
 8003972:	460b      	mov	r3, r1
 8003974:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8003978:	e9c1 2300 	strd	r2, r3, [r1]
 800397c:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g8_19 = f6   * (int64_t) g8_19;
 8003984:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8003988:	4618      	mov	r0, r3
 800398a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800398e:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8003992:	461a      	mov	r2, r3
 8003994:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003998:	fb02 f501 	mul.w	r5, r2, r1
 800399c:	fb00 f403 	mul.w	r4, r0, r3
 80039a0:	442c      	add	r4, r5
 80039a2:	fba0 2302 	umull	r2, r3, r0, r2
 80039a6:	18e1      	adds	r1, r4, r3
 80039a8:	460b      	mov	r3, r1
 80039aa:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80039ae:	e9c1 2300 	strd	r2, r3, [r1]
 80039b2:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80039b6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g9_19 = f6   * (int64_t) g9_19;
 80039ba:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80039be:	4618      	mov	r0, r3
 80039c0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80039c4:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 80039c8:	461a      	mov	r2, r3
 80039ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80039ce:	fb02 f501 	mul.w	r5, r2, r1
 80039d2:	fb00 f403 	mul.w	r4, r0, r3
 80039d6:	442c      	add	r4, r5
 80039d8:	fba0 2302 	umull	r2, r3, r0, r2
 80039dc:	18e1      	adds	r1, r4, r3
 80039de:	460b      	mov	r3, r1
 80039e0:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80039e4:	e9c1 2300 	strd	r2, r3, [r1]
 80039e8:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80039ec:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g0    = f7   * (int64_t) g0;
 80039f0:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80039f4:	4618      	mov	r0, r3
 80039f6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80039fa:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80039fe:	461a      	mov	r2, r3
 8003a00:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003a04:	fb02 f501 	mul.w	r5, r2, r1
 8003a08:	fb00 f403 	mul.w	r4, r0, r3
 8003a0c:	442c      	add	r4, r5
 8003a0e:	fba0 2302 	umull	r2, r3, r0, r2
 8003a12:	18e1      	adds	r1, r4, r3
 8003a14:	460b      	mov	r3, r1
 8003a16:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8003a1a:	e9c1 2300 	strd	r2, r3, [r1]
 8003a1e:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8003a22:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g1_2  = f7_2 * (int64_t) g1;
 8003a26:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003a30:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8003a34:	461a      	mov	r2, r3
 8003a36:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003a3a:	fb02 f501 	mul.w	r5, r2, r1
 8003a3e:	fb00 f403 	mul.w	r4, r0, r3
 8003a42:	442c      	add	r4, r5
 8003a44:	fba0 2302 	umull	r2, r3, r0, r2
 8003a48:	18e1      	adds	r1, r4, r3
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8003a50:	e9c1 2300 	strd	r2, r3, [r1]
 8003a54:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8003a58:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g2    = f7   * (int64_t) g2;
 8003a5c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8003a60:	4618      	mov	r0, r3
 8003a62:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003a66:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003a70:	fb02 f501 	mul.w	r5, r2, r1
 8003a74:	fb00 f403 	mul.w	r4, r0, r3
 8003a78:	442c      	add	r4, r5
 8003a7a:	fba0 2302 	umull	r2, r3, r0, r2
 8003a7e:	18e1      	adds	r1, r4, r3
 8003a80:	460b      	mov	r3, r1
 8003a82:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8003a86:	e9c1 2300 	strd	r2, r3, [r1]
 8003a8a:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8003a8e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g3_38 = f7_2 * (int64_t) g3_19;
 8003a92:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8003a96:	4618      	mov	r0, r3
 8003a98:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003a9c:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003aa6:	fb02 f501 	mul.w	r5, r2, r1
 8003aaa:	fb00 f403 	mul.w	r4, r0, r3
 8003aae:	442c      	add	r4, r5
 8003ab0:	fba0 2302 	umull	r2, r3, r0, r2
 8003ab4:	18e1      	adds	r1, r4, r3
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 8003abc:	e9c1 2300 	strd	r2, r3, [r1]
 8003ac0:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 8003ac4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g4_19 = f7   * (int64_t) g4_19;
 8003ac8:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8003acc:	4618      	mov	r0, r3
 8003ace:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003ad2:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003adc:	fb02 f501 	mul.w	r5, r2, r1
 8003ae0:	fb00 f403 	mul.w	r4, r0, r3
 8003ae4:	442c      	add	r4, r5
 8003ae6:	fba0 2302 	umull	r2, r3, r0, r2
 8003aea:	18e1      	adds	r1, r4, r3
 8003aec:	460b      	mov	r3, r1
 8003aee:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8003af2:	e9c1 2300 	strd	r2, r3, [r1]
 8003af6:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8003afa:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g5_38 = f7_2 * (int64_t) g5_19;
 8003afe:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8003b02:	4618      	mov	r0, r3
 8003b04:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003b08:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003b12:	fb02 f501 	mul.w	r5, r2, r1
 8003b16:	fb00 f403 	mul.w	r4, r0, r3
 8003b1a:	442c      	add	r4, r5
 8003b1c:	fba0 2302 	umull	r2, r3, r0, r2
 8003b20:	18e1      	adds	r1, r4, r3
 8003b22:	460b      	mov	r3, r1
 8003b24:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8003b28:	e9c1 2300 	strd	r2, r3, [r1]
 8003b2c:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8003b30:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g6_19 = f7   * (int64_t) g6_19;
 8003b34:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8003b38:	4618      	mov	r0, r3
 8003b3a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003b3e:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8003b42:	461a      	mov	r2, r3
 8003b44:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003b48:	fb02 f501 	mul.w	r5, r2, r1
 8003b4c:	fb00 f403 	mul.w	r4, r0, r3
 8003b50:	442c      	add	r4, r5
 8003b52:	fba0 2302 	umull	r2, r3, r0, r2
 8003b56:	18e1      	adds	r1, r4, r3
 8003b58:	460b      	mov	r3, r1
 8003b5a:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8003b5e:	e9c1 2300 	strd	r2, r3, [r1]
 8003b62:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8003b66:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g7_38 = f7_2 * (int64_t) g7_19;
 8003b6a:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8003b6e:	4618      	mov	r0, r3
 8003b70:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003b74:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8003b78:	461a      	mov	r2, r3
 8003b7a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003b7e:	fb02 f501 	mul.w	r5, r2, r1
 8003b82:	fb00 f403 	mul.w	r4, r0, r3
 8003b86:	442c      	add	r4, r5
 8003b88:	fba0 2302 	umull	r2, r3, r0, r2
 8003b8c:	18e1      	adds	r1, r4, r3
 8003b8e:	460b      	mov	r3, r1
 8003b90:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8003b94:	e9c1 2300 	strd	r2, r3, [r1]
 8003b98:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8003b9c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g8_19 = f7   * (int64_t) g8_19;
 8003ba0:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003baa:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8003bae:	461a      	mov	r2, r3
 8003bb0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003bb4:	fb02 f501 	mul.w	r5, r2, r1
 8003bb8:	fb00 f403 	mul.w	r4, r0, r3
 8003bbc:	442c      	add	r4, r5
 8003bbe:	fba0 2302 	umull	r2, r3, r0, r2
 8003bc2:	18e1      	adds	r1, r4, r3
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8003bca:	e9c1 2300 	strd	r2, r3, [r1]
 8003bce:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8003bd2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g9_38 = f7_2 * (int64_t) g9_19;
 8003bd6:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003be0:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8003be4:	461a      	mov	r2, r3
 8003be6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003bea:	fb02 f501 	mul.w	r5, r2, r1
 8003bee:	fb00 f403 	mul.w	r4, r0, r3
 8003bf2:	442c      	add	r4, r5
 8003bf4:	fba0 2302 	umull	r2, r3, r0, r2
 8003bf8:	18e1      	adds	r1, r4, r3
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 8003c00:	e9c1 2300 	strd	r2, r3, [r1]
 8003c04:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 8003c08:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g0    = f8   * (int64_t) g0;
 8003c0c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003c10:	4618      	mov	r0, r3
 8003c12:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003c16:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003c20:	fb02 f501 	mul.w	r5, r2, r1
 8003c24:	fb00 f403 	mul.w	r4, r0, r3
 8003c28:	442c      	add	r4, r5
 8003c2a:	fba0 2302 	umull	r2, r3, r0, r2
 8003c2e:	18e1      	adds	r1, r4, r3
 8003c30:	460b      	mov	r3, r1
 8003c32:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8003c36:	e9c1 2300 	strd	r2, r3, [r1]
 8003c3a:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8003c3e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g1    = f8   * (int64_t) g1;
 8003c42:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003c46:	4618      	mov	r0, r3
 8003c48:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003c4c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8003c50:	461a      	mov	r2, r3
 8003c52:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003c56:	fb02 f501 	mul.w	r5, r2, r1
 8003c5a:	fb00 f403 	mul.w	r4, r0, r3
 8003c5e:	442c      	add	r4, r5
 8003c60:	fba0 2302 	umull	r2, r3, r0, r2
 8003c64:	18e1      	adds	r1, r4, r3
 8003c66:	460b      	mov	r3, r1
 8003c68:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8003c6c:	e9c1 2300 	strd	r2, r3, [r1]
 8003c70:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8003c74:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g2_19 = f8   * (int64_t) g2_19;
 8003c78:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003c82:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8003c86:	461a      	mov	r2, r3
 8003c88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003c8c:	fb02 f501 	mul.w	r5, r2, r1
 8003c90:	fb00 f403 	mul.w	r4, r0, r3
 8003c94:	442c      	add	r4, r5
 8003c96:	fba0 2302 	umull	r2, r3, r0, r2
 8003c9a:	18e1      	adds	r1, r4, r3
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8003ca2:	e9c1 2300 	strd	r2, r3, [r1]
 8003ca6:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8003caa:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g3_19 = f8   * (int64_t) g3_19;
 8003cae:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003cb8:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003cc2:	fb02 f501 	mul.w	r5, r2, r1
 8003cc6:	fb00 f403 	mul.w	r4, r0, r3
 8003cca:	442c      	add	r4, r5
 8003ccc:	fba0 2302 	umull	r2, r3, r0, r2
 8003cd0:	18e1      	adds	r1, r4, r3
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8003cd8:	e9c1 2300 	strd	r2, r3, [r1]
 8003cdc:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8003ce0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g4_19 = f8   * (int64_t) g4_19;
 8003ce4:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003ce8:	4618      	mov	r0, r3
 8003cea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003cee:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003cf8:	fb02 f501 	mul.w	r5, r2, r1
 8003cfc:	fb00 f403 	mul.w	r4, r0, r3
 8003d00:	442c      	add	r4, r5
 8003d02:	fba0 2302 	umull	r2, r3, r0, r2
 8003d06:	18e1      	adds	r1, r4, r3
 8003d08:	460b      	mov	r3, r1
 8003d0a:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8003d0e:	e9c1 2300 	strd	r2, r3, [r1]
 8003d12:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8003d16:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g5_19 = f8   * (int64_t) g5_19;
 8003d1a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003d1e:	4618      	mov	r0, r3
 8003d20:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003d24:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8003d28:	461a      	mov	r2, r3
 8003d2a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003d2e:	fb02 f501 	mul.w	r5, r2, r1
 8003d32:	fb00 f403 	mul.w	r4, r0, r3
 8003d36:	442c      	add	r4, r5
 8003d38:	fba0 2302 	umull	r2, r3, r0, r2
 8003d3c:	18e1      	adds	r1, r4, r3
 8003d3e:	460b      	mov	r3, r1
 8003d40:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8003d44:	e9c1 2300 	strd	r2, r3, [r1]
 8003d48:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8003d4c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g6_19 = f8   * (int64_t) g6_19;
 8003d50:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003d54:	4618      	mov	r0, r3
 8003d56:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003d5a:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8003d5e:	461a      	mov	r2, r3
 8003d60:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003d64:	fb02 f501 	mul.w	r5, r2, r1
 8003d68:	fb00 f403 	mul.w	r4, r0, r3
 8003d6c:	442c      	add	r4, r5
 8003d6e:	fba0 2302 	umull	r2, r3, r0, r2
 8003d72:	18e1      	adds	r1, r4, r3
 8003d74:	460b      	mov	r3, r1
 8003d76:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8003d7a:	e9c1 2300 	strd	r2, r3, [r1]
 8003d7e:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8003d82:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g7_19 = f8   * (int64_t) g7_19;
 8003d86:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003d90:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8003d94:	461a      	mov	r2, r3
 8003d96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003d9a:	fb02 f501 	mul.w	r5, r2, r1
 8003d9e:	fb00 f403 	mul.w	r4, r0, r3
 8003da2:	442c      	add	r4, r5
 8003da4:	fba0 2302 	umull	r2, r3, r0, r2
 8003da8:	18e1      	adds	r1, r4, r3
 8003daa:	460b      	mov	r3, r1
 8003dac:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8003db0:	e9c1 2300 	strd	r2, r3, [r1]
 8003db4:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8003db8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g8_19 = f8   * (int64_t) g8_19;
 8003dbc:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003dc6:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8003dca:	461a      	mov	r2, r3
 8003dcc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003dd0:	fb02 f501 	mul.w	r5, r2, r1
 8003dd4:	fb00 f403 	mul.w	r4, r0, r3
 8003dd8:	442c      	add	r4, r5
 8003dda:	fba0 2302 	umull	r2, r3, r0, r2
 8003dde:	18e1      	adds	r1, r4, r3
 8003de0:	460b      	mov	r3, r1
 8003de2:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8003de6:	e9c1 2300 	strd	r2, r3, [r1]
 8003dea:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8003dee:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g9_19 = f8   * (int64_t) g9_19;
 8003df2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8003df6:	4618      	mov	r0, r3
 8003df8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003dfc:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8003e00:	461a      	mov	r2, r3
 8003e02:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003e06:	fb02 f501 	mul.w	r5, r2, r1
 8003e0a:	fb00 f403 	mul.w	r4, r0, r3
 8003e0e:	442c      	add	r4, r5
 8003e10:	fba0 2302 	umull	r2, r3, r0, r2
 8003e14:	18e1      	adds	r1, r4, r3
 8003e16:	460b      	mov	r3, r1
 8003e18:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8003e1c:	e9c1 2300 	strd	r2, r3, [r1]
 8003e20:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8003e24:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g0    = f9   * (int64_t) g0;
 8003e28:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003e32:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8003e36:	461a      	mov	r2, r3
 8003e38:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003e3c:	fb02 f501 	mul.w	r5, r2, r1
 8003e40:	fb00 f403 	mul.w	r4, r0, r3
 8003e44:	442c      	add	r4, r5
 8003e46:	fba0 2302 	umull	r2, r3, r0, r2
 8003e4a:	18e1      	adds	r1, r4, r3
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8003e52:	e9c1 2300 	strd	r2, r3, [r1]
 8003e56:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8003e5a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g1_38 = f9_2 * (int64_t) g1_19;
 8003e5e:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8003e62:	4618      	mov	r0, r3
 8003e64:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003e68:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	; 0x7f4
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003e72:	fb02 f501 	mul.w	r5, r2, r1
 8003e76:	fb00 f403 	mul.w	r4, r0, r3
 8003e7a:	442c      	add	r4, r5
 8003e7c:	fba0 2302 	umull	r2, r3, r0, r2
 8003e80:	18e1      	adds	r1, r4, r3
 8003e82:	460b      	mov	r3, r1
 8003e84:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8003e88:	e9c1 2300 	strd	r2, r3, [r1]
 8003e8c:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8003e90:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g2_19 = f9   * (int64_t) g2_19;
 8003e94:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8003e98:	4618      	mov	r0, r3
 8003e9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003e9e:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003ea8:	fb02 f501 	mul.w	r5, r2, r1
 8003eac:	fb00 f403 	mul.w	r4, r0, r3
 8003eb0:	442c      	add	r4, r5
 8003eb2:	fba0 2302 	umull	r2, r3, r0, r2
 8003eb6:	18e1      	adds	r1, r4, r3
 8003eb8:	460b      	mov	r3, r1
 8003eba:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8003ebe:	e9c1 2300 	strd	r2, r3, [r1]
 8003ec2:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8003ec6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g3_38 = f9_2 * (int64_t) g3_19;
 8003eca:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003ed4:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8003ed8:	461a      	mov	r2, r3
 8003eda:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003ede:	fb02 f501 	mul.w	r5, r2, r1
 8003ee2:	fb00 f403 	mul.w	r4, r0, r3
 8003ee6:	442c      	add	r4, r5
 8003ee8:	fba0 2302 	umull	r2, r3, r0, r2
 8003eec:	18e1      	adds	r1, r4, r3
 8003eee:	460b      	mov	r3, r1
 8003ef0:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8003ef4:	e9c1 2300 	strd	r2, r3, [r1]
 8003ef8:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8003efc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g4_19 = f9   * (int64_t) g4_19;
 8003f00:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8003f04:	4618      	mov	r0, r3
 8003f06:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003f0a:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8003f0e:	461a      	mov	r2, r3
 8003f10:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003f14:	fb02 f501 	mul.w	r5, r2, r1
 8003f18:	fb00 f403 	mul.w	r4, r0, r3
 8003f1c:	442c      	add	r4, r5
 8003f1e:	fba0 2302 	umull	r2, r3, r0, r2
 8003f22:	18e1      	adds	r1, r4, r3
 8003f24:	460b      	mov	r3, r1
 8003f26:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8003f2a:	e9c1 2300 	strd	r2, r3, [r1]
 8003f2e:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8003f32:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g5_38 = f9_2 * (int64_t) g5_19;
 8003f36:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003f40:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8003f44:	461a      	mov	r2, r3
 8003f46:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003f4a:	fb02 f501 	mul.w	r5, r2, r1
 8003f4e:	fb00 f403 	mul.w	r4, r0, r3
 8003f52:	442c      	add	r4, r5
 8003f54:	fba0 2302 	umull	r2, r3, r0, r2
 8003f58:	18e1      	adds	r1, r4, r3
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8003f60:	e9c1 2300 	strd	r2, r3, [r1]
 8003f64:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8003f68:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g6_19 = f9   * (int64_t) g6_19;
 8003f6c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8003f70:	4618      	mov	r0, r3
 8003f72:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003f76:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003f80:	fb02 f501 	mul.w	r5, r2, r1
 8003f84:	fb00 f403 	mul.w	r4, r0, r3
 8003f88:	442c      	add	r4, r5
 8003f8a:	fba0 2302 	umull	r2, r3, r0, r2
 8003f8e:	18e1      	adds	r1, r4, r3
 8003f90:	460b      	mov	r3, r1
 8003f92:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8003f96:	e9c1 2300 	strd	r2, r3, [r1]
 8003f9a:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8003f9e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g7_38 = f9_2 * (int64_t) g7_19;
 8003fa2:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003fac:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003fb6:	fb02 f501 	mul.w	r5, r2, r1
 8003fba:	fb00 f403 	mul.w	r4, r0, r3
 8003fbe:	442c      	add	r4, r5
 8003fc0:	fba0 2302 	umull	r2, r3, r0, r2
 8003fc4:	18e1      	adds	r1, r4, r3
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8003fcc:	e9c1 2300 	strd	r2, r3, [r1]
 8003fd0:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8003fd4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g8_19 = f9   * (int64_t) g8_19;
 8003fd8:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8003fdc:	4618      	mov	r0, r3
 8003fde:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003fe2:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003fec:	fb02 f501 	mul.w	r5, r2, r1
 8003ff0:	fb00 f403 	mul.w	r4, r0, r3
 8003ff4:	442c      	add	r4, r5
 8003ff6:	fba0 2302 	umull	r2, r3, r0, r2
 8003ffa:	18e1      	adds	r1, r4, r3
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8004002:	e9c1 2300 	strd	r2, r3, [r1]
 8004006:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 800400a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g9_38 = f9_2 * (int64_t) g9_19;
 800400e:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8004012:	4618      	mov	r0, r3
 8004014:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004018:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 800401c:	461a      	mov	r2, r3
 800401e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004022:	fb02 f501 	mul.w	r5, r2, r1
 8004026:	fb00 f403 	mul.w	r4, r0, r3
 800402a:	442c      	add	r4, r5
 800402c:	fba0 2302 	umull	r2, r3, r0, r2
 8004030:	18e1      	adds	r1, r4, r3
 8004032:	460b      	mov	r3, r1
 8004034:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8004038:	e9c1 2300 	strd	r2, r3, [r1]
 800403c:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8004040:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t h0 = f0g0 + f1g9_38 + f2g8_19 + f3g7_38 + f4g6_19 + f5g5_38 + f6g4_19 + f7g3_38 + f8g2_19 + f9g1_38;
 8004044:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 8004048:	e9d3 0100 	ldrd	r0, r1, [r3]
 800404c:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	1884      	adds	r4, r0, r2
 8004056:	f8c7 43e8 	str.w	r4, [r7, #1000]	; 0x3e8
 800405a:	eb41 0303 	adc.w	r3, r1, r3
 800405e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8004062:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	; 0x3e8
 800406e:	4621      	mov	r1, r4
 8004070:	1889      	adds	r1, r1, r2
 8004072:	f8c7 13e0 	str.w	r1, [r7, #992]	; 0x3e0
 8004076:	4629      	mov	r1, r5
 8004078:	eb43 0101 	adc.w	r1, r3, r1
 800407c:	f8c7 13e4 	str.w	r1, [r7, #996]	; 0x3e4
 8004080:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8004084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004088:	e9d7 45f8 	ldrd	r4, r5, [r7, #992]	; 0x3e0
 800408c:	4621      	mov	r1, r4
 800408e:	1889      	adds	r1, r1, r2
 8004090:	f8c7 13d8 	str.w	r1, [r7, #984]	; 0x3d8
 8004094:	4629      	mov	r1, r5
 8004096:	eb43 0101 	adc.w	r1, r3, r1
 800409a:	f8c7 13dc 	str.w	r1, [r7, #988]	; 0x3dc
 800409e:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 80040aa:	4621      	mov	r1, r4
 80040ac:	1889      	adds	r1, r1, r2
 80040ae:	f8c7 13d0 	str.w	r1, [r7, #976]	; 0x3d0
 80040b2:	4629      	mov	r1, r5
 80040b4:	eb43 0101 	adc.w	r1, r3, r1
 80040b8:	f8c7 13d4 	str.w	r1, [r7, #980]	; 0x3d4
 80040bc:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 80040c8:	4621      	mov	r1, r4
 80040ca:	1889      	adds	r1, r1, r2
 80040cc:	f8c7 13c8 	str.w	r1, [r7, #968]	; 0x3c8
 80040d0:	4629      	mov	r1, r5
 80040d2:	eb43 0101 	adc.w	r1, r3, r1
 80040d6:	f8c7 13cc 	str.w	r1, [r7, #972]	; 0x3cc
 80040da:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	; 0x3c8
 80040e6:	4621      	mov	r1, r4
 80040e8:	1889      	adds	r1, r1, r2
 80040ea:	f8c7 13c0 	str.w	r1, [r7, #960]	; 0x3c0
 80040ee:	4629      	mov	r1, r5
 80040f0:	eb43 0101 	adc.w	r1, r3, r1
 80040f4:	f8c7 13c4 	str.w	r1, [r7, #964]	; 0x3c4
 80040f8:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 8004104:	4621      	mov	r1, r4
 8004106:	1889      	adds	r1, r1, r2
 8004108:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 800410c:	4629      	mov	r1, r5
 800410e:	eb43 0101 	adc.w	r1, r3, r1
 8004112:	f8c7 13bc 	str.w	r1, [r7, #956]	; 0x3bc
 8004116:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 8004122:	4621      	mov	r1, r4
 8004124:	1889      	adds	r1, r1, r2
 8004126:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 800412a:	4629      	mov	r1, r5
 800412c:	eb43 0101 	adc.w	r1, r3, r1
 8004130:	f8c7 13b4 	str.w	r1, [r7, #948]	; 0x3b4
 8004134:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	; 0x3b0
 8004140:	4621      	mov	r1, r4
 8004142:	1851      	adds	r1, r2, r1
 8004144:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8004148:	4629      	mov	r1, r5
 800414a:	eb43 0101 	adc.w	r1, r3, r1
 800414e:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8004152:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8004156:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800415a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h1 = f0g1 + f1g0   + f2g9_19 + f3g8_19 + f4g7_19 + f5g6_19 + f6g5_19 + f7g4_19 + f8g3_19 + f9g2_19;
 800415e:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8004162:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004166:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	1884      	adds	r4, r0, r2
 8004170:	f8c7 43a8 	str.w	r4, [r7, #936]	; 0x3a8
 8004174:	eb41 0303 	adc.w	r3, r1, r3
 8004178:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800417c:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 8004188:	4621      	mov	r1, r4
 800418a:	1889      	adds	r1, r1, r2
 800418c:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 8004190:	4629      	mov	r1, r5
 8004192:	eb43 0101 	adc.w	r1, r3, r1
 8004196:	f8c7 13a4 	str.w	r1, [r7, #932]	; 0x3a4
 800419a:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 80041a6:	4621      	mov	r1, r4
 80041a8:	1889      	adds	r1, r1, r2
 80041aa:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 80041ae:	4629      	mov	r1, r5
 80041b0:	eb43 0101 	adc.w	r1, r3, r1
 80041b4:	f8c7 139c 	str.w	r1, [r7, #924]	; 0x39c
 80041b8:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 80041c4:	4621      	mov	r1, r4
 80041c6:	1889      	adds	r1, r1, r2
 80041c8:	f8c7 1390 	str.w	r1, [r7, #912]	; 0x390
 80041cc:	4629      	mov	r1, r5
 80041ce:	eb43 0101 	adc.w	r1, r3, r1
 80041d2:	f8c7 1394 	str.w	r1, [r7, #916]	; 0x394
 80041d6:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 80041e2:	4621      	mov	r1, r4
 80041e4:	1889      	adds	r1, r1, r2
 80041e6:	f8c7 1388 	str.w	r1, [r7, #904]	; 0x388
 80041ea:	4629      	mov	r1, r5
 80041ec:	eb43 0101 	adc.w	r1, r3, r1
 80041f0:	f8c7 138c 	str.w	r1, [r7, #908]	; 0x38c
 80041f4:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 8004200:	4621      	mov	r1, r4
 8004202:	1889      	adds	r1, r1, r2
 8004204:	f8c7 1380 	str.w	r1, [r7, #896]	; 0x380
 8004208:	4629      	mov	r1, r5
 800420a:	eb43 0101 	adc.w	r1, r3, r1
 800420e:	f8c7 1384 	str.w	r1, [r7, #900]	; 0x384
 8004212:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 800421e:	4621      	mov	r1, r4
 8004220:	1889      	adds	r1, r1, r2
 8004222:	f8c7 1378 	str.w	r1, [r7, #888]	; 0x378
 8004226:	4629      	mov	r1, r5
 8004228:	eb43 0101 	adc.w	r1, r3, r1
 800422c:	f8c7 137c 	str.w	r1, [r7, #892]	; 0x37c
 8004230:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 800423c:	4621      	mov	r1, r4
 800423e:	1889      	adds	r1, r1, r2
 8004240:	f8c7 1370 	str.w	r1, [r7, #880]	; 0x370
 8004244:	4629      	mov	r1, r5
 8004246:	eb43 0101 	adc.w	r1, r3, r1
 800424a:	f8c7 1374 	str.w	r1, [r7, #884]	; 0x374
 800424e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	; 0x370
 800425a:	4621      	mov	r1, r4
 800425c:	1851      	adds	r1, r2, r1
 800425e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8004262:	4629      	mov	r1, r5
 8004264:	eb43 0101 	adc.w	r1, r3, r1
 8004268:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800426c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8004270:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8004274:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h2 = f0g2 + f1g1_2 + f2g0   + f3g9_38 + f4g8_19 + f5g7_38 + f6g6_19 + f7g5_38 + f8g4_19 + f9g3_38;
 8004278:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800427c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004280:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	1884      	adds	r4, r0, r2
 800428a:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 800428e:	eb41 0303 	adc.w	r3, r1, r3
 8004292:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004296:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 80042a2:	4621      	mov	r1, r4
 80042a4:	1889      	adds	r1, r1, r2
 80042a6:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 80042aa:	4629      	mov	r1, r5
 80042ac:	eb43 0101 	adc.w	r1, r3, r1
 80042b0:	f8c7 1364 	str.w	r1, [r7, #868]	; 0x364
 80042b4:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 80042c0:	4621      	mov	r1, r4
 80042c2:	1889      	adds	r1, r1, r2
 80042c4:	f8c7 1358 	str.w	r1, [r7, #856]	; 0x358
 80042c8:	4629      	mov	r1, r5
 80042ca:	eb43 0101 	adc.w	r1, r3, r1
 80042ce:	f8c7 135c 	str.w	r1, [r7, #860]	; 0x35c
 80042d2:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	; 0x358
 80042de:	4621      	mov	r1, r4
 80042e0:	1889      	adds	r1, r1, r2
 80042e2:	f8c7 1350 	str.w	r1, [r7, #848]	; 0x350
 80042e6:	4629      	mov	r1, r5
 80042e8:	eb43 0101 	adc.w	r1, r3, r1
 80042ec:	f8c7 1354 	str.w	r1, [r7, #852]	; 0x354
 80042f0:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 80042fc:	4621      	mov	r1, r4
 80042fe:	1889      	adds	r1, r1, r2
 8004300:	f8c7 1348 	str.w	r1, [r7, #840]	; 0x348
 8004304:	4629      	mov	r1, r5
 8004306:	eb43 0101 	adc.w	r1, r3, r1
 800430a:	f8c7 134c 	str.w	r1, [r7, #844]	; 0x34c
 800430e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 800431a:	4621      	mov	r1, r4
 800431c:	1889      	adds	r1, r1, r2
 800431e:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 8004322:	4629      	mov	r1, r5
 8004324:	eb43 0101 	adc.w	r1, r3, r1
 8004328:	f8c7 1344 	str.w	r1, [r7, #836]	; 0x344
 800432c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 8004338:	4621      	mov	r1, r4
 800433a:	1889      	adds	r1, r1, r2
 800433c:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 8004340:	4629      	mov	r1, r5
 8004342:	eb43 0101 	adc.w	r1, r3, r1
 8004346:	f8c7 133c 	str.w	r1, [r7, #828]	; 0x33c
 800434a:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 8004356:	4621      	mov	r1, r4
 8004358:	1889      	adds	r1, r1, r2
 800435a:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 800435e:	4629      	mov	r1, r5
 8004360:	eb43 0101 	adc.w	r1, r3, r1
 8004364:	f8c7 1334 	str.w	r1, [r7, #820]	; 0x334
 8004368:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 8004374:	4621      	mov	r1, r4
 8004376:	1851      	adds	r1, r2, r1
 8004378:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800437c:	4629      	mov	r1, r5
 800437e:	eb43 0101 	adc.w	r1, r3, r1
 8004382:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8004386:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800438a:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800438e:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h3 = f0g3 + f1g2   + f2g1   + f3g0   + f4g9_19 + f5g8_19 + f6g7_19 + f7g6_19 + f8g5_19 + f9g4_19;
 8004392:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8004396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800439a:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	1884      	adds	r4, r0, r2
 80043a4:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 80043a8:	eb41 0303 	adc.w	r3, r1, r3
 80043ac:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80043b0:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 80043bc:	4621      	mov	r1, r4
 80043be:	1889      	adds	r1, r1, r2
 80043c0:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 80043c4:	4629      	mov	r1, r5
 80043c6:	eb43 0101 	adc.w	r1, r3, r1
 80043ca:	f8c7 1324 	str.w	r1, [r7, #804]	; 0x324
 80043ce:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	e9d7 45c8 	ldrd	r4, r5, [r7, #800]	; 0x320
 80043da:	4621      	mov	r1, r4
 80043dc:	1889      	adds	r1, r1, r2
 80043de:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 80043e2:	4629      	mov	r1, r5
 80043e4:	eb43 0101 	adc.w	r1, r3, r1
 80043e8:	f8c7 131c 	str.w	r1, [r7, #796]	; 0x31c
 80043ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	; 0x318
 80043f8:	4621      	mov	r1, r4
 80043fa:	1889      	adds	r1, r1, r2
 80043fc:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 8004400:	4629      	mov	r1, r5
 8004402:	eb43 0101 	adc.w	r1, r3, r1
 8004406:	f8c7 1314 	str.w	r1, [r7, #788]	; 0x314
 800440a:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 8004416:	4621      	mov	r1, r4
 8004418:	1889      	adds	r1, r1, r2
 800441a:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 800441e:	4629      	mov	r1, r5
 8004420:	eb43 0101 	adc.w	r1, r3, r1
 8004424:	f8c7 130c 	str.w	r1, [r7, #780]	; 0x30c
 8004428:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	; 0x308
 8004434:	4621      	mov	r1, r4
 8004436:	1889      	adds	r1, r1, r2
 8004438:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 800443c:	4629      	mov	r1, r5
 800443e:	eb43 0101 	adc.w	r1, r3, r1
 8004442:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
 8004446:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	e9d7 45c0 	ldrd	r4, r5, [r7, #768]	; 0x300
 8004452:	4621      	mov	r1, r4
 8004454:	1889      	adds	r1, r1, r2
 8004456:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 800445a:	4629      	mov	r1, r5
 800445c:	eb43 0101 	adc.w	r1, r3, r1
 8004460:	f8c7 12fc 	str.w	r1, [r7, #764]	; 0x2fc
 8004464:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 8004470:	4621      	mov	r1, r4
 8004472:	1889      	adds	r1, r1, r2
 8004474:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 8004478:	4629      	mov	r1, r5
 800447a:	eb43 0101 	adc.w	r1, r3, r1
 800447e:	f8c7 12f4 	str.w	r1, [r7, #756]	; 0x2f4
 8004482:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 800448e:	4621      	mov	r1, r4
 8004490:	1851      	adds	r1, r2, r1
 8004492:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004496:	4629      	mov	r1, r5
 8004498:	eb43 0101 	adc.w	r1, r3, r1
 800449c:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80044a0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80044a4:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 80044a8:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h4 = f0g4 + f1g3_2 + f2g2   + f3g1_2 + f4g0   + f5g9_38 + f6g8_19 + f7g7_38 + f8g6_19 + f9g5_38;
 80044ac:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 80044b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044b4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	1884      	adds	r4, r0, r2
 80044be:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 80044c2:	eb41 0303 	adc.w	r3, r1, r3
 80044c6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80044ca:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	; 0x2e8
 80044d6:	4621      	mov	r1, r4
 80044d8:	1889      	adds	r1, r1, r2
 80044da:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 80044de:	4629      	mov	r1, r5
 80044e0:	eb43 0101 	adc.w	r1, r3, r1
 80044e4:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 80044e8:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 80044f4:	4621      	mov	r1, r4
 80044f6:	1889      	adds	r1, r1, r2
 80044f8:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 80044fc:	4629      	mov	r1, r5
 80044fe:	eb43 0101 	adc.w	r1, r3, r1
 8004502:	f8c7 12dc 	str.w	r1, [r7, #732]	; 0x2dc
 8004506:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	; 0x2d8
 8004512:	4621      	mov	r1, r4
 8004514:	1889      	adds	r1, r1, r2
 8004516:	f8c7 12d0 	str.w	r1, [r7, #720]	; 0x2d0
 800451a:	4629      	mov	r1, r5
 800451c:	eb43 0101 	adc.w	r1, r3, r1
 8004520:	f8c7 12d4 	str.w	r1, [r7, #724]	; 0x2d4
 8004524:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8004530:	4621      	mov	r1, r4
 8004532:	1889      	adds	r1, r1, r2
 8004534:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8004538:	4629      	mov	r1, r5
 800453a:	eb43 0101 	adc.w	r1, r3, r1
 800453e:	f8c7 12cc 	str.w	r1, [r7, #716]	; 0x2cc
 8004542:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 800454e:	4621      	mov	r1, r4
 8004550:	1889      	adds	r1, r1, r2
 8004552:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8004556:	4629      	mov	r1, r5
 8004558:	eb43 0101 	adc.w	r1, r3, r1
 800455c:	f8c7 12c4 	str.w	r1, [r7, #708]	; 0x2c4
 8004560:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 800456c:	4621      	mov	r1, r4
 800456e:	1889      	adds	r1, r1, r2
 8004570:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 8004574:	4629      	mov	r1, r5
 8004576:	eb43 0101 	adc.w	r1, r3, r1
 800457a:	f8c7 12bc 	str.w	r1, [r7, #700]	; 0x2bc
 800457e:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 800458a:	4621      	mov	r1, r4
 800458c:	1889      	adds	r1, r1, r2
 800458e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8004592:	4629      	mov	r1, r5
 8004594:	eb43 0101 	adc.w	r1, r3, r1
 8004598:	f8c7 12b4 	str.w	r1, [r7, #692]	; 0x2b4
 800459c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 80045a8:	4621      	mov	r1, r4
 80045aa:	1851      	adds	r1, r2, r1
 80045ac:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80045b0:	4629      	mov	r1, r5
 80045b2:	eb43 0101 	adc.w	r1, r3, r1
 80045b6:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80045ba:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80045be:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 80045c2:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h5 = f0g5 + f1g4   + f2g3   + f3g2   + f4g1   + f5g0   + f6g9_19 + f7g8_19 + f8g7_19 + f9g6_19;
 80045c6:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 80045ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045ce:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	1884      	adds	r4, r0, r2
 80045d8:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 80045dc:	eb41 0303 	adc.w	r3, r1, r3
 80045e0:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80045e4:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	; 0x2a8
 80045f0:	4621      	mov	r1, r4
 80045f2:	1889      	adds	r1, r1, r2
 80045f4:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 80045f8:	4629      	mov	r1, r5
 80045fa:	eb43 0101 	adc.w	r1, r3, r1
 80045fe:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 8004602:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 800460e:	4621      	mov	r1, r4
 8004610:	1889      	adds	r1, r1, r2
 8004612:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8004616:	4629      	mov	r1, r5
 8004618:	eb43 0101 	adc.w	r1, r3, r1
 800461c:	f8c7 129c 	str.w	r1, [r7, #668]	; 0x29c
 8004620:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 800462c:	4621      	mov	r1, r4
 800462e:	1889      	adds	r1, r1, r2
 8004630:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8004634:	4629      	mov	r1, r5
 8004636:	eb43 0101 	adc.w	r1, r3, r1
 800463a:	f8c7 1294 	str.w	r1, [r7, #660]	; 0x294
 800463e:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 800464a:	4621      	mov	r1, r4
 800464c:	1889      	adds	r1, r1, r2
 800464e:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 8004652:	4629      	mov	r1, r5
 8004654:	eb43 0101 	adc.w	r1, r3, r1
 8004658:	f8c7 128c 	str.w	r1, [r7, #652]	; 0x28c
 800465c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 8004668:	4621      	mov	r1, r4
 800466a:	1889      	adds	r1, r1, r2
 800466c:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8004670:	4629      	mov	r1, r5
 8004672:	eb43 0101 	adc.w	r1, r3, r1
 8004676:	f8c7 1284 	str.w	r1, [r7, #644]	; 0x284
 800467a:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 8004686:	4621      	mov	r1, r4
 8004688:	1889      	adds	r1, r1, r2
 800468a:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800468e:	4629      	mov	r1, r5
 8004690:	eb43 0101 	adc.w	r1, r3, r1
 8004694:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8004698:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 80046a4:	4621      	mov	r1, r4
 80046a6:	1889      	adds	r1, r1, r2
 80046a8:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 80046ac:	4629      	mov	r1, r5
 80046ae:	eb43 0101 	adc.w	r1, r3, r1
 80046b2:	f8c7 1274 	str.w	r1, [r7, #628]	; 0x274
 80046b6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 80046c2:	4621      	mov	r1, r4
 80046c4:	1851      	adds	r1, r2, r1
 80046c6:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80046ca:	4629      	mov	r1, r5
 80046cc:	eb43 0101 	adc.w	r1, r3, r1
 80046d0:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80046d4:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80046d8:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80046dc:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h6 = f0g6 + f1g5_2 + f2g4   + f3g3_2 + f4g2   + f5g1_2 + f6g0   + f7g9_38 + f8g8_19 + f9g7_38;
 80046e0:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 80046e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046e8:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80046ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f0:	1884      	adds	r4, r0, r2
 80046f2:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 80046f6:	eb41 0303 	adc.w	r3, r1, r3
 80046fa:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80046fe:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 800470a:	4621      	mov	r1, r4
 800470c:	1889      	adds	r1, r1, r2
 800470e:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8004712:	4629      	mov	r1, r5
 8004714:	eb43 0101 	adc.w	r1, r3, r1
 8004718:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 800471c:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 8004728:	4621      	mov	r1, r4
 800472a:	1889      	adds	r1, r1, r2
 800472c:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8004730:	4629      	mov	r1, r5
 8004732:	eb43 0101 	adc.w	r1, r3, r1
 8004736:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 800473a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8004746:	4621      	mov	r1, r4
 8004748:	1889      	adds	r1, r1, r2
 800474a:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 800474e:	4629      	mov	r1, r5
 8004750:	eb43 0101 	adc.w	r1, r3, r1
 8004754:	f8c7 1254 	str.w	r1, [r7, #596]	; 0x254
 8004758:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 8004764:	4621      	mov	r1, r4
 8004766:	1889      	adds	r1, r1, r2
 8004768:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 800476c:	4629      	mov	r1, r5
 800476e:	eb43 0101 	adc.w	r1, r3, r1
 8004772:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8004776:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 8004782:	4621      	mov	r1, r4
 8004784:	1889      	adds	r1, r1, r2
 8004786:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 800478a:	4629      	mov	r1, r5
 800478c:	eb43 0101 	adc.w	r1, r3, r1
 8004790:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 8004794:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 80047a0:	4621      	mov	r1, r4
 80047a2:	1889      	adds	r1, r1, r2
 80047a4:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 80047a8:	4629      	mov	r1, r5
 80047aa:	eb43 0101 	adc.w	r1, r3, r1
 80047ae:	f8c7 123c 	str.w	r1, [r7, #572]	; 0x23c
 80047b2:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 80047be:	4621      	mov	r1, r4
 80047c0:	1889      	adds	r1, r1, r2
 80047c2:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 80047c6:	4629      	mov	r1, r5
 80047c8:	eb43 0101 	adc.w	r1, r3, r1
 80047cc:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 80047d0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 80047dc:	4621      	mov	r1, r4
 80047de:	1851      	adds	r1, r2, r1
 80047e0:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80047e4:	4629      	mov	r1, r5
 80047e6:	eb43 0101 	adc.w	r1, r3, r1
 80047ea:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80047ee:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80047f2:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80047f6:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h7 = f0g7 + f1g6   + f2g5   + f3g4   + f4g3   + f5g2   + f6g1   + f7g0   + f8g9_19 + f9g8_19;
 80047fa:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 80047fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004802:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	1884      	adds	r4, r0, r2
 800480c:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 8004810:	eb41 0303 	adc.w	r3, r1, r3
 8004814:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8004818:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 8004824:	4621      	mov	r1, r4
 8004826:	1889      	adds	r1, r1, r2
 8004828:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 800482c:	4629      	mov	r1, r5
 800482e:	eb43 0101 	adc.w	r1, r3, r1
 8004832:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 8004836:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 8004842:	4621      	mov	r1, r4
 8004844:	1889      	adds	r1, r1, r2
 8004846:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 800484a:	4629      	mov	r1, r5
 800484c:	eb43 0101 	adc.w	r1, r3, r1
 8004850:	f8c7 121c 	str.w	r1, [r7, #540]	; 0x21c
 8004854:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8004860:	4621      	mov	r1, r4
 8004862:	1889      	adds	r1, r1, r2
 8004864:	f8c7 1210 	str.w	r1, [r7, #528]	; 0x210
 8004868:	4629      	mov	r1, r5
 800486a:	eb43 0101 	adc.w	r1, r3, r1
 800486e:	f8c7 1214 	str.w	r1, [r7, #532]	; 0x214
 8004872:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8004876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487a:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 800487e:	4621      	mov	r1, r4
 8004880:	1889      	adds	r1, r1, r2
 8004882:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8004886:	4629      	mov	r1, r5
 8004888:	eb43 0101 	adc.w	r1, r3, r1
 800488c:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8004890:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 800489c:	4621      	mov	r1, r4
 800489e:	1889      	adds	r1, r1, r2
 80048a0:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80048a4:	4629      	mov	r1, r5
 80048a6:	eb43 0101 	adc.w	r1, r3, r1
 80048aa:	f8c7 1204 	str.w	r1, [r7, #516]	; 0x204
 80048ae:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80048ba:	4621      	mov	r1, r4
 80048bc:	1889      	adds	r1, r1, r2
 80048be:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 80048c2:	4629      	mov	r1, r5
 80048c4:	eb43 0101 	adc.w	r1, r3, r1
 80048c8:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 80048cc:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 80048d8:	4621      	mov	r1, r4
 80048da:	1889      	adds	r1, r1, r2
 80048dc:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 80048e0:	4629      	mov	r1, r5
 80048e2:	eb43 0101 	adc.w	r1, r3, r1
 80048e6:	f8c7 11f4 	str.w	r1, [r7, #500]	; 0x1f4
 80048ea:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80048f6:	4621      	mov	r1, r4
 80048f8:	1851      	adds	r1, r2, r1
 80048fa:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80048fe:	4629      	mov	r1, r5
 8004900:	eb43 0101 	adc.w	r1, r3, r1
 8004904:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8004908:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800490c:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8004910:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h8 = f0g8 + f1g7_2 + f2g6   + f3g5_2 + f4g4   + f5g3_2 + f6g2   + f7g1_2 + f8g0   + f9g9_38;
 8004914:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 8004918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800491c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8004920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004924:	1884      	adds	r4, r0, r2
 8004926:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 800492a:	eb41 0303 	adc.w	r3, r1, r3
 800492e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004932:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 800493e:	4621      	mov	r1, r4
 8004940:	1889      	adds	r1, r1, r2
 8004942:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8004946:	4629      	mov	r1, r5
 8004948:	eb43 0101 	adc.w	r1, r3, r1
 800494c:	f8c7 11e4 	str.w	r1, [r7, #484]	; 0x1e4
 8004950:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 800495c:	4621      	mov	r1, r4
 800495e:	1889      	adds	r1, r1, r2
 8004960:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 8004964:	4629      	mov	r1, r5
 8004966:	eb43 0101 	adc.w	r1, r3, r1
 800496a:	f8c7 11dc 	str.w	r1, [r7, #476]	; 0x1dc
 800496e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 800497a:	4621      	mov	r1, r4
 800497c:	1889      	adds	r1, r1, r2
 800497e:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8004982:	4629      	mov	r1, r5
 8004984:	eb43 0101 	adc.w	r1, r3, r1
 8004988:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 800498c:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 8004998:	4621      	mov	r1, r4
 800499a:	1889      	adds	r1, r1, r2
 800499c:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 80049a0:	4629      	mov	r1, r5
 80049a2:	eb43 0101 	adc.w	r1, r3, r1
 80049a6:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 80049aa:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 80049b6:	4621      	mov	r1, r4
 80049b8:	1889      	adds	r1, r1, r2
 80049ba:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 80049be:	4629      	mov	r1, r5
 80049c0:	eb43 0101 	adc.w	r1, r3, r1
 80049c4:	f8c7 11c4 	str.w	r1, [r7, #452]	; 0x1c4
 80049c8:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 80049d4:	4621      	mov	r1, r4
 80049d6:	1889      	adds	r1, r1, r2
 80049d8:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 80049dc:	4629      	mov	r1, r5
 80049de:	eb43 0101 	adc.w	r1, r3, r1
 80049e2:	f8c7 11bc 	str.w	r1, [r7, #444]	; 0x1bc
 80049e6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 80049f2:	4621      	mov	r1, r4
 80049f4:	1889      	adds	r1, r1, r2
 80049f6:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 80049fa:	4629      	mov	r1, r5
 80049fc:	eb43 0101 	adc.w	r1, r3, r1
 8004a00:	f8c7 11b4 	str.w	r1, [r7, #436]	; 0x1b4
 8004a04:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8004a10:	4621      	mov	r1, r4
 8004a12:	1851      	adds	r1, r2, r1
 8004a14:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004a18:	4629      	mov	r1, r5
 8004a1a:	eb43 0101 	adc.w	r1, r3, r1
 8004a1e:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8004a22:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8004a26:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8004a2a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h9 = f0g9 + f1g8   + f2g7   + f3g6   + f4g5   + f5g4   + f6g3   + f7g2   + f8g1   + f9g0   ;
 8004a2e:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8004a32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a36:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	1884      	adds	r4, r0, r2
 8004a40:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8004a44:	eb41 0303 	adc.w	r3, r1, r3
 8004a48:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8004a4c:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8004a58:	4621      	mov	r1, r4
 8004a5a:	1889      	adds	r1, r1, r2
 8004a5c:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8004a60:	4629      	mov	r1, r5
 8004a62:	eb43 0101 	adc.w	r1, r3, r1
 8004a66:	f8c7 11a4 	str.w	r1, [r7, #420]	; 0x1a4
 8004a6a:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8004a76:	4621      	mov	r1, r4
 8004a78:	1889      	adds	r1, r1, r2
 8004a7a:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8004a7e:	4629      	mov	r1, r5
 8004a80:	eb43 0101 	adc.w	r1, r3, r1
 8004a84:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 8004a88:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 8004a94:	4621      	mov	r1, r4
 8004a96:	1889      	adds	r1, r1, r2
 8004a98:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	eb43 0101 	adc.w	r1, r3, r1
 8004aa2:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8004aa6:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	1889      	adds	r1, r1, r2
 8004ab6:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8004aba:	4629      	mov	r1, r5
 8004abc:	eb43 0101 	adc.w	r1, r3, r1
 8004ac0:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
 8004ac4:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	1889      	adds	r1, r1, r2
 8004ad4:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8004ad8:	4629      	mov	r1, r5
 8004ada:	eb43 0101 	adc.w	r1, r3, r1
 8004ade:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8004ae2:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8004ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aea:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8004aee:	4621      	mov	r1, r4
 8004af0:	1889      	adds	r1, r1, r2
 8004af2:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8004af6:	4629      	mov	r1, r5
 8004af8:	eb43 0101 	adc.w	r1, r3, r1
 8004afc:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8004b00:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	1889      	adds	r1, r1, r2
 8004b10:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8004b14:	4629      	mov	r1, r5
 8004b16:	eb43 0101 	adc.w	r1, r3, r1
 8004b1a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8004b1e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	1851      	adds	r1, r2, r1
 8004b2e:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004b32:	4629      	mov	r1, r5
 8004b34:	eb43 0101 	adc.w	r1, r3, r1
 8004b38:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8004b3c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8004b40:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8004b44:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;

    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8004b48:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f112 7800 	adds.w	r8, r2, #33554432	; 0x2000000
 8004b54:	f143 0900 	adc.w	r9, r3, #0
 8004b58:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	ea4f 6298 	mov.w	r2, r8, lsr #26
 8004b68:	ea42 1289 	orr.w	r2, r2, r9, lsl #6
 8004b6c:	ea4f 63a9 	mov.w	r3, r9, asr #26
 8004b70:	e9c1 2300 	strd	r2, r3, [r1]
    h1 += carry0;
 8004b74:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004b78:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8004b7c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	1884      	adds	r4, r0, r2
 8004b86:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8004b8a:	eb41 0303 	adc.w	r3, r1, r3
 8004b8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b92:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8004b96:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8004b9a:	e9c2 3400 	strd	r3, r4, [r2]
    h0 -= carry0 << 26;
 8004b9e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	f04f 0000 	mov.w	r0, #0
 8004baa:	f04f 0100 	mov.w	r1, #0
 8004bae:	0699      	lsls	r1, r3, #26
 8004bb0:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8004bb4:	0690      	lsls	r0, r2, #26
 8004bb6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	1a14      	subs	r4, r2, r0
 8004bc0:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8004bc4:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004bcc:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004bd0:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004bd4:	e9c2 3400 	strd	r3, r4, [r2]
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8004bd8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	f112 7a00 	adds.w	sl, r2, #33554432	; 0x2000000
 8004be4:	f143 0b00 	adc.w	fp, r3, #0
 8004be8:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	ea4f 629a 	mov.w	r2, sl, lsr #26
 8004bf8:	ea42 128b 	orr.w	r2, r2, fp, lsl #6
 8004bfc:	ea4f 63ab 	mov.w	r3, fp, asr #26
 8004c00:	e9c1 2300 	strd	r2, r3, [r1]
    h5 += carry4;
 8004c04:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8004c08:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8004c0c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	1884      	adds	r4, r0, r2
 8004c16:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004c1a:	eb41 0303 	adc.w	r3, r1, r3
 8004c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c22:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8004c26:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8004c2a:	e9c2 3400 	strd	r3, r4, [r2]
    h4 -= carry4 << 26;
 8004c2e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	f04f 0000 	mov.w	r0, #0
 8004c3a:	f04f 0100 	mov.w	r1, #0
 8004c3e:	0699      	lsls	r1, r3, #26
 8004c40:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8004c44:	0690      	lsls	r0, r2, #26
 8004c46:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	1a14      	subs	r4, r2, r0
 8004c50:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004c54:	eb63 0301 	sbc.w	r3, r3, r1
 8004c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c5c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004c60:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8004c64:	e9c2 3400 	strd	r3, r4, [r2]

    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 8004c68:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8004c74:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8004c78:	f143 0300 	adc.w	r3, r3, #0
 8004c7c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004c80:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8004c90:	4620      	mov	r0, r4
 8004c92:	0e42      	lsrs	r2, r0, #25
 8004c94:	4628      	mov	r0, r5
 8004c96:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	1643      	asrs	r3, r0, #25
 8004c9e:	e9c1 2300 	strd	r2, r3, [r1]
    h2 += carry1;
 8004ca2:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8004ca6:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8004caa:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	1884      	adds	r4, r0, r2
 8004cb4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004cb8:	eb41 0303 	adc.w	r3, r1, r3
 8004cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004cc0:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8004cc4:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8004cc8:	e9c2 3400 	strd	r3, r4, [r2]
    h1 -= carry1 << 25;
 8004ccc:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8004cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd4:	f04f 0000 	mov.w	r0, #0
 8004cd8:	f04f 0100 	mov.w	r1, #0
 8004cdc:	0659      	lsls	r1, r3, #25
 8004cde:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8004ce2:	0650      	lsls	r0, r2, #25
 8004ce4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	1a14      	subs	r4, r2, r0
 8004cee:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cfa:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004cfe:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8004d02:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 8004d06:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8004d12:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8004d16:	f143 0300 	adc.w	r3, r3, #0
 8004d1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8004d1e:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004d2e:	4620      	mov	r0, r4
 8004d30:	0e42      	lsrs	r2, r0, #25
 8004d32:	4628      	mov	r0, r5
 8004d34:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8004d38:	4628      	mov	r0, r5
 8004d3a:	1643      	asrs	r3, r0, #25
 8004d3c:	e9c1 2300 	strd	r2, r3, [r1]
    h6 += carry5;
 8004d40:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004d44:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8004d48:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	1884      	adds	r4, r0, r2
 8004d52:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004d56:	eb41 0303 	adc.w	r3, r1, r3
 8004d5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d5e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8004d62:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8004d66:	e9c2 3400 	strd	r3, r4, [r2]
    h5 -= carry5 << 25;
 8004d6a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f04f 0100 	mov.w	r1, #0
 8004d7a:	0659      	lsls	r1, r3, #25
 8004d7c:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8004d80:	0650      	lsls	r0, r2, #25
 8004d82:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	1a14      	subs	r4, r2, r0
 8004d8c:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8004d90:	eb63 0301 	sbc.w	r3, r3, r1
 8004d94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d98:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8004d9c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8004da0:	e9c2 3400 	strd	r3, r4, [r2]

    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 8004da4:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8004db0:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8004db4:	f143 0300 	adc.w	r3, r3, #0
 8004db8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004dbc:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8004dcc:	4620      	mov	r0, r4
 8004dce:	0e82      	lsrs	r2, r0, #26
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	1683      	asrs	r3, r0, #26
 8004dda:	e9c1 2300 	strd	r2, r3, [r1]
    h3 += carry2;
 8004dde:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8004de2:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8004de6:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	1884      	adds	r4, r0, r2
 8004df0:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8004df4:	eb41 0303 	adc.w	r3, r1, r3
 8004df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dfc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004e00:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8004e04:	e9c2 3400 	strd	r3, r4, [r2]
    h2 -= carry2 << 26;
 8004e08:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f04f 0000 	mov.w	r0, #0
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	0699      	lsls	r1, r3, #26
 8004e1a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8004e1e:	0690      	lsls	r0, r2, #26
 8004e20:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	1a14      	subs	r4, r2, r0
 8004e2a:	67bc      	str	r4, [r7, #120]	; 0x78
 8004e2c:	eb63 0301 	sbc.w	r3, r3, r1
 8004e30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e32:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004e36:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8004e3a:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 8004e3e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8004e4a:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8004e4e:	f143 0300 	adc.w	r3, r3, #0
 8004e52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e56:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8004e66:	4620      	mov	r0, r4
 8004e68:	0e82      	lsrs	r2, r0, #26
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8004e70:	4628      	mov	r0, r5
 8004e72:	1683      	asrs	r3, r0, #26
 8004e74:	e9c1 2300 	strd	r2, r3, [r1]
    h7 += carry6;
 8004e78:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004e7c:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8004e80:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	1884      	adds	r4, r0, r2
 8004e8a:	673c      	str	r4, [r7, #112]	; 0x70
 8004e8c:	eb41 0303 	adc.w	r3, r1, r3
 8004e90:	677b      	str	r3, [r7, #116]	; 0x74
 8004e92:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8004e96:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8004e9a:	e9c2 3400 	strd	r3, r4, [r2]
    h6 -= carry6 << 26;
 8004e9e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f04f 0000 	mov.w	r0, #0
 8004eaa:	f04f 0100 	mov.w	r1, #0
 8004eae:	0699      	lsls	r1, r3, #26
 8004eb0:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8004eb4:	0690      	lsls	r0, r2, #26
 8004eb6:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	1a14      	subs	r4, r2, r0
 8004ec0:	66bc      	str	r4, [r7, #104]	; 0x68
 8004ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ec8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004ecc:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8004ed0:	e9c2 3400 	strd	r3, r4, [r2]

    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8004ed4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8004ee0:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8004ee4:	f143 0300 	adc.w	r3, r3, #0
 8004ee8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004eec:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8004efc:	4620      	mov	r0, r4
 8004efe:	0e42      	lsrs	r2, r0, #25
 8004f00:	4628      	mov	r0, r5
 8004f02:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8004f06:	4628      	mov	r0, r5
 8004f08:	1643      	asrs	r3, r0, #25
 8004f0a:	e9c1 2300 	strd	r2, r3, [r1]
    h4 += carry3;
 8004f0e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8004f12:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8004f16:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	1884      	adds	r4, r0, r2
 8004f20:	663c      	str	r4, [r7, #96]	; 0x60
 8004f22:	eb41 0303 	adc.w	r3, r1, r3
 8004f26:	667b      	str	r3, [r7, #100]	; 0x64
 8004f28:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004f2c:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8004f30:	e9c2 3400 	strd	r3, r4, [r2]
    h3 -= carry3 << 25;
 8004f34:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f04f 0000 	mov.w	r0, #0
 8004f40:	f04f 0100 	mov.w	r1, #0
 8004f44:	0659      	lsls	r1, r3, #25
 8004f46:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8004f4a:	0650      	lsls	r0, r2, #25
 8004f4c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	1a14      	subs	r4, r2, r0
 8004f56:	65bc      	str	r4, [r7, #88]	; 0x58
 8004f58:	eb63 0301 	sbc.w	r3, r3, r1
 8004f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f5e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004f62:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8004f66:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 8004f6a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8004f76:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8004f7a:	f143 0300 	adc.w	r3, r3, #0
 8004f7e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004f82:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8004f92:	4620      	mov	r0, r4
 8004f94:	0e42      	lsrs	r2, r0, #25
 8004f96:	4628      	mov	r0, r5
 8004f98:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	1643      	asrs	r3, r0, #25
 8004fa0:	e9c1 2300 	strd	r2, r3, [r1]
    h8 += carry7;
 8004fa4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004fa8:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8004fac:	e9d2 0100 	ldrd	r0, r1, [r2]
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	1884      	adds	r4, r0, r2
 8004fb6:	653c      	str	r4, [r7, #80]	; 0x50
 8004fb8:	eb41 0303 	adc.w	r3, r1, r3
 8004fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8004fbe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004fc2:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8004fc6:	e9c2 3400 	strd	r3, r4, [r2]
    h7 -= carry7 << 25;
 8004fca:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	0659      	lsls	r1, r3, #25
 8004fdc:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8004fe0:	0650      	lsls	r0, r2, #25
 8004fe2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	1a14      	subs	r4, r2, r0
 8004fec:	64bc      	str	r4, [r7, #72]	; 0x48
 8004fee:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004ff8:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8004ffc:	e9c2 3400 	strd	r3, r4, [r2]

    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8005000:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 800500c:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8005010:	f143 0300 	adc.w	r3, r3, #0
 8005014:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005018:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8005028:	4620      	mov	r0, r4
 800502a:	0e82      	lsrs	r2, r0, #26
 800502c:	4628      	mov	r0, r5
 800502e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8005032:	4628      	mov	r0, r5
 8005034:	1683      	asrs	r3, r0, #26
 8005036:	e9c1 2300 	strd	r2, r3, [r1]
    h5 += carry4;
 800503a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800503e:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8005042:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	1884      	adds	r4, r0, r2
 800504c:	643c      	str	r4, [r7, #64]	; 0x40
 800504e:	eb41 0303 	adc.w	r3, r1, r3
 8005052:	647b      	str	r3, [r7, #68]	; 0x44
 8005054:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005058:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 800505c:	e9c2 3400 	strd	r3, r4, [r2]
    h4 -= carry4 << 26;
 8005060:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8005064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005068:	f04f 0000 	mov.w	r0, #0
 800506c:	f04f 0100 	mov.w	r1, #0
 8005070:	0699      	lsls	r1, r3, #26
 8005072:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8005076:	0690      	lsls	r0, r2, #26
 8005078:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	1a14      	subs	r4, r2, r0
 8005082:	63bc      	str	r4, [r7, #56]	; 0x38
 8005084:	eb63 0301 	sbc.w	r3, r3, r1
 8005088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800508a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800508e:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8005092:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 8005096:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80050a2:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80050a6:	f143 0300 	adc.w	r3, r3, #0
 80050aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80050ae:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80050be:	4620      	mov	r0, r4
 80050c0:	0e82      	lsrs	r2, r0, #26
 80050c2:	4628      	mov	r0, r5
 80050c4:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80050c8:	4628      	mov	r0, r5
 80050ca:	1683      	asrs	r3, r0, #26
 80050cc:	e9c1 2300 	strd	r2, r3, [r1]
    h9 += carry8;
 80050d0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80050d4:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80050d8:	e9d2 0100 	ldrd	r0, r1, [r2]
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	1884      	adds	r4, r0, r2
 80050e2:	633c      	str	r4, [r7, #48]	; 0x30
 80050e4:	eb41 0303 	adc.w	r3, r1, r3
 80050e8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ea:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80050ee:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80050f2:	e9c2 3400 	strd	r3, r4, [r2]
    h8 -= carry8 << 26;
 80050f6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f04f 0000 	mov.w	r0, #0
 8005102:	f04f 0100 	mov.w	r1, #0
 8005106:	0699      	lsls	r1, r3, #26
 8005108:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 800510c:	0690      	lsls	r0, r2, #26
 800510e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	1a14      	subs	r4, r2, r0
 8005118:	62bc      	str	r4, [r7, #40]	; 0x28
 800511a:	eb63 0301 	sbc.w	r3, r3, r1
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005120:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005124:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8005128:	e9c2 3400 	strd	r3, r4, [r2]

    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 800512c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8005138:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800513c:	f143 0300 	adc.w	r3, r3, #0
 8005140:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005144:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8005154:	4620      	mov	r0, r4
 8005156:	0e42      	lsrs	r2, r0, #25
 8005158:	4628      	mov	r0, r5
 800515a:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 800515e:	4628      	mov	r0, r5
 8005160:	1643      	asrs	r3, r0, #25
 8005162:	e9c1 2300 	strd	r2, r3, [r1]
    h0 += carry9 * 19;
 8005166:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800516a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800516e:	4622      	mov	r2, r4
 8005170:	462b      	mov	r3, r5
 8005172:	f04f 0000 	mov.w	r0, #0
 8005176:	f04f 0100 	mov.w	r1, #0
 800517a:	00d9      	lsls	r1, r3, #3
 800517c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005180:	00d0      	lsls	r0, r2, #3
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	1912      	adds	r2, r2, r4
 8005188:	eb45 0303 	adc.w	r3, r5, r3
 800518c:	1891      	adds	r1, r2, r2
 800518e:	6239      	str	r1, [r7, #32]
 8005190:	415b      	adcs	r3, r3
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
 8005194:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005198:	1911      	adds	r1, r2, r4
 800519a:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800519e:	416b      	adcs	r3, r5
 80051a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051a4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80051b0:	4621      	mov	r1, r4
 80051b2:	1851      	adds	r1, r2, r1
 80051b4:	61b9      	str	r1, [r7, #24]
 80051b6:	4629      	mov	r1, r5
 80051b8:	eb43 0101 	adc.w	r1, r3, r1
 80051bc:	61f9      	str	r1, [r7, #28]
 80051be:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80051c2:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80051c6:	e9c2 3400 	strd	r3, r4, [r2]
    h9 -= carry9 << 25;
 80051ca:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80051ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	064b      	lsls	r3, r1, #25
 80051dc:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 80051e0:	0642      	lsls	r2, r0, #25
 80051e2:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80051e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051ea:	1a84      	subs	r4, r0, r2
 80051ec:	613c      	str	r4, [r7, #16]
 80051ee:	eb61 0303 	sbc.w	r3, r1, r3
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80051f8:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80051fc:	e9c2 3400 	strd	r3, r4, [r2]

    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8005200:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 800520c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8005210:	f143 0300 	adc.w	r3, r3, #0
 8005214:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005218:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8005228:	4620      	mov	r0, r4
 800522a:	0e82      	lsrs	r2, r0, #26
 800522c:	4628      	mov	r0, r5
 800522e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8005232:	4628      	mov	r0, r5
 8005234:	1683      	asrs	r3, r0, #26
 8005236:	e9c1 2300 	strd	r2, r3, [r1]
    h1 += carry0;
 800523a:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800523e:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8005242:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	1884      	adds	r4, r0, r2
 800524c:	60bc      	str	r4, [r7, #8]
 800524e:	eb41 0303 	adc.w	r3, r1, r3
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005258:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 800525c:	e9c2 3400 	strd	r3, r4, [r2]
    h0 -= carry0 << 26;
 8005260:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8005264:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	068b      	lsls	r3, r1, #26
 8005272:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8005276:	0682      	lsls	r2, r0, #26
 8005278:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 800527c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005280:	1a84      	subs	r4, r0, r2
 8005282:	603c      	str	r4, [r7, #0]
 8005284:	eb61 0303 	sbc.w	r3, r1, r3
 8005288:	607b      	str	r3, [r7, #4]
 800528a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800528e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8005292:	e9c2 3400 	strd	r3, r4, [r2]

    h[0] = (int32_t) h0;
 8005296:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 80052a4:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3304      	adds	r3, #4
 80052ac:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 80052b4:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 80052c4:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	330c      	adds	r3, #12
 80052cc:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 80052d4:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3310      	adds	r3, #16
 80052dc:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 80052e4:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3314      	adds	r3, #20
 80052ec:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 80052f4:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3318      	adds	r3, #24
 80052fc:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 8005304:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	331c      	adds	r3, #28
 800530c:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8005310:	6812      	ldr	r2, [r2, #0]
 8005312:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 8005314:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3320      	adds	r3, #32
 800531c:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 8005324:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3324      	adds	r3, #36	; 0x24
 800532c:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	601a      	str	r2, [r3, #0]
}
 8005334:	bf00      	nop
 8005336:	f607 074c 	addw	r7, r7, #2124	; 0x84c
 800533a:	46bd      	mov	sp, r7
 800533c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005340:	4770      	bx	lr

08005342 <fe_neg>:

Postconditions:
   |h| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.
*/

void fe_neg(fe h, const fe f) {
 8005342:	b480      	push	{r7}
 8005344:	b097      	sub	sp, #92	; 0x5c
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
    int32_t f0 = f[0];
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t f1 = f[1];
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t f2 = f[2];
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t f3 = f[3];
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t f4 = f[4];
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t f5 = f[5];
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t f6 = f[6];
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t f7 = f[7];
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t f8 = f[8];
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t f9 = f[9];
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h0 = -f0;
 8005388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800538a:	425b      	negs	r3, r3
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h1 = -f1;
 800538e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005390:	425b      	negs	r3, r3
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h2 = -f2;
 8005394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005396:	425b      	negs	r3, r3
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h3 = -f3;
 800539a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800539c:	425b      	negs	r3, r3
 800539e:	623b      	str	r3, [r7, #32]
    int32_t h4 = -f4;
 80053a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a2:	425b      	negs	r3, r3
 80053a4:	61fb      	str	r3, [r7, #28]
    int32_t h5 = -f5;
 80053a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a8:	425b      	negs	r3, r3
 80053aa:	61bb      	str	r3, [r7, #24]
    int32_t h6 = -f6;
 80053ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ae:	425b      	negs	r3, r3
 80053b0:	617b      	str	r3, [r7, #20]
    int32_t h7 = -f7;
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	425b      	negs	r3, r3
 80053b6:	613b      	str	r3, [r7, #16]
    int32_t h8 = -f8;
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ba:	425b      	negs	r3, r3
 80053bc:	60fb      	str	r3, [r7, #12]
    int32_t h9 = -f9;
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	425b      	negs	r3, r3
 80053c2:	60bb      	str	r3, [r7, #8]

    h[0] = h0;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053c8:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d0:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3308      	adds	r3, #8
 80053d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d8:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	330c      	adds	r3, #12
 80053de:	6a3a      	ldr	r2, [r7, #32]
 80053e0:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3310      	adds	r3, #16
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3314      	adds	r3, #20
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3318      	adds	r3, #24
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	331c      	adds	r3, #28
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3320      	adds	r3, #32
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3324      	adds	r3, #36	; 0x24
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	601a      	str	r2, [r3, #0]
}
 8005412:	bf00      	nop
 8005414:	375c      	adds	r7, #92	; 0x5c
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <fe_pow22523>:


void fe_pow22523(fe out, const fe z) {
 800541e:	b580      	push	{r7, lr}
 8005420:	b0a2      	sub	sp, #136	; 0x88
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
    fe t0;
    fe t1;
    fe t2;
    int i;
    fe_sq(t0, z);
 8005428:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f99b 	bl	800576a <fe_sq>

    for (i = 1; i < 1; ++i) {
 8005434:	2301      	movs	r3, #1
 8005436:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800543a:	e00c      	b.n	8005456 <fe_pow22523+0x38>
        fe_sq(t0, t0);
 800543c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005440:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f000 f98f 	bl	800576a <fe_sq>
    for (i = 1; i < 1; ++i) {
 800544c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005450:	3301      	adds	r3, #1
 8005452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005456:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800545a:	2b00      	cmp	r3, #0
 800545c:	ddee      	ble.n	800543c <fe_pow22523+0x1e>
    }

    fe_sq(t1, t0);
 800545e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005462:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005466:	4611      	mov	r1, r2
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f97e 	bl	800576a <fe_sq>

    for (i = 1; i < 2; ++i) {
 800546e:	2301      	movs	r3, #1
 8005470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005474:	e00c      	b.n	8005490 <fe_pow22523+0x72>
        fe_sq(t1, t1);
 8005476:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800547a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800547e:	4611      	mov	r1, r2
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f972 	bl	800576a <fe_sq>
    for (i = 1; i < 2; ++i) {
 8005486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800548a:	3301      	adds	r3, #1
 800548c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005494:	2b01      	cmp	r3, #1
 8005496:	ddee      	ble.n	8005476 <fe_pow22523+0x58>
    }

    fe_mul(t1, z, t1);
 8005498:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800549c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fd fa52 	bl	800294c <fe_mul>
    fe_mul(t0, t0, t1);
 80054a8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80054ac:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80054b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fd fa49 	bl	800294c <fe_mul>
    fe_sq(t0, t0);
 80054ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80054be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 f950 	bl	800576a <fe_sq>

    for (i = 1; i < 1; ++i) {
 80054ca:	2301      	movs	r3, #1
 80054cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054d0:	e00c      	b.n	80054ec <fe_pow22523+0xce>
        fe_sq(t0, t0);
 80054d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80054d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80054da:	4611      	mov	r1, r2
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 f944 	bl	800576a <fe_sq>
    for (i = 1; i < 1; ++i) {
 80054e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054e6:	3301      	adds	r3, #1
 80054e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	ddee      	ble.n	80054d2 <fe_pow22523+0xb4>
    }

    fe_mul(t0, t1, t0);
 80054f4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80054f8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80054fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005500:	4618      	mov	r0, r3
 8005502:	f7fd fa23 	bl	800294c <fe_mul>
    fe_sq(t1, t0);
 8005506:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800550a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f000 f92a 	bl	800576a <fe_sq>

    for (i = 1; i < 5; ++i) {
 8005516:	2301      	movs	r3, #1
 8005518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800551c:	e00c      	b.n	8005538 <fe_pow22523+0x11a>
        fe_sq(t1, t1);
 800551e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005522:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f91e 	bl	800576a <fe_sq>
    for (i = 1; i < 5; ++i) {
 800552e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005532:	3301      	adds	r3, #1
 8005534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800553c:	2b04      	cmp	r3, #4
 800553e:	ddee      	ble.n	800551e <fe_pow22523+0x100>
    }

    fe_mul(t0, t1, t0);
 8005540:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005544:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005548:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800554c:	4618      	mov	r0, r3
 800554e:	f7fd f9fd 	bl	800294c <fe_mul>
    fe_sq(t1, t0);
 8005552:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005556:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f904 	bl	800576a <fe_sq>

    for (i = 1; i < 10; ++i) {
 8005562:	2301      	movs	r3, #1
 8005564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005568:	e00c      	b.n	8005584 <fe_pow22523+0x166>
        fe_sq(t1, t1);
 800556a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800556e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005572:	4611      	mov	r1, r2
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f8f8 	bl	800576a <fe_sq>
    for (i = 1; i < 10; ++i) {
 800557a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800557e:	3301      	adds	r3, #1
 8005580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005588:	2b09      	cmp	r3, #9
 800558a:	ddee      	ble.n	800556a <fe_pow22523+0x14c>
    }

    fe_mul(t1, t1, t0);
 800558c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005590:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005598:	4618      	mov	r0, r3
 800559a:	f7fd f9d7 	bl	800294c <fe_mul>
    fe_sq(t2, t1);
 800559e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80055a2:	f107 030c 	add.w	r3, r7, #12
 80055a6:	4611      	mov	r1, r2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f8de 	bl	800576a <fe_sq>

    for (i = 1; i < 20; ++i) {
 80055ae:	2301      	movs	r3, #1
 80055b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055b4:	e00c      	b.n	80055d0 <fe_pow22523+0x1b2>
        fe_sq(t2, t2);
 80055b6:	f107 020c 	add.w	r2, r7, #12
 80055ba:	f107 030c 	add.w	r3, r7, #12
 80055be:	4611      	mov	r1, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 f8d2 	bl	800576a <fe_sq>
    for (i = 1; i < 20; ++i) {
 80055c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055ca:	3301      	adds	r3, #1
 80055cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055d4:	2b13      	cmp	r3, #19
 80055d6:	ddee      	ble.n	80055b6 <fe_pow22523+0x198>
    }

    fe_mul(t1, t2, t1);
 80055d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80055dc:	f107 010c 	add.w	r1, r7, #12
 80055e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fd f9b1 	bl	800294c <fe_mul>
    fe_sq(t1, t1);
 80055ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80055ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 f8b8 	bl	800576a <fe_sq>

    for (i = 1; i < 10; ++i) {
 80055fa:	2301      	movs	r3, #1
 80055fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005600:	e00c      	b.n	800561c <fe_pow22523+0x1fe>
        fe_sq(t1, t1);
 8005602:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005606:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800560a:	4611      	mov	r1, r2
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f8ac 	bl	800576a <fe_sq>
    for (i = 1; i < 10; ++i) {
 8005612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005616:	3301      	adds	r3, #1
 8005618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800561c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005620:	2b09      	cmp	r3, #9
 8005622:	ddee      	ble.n	8005602 <fe_pow22523+0x1e4>
    }

    fe_mul(t0, t1, t0);
 8005624:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005628:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800562c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005630:	4618      	mov	r0, r3
 8005632:	f7fd f98b 	bl	800294c <fe_mul>
    fe_sq(t1, t0);
 8005636:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800563a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800563e:	4611      	mov	r1, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f000 f892 	bl	800576a <fe_sq>

    for (i = 1; i < 50; ++i) {
 8005646:	2301      	movs	r3, #1
 8005648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800564c:	e00c      	b.n	8005668 <fe_pow22523+0x24a>
        fe_sq(t1, t1);
 800564e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005652:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005656:	4611      	mov	r1, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f000 f886 	bl	800576a <fe_sq>
    for (i = 1; i < 50; ++i) {
 800565e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005662:	3301      	adds	r3, #1
 8005664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800566c:	2b31      	cmp	r3, #49	; 0x31
 800566e:	ddee      	ble.n	800564e <fe_pow22523+0x230>
    }

    fe_mul(t1, t1, t0);
 8005670:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005674:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005678:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800567c:	4618      	mov	r0, r3
 800567e:	f7fd f965 	bl	800294c <fe_mul>
    fe_sq(t2, t1);
 8005682:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005686:	f107 030c 	add.w	r3, r7, #12
 800568a:	4611      	mov	r1, r2
 800568c:	4618      	mov	r0, r3
 800568e:	f000 f86c 	bl	800576a <fe_sq>

    for (i = 1; i < 100; ++i) {
 8005692:	2301      	movs	r3, #1
 8005694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005698:	e00c      	b.n	80056b4 <fe_pow22523+0x296>
        fe_sq(t2, t2);
 800569a:	f107 020c 	add.w	r2, r7, #12
 800569e:	f107 030c 	add.w	r3, r7, #12
 80056a2:	4611      	mov	r1, r2
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 f860 	bl	800576a <fe_sq>
    for (i = 1; i < 100; ++i) {
 80056aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056ae:	3301      	adds	r3, #1
 80056b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056b8:	2b63      	cmp	r3, #99	; 0x63
 80056ba:	ddee      	ble.n	800569a <fe_pow22523+0x27c>
    }

    fe_mul(t1, t2, t1);
 80056bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80056c0:	f107 010c 	add.w	r1, r7, #12
 80056c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fd f93f 	bl	800294c <fe_mul>
    fe_sq(t1, t1);
 80056ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80056d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056d6:	4611      	mov	r1, r2
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 f846 	bl	800576a <fe_sq>

    for (i = 1; i < 50; ++i) {
 80056de:	2301      	movs	r3, #1
 80056e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056e4:	e00c      	b.n	8005700 <fe_pow22523+0x2e2>
        fe_sq(t1, t1);
 80056e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80056ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056ee:	4611      	mov	r1, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 f83a 	bl	800576a <fe_sq>
    for (i = 1; i < 50; ++i) {
 80056f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056fa:	3301      	adds	r3, #1
 80056fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005704:	2b31      	cmp	r3, #49	; 0x31
 8005706:	ddee      	ble.n	80056e6 <fe_pow22523+0x2c8>
    }

    fe_mul(t0, t1, t0);
 8005708:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800570c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8005710:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005714:	4618      	mov	r0, r3
 8005716:	f7fd f919 	bl	800294c <fe_mul>
    fe_sq(t0, t0);
 800571a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800571e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005722:	4611      	mov	r1, r2
 8005724:	4618      	mov	r0, r3
 8005726:	f000 f820 	bl	800576a <fe_sq>

    for (i = 1; i < 2; ++i) {
 800572a:	2301      	movs	r3, #1
 800572c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005730:	e00c      	b.n	800574c <fe_pow22523+0x32e>
        fe_sq(t0, t0);
 8005732:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005736:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f000 f814 	bl	800576a <fe_sq>
    for (i = 1; i < 2; ++i) {
 8005742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005746:	3301      	adds	r3, #1
 8005748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800574c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005750:	2b01      	cmp	r3, #1
 8005752:	ddee      	ble.n	8005732 <fe_pow22523+0x314>
    }

    fe_mul(out, t0, z);
 8005754:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7fd f8f5 	bl	800294c <fe_mul>
    return;
 8005762:	bf00      	nop
}
 8005764:	3788      	adds	r7, #136	; 0x88
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <fe_sq>:

/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq(fe h, const fe f) {
 800576a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800576e:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
 8005772:	af00      	add	r7, sp, #0
 8005774:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8005778:	6018      	str	r0, [r3, #0]
 800577a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800577e:	6019      	str	r1, [r3, #0]
    int32_t f0 = f[0];
 8005780:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
    int32_t f1 = f[1];
 800578c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
    int32_t f2 = f[2];
 8005798:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    int32_t f3 = f[3];
 80057a4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    int32_t f4 = f[4];
 80057b0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    int32_t f5 = f[5];
 80057bc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    int32_t f6 = f[6];
 80057c8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    int32_t f7 = f[7];
 80057d4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
    int32_t f8 = f[8];
 80057e0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    int32_t f9 = f[9];
 80057ec:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    int32_t f0_2 = 2 * f0;
 80057f8:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
    int32_t f1_2 = 2 * f1;
 8005802:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
    int32_t f2_2 = 2 * f2;
 800580c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    int32_t f3_2 = 2 * f3;
 8005816:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
    int32_t f4_2 = 2 * f4;
 8005820:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    int32_t f5_2 = 2 * f5;
 800582a:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    int32_t f6_2 = 2 * f6;
 8005834:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
    int32_t f7_2 = 2 * f7;
 800583e:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    int32_t f5_38 = 38 * f5; /* 1.959375*2^30 */
 8005848:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 800584c:	2326      	movs	r3, #38	; 0x26
 800584e:	fb03 f302 	mul.w	r3, r3, r2
 8005852:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
    int32_t f6_19 = 19 * f6; /* 1.959375*2^30 */
 8005856:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 800585a:	4613      	mov	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4413      	add	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
    int32_t f7_38 = 38 * f7; /* 1.959375*2^30 */
 8005868:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800586c:	2326      	movs	r3, #38	; 0x26
 800586e:	fb03 f302 	mul.w	r3, r3, r2
 8005872:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
    int32_t f8_19 = 19 * f8; /* 1.959375*2^30 */
 8005876:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800587a:	4613      	mov	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	4413      	add	r3, r2
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	4413      	add	r3, r2
 8005884:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
    int32_t f9_38 = 38 * f9; /* 1.959375*2^30 */
 8005888:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 800588c:	2326      	movs	r3, #38	; 0x26
 800588e:	fb03 f302 	mul.w	r3, r3, r2
 8005892:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
    int64_t f0f0    = f0   * (int64_t) f0;
 8005896:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800589a:	4618      	mov	r0, r3
 800589c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80058a0:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80058a4:	461a      	mov	r2, r3
 80058a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80058aa:	fb02 f501 	mul.w	r5, r2, r1
 80058ae:	fb00 f403 	mul.w	r4, r0, r3
 80058b2:	442c      	add	r4, r5
 80058b4:	fba0 2302 	umull	r2, r3, r0, r2
 80058b8:	18e1      	adds	r1, r4, r3
 80058ba:	460b      	mov	r3, r1
 80058bc:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80058c0:	e9c1 2300 	strd	r2, r3, [r1]
 80058c4:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80058c8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f1_2  = f0_2 * (int64_t) f1;
 80058cc:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80058d0:	4618      	mov	r0, r3
 80058d2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80058d6:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80058da:	461a      	mov	r2, r3
 80058dc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80058e0:	fb02 f501 	mul.w	r5, r2, r1
 80058e4:	fb00 f403 	mul.w	r4, r0, r3
 80058e8:	442c      	add	r4, r5
 80058ea:	fba0 2302 	umull	r2, r3, r0, r2
 80058ee:	18e1      	adds	r1, r4, r3
 80058f0:	460b      	mov	r3, r1
 80058f2:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80058f6:	e9c1 2300 	strd	r2, r3, [r1]
 80058fa:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80058fe:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f2_2  = f0_2 * (int64_t) f2;
 8005902:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005906:	4618      	mov	r0, r3
 8005908:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800590c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8005910:	461a      	mov	r2, r3
 8005912:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005916:	fb02 f501 	mul.w	r5, r2, r1
 800591a:	fb00 f403 	mul.w	r4, r0, r3
 800591e:	442c      	add	r4, r5
 8005920:	fba0 2302 	umull	r2, r3, r0, r2
 8005924:	18e1      	adds	r1, r4, r3
 8005926:	460b      	mov	r3, r1
 8005928:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 800592c:	e9c1 2300 	strd	r2, r3, [r1]
 8005930:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8005934:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f3_2  = f0_2 * (int64_t) f3;
 8005938:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800593c:	4618      	mov	r0, r3
 800593e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005942:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8005946:	461a      	mov	r2, r3
 8005948:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800594c:	fb02 f501 	mul.w	r5, r2, r1
 8005950:	fb00 f403 	mul.w	r4, r0, r3
 8005954:	442c      	add	r4, r5
 8005956:	fba0 2302 	umull	r2, r3, r0, r2
 800595a:	18e1      	adds	r1, r4, r3
 800595c:	460b      	mov	r3, r1
 800595e:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8005962:	e9c1 2300 	strd	r2, r3, [r1]
 8005966:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 800596a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f4_2  = f0_2 * (int64_t) f4;
 800596e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005972:	4618      	mov	r0, r3
 8005974:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005978:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800597c:	461a      	mov	r2, r3
 800597e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005982:	fb02 f501 	mul.w	r5, r2, r1
 8005986:	fb00 f403 	mul.w	r4, r0, r3
 800598a:	442c      	add	r4, r5
 800598c:	fba0 2302 	umull	r2, r3, r0, r2
 8005990:	18e1      	adds	r1, r4, r3
 8005992:	460b      	mov	r3, r1
 8005994:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8005998:	e9c1 2300 	strd	r2, r3, [r1]
 800599c:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 80059a0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f5_2  = f0_2 * (int64_t) f5;
 80059a4:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80059a8:	4618      	mov	r0, r3
 80059aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80059ae:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80059b2:	461a      	mov	r2, r3
 80059b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80059b8:	fb02 f501 	mul.w	r5, r2, r1
 80059bc:	fb00 f403 	mul.w	r4, r0, r3
 80059c0:	442c      	add	r4, r5
 80059c2:	fba0 2302 	umull	r2, r3, r0, r2
 80059c6:	18e1      	adds	r1, r4, r3
 80059c8:	460b      	mov	r3, r1
 80059ca:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80059ce:	e9c1 2300 	strd	r2, r3, [r1]
 80059d2:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80059d6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f6_2  = f0_2 * (int64_t) f6;
 80059da:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80059de:	4618      	mov	r0, r3
 80059e0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80059e4:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80059e8:	461a      	mov	r2, r3
 80059ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80059ee:	fb02 f501 	mul.w	r5, r2, r1
 80059f2:	fb00 f403 	mul.w	r4, r0, r3
 80059f6:	442c      	add	r4, r5
 80059f8:	fba0 2302 	umull	r2, r3, r0, r2
 80059fc:	18e1      	adds	r1, r4, r3
 80059fe:	460b      	mov	r3, r1
 8005a00:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8005a04:	e9c1 2300 	strd	r2, r3, [r1]
 8005a08:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8005a0c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f7_2  = f0_2 * (int64_t) f7;
 8005a10:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005a14:	4618      	mov	r0, r3
 8005a16:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005a1a:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8005a1e:	461a      	mov	r2, r3
 8005a20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005a24:	fb02 f501 	mul.w	r5, r2, r1
 8005a28:	fb00 f403 	mul.w	r4, r0, r3
 8005a2c:	442c      	add	r4, r5
 8005a2e:	fba0 2302 	umull	r2, r3, r0, r2
 8005a32:	18e1      	adds	r1, r4, r3
 8005a34:	460b      	mov	r3, r1
 8005a36:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8005a3a:	e9c1 2300 	strd	r2, r3, [r1]
 8005a3e:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8005a42:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f8_2  = f0_2 * (int64_t) f8;
 8005a46:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005a50:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8005a54:	461a      	mov	r2, r3
 8005a56:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005a5a:	fb02 f501 	mul.w	r5, r2, r1
 8005a5e:	fb00 f403 	mul.w	r4, r0, r3
 8005a62:	442c      	add	r4, r5
 8005a64:	fba0 2302 	umull	r2, r3, r0, r2
 8005a68:	18e1      	adds	r1, r4, r3
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8005a70:	e9c1 2300 	strd	r2, r3, [r1]
 8005a74:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8005a78:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f9_2  = f0_2 * (int64_t) f9;
 8005a7c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005a80:	4618      	mov	r0, r3
 8005a82:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005a86:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005a90:	fb02 f501 	mul.w	r5, r2, r1
 8005a94:	fb00 f403 	mul.w	r4, r0, r3
 8005a98:	442c      	add	r4, r5
 8005a9a:	fba0 2302 	umull	r2, r3, r0, r2
 8005a9e:	18e1      	adds	r1, r4, r3
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8005aa6:	e9c1 2300 	strd	r2, r3, [r1]
 8005aaa:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8005aae:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f1_2  = f1_2 * (int64_t) f1;
 8005ab2:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005abc:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005ac6:	fb02 f501 	mul.w	r5, r2, r1
 8005aca:	fb00 f403 	mul.w	r4, r0, r3
 8005ace:	442c      	add	r4, r5
 8005ad0:	fba0 2302 	umull	r2, r3, r0, r2
 8005ad4:	18e1      	adds	r1, r4, r3
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8005adc:	e9c1 2300 	strd	r2, r3, [r1]
 8005ae0:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8005ae4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f2_2  = f1_2 * (int64_t) f2;
 8005ae8:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005aec:	4618      	mov	r0, r3
 8005aee:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005af2:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8005af6:	461a      	mov	r2, r3
 8005af8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005afc:	fb02 f501 	mul.w	r5, r2, r1
 8005b00:	fb00 f403 	mul.w	r4, r0, r3
 8005b04:	442c      	add	r4, r5
 8005b06:	fba0 2302 	umull	r2, r3, r0, r2
 8005b0a:	18e1      	adds	r1, r4, r3
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8005b12:	e9c1 2300 	strd	r2, r3, [r1]
 8005b16:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8005b1a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f3_4  = f1_2 * (int64_t) f3_2;
 8005b1e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005b22:	4618      	mov	r0, r3
 8005b24:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005b28:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005b32:	fb02 f501 	mul.w	r5, r2, r1
 8005b36:	fb00 f403 	mul.w	r4, r0, r3
 8005b3a:	442c      	add	r4, r5
 8005b3c:	fba0 2302 	umull	r2, r3, r0, r2
 8005b40:	18e1      	adds	r1, r4, r3
 8005b42:	460b      	mov	r3, r1
 8005b44:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8005b48:	e9c1 2300 	strd	r2, r3, [r1]
 8005b4c:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8005b50:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f4_2  = f1_2 * (int64_t) f4;
 8005b54:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005b58:	4618      	mov	r0, r3
 8005b5a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005b5e:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005b62:	461a      	mov	r2, r3
 8005b64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005b68:	fb02 f501 	mul.w	r5, r2, r1
 8005b6c:	fb00 f403 	mul.w	r4, r0, r3
 8005b70:	442c      	add	r4, r5
 8005b72:	fba0 2302 	umull	r2, r3, r0, r2
 8005b76:	18e1      	adds	r1, r4, r3
 8005b78:	460b      	mov	r3, r1
 8005b7a:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8005b7e:	e9c1 2300 	strd	r2, r3, [r1]
 8005b82:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8005b86:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f5_4  = f1_2 * (int64_t) f5_2;
 8005b8a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005b8e:	4618      	mov	r0, r3
 8005b90:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005b94:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8005b98:	461a      	mov	r2, r3
 8005b9a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005b9e:	fb02 f501 	mul.w	r5, r2, r1
 8005ba2:	fb00 f403 	mul.w	r4, r0, r3
 8005ba6:	442c      	add	r4, r5
 8005ba8:	fba0 2302 	umull	r2, r3, r0, r2
 8005bac:	18e1      	adds	r1, r4, r3
 8005bae:	460b      	mov	r3, r1
 8005bb0:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8005bb4:	e9c1 2300 	strd	r2, r3, [r1]
 8005bb8:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8005bbc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f6_2  = f1_2 * (int64_t) f6;
 8005bc0:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005bca:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8005bce:	461a      	mov	r2, r3
 8005bd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005bd4:	fb02 f501 	mul.w	r5, r2, r1
 8005bd8:	fb00 f403 	mul.w	r4, r0, r3
 8005bdc:	442c      	add	r4, r5
 8005bde:	fba0 2302 	umull	r2, r3, r0, r2
 8005be2:	18e1      	adds	r1, r4, r3
 8005be4:	460b      	mov	r3, r1
 8005be6:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8005bea:	e9c1 2300 	strd	r2, r3, [r1]
 8005bee:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8005bf2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f7_4  = f1_2 * (int64_t) f7_2;
 8005bf6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005c00:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8005c04:	461a      	mov	r2, r3
 8005c06:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005c0a:	fb02 f501 	mul.w	r5, r2, r1
 8005c0e:	fb00 f403 	mul.w	r4, r0, r3
 8005c12:	442c      	add	r4, r5
 8005c14:	fba0 2302 	umull	r2, r3, r0, r2
 8005c18:	18e1      	adds	r1, r4, r3
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8005c20:	e9c1 2300 	strd	r2, r3, [r1]
 8005c24:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8005c28:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f8_2  = f1_2 * (int64_t) f8;
 8005c2c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005c30:	4618      	mov	r0, r3
 8005c32:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005c36:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005c40:	fb02 f501 	mul.w	r5, r2, r1
 8005c44:	fb00 f403 	mul.w	r4, r0, r3
 8005c48:	442c      	add	r4, r5
 8005c4a:	fba0 2302 	umull	r2, r3, r0, r2
 8005c4e:	18e1      	adds	r1, r4, r3
 8005c50:	460b      	mov	r3, r1
 8005c52:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8005c56:	e9c1 2300 	strd	r2, r3, [r1]
 8005c5a:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8005c5e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f9_76 = f1_2 * (int64_t) f9_38;
 8005c62:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8005c66:	4618      	mov	r0, r3
 8005c68:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005c6c:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8005c70:	461a      	mov	r2, r3
 8005c72:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005c76:	fb02 f501 	mul.w	r5, r2, r1
 8005c7a:	fb00 f403 	mul.w	r4, r0, r3
 8005c7e:	442c      	add	r4, r5
 8005c80:	fba0 2302 	umull	r2, r3, r0, r2
 8005c84:	18e1      	adds	r1, r4, r3
 8005c86:	460b      	mov	r3, r1
 8005c88:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8005c8c:	e9c1 2300 	strd	r2, r3, [r1]
 8005c90:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8005c94:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f2    = f2   * (int64_t) f2;
 8005c98:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005ca2:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005cac:	fb02 f501 	mul.w	r5, r2, r1
 8005cb0:	fb00 f403 	mul.w	r4, r0, r3
 8005cb4:	442c      	add	r4, r5
 8005cb6:	fba0 2302 	umull	r2, r3, r0, r2
 8005cba:	18e1      	adds	r1, r4, r3
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8005cc2:	e9c1 2300 	strd	r2, r3, [r1]
 8005cc6:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8005cca:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f3_2  = f2_2 * (int64_t) f3;
 8005cce:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005cd8:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8005cdc:	461a      	mov	r2, r3
 8005cde:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005ce2:	fb02 f501 	mul.w	r5, r2, r1
 8005ce6:	fb00 f403 	mul.w	r4, r0, r3
 8005cea:	442c      	add	r4, r5
 8005cec:	fba0 2302 	umull	r2, r3, r0, r2
 8005cf0:	18e1      	adds	r1, r4, r3
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8005cf8:	e9c1 2300 	strd	r2, r3, [r1]
 8005cfc:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8005d00:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f4_2  = f2_2 * (int64_t) f4;
 8005d04:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005d08:	4618      	mov	r0, r3
 8005d0a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005d0e:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005d12:	461a      	mov	r2, r3
 8005d14:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005d18:	fb02 f501 	mul.w	r5, r2, r1
 8005d1c:	fb00 f403 	mul.w	r4, r0, r3
 8005d20:	442c      	add	r4, r5
 8005d22:	fba0 2302 	umull	r2, r3, r0, r2
 8005d26:	18e1      	adds	r1, r4, r3
 8005d28:	460b      	mov	r3, r1
 8005d2a:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8005d2e:	e9c1 2300 	strd	r2, r3, [r1]
 8005d32:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8005d36:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f5_2  = f2_2 * (int64_t) f5;
 8005d3a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005d3e:	4618      	mov	r0, r3
 8005d40:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005d44:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8005d48:	461a      	mov	r2, r3
 8005d4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005d4e:	fb02 f501 	mul.w	r5, r2, r1
 8005d52:	fb00 f403 	mul.w	r4, r0, r3
 8005d56:	442c      	add	r4, r5
 8005d58:	fba0 2302 	umull	r2, r3, r0, r2
 8005d5c:	18e1      	adds	r1, r4, r3
 8005d5e:	460b      	mov	r3, r1
 8005d60:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8005d64:	e9c1 2300 	strd	r2, r3, [r1]
 8005d68:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8005d6c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f6_2  = f2_2 * (int64_t) f6;
 8005d70:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005d74:	4618      	mov	r0, r3
 8005d76:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005d7a:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8005d7e:	461a      	mov	r2, r3
 8005d80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005d84:	fb02 f501 	mul.w	r5, r2, r1
 8005d88:	fb00 f403 	mul.w	r4, r0, r3
 8005d8c:	442c      	add	r4, r5
 8005d8e:	fba0 2302 	umull	r2, r3, r0, r2
 8005d92:	18e1      	adds	r1, r4, r3
 8005d94:	460b      	mov	r3, r1
 8005d96:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8005d9a:	e9c1 2300 	strd	r2, r3, [r1]
 8005d9e:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8005da2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f7_2  = f2_2 * (int64_t) f7;
 8005da6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005daa:	4618      	mov	r0, r3
 8005dac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005db0:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8005db4:	461a      	mov	r2, r3
 8005db6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005dba:	fb02 f501 	mul.w	r5, r2, r1
 8005dbe:	fb00 f403 	mul.w	r4, r0, r3
 8005dc2:	442c      	add	r4, r5
 8005dc4:	fba0 2302 	umull	r2, r3, r0, r2
 8005dc8:	18e1      	adds	r1, r4, r3
 8005dca:	460b      	mov	r3, r1
 8005dcc:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8005dd0:	e9c1 2300 	strd	r2, r3, [r1]
 8005dd4:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8005dd8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f8_38 = f2_2 * (int64_t) f8_19;
 8005ddc:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005de0:	4618      	mov	r0, r3
 8005de2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005de6:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8005dea:	461a      	mov	r2, r3
 8005dec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005df0:	fb02 f501 	mul.w	r5, r2, r1
 8005df4:	fb00 f403 	mul.w	r4, r0, r3
 8005df8:	442c      	add	r4, r5
 8005dfa:	fba0 2302 	umull	r2, r3, r0, r2
 8005dfe:	18e1      	adds	r1, r4, r3
 8005e00:	460b      	mov	r3, r1
 8005e02:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8005e06:	e9c1 2300 	strd	r2, r3, [r1]
 8005e0a:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8005e0e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f9_38 = f2   * (int64_t) f9_38;
 8005e12:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8005e16:	4618      	mov	r0, r3
 8005e18:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005e1c:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8005e20:	461a      	mov	r2, r3
 8005e22:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005e26:	fb02 f501 	mul.w	r5, r2, r1
 8005e2a:	fb00 f403 	mul.w	r4, r0, r3
 8005e2e:	442c      	add	r4, r5
 8005e30:	fba0 2302 	umull	r2, r3, r0, r2
 8005e34:	18e1      	adds	r1, r4, r3
 8005e36:	460b      	mov	r3, r1
 8005e38:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8005e3c:	e9c1 2300 	strd	r2, r3, [r1]
 8005e40:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8005e44:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f3_2  = f3_2 * (int64_t) f3;
 8005e48:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005e52:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8005e56:	461a      	mov	r2, r3
 8005e58:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005e5c:	fb02 f501 	mul.w	r5, r2, r1
 8005e60:	fb00 f403 	mul.w	r4, r0, r3
 8005e64:	442c      	add	r4, r5
 8005e66:	fba0 2302 	umull	r2, r3, r0, r2
 8005e6a:	18e1      	adds	r1, r4, r3
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8005e72:	e9c1 2300 	strd	r2, r3, [r1]
 8005e76:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8005e7a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f4_2  = f3_2 * (int64_t) f4;
 8005e7e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005e82:	4618      	mov	r0, r3
 8005e84:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005e88:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005e92:	fb02 f501 	mul.w	r5, r2, r1
 8005e96:	fb00 f403 	mul.w	r4, r0, r3
 8005e9a:	442c      	add	r4, r5
 8005e9c:	fba0 2302 	umull	r2, r3, r0, r2
 8005ea0:	18e1      	adds	r1, r4, r3
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8005ea8:	e9c1 2300 	strd	r2, r3, [r1]
 8005eac:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8005eb0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f5_4  = f3_2 * (int64_t) f5_2;
 8005eb4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005eb8:	4618      	mov	r0, r3
 8005eba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005ebe:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005ec8:	fb02 f501 	mul.w	r5, r2, r1
 8005ecc:	fb00 f403 	mul.w	r4, r0, r3
 8005ed0:	442c      	add	r4, r5
 8005ed2:	fba0 2302 	umull	r2, r3, r0, r2
 8005ed6:	18e1      	adds	r1, r4, r3
 8005ed8:	460b      	mov	r3, r1
 8005eda:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
 8005ede:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
    int64_t f3f6_2  = f3_2 * (int64_t) f6;
 8005ee2:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005eec:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005ef6:	fb02 f501 	mul.w	r5, r2, r1
 8005efa:	fb00 f403 	mul.w	r4, r0, r3
 8005efe:	442c      	add	r4, r5
 8005f00:	fba0 2302 	umull	r2, r3, r0, r2
 8005f04:	18e1      	adds	r1, r4, r3
 8005f06:	460b      	mov	r3, r1
 8005f08:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
 8005f0c:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    int64_t f3f7_76 = f3_2 * (int64_t) f7_38;
 8005f10:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005f14:	4618      	mov	r0, r3
 8005f16:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005f1a:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8005f1e:	461a      	mov	r2, r3
 8005f20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005f24:	fb02 f501 	mul.w	r5, r2, r1
 8005f28:	fb00 f403 	mul.w	r4, r0, r3
 8005f2c:	442c      	add	r4, r5
 8005f2e:	fba0 2302 	umull	r2, r3, r0, r2
 8005f32:	18e1      	adds	r1, r4, r3
 8005f34:	460b      	mov	r3, r1
 8005f36:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
 8005f3a:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
    int64_t f3f8_38 = f3_2 * (int64_t) f8_19;
 8005f3e:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005f42:	4618      	mov	r0, r3
 8005f44:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005f48:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005f52:	fb02 f501 	mul.w	r5, r2, r1
 8005f56:	fb00 f403 	mul.w	r4, r0, r3
 8005f5a:	442c      	add	r4, r5
 8005f5c:	fba0 2302 	umull	r2, r3, r0, r2
 8005f60:	18e1      	adds	r1, r4, r3
 8005f62:	460b      	mov	r3, r1
 8005f64:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
 8005f68:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
    int64_t f3f9_76 = f3_2 * (int64_t) f9_38;
 8005f6c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005f70:	4618      	mov	r0, r3
 8005f72:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005f76:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005f80:	fb02 f501 	mul.w	r5, r2, r1
 8005f84:	fb00 f403 	mul.w	r4, r0, r3
 8005f88:	442c      	add	r4, r5
 8005f8a:	fba0 2302 	umull	r2, r3, r0, r2
 8005f8e:	18e1      	adds	r1, r4, r3
 8005f90:	460b      	mov	r3, r1
 8005f92:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
 8005f96:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
    int64_t f4f4    = f4   * (int64_t) f4;
 8005f9a:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005fa4:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8005fa8:	461a      	mov	r2, r3
 8005faa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005fae:	fb02 f501 	mul.w	r5, r2, r1
 8005fb2:	fb00 f403 	mul.w	r4, r0, r3
 8005fb6:	442c      	add	r4, r5
 8005fb8:	fba0 2302 	umull	r2, r3, r0, r2
 8005fbc:	18e1      	adds	r1, r4, r3
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
 8005fc4:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    int64_t f4f5_2  = f4_2 * (int64_t) f5;
 8005fc8:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8005fcc:	4618      	mov	r0, r3
 8005fce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8005fd2:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005fdc:	fb02 f501 	mul.w	r5, r2, r1
 8005fe0:	fb00 f403 	mul.w	r4, r0, r3
 8005fe4:	442c      	add	r4, r5
 8005fe6:	fba0 2302 	umull	r2, r3, r0, r2
 8005fea:	18e1      	adds	r1, r4, r3
 8005fec:	460b      	mov	r3, r1
 8005fee:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
 8005ff2:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
    int64_t f4f6_38 = f4_2 * (int64_t) f6_19;
 8005ff6:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006000:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8006004:	461a      	mov	r2, r3
 8006006:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800600a:	fb02 f501 	mul.w	r5, r2, r1
 800600e:	fb00 f403 	mul.w	r4, r0, r3
 8006012:	442c      	add	r4, r5
 8006014:	fba0 2302 	umull	r2, r3, r0, r2
 8006018:	18e1      	adds	r1, r4, r3
 800601a:	460b      	mov	r3, r1
 800601c:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
 8006020:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
    int64_t f4f7_38 = f4   * (int64_t) f7_38;
 8006024:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8006028:	4618      	mov	r0, r3
 800602a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800602e:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8006032:	461a      	mov	r2, r3
 8006034:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006038:	fb02 f501 	mul.w	r5, r2, r1
 800603c:	fb00 f403 	mul.w	r4, r0, r3
 8006040:	442c      	add	r4, r5
 8006042:	fba0 2302 	umull	r2, r3, r0, r2
 8006046:	18e1      	adds	r1, r4, r3
 8006048:	460b      	mov	r3, r1
 800604a:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
 800604e:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    int64_t f4f8_38 = f4_2 * (int64_t) f8_19;
 8006052:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8006056:	4618      	mov	r0, r3
 8006058:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800605c:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8006060:	461a      	mov	r2, r3
 8006062:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006066:	fb02 f501 	mul.w	r5, r2, r1
 800606a:	fb00 f403 	mul.w	r4, r0, r3
 800606e:	442c      	add	r4, r5
 8006070:	fba0 2302 	umull	r2, r3, r0, r2
 8006074:	18e1      	adds	r1, r4, r3
 8006076:	460b      	mov	r3, r1
 8006078:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
 800607c:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
    int64_t f4f9_38 = f4   * (int64_t) f9_38;
 8006080:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8006084:	4618      	mov	r0, r3
 8006086:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800608a:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800608e:	461a      	mov	r2, r3
 8006090:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006094:	fb02 f501 	mul.w	r5, r2, r1
 8006098:	fb00 f403 	mul.w	r4, r0, r3
 800609c:	442c      	add	r4, r5
 800609e:	fba0 2302 	umull	r2, r3, r0, r2
 80060a2:	18e1      	adds	r1, r4, r3
 80060a4:	460b      	mov	r3, r1
 80060a6:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
 80060aa:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
    int64_t f5f5_38 = f5   * (int64_t) f5_38;
 80060ae:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80060b2:	4618      	mov	r0, r3
 80060b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80060b8:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80060bc:	461a      	mov	r2, r3
 80060be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80060c2:	fb02 f501 	mul.w	r5, r2, r1
 80060c6:	fb00 f403 	mul.w	r4, r0, r3
 80060ca:	442c      	add	r4, r5
 80060cc:	fba0 2302 	umull	r2, r3, r0, r2
 80060d0:	18e1      	adds	r1, r4, r3
 80060d2:	460b      	mov	r3, r1
 80060d4:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
 80060d8:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
    int64_t f5f6_38 = f5_2 * (int64_t) f6_19;
 80060dc:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 80060e0:	4618      	mov	r0, r3
 80060e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80060e6:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 80060ea:	461a      	mov	r2, r3
 80060ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80060f0:	fb02 f501 	mul.w	r5, r2, r1
 80060f4:	fb00 f403 	mul.w	r4, r0, r3
 80060f8:	442c      	add	r4, r5
 80060fa:	fba0 2302 	umull	r2, r3, r0, r2
 80060fe:	18e1      	adds	r1, r4, r3
 8006100:	460b      	mov	r3, r1
 8006102:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
 8006106:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
    int64_t f5f7_76 = f5_2 * (int64_t) f7_38;
 800610a:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 800610e:	4618      	mov	r0, r3
 8006110:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006114:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8006118:	461a      	mov	r2, r3
 800611a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800611e:	fb02 f501 	mul.w	r5, r2, r1
 8006122:	fb00 f403 	mul.w	r4, r0, r3
 8006126:	442c      	add	r4, r5
 8006128:	fba0 2302 	umull	r2, r3, r0, r2
 800612c:	18e1      	adds	r1, r4, r3
 800612e:	460b      	mov	r3, r1
 8006130:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
 8006134:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
    int64_t f5f8_38 = f5_2 * (int64_t) f8_19;
 8006138:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 800613c:	4618      	mov	r0, r3
 800613e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006142:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8006146:	461a      	mov	r2, r3
 8006148:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800614c:	fb02 f501 	mul.w	r5, r2, r1
 8006150:	fb00 f403 	mul.w	r4, r0, r3
 8006154:	442c      	add	r4, r5
 8006156:	fba0 2302 	umull	r2, r3, r0, r2
 800615a:	18e1      	adds	r1, r4, r3
 800615c:	460b      	mov	r3, r1
 800615e:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
 8006162:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    int64_t f5f9_76 = f5_2 * (int64_t) f9_38;
 8006166:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 800616a:	4618      	mov	r0, r3
 800616c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006170:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8006174:	461a      	mov	r2, r3
 8006176:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800617a:	fb02 f501 	mul.w	r5, r2, r1
 800617e:	fb00 f403 	mul.w	r4, r0, r3
 8006182:	442c      	add	r4, r5
 8006184:	fba0 2302 	umull	r2, r3, r0, r2
 8006188:	18e1      	adds	r1, r4, r3
 800618a:	460b      	mov	r3, r1
 800618c:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
 8006190:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
    int64_t f6f6_19 = f6   * (int64_t) f6_19;
 8006194:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8006198:	4618      	mov	r0, r3
 800619a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800619e:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 80061a2:	461a      	mov	r2, r3
 80061a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80061a8:	fb02 f501 	mul.w	r5, r2, r1
 80061ac:	fb00 f403 	mul.w	r4, r0, r3
 80061b0:	442c      	add	r4, r5
 80061b2:	fba0 2302 	umull	r2, r3, r0, r2
 80061b6:	18e1      	adds	r1, r4, r3
 80061b8:	460b      	mov	r3, r1
 80061ba:	e9c7 23de 	strd	r2, r3, [r7, #888]	; 0x378
 80061be:	e9c7 23de 	strd	r2, r3, [r7, #888]	; 0x378
    int64_t f6f7_38 = f6   * (int64_t) f7_38;
 80061c2:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80061c6:	4618      	mov	r0, r3
 80061c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80061cc:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 80061d0:	461a      	mov	r2, r3
 80061d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80061d6:	fb02 f501 	mul.w	r5, r2, r1
 80061da:	fb00 f403 	mul.w	r4, r0, r3
 80061de:	442c      	add	r4, r5
 80061e0:	fba0 2302 	umull	r2, r3, r0, r2
 80061e4:	18e1      	adds	r1, r4, r3
 80061e6:	460b      	mov	r3, r1
 80061e8:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
 80061ec:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
    int64_t f6f8_38 = f6_2 * (int64_t) f8_19;
 80061f0:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 80061f4:	4618      	mov	r0, r3
 80061f6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80061fa:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 80061fe:	461a      	mov	r2, r3
 8006200:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006204:	fb02 f501 	mul.w	r5, r2, r1
 8006208:	fb00 f403 	mul.w	r4, r0, r3
 800620c:	442c      	add	r4, r5
 800620e:	fba0 2302 	umull	r2, r3, r0, r2
 8006212:	18e1      	adds	r1, r4, r3
 8006214:	460b      	mov	r3, r1
 8006216:	e9c7 23da 	strd	r2, r3, [r7, #872]	; 0x368
 800621a:	e9c7 23da 	strd	r2, r3, [r7, #872]	; 0x368
    int64_t f6f9_38 = f6   * (int64_t) f9_38;
 800621e:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8006222:	4618      	mov	r0, r3
 8006224:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006228:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800622c:	461a      	mov	r2, r3
 800622e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006232:	fb02 f501 	mul.w	r5, r2, r1
 8006236:	fb00 f403 	mul.w	r4, r0, r3
 800623a:	442c      	add	r4, r5
 800623c:	fba0 2302 	umull	r2, r3, r0, r2
 8006240:	18e1      	adds	r1, r4, r3
 8006242:	460b      	mov	r3, r1
 8006244:	e9c7 23d8 	strd	r2, r3, [r7, #864]	; 0x360
 8006248:	e9c7 23d8 	strd	r2, r3, [r7, #864]	; 0x360
    int64_t f7f7_38 = f7   * (int64_t) f7_38;
 800624c:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8006250:	4618      	mov	r0, r3
 8006252:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006256:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 800625a:	461a      	mov	r2, r3
 800625c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006260:	fb02 f501 	mul.w	r5, r2, r1
 8006264:	fb00 f403 	mul.w	r4, r0, r3
 8006268:	442c      	add	r4, r5
 800626a:	fba0 2302 	umull	r2, r3, r0, r2
 800626e:	18e1      	adds	r1, r4, r3
 8006270:	460b      	mov	r3, r1
 8006272:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
 8006276:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
    int64_t f7f8_38 = f7_2 * (int64_t) f8_19;
 800627a:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800627e:	4618      	mov	r0, r3
 8006280:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8006284:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8006288:	461a      	mov	r2, r3
 800628a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800628e:	fb02 f501 	mul.w	r5, r2, r1
 8006292:	fb00 f403 	mul.w	r4, r0, r3
 8006296:	442c      	add	r4, r5
 8006298:	fba0 2302 	umull	r2, r3, r0, r2
 800629c:	18e1      	adds	r1, r4, r3
 800629e:	460b      	mov	r3, r1
 80062a0:	e9c7 23d4 	strd	r2, r3, [r7, #848]	; 0x350
 80062a4:	e9c7 23d4 	strd	r2, r3, [r7, #848]	; 0x350
    int64_t f7f9_76 = f7_2 * (int64_t) f9_38;
 80062a8:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80062ac:	4618      	mov	r0, r3
 80062ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80062b2:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80062b6:	461a      	mov	r2, r3
 80062b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80062bc:	fb02 f501 	mul.w	r5, r2, r1
 80062c0:	fb00 f403 	mul.w	r4, r0, r3
 80062c4:	442c      	add	r4, r5
 80062c6:	fba0 2302 	umull	r2, r3, r0, r2
 80062ca:	18e1      	adds	r1, r4, r3
 80062cc:	460b      	mov	r3, r1
 80062ce:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
 80062d2:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
    int64_t f8f8_19 = f8   * (int64_t) f8_19;
 80062d6:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80062da:	4618      	mov	r0, r3
 80062dc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80062e0:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 80062e4:	461a      	mov	r2, r3
 80062e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80062ea:	fb02 f501 	mul.w	r5, r2, r1
 80062ee:	fb00 f403 	mul.w	r4, r0, r3
 80062f2:	442c      	add	r4, r5
 80062f4:	fba0 2302 	umull	r2, r3, r0, r2
 80062f8:	18e1      	adds	r1, r4, r3
 80062fa:	460b      	mov	r3, r1
 80062fc:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
 8006300:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
    int64_t f8f9_38 = f8   * (int64_t) f9_38;
 8006304:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8006308:	4618      	mov	r0, r3
 800630a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800630e:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8006312:	461a      	mov	r2, r3
 8006314:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006318:	fb02 f501 	mul.w	r5, r2, r1
 800631c:	fb00 f403 	mul.w	r4, r0, r3
 8006320:	442c      	add	r4, r5
 8006322:	fba0 2302 	umull	r2, r3, r0, r2
 8006326:	18e1      	adds	r1, r4, r3
 8006328:	460b      	mov	r3, r1
 800632a:	e9c7 23ce 	strd	r2, r3, [r7, #824]	; 0x338
 800632e:	e9c7 23ce 	strd	r2, r3, [r7, #824]	; 0x338
    int64_t f9f9_38 = f9   * (int64_t) f9_38;
 8006332:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8006336:	4618      	mov	r0, r3
 8006338:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800633c:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8006340:	461a      	mov	r2, r3
 8006342:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006346:	fb02 f501 	mul.w	r5, r2, r1
 800634a:	fb00 f403 	mul.w	r4, r0, r3
 800634e:	442c      	add	r4, r5
 8006350:	fba0 2302 	umull	r2, r3, r0, r2
 8006354:	18e1      	adds	r1, r4, r3
 8006356:	460b      	mov	r3, r1
 8006358:	e9c7 23cc 	strd	r2, r3, [r7, #816]	; 0x330
 800635c:	e9c7 23cc 	strd	r2, r3, [r7, #816]	; 0x330
    int64_t h0 = f0f0  + f1f9_76 + f2f8_38 + f3f7_76 + f4f6_38 + f5f5_38;
 8006360:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8006364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006368:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	1884      	adds	r4, r0, r2
 8006372:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 8006376:	eb41 0303 	adc.w	r3, r1, r3
 800637a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800637e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 800638a:	4621      	mov	r1, r4
 800638c:	1889      	adds	r1, r1, r2
 800638e:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8006392:	4629      	mov	r1, r5
 8006394:	eb43 0101 	adc.w	r1, r3, r1
 8006398:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 800639c:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 80063a0:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 80063a4:	4621      	mov	r1, r4
 80063a6:	1889      	adds	r1, r1, r2
 80063a8:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 80063ac:	4629      	mov	r1, r5
 80063ae:	eb43 0101 	adc.w	r1, r3, r1
 80063b2:	f8c7 1274 	str.w	r1, [r7, #628]	; 0x274
 80063b6:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 80063ba:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 80063be:	4621      	mov	r1, r4
 80063c0:	1889      	adds	r1, r1, r2
 80063c2:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 80063c6:	4629      	mov	r1, r5
 80063c8:	eb43 0101 	adc.w	r1, r3, r1
 80063cc:	f8c7 126c 	str.w	r1, [r7, #620]	; 0x26c
 80063d0:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 80063d4:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 80063d8:	4621      	mov	r1, r4
 80063da:	1851      	adds	r1, r2, r1
 80063dc:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80063e0:	4629      	mov	r1, r5
 80063e2:	eb43 0101 	adc.w	r1, r3, r1
 80063e6:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80063ea:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80063ee:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    int64_t h1 = f0f1_2 + f2f9_38 + f3f8_38 + f4f7_38 + f5f6_38;
 80063f2:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80063f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063fa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	1884      	adds	r4, r0, r2
 8006404:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 8006408:	eb41 0303 	adc.w	r3, r1, r3
 800640c:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8006410:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8006414:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 8006418:	4621      	mov	r1, r4
 800641a:	1889      	adds	r1, r1, r2
 800641c:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8006420:	4629      	mov	r1, r5
 8006422:	eb43 0101 	adc.w	r1, r3, r1
 8006426:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 800642a:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800642e:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8006432:	4621      	mov	r1, r4
 8006434:	1889      	adds	r1, r1, r2
 8006436:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 800643a:	4629      	mov	r1, r5
 800643c:	eb43 0101 	adc.w	r1, r3, r1
 8006440:	f8c7 1254 	str.w	r1, [r7, #596]	; 0x254
 8006444:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 8006448:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 800644c:	4621      	mov	r1, r4
 800644e:	1851      	adds	r1, r2, r1
 8006450:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8006454:	4629      	mov	r1, r5
 8006456:	eb43 0101 	adc.w	r1, r3, r1
 800645a:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800645e:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8006462:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    int64_t h2 = f0f2_2 + f1f1_2 + f3f9_76 + f4f8_38 + f5f7_76 + f6f6_19;
 8006466:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800646a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800646e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	1884      	adds	r4, r0, r2
 8006478:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 800647c:	eb41 0303 	adc.w	r3, r1, r3
 8006480:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006484:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 8006488:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 800648c:	4621      	mov	r1, r4
 800648e:	1889      	adds	r1, r1, r2
 8006490:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 8006494:	4629      	mov	r1, r5
 8006496:	eb43 0101 	adc.w	r1, r3, r1
 800649a:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 800649e:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 80064a2:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 80064a6:	4621      	mov	r1, r4
 80064a8:	1889      	adds	r1, r1, r2
 80064aa:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 80064ae:	4629      	mov	r1, r5
 80064b0:	eb43 0101 	adc.w	r1, r3, r1
 80064b4:	f8c7 123c 	str.w	r1, [r7, #572]	; 0x23c
 80064b8:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 80064bc:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 80064c0:	4621      	mov	r1, r4
 80064c2:	1889      	adds	r1, r1, r2
 80064c4:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 80064c8:	4629      	mov	r1, r5
 80064ca:	eb43 0101 	adc.w	r1, r3, r1
 80064ce:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 80064d2:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 80064d6:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 80064da:	4621      	mov	r1, r4
 80064dc:	1851      	adds	r1, r2, r1
 80064de:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80064e2:	4629      	mov	r1, r5
 80064e4:	eb43 0101 	adc.w	r1, r3, r1
 80064e8:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80064ec:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80064f0:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    int64_t h3 = f0f3_2 + f1f2_2 + f4f9_38 + f5f8_38 + f6f7_38;
 80064f4:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80064f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064fc:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	1884      	adds	r4, r0, r2
 8006506:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 800650a:	eb41 0303 	adc.w	r3, r1, r3
 800650e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8006512:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 8006516:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 800651a:	4621      	mov	r1, r4
 800651c:	1889      	adds	r1, r1, r2
 800651e:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8006522:	4629      	mov	r1, r5
 8006524:	eb43 0101 	adc.w	r1, r3, r1
 8006528:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 800652c:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8006530:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 8006534:	4621      	mov	r1, r4
 8006536:	1889      	adds	r1, r1, r2
 8006538:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 800653c:	4629      	mov	r1, r5
 800653e:	eb43 0101 	adc.w	r1, r3, r1
 8006542:	f8c7 121c 	str.w	r1, [r7, #540]	; 0x21c
 8006546:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 800654a:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 800654e:	4621      	mov	r1, r4
 8006550:	1851      	adds	r1, r2, r1
 8006552:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8006556:	4629      	mov	r1, r5
 8006558:	eb43 0101 	adc.w	r1, r3, r1
 800655c:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8006560:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8006564:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    int64_t h4 = f0f4_2 + f1f3_4 + f2f2   + f5f9_76 + f6f8_38 + f7f7_38;
 8006568:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800656c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006570:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	1884      	adds	r4, r0, r2
 800657a:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 800657e:	eb41 0303 	adc.w	r3, r1, r3
 8006582:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8006586:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 8006592:	4621      	mov	r1, r4
 8006594:	1889      	adds	r1, r1, r2
 8006596:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 800659a:	4629      	mov	r1, r5
 800659c:	eb43 0101 	adc.w	r1, r3, r1
 80065a0:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 80065a4:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 80065a8:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 80065ac:	4621      	mov	r1, r4
 80065ae:	1889      	adds	r1, r1, r2
 80065b0:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80065b4:	4629      	mov	r1, r5
 80065b6:	eb43 0101 	adc.w	r1, r3, r1
 80065ba:	f8c7 1204 	str.w	r1, [r7, #516]	; 0x204
 80065be:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 80065c2:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80065c6:	4621      	mov	r1, r4
 80065c8:	1889      	adds	r1, r1, r2
 80065ca:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 80065ce:	4629      	mov	r1, r5
 80065d0:	eb43 0101 	adc.w	r1, r3, r1
 80065d4:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 80065d8:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 80065dc:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 80065e0:	4621      	mov	r1, r4
 80065e2:	1851      	adds	r1, r2, r1
 80065e4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80065e8:	4629      	mov	r1, r5
 80065ea:	eb43 0101 	adc.w	r1, r3, r1
 80065ee:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80065f2:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80065f6:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    int64_t h5 = f0f5_2 + f1f4_2 + f2f3_2 + f6f9_38 + f7f8_38;
 80065fa:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80065fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006602:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	1884      	adds	r4, r0, r2
 800660c:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8006610:	eb41 0303 	adc.w	r3, r1, r3
 8006614:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8006618:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8006624:	4621      	mov	r1, r4
 8006626:	1889      	adds	r1, r1, r2
 8006628:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 800662c:	4629      	mov	r1, r5
 800662e:	eb43 0101 	adc.w	r1, r3, r1
 8006632:	f8c7 11ec 	str.w	r1, [r7, #492]	; 0x1ec
 8006636:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 800663a:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 800663e:	4621      	mov	r1, r4
 8006640:	1889      	adds	r1, r1, r2
 8006642:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8006646:	4629      	mov	r1, r5
 8006648:	eb43 0101 	adc.w	r1, r3, r1
 800664c:	f8c7 11e4 	str.w	r1, [r7, #484]	; 0x1e4
 8006650:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8006654:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8006658:	4621      	mov	r1, r4
 800665a:	1851      	adds	r1, r2, r1
 800665c:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8006660:	4629      	mov	r1, r5
 8006662:	eb43 0101 	adc.w	r1, r3, r1
 8006666:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800666a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800666e:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    int64_t h6 = f0f6_2 + f1f5_4 + f2f4_2 + f3f3_2 + f7f9_76 + f8f8_19;
 8006672:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8006676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800667a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	1884      	adds	r4, r0, r2
 8006684:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 8006688:	eb41 0303 	adc.w	r3, r1, r3
 800668c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006690:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 800669c:	4621      	mov	r1, r4
 800669e:	1889      	adds	r1, r1, r2
 80066a0:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 80066a4:	4629      	mov	r1, r5
 80066a6:	eb43 0101 	adc.w	r1, r3, r1
 80066aa:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 80066ae:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 80066ba:	4621      	mov	r1, r4
 80066bc:	1889      	adds	r1, r1, r2
 80066be:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 80066c2:	4629      	mov	r1, r5
 80066c4:	eb43 0101 	adc.w	r1, r3, r1
 80066c8:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 80066cc:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 80066d0:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 80066d4:	4621      	mov	r1, r4
 80066d6:	1889      	adds	r1, r1, r2
 80066d8:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 80066dc:	4629      	mov	r1, r5
 80066de:	eb43 0101 	adc.w	r1, r3, r1
 80066e2:	f8c7 11c4 	str.w	r1, [r7, #452]	; 0x1c4
 80066e6:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 80066ea:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 80066ee:	4621      	mov	r1, r4
 80066f0:	1851      	adds	r1, r2, r1
 80066f2:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80066f6:	4629      	mov	r1, r5
 80066f8:	eb43 0101 	adc.w	r1, r3, r1
 80066fc:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8006700:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8006704:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    int64_t h7 = f0f7_2 + f1f6_2 + f2f5_2 + f3f4_2 + f8f9_38;
 8006708:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800670c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006710:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	1884      	adds	r4, r0, r2
 800671a:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 800671e:	eb41 0303 	adc.w	r3, r1, r3
 8006722:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006726:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8006732:	4621      	mov	r1, r4
 8006734:	1889      	adds	r1, r1, r2
 8006736:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 800673a:	4629      	mov	r1, r5
 800673c:	eb43 0101 	adc.w	r1, r3, r1
 8006740:	f8c7 11b4 	str.w	r1, [r7, #436]	; 0x1b4
 8006744:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8006750:	4621      	mov	r1, r4
 8006752:	1889      	adds	r1, r1, r2
 8006754:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8006758:	4629      	mov	r1, r5
 800675a:	eb43 0101 	adc.w	r1, r3, r1
 800675e:	f8c7 11ac 	str.w	r1, [r7, #428]	; 0x1ac
 8006762:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8006766:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800676a:	4621      	mov	r1, r4
 800676c:	1851      	adds	r1, r2, r1
 800676e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006772:	4629      	mov	r1, r5
 8006774:	eb43 0101 	adc.w	r1, r3, r1
 8006778:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800677c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8006780:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    int64_t h8 = f0f8_2 + f1f7_4 + f2f6_2 + f3f5_4 + f4f4   + f9f9_38;
 8006784:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8006788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800678c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006794:	1884      	adds	r4, r0, r2
 8006796:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 800679a:	eb41 0303 	adc.w	r3, r1, r3
 800679e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80067a2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 80067ae:	4621      	mov	r1, r4
 80067b0:	1889      	adds	r1, r1, r2
 80067b2:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80067b6:	4629      	mov	r1, r5
 80067b8:	eb43 0101 	adc.w	r1, r3, r1
 80067bc:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 80067c0:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 80067c4:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 80067c8:	4621      	mov	r1, r4
 80067ca:	1889      	adds	r1, r1, r2
 80067cc:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 80067d0:	4629      	mov	r1, r5
 80067d2:	eb43 0101 	adc.w	r1, r3, r1
 80067d6:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 80067da:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 80067de:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80067e2:	4621      	mov	r1, r4
 80067e4:	1889      	adds	r1, r1, r2
 80067e6:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 80067ea:	4629      	mov	r1, r5
 80067ec:	eb43 0101 	adc.w	r1, r3, r1
 80067f0:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
 80067f4:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 80067f8:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 80067fc:	4621      	mov	r1, r4
 80067fe:	1851      	adds	r1, r2, r1
 8006800:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006804:	4629      	mov	r1, r5
 8006806:	eb43 0101 	adc.w	r1, r3, r1
 800680a:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800680e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8006812:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    int64_t h9 = f0f9_2 + f1f8_2 + f2f7_2 + f3f6_2 + f4f5_2;
 8006816:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800681a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800681e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	1884      	adds	r4, r0, r2
 8006828:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 800682c:	eb41 0303 	adc.w	r3, r1, r3
 8006830:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006834:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8006840:	4621      	mov	r1, r4
 8006842:	1889      	adds	r1, r1, r2
 8006844:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8006848:	4629      	mov	r1, r5
 800684a:	eb43 0101 	adc.w	r1, r3, r1
 800684e:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8006852:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8006856:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 800685a:	4621      	mov	r1, r4
 800685c:	1889      	adds	r1, r1, r2
 800685e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8006862:	4629      	mov	r1, r5
 8006864:	eb43 0101 	adc.w	r1, r3, r1
 8006868:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 800686c:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 8006870:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8006874:	4621      	mov	r1, r4
 8006876:	1851      	adds	r1, r2, r1
 8006878:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800687c:	4629      	mov	r1, r5
 800687e:	eb43 0101 	adc.w	r1, r3, r1
 8006882:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8006886:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800688a:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    int64_t carry5;
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 800688e:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8006892:	f112 7800 	adds.w	r8, r2, #33554432	; 0x2000000
 8006896:	f143 0900 	adc.w	r9, r3, #0
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	ea4f 6298 	mov.w	r2, r8, lsr #26
 80068a6:	ea42 1289 	orr.w	r2, r2, r9, lsl #6
 80068aa:	ea4f 63a9 	mov.w	r3, r9, asr #26
 80068ae:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
    h1 += carry0;
 80068b2:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 80068b6:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80068ba:	1884      	adds	r4, r0, r2
 80068bc:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80068c0:	eb41 0303 	adc.w	r3, r1, r3
 80068c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068c8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80068cc:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    h0 -= carry0 << 26;
 80068d0:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80068d4:	f04f 0000 	mov.w	r0, #0
 80068d8:	f04f 0100 	mov.w	r1, #0
 80068dc:	0699      	lsls	r1, r3, #26
 80068de:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80068e2:	0690      	lsls	r0, r2, #26
 80068e4:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80068e8:	1a14      	subs	r4, r2, r0
 80068ea:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80068ee:	eb63 0301 	sbc.w	r3, r3, r1
 80068f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80068f6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80068fa:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 80068fe:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8006902:	f112 7a00 	adds.w	sl, r2, #33554432	; 0x2000000
 8006906:	f143 0b00 	adc.w	fp, r3, #0
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	ea4f 629a 	mov.w	r2, sl, lsr #26
 8006916:	ea42 128b 	orr.w	r2, r2, fp, lsl #6
 800691a:	ea4f 63ab 	mov.w	r3, fp, asr #26
 800691e:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
    h5 += carry4;
 8006922:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8006926:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 800692a:	1884      	adds	r4, r0, r2
 800692c:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8006930:	eb41 0303 	adc.w	r3, r1, r3
 8006934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006938:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800693c:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    h4 -= carry4 << 26;
 8006940:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8006944:	f04f 0000 	mov.w	r0, #0
 8006948:	f04f 0100 	mov.w	r1, #0
 800694c:	0699      	lsls	r1, r3, #26
 800694e:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8006952:	0690      	lsls	r0, r2, #26
 8006954:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8006958:	1a14      	subs	r4, r2, r0
 800695a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800695e:	eb63 0301 	sbc.w	r3, r3, r1
 8006962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006966:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800696a:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 800696e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8006972:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8006976:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 800697a:	f143 0300 	adc.w	r3, r3, #0
 800697e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 800698e:	4621      	mov	r1, r4
 8006990:	0e4a      	lsrs	r2, r1, #25
 8006992:	4629      	mov	r1, r5
 8006994:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8006998:	4629      	mov	r1, r5
 800699a:	164b      	asrs	r3, r1, #25
 800699c:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
    h2 += carry1;
 80069a0:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 80069a4:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 80069a8:	1884      	adds	r4, r0, r2
 80069aa:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80069ae:	eb41 0303 	adc.w	r3, r1, r3
 80069b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80069b6:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80069ba:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    h1 -= carry1 << 25;
 80069be:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 80069c2:	f04f 0000 	mov.w	r0, #0
 80069c6:	f04f 0100 	mov.w	r1, #0
 80069ca:	0659      	lsls	r1, r3, #25
 80069cc:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80069d0:	0650      	lsls	r0, r2, #25
 80069d2:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 80069d6:	1a14      	subs	r4, r2, r0
 80069d8:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80069dc:	eb63 0301 	sbc.w	r3, r3, r1
 80069e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069e4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80069e8:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 80069ec:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 80069f0:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80069f4:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 80069f8:	f143 0300 	adc.w	r3, r3, #0
 80069fc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	0e4a      	lsrs	r2, r1, #25
 8006a10:	4629      	mov	r1, r5
 8006a12:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8006a16:	4629      	mov	r1, r5
 8006a18:	164b      	asrs	r3, r1, #25
 8006a1a:	e9c7 23b0 	strd	r2, r3, [r7, #704]	; 0x2c0
    h6 += carry5;
 8006a1e:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	; 0x2f8
 8006a22:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8006a26:	1884      	adds	r4, r0, r2
 8006a28:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006a2c:	eb41 0303 	adc.w	r3, r1, r3
 8006a30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a34:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8006a38:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    h5 -= carry5 << 25;
 8006a3c:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8006a40:	f04f 0000 	mov.w	r0, #0
 8006a44:	f04f 0100 	mov.w	r1, #0
 8006a48:	0659      	lsls	r1, r3, #25
 8006a4a:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8006a4e:	0650      	lsls	r0, r2, #25
 8006a50:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8006a54:	1a14      	subs	r4, r2, r0
 8006a56:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8006a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a62:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006a66:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 8006a6a:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8006a6e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8006a72:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8006a76:	f143 0300 	adc.w	r3, r3, #0
 8006a7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	0e8a      	lsrs	r2, r1, #26
 8006a8e:	4629      	mov	r1, r5
 8006a90:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8006a94:	4629      	mov	r1, r5
 8006a96:	168b      	asrs	r3, r1, #26
 8006a98:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
    h3 += carry2;
 8006a9c:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	; 0x310
 8006aa0:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8006aa4:	1884      	adds	r4, r0, r2
 8006aa6:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8006aaa:	eb41 0303 	adc.w	r3, r1, r3
 8006aae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ab2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8006ab6:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    h2 -= carry2 << 26;
 8006aba:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8006abe:	f04f 0000 	mov.w	r0, #0
 8006ac2:	f04f 0100 	mov.w	r1, #0
 8006ac6:	0699      	lsls	r1, r3, #26
 8006ac8:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8006acc:	0690      	lsls	r0, r2, #26
 8006ace:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8006ad2:	1a14      	subs	r4, r2, r0
 8006ad4:	67bc      	str	r4, [r7, #120]	; 0x78
 8006ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8006ada:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006adc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006ae0:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 8006ae4:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8006ae8:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8006aec:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8006af0:	f143 0300 	adc.w	r3, r3, #0
 8006af4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8006b04:	4621      	mov	r1, r4
 8006b06:	0e8a      	lsrs	r2, r1, #26
 8006b08:	4629      	mov	r1, r5
 8006b0a:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8006b0e:	4629      	mov	r1, r5
 8006b10:	168b      	asrs	r3, r1, #26
 8006b12:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    h7 += carry6;
 8006b16:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	; 0x2f0
 8006b1a:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8006b1e:	1884      	adds	r4, r0, r2
 8006b20:	673c      	str	r4, [r7, #112]	; 0x70
 8006b22:	eb41 0303 	adc.w	r3, r1, r3
 8006b26:	677b      	str	r3, [r7, #116]	; 0x74
 8006b28:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006b2c:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    h6 -= carry6 << 26;
 8006b30:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8006b34:	f04f 0000 	mov.w	r0, #0
 8006b38:	f04f 0100 	mov.w	r1, #0
 8006b3c:	0699      	lsls	r1, r3, #26
 8006b3e:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8006b42:	0690      	lsls	r0, r2, #26
 8006b44:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8006b48:	1a14      	subs	r4, r2, r0
 8006b4a:	66bc      	str	r4, [r7, #104]	; 0x68
 8006b4c:	eb63 0301 	sbc.w	r3, r3, r1
 8006b50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b52:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006b56:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8006b5a:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8006b5e:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8006b62:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8006b66:	f143 0300 	adc.w	r3, r3, #0
 8006b6a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	f04f 0300 	mov.w	r3, #0
 8006b76:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	0e4a      	lsrs	r2, r1, #25
 8006b7e:	4629      	mov	r1, r5
 8006b80:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8006b84:	4629      	mov	r1, r5
 8006b86:	164b      	asrs	r3, r1, #25
 8006b88:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
    h4 += carry3;
 8006b8c:	e9d7 01c2 	ldrd	r0, r1, [r7, #776]	; 0x308
 8006b90:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8006b94:	1884      	adds	r4, r0, r2
 8006b96:	663c      	str	r4, [r7, #96]	; 0x60
 8006b98:	eb41 0303 	adc.w	r3, r1, r3
 8006b9c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b9e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006ba2:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    h3 -= carry3 << 25;
 8006ba6:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8006baa:	f04f 0000 	mov.w	r0, #0
 8006bae:	f04f 0100 	mov.w	r1, #0
 8006bb2:	0659      	lsls	r1, r3, #25
 8006bb4:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8006bb8:	0650      	lsls	r0, r2, #25
 8006bba:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8006bbe:	1a14      	subs	r4, r2, r0
 8006bc0:	65bc      	str	r4, [r7, #88]	; 0x58
 8006bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8006bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bc8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006bcc:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 8006bd0:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8006bd4:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8006bd8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8006bdc:	f143 0300 	adc.w	r3, r3, #0
 8006be0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	0e4a      	lsrs	r2, r1, #25
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	164b      	asrs	r3, r1, #25
 8006bfe:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
    h8 += carry7;
 8006c02:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 8006c06:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8006c0a:	1884      	adds	r4, r0, r2
 8006c0c:	653c      	str	r4, [r7, #80]	; 0x50
 8006c0e:	eb41 0303 	adc.w	r3, r1, r3
 8006c12:	657b      	str	r3, [r7, #84]	; 0x54
 8006c14:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006c18:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    h7 -= carry7 << 25;
 8006c1c:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8006c20:	f04f 0000 	mov.w	r0, #0
 8006c24:	f04f 0100 	mov.w	r1, #0
 8006c28:	0659      	lsls	r1, r3, #25
 8006c2a:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8006c2e:	0650      	lsls	r0, r2, #25
 8006c30:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8006c34:	1a14      	subs	r4, r2, r0
 8006c36:	64bc      	str	r4, [r7, #72]	; 0x48
 8006c38:	eb63 0301 	sbc.w	r3, r3, r1
 8006c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c3e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006c42:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8006c46:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8006c4a:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8006c4e:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8006c52:	f143 0300 	adc.w	r3, r3, #0
 8006c56:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006c5a:	f04f 0200 	mov.w	r2, #0
 8006c5e:	f04f 0300 	mov.w	r3, #0
 8006c62:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8006c66:	4621      	mov	r1, r4
 8006c68:	0e8a      	lsrs	r2, r1, #26
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8006c70:	4629      	mov	r1, r5
 8006c72:	168b      	asrs	r3, r1, #26
 8006c74:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
    h5 += carry4;
 8006c78:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8006c7c:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8006c80:	1884      	adds	r4, r0, r2
 8006c82:	643c      	str	r4, [r7, #64]	; 0x40
 8006c84:	eb41 0303 	adc.w	r3, r1, r3
 8006c88:	647b      	str	r3, [r7, #68]	; 0x44
 8006c8a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8006c8e:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    h4 -= carry4 << 26;
 8006c92:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8006c96:	f04f 0000 	mov.w	r0, #0
 8006c9a:	f04f 0100 	mov.w	r1, #0
 8006c9e:	0699      	lsls	r1, r3, #26
 8006ca0:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8006ca4:	0690      	lsls	r0, r2, #26
 8006ca6:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8006caa:	1a14      	subs	r4, r2, r0
 8006cac:	63bc      	str	r4, [r7, #56]	; 0x38
 8006cae:	eb63 0301 	sbc.w	r3, r3, r1
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8006cb8:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 8006cbc:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8006cc0:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8006cc4:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8006cc8:	f143 0300 	adc.w	r3, r3, #0
 8006ccc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8006cdc:	4621      	mov	r1, r4
 8006cde:	0e8a      	lsrs	r2, r1, #26
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	168b      	asrs	r3, r1, #26
 8006cea:	e9c7 23a6 	strd	r2, r3, [r7, #664]	; 0x298
    h9 += carry8;
 8006cee:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 8006cf2:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8006cf6:	1884      	adds	r4, r0, r2
 8006cf8:	633c      	str	r4, [r7, #48]	; 0x30
 8006cfa:	eb41 0303 	adc.w	r3, r1, r3
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8006d00:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8006d04:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    h8 -= carry8 << 26;
 8006d08:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8006d0c:	f04f 0000 	mov.w	r0, #0
 8006d10:	f04f 0100 	mov.w	r1, #0
 8006d14:	0699      	lsls	r1, r3, #26
 8006d16:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8006d1a:	0690      	lsls	r0, r2, #26
 8006d1c:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8006d20:	1a14      	subs	r4, r2, r0
 8006d22:	62bc      	str	r4, [r7, #40]	; 0x28
 8006d24:	eb63 0301 	sbc.w	r3, r3, r1
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d2a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8006d2e:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 8006d32:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8006d36:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8006d3a:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8006d3e:	f143 0300 	adc.w	r3, r3, #0
 8006d42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8006d52:	4621      	mov	r1, r4
 8006d54:	0e4a      	lsrs	r2, r1, #25
 8006d56:	4629      	mov	r1, r5
 8006d58:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	164b      	asrs	r3, r1, #25
 8006d60:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
    h0 += carry9 * 19;
 8006d64:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 8006d68:	4622      	mov	r2, r4
 8006d6a:	462b      	mov	r3, r5
 8006d6c:	f04f 0000 	mov.w	r0, #0
 8006d70:	f04f 0100 	mov.w	r1, #0
 8006d74:	00d9      	lsls	r1, r3, #3
 8006d76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d7a:	00d0      	lsls	r0, r2, #3
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	1912      	adds	r2, r2, r4
 8006d82:	eb45 0303 	adc.w	r3, r5, r3
 8006d86:	1891      	adds	r1, r2, r2
 8006d88:	6239      	str	r1, [r7, #32]
 8006d8a:	415b      	adcs	r3, r3
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d92:	1911      	adds	r1, r2, r4
 8006d94:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8006d98:	416b      	adcs	r3, r5
 8006d9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d9e:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8006da2:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8006da6:	4621      	mov	r1, r4
 8006da8:	1851      	adds	r1, r2, r1
 8006daa:	61b9      	str	r1, [r7, #24]
 8006dac:	4629      	mov	r1, r5
 8006dae:	eb43 0101 	adc.w	r1, r3, r1
 8006db2:	61f9      	str	r1, [r7, #28]
 8006db4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006db8:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    h9 -= carry9 << 25;
 8006dbc:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	; 0x290
 8006dc0:	f04f 0200 	mov.w	r2, #0
 8006dc4:	f04f 0300 	mov.w	r3, #0
 8006dc8:	064b      	lsls	r3, r1, #25
 8006dca:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8006dce:	0642      	lsls	r2, r0, #25
 8006dd0:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 8006dd4:	1a84      	subs	r4, r0, r2
 8006dd6:	613c      	str	r4, [r7, #16]
 8006dd8:	eb61 0303 	sbc.w	r3, r1, r3
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006de2:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8006de6:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8006dea:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8006dee:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8006df2:	f143 0300 	adc.w	r3, r3, #0
 8006df6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8006e06:	4621      	mov	r1, r4
 8006e08:	0e8a      	lsrs	r2, r1, #26
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8006e10:	4629      	mov	r1, r5
 8006e12:	168b      	asrs	r3, r1, #26
 8006e14:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
    h1 += carry0;
 8006e18:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8006e1c:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8006e20:	1884      	adds	r4, r0, r2
 8006e22:	60bc      	str	r4, [r7, #8]
 8006e24:	eb41 0303 	adc.w	r3, r1, r3
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006e2e:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    h0 -= carry0 << 26;
 8006e32:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	; 0x2d8
 8006e36:	f04f 0200 	mov.w	r2, #0
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	068b      	lsls	r3, r1, #26
 8006e40:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8006e44:	0682      	lsls	r2, r0, #26
 8006e46:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8006e4a:	1a84      	subs	r4, r0, r2
 8006e4c:	603c      	str	r4, [r7, #0]
 8006e4e:	eb61 0303 	sbc.w	r3, r1, r3
 8006e52:	607b      	str	r3, [r7, #4]
 8006e54:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006e58:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    h[0] = (int32_t) h0;
 8006e5c:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 8006e6a:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3304      	adds	r3, #4
 8006e72:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8006e76:	6812      	ldr	r2, [r2, #0]
 8006e78:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 8006e7a:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3308      	adds	r3, #8
 8006e82:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 8006e8a:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8006e96:	6812      	ldr	r2, [r2, #0]
 8006e98:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 8006e9a:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3310      	adds	r3, #16
 8006ea2:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 8006eaa:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8006eb6:	6812      	ldr	r2, [r2, #0]
 8006eb8:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 8006eba:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3318      	adds	r3, #24
 8006ec2:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 8006eca:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	331c      	adds	r3, #28
 8006ed2:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8006ed6:	6812      	ldr	r2, [r2, #0]
 8006ed8:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 8006eda:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3320      	adds	r3, #32
 8006ee2:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8006ee6:	6812      	ldr	r2, [r2, #0]
 8006ee8:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 8006eea:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3324      	adds	r3, #36	; 0x24
 8006ef2:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8006ef6:	6812      	ldr	r2, [r2, #0]
 8006ef8:	601a      	str	r2, [r3, #0]
}
 8006efa:	bf00      	nop
 8006efc:	f207 574c 	addw	r7, r7, #1356	; 0x54c
 8006f00:	46bd      	mov	sp, r7
 8006f02:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006f06:	4770      	bx	lr

08006f08 <fe_sq2>:

/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq2(fe h, const fe f) {
 8006f08:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006f0c:	f2ad 5d9c 	subw	sp, sp, #1436	; 0x59c
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8006f16:	6018      	str	r0, [r3, #0]
 8006f18:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006f1c:	6019      	str	r1, [r3, #0]
    int32_t f0 = f[0];
 8006f1e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
    int32_t f1 = f[1];
 8006f2a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
    int32_t f2 = f[2];
 8006f36:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
    int32_t f3 = f[3];
 8006f42:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
    int32_t f4 = f[4];
 8006f4e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
    int32_t f5 = f[5];
 8006f5a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    int32_t f6 = f[6];
 8006f66:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
    int32_t f7 = f[7];
 8006f72:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
    int32_t f8 = f[8];
 8006f7e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
    int32_t f9 = f[9];
 8006f8a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    int32_t f0_2 = 2 * f0;
 8006f96:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    int32_t f1_2 = 2 * f1;
 8006fa0:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
    int32_t f2_2 = 2 * f2;
 8006faa:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    int32_t f3_2 = 2 * f3;
 8006fb4:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
    int32_t f4_2 = 2 * f4;
 8006fbe:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
    int32_t f5_2 = 2 * f5;
 8006fc8:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    int32_t f6_2 = 2 * f6;
 8006fd2:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    int32_t f7_2 = 2 * f7;
 8006fdc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
    int32_t f5_38 = 38 * f5; /* 1.959375*2^30 */
 8006fe6:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 8006fea:	2326      	movs	r3, #38	; 0x26
 8006fec:	fb03 f302 	mul.w	r3, r3, r2
 8006ff0:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
    int32_t f6_19 = 19 * f6; /* 1.959375*2^30 */
 8006ff4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	4413      	add	r3, r2
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	4413      	add	r3, r2
 8007002:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    int32_t f7_38 = 38 * f7; /* 1.959375*2^30 */
 8007006:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 800700a:	2326      	movs	r3, #38	; 0x26
 800700c:	fb03 f302 	mul.w	r3, r3, r2
 8007010:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
    int32_t f8_19 = 19 * f8; /* 1.959375*2^30 */
 8007014:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8007018:	4613      	mov	r3, r2
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	4413      	add	r3, r2
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	4413      	add	r3, r2
 8007022:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
    int32_t f9_38 = 38 * f9; /* 1.959375*2^30 */
 8007026:	f8d7 2570 	ldr.w	r2, [r7, #1392]	; 0x570
 800702a:	2326      	movs	r3, #38	; 0x26
 800702c:	fb03 f302 	mul.w	r3, r3, r2
 8007030:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    int64_t f0f0    = f0   * (int64_t) f0;
 8007034:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8007038:	4618      	mov	r0, r3
 800703a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800703e:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8007042:	461a      	mov	r2, r3
 8007044:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007048:	fb02 f501 	mul.w	r5, r2, r1
 800704c:	fb00 f403 	mul.w	r4, r0, r3
 8007050:	442c      	add	r4, r5
 8007052:	fba0 2302 	umull	r2, r3, r0, r2
 8007056:	18e1      	adds	r1, r4, r3
 8007058:	460b      	mov	r3, r1
 800705a:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 800705e:	e9c1 2300 	strd	r2, r3, [r1]
 8007062:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8007066:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f1_2  = f0_2 * (int64_t) f1;
 800706a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800706e:	4618      	mov	r0, r3
 8007070:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007074:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8007078:	461a      	mov	r2, r3
 800707a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800707e:	fb02 f501 	mul.w	r5, r2, r1
 8007082:	fb00 f403 	mul.w	r4, r0, r3
 8007086:	442c      	add	r4, r5
 8007088:	fba0 2302 	umull	r2, r3, r0, r2
 800708c:	18e1      	adds	r1, r4, r3
 800708e:	460b      	mov	r3, r1
 8007090:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8007094:	e9c1 2300 	strd	r2, r3, [r1]
 8007098:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 800709c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f2_2  = f0_2 * (int64_t) f2;
 80070a0:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80070a4:	4618      	mov	r0, r3
 80070a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80070aa:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80070ae:	461a      	mov	r2, r3
 80070b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80070b4:	fb02 f501 	mul.w	r5, r2, r1
 80070b8:	fb00 f403 	mul.w	r4, r0, r3
 80070bc:	442c      	add	r4, r5
 80070be:	fba0 2302 	umull	r2, r3, r0, r2
 80070c2:	18e1      	adds	r1, r4, r3
 80070c4:	460b      	mov	r3, r1
 80070c6:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 80070ca:	e9c1 2300 	strd	r2, r3, [r1]
 80070ce:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 80070d2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f3_2  = f0_2 * (int64_t) f3;
 80070d6:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80070da:	4618      	mov	r0, r3
 80070dc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80070e0:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80070e4:	461a      	mov	r2, r3
 80070e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80070ea:	fb02 f501 	mul.w	r5, r2, r1
 80070ee:	fb00 f403 	mul.w	r4, r0, r3
 80070f2:	442c      	add	r4, r5
 80070f4:	fba0 2302 	umull	r2, r3, r0, r2
 80070f8:	18e1      	adds	r1, r4, r3
 80070fa:	460b      	mov	r3, r1
 80070fc:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8007100:	e9c1 2300 	strd	r2, r3, [r1]
 8007104:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8007108:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f4_2  = f0_2 * (int64_t) f4;
 800710c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8007110:	4618      	mov	r0, r3
 8007112:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007116:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800711a:	461a      	mov	r2, r3
 800711c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007120:	fb02 f501 	mul.w	r5, r2, r1
 8007124:	fb00 f403 	mul.w	r4, r0, r3
 8007128:	442c      	add	r4, r5
 800712a:	fba0 2302 	umull	r2, r3, r0, r2
 800712e:	18e1      	adds	r1, r4, r3
 8007130:	460b      	mov	r3, r1
 8007132:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8007136:	e9c1 2300 	strd	r2, r3, [r1]
 800713a:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 800713e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f5_2  = f0_2 * (int64_t) f5;
 8007142:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8007146:	4618      	mov	r0, r3
 8007148:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800714c:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8007150:	461a      	mov	r2, r3
 8007152:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007156:	fb02 f501 	mul.w	r5, r2, r1
 800715a:	fb00 f403 	mul.w	r4, r0, r3
 800715e:	442c      	add	r4, r5
 8007160:	fba0 2302 	umull	r2, r3, r0, r2
 8007164:	18e1      	adds	r1, r4, r3
 8007166:	460b      	mov	r3, r1
 8007168:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 800716c:	e9c1 2300 	strd	r2, r3, [r1]
 8007170:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8007174:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f6_2  = f0_2 * (int64_t) f6;
 8007178:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800717c:	4618      	mov	r0, r3
 800717e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007182:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8007186:	461a      	mov	r2, r3
 8007188:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800718c:	fb02 f501 	mul.w	r5, r2, r1
 8007190:	fb00 f403 	mul.w	r4, r0, r3
 8007194:	442c      	add	r4, r5
 8007196:	fba0 2302 	umull	r2, r3, r0, r2
 800719a:	18e1      	adds	r1, r4, r3
 800719c:	460b      	mov	r3, r1
 800719e:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 80071a2:	e9c1 2300 	strd	r2, r3, [r1]
 80071a6:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 80071aa:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f7_2  = f0_2 * (int64_t) f7;
 80071ae:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80071b2:	4618      	mov	r0, r3
 80071b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80071b8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80071bc:	461a      	mov	r2, r3
 80071be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80071c2:	fb02 f501 	mul.w	r5, r2, r1
 80071c6:	fb00 f403 	mul.w	r4, r0, r3
 80071ca:	442c      	add	r4, r5
 80071cc:	fba0 2302 	umull	r2, r3, r0, r2
 80071d0:	18e1      	adds	r1, r4, r3
 80071d2:	460b      	mov	r3, r1
 80071d4:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 80071d8:	e9c1 2300 	strd	r2, r3, [r1]
 80071dc:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 80071e0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f8_2  = f0_2 * (int64_t) f8;
 80071e4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80071e8:	4618      	mov	r0, r3
 80071ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80071ee:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80071f2:	461a      	mov	r2, r3
 80071f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80071f8:	fb02 f501 	mul.w	r5, r2, r1
 80071fc:	fb00 f403 	mul.w	r4, r0, r3
 8007200:	442c      	add	r4, r5
 8007202:	fba0 2302 	umull	r2, r3, r0, r2
 8007206:	18e1      	adds	r1, r4, r3
 8007208:	460b      	mov	r3, r1
 800720a:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 800720e:	e9c1 2300 	strd	r2, r3, [r1]
 8007212:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8007216:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f9_2  = f0_2 * (int64_t) f9;
 800721a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 800721e:	4618      	mov	r0, r3
 8007220:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007224:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8007228:	461a      	mov	r2, r3
 800722a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800722e:	fb02 f501 	mul.w	r5, r2, r1
 8007232:	fb00 f403 	mul.w	r4, r0, r3
 8007236:	442c      	add	r4, r5
 8007238:	fba0 2302 	umull	r2, r3, r0, r2
 800723c:	18e1      	adds	r1, r4, r3
 800723e:	460b      	mov	r3, r1
 8007240:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8007244:	e9c1 2300 	strd	r2, r3, [r1]
 8007248:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 800724c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f1_2  = f1_2 * (int64_t) f1;
 8007250:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8007254:	4618      	mov	r0, r3
 8007256:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800725a:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 800725e:	461a      	mov	r2, r3
 8007260:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007264:	fb02 f501 	mul.w	r5, r2, r1
 8007268:	fb00 f403 	mul.w	r4, r0, r3
 800726c:	442c      	add	r4, r5
 800726e:	fba0 2302 	umull	r2, r3, r0, r2
 8007272:	18e1      	adds	r1, r4, r3
 8007274:	460b      	mov	r3, r1
 8007276:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 800727a:	e9c1 2300 	strd	r2, r3, [r1]
 800727e:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8007282:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f2_2  = f1_2 * (int64_t) f2;
 8007286:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800728a:	4618      	mov	r0, r3
 800728c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007290:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8007294:	461a      	mov	r2, r3
 8007296:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800729a:	fb02 f501 	mul.w	r5, r2, r1
 800729e:	fb00 f403 	mul.w	r4, r0, r3
 80072a2:	442c      	add	r4, r5
 80072a4:	fba0 2302 	umull	r2, r3, r0, r2
 80072a8:	18e1      	adds	r1, r4, r3
 80072aa:	460b      	mov	r3, r1
 80072ac:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80072b0:	e9c1 2300 	strd	r2, r3, [r1]
 80072b4:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80072b8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f3_4  = f1_2 * (int64_t) f3_2;
 80072bc:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80072c0:	4618      	mov	r0, r3
 80072c2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80072c6:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80072ca:	461a      	mov	r2, r3
 80072cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80072d0:	fb02 f501 	mul.w	r5, r2, r1
 80072d4:	fb00 f403 	mul.w	r4, r0, r3
 80072d8:	442c      	add	r4, r5
 80072da:	fba0 2302 	umull	r2, r3, r0, r2
 80072de:	18e1      	adds	r1, r4, r3
 80072e0:	460b      	mov	r3, r1
 80072e2:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 80072e6:	e9c1 2300 	strd	r2, r3, [r1]
 80072ea:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 80072ee:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f4_2  = f1_2 * (int64_t) f4;
 80072f2:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80072f6:	4618      	mov	r0, r3
 80072f8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80072fc:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8007300:	461a      	mov	r2, r3
 8007302:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007306:	fb02 f501 	mul.w	r5, r2, r1
 800730a:	fb00 f403 	mul.w	r4, r0, r3
 800730e:	442c      	add	r4, r5
 8007310:	fba0 2302 	umull	r2, r3, r0, r2
 8007314:	18e1      	adds	r1, r4, r3
 8007316:	460b      	mov	r3, r1
 8007318:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 800731c:	e9c1 2300 	strd	r2, r3, [r1]
 8007320:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8007324:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f5_4  = f1_2 * (int64_t) f5_2;
 8007328:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 800732c:	4618      	mov	r0, r3
 800732e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007332:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8007336:	461a      	mov	r2, r3
 8007338:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800733c:	fb02 f501 	mul.w	r5, r2, r1
 8007340:	fb00 f403 	mul.w	r4, r0, r3
 8007344:	442c      	add	r4, r5
 8007346:	fba0 2302 	umull	r2, r3, r0, r2
 800734a:	18e1      	adds	r1, r4, r3
 800734c:	460b      	mov	r3, r1
 800734e:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8007352:	e9c1 2300 	strd	r2, r3, [r1]
 8007356:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 800735a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f6_2  = f1_2 * (int64_t) f6;
 800735e:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8007362:	4618      	mov	r0, r3
 8007364:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007368:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 800736c:	461a      	mov	r2, r3
 800736e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007372:	fb02 f501 	mul.w	r5, r2, r1
 8007376:	fb00 f403 	mul.w	r4, r0, r3
 800737a:	442c      	add	r4, r5
 800737c:	fba0 2302 	umull	r2, r3, r0, r2
 8007380:	18e1      	adds	r1, r4, r3
 8007382:	460b      	mov	r3, r1
 8007384:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8007388:	e9c1 2300 	strd	r2, r3, [r1]
 800738c:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8007390:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f7_4  = f1_2 * (int64_t) f7_2;
 8007394:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8007398:	4618      	mov	r0, r3
 800739a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800739e:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 80073a2:	461a      	mov	r2, r3
 80073a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80073a8:	fb02 f501 	mul.w	r5, r2, r1
 80073ac:	fb00 f403 	mul.w	r4, r0, r3
 80073b0:	442c      	add	r4, r5
 80073b2:	fba0 2302 	umull	r2, r3, r0, r2
 80073b6:	18e1      	adds	r1, r4, r3
 80073b8:	460b      	mov	r3, r1
 80073ba:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 80073be:	e9c1 2300 	strd	r2, r3, [r1]
 80073c2:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 80073c6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f8_2  = f1_2 * (int64_t) f8;
 80073ca:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80073ce:	4618      	mov	r0, r3
 80073d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80073d4:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80073d8:	461a      	mov	r2, r3
 80073da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80073de:	fb02 f501 	mul.w	r5, r2, r1
 80073e2:	fb00 f403 	mul.w	r4, r0, r3
 80073e6:	442c      	add	r4, r5
 80073e8:	fba0 2302 	umull	r2, r3, r0, r2
 80073ec:	18e1      	adds	r1, r4, r3
 80073ee:	460b      	mov	r3, r1
 80073f0:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 80073f4:	e9c1 2300 	strd	r2, r3, [r1]
 80073f8:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 80073fc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f9_76 = f1_2 * (int64_t) f9_38;
 8007400:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8007404:	4618      	mov	r0, r3
 8007406:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800740a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800740e:	461a      	mov	r2, r3
 8007410:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007414:	fb02 f501 	mul.w	r5, r2, r1
 8007418:	fb00 f403 	mul.w	r4, r0, r3
 800741c:	442c      	add	r4, r5
 800741e:	fba0 2302 	umull	r2, r3, r0, r2
 8007422:	18e1      	adds	r1, r4, r3
 8007424:	460b      	mov	r3, r1
 8007426:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 800742a:	e9c1 2300 	strd	r2, r3, [r1]
 800742e:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8007432:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f2    = f2   * (int64_t) f2;
 8007436:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800743a:	4618      	mov	r0, r3
 800743c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007440:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8007444:	461a      	mov	r2, r3
 8007446:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800744a:	fb02 f501 	mul.w	r5, r2, r1
 800744e:	fb00 f403 	mul.w	r4, r0, r3
 8007452:	442c      	add	r4, r5
 8007454:	fba0 2302 	umull	r2, r3, r0, r2
 8007458:	18e1      	adds	r1, r4, r3
 800745a:	460b      	mov	r3, r1
 800745c:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8007460:	e9c1 2300 	strd	r2, r3, [r1]
 8007464:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8007468:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f3_2  = f2_2 * (int64_t) f3;
 800746c:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8007470:	4618      	mov	r0, r3
 8007472:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007476:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 800747a:	461a      	mov	r2, r3
 800747c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007480:	fb02 f501 	mul.w	r5, r2, r1
 8007484:	fb00 f403 	mul.w	r4, r0, r3
 8007488:	442c      	add	r4, r5
 800748a:	fba0 2302 	umull	r2, r3, r0, r2
 800748e:	18e1      	adds	r1, r4, r3
 8007490:	460b      	mov	r3, r1
 8007492:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8007496:	e9c1 2300 	strd	r2, r3, [r1]
 800749a:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 800749e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f4_2  = f2_2 * (int64_t) f4;
 80074a2:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80074a6:	4618      	mov	r0, r3
 80074a8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80074ac:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80074b0:	461a      	mov	r2, r3
 80074b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80074b6:	fb02 f501 	mul.w	r5, r2, r1
 80074ba:	fb00 f403 	mul.w	r4, r0, r3
 80074be:	442c      	add	r4, r5
 80074c0:	fba0 2302 	umull	r2, r3, r0, r2
 80074c4:	18e1      	adds	r1, r4, r3
 80074c6:	460b      	mov	r3, r1
 80074c8:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 80074cc:	e9c1 2300 	strd	r2, r3, [r1]
 80074d0:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 80074d4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f5_2  = f2_2 * (int64_t) f5;
 80074d8:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80074dc:	4618      	mov	r0, r3
 80074de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80074e2:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 80074e6:	461a      	mov	r2, r3
 80074e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80074ec:	fb02 f501 	mul.w	r5, r2, r1
 80074f0:	fb00 f403 	mul.w	r4, r0, r3
 80074f4:	442c      	add	r4, r5
 80074f6:	fba0 2302 	umull	r2, r3, r0, r2
 80074fa:	18e1      	adds	r1, r4, r3
 80074fc:	460b      	mov	r3, r1
 80074fe:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8007502:	e9c1 2300 	strd	r2, r3, [r1]
 8007506:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 800750a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f6_2  = f2_2 * (int64_t) f6;
 800750e:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8007512:	4618      	mov	r0, r3
 8007514:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007518:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 800751c:	461a      	mov	r2, r3
 800751e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007522:	fb02 f501 	mul.w	r5, r2, r1
 8007526:	fb00 f403 	mul.w	r4, r0, r3
 800752a:	442c      	add	r4, r5
 800752c:	fba0 2302 	umull	r2, r3, r0, r2
 8007530:	18e1      	adds	r1, r4, r3
 8007532:	460b      	mov	r3, r1
 8007534:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8007538:	e9c1 2300 	strd	r2, r3, [r1]
 800753c:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8007540:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f7_2  = f2_2 * (int64_t) f7;
 8007544:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8007548:	4618      	mov	r0, r3
 800754a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800754e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8007552:	461a      	mov	r2, r3
 8007554:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007558:	fb02 f501 	mul.w	r5, r2, r1
 800755c:	fb00 f403 	mul.w	r4, r0, r3
 8007560:	442c      	add	r4, r5
 8007562:	fba0 2302 	umull	r2, r3, r0, r2
 8007566:	18e1      	adds	r1, r4, r3
 8007568:	460b      	mov	r3, r1
 800756a:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 800756e:	e9c1 2300 	strd	r2, r3, [r1]
 8007572:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8007576:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f8_38 = f2_2 * (int64_t) f8_19;
 800757a:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 800757e:	4618      	mov	r0, r3
 8007580:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007584:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007588:	461a      	mov	r2, r3
 800758a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800758e:	fb02 f501 	mul.w	r5, r2, r1
 8007592:	fb00 f403 	mul.w	r4, r0, r3
 8007596:	442c      	add	r4, r5
 8007598:	fba0 2302 	umull	r2, r3, r0, r2
 800759c:	18e1      	adds	r1, r4, r3
 800759e:	460b      	mov	r3, r1
 80075a0:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80075a4:	e9c1 2300 	strd	r2, r3, [r1]
 80075a8:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80075ac:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f9_38 = f2   * (int64_t) f9_38;
 80075b0:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80075b4:	4618      	mov	r0, r3
 80075b6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80075ba:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80075be:	461a      	mov	r2, r3
 80075c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80075c4:	fb02 f501 	mul.w	r5, r2, r1
 80075c8:	fb00 f403 	mul.w	r4, r0, r3
 80075cc:	442c      	add	r4, r5
 80075ce:	fba0 2302 	umull	r2, r3, r0, r2
 80075d2:	18e1      	adds	r1, r4, r3
 80075d4:	460b      	mov	r3, r1
 80075d6:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 80075da:	e9c1 2300 	strd	r2, r3, [r1]
 80075de:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 80075e2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f3_2  = f3_2 * (int64_t) f3;
 80075e6:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80075ea:	4618      	mov	r0, r3
 80075ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80075f0:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80075f4:	461a      	mov	r2, r3
 80075f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80075fa:	fb02 f501 	mul.w	r5, r2, r1
 80075fe:	fb00 f403 	mul.w	r4, r0, r3
 8007602:	442c      	add	r4, r5
 8007604:	fba0 2302 	umull	r2, r3, r0, r2
 8007608:	18e1      	adds	r1, r4, r3
 800760a:	460b      	mov	r3, r1
 800760c:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8007610:	e9c1 2300 	strd	r2, r3, [r1]
 8007614:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8007618:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f4_2  = f3_2 * (int64_t) f4;
 800761c:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8007620:	4618      	mov	r0, r3
 8007622:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007626:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800762a:	461a      	mov	r2, r3
 800762c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007630:	fb02 f501 	mul.w	r5, r2, r1
 8007634:	fb00 f403 	mul.w	r4, r0, r3
 8007638:	442c      	add	r4, r5
 800763a:	fba0 2302 	umull	r2, r3, r0, r2
 800763e:	18e1      	adds	r1, r4, r3
 8007640:	460b      	mov	r3, r1
 8007642:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8007646:	e9c1 2300 	strd	r2, r3, [r1]
 800764a:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 800764e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f5_4  = f3_2 * (int64_t) f5_2;
 8007652:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8007656:	4618      	mov	r0, r3
 8007658:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800765c:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8007660:	461a      	mov	r2, r3
 8007662:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007666:	fb02 f501 	mul.w	r5, r2, r1
 800766a:	fb00 f403 	mul.w	r4, r0, r3
 800766e:	442c      	add	r4, r5
 8007670:	fba0 2302 	umull	r2, r3, r0, r2
 8007674:	18e1      	adds	r1, r4, r3
 8007676:	460b      	mov	r3, r1
 8007678:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 800767c:	e9c1 2300 	strd	r2, r3, [r1]
 8007680:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8007684:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f6_2  = f3_2 * (int64_t) f6;
 8007688:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800768c:	4618      	mov	r0, r3
 800768e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007692:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8007696:	461a      	mov	r2, r3
 8007698:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800769c:	fb02 f501 	mul.w	r5, r2, r1
 80076a0:	fb00 f403 	mul.w	r4, r0, r3
 80076a4:	442c      	add	r4, r5
 80076a6:	fba0 2302 	umull	r2, r3, r0, r2
 80076aa:	18e1      	adds	r1, r4, r3
 80076ac:	460b      	mov	r3, r1
 80076ae:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 80076b2:	e9c1 2300 	strd	r2, r3, [r1]
 80076b6:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 80076ba:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f7_76 = f3_2 * (int64_t) f7_38;
 80076be:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80076c2:	4618      	mov	r0, r3
 80076c4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80076c8:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80076cc:	461a      	mov	r2, r3
 80076ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80076d2:	fb02 f501 	mul.w	r5, r2, r1
 80076d6:	fb00 f403 	mul.w	r4, r0, r3
 80076da:	442c      	add	r4, r5
 80076dc:	fba0 2302 	umull	r2, r3, r0, r2
 80076e0:	18e1      	adds	r1, r4, r3
 80076e2:	460b      	mov	r3, r1
 80076e4:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 80076e8:	e9c1 2300 	strd	r2, r3, [r1]
 80076ec:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 80076f0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f8_38 = f3_2 * (int64_t) f8_19;
 80076f4:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80076f8:	4618      	mov	r0, r3
 80076fa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80076fe:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007702:	461a      	mov	r2, r3
 8007704:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007708:	fb02 f501 	mul.w	r5, r2, r1
 800770c:	fb00 f403 	mul.w	r4, r0, r3
 8007710:	442c      	add	r4, r5
 8007712:	fba0 2302 	umull	r2, r3, r0, r2
 8007716:	18e1      	adds	r1, r4, r3
 8007718:	460b      	mov	r3, r1
 800771a:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 800771e:	e9c1 2300 	strd	r2, r3, [r1]
 8007722:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8007726:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f9_76 = f3_2 * (int64_t) f9_38;
 800772a:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 800772e:	4618      	mov	r0, r3
 8007730:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007734:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007738:	461a      	mov	r2, r3
 800773a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800773e:	fb02 f501 	mul.w	r5, r2, r1
 8007742:	fb00 f403 	mul.w	r4, r0, r3
 8007746:	442c      	add	r4, r5
 8007748:	fba0 2302 	umull	r2, r3, r0, r2
 800774c:	18e1      	adds	r1, r4, r3
 800774e:	460b      	mov	r3, r1
 8007750:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8007754:	e9c1 2300 	strd	r2, r3, [r1]
 8007758:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 800775c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f4    = f4   * (int64_t) f4;
 8007760:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8007764:	4618      	mov	r0, r3
 8007766:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800776a:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800776e:	461a      	mov	r2, r3
 8007770:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007774:	fb02 f501 	mul.w	r5, r2, r1
 8007778:	fb00 f403 	mul.w	r4, r0, r3
 800777c:	442c      	add	r4, r5
 800777e:	fba0 2302 	umull	r2, r3, r0, r2
 8007782:	18e1      	adds	r1, r4, r3
 8007784:	460b      	mov	r3, r1
 8007786:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800778a:	e9c1 2300 	strd	r2, r3, [r1]
 800778e:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8007792:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f5_2  = f4_2 * (int64_t) f5;
 8007796:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 800779a:	4618      	mov	r0, r3
 800779c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80077a0:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 80077a4:	461a      	mov	r2, r3
 80077a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80077aa:	fb02 f501 	mul.w	r5, r2, r1
 80077ae:	fb00 f403 	mul.w	r4, r0, r3
 80077b2:	442c      	add	r4, r5
 80077b4:	fba0 2302 	umull	r2, r3, r0, r2
 80077b8:	18e1      	adds	r1, r4, r3
 80077ba:	460b      	mov	r3, r1
 80077bc:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80077c0:	e9c1 2300 	strd	r2, r3, [r1]
 80077c4:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80077c8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f6_38 = f4_2 * (int64_t) f6_19;
 80077cc:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80077d0:	4618      	mov	r0, r3
 80077d2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80077d6:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 80077da:	461a      	mov	r2, r3
 80077dc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80077e0:	fb02 f501 	mul.w	r5, r2, r1
 80077e4:	fb00 f403 	mul.w	r4, r0, r3
 80077e8:	442c      	add	r4, r5
 80077ea:	fba0 2302 	umull	r2, r3, r0, r2
 80077ee:	18e1      	adds	r1, r4, r3
 80077f0:	460b      	mov	r3, r1
 80077f2:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80077f6:	e9c1 2300 	strd	r2, r3, [r1]
 80077fa:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80077fe:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f7_38 = f4   * (int64_t) f7_38;
 8007802:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8007806:	4618      	mov	r0, r3
 8007808:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800780c:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8007810:	461a      	mov	r2, r3
 8007812:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007816:	fb02 f501 	mul.w	r5, r2, r1
 800781a:	fb00 f403 	mul.w	r4, r0, r3
 800781e:	442c      	add	r4, r5
 8007820:	fba0 2302 	umull	r2, r3, r0, r2
 8007824:	18e1      	adds	r1, r4, r3
 8007826:	460b      	mov	r3, r1
 8007828:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800782c:	e9c1 2300 	strd	r2, r3, [r1]
 8007830:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8007834:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f8_38 = f4_2 * (int64_t) f8_19;
 8007838:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 800783c:	4618      	mov	r0, r3
 800783e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007842:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007846:	461a      	mov	r2, r3
 8007848:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800784c:	fb02 f501 	mul.w	r5, r2, r1
 8007850:	fb00 f403 	mul.w	r4, r0, r3
 8007854:	442c      	add	r4, r5
 8007856:	fba0 2302 	umull	r2, r3, r0, r2
 800785a:	18e1      	adds	r1, r4, r3
 800785c:	460b      	mov	r3, r1
 800785e:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8007862:	e9c1 2300 	strd	r2, r3, [r1]
 8007866:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800786a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f9_38 = f4   * (int64_t) f9_38;
 800786e:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8007872:	4618      	mov	r0, r3
 8007874:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007878:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800787c:	461a      	mov	r2, r3
 800787e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007882:	fb02 f501 	mul.w	r5, r2, r1
 8007886:	fb00 f403 	mul.w	r4, r0, r3
 800788a:	442c      	add	r4, r5
 800788c:	fba0 2302 	umull	r2, r3, r0, r2
 8007890:	18e1      	adds	r1, r4, r3
 8007892:	460b      	mov	r3, r1
 8007894:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
 8007898:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
    int64_t f5f5_38 = f5   * (int64_t) f5_38;
 800789c:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 80078a0:	4618      	mov	r0, r3
 80078a2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80078a6:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 80078aa:	461a      	mov	r2, r3
 80078ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80078b0:	fb02 f501 	mul.w	r5, r2, r1
 80078b4:	fb00 f403 	mul.w	r4, r0, r3
 80078b8:	442c      	add	r4, r5
 80078ba:	fba0 2302 	umull	r2, r3, r0, r2
 80078be:	18e1      	adds	r1, r4, r3
 80078c0:	460b      	mov	r3, r1
 80078c2:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
 80078c6:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    int64_t f5f6_38 = f5_2 * (int64_t) f6_19;
 80078ca:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80078ce:	4618      	mov	r0, r3
 80078d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80078d4:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 80078d8:	461a      	mov	r2, r3
 80078da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80078de:	fb02 f501 	mul.w	r5, r2, r1
 80078e2:	fb00 f403 	mul.w	r4, r0, r3
 80078e6:	442c      	add	r4, r5
 80078e8:	fba0 2302 	umull	r2, r3, r0, r2
 80078ec:	18e1      	adds	r1, r4, r3
 80078ee:	460b      	mov	r3, r1
 80078f0:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
 80078f4:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
    int64_t f5f7_76 = f5_2 * (int64_t) f7_38;
 80078f8:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80078fc:	4618      	mov	r0, r3
 80078fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007902:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8007906:	461a      	mov	r2, r3
 8007908:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800790c:	fb02 f501 	mul.w	r5, r2, r1
 8007910:	fb00 f403 	mul.w	r4, r0, r3
 8007914:	442c      	add	r4, r5
 8007916:	fba0 2302 	umull	r2, r3, r0, r2
 800791a:	18e1      	adds	r1, r4, r3
 800791c:	460b      	mov	r3, r1
 800791e:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
 8007922:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
    int64_t f5f8_38 = f5_2 * (int64_t) f8_19;
 8007926:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 800792a:	4618      	mov	r0, r3
 800792c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007930:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007934:	461a      	mov	r2, r3
 8007936:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800793a:	fb02 f501 	mul.w	r5, r2, r1
 800793e:	fb00 f403 	mul.w	r4, r0, r3
 8007942:	442c      	add	r4, r5
 8007944:	fba0 2302 	umull	r2, r3, r0, r2
 8007948:	18e1      	adds	r1, r4, r3
 800794a:	460b      	mov	r3, r1
 800794c:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
 8007950:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
    int64_t f5f9_76 = f5_2 * (int64_t) f9_38;
 8007954:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8007958:	4618      	mov	r0, r3
 800795a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800795e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007962:	461a      	mov	r2, r3
 8007964:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007968:	fb02 f501 	mul.w	r5, r2, r1
 800796c:	fb00 f403 	mul.w	r4, r0, r3
 8007970:	442c      	add	r4, r5
 8007972:	fba0 2302 	umull	r2, r3, r0, r2
 8007976:	18e1      	adds	r1, r4, r3
 8007978:	460b      	mov	r3, r1
 800797a:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
 800797e:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    int64_t f6f6_19 = f6   * (int64_t) f6_19;
 8007982:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8007986:	4618      	mov	r0, r3
 8007988:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800798c:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8007990:	461a      	mov	r2, r3
 8007992:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007996:	fb02 f501 	mul.w	r5, r2, r1
 800799a:	fb00 f403 	mul.w	r4, r0, r3
 800799e:	442c      	add	r4, r5
 80079a0:	fba0 2302 	umull	r2, r3, r0, r2
 80079a4:	18e1      	adds	r1, r4, r3
 80079a6:	460b      	mov	r3, r1
 80079a8:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
 80079ac:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
    int64_t f6f7_38 = f6   * (int64_t) f7_38;
 80079b0:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80079b4:	4618      	mov	r0, r3
 80079b6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80079ba:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80079be:	461a      	mov	r2, r3
 80079c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80079c4:	fb02 f501 	mul.w	r5, r2, r1
 80079c8:	fb00 f403 	mul.w	r4, r0, r3
 80079cc:	442c      	add	r4, r5
 80079ce:	fba0 2302 	umull	r2, r3, r0, r2
 80079d2:	18e1      	adds	r1, r4, r3
 80079d4:	460b      	mov	r3, r1
 80079d6:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
 80079da:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
    int64_t f6f8_38 = f6_2 * (int64_t) f8_19;
 80079de:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 80079e2:	4618      	mov	r0, r3
 80079e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80079e8:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80079ec:	461a      	mov	r2, r3
 80079ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80079f2:	fb02 f501 	mul.w	r5, r2, r1
 80079f6:	fb00 f403 	mul.w	r4, r0, r3
 80079fa:	442c      	add	r4, r5
 80079fc:	fba0 2302 	umull	r2, r3, r0, r2
 8007a00:	18e1      	adds	r1, r4, r3
 8007a02:	460b      	mov	r3, r1
 8007a04:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
 8007a08:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    int64_t f6f9_38 = f6   * (int64_t) f9_38;
 8007a0c:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8007a10:	4618      	mov	r0, r3
 8007a12:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007a16:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007a20:	fb02 f501 	mul.w	r5, r2, r1
 8007a24:	fb00 f403 	mul.w	r4, r0, r3
 8007a28:	442c      	add	r4, r5
 8007a2a:	fba0 2302 	umull	r2, r3, r0, r2
 8007a2e:	18e1      	adds	r1, r4, r3
 8007a30:	460b      	mov	r3, r1
 8007a32:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
 8007a36:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
    int64_t f7f7_38 = f7   * (int64_t) f7_38;
 8007a3a:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8007a3e:	4618      	mov	r0, r3
 8007a40:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007a44:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8007a48:	461a      	mov	r2, r3
 8007a4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007a4e:	fb02 f501 	mul.w	r5, r2, r1
 8007a52:	fb00 f403 	mul.w	r4, r0, r3
 8007a56:	442c      	add	r4, r5
 8007a58:	fba0 2302 	umull	r2, r3, r0, r2
 8007a5c:	18e1      	adds	r1, r4, r3
 8007a5e:	460b      	mov	r3, r1
 8007a60:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
 8007a64:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
    int64_t f7f8_38 = f7_2 * (int64_t) f8_19;
 8007a68:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007a72:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007a76:	461a      	mov	r2, r3
 8007a78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007a7c:	fb02 f501 	mul.w	r5, r2, r1
 8007a80:	fb00 f403 	mul.w	r4, r0, r3
 8007a84:	442c      	add	r4, r5
 8007a86:	fba0 2302 	umull	r2, r3, r0, r2
 8007a8a:	18e1      	adds	r1, r4, r3
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
 8007a92:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
    int64_t f7f9_76 = f7_2 * (int64_t) f9_38;
 8007a96:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007aa0:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007aaa:	fb02 f501 	mul.w	r5, r2, r1
 8007aae:	fb00 f403 	mul.w	r4, r0, r3
 8007ab2:	442c      	add	r4, r5
 8007ab4:	fba0 2302 	umull	r2, r3, r0, r2
 8007ab8:	18e1      	adds	r1, r4, r3
 8007aba:	460b      	mov	r3, r1
 8007abc:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
 8007ac0:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
    int64_t f8f8_19 = f8   * (int64_t) f8_19;
 8007ac4:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8007ac8:	4618      	mov	r0, r3
 8007aca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007ace:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007ad8:	fb02 f501 	mul.w	r5, r2, r1
 8007adc:	fb00 f403 	mul.w	r4, r0, r3
 8007ae0:	442c      	add	r4, r5
 8007ae2:	fba0 2302 	umull	r2, r3, r0, r2
 8007ae6:	18e1      	adds	r1, r4, r3
 8007ae8:	460b      	mov	r3, r1
 8007aea:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
 8007aee:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
    int64_t f8f9_38 = f8   * (int64_t) f9_38;
 8007af2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8007af6:	4618      	mov	r0, r3
 8007af8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007afc:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007b00:	461a      	mov	r2, r3
 8007b02:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007b06:	fb02 f501 	mul.w	r5, r2, r1
 8007b0a:	fb00 f403 	mul.w	r4, r0, r3
 8007b0e:	442c      	add	r4, r5
 8007b10:	fba0 2302 	umull	r2, r3, r0, r2
 8007b14:	18e1      	adds	r1, r4, r3
 8007b16:	460b      	mov	r3, r1
 8007b18:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
 8007b1c:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    int64_t f9f9_38 = f9   * (int64_t) f9_38;
 8007b20:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8007b24:	4618      	mov	r0, r3
 8007b26:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8007b2a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007b2e:	461a      	mov	r2, r3
 8007b30:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007b34:	fb02 f501 	mul.w	r5, r2, r1
 8007b38:	fb00 f403 	mul.w	r4, r0, r3
 8007b3c:	442c      	add	r4, r5
 8007b3e:	fba0 2302 	umull	r2, r3, r0, r2
 8007b42:	18e1      	adds	r1, r4, r3
 8007b44:	460b      	mov	r3, r1
 8007b46:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
 8007b4a:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
    int64_t h0 = f0f0  + f1f9_76 + f2f8_38 + f3f7_76 + f4f6_38 + f5f5_38;
 8007b4e:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8007b52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b56:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	eb10 0802 	adds.w	r8, r0, r2
 8007b62:	eb41 0903 	adc.w	r9, r1, r3
 8007b66:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	eb18 0a02 	adds.w	sl, r8, r2
 8007b72:	eb49 0b03 	adc.w	fp, r9, r3
 8007b76:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	eb1a 0102 	adds.w	r1, sl, r2
 8007b82:	f8c7 12d0 	str.w	r1, [r7, #720]	; 0x2d0
 8007b86:	eb4b 0303 	adc.w	r3, fp, r3
 8007b8a:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8007b8e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b96:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	1889      	adds	r1, r1, r2
 8007b9e:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	eb43 0101 	adc.w	r1, r3, r1
 8007ba8:	f8c7 12cc 	str.w	r1, [r7, #716]	; 0x2cc
 8007bac:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8007bb0:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	1851      	adds	r1, r2, r1
 8007bb8:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	eb43 0101 	adc.w	r1, r3, r1
 8007bc2:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8007bc6:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8007bca:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    int64_t h1 = f0f1_2 + f2f9_38 + f3f8_38 + f4f7_38 + f5f6_38;
 8007bce:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8007bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bd6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	1884      	adds	r4, r0, r2
 8007be0:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 8007be4:	eb41 0303 	adc.w	r3, r1, r3
 8007be8:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8007bec:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf4:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	1889      	adds	r1, r1, r2
 8007bfc:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 8007c00:	4629      	mov	r1, r5
 8007c02:	eb43 0101 	adc.w	r1, r3, r1
 8007c06:	f8c7 12bc 	str.w	r1, [r7, #700]	; 0x2bc
 8007c0a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 8007c16:	4621      	mov	r1, r4
 8007c18:	1889      	adds	r1, r1, r2
 8007c1a:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8007c1e:	4629      	mov	r1, r5
 8007c20:	eb43 0101 	adc.w	r1, r3, r1
 8007c24:	f8c7 12b4 	str.w	r1, [r7, #692]	; 0x2b4
 8007c28:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 8007c2c:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 8007c30:	4621      	mov	r1, r4
 8007c32:	1851      	adds	r1, r2, r1
 8007c34:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8007c38:	4629      	mov	r1, r5
 8007c3a:	eb43 0101 	adc.w	r1, r3, r1
 8007c3e:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
 8007c42:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8007c46:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    int64_t h2 = f0f2_2 + f1f1_2 + f3f9_76 + f4f8_38 + f5f7_76 + f6f6_19;
 8007c4a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8007c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c52:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	1884      	adds	r4, r0, r2
 8007c5c:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 8007c60:	eb41 0303 	adc.w	r3, r1, r3
 8007c64:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007c68:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	; 0x2a8
 8007c74:	4621      	mov	r1, r4
 8007c76:	1889      	adds	r1, r1, r2
 8007c78:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	eb43 0101 	adc.w	r1, r3, r1
 8007c82:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 8007c86:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 8007c92:	4621      	mov	r1, r4
 8007c94:	1889      	adds	r1, r1, r2
 8007c96:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	eb43 0101 	adc.w	r1, r3, r1
 8007ca0:	f8c7 129c 	str.w	r1, [r7, #668]	; 0x29c
 8007ca4:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8007ca8:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8007cac:	4621      	mov	r1, r4
 8007cae:	1889      	adds	r1, r1, r2
 8007cb0:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	eb43 0101 	adc.w	r1, r3, r1
 8007cba:	f8c7 1294 	str.w	r1, [r7, #660]	; 0x294
 8007cbe:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 8007cc2:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	1851      	adds	r1, r2, r1
 8007cca:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8007cce:	4629      	mov	r1, r5
 8007cd0:	eb43 0101 	adc.w	r1, r3, r1
 8007cd4:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8007cd8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8007cdc:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    int64_t h3 = f0f3_2 + f1f2_2 + f4f9_38 + f5f8_38 + f6f7_38;
 8007ce0:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8007ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ce8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8007cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf0:	1884      	adds	r4, r0, r2
 8007cf2:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 8007cf6:	eb41 0303 	adc.w	r3, r1, r3
 8007cfa:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8007cfe:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8007d02:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 8007d06:	4621      	mov	r1, r4
 8007d08:	1889      	adds	r1, r1, r2
 8007d0a:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8007d0e:	4629      	mov	r1, r5
 8007d10:	eb43 0101 	adc.w	r1, r3, r1
 8007d14:	f8c7 1284 	str.w	r1, [r7, #644]	; 0x284
 8007d18:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 8007d1c:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 8007d20:	4621      	mov	r1, r4
 8007d22:	1889      	adds	r1, r1, r2
 8007d24:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8007d28:	4629      	mov	r1, r5
 8007d2a:	eb43 0101 	adc.w	r1, r3, r1
 8007d2e:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8007d32:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 8007d36:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	1851      	adds	r1, r2, r1
 8007d3e:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8007d42:	4629      	mov	r1, r5
 8007d44:	eb43 0101 	adc.w	r1, r3, r1
 8007d48:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8007d4c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8007d50:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    int64_t h4 = f0f4_2 + f1f3_4 + f2f2   + f5f9_76 + f6f8_38 + f7f7_38;
 8007d54:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8007d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d5c:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	1884      	adds	r4, r0, r2
 8007d66:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 8007d6a:	eb41 0303 	adc.w	r3, r1, r3
 8007d6e:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8007d72:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8007d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7a:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 8007d7e:	4621      	mov	r1, r4
 8007d80:	1889      	adds	r1, r1, r2
 8007d82:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8007d86:	4629      	mov	r1, r5
 8007d88:	eb43 0101 	adc.w	r1, r3, r1
 8007d8c:	f8c7 126c 	str.w	r1, [r7, #620]	; 0x26c
 8007d90:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8007d94:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 8007d98:	4621      	mov	r1, r4
 8007d9a:	1889      	adds	r1, r1, r2
 8007d9c:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8007da0:	4629      	mov	r1, r5
 8007da2:	eb43 0101 	adc.w	r1, r3, r1
 8007da6:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 8007daa:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8007dae:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 8007db2:	4621      	mov	r1, r4
 8007db4:	1889      	adds	r1, r1, r2
 8007db6:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8007dba:	4629      	mov	r1, r5
 8007dbc:	eb43 0101 	adc.w	r1, r3, r1
 8007dc0:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 8007dc4:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 8007dc8:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8007dcc:	4621      	mov	r1, r4
 8007dce:	1851      	adds	r1, r2, r1
 8007dd0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	eb43 0101 	adc.w	r1, r3, r1
 8007dda:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8007dde:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8007de2:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    int64_t h5 = f0f5_2 + f1f4_2 + f2f3_2 + f6f9_38 + f7f8_38;
 8007de6:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8007dea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dee:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	1884      	adds	r4, r0, r2
 8007df8:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 8007dfc:	eb41 0303 	adc.w	r3, r1, r3
 8007e00:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8007e04:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 8007e10:	4621      	mov	r1, r4
 8007e12:	1889      	adds	r1, r1, r2
 8007e14:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8007e18:	4629      	mov	r1, r5
 8007e1a:	eb43 0101 	adc.w	r1, r3, r1
 8007e1e:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8007e22:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 8007e26:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	1889      	adds	r1, r1, r2
 8007e2e:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 8007e32:	4629      	mov	r1, r5
 8007e34:	eb43 0101 	adc.w	r1, r3, r1
 8007e38:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 8007e3c:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 8007e40:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8007e44:	4621      	mov	r1, r4
 8007e46:	1851      	adds	r1, r2, r1
 8007e48:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	eb43 0101 	adc.w	r1, r3, r1
 8007e52:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 8007e56:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8007e5a:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    int64_t h6 = f0f6_2 + f1f5_4 + f2f4_2 + f3f3_2 + f7f9_76 + f8f8_19;
 8007e5e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8007e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e66:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8007e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6e:	1884      	adds	r4, r0, r2
 8007e70:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 8007e74:	eb41 0303 	adc.w	r3, r1, r3
 8007e78:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8007e7c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 8007e88:	4621      	mov	r1, r4
 8007e8a:	1889      	adds	r1, r1, r2
 8007e8c:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8007e90:	4629      	mov	r1, r5
 8007e92:	eb43 0101 	adc.w	r1, r3, r1
 8007e96:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 8007e9a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	1889      	adds	r1, r1, r2
 8007eaa:	f8c7 1228 	str.w	r1, [r7, #552]	; 0x228
 8007eae:	4629      	mov	r1, r5
 8007eb0:	eb43 0101 	adc.w	r1, r3, r1
 8007eb4:	f8c7 122c 	str.w	r1, [r7, #556]	; 0x22c
 8007eb8:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 8007ebc:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	1889      	adds	r1, r1, r2
 8007ec4:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8007ec8:	4629      	mov	r1, r5
 8007eca:	eb43 0101 	adc.w	r1, r3, r1
 8007ece:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 8007ed2:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 8007ed6:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 8007eda:	4621      	mov	r1, r4
 8007edc:	1851      	adds	r1, r2, r1
 8007ede:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	eb43 0101 	adc.w	r1, r3, r1
 8007ee8:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8007eec:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8007ef0:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    int64_t h7 = f0f7_2 + f1f6_2 + f2f5_2 + f3f4_2 + f8f9_38;
 8007ef4:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8007ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007efc:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	1884      	adds	r4, r0, r2
 8007f06:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 8007f0a:	eb41 0303 	adc.w	r3, r1, r3
 8007f0e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8007f12:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8007f1e:	4621      	mov	r1, r4
 8007f20:	1889      	adds	r1, r1, r2
 8007f22:	f8c7 1210 	str.w	r1, [r7, #528]	; 0x210
 8007f26:	4629      	mov	r1, r5
 8007f28:	eb43 0101 	adc.w	r1, r3, r1
 8007f2c:	f8c7 1214 	str.w	r1, [r7, #532]	; 0x214
 8007f30:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	1889      	adds	r1, r1, r2
 8007f40:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8007f44:	4629      	mov	r1, r5
 8007f46:	eb43 0101 	adc.w	r1, r3, r1
 8007f4a:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8007f4e:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8007f52:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 8007f56:	4621      	mov	r1, r4
 8007f58:	1851      	adds	r1, r2, r1
 8007f5a:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8007f5e:	4629      	mov	r1, r5
 8007f60:	eb43 0101 	adc.w	r1, r3, r1
 8007f64:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8007f68:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8007f6c:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    int64_t h8 = f0f8_2 + f1f7_4 + f2f6_2 + f3f5_4 + f4f4   + f9f9_38;
 8007f70:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8007f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f78:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	1884      	adds	r4, r0, r2
 8007f82:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8007f86:	eb41 0303 	adc.w	r3, r1, r3
 8007f8a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8007f8e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	1889      	adds	r1, r1, r2
 8007f9e:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	eb43 0101 	adc.w	r1, r3, r1
 8007fa8:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 8007fac:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 8007fb8:	4621      	mov	r1, r4
 8007fba:	1889      	adds	r1, r1, r2
 8007fbc:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	eb43 0101 	adc.w	r1, r3, r1
 8007fc6:	f8c7 11f4 	str.w	r1, [r7, #500]	; 0x1f4
 8007fca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	1889      	adds	r1, r1, r2
 8007fda:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8007fde:	4629      	mov	r1, r5
 8007fe0:	eb43 0101 	adc.w	r1, r3, r1
 8007fe4:	f8c7 11ec 	str.w	r1, [r7, #492]	; 0x1ec
 8007fe8:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8007fec:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	1851      	adds	r1, r2, r1
 8007ff4:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	eb43 0101 	adc.w	r1, r3, r1
 8007ffe:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8008002:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8008006:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    int64_t h9 = f0f9_2 + f1f8_2 + f2f7_2 + f3f6_2 + f4f5_2;
 800800a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800800e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008012:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	1884      	adds	r4, r0, r2
 800801c:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 8008020:	eb41 0303 	adc.w	r3, r1, r3
 8008024:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008028:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8008034:	4621      	mov	r1, r4
 8008036:	1889      	adds	r1, r1, r2
 8008038:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 800803c:	4629      	mov	r1, r5
 800803e:	eb43 0101 	adc.w	r1, r3, r1
 8008042:	f8c7 11dc 	str.w	r1, [r7, #476]	; 0x1dc
 8008046:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8008052:	4621      	mov	r1, r4
 8008054:	1889      	adds	r1, r1, r2
 8008056:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 800805a:	4629      	mov	r1, r5
 800805c:	eb43 0101 	adc.w	r1, r3, r1
 8008060:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 8008064:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 8008070:	4621      	mov	r1, r4
 8008072:	1851      	adds	r1, r2, r1
 8008074:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8008078:	4629      	mov	r1, r5
 800807a:	eb43 0101 	adc.w	r1, r3, r1
 800807e:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8008082:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8008086:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    int64_t carry5;
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;
    h0 += h0;
 800808a:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 800808e:	1891      	adds	r1, r2, r2
 8008090:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8008094:	415b      	adcs	r3, r3
 8008096:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800809a:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800809e:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h1 += h1;
 80080a2:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 80080a6:	1891      	adds	r1, r2, r2
 80080a8:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80080ac:	415b      	adcs	r3, r3
 80080ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080b2:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80080b6:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h2 += h2;
 80080ba:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 80080be:	1891      	adds	r1, r2, r2
 80080c0:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80080c4:	415b      	adcs	r3, r3
 80080c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80080ca:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80080ce:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    h3 += h3;
 80080d2:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 80080d6:	1891      	adds	r1, r2, r2
 80080d8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80080dc:	415b      	adcs	r3, r3
 80080de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080e2:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80080e6:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    h4 += h4;
 80080ea:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 80080ee:	1891      	adds	r1, r2, r2
 80080f0:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80080f4:	415b      	adcs	r3, r3
 80080f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80080fa:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80080fe:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    h5 += h5;
 8008102:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8008106:	1891      	adds	r1, r2, r2
 8008108:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 800810c:	415b      	adcs	r3, r3
 800810e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008112:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8008116:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h6 += h6;
 800811a:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 800811e:	1891      	adds	r1, r2, r2
 8008120:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8008124:	415b      	adcs	r3, r3
 8008126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800812a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800812e:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    h7 += h7;
 8008132:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8008136:	1891      	adds	r1, r2, r2
 8008138:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800813c:	415b      	adcs	r3, r3
 800813e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008142:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8008146:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    h8 += h8;
 800814a:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 800814e:	1891      	adds	r1, r2, r2
 8008150:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008154:	415b      	adcs	r3, r3
 8008156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800815a:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800815e:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    h9 += h9;
 8008162:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8008166:	1891      	adds	r1, r2, r2
 8008168:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800816c:	415b      	adcs	r3, r3
 800816e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008172:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8008176:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 800817a:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 800817e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8008182:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8008186:	f143 0300 	adc.w	r3, r3, #0
 800818a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800818e:	f04f 0200 	mov.w	r2, #0
 8008192:	f04f 0300 	mov.w	r3, #0
 8008196:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 800819a:	4621      	mov	r1, r4
 800819c:	0e8a      	lsrs	r2, r1, #26
 800819e:	4629      	mov	r1, r5
 80081a0:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80081a4:	4629      	mov	r1, r5
 80081a6:	168b      	asrs	r3, r1, #26
 80081a8:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    h1 += carry0;
 80081ac:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	; 0x370
 80081b0:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80081b4:	1884      	adds	r4, r0, r2
 80081b6:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80081ba:	eb41 0303 	adc.w	r3, r1, r3
 80081be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081c2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80081c6:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h0 -= carry0 << 26;
 80081ca:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80081ce:	f04f 0000 	mov.w	r0, #0
 80081d2:	f04f 0100 	mov.w	r1, #0
 80081d6:	0699      	lsls	r1, r3, #26
 80081d8:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80081dc:	0690      	lsls	r0, r2, #26
 80081de:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 80081e2:	1a14      	subs	r4, r2, r0
 80081e4:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80081e8:	eb63 0301 	sbc.w	r3, r3, r1
 80081ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80081f0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80081f4:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 80081f8:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 80081fc:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8008200:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 8008204:	f143 0300 	adc.w	r3, r3, #0
 8008208:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800820c:	f04f 0200 	mov.w	r2, #0
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 8008218:	4621      	mov	r1, r4
 800821a:	0e8a      	lsrs	r2, r1, #26
 800821c:	4629      	mov	r1, r5
 800821e:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8008222:	4629      	mov	r1, r5
 8008224:	168b      	asrs	r3, r1, #26
 8008226:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
    h5 += carry4;
 800822a:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	; 0x350
 800822e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8008232:	1884      	adds	r4, r0, r2
 8008234:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8008238:	eb41 0303 	adc.w	r3, r1, r3
 800823c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008240:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8008244:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h4 -= carry4 << 26;
 8008248:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800824c:	f04f 0000 	mov.w	r0, #0
 8008250:	f04f 0100 	mov.w	r1, #0
 8008254:	0699      	lsls	r1, r3, #26
 8008256:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 800825a:	0690      	lsls	r0, r2, #26
 800825c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8008260:	1a14      	subs	r4, r2, r0
 8008262:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008266:	eb63 0301 	sbc.w	r3, r3, r1
 800826a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800826e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8008272:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 8008276:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 800827a:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 800827e:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8008282:	f143 0300 	adc.w	r3, r3, #0
 8008286:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800828a:	f04f 0200 	mov.w	r2, #0
 800828e:	f04f 0300 	mov.w	r3, #0
 8008292:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8008296:	4621      	mov	r1, r4
 8008298:	0e4a      	lsrs	r2, r1, #25
 800829a:	4629      	mov	r1, r5
 800829c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80082a0:	4629      	mov	r1, r5
 80082a2:	164b      	asrs	r3, r1, #25
 80082a4:	e9c7 23c6 	strd	r2, r3, [r7, #792]	; 0x318
    h2 += carry1;
 80082a8:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	; 0x368
 80082ac:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 80082b0:	1884      	adds	r4, r0, r2
 80082b2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80082b6:	eb41 0303 	adc.w	r3, r1, r3
 80082ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80082be:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80082c2:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    h1 -= carry1 << 25;
 80082c6:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 80082ca:	f04f 0000 	mov.w	r0, #0
 80082ce:	f04f 0100 	mov.w	r1, #0
 80082d2:	0659      	lsls	r1, r3, #25
 80082d4:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80082d8:	0650      	lsls	r0, r2, #25
 80082da:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 80082de:	1a14      	subs	r4, r2, r0
 80082e0:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80082e4:	eb63 0301 	sbc.w	r3, r3, r1
 80082e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082ec:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80082f0:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 80082f4:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 80082f8:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80082fc:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8008300:	f143 0300 	adc.w	r3, r3, #0
 8008304:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8008308:	f04f 0200 	mov.w	r2, #0
 800830c:	f04f 0300 	mov.w	r3, #0
 8008310:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8008314:	4621      	mov	r1, r4
 8008316:	0e4a      	lsrs	r2, r1, #25
 8008318:	4629      	mov	r1, r5
 800831a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800831e:	4629      	mov	r1, r5
 8008320:	164b      	asrs	r3, r1, #25
 8008322:	e9c7 23c4 	strd	r2, r3, [r7, #784]	; 0x310
    h6 += carry5;
 8008326:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 800832a:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 800832e:	1884      	adds	r4, r0, r2
 8008330:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008334:	eb41 0303 	adc.w	r3, r1, r3
 8008338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800833c:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8008340:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    h5 -= carry5 << 25;
 8008344:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8008348:	f04f 0000 	mov.w	r0, #0
 800834c:	f04f 0100 	mov.w	r1, #0
 8008350:	0659      	lsls	r1, r3, #25
 8008352:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8008356:	0650      	lsls	r0, r2, #25
 8008358:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 800835c:	1a14      	subs	r4, r2, r0
 800835e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8008362:	eb63 0301 	sbc.w	r3, r3, r1
 8008366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800836a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800836e:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 8008372:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8008376:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 800837a:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 800837e:	f143 0300 	adc.w	r3, r3, #0
 8008382:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8008386:	f04f 0200 	mov.w	r2, #0
 800838a:	f04f 0300 	mov.w	r3, #0
 800838e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8008392:	4621      	mov	r1, r4
 8008394:	0e8a      	lsrs	r2, r1, #26
 8008396:	4629      	mov	r1, r5
 8008398:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 800839c:	4629      	mov	r1, r5
 800839e:	168b      	asrs	r3, r1, #26
 80083a0:	e9c7 23c2 	strd	r2, r3, [r7, #776]	; 0x308
    h3 += carry2;
 80083a4:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 80083a8:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80083ac:	1884      	adds	r4, r0, r2
 80083ae:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80083b2:	eb41 0303 	adc.w	r3, r1, r3
 80083b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083ba:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80083be:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    h2 -= carry2 << 26;
 80083c2:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80083c6:	f04f 0000 	mov.w	r0, #0
 80083ca:	f04f 0100 	mov.w	r1, #0
 80083ce:	0699      	lsls	r1, r3, #26
 80083d0:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80083d4:	0690      	lsls	r0, r2, #26
 80083d6:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 80083da:	1a14      	subs	r4, r2, r0
 80083dc:	67bc      	str	r4, [r7, #120]	; 0x78
 80083de:	eb63 0301 	sbc.w	r3, r3, r1
 80083e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083e4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80083e8:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 80083ec:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 80083f0:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80083f4:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 80083f8:	f143 0300 	adc.w	r3, r3, #0
 80083fc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008400:	f04f 0200 	mov.w	r2, #0
 8008404:	f04f 0300 	mov.w	r3, #0
 8008408:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 800840c:	4621      	mov	r1, r4
 800840e:	0e8a      	lsrs	r2, r1, #26
 8008410:	4629      	mov	r1, r5
 8008412:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8008416:	4629      	mov	r1, r5
 8008418:	168b      	asrs	r3, r1, #26
 800841a:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
    h7 += carry6;
 800841e:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8008422:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8008426:	1884      	adds	r4, r0, r2
 8008428:	673c      	str	r4, [r7, #112]	; 0x70
 800842a:	eb41 0303 	adc.w	r3, r1, r3
 800842e:	677b      	str	r3, [r7, #116]	; 0x74
 8008430:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8008434:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    h6 -= carry6 << 26;
 8008438:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 800843c:	f04f 0000 	mov.w	r0, #0
 8008440:	f04f 0100 	mov.w	r1, #0
 8008444:	0699      	lsls	r1, r3, #26
 8008446:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 800844a:	0690      	lsls	r0, r2, #26
 800844c:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8008450:	1a14      	subs	r4, r2, r0
 8008452:	66bc      	str	r4, [r7, #104]	; 0x68
 8008454:	eb63 0301 	sbc.w	r3, r3, r1
 8008458:	66fb      	str	r3, [r7, #108]	; 0x6c
 800845a:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800845e:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8008462:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8008466:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 800846a:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800846e:	f143 0300 	adc.w	r3, r3, #0
 8008472:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 8008482:	4621      	mov	r1, r4
 8008484:	0e4a      	lsrs	r2, r1, #25
 8008486:	4629      	mov	r1, r5
 8008488:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800848c:	4629      	mov	r1, r5
 800848e:	164b      	asrs	r3, r1, #25
 8008490:	e9c7 23be 	strd	r2, r3, [r7, #760]	; 0x2f8
    h4 += carry3;
 8008494:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	; 0x358
 8008498:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 800849c:	1884      	adds	r4, r0, r2
 800849e:	663c      	str	r4, [r7, #96]	; 0x60
 80084a0:	eb41 0303 	adc.w	r3, r1, r3
 80084a4:	667b      	str	r3, [r7, #100]	; 0x64
 80084a6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80084aa:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    h3 -= carry3 << 25;
 80084ae:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 80084b2:	f04f 0000 	mov.w	r0, #0
 80084b6:	f04f 0100 	mov.w	r1, #0
 80084ba:	0659      	lsls	r1, r3, #25
 80084bc:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80084c0:	0650      	lsls	r0, r2, #25
 80084c2:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 80084c6:	1a14      	subs	r4, r2, r0
 80084c8:	65bc      	str	r4, [r7, #88]	; 0x58
 80084ca:	eb63 0301 	sbc.w	r3, r3, r1
 80084ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084d0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80084d4:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 80084d8:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 80084dc:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80084e0:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 80084e4:	f143 0300 	adc.w	r3, r3, #0
 80084e8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80084ec:	f04f 0200 	mov.w	r2, #0
 80084f0:	f04f 0300 	mov.w	r3, #0
 80084f4:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80084f8:	4621      	mov	r1, r4
 80084fa:	0e4a      	lsrs	r2, r1, #25
 80084fc:	4629      	mov	r1, r5
 80084fe:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8008502:	4629      	mov	r1, r5
 8008504:	164b      	asrs	r3, r1, #25
 8008506:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
    h8 += carry7;
 800850a:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 800850e:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8008512:	1884      	adds	r4, r0, r2
 8008514:	653c      	str	r4, [r7, #80]	; 0x50
 8008516:	eb41 0303 	adc.w	r3, r1, r3
 800851a:	657b      	str	r3, [r7, #84]	; 0x54
 800851c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8008520:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    h7 -= carry7 << 25;
 8008524:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8008528:	f04f 0000 	mov.w	r0, #0
 800852c:	f04f 0100 	mov.w	r1, #0
 8008530:	0659      	lsls	r1, r3, #25
 8008532:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8008536:	0650      	lsls	r0, r2, #25
 8008538:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 800853c:	1a14      	subs	r4, r2, r0
 800853e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008540:	eb63 0301 	sbc.w	r3, r3, r1
 8008544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008546:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800854a:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 800854e:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8008552:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8008556:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 800855a:	f143 0300 	adc.w	r3, r3, #0
 800855e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8008562:	f04f 0200 	mov.w	r2, #0
 8008566:	f04f 0300 	mov.w	r3, #0
 800856a:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 800856e:	4621      	mov	r1, r4
 8008570:	0e8a      	lsrs	r2, r1, #26
 8008572:	4629      	mov	r1, r5
 8008574:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8008578:	4629      	mov	r1, r5
 800857a:	168b      	asrs	r3, r1, #26
 800857c:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
    h5 += carry4;
 8008580:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	; 0x350
 8008584:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8008588:	1884      	adds	r4, r0, r2
 800858a:	643c      	str	r4, [r7, #64]	; 0x40
 800858c:	eb41 0303 	adc.w	r3, r1, r3
 8008590:	647b      	str	r3, [r7, #68]	; 0x44
 8008592:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008596:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h4 -= carry4 << 26;
 800859a:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 800859e:	f04f 0000 	mov.w	r0, #0
 80085a2:	f04f 0100 	mov.w	r1, #0
 80085a6:	0699      	lsls	r1, r3, #26
 80085a8:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80085ac:	0690      	lsls	r0, r2, #26
 80085ae:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 80085b2:	1a14      	subs	r4, r2, r0
 80085b4:	63bc      	str	r4, [r7, #56]	; 0x38
 80085b6:	eb63 0301 	sbc.w	r3, r3, r1
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085bc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80085c0:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 80085c4:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 80085c8:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80085cc:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 80085d0:	f143 0300 	adc.w	r3, r3, #0
 80085d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80085d8:	f04f 0200 	mov.w	r2, #0
 80085dc:	f04f 0300 	mov.w	r3, #0
 80085e0:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 80085e4:	4621      	mov	r1, r4
 80085e6:	0e8a      	lsrs	r2, r1, #26
 80085e8:	4629      	mov	r1, r5
 80085ea:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80085ee:	4629      	mov	r1, r5
 80085f0:	168b      	asrs	r3, r1, #26
 80085f2:	e9c7 23ba 	strd	r2, r3, [r7, #744]	; 0x2e8
    h9 += carry8;
 80085f6:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 80085fa:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 80085fe:	1884      	adds	r4, r0, r2
 8008600:	633c      	str	r4, [r7, #48]	; 0x30
 8008602:	eb41 0303 	adc.w	r3, r1, r3
 8008606:	637b      	str	r3, [r7, #52]	; 0x34
 8008608:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800860c:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    h8 -= carry8 << 26;
 8008610:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8008614:	f04f 0000 	mov.w	r0, #0
 8008618:	f04f 0100 	mov.w	r1, #0
 800861c:	0699      	lsls	r1, r3, #26
 800861e:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8008622:	0690      	lsls	r0, r2, #26
 8008624:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8008628:	1a14      	subs	r4, r2, r0
 800862a:	62bc      	str	r4, [r7, #40]	; 0x28
 800862c:	eb63 0301 	sbc.w	r3, r3, r1
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008632:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008636:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 800863a:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 800863e:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8008642:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8008646:	f143 0300 	adc.w	r3, r3, #0
 800864a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	f04f 0300 	mov.w	r3, #0
 8008656:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 800865a:	4621      	mov	r1, r4
 800865c:	0e4a      	lsrs	r2, r1, #25
 800865e:	4629      	mov	r1, r5
 8008660:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8008664:	4629      	mov	r1, r5
 8008666:	164b      	asrs	r3, r1, #25
 8008668:	e9c7 23b8 	strd	r2, r3, [r7, #736]	; 0x2e0
    h0 += carry9 * 19;
 800866c:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8008670:	4622      	mov	r2, r4
 8008672:	462b      	mov	r3, r5
 8008674:	f04f 0000 	mov.w	r0, #0
 8008678:	f04f 0100 	mov.w	r1, #0
 800867c:	00d9      	lsls	r1, r3, #3
 800867e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008682:	00d0      	lsls	r0, r2, #3
 8008684:	4602      	mov	r2, r0
 8008686:	460b      	mov	r3, r1
 8008688:	1912      	adds	r2, r2, r4
 800868a:	eb45 0303 	adc.w	r3, r5, r3
 800868e:	1891      	adds	r1, r2, r2
 8008690:	6239      	str	r1, [r7, #32]
 8008692:	415b      	adcs	r3, r3
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
 8008696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800869a:	1911      	adds	r1, r2, r4
 800869c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 80086a0:	416b      	adcs	r3, r5
 80086a2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80086a6:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 80086aa:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 80086ae:	4621      	mov	r1, r4
 80086b0:	1851      	adds	r1, r2, r1
 80086b2:	61b9      	str	r1, [r7, #24]
 80086b4:	4629      	mov	r1, r5
 80086b6:	eb43 0101 	adc.w	r1, r3, r1
 80086ba:	61f9      	str	r1, [r7, #28]
 80086bc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80086c0:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h9 -= carry9 << 25;
 80086c4:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 80086c8:	f04f 0200 	mov.w	r2, #0
 80086cc:	f04f 0300 	mov.w	r3, #0
 80086d0:	064b      	lsls	r3, r1, #25
 80086d2:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 80086d6:	0642      	lsls	r2, r0, #25
 80086d8:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 80086dc:	1a84      	subs	r4, r0, r2
 80086de:	613c      	str	r4, [r7, #16]
 80086e0:	eb61 0303 	sbc.w	r3, r1, r3
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80086ea:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 80086ee:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 80086f2:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80086f6:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 80086fa:	f143 0300 	adc.w	r3, r3, #0
 80086fe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8008702:	f04f 0200 	mov.w	r2, #0
 8008706:	f04f 0300 	mov.w	r3, #0
 800870a:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 800870e:	4621      	mov	r1, r4
 8008710:	0e8a      	lsrs	r2, r1, #26
 8008712:	4629      	mov	r1, r5
 8008714:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8008718:	4629      	mov	r1, r5
 800871a:	168b      	asrs	r3, r1, #26
 800871c:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    h1 += carry0;
 8008720:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	; 0x370
 8008724:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8008728:	1884      	adds	r4, r0, r2
 800872a:	60bc      	str	r4, [r7, #8]
 800872c:	eb41 0303 	adc.w	r3, r1, r3
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008736:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h0 -= carry0 << 26;
 800873a:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	f04f 0300 	mov.w	r3, #0
 8008746:	068b      	lsls	r3, r1, #26
 8008748:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 800874c:	0682      	lsls	r2, r0, #26
 800874e:	e9d7 01de 	ldrd	r0, r1, [r7, #888]	; 0x378
 8008752:	1a84      	subs	r4, r0, r2
 8008754:	603c      	str	r4, [r7, #0]
 8008756:	eb61 0303 	sbc.w	r3, r1, r3
 800875a:	607b      	str	r3, [r7, #4]
 800875c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008760:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h[0] = (int32_t) h0;
 8008764:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 8008772:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3304      	adds	r3, #4
 800877a:	f507 725c 	add.w	r2, r7, #880	; 0x370
 800877e:	6812      	ldr	r2, [r2, #0]
 8008780:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 8008782:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3308      	adds	r3, #8
 800878a:	f507 725a 	add.w	r2, r7, #872	; 0x368
 800878e:	6812      	ldr	r2, [r2, #0]
 8008790:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 8008792:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	330c      	adds	r3, #12
 800879a:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800879e:	6812      	ldr	r2, [r2, #0]
 80087a0:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 80087a2:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3310      	adds	r3, #16
 80087aa:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 80087b2:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3314      	adds	r3, #20
 80087ba:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80087be:	6812      	ldr	r2, [r2, #0]
 80087c0:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 80087c2:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3318      	adds	r3, #24
 80087ca:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80087ce:	6812      	ldr	r2, [r2, #0]
 80087d0:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 80087d2:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	331c      	adds	r3, #28
 80087da:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80087de:	6812      	ldr	r2, [r2, #0]
 80087e0:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 80087e2:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3320      	adds	r3, #32
 80087ea:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80087ee:	6812      	ldr	r2, [r2, #0]
 80087f0:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 80087f2:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3324      	adds	r3, #36	; 0x24
 80087fa:	f507 724c 	add.w	r2, r7, #816	; 0x330
 80087fe:	6812      	ldr	r2, [r2, #0]
 8008800:	601a      	str	r2, [r3, #0]
}
 8008802:	bf00      	nop
 8008804:	f207 579c 	addw	r7, r7, #1436	; 0x59c
 8008808:	46bd      	mov	sp, r7
 800880a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800880e:	4770      	bx	lr

08008810 <fe_sub>:

Postconditions:
   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_sub(fe h, const fe f, const fe g) {
 8008810:	b480      	push	{r7}
 8008812:	b0a3      	sub	sp, #140	; 0x8c
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
    int32_t f0 = f[0];
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    int32_t f1 = f[1];
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t f2 = f[2];
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t f3 = f[3];
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t f4 = f[4];
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t f5 = f[5];
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	673b      	str	r3, [r7, #112]	; 0x70
    int32_t f6 = f[6];
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t f7 = f[7];
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t f8 = f[8];
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	6a1b      	ldr	r3, [r3, #32]
 8008854:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t f9 = f[9];
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	663b      	str	r3, [r7, #96]	; 0x60
    int32_t g0 = g[0];
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t g1 = g[1];
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t g2 = g[2];
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t g3 = g[3];
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t g4 = g[4];
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t g5 = g[5];
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t g6 = g[6];
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t g7 = g[7];
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t g8 = g[8];
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a1b      	ldr	r3, [r3, #32]
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t g9 = g[9];
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h0 = f0 - g0;
 8008898:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800889c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t h1 = f1 - g1;
 80088a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h2 = f2 - g2;
 80088ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80088ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h3 = f3 - g3;
 80088b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80088b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h4 = f4 - g4;
 80088bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80088be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h5 = f5 - g5;
 80088c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80088c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	623b      	str	r3, [r7, #32]
    int32_t h6 = f6 - g6;
 80088cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	61fb      	str	r3, [r7, #28]
    int32_t h7 = f7 - g7;
 80088d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	61bb      	str	r3, [r7, #24]
    int32_t h8 = f8 - g8;
 80088dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80088de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	617b      	str	r3, [r7, #20]
    int32_t h9 = f9 - g9;
 80088e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	613b      	str	r3, [r7, #16]

    h[0] = h0;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f0:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3304      	adds	r3, #4
 80088f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088f8:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3308      	adds	r3, #8
 80088fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008900:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	330c      	adds	r3, #12
 8008906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008908:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3310      	adds	r3, #16
 800890e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008910:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3314      	adds	r3, #20
 8008916:	6a3a      	ldr	r2, [r7, #32]
 8008918:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3318      	adds	r3, #24
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	331c      	adds	r3, #28
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3320      	adds	r3, #32
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3324      	adds	r3, #36	; 0x24
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	601a      	str	r2, [r3, #0]
}
 800893a:	bf00      	nop
 800893c:	378c      	adds	r7, #140	; 0x8c
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <fe_tobytes>:

  Have q+2^(-255)x = 2^(-255)(h + 19 2^(-25) h9 + 2^(-1))
  so floor(2^(-255)(h + 19 2^(-25) h9 + 2^(-1))) = q.
*/

void fe_tobytes(unsigned char *s, const fe h) {
 8008946:	b480      	push	{r7}
 8008948:	b099      	sub	sp, #100	; 0x64
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
    int32_t h0 = h[0];
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t h1 = h[1];
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t h2 = h[2];
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t h3 = h[3];
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t h4 = h[4];
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t h5 = h[5];
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t h6 = h[6];
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t h7 = h[7];
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t h8 = h[8];
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t h9 = h[9];
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t carry5;
    int32_t carry6;
    int32_t carry7;
    int32_t carry8;
    int32_t carry9;
    q = (19 * h9 + (((int32_t) 1) << 24)) >> 25;
 800898c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800898e:	4613      	mov	r3, r2
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	4413      	add	r3, r2
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	4413      	add	r3, r2
 8008998:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800899c:	165b      	asrs	r3, r3, #25
 800899e:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h0 + q) >> 26;
 80089a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a4:	4413      	add	r3, r2
 80089a6:	169b      	asrs	r3, r3, #26
 80089a8:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h1 + q) >> 25;
 80089aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ae:	4413      	add	r3, r2
 80089b0:	165b      	asrs	r3, r3, #25
 80089b2:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h2 + q) >> 26;
 80089b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	4413      	add	r3, r2
 80089ba:	169b      	asrs	r3, r3, #26
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h3 + q) >> 25;
 80089be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c2:	4413      	add	r3, r2
 80089c4:	165b      	asrs	r3, r3, #25
 80089c6:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h4 + q) >> 26;
 80089c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	4413      	add	r3, r2
 80089ce:	169b      	asrs	r3, r3, #26
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h5 + q) >> 25;
 80089d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d6:	4413      	add	r3, r2
 80089d8:	165b      	asrs	r3, r3, #25
 80089da:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h6 + q) >> 26;
 80089dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e0:	4413      	add	r3, r2
 80089e2:	169b      	asrs	r3, r3, #26
 80089e4:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h7 + q) >> 25;
 80089e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ea:	4413      	add	r3, r2
 80089ec:	165b      	asrs	r3, r3, #25
 80089ee:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h8 + q) >> 26;
 80089f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f4:	4413      	add	r3, r2
 80089f6:	169b      	asrs	r3, r3, #26
 80089f8:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h9 + q) >> 25;
 80089fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fe:	4413      	add	r3, r2
 8008a00:	165b      	asrs	r3, r3, #25
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
    /* Goal: Output h-(2^255-19)q, which is between 0 and 2^255-20. */
    h0 += 19 * q;
 8008a04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a06:	4613      	mov	r3, r2
 8008a08:	00db      	lsls	r3, r3, #3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	4413      	add	r3, r2
 8008a10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a12:	4413      	add	r3, r2
 8008a14:	65fb      	str	r3, [r7, #92]	; 0x5c
    /* Goal: Output h-2^255 q, which is between 0 and 2^255-20. */
    carry0 = h0 >> 26;
 8008a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a18:	169b      	asrs	r3, r3, #26
 8008a1a:	633b      	str	r3, [r7, #48]	; 0x30
    h1 += carry0;
 8008a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	4413      	add	r3, r2
 8008a22:	65bb      	str	r3, [r7, #88]	; 0x58
    h0 -= carry0 << 26;
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	069b      	lsls	r3, r3, #26
 8008a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    carry1 = h1 >> 25;
 8008a2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a30:	165b      	asrs	r3, r3, #25
 8008a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    h2 += carry1;
 8008a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a38:	4413      	add	r3, r2
 8008a3a:	657b      	str	r3, [r7, #84]	; 0x54
    h1 -= carry1 << 25;
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	065b      	lsls	r3, r3, #25
 8008a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	65bb      	str	r3, [r7, #88]	; 0x58
    carry2 = h2 >> 26;
 8008a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a48:	169b      	asrs	r3, r3, #26
 8008a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    h3 += carry2;
 8008a4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	4413      	add	r3, r2
 8008a52:	653b      	str	r3, [r7, #80]	; 0x50
    h2 -= carry2 << 26;
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	069b      	lsls	r3, r3, #26
 8008a58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	657b      	str	r3, [r7, #84]	; 0x54
    carry3 = h3 >> 25;
 8008a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a60:	165b      	asrs	r3, r3, #25
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24
    h4 += carry3;
 8008a64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	4413      	add	r3, r2
 8008a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
    h3 -= carry3 << 25;
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	065b      	lsls	r3, r3, #25
 8008a70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	653b      	str	r3, [r7, #80]	; 0x50
    carry4 = h4 >> 26;
 8008a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a78:	169b      	asrs	r3, r3, #26
 8008a7a:	623b      	str	r3, [r7, #32]
    h5 += carry4;
 8008a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	4413      	add	r3, r2
 8008a82:	64bb      	str	r3, [r7, #72]	; 0x48
    h4 -= carry4 << 26;
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	069b      	lsls	r3, r3, #26
 8008a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    carry5 = h5 >> 25;
 8008a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a90:	165b      	asrs	r3, r3, #25
 8008a92:	61fb      	str	r3, [r7, #28]
    h6 += carry5;
 8008a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	4413      	add	r3, r2
 8008a9a:	647b      	str	r3, [r7, #68]	; 0x44
    h5 -= carry5 << 25;
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	065b      	lsls	r3, r3, #25
 8008aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	64bb      	str	r3, [r7, #72]	; 0x48
    carry6 = h6 >> 26;
 8008aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa8:	169b      	asrs	r3, r3, #26
 8008aaa:	61bb      	str	r3, [r7, #24]
    h7 += carry6;
 8008aac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	643b      	str	r3, [r7, #64]	; 0x40
    h6 -= carry6 << 26;
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	069b      	lsls	r3, r3, #26
 8008ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	647b      	str	r3, [r7, #68]	; 0x44
    carry7 = h7 >> 25;
 8008abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ac0:	165b      	asrs	r3, r3, #25
 8008ac2:	617b      	str	r3, [r7, #20]
    h8 += carry7;
 8008ac4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	4413      	add	r3, r2
 8008aca:	63fb      	str	r3, [r7, #60]	; 0x3c
    h7 -= carry7 << 25;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	065b      	lsls	r3, r3, #25
 8008ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	643b      	str	r3, [r7, #64]	; 0x40
    carry8 = h8 >> 26;
 8008ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad8:	169b      	asrs	r3, r3, #26
 8008ada:	613b      	str	r3, [r7, #16]
    h9 += carry8;
 8008adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	63bb      	str	r3, [r7, #56]	; 0x38
    h8 -= carry8 << 26;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	069b      	lsls	r3, r3, #26
 8008ae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    carry9 = h9 >> 25;
 8008aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af0:	165b      	asrs	r3, r3, #25
 8008af2:	60fb      	str	r3, [r7, #12]
    h9 -= carry9 << 25;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	065b      	lsls	r3, r3, #25
 8008af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	63bb      	str	r3, [r7, #56]	; 0x38
    Goal: Output h0+...+2^255 h10-2^255 q, which is between 0 and 2^255-20.
    Have h0+...+2^230 h9 between 0 and 2^255-1;
    evidently 2^255 h10-2^255 q = 0.
    Goal: Output h0+...+2^230 h9.
    */
    s[0] = (unsigned char) (h0 >> 0);
 8008afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	701a      	strb	r2, [r3, #0]
    s[1] = (unsigned char) (h0 >> 8);
 8008b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b08:	121a      	asrs	r2, r3, #8
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	b2d2      	uxtb	r2, r2
 8008b10:	701a      	strb	r2, [r3, #0]
    s[2] = (unsigned char) (h0 >> 16);
 8008b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b14:	141a      	asrs	r2, r3, #16
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	3302      	adds	r3, #2
 8008b1a:	b2d2      	uxtb	r2, r2
 8008b1c:	701a      	strb	r2, [r3, #0]
    s[3] = (unsigned char) ((h0 >> 24) | (h1 << 2));
 8008b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b20:	161b      	asrs	r3, r3, #24
 8008b22:	b25a      	sxtb	r2, r3
 8008b24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	b25b      	sxtb	r3, r3
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	b25a      	sxtb	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3303      	adds	r3, #3
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	701a      	strb	r2, [r3, #0]
    s[4] = (unsigned char) (h1 >> 6);
 8008b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b38:	119a      	asrs	r2, r3, #6
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]
    s[5] = (unsigned char) (h1 >> 14);
 8008b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b44:	139a      	asrs	r2, r3, #14
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3305      	adds	r3, #5
 8008b4a:	b2d2      	uxtb	r2, r2
 8008b4c:	701a      	strb	r2, [r3, #0]
    s[6] = (unsigned char) ((h1 >> 22) | (h2 << 3));
 8008b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b50:	159b      	asrs	r3, r3, #22
 8008b52:	b25a      	sxtb	r2, r3
 8008b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b56:	00db      	lsls	r3, r3, #3
 8008b58:	b25b      	sxtb	r3, r3
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	b25a      	sxtb	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	3306      	adds	r3, #6
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]
    s[7] = (unsigned char) (h2 >> 5);
 8008b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b68:	115a      	asrs	r2, r3, #5
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3307      	adds	r3, #7
 8008b6e:	b2d2      	uxtb	r2, r2
 8008b70:	701a      	strb	r2, [r3, #0]
    s[8] = (unsigned char) (h2 >> 13);
 8008b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b74:	135a      	asrs	r2, r3, #13
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3308      	adds	r3, #8
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
    s[9] = (unsigned char) ((h2 >> 21) | (h3 << 5));
 8008b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b80:	155b      	asrs	r3, r3, #21
 8008b82:	b25a      	sxtb	r2, r3
 8008b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b86:	015b      	lsls	r3, r3, #5
 8008b88:	b25b      	sxtb	r3, r3
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	b25a      	sxtb	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3309      	adds	r3, #9
 8008b92:	b2d2      	uxtb	r2, r2
 8008b94:	701a      	strb	r2, [r3, #0]
    s[10] = (unsigned char) (h3 >> 3);
 8008b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b98:	10da      	asrs	r2, r3, #3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	330a      	adds	r3, #10
 8008b9e:	b2d2      	uxtb	r2, r2
 8008ba0:	701a      	strb	r2, [r3, #0]
    s[11] = (unsigned char) (h3 >> 11);
 8008ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba4:	12da      	asrs	r2, r3, #11
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	330b      	adds	r3, #11
 8008baa:	b2d2      	uxtb	r2, r2
 8008bac:	701a      	strb	r2, [r3, #0]
    s[12] = (unsigned char) ((h3 >> 19) | (h4 << 6));
 8008bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bb0:	14db      	asrs	r3, r3, #19
 8008bb2:	b25a      	sxtb	r2, r3
 8008bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb6:	019b      	lsls	r3, r3, #6
 8008bb8:	b25b      	sxtb	r3, r3
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	b25a      	sxtb	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	330c      	adds	r3, #12
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	701a      	strb	r2, [r3, #0]
    s[13] = (unsigned char) (h4 >> 2);
 8008bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc8:	109a      	asrs	r2, r3, #2
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	330d      	adds	r3, #13
 8008bce:	b2d2      	uxtb	r2, r2
 8008bd0:	701a      	strb	r2, [r3, #0]
    s[14] = (unsigned char) (h4 >> 10);
 8008bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bd4:	129a      	asrs	r2, r3, #10
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	330e      	adds	r3, #14
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
    s[15] = (unsigned char) (h4 >> 18);
 8008bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be0:	149a      	asrs	r2, r3, #18
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	330f      	adds	r3, #15
 8008be6:	b2d2      	uxtb	r2, r2
 8008be8:	701a      	strb	r2, [r3, #0]
    s[16] = (unsigned char) (h5 >> 0);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	3310      	adds	r3, #16
 8008bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bf0:	b2d2      	uxtb	r2, r2
 8008bf2:	701a      	strb	r2, [r3, #0]
    s[17] = (unsigned char) (h5 >> 8);
 8008bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bf6:	121a      	asrs	r2, r3, #8
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3311      	adds	r3, #17
 8008bfc:	b2d2      	uxtb	r2, r2
 8008bfe:	701a      	strb	r2, [r3, #0]
    s[18] = (unsigned char) (h5 >> 16);
 8008c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c02:	141a      	asrs	r2, r3, #16
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3312      	adds	r3, #18
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	701a      	strb	r2, [r3, #0]
    s[19] = (unsigned char) ((h5 >> 24) | (h6 << 1));
 8008c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0e:	161b      	asrs	r3, r3, #24
 8008c10:	b25a      	sxtb	r2, r3
 8008c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	b25b      	sxtb	r3, r3
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	b25a      	sxtb	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3313      	adds	r3, #19
 8008c20:	b2d2      	uxtb	r2, r2
 8008c22:	701a      	strb	r2, [r3, #0]
    s[20] = (unsigned char) (h6 >> 7);
 8008c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c26:	11da      	asrs	r2, r3, #7
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3314      	adds	r3, #20
 8008c2c:	b2d2      	uxtb	r2, r2
 8008c2e:	701a      	strb	r2, [r3, #0]
    s[21] = (unsigned char) (h6 >> 15);
 8008c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c32:	13da      	asrs	r2, r3, #15
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3315      	adds	r3, #21
 8008c38:	b2d2      	uxtb	r2, r2
 8008c3a:	701a      	strb	r2, [r3, #0]
    s[22] = (unsigned char) ((h6 >> 23) | (h7 << 3));
 8008c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c3e:	15db      	asrs	r3, r3, #23
 8008c40:	b25a      	sxtb	r2, r3
 8008c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	b25b      	sxtb	r3, r3
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	b25a      	sxtb	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	3316      	adds	r3, #22
 8008c50:	b2d2      	uxtb	r2, r2
 8008c52:	701a      	strb	r2, [r3, #0]
    s[23] = (unsigned char) (h7 >> 5);
 8008c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c56:	115a      	asrs	r2, r3, #5
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3317      	adds	r3, #23
 8008c5c:	b2d2      	uxtb	r2, r2
 8008c5e:	701a      	strb	r2, [r3, #0]
    s[24] = (unsigned char) (h7 >> 13);
 8008c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c62:	135a      	asrs	r2, r3, #13
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3318      	adds	r3, #24
 8008c68:	b2d2      	uxtb	r2, r2
 8008c6a:	701a      	strb	r2, [r3, #0]
    s[25] = (unsigned char) ((h7 >> 21) | (h8 << 4));
 8008c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c6e:	155b      	asrs	r3, r3, #21
 8008c70:	b25a      	sxtb	r2, r3
 8008c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c74:	011b      	lsls	r3, r3, #4
 8008c76:	b25b      	sxtb	r3, r3
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	b25a      	sxtb	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3319      	adds	r3, #25
 8008c80:	b2d2      	uxtb	r2, r2
 8008c82:	701a      	strb	r2, [r3, #0]
    s[26] = (unsigned char) (h8 >> 4);
 8008c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c86:	111a      	asrs	r2, r3, #4
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	331a      	adds	r3, #26
 8008c8c:	b2d2      	uxtb	r2, r2
 8008c8e:	701a      	strb	r2, [r3, #0]
    s[27] = (unsigned char) (h8 >> 12);
 8008c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c92:	131a      	asrs	r2, r3, #12
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	331b      	adds	r3, #27
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	701a      	strb	r2, [r3, #0]
    s[28] = (unsigned char) ((h8 >> 20) | (h9 << 6));
 8008c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9e:	151b      	asrs	r3, r3, #20
 8008ca0:	b25a      	sxtb	r2, r3
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	019b      	lsls	r3, r3, #6
 8008ca6:	b25b      	sxtb	r3, r3
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	b25a      	sxtb	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	331c      	adds	r3, #28
 8008cb0:	b2d2      	uxtb	r2, r2
 8008cb2:	701a      	strb	r2, [r3, #0]
    s[29] = (unsigned char) (h9 >> 2);
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	109a      	asrs	r2, r3, #2
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	331d      	adds	r3, #29
 8008cbc:	b2d2      	uxtb	r2, r2
 8008cbe:	701a      	strb	r2, [r3, #0]
    s[30] = (unsigned char) (h9 >> 10);
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	129a      	asrs	r2, r3, #10
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	331e      	adds	r3, #30
 8008cc8:	b2d2      	uxtb	r2, r2
 8008cca:	701a      	strb	r2, [r3, #0]
    s[31] = (unsigned char) (h9 >> 18);
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	149a      	asrs	r2, r3, #18
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	331f      	adds	r3, #31
 8008cd4:	b2d2      	uxtb	r2, r2
 8008cd6:	701a      	strb	r2, [r3, #0]
}
 8008cd8:	bf00      	nop
 8008cda:	3764      	adds	r7, #100	; 0x64
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <ge_add>:

/*
r = p + q
*/

void ge_add(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08e      	sub	sp, #56	; 0x38
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
    fe t0;
    fe_add(r->X, p->Y, p->X);
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	3328      	adds	r3, #40	; 0x28
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	f7f8 ff48 	bl	8001b8e <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	3328      	adds	r3, #40	; 0x28
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	f7ff fd80 	bl	8008810 <fe_sub>
    fe_mul(r->Z, r->X, q->YplusX);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3350      	adds	r3, #80	; 0x50
 8008d14:	68f9      	ldr	r1, [r7, #12]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7f9 fe17 	bl	800294c <fe_mul>
    fe_mul(r->Y, r->Y, q->YminusX);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3328      	adds	r3, #40	; 0x28
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f7f9 fe0c 	bl	800294c <fe_mul>
    fe_mul(r->T, q->T2d, p->T);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	3378      	adds	r3, #120	; 0x78
 8008d44:	461a      	mov	r2, r3
 8008d46:	f7f9 fe01 	bl	800294c <fe_mul>
    fe_mul(r->X, p->Z, q->Z);
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3350      	adds	r3, #80	; 0x50
 8008d56:	461a      	mov	r2, r3
 8008d58:	f7f9 fdf8 	bl	800294c <fe_mul>
    fe_add(t0, r->X, r->X);
 8008d5c:	68f9      	ldr	r1, [r7, #12]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	f107 0310 	add.w	r3, r7, #16
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7f8 ff12 	bl	8001b8e <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3328      	adds	r3, #40	; 0x28
 8008d76:	461a      	mov	r2, r3
 8008d78:	f7ff fd4a 	bl	8008810 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	3328      	adds	r3, #40	; 0x28
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	f7f8 fefe 	bl	8001b8e <fe_add>
    fe_add(r->Z, t0, r->T);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8008d9e:	f107 0310 	add.w	r3, r7, #16
 8008da2:	4619      	mov	r1, r3
 8008da4:	f7f8 fef3 	bl	8001b8e <fe_add>
    fe_sub(r->T, t0, r->T);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8008db4:	f107 0310 	add.w	r3, r7, #16
 8008db8:	4619      	mov	r1, r3
 8008dba:	f7ff fd29 	bl	8008810 <fe_sub>
}
 8008dbe:	bf00      	nop
 8008dc0:	3738      	adds	r7, #56	; 0x38
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <slide>:


static void slide(signed char *r, const unsigned char *a) {
 8008dc6:	b480      	push	{r7}
 8008dc8:	b087      	sub	sp, #28
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
    int i;
    int b;
    int k;

    for (i = 0; i < 256; ++i) {
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	e016      	b.n	8008e04 <slide+0x3e>
        r[i] = 1 & (a[i >> 3] >> (i & 7));
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	10db      	asrs	r3, r3, #3
 8008dda:	461a      	mov	r2, r3
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	4413      	add	r3, r2
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	fa42 f303 	asr.w	r3, r2, r3
 8008dee:	b25a      	sxtb	r2, r3
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	440b      	add	r3, r1
 8008df6:	f002 0201 	and.w	r2, r2, #1
 8008dfa:	b252      	sxtb	r2, r2
 8008dfc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 256; ++i) {
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	3301      	adds	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	2bff      	cmp	r3, #255	; 0xff
 8008e08:	dde5      	ble.n	8008dd6 <slide+0x10>
    }

    for (i = 0; i < 256; ++i)
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	617b      	str	r3, [r7, #20]
 8008e0e:	e0ab      	b.n	8008f68 <slide+0x1a2>
        if (r[i]) {
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	4413      	add	r3, r2
 8008e16:	f993 3000 	ldrsb.w	r3, [r3]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80a1 	beq.w	8008f62 <slide+0x19c>
            for (b = 1; b <= 6 && i + b < 256; ++b) {
 8008e20:	2301      	movs	r3, #1
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	e092      	b.n	8008f4c <slide+0x186>
                if (r[i + b]) {
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4413      	add	r3, r2
 8008e32:	f993 3000 	ldrsb.w	r3, [r3]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 8085 	beq.w	8008f46 <slide+0x180>
                    if (r[i] + (r[i + b] << b) <= 15) {
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	4413      	add	r3, r2
 8008e42:	f993 3000 	ldrsb.w	r3, [r3]
 8008e46:	4619      	mov	r1, r3
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	461a      	mov	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4413      	add	r3, r2
 8008e54:	f993 3000 	ldrsb.w	r3, [r3]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e60:	440b      	add	r3, r1
 8008e62:	2b0f      	cmp	r3, #15
 8008e64:	dc22      	bgt.n	8008eac <slide+0xe6>
                        r[i] += r[i + b] << b;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	6979      	ldr	r1, [r7, #20]
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	440b      	add	r3, r1
 8008e78:	4619      	mov	r1, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	440b      	add	r3, r1
 8008e7e:	f993 3000 	ldrsb.w	r3, [r3]
 8008e82:	4619      	mov	r1, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	fa01 f303 	lsl.w	r3, r1, r3
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	4413      	add	r3, r2
 8008e8e:	b2d9      	uxtb	r1, r3
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	4413      	add	r3, r2
 8008e96:	b24a      	sxtb	r2, r1
 8008e98:	701a      	strb	r2, [r3, #0]
                        r[i + b] = 0;
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e04c      	b.n	8008f46 <slide+0x180>
                    } else if (r[i] - (r[i + b] << b) >= -15) {
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f993 3000 	ldrsb.w	r3, [r3]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed0:	1acb      	subs	r3, r1, r3
 8008ed2:	f113 0f0f 	cmn.w	r3, #15
 8008ed6:	db43      	blt.n	8008f60 <slide+0x19a>
                        r[i] -= r[i + b] << b;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	f993 3000 	ldrsb.w	r3, [r3]
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	6979      	ldr	r1, [r7, #20]
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	440b      	add	r3, r1
 8008eea:	4619      	mov	r1, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	440b      	add	r3, r1
 8008ef0:	f993 3000 	ldrsb.w	r3, [r3]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	b2d9      	uxtb	r1, r3
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	4413      	add	r3, r2
 8008f08:	b24a      	sxtb	r2, r1
 8008f0a:	701a      	strb	r2, [r3, #0]

                        for (k = i + b; k < 256; ++k) {
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	4413      	add	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	e014      	b.n	8008f40 <slide+0x17a>
                            if (!r[k]) {
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d105      	bne.n	8008f30 <slide+0x16a>
                                r[k] = 1;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	4413      	add	r3, r2
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	701a      	strb	r2, [r3, #0]
                                break;
 8008f2e:	e00a      	b.n	8008f46 <slide+0x180>
                            }

                            r[k] = 0;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	4413      	add	r3, r2
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
                        for (k = i + b; k < 256; ++k) {
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	60fb      	str	r3, [r7, #12]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2bff      	cmp	r3, #255	; 0xff
 8008f44:	dde7      	ble.n	8008f16 <slide+0x150>
            for (b = 1; b <= 6 && i + b < 256; ++b) {
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	613b      	str	r3, [r7, #16]
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	2b06      	cmp	r3, #6
 8008f50:	dc07      	bgt.n	8008f62 <slide+0x19c>
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	4413      	add	r3, r2
 8008f58:	2bff      	cmp	r3, #255	; 0xff
 8008f5a:	f77f af64 	ble.w	8008e26 <slide+0x60>
 8008f5e:	e000      	b.n	8008f62 <slide+0x19c>
                        }
                    } else {
                        break;
 8008f60:	bf00      	nop
    for (i = 0; i < 256; ++i)
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	3301      	adds	r3, #1
 8008f66:	617b      	str	r3, [r7, #20]
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2bff      	cmp	r3, #255	; 0xff
 8008f6c:	f77f af50 	ble.w	8008e10 <slide+0x4a>
                    }
                }
            }
        }
}
 8008f70:	bf00      	nop
 8008f72:	bf00      	nop
 8008f74:	371c      	adds	r7, #28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
	...

08008f80 <ge_double_scalarmult_vartime>:
where a = a[0]+256*a[1]+...+256^31 a[31].
and b = b[0]+256*b[1]+...+256^31 b[31].
B is the Ed25519 base point (x,4/5) with x positive.
*/

void ge_double_scalarmult_vartime(ge_p2 *r, const unsigned char *a, const ge_p3 *A, const unsigned char *b) {
 8008f80:	b590      	push	{r4, r7, lr}
 8008f82:	f6ad 0dfc 	subw	sp, sp, #2300	; 0x8fc
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	f107 040c 	add.w	r4, r7, #12
 8008f8c:	6020      	str	r0, [r4, #0]
 8008f8e:	f107 0008 	add.w	r0, r7, #8
 8008f92:	6001      	str	r1, [r0, #0]
 8008f94:	1d39      	adds	r1, r7, #4
 8008f96:	600a      	str	r2, [r1, #0]
 8008f98:	463a      	mov	r2, r7
 8008f9a:	6013      	str	r3, [r2, #0]
    ge_cached Ai[8]; /* A,3A,5A,7A,9A,11A,13A,15A */
    ge_p1p1 t;
    ge_p3 u;
    ge_p3 A2;
    int i;
    slide(aslide, a);
 8008f9c:	f107 0308 	add.w	r3, r7, #8
 8008fa0:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8008fa4:	6819      	ldr	r1, [r3, #0]
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f7ff ff0d 	bl	8008dc6 <slide>
    slide(bslide, b);
 8008fac:	463b      	mov	r3, r7
 8008fae:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8008fb2:	6819      	ldr	r1, [r3, #0]
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	f7ff ff06 	bl	8008dc6 <slide>
    ge_p3_to_cached(&Ai[0], A);
 8008fba:	1d3b      	adds	r3, r7, #4
 8008fbc:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8008fc0:	6819      	ldr	r1, [r3, #0]
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	f000 fc4c 	bl	8009860 <ge_p3_to_cached>
    ge_p3_dbl(&t, A);
 8008fc8:	1d3b      	adds	r3, r7, #4
 8008fca:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008fce:	6819      	ldr	r1, [r3, #0]
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f000 fc2f 	bl	8009834 <ge_p3_dbl>
    ge_p1p1_to_p3(&A2, &t);
 8008fd6:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008fda:	f107 0314 	add.w	r3, r7, #20
 8008fde:	4611      	mov	r1, r2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 fb89 	bl	80096f8 <ge_p1p1_to_p3>
    ge_add(&t, &A2, &Ai[0]);
 8008fe6:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8008fea:	f107 0114 	add.w	r1, r7, #20
 8008fee:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7ff fe76 	bl	8008ce4 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8008ff8:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8008ffc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009000:	4611      	mov	r1, r2
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fb78 	bl	80096f8 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[1], &u);
 8009008:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800900c:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8009010:	33a0      	adds	r3, #160	; 0xa0
 8009012:	4611      	mov	r1, r2
 8009014:	4618      	mov	r0, r3
 8009016:	f000 fc23 	bl	8009860 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[1]);
 800901a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800901e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8009022:	f107 0114 	add.w	r1, r7, #20
 8009026:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800902a:	4618      	mov	r0, r3
 800902c:	f7ff fe5a 	bl	8008ce4 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8009030:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8009034:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009038:	4611      	mov	r1, r2
 800903a:	4618      	mov	r0, r3
 800903c:	f000 fb5c 	bl	80096f8 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[2], &u);
 8009040:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8009044:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8009048:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800904c:	4611      	mov	r1, r2
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fc06 	bl	8009860 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[2]);
 8009054:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8009058:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800905c:	f107 0114 	add.w	r1, r7, #20
 8009060:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009064:	4618      	mov	r0, r3
 8009066:	f7ff fe3d 	bl	8008ce4 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 800906a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800906e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009072:	4611      	mov	r1, r2
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fb3f 	bl	80096f8 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[3], &u);
 800907a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800907e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8009082:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f000 fbe9 	bl	8009860 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[3]);
 800908e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8009092:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8009096:	f107 0114 	add.w	r1, r7, #20
 800909a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff fe20 	bl	8008ce4 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 80090a4:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80090a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80090ac:	4611      	mov	r1, r2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fb22 	bl	80096f8 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[4], &u);
 80090b4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80090b8:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80090bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80090c0:	4611      	mov	r1, r2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fbcc 	bl	8009860 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[4]);
 80090c8:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80090cc:	f503 7220 	add.w	r2, r3, #640	; 0x280
 80090d0:	f107 0114 	add.w	r1, r7, #20
 80090d4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff fe03 	bl	8008ce4 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 80090de:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80090e2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80090e6:	4611      	mov	r1, r2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 fb05 	bl	80096f8 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[5], &u);
 80090ee:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80090f2:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80090f6:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80090fa:	4611      	mov	r1, r2
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fbaf 	bl	8009860 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[5]);
 8009102:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8009106:	f503 7248 	add.w	r2, r3, #800	; 0x320
 800910a:	f107 0114 	add.w	r1, r7, #20
 800910e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff fde6 	bl	8008ce4 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8009118:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800911c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009120:	4611      	mov	r1, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fae8 	bl	80096f8 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[6], &u);
 8009128:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800912c:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8009130:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fb92 	bl	8009860 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[6]);
 800913c:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8009140:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 8009144:	f107 0114 	add.w	r1, r7, #20
 8009148:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800914c:	4618      	mov	r0, r3
 800914e:	f7ff fdc9 	bl	8008ce4 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8009152:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8009156:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800915a:	4611      	mov	r1, r2
 800915c:	4618      	mov	r0, r3
 800915e:	f000 facb 	bl	80096f8 <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[7], &u);
 8009162:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8009166:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800916a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800916e:	4611      	mov	r1, r2
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fb75 	bl	8009860 <ge_p3_to_cached>
    ge_p2_0(r);
 8009176:	f107 030c 	add.w	r3, r7, #12
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	f000 faeb 	bl	8009756 <ge_p2_0>

    for (i = 255; i >= 0; --i) {
 8009180:	23ff      	movs	r3, #255	; 0xff
 8009182:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8009186:	e018      	b.n	80091ba <ge_double_scalarmult_vartime+0x23a>
        if (aslide[i] || bslide[i]) {
 8009188:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 800918c:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8009190:	4413      	add	r3, r2
 8009192:	f993 3000 	ldrsb.w	r3, [r3]
 8009196:	2b00      	cmp	r3, #0
 8009198:	f040 80d5 	bne.w	8009346 <ge_double_scalarmult_vartime+0x3c6>
 800919c:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80091a0:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 80091a4:	4413      	add	r3, r2
 80091a6:	f993 3000 	ldrsb.w	r3, [r3]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f040 80cb 	bne.w	8009346 <ge_double_scalarmult_vartime+0x3c6>
    for (i = 255; i >= 0; --i) {
 80091b0:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 80091b4:	3b01      	subs	r3, #1
 80091b6:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 80091ba:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 80091be:	2b00      	cmp	r3, #0
 80091c0:	dae2      	bge.n	8009188 <ge_double_scalarmult_vartime+0x208>
            break;
        }
    }

    for (; i >= 0; --i) {
 80091c2:	e0c0      	b.n	8009346 <ge_double_scalarmult_vartime+0x3c6>
        ge_p2_dbl(&t, r);
 80091c4:	f107 030c 	add.w	r3, r7, #12
 80091c8:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80091cc:	6819      	ldr	r1, [r3, #0]
 80091ce:	4610      	mov	r0, r2
 80091d0:	f000 fad7 	bl	8009782 <ge_p2_dbl>

        if (aslide[i] > 0) {
 80091d4:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 80091d8:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 80091dc:	4413      	add	r3, r2
 80091de:	f993 3000 	ldrsb.w	r3, [r3]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dd22      	ble.n	800922c <ge_double_scalarmult_vartime+0x2ac>
            ge_p1p1_to_p3(&u, &t);
 80091e6:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80091ea:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80091ee:	4611      	mov	r1, r2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 fa81 	bl	80096f8 <ge_p1p1_to_p3>
            ge_add(&t, &u, &Ai[aslide[i] / 2]);
 80091f6:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 80091fa:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 80091fe:	4413      	add	r3, r2
 8009200:	f993 3000 	ldrsb.w	r3, [r3]
 8009204:	0fda      	lsrs	r2, r3, #31
 8009206:	4413      	add	r3, r2
 8009208:	105b      	asrs	r3, r3, #1
 800920a:	b25b      	sxtb	r3, r3
 800920c:	4619      	mov	r1, r3
 800920e:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8009212:	460b      	mov	r3, r1
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	440b      	add	r3, r1
 8009218:	015b      	lsls	r3, r3, #5
 800921a:	441a      	add	r2, r3
 800921c:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8009220:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff fd5d 	bl	8008ce4 <ge_add>
 800922a:	e02a      	b.n	8009282 <ge_double_scalarmult_vartime+0x302>
        } else if (aslide[i] < 0) {
 800922c:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8009230:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8009234:	4413      	add	r3, r2
 8009236:	f993 3000 	ldrsb.w	r3, [r3]
 800923a:	2b00      	cmp	r3, #0
 800923c:	da21      	bge.n	8009282 <ge_double_scalarmult_vartime+0x302>
            ge_p1p1_to_p3(&u, &t);
 800923e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8009242:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8009246:	4611      	mov	r1, r2
 8009248:	4618      	mov	r0, r3
 800924a:	f000 fa55 	bl	80096f8 <ge_p1p1_to_p3>
            ge_sub(&t, &u, &Ai[(-aslide[i]) / 2]);
 800924e:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8009252:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8009256:	4413      	add	r3, r2
 8009258:	f993 3000 	ldrsb.w	r3, [r3]
 800925c:	0fda      	lsrs	r2, r3, #31
 800925e:	4413      	add	r3, r2
 8009260:	105b      	asrs	r3, r3, #1
 8009262:	425b      	negs	r3, r3
 8009264:	4619      	mov	r1, r3
 8009266:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 800926a:	460b      	mov	r3, r1
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	440b      	add	r3, r1
 8009270:	015b      	lsls	r3, r3, #5
 8009272:	441a      	add	r2, r3
 8009274:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8009278:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800927c:	4618      	mov	r0, r3
 800927e:	f000 fb3e 	bl	80098fe <ge_sub>
        }

        if (bslide[i] > 0) {
 8009282:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8009286:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 800928a:	4413      	add	r3, r2
 800928c:	f993 3000 	ldrsb.w	r3, [r3]
 8009290:	2b00      	cmp	r3, #0
 8009292:	dd21      	ble.n	80092d8 <ge_double_scalarmult_vartime+0x358>
            ge_p1p1_to_p3(&u, &t);
 8009294:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8009298:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800929c:	4611      	mov	r1, r2
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fa2a 	bl	80096f8 <ge_p1p1_to_p3>
            ge_madd(&t, &u, &Bi[bslide[i] / 2]);
 80092a4:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80092a8:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 80092ac:	4413      	add	r3, r2
 80092ae:	f993 3000 	ldrsb.w	r3, [r3]
 80092b2:	0fda      	lsrs	r2, r3, #31
 80092b4:	4413      	add	r3, r2
 80092b6:	105b      	asrs	r3, r3, #1
 80092b8:	b25b      	sxtb	r3, r3
 80092ba:	461a      	mov	r2, r3
 80092bc:	4613      	mov	r3, r2
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	1a9b      	subs	r3, r3, r2
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	4a25      	ldr	r2, [pc, #148]	; (800935c <ge_double_scalarmult_vartime+0x3dc>)
 80092c6:	441a      	add	r2, r3
 80092c8:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80092cc:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 f913 	bl	80094fc <ge_madd>
 80092d6:	e029      	b.n	800932c <ge_double_scalarmult_vartime+0x3ac>
        } else if (bslide[i] < 0) {
 80092d8:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80092dc:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 80092e0:	4413      	add	r3, r2
 80092e2:	f993 3000 	ldrsb.w	r3, [r3]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	da20      	bge.n	800932c <ge_double_scalarmult_vartime+0x3ac>
            ge_p1p1_to_p3(&u, &t);
 80092ea:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80092ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80092f2:	4611      	mov	r1, r2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 f9ff 	bl	80096f8 <ge_p1p1_to_p3>
            ge_msub(&t, &u, &Bi[(-bslide[i]) / 2]);
 80092fa:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80092fe:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8009302:	4413      	add	r3, r2
 8009304:	f993 3000 	ldrsb.w	r3, [r3]
 8009308:	0fda      	lsrs	r2, r3, #31
 800930a:	4413      	add	r3, r2
 800930c:	105b      	asrs	r3, r3, #1
 800930e:	425b      	negs	r3, r3
 8009310:	461a      	mov	r2, r3
 8009312:	4613      	mov	r3, r2
 8009314:	011b      	lsls	r3, r3, #4
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	4a10      	ldr	r2, [pc, #64]	; (800935c <ge_double_scalarmult_vartime+0x3dc>)
 800931c:	441a      	add	r2, r3
 800931e:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8009322:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8009326:	4618      	mov	r0, r3
 8009328:	f000 f954 	bl	80095d4 <ge_msub>
        }

        ge_p1p1_to_p2(r, &t);
 800932c:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8009330:	f107 030c 	add.w	r3, r7, #12
 8009334:	4611      	mov	r1, r2
 8009336:	6818      	ldr	r0, [r3, #0]
 8009338:	f000 f9b8 	bl	80096ac <ge_p1p1_to_p2>
    for (; i >= 0; --i) {
 800933c:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8009340:	3b01      	subs	r3, #1
 8009342:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8009346:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 800934a:	2b00      	cmp	r3, #0
 800934c:	f6bf af3a 	bge.w	80091c4 <ge_double_scalarmult_vartime+0x244>
    }
}
 8009350:	bf00      	nop
 8009352:	bf00      	nop
 8009354:	f607 07fc 	addw	r7, r7, #2300	; 0x8fc
 8009358:	46bd      	mov	sp, r7
 800935a:	bd90      	pop	{r4, r7, pc}
 800935c:	0801b4dc 	.word	0x0801b4dc

08009360 <ge_frombytes_negate_vartime>:

static const fe sqrtm1 = {
    -32595792, -7943725, 9377950, 3500415, 12389472, -272473, -25146209, -2005654, 326686, 11406482
};

int ge_frombytes_negate_vartime(ge_p3 *h, const unsigned char *s) {
 8009360:	b580      	push	{r7, lr}
 8009362:	b0b4      	sub	sp, #208	; 0xd0
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
    fe u;
    fe v;
    fe v3;
    fe vxx;
    fe check;
    fe_frombytes(h->Y, s);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3328      	adds	r3, #40	; 0x28
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	4618      	mov	r0, r3
 8009372:	f7f8 fcf7 	bl	8001d64 <fe_frombytes>
    fe_1(h->Z);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3350      	adds	r3, #80	; 0x50
 800937a:	4618      	mov	r0, r3
 800937c:	f7f8 fbd6 	bl	8001b2c <fe_1>
    fe_sq(u, h->Y);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8009386:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800938a:	4611      	mov	r1, r2
 800938c:	4618      	mov	r0, r3
 800938e:	f7fc f9ec 	bl	800576a <fe_sq>
    fe_mul(v, u, d);
 8009392:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8009396:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800939a:	4a56      	ldr	r2, [pc, #344]	; (80094f4 <ge_frombytes_negate_vartime+0x194>)
 800939c:	4618      	mov	r0, r3
 800939e:	f7f9 fad5 	bl	800294c <fe_mul>
    fe_sub(u, u, h->Z);     /* u = y^2-1 */
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80093a8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80093ac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7ff fa2d 	bl	8008810 <fe_sub>
    fe_add(v, v, h->Z);     /* v = dy^2+1 */
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80093bc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80093c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7f8 fbe2 	bl	8001b8e <fe_add>
    fe_sq(v3, v);
 80093ca:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80093ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80093d2:	4611      	mov	r1, r2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fc f9c8 	bl	800576a <fe_sq>
    fe_mul(v3, v3, v);      /* v3 = v^3 */
 80093da:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80093de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80093e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7f9 fab0 	bl	800294c <fe_mul>
    fe_sq(h->X, v3);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fc f9b8 	bl	800576a <fe_sq>
    fe_mul(h->X, h->X, v);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8009402:	4618      	mov	r0, r3
 8009404:	f7f9 faa2 	bl	800294c <fe_mul>
    fe_mul(h->X, h->X, u);  /* x = uv^7 */
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8009410:	4618      	mov	r0, r3
 8009412:	f7f9 fa9b 	bl	800294c <fe_mul>
    fe_pow22523(h->X, h->X); /* x = (uv^7)^((q-5)/8) */
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	4611      	mov	r1, r2
 800941c:	4618      	mov	r0, r3
 800941e:	f7fb fffe 	bl	800541e <fe_pow22523>
    fe_mul(h->X, h->X, v3);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6879      	ldr	r1, [r7, #4]
 8009426:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800942a:	4618      	mov	r0, r3
 800942c:	f7f9 fa8e 	bl	800294c <fe_mul>
    fe_mul(h->X, h->X, u);  /* x = uv^3(uv^7)^((q-5)/8) */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8009438:	4618      	mov	r0, r3
 800943a:	f7f9 fa87 	bl	800294c <fe_mul>
    fe_sq(vxx, h->X);
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009444:	4611      	mov	r1, r2
 8009446:	4618      	mov	r0, r3
 8009448:	f7fc f98f 	bl	800576a <fe_sq>
    fe_mul(vxx, vxx, v);
 800944c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8009450:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009458:	4618      	mov	r0, r3
 800945a:	f7f9 fa77 	bl	800294c <fe_mul>
    fe_sub(check, vxx, u);  /* vx^2-u */
 800945e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8009462:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009466:	f107 0308 	add.w	r3, r7, #8
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff f9d0 	bl	8008810 <fe_sub>

    if (fe_isnonzero(check)) {
 8009470:	f107 0308 	add.w	r3, r7, #8
 8009474:	4618      	mov	r0, r3
 8009476:	f7f9 f98b 	bl	8002790 <fe_isnonzero>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d019      	beq.n	80094b4 <ge_frombytes_negate_vartime+0x154>
        fe_add(check, vxx, u); /* vx^2+u */
 8009480:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8009484:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009488:	f107 0308 	add.w	r3, r7, #8
 800948c:	4618      	mov	r0, r3
 800948e:	f7f8 fb7e 	bl	8001b8e <fe_add>

        if (fe_isnonzero(check)) {
 8009492:	f107 0308 	add.w	r3, r7, #8
 8009496:	4618      	mov	r0, r3
 8009498:	f7f9 f97a 	bl	8002790 <fe_isnonzero>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <ge_frombytes_negate_vartime+0x148>
            return -1;
 80094a2:	f04f 33ff 	mov.w	r3, #4294967295
 80094a6:	e021      	b.n	80094ec <ge_frombytes_negate_vartime+0x18c>
        }

        fe_mul(h->X, h->X, sqrtm1);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	4a12      	ldr	r2, [pc, #72]	; (80094f8 <ge_frombytes_negate_vartime+0x198>)
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7f9 fa4c 	bl	800294c <fe_mul>
    }

    if (fe_isnegative(h->X) == (s[31] >> 7)) {
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7f9 f959 	bl	800276e <fe_isnegative>
 80094bc:	4602      	mov	r2, r0
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	331f      	adds	r3, #31
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	09db      	lsrs	r3, r3, #7
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d105      	bne.n	80094d8 <ge_frombytes_negate_vartime+0x178>
        fe_neg(h->X, h->X);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fb ff35 	bl	8005342 <fe_neg>
    }

    fe_mul(h->T, h->X, h->Y);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	3328      	adds	r3, #40	; 0x28
 80094e4:	461a      	mov	r2, r3
 80094e6:	f7f9 fa31 	bl	800294c <fe_mul>
    return 0;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	37d0      	adds	r7, #208	; 0xd0
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	0801b89c 	.word	0x0801b89c
 80094f8:	0801b8c4 	.word	0x0801b8c4

080094fc <ge_madd>:

/*
r = p + q
*/

void ge_madd(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08e      	sub	sp, #56	; 0x38
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
    fe t0;
    fe_add(r->X, p->Y, p->X);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	3328      	adds	r3, #40	; 0x28
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	4619      	mov	r1, r3
 8009512:	f7f8 fb3c 	bl	8001b8e <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	3328      	adds	r3, #40	; 0x28
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	4619      	mov	r1, r3
 8009524:	f7ff f974 	bl	8008810 <fe_sub>
    fe_mul(r->Z, r->X, q->yplusx);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3350      	adds	r3, #80	; 0x50
 800952c:	68f9      	ldr	r1, [r7, #12]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	4618      	mov	r0, r3
 8009532:	f7f9 fa0b 	bl	800294c <fe_mul>
    fe_mul(r->Y, r->Y, q->yminusx);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	3328      	adds	r3, #40	; 0x28
 8009546:	461a      	mov	r2, r3
 8009548:	f7f9 fa00 	bl	800294c <fe_mul>
    fe_mul(r->T, q->xy2d, p->T);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	3378      	adds	r3, #120	; 0x78
 800955c:	461a      	mov	r2, r3
 800955e:	f7f9 f9f5 	bl	800294c <fe_mul>
    fe_add(t0, p->Z, p->Z);
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800956e:	f107 0310 	add.w	r3, r7, #16
 8009572:	4618      	mov	r0, r3
 8009574:	f7f8 fb0b 	bl	8001b8e <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3328      	adds	r3, #40	; 0x28
 8009584:	461a      	mov	r2, r3
 8009586:	f7ff f943 	bl	8008810 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	3328      	adds	r3, #40	; 0x28
 800959a:	461a      	mov	r2, r3
 800959c:	f7f8 faf7 	bl	8001b8e <fe_add>
    fe_add(r->Z, t0, r->T);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80095ac:	f107 0310 	add.w	r3, r7, #16
 80095b0:	4619      	mov	r1, r3
 80095b2:	f7f8 faec 	bl	8001b8e <fe_add>
    fe_sub(r->T, t0, r->T);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80095c2:	f107 0310 	add.w	r3, r7, #16
 80095c6:	4619      	mov	r1, r3
 80095c8:	f7ff f922 	bl	8008810 <fe_sub>
}
 80095cc:	bf00      	nop
 80095ce:	3738      	adds	r7, #56	; 0x38
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <ge_msub>:

/*
r = p - q
*/

void ge_msub(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08e      	sub	sp, #56	; 0x38
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
    fe t0;

    fe_add(r->X, p->Y, p->X);
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	3328      	adds	r3, #40	; 0x28
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	4619      	mov	r1, r3
 80095ea:	f7f8 fad0 	bl	8001b8e <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	3328      	adds	r3, #40	; 0x28
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	4619      	mov	r1, r3
 80095fc:	f7ff f908 	bl	8008810 <fe_sub>
    fe_mul(r->Z, r->X, q->yminusx);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8009606:	68f9      	ldr	r1, [r7, #12]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	3328      	adds	r3, #40	; 0x28
 800960c:	461a      	mov	r2, r3
 800960e:	f7f9 f99d 	bl	800294c <fe_mul>
    fe_mul(r->Y, r->Y, q->yplusx);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3328      	adds	r3, #40	; 0x28
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	4619      	mov	r1, r3
 8009620:	f7f9 f994 	bl	800294c <fe_mul>
    fe_mul(r->T, q->xy2d, p->T);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	3378      	adds	r3, #120	; 0x78
 8009634:	461a      	mov	r2, r3
 8009636:	f7f9 f989 	bl	800294c <fe_mul>
    fe_add(t0, p->Z, p->Z);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009646:	f107 0310 	add.w	r3, r7, #16
 800964a:	4618      	mov	r0, r3
 800964c:	f7f8 fa9f 	bl	8001b8e <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3328      	adds	r3, #40	; 0x28
 800965c:	461a      	mov	r2, r3
 800965e:	f7ff f8d7 	bl	8008810 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	3328      	adds	r3, #40	; 0x28
 8009672:	461a      	mov	r2, r3
 8009674:	f7f8 fa8b 	bl	8001b8e <fe_add>
    fe_sub(r->Z, t0, r->T);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8009684:	f107 0310 	add.w	r3, r7, #16
 8009688:	4619      	mov	r1, r3
 800968a:	f7ff f8c1 	bl	8008810 <fe_sub>
    fe_add(r->T, t0, r->T);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800969a:	f107 0310 	add.w	r3, r7, #16
 800969e:	4619      	mov	r1, r3
 80096a0:	f7f8 fa75 	bl	8001b8e <fe_add>
}
 80096a4:	bf00      	nop
 80096a6:	3738      	adds	r7, #56	; 0x38
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <ge_p1p1_to_p2>:

/*
r = p
*/

void ge_p1p1_to_p2(ge_p2 *r, const ge_p1p1 *p) {
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
    fe_mul(r->X, p->X, p->T);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	3378      	adds	r3, #120	; 0x78
 80096be:	461a      	mov	r2, r3
 80096c0:	f7f9 f944 	bl	800294c <fe_mul>
    fe_mul(r->Y, p->Y, p->Z);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	3350      	adds	r3, #80	; 0x50
 80096d4:	461a      	mov	r2, r3
 80096d6:	f7f9 f939 	bl	800294c <fe_mul>
    fe_mul(r->Z, p->Z, p->T);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	3378      	adds	r3, #120	; 0x78
 80096ea:	461a      	mov	r2, r3
 80096ec:	f7f9 f92e 	bl	800294c <fe_mul>
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <ge_p1p1_to_p3>:

/*
r = p
*/

void ge_p1p1_to_p3(ge_p3 *r, const ge_p1p1 *p) {
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
    fe_mul(r->X, p->X, p->T);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	3378      	adds	r3, #120	; 0x78
 800970a:	461a      	mov	r2, r3
 800970c:	f7f9 f91e 	bl	800294c <fe_mul>
    fe_mul(r->Y, p->Y, p->Z);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	3350      	adds	r3, #80	; 0x50
 8009720:	461a      	mov	r2, r3
 8009722:	f7f9 f913 	bl	800294c <fe_mul>
    fe_mul(r->Z, p->Z, p->T);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	3378      	adds	r3, #120	; 0x78
 8009736:	461a      	mov	r2, r3
 8009738:	f7f9 f908 	bl	800294c <fe_mul>
    fe_mul(r->T, p->X, p->Y);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	3328      	adds	r3, #40	; 0x28
 8009748:	461a      	mov	r2, r3
 800974a:	f7f9 f8ff 	bl	800294c <fe_mul>
}
 800974e:	bf00      	nop
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <ge_p2_0>:


void ge_p2_0(ge_p2 *h) {
 8009756:	b580      	push	{r7, lr}
 8009758:	b082      	sub	sp, #8
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
    fe_0(h->X);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4618      	mov	r0, r3
 8009762:	f7f8 f9b2 	bl	8001aca <fe_0>
    fe_1(h->Y);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	3328      	adds	r3, #40	; 0x28
 800976a:	4618      	mov	r0, r3
 800976c:	f7f8 f9de 	bl	8001b2c <fe_1>
    fe_1(h->Z);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	3350      	adds	r3, #80	; 0x50
 8009774:	4618      	mov	r0, r3
 8009776:	f7f8 f9d9 	bl	8001b2c <fe_1>
}
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <ge_p2_dbl>:

/*
r = 2 * p
*/

void ge_p2_dbl(ge_p1p1 *r, const ge_p2 *p) {
 8009782:	b580      	push	{r7, lr}
 8009784:	b08c      	sub	sp, #48	; 0x30
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	6039      	str	r1, [r7, #0]
    fe t0;

    fe_sq(r->X, p->X);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4611      	mov	r1, r2
 8009792:	4618      	mov	r0, r3
 8009794:	f7fb ffe9 	bl	800576a <fe_sq>
    fe_sq(r->Z, p->Y);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	3328      	adds	r3, #40	; 0x28
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f7fb ffe0 	bl	800576a <fe_sq>
    fe_sq2(r->T, p->Z);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	3350      	adds	r3, #80	; 0x50
 80097b4:	4619      	mov	r1, r3
 80097b6:	4610      	mov	r0, r2
 80097b8:	f7fd fba6 	bl	8006f08 <fe_sq2>
    fe_add(r->Y, p->X, p->Y);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	3328      	adds	r3, #40	; 0x28
 80097c8:	461a      	mov	r2, r3
 80097ca:	f7f8 f9e0 	bl	8001b8e <fe_add>
    fe_sq(t0, r->Y);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80097d4:	f107 0308 	add.w	r3, r7, #8
 80097d8:	4611      	mov	r1, r2
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fb ffc5 	bl	800576a <fe_sq>
    fe_add(r->Y, r->Z, r->X);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	3350      	adds	r3, #80	; 0x50
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	4619      	mov	r1, r3
 80097ee:	f7f8 f9ce 	bl	8001b8e <fe_add>
    fe_sub(r->Z, r->Z, r->X);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3350      	adds	r3, #80	; 0x50
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	4619      	mov	r1, r3
 8009800:	f7ff f806 	bl	8008810 <fe_sub>
    fe_sub(r->X, t0, r->Y);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	4619      	mov	r1, r3
 8009812:	f7fe fffd 	bl	8008810 <fe_sub>
    fe_sub(r->T, r->T, r->Z);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3350      	adds	r3, #80	; 0x50
 8009826:	461a      	mov	r2, r3
 8009828:	f7fe fff2 	bl	8008810 <fe_sub>
}
 800982c:	bf00      	nop
 800982e:	3730      	adds	r7, #48	; 0x30
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <ge_p3_dbl>:

/*
r = 2 * p
*/

void ge_p3_dbl(ge_p1p1 *r, const ge_p3 *p) {
 8009834:	b580      	push	{r7, lr}
 8009836:	b0a0      	sub	sp, #128	; 0x80
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
    ge_p2 q;
    ge_p3_to_p2(&q, p);
 800983e:	f107 0308 	add.w	r3, r7, #8
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	4618      	mov	r0, r3
 8009846:	f000 f839 	bl	80098bc <ge_p3_to_p2>
    ge_p2_dbl(r, &q);
 800984a:	f107 0308 	add.w	r3, r7, #8
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff ff96 	bl	8009782 <ge_p2_dbl>
}
 8009856:	bf00      	nop
 8009858:	3780      	adds	r7, #128	; 0x80
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
	...

08009860 <ge_p3_to_cached>:

static const fe d2 = {
    -21827239, -5839606, -30745221, 13898782, 229458, 15978800, -12551817, -6495438, 29715968, 9444199
};

void ge_p3_to_cached(ge_cached *r, const ge_p3 *p) {
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
    fe_add(r->YplusX, p->Y, p->X);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	3328      	adds	r3, #40	; 0x28
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	4619      	mov	r1, r3
 8009874:	f7f8 f98b 	bl	8001b8e <fe_add>
    fe_sub(r->YminusX, p->Y, p->X);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	3328      	adds	r3, #40	; 0x28
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	4619      	mov	r1, r3
 8009886:	f7fe ffc3 	bl	8008810 <fe_sub>
    fe_copy(r->Z, p->Z);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	3350      	adds	r3, #80	; 0x50
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f7f8 fa14 	bl	8001cc4 <fe_copy>
    fe_mul(r->T2d, p->T, d2);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	3378      	adds	r3, #120	; 0x78
 80098a6:	4a04      	ldr	r2, [pc, #16]	; (80098b8 <ge_p3_to_cached+0x58>)
 80098a8:	4619      	mov	r1, r3
 80098aa:	f7f9 f84f 	bl	800294c <fe_mul>
}
 80098ae:	bf00      	nop
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	0801b8ec 	.word	0x0801b8ec

080098bc <ge_p3_to_p2>:

/*
r = p
*/

void ge_p3_to_p2(ge_p2 *r, const ge_p3 *p) {
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
    fe_copy(r->X, p->X);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7f8 f9f9 	bl	8001cc4 <fe_copy>
    fe_copy(r->Y, p->Y);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	3328      	adds	r3, #40	; 0x28
 80098dc:	4619      	mov	r1, r3
 80098de:	4610      	mov	r0, r2
 80098e0:	f7f8 f9f0 	bl	8001cc4 <fe_copy>
    fe_copy(r->Z, p->Z);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	3350      	adds	r3, #80	; 0x50
 80098ee:	4619      	mov	r1, r3
 80098f0:	4610      	mov	r0, r2
 80098f2:	f7f8 f9e7 	bl	8001cc4 <fe_copy>
}
 80098f6:	bf00      	nop
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <ge_sub>:

/*
r = p - q
*/

void ge_sub(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {
 80098fe:	b580      	push	{r7, lr}
 8009900:	b08e      	sub	sp, #56	; 0x38
 8009902:	af00      	add	r7, sp, #0
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
    fe t0;
    
    fe_add(r->X, p->Y, p->X);
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	3328      	adds	r3, #40	; 0x28
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	4619      	mov	r1, r3
 8009914:	f7f8 f93b 	bl	8001b8e <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	3328      	adds	r3, #40	; 0x28
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	4619      	mov	r1, r3
 8009926:	f7fe ff73 	bl	8008810 <fe_sub>
    fe_mul(r->Z, r->X, q->YminusX);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8009930:	68f9      	ldr	r1, [r7, #12]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	3328      	adds	r3, #40	; 0x28
 8009936:	461a      	mov	r2, r3
 8009938:	f7f9 f808 	bl	800294c <fe_mul>
    fe_mul(r->Y, r->Y, q->YplusX);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3328      	adds	r3, #40	; 0x28
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	4619      	mov	r1, r3
 800994a:	f7f8 ffff 	bl	800294c <fe_mul>
    fe_mul(r->T, q->T2d, p->T);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	3378      	adds	r3, #120	; 0x78
 800995e:	461a      	mov	r2, r3
 8009960:	f7f8 fff4 	bl	800294c <fe_mul>
    fe_mul(r->X, p->Z, q->Z);
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3350      	adds	r3, #80	; 0x50
 8009970:	461a      	mov	r2, r3
 8009972:	f7f8 ffeb 	bl	800294c <fe_mul>
    fe_add(t0, r->X, r->X);
 8009976:	68f9      	ldr	r1, [r7, #12]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	f107 0310 	add.w	r3, r7, #16
 800997e:	4618      	mov	r0, r3
 8009980:	f7f8 f905 	bl	8001b8e <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3328      	adds	r3, #40	; 0x28
 8009990:	461a      	mov	r2, r3
 8009992:	f7fe ff3d 	bl	8008810 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3328      	adds	r3, #40	; 0x28
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7f8 f8f1 	bl	8001b8e <fe_add>
    fe_sub(r->Z, t0, r->T);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80099b8:	f107 0310 	add.w	r3, r7, #16
 80099bc:	4619      	mov	r1, r3
 80099be:	f7fe ff27 	bl	8008810 <fe_sub>
    fe_add(r->T, t0, r->T);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80099ce:	f107 0310 	add.w	r3, r7, #16
 80099d2:	4619      	mov	r1, r3
 80099d4:	f7f8 f8db 	bl	8001b8e <fe_add>
}
 80099d8:	bf00      	nop
 80099da:	3738      	adds	r7, #56	; 0x38
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <ge_tobytes>:


void ge_tobytes(unsigned char *s, const ge_p2 *h) {
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b0a0      	sub	sp, #128	; 0x80
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
    fe recip;
    fe x;
    fe y;
    fe_invert(recip, h->Z);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80099f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80099f4:	4611      	mov	r1, r2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f8 fd12 	bl	8002420 <fe_invert>
    fe_mul(x, h->X, recip);
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7f8 ffa0 	bl	800294c <fe_mul>
    fe_mul(y, h->Y, recip);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009a12:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009a16:	f107 0308 	add.w	r3, r7, #8
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7f8 ff96 	bl	800294c <fe_mul>
    fe_tobytes(s, y);
 8009a20:	f107 0308 	add.w	r3, r7, #8
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7fe ff8d 	bl	8008946 <fe_tobytes>
    s[31] ^= fe_isnegative(x) << 7;
 8009a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7f8 fe9c 	bl	800276e <fe_isnegative>
 8009a36:	4603      	mov	r3, r0
 8009a38:	01d9      	lsls	r1, r3, #7
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	331f      	adds	r3, #31
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	b25a      	sxtb	r2, r3
 8009a42:	b24b      	sxtb	r3, r1
 8009a44:	4053      	eors	r3, r2
 8009a46:	b25a      	sxtb	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	331f      	adds	r3, #31
 8009a4c:	b2d2      	uxtb	r2, r2
 8009a4e:	701a      	strb	r2, [r3, #0]
}
 8009a50:	bf00      	nop
 8009a52:	3780      	adds	r7, #128	; 0x80
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <goto_application>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void goto_application(uint32_t slotadd)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
//  printf("Gonna Jump to Application\r\n");

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (slotadd + 4U)));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3304      	adds	r3, #4
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	60fb      	str	r3, [r7, #12]

//  __set_MSP(*(volatile uint32_t*) 0x08020000);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
  app_reset_handler();    //call the app reset handler
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4798      	blx	r3
}
 8009a6c:	bf00      	nop
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <sd_init>:


HAL_StatusTypeDef sd_init(){
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
	if(BSP_SD_Init() == MSD_OK ) return HAL_OK;
 8009a78:	f00c f9e6 	bl	8015e48 <BSP_SD_Init>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <sd_init+0x12>
 8009a82:	2300      	movs	r3, #0
 8009a84:	e000      	b.n	8009a88 <sd_init+0x14>
	else return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <sd_mount>:

FRESULT sd_mount(FATFS *fatfs){
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
	return f_mount(fatfs, "", 1);
 8009a94:	2201      	movs	r2, #1
 8009a96:	4904      	ldr	r1, [pc, #16]	; (8009aa8 <sd_mount+0x1c>)
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f00e f877 	bl	8017b8c <f_mount>
 8009a9e:	4603      	mov	r3, r0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	0801b1c0 	.word	0x0801b1c0

08009aac <sd_open>:

FRESULT sd_open(FIL *myfile, const char *file_name, uint8_t mode){
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	71fb      	strb	r3, [r7, #7]
	return f_open(myfile, file_name, mode);
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	461a      	mov	r2, r3
 8009abe:	68b9      	ldr	r1, [r7, #8]
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f00e f8a9 	bl	8017c18 <f_open>
 8009ac6:	4603      	mov	r3, r0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <sd_read>:
		UINT bw;
		f_write (myfile, write_buf, size, &bw);
		return bw;
}

uint32_t sd_read(FIL *myfile, uint8_t *read_buf, uint32_t size){
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
	uint32_t br = 0;
 8009adc:	2300      	movs	r3, #0
 8009ade:	617b      	str	r3, [r7, #20]
	f_read(myfile, read_buf, size,(UINT*) &br);
 8009ae0:	f107 0314 	add.w	r3, r7, #20
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	68b9      	ldr	r1, [r7, #8]
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f00e fa53 	bl	8017f94 <f_read>
	return br;
 8009aee:	697b      	ldr	r3, [r7, #20]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <sd_close>:

void sd_close(FIL *myfile){
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
	f_close(myfile);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f00e fc04 	bl	801830e <f_close>
}
 8009b06:	bf00      	nop
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <store_into_flash>:

void store_into_flash(uint8_t* buffer, uint32_t address, uint16_t size){
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b086      	sub	sp, #24
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	60f8      	str	r0, [r7, #12]
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	80fb      	strh	r3, [r7, #6]
	for(uint16_t s = 0; s < size; s++){
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	82fb      	strh	r3, [r7, #22]
 8009b20:	e011      	b.n	8009b46 <store_into_flash+0x38>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, *(buffer));
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	f04f 0300 	mov.w	r3, #0
 8009b2c:	68b9      	ldr	r1, [r7, #8]
 8009b2e:	2000      	movs	r0, #0
 8009b30:	f008 f900 	bl	8011d34 <HAL_FLASH_Program>
		address++;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	3301      	adds	r3, #1
 8009b38:	60bb      	str	r3, [r7, #8]
		buffer++;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]
	for(uint16_t s = 0; s < size; s++){
 8009b40:	8afb      	ldrh	r3, [r7, #22]
 8009b42:	3301      	adds	r3, #1
 8009b44:	82fb      	strh	r3, [r7, #22]
 8009b46:	8afa      	ldrh	r2, [r7, #22]
 8009b48:	88fb      	ldrh	r3, [r7, #6]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d3e9      	bcc.n	8009b22 <store_into_flash+0x14>
	}
}
 8009b4e:	bf00      	nop
 8009b50:	bf00      	nop
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <init_flash>:

defReturnType init_flash(uint8_t slot){
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08a      	sub	sp, #40	; 0x28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	71fb      	strb	r3, [r7, #7]
	defReturnType ret;

	ret = HAL_FLASH_Unlock();
 8009b62:	f008 f93b 	bl	8011ddc <HAL_FLASH_Unlock>
 8009b66:	4603      	mov	r3, r0
 8009b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(ret != (uint8_t)HAL_OK){
 8009b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <init_flash+0x20>
		return HANDLE_FAILED;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e028      	b.n	8009bca <init_flash+0x72>
	}

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	613b      	str	r3, [r7, #16]

	if(slot == 0x00){
 8009b7c:	79fb      	ldrb	r3, [r7, #7]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d102      	bne.n	8009b88 <init_flash+0x30>
		EraseInitStruct.Sector        = FLASH_SECTOR_5;
 8009b82:	2305      	movs	r3, #5
 8009b84:	61bb      	str	r3, [r7, #24]
 8009b86:	e00a      	b.n	8009b9e <init_flash+0x46>
	}
	else if(slot == 0x01){
 8009b88:	79fb      	ldrb	r3, [r7, #7]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d102      	bne.n	8009b94 <init_flash+0x3c>
		EraseInitStruct.Sector        = FLASH_SECTOR_7;
 8009b8e:	2307      	movs	r3, #7
 8009b90:	61bb      	str	r3, [r7, #24]
 8009b92:	e004      	b.n	8009b9e <init_flash+0x46>
	}
	else if(slot == 0x02){
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d101      	bne.n	8009b9e <init_flash+0x46>
		EraseInitStruct.Sector        = FLASH_SECTOR_9;
 8009b9a:	2309      	movs	r3, #9
 8009b9c:	61bb      	str	r3, [r7, #24]
	}
	EraseInitStruct.NbSectors     = 2;           //erase 2 sectors
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	623b      	str	r3, [r7, #32]

	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8009ba6:	f107 020c 	add.w	r2, r7, #12
 8009baa:	f107 0310 	add.w	r3, r7, #16
 8009bae:	4611      	mov	r1, r2
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f008 fa75 	bl	80120a0 <HAL_FLASHEx_Erase>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if( ret != (uint8_t)HAL_OK )
 8009bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <init_flash+0x70>
	{
		return HANDLE_FAILED;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e000      	b.n	8009bca <init_flash+0x72>
	}

	return HANDLE_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3728      	adds	r7, #40	; 0x28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <read_file_and_store_into_flash>:
uint32_t read_file_and_store_into_flash(FATFS *fatfs, FIL *myfile, const char *file_name, uint8_t mode, defFlashSlot slot, uint8_t *signature, uint8_t *publickey, uint8_t *hashvalue){
 8009bd4:	b590      	push	{r4, r7, lr}
 8009bd6:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
 8009bda:	af02      	add	r7, sp, #8
 8009bdc:	f107 040c 	add.w	r4, r7, #12
 8009be0:	6020      	str	r0, [r4, #0]
 8009be2:	f107 0008 	add.w	r0, r7, #8
 8009be6:	6001      	str	r1, [r0, #0]
 8009be8:	1d39      	adds	r1, r7, #4
 8009bea:	600a      	str	r2, [r1, #0]
 8009bec:	461a      	mov	r2, r3
 8009bee:	1cfb      	adds	r3, r7, #3
 8009bf0:	701a      	strb	r2, [r3, #0]

	uint32_t BaseAddress;
	if(sd_init() == HAL_ERROR) return HAL_ERROR;
 8009bf2:	f7ff ff3f 	bl	8009a74 <sd_init>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d101      	bne.n	8009c00 <read_file_and_store_into_flash+0x2c>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e116      	b.n	8009e2e <read_file_and_store_into_flash+0x25a>
//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
	if(sd_mount(fatfs) != FR_OK) return HAL_ERROR;
 8009c00:	f107 030c 	add.w	r3, r7, #12
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	f7ff ff41 	bl	8009a8c <sd_mount>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <read_file_and_store_into_flash+0x40>
 8009c10:	2301      	movs	r3, #1
 8009c12:	e10c      	b.n	8009e2e <read_file_and_store_into_flash+0x25a>
//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
	if(sd_open(myfile, file_name, mode) != FR_OK) return HAL_ERROR;
 8009c14:	1cfb      	adds	r3, r7, #3
 8009c16:	781a      	ldrb	r2, [r3, #0]
 8009c18:	1d39      	adds	r1, r7, #4
 8009c1a:	f107 0308 	add.w	r3, r7, #8
 8009c1e:	6809      	ldr	r1, [r1, #0]
 8009c20:	6818      	ldr	r0, [r3, #0]
 8009c22:	f7ff ff43 	bl	8009aac <sd_open>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d001      	beq.n	8009c30 <read_file_and_store_into_flash+0x5c>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e0fe      	b.n	8009e2e <read_file_and_store_into_flash+0x25a>
//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
	uint32_t size_file = f_size(myfile) - 160;
 8009c30:	f107 0308 	add.w	r3, r7, #8
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	3ba0      	subs	r3, #160	; 0xa0
 8009c3a:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814

	if(init_flash(slot) != HANDLE_OK) return HAL_ERROR;
 8009c3e:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7ff ff88 	bl	8009b58 <init_flash>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <read_file_and_store_into_flash+0x7e>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e0ed      	b.n	8009e2e <read_file_and_store_into_flash+0x25a>
//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);

	if(slot == FLASH_SLOT_0) BaseAddress = FLASH_SLOT_0_ADD;
 8009c52:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d103      	bne.n	8009c62 <read_file_and_store_into_flash+0x8e>
 8009c5a:	4b77      	ldr	r3, [pc, #476]	; (8009e38 <read_file_and_store_into_flash+0x264>)
 8009c5c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8009c60:	e00e      	b.n	8009c80 <read_file_and_store_into_flash+0xac>
	else if(slot == FLASH_SLOT_1) BaseAddress = FLASH_SLOT_1_ADD;
 8009c62:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d103      	bne.n	8009c72 <read_file_and_store_into_flash+0x9e>
 8009c6a:	4b74      	ldr	r3, [pc, #464]	; (8009e3c <read_file_and_store_into_flash+0x268>)
 8009c6c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8009c70:	e006      	b.n	8009c80 <read_file_and_store_into_flash+0xac>
	else if(slot == FLASH_SLOT_2) BaseAddress = FLASH_SLOT_2_ADD;
 8009c72:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d102      	bne.n	8009c80 <read_file_and_store_into_flash+0xac>
 8009c7a:	4b71      	ldr	r3, [pc, #452]	; (8009e40 <read_file_and_store_into_flash+0x26c>)
 8009c7c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	else{}

//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
	uint16_t round = size_file/1024; round += (size_file%1024 != 0)?1:0;
 8009c80:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8009c84:	0a9b      	lsrs	r3, r3, #10
 8009c86:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812
 8009c8a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8009c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bf14      	ite	ne
 8009c96:	2301      	movne	r3, #1
 8009c98:	2300      	moveq	r3, #0
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812

	uint8_t buffer_cipher[1024] = {0,};
 8009ca8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8009cac:	2200      	movs	r2, #0
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f00e fe07 	bl	80188cc <memset>
	uint8_t buffer_plaintext[1024] = {0,};
 8009cbe:	f107 0310 	add.w	r3, r7, #16
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8009ccc:	2100      	movs	r1, #0
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f00e fdfc 	bl	80188cc <memset>

	if(sd_read(myfile, signature, 64) != 64) return HAL_ERROR;
 8009cd4:	f107 0308 	add.w	r3, r7, #8
 8009cd8:	2240      	movs	r2, #64	; 0x40
 8009cda:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	f7ff fef6 	bl	8009ad0 <sd_read>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b40      	cmp	r3, #64	; 0x40
 8009ce8:	d001      	beq.n	8009cee <read_file_and_store_into_flash+0x11a>
 8009cea:	2301      	movs	r3, #1
 8009cec:	e09f      	b.n	8009e2e <read_file_and_store_into_flash+0x25a>
	if(sd_read(myfile, publickey, 32) != 32) return HAL_ERROR;
 8009cee:	f107 0308 	add.w	r3, r7, #8
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 8009cf8:	6818      	ldr	r0, [r3, #0]
 8009cfa:	f7ff fee9 	bl	8009ad0 <sd_read>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b20      	cmp	r3, #32
 8009d02:	d001      	beq.n	8009d08 <read_file_and_store_into_flash+0x134>
 8009d04:	2301      	movs	r3, #1
 8009d06:	e092      	b.n	8009e2e <read_file_and_store_into_flash+0x25a>
	if(sd_read(myfile, hashvalue, 64) != 64) return HAL_ERROR;
 8009d08:	f107 0308 	add.w	r3, r7, #8
 8009d0c:	2240      	movs	r2, #64	; 0x40
 8009d0e:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 8009d12:	6818      	ldr	r0, [r3, #0]
 8009d14:	f7ff fedc 	bl	8009ad0 <sd_read>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b40      	cmp	r3, #64	; 0x40
 8009d1c:	d001      	beq.n	8009d22 <read_file_and_store_into_flash+0x14e>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e085      	b.n	8009e2e <read_file_and_store_into_flash+0x25a>

	for(uint16_t r = 0; r < round - 1; r++){
 8009d22:	2300      	movs	r3, #0
 8009d24:	f8a7 381a 	strh.w	r3, [r7, #2074]	; 0x81a
 8009d28:	e03c      	b.n	8009da4 <read_file_and_store_into_flash+0x1d0>
		if(sd_read(myfile, buffer_cipher, 1024) != 1024) return HAL_ERROR;
 8009d2a:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8009d2e:	f107 0308 	add.w	r3, r7, #8
 8009d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d36:	6818      	ldr	r0, [r3, #0]
 8009d38:	f7ff feca 	bl	8009ad0 <sd_read>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d42:	d001      	beq.n	8009d48 <read_file_and_store_into_flash+0x174>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e072      	b.n	8009e2e <read_file_and_store_into_flash+0x25a>
		Chacha20_Xor(Gb_scKeyStream, Gb_sulCell, buffer_cipher, 1024, buffer_plaintext);
 8009d48:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8009d4c:	f107 0310 	add.w	r3, r7, #16
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d56:	493b      	ldr	r1, [pc, #236]	; (8009e44 <read_file_and_store_into_flash+0x270>)
 8009d58:	483b      	ldr	r0, [pc, #236]	; (8009e48 <read_file_and_store_into_flash+0x274>)
 8009d5a:	f7f7 f8a1 	bl	8000ea0 <Chacha20_Xor>
		store_into_flash(buffer_plaintext, BaseAddress + r*1024, 1024);
 8009d5e:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	; 0x81a
 8009d62:	029b      	lsls	r3, r3, #10
 8009d64:	461a      	mov	r2, r3
 8009d66:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8009d6a:	18d1      	adds	r1, r2, r3
 8009d6c:	f107 0310 	add.w	r3, r7, #16
 8009d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7ff feca 	bl	8009b0e <store_into_flash>
		memset(buffer_cipher,0,1024);
 8009d7a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8009d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d82:	2100      	movs	r1, #0
 8009d84:	4618      	mov	r0, r3
 8009d86:	f00e fda1 	bl	80188cc <memset>
		memset(buffer_plaintext,0,1024);
 8009d8a:	f107 0310 	add.w	r3, r7, #16
 8009d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d92:	2100      	movs	r1, #0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f00e fd99 	bl	80188cc <memset>
	for(uint16_t r = 0; r < round - 1; r++){
 8009d9a:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	; 0x81a
 8009d9e:	3301      	adds	r3, #1
 8009da0:	f8a7 381a 	strh.w	r3, [r7, #2074]	; 0x81a
 8009da4:	f8b7 281a 	ldrh.w	r2, [r7, #2074]	; 0x81a
 8009da8:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8009dac:	3b01      	subs	r3, #1
 8009dae:	429a      	cmp	r2, r3
 8009db0:	dbbb      	blt.n	8009d2a <read_file_and_store_into_flash+0x156>
	}

//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);

	if(sd_read(myfile, buffer_cipher, size_file%1024) != size_file%1024) return HAL_ERROR;
 8009db2:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8009db6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009dba:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8009dbe:	f107 0308 	add.w	r3, r7, #8
 8009dc2:	6818      	ldr	r0, [r3, #0]
 8009dc4:	f7ff fe84 	bl	8009ad0 <sd_read>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8009dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d001      	beq.n	8009dda <read_file_and_store_into_flash+0x206>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e029      	b.n	8009e2e <read_file_and_store_into_flash+0x25a>
	Chacha20_Xor(Gb_scKeyStream, Gb_sulCell, buffer_cipher, size_file%1024, buffer_plaintext);
 8009dda:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8009dde:	f3c3 0109 	ubfx	r1, r3, #0, #10
 8009de2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8009de6:	f107 0310 	add.w	r3, r7, #16
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	460b      	mov	r3, r1
 8009dee:	4915      	ldr	r1, [pc, #84]	; (8009e44 <read_file_and_store_into_flash+0x270>)
 8009df0:	4815      	ldr	r0, [pc, #84]	; (8009e48 <read_file_and_store_into_flash+0x274>)
 8009df2:	f7f7 f855 	bl	8000ea0 <Chacha20_Xor>
	store_into_flash(buffer_plaintext, BaseAddress + (round - 1)*1024, size_file%1024);
 8009df6:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	029b      	lsls	r3, r3, #10
 8009dfe:	461a      	mov	r2, r3
 8009e00:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8009e04:	18d1      	adds	r1, r2, r3
 8009e06:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	f107 0310 	add.w	r3, r7, #16
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7ff fe79 	bl	8009b0e <store_into_flash>
//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);

	sd_close(myfile);
 8009e1c:	f107 0308 	add.w	r3, r7, #8
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	f7ff fe69 	bl	8009af8 <sd_close>
	HAL_FLASH_Lock();
 8009e26:	f007 fffb 	bl	8011e20 <HAL_FLASH_Lock>

	return size_file;
 8009e2a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f607 0724 	addw	r7, r7, #2084	; 0x824
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd90      	pop	{r4, r7, pc}
 8009e38:	08020000 	.word	0x08020000
 8009e3c:	08060000 	.word	0x08060000
 8009e40:	080a0000 	.word	0x080a0000
 8009e44:	20000218 	.word	0x20000218
 8009e48:	20000258 	.word	0x20000258

08009e4c <read_chunk_data_in_flash>:

void read_chunk_data_in_flash(uint8_t *buf, uint32_t address, uint16_t size){
 8009e4c:	b480      	push	{r7}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	4613      	mov	r3, r2
 8009e58:	80fb      	strh	r3, [r7, #6]
	for(uint32_t index = 0; index< size ; index++){
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	617b      	str	r3, [r7, #20]
 8009e5e:	e00c      	b.n	8009e7a <read_chunk_data_in_flash+0x2e>
		*buf = *(__IO uint8_t *)(address + index);
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	4413      	add	r3, r2
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	701a      	strb	r2, [r3, #0]
		buf++;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3301      	adds	r3, #1
 8009e72:	60fb      	str	r3, [r7, #12]
	for(uint32_t index = 0; index< size ; index++){
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	3301      	adds	r3, #1
 8009e78:	617b      	str	r3, [r7, #20]
 8009e7a:	88fb      	ldrh	r3, [r7, #6]
 8009e7c:	697a      	ldr	r2, [r7, #20]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d3ee      	bcc.n	8009e60 <read_chunk_data_in_flash+0x14>
	}
}
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
 8009e86:	371c      	adds	r7, #28
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <tree_hash_on_flash>:

HAL_StatusTypeDef tree_hash_on_flash(defFlashSlot slot, uint8_t* md, uint32_t size){
 8009e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e92:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	f107 0308 	add.w	r3, r7, #8
 8009e9c:	6019      	str	r1, [r3, #0]
 8009e9e:	1d3b      	adds	r3, r7, #4
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	f107 030f 	add.w	r3, r7, #15
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	701a      	strb	r2, [r3, #0]
 8009eaa:	466b      	mov	r3, sp
 8009eac:	461d      	mov	r5, r3
	uint16 round = size/1024; round += (size%64 != 0)?1:0;
 8009eae:	1d3b      	adds	r3, r7, #4
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	0a9b      	lsrs	r3, r3, #10
 8009eb4:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8009eb8:	1d3b      	adds	r3, r7, #4
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <tree_hash_on_flash+0x38>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e000      	b.n	8009eca <tree_hash_on_flash+0x3a>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8009ece:	4413      	add	r3, r2
 8009ed0:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	uint8_t buff_hash[round][64];
 8009ed4:	f8d7 4824 	ldr.w	r4, [r7, #2084]	; 0x824
 8009ed8:	4623      	mov	r3, r4
 8009eda:	3b01      	subs	r3, #1
 8009edc:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f04f 0100 	mov.w	r1, #0
 8009ee6:	f04f 0200 	mov.w	r2, #0
 8009eea:	f04f 0300 	mov.w	r3, #0
 8009eee:	024b      	lsls	r3, r1, #9
 8009ef0:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8009ef4:	0242      	lsls	r2, r0, #9
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f04f 0100 	mov.w	r1, #0
 8009efc:	f04f 0200 	mov.w	r2, #0
 8009f00:	f04f 0300 	mov.w	r3, #0
 8009f04:	024b      	lsls	r3, r1, #9
 8009f06:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8009f0a:	0242      	lsls	r2, r0, #9
 8009f0c:	01a3      	lsls	r3, r4, #6
 8009f0e:	3307      	adds	r3, #7
 8009f10:	08db      	lsrs	r3, r3, #3
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	ebad 0d03 	sub.w	sp, sp, r3
 8009f18:	466b      	mov	r3, sp
 8009f1a:	3300      	adds	r3, #0
 8009f1c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	uint32_t BaseAddress;

	if(slot == FLASH_SLOT_0) BaseAddress = FLASH_SLOT_0_ADD;
 8009f20:	f107 030f 	add.w	r3, r7, #15
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d103      	bne.n	8009f32 <tree_hash_on_flash+0xa2>
 8009f2a:	4b70      	ldr	r3, [pc, #448]	; (800a0ec <tree_hash_on_flash+0x25c>)
 8009f2c:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8009f30:	e010      	b.n	8009f54 <tree_hash_on_flash+0xc4>
	else if(slot == FLASH_SLOT_1) BaseAddress = FLASH_SLOT_1_ADD;
 8009f32:	f107 030f 	add.w	r3, r7, #15
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d103      	bne.n	8009f44 <tree_hash_on_flash+0xb4>
 8009f3c:	4b6c      	ldr	r3, [pc, #432]	; (800a0f0 <tree_hash_on_flash+0x260>)
 8009f3e:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8009f42:	e007      	b.n	8009f54 <tree_hash_on_flash+0xc4>
	else if(slot == FLASH_SLOT_2) BaseAddress = FLASH_SLOT_2_ADD;
 8009f44:	f107 030f 	add.w	r3, r7, #15
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d102      	bne.n	8009f54 <tree_hash_on_flash+0xc4>
 8009f4e:	4b69      	ldr	r3, [pc, #420]	; (800a0f4 <tree_hash_on_flash+0x264>)
 8009f50:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
	else{}


	for(uint16 i = 0;i<round - 1;i++){
 8009f54:	2300      	movs	r3, #0
 8009f56:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8009f5a:	e029      	b.n	8009fb0 <tree_hash_on_flash+0x120>
		uint8 buff_file[1024] = {0,};
 8009f5c:	f107 0314 	add.w	r3, r7, #20
 8009f60:	2200      	movs	r2, #0
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	3304      	adds	r3, #4
 8009f66:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f00e fcad 	bl	80188cc <memset>
		read_chunk_data_in_flash(buff_file, BaseAddress + i*1024, 1024);
 8009f72:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8009f76:	029a      	lsls	r2, r3, #10
 8009f78:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8009f7c:	18d1      	adds	r1, r2, r3
 8009f7e:	f107 0314 	add.w	r3, r7, #20
 8009f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7ff ff60 	bl	8009e4c <read_chunk_data_in_flash>
		sha3(buff_file,1024, &buff_hash[i], 64);
 8009f8c:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8009f90:	019b      	lsls	r3, r3, #6
 8009f92:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 8009f96:	441a      	add	r2, r3
 8009f98:	f107 0014 	add.w	r0, r7, #20
 8009f9c:	2340      	movs	r3, #64	; 0x40
 8009f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fa2:	f004 ff4c 	bl	800ee3e <sha3>
	for(uint16 i = 0;i<round - 1;i++){
 8009fa6:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8009faa:	3301      	adds	r3, #1
 8009fac:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8009fb0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d3ce      	bcc.n	8009f5c <tree_hash_on_flash+0xcc>
	}

	uint8_t buff_file[1024] = {0,};
 8009fbe:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f00e fc7c 	bl	80188cc <memset>
	read_chunk_data_in_flash(buff_file, BaseAddress + (round-1)*1024, size%1024);
 8009fd4:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	029a      	lsls	r2, r3, #10
 8009fdc:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8009fe0:	18d1      	adds	r1, r2, r3
 8009fe2:	1d3b      	adds	r3, r7, #4
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7ff ff2a 	bl	8009e4c <read_chunk_data_in_flash>

	sha3(buff_file, size%1024, &buff_hash[round-1], 64);
 8009ff8:	1d3b      	adds	r3, r7, #4
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f3c3 0109 	ubfx	r1, r3, #0, #10
 800a000:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 800a004:	3b01      	subs	r3, #1
 800a006:	019b      	lsls	r3, r3, #6
 800a008:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 800a00c:	441a      	add	r2, r3
 800a00e:	f207 4014 	addw	r0, r7, #1044	; 0x414
 800a012:	2340      	movs	r3, #64	; 0x40
 800a014:	f004 ff13 	bl	800ee3e <sha3>


	uint8_t all_of_hash[round*64];
 800a018:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 800a01c:	019c      	lsls	r4, r3, #6
 800a01e:	466b      	mov	r3, sp
 800a020:	461e      	mov	r6, r3
 800a022:	4623      	mov	r3, r4
 800a024:	3b01      	subs	r3, #1
 800a026:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 800a02a:	4620      	mov	r0, r4
 800a02c:	f04f 0100 	mov.w	r1, #0
 800a030:	f04f 0200 	mov.w	r2, #0
 800a034:	f04f 0300 	mov.w	r3, #0
 800a038:	00cb      	lsls	r3, r1, #3
 800a03a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800a03e:	00c2      	lsls	r2, r0, #3
 800a040:	4620      	mov	r0, r4
 800a042:	f04f 0100 	mov.w	r1, #0
 800a046:	f04f 0200 	mov.w	r2, #0
 800a04a:	f04f 0300 	mov.w	r3, #0
 800a04e:	00cb      	lsls	r3, r1, #3
 800a050:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800a054:	00c2      	lsls	r2, r0, #3
 800a056:	1de3      	adds	r3, r4, #7
 800a058:	08db      	lsrs	r3, r3, #3
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	ebad 0d03 	sub.w	sp, sp, r3
 800a060:	466b      	mov	r3, sp
 800a062:	3300      	adds	r3, #0
 800a064:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	for(uint16 i = 0; i< round; i++){
 800a068:	2300      	movs	r3, #0
 800a06a:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 800a06e:	e024      	b.n	800a0ba <tree_hash_on_flash+0x22a>
		for(uint16 j = 0;j<64;j++){
 800a070:	2300      	movs	r3, #0
 800a072:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 800a076:	e017      	b.n	800a0a8 <tree_hash_on_flash+0x218>
			all_of_hash[i*64+j] = buff_hash[i][j];
 800a078:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 800a07c:	019a      	lsls	r2, r3, #6
 800a07e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800a082:	4413      	add	r3, r2
 800a084:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 800a088:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 800a08c:	0192      	lsls	r2, r2, #6
 800a08e:	4411      	add	r1, r2
 800a090:	f8d7 2834 	ldr.w	r2, [r7, #2100]	; 0x834
 800a094:	440a      	add	r2, r1
 800a096:	7811      	ldrb	r1, [r2, #0]
 800a098:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 800a09c:	54d1      	strb	r1, [r2, r3]
		for(uint16 j = 0;j<64;j++){
 800a09e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 800a0a8:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 800a0ac:	2b3f      	cmp	r3, #63	; 0x3f
 800a0ae:	d9e3      	bls.n	800a078 <tree_hash_on_flash+0x1e8>
	for(uint16 i = 0; i< round; i++){
 800a0b0:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 800a0ba:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 800a0be:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d3d4      	bcc.n	800a070 <tree_hash_on_flash+0x1e0>
		}
	}

	sha3(all_of_hash, round*64, md, 64);
 800a0c6:	f8d7 0814 	ldr.w	r0, [r7, #2068]	; 0x814
 800a0ca:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 800a0ce:	0199      	lsls	r1, r3, #6
 800a0d0:	f107 0208 	add.w	r2, r7, #8
 800a0d4:	2340      	movs	r3, #64	; 0x40
 800a0d6:	6812      	ldr	r2, [r2, #0]
 800a0d8:	f004 feb1 	bl	800ee3e <sha3>


	return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	46b5      	mov	sp, r6
 800a0e0:	46ad      	mov	sp, r5
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f607 073c 	addw	r7, r7, #2108	; 0x83c
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ec:	08020000 	.word	0x08020000
 800a0f0:	08060000 	.word	0x08060000
 800a0f4:	080a0000 	.word	0x080a0000

0800a0f8 <read_reset_cause>:

uint8_t read_reset_cause(){
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800a0fe:	f007 fe6d 	bl	8011ddc <HAL_FLASH_Unlock>
	uint8_t reset_cause = ((*((__IO uint32 *)0x080E0000))&0x00000100)>>8;
 800a102:	4b07      	ldr	r3, [pc, #28]	; (800a120 <read_reset_cause+0x28>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	0a1b      	lsrs	r3, r3, #8
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	71fb      	strb	r3, [r7, #7]
	HAL_FLASH_Lock();
 800a110:	f007 fe86 	bl	8011e20 <HAL_FLASH_Lock>
	return reset_cause;
 800a114:	79fb      	ldrb	r3, [r7, #7]

}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	080e0000 	.word	0x080e0000

0800a124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a124:	b590      	push	{r4, r7, lr}
 800a126:	f2ad 4de4 	subw	sp, sp, #1252	; 0x4e4
 800a12a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a12c:	f007 fc86 	bl	8011a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a130:	f000 f96e 	bl	800a410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a134:	f000 fafc 	bl	800a730 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 800a138:	f000 f9d4 	bl	800a4e4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800a13c:	f00b fe6a 	bl	8015e14 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800a140:	f000 faa2 	bl	800a688 <MX_USART1_UART_Init>
  MX_UART4_Init();
 800a144:	f000 fa76 	bl	800a634 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800a148:	f000 fac8 	bl	800a6dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800a14c:	f000 fa20 	bl	800a590 <MX_TIM1_Init>
  MX_SPI2_Init();
 800a150:	f000 f9e8 	bl	800a524 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800a154:	4898      	ldr	r0, [pc, #608]	; (800a3b8 <main+0x294>)
 800a156:	f00a fb2f 	bl	80147b8 <HAL_TIM_Base_Start>
  uint16_t time = 0;
 800a15a:	2300      	movs	r3, #0
 800a15c:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
  uint32_t total_time = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
//  W25qxx_WriteSector(Application1_Cert.publickey, 2, 64, 32);
//  W25qxx_WriteSector(Application1_Cert.hash, 2, 96, 64);
//
//  W25qxx_ReadSector(buffer, 1, 0, 160);

  if(read_reset_cause()) {
 800a166:	f7ff ffc7 	bl	800a0f8 <read_reset_cause>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d008      	beq.n	800a182 <main+0x5e>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800a170:	2201      	movs	r2, #1
 800a172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a176:	4891      	ldr	r0, [pc, #580]	; (800a3bc <main+0x298>)
 800a178:	f008 fa50 	bl	801261c <HAL_GPIO_WritePin>
	  goto_application(FLASH_SLOT_0_ADD);
 800a17c:	4890      	ldr	r0, [pc, #576]	; (800a3c0 <main+0x29c>)
 800a17e:	f7ff fc6b 	bl	8009a58 <goto_application>
  }
  HAL_UART_Transmit(&huart2, "\r*****THIS IS ROT PROGRAM*****\n\r", 32, 1000);
 800a182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a186:	2220      	movs	r2, #32
 800a188:	498e      	ldr	r1, [pc, #568]	; (800a3c4 <main+0x2a0>)
 800a18a:	488f      	ldr	r0, [pc, #572]	; (800a3c8 <main+0x2a4>)
 800a18c:	f00a fe47 	bl	8014e1e <HAL_UART_Transmit>
  uint8_t buffer[100] = {0,};
 800a190:	1d3b      	adds	r3, r7, #4
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	3304      	adds	r3, #4
 800a198:	2260      	movs	r2, #96	; 0x60
 800a19a:	2100      	movs	r1, #0
 800a19c:	4618      	mov	r0, r3
 800a19e:	f00e fb95 	bl	80188cc <memset>
  TIM1->CNT = 0;
 800a1a2:	4b8a      	ldr	r3, [pc, #552]	; (800a3cc <main+0x2a8>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	625a      	str	r2, [r3, #36]	; 0x24
  size = read_file_and_store_into_flash(&fatfs, &myfile, "boot.bin", FA_READ, FLASH_SLOT_0, signature, publickey, hashvaluer);
 800a1a8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800a1ac:	f507 7026 	add.w	r0, r7, #664	; 0x298
 800a1b0:	4b87      	ldr	r3, [pc, #540]	; (800a3d0 <main+0x2ac>)
 800a1b2:	9303      	str	r3, [sp, #12]
 800a1b4:	4b87      	ldr	r3, [pc, #540]	; (800a3d4 <main+0x2b0>)
 800a1b6:	9302      	str	r3, [sp, #8]
 800a1b8:	4b87      	ldr	r3, [pc, #540]	; (800a3d8 <main+0x2b4>)
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	4a86      	ldr	r2, [pc, #536]	; (800a3dc <main+0x2b8>)
 800a1c4:	f7ff fd06 	bl	8009bd4 <read_file_and_store_into_flash>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	4a85      	ldr	r2, [pc, #532]	; (800a3e0 <main+0x2bc>)
 800a1cc:	6013      	str	r3, [r2, #0]
  time = TIM1->CNT;
 800a1ce:	4b7f      	ldr	r3, [pc, #508]	; (800a3cc <main+0x2a8>)
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
  total_time += time;
 800a1d6:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 800a1da:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800a1de:	4413      	add	r3, r2
 800a1e0:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
  HAL_UART_Transmit(&huart2, "\r       -READ BOOTLOADER AND STORE IN FLASH\n\r", 50, 1000);
 800a1e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a1e8:	2232      	movs	r2, #50	; 0x32
 800a1ea:	497e      	ldr	r1, [pc, #504]	; (800a3e4 <main+0x2c0>)
 800a1ec:	4876      	ldr	r0, [pc, #472]	; (800a3c8 <main+0x2a4>)
 800a1ee:	f00a fe16 	bl	8014e1e <HAL_UART_Transmit>
  sprintf(buffer, "\r              +SIZE: %d BYTES\n\r              +TIME: %.2f(MS)\n\r", size, (float)time/5.0);
 800a1f2:	4b7b      	ldr	r3, [pc, #492]	; (800a3e0 <main+0x2bc>)
 800a1f4:	681c      	ldr	r4, [r3, #0]
 800a1f6:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 800a1fa:	ee07 3a90 	vmov	s15, r3
 800a1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a202:	ee17 0a90 	vmov	r0, s15
 800a206:	f7f6 f99f 	bl	8000548 <__aeabi_f2d>
 800a20a:	f04f 0200 	mov.w	r2, #0
 800a20e:	4b76      	ldr	r3, [pc, #472]	; (800a3e8 <main+0x2c4>)
 800a210:	f7f6 fb1c 	bl	800084c <__aeabi_ddiv>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	1d38      	adds	r0, r7, #4
 800a21a:	e9cd 2300 	strd	r2, r3, [sp]
 800a21e:	4622      	mov	r2, r4
 800a220:	4972      	ldr	r1, [pc, #456]	; (800a3ec <main+0x2c8>)
 800a222:	f00f f87f 	bl	8019324 <siprintf>
  HAL_UART_Transmit(&huart2, buffer, 100, 1000);
 800a226:	1d39      	adds	r1, r7, #4
 800a228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a22c:	2264      	movs	r2, #100	; 0x64
 800a22e:	4866      	ldr	r0, [pc, #408]	; (800a3c8 <main+0x2a4>)
 800a230:	f00a fdf5 	bl	8014e1e <HAL_UART_Transmit>
  memset(buffer, 0, 100);
 800a234:	1d3b      	adds	r3, r7, #4
 800a236:	2264      	movs	r2, #100	; 0x64
 800a238:	2100      	movs	r1, #0
 800a23a:	4618      	mov	r0, r3
 800a23c:	f00e fb46 	bl	80188cc <memset>
  TIM1->CNT = 0;
 800a240:	4b62      	ldr	r3, [pc, #392]	; (800a3cc <main+0x2a8>)
 800a242:	2200      	movs	r2, #0
 800a244:	625a      	str	r2, [r3, #36]	; 0x24
  tree_hash_on_flash(FLASH_SLOT_0, md, size);
 800a246:	4b66      	ldr	r3, [pc, #408]	; (800a3e0 <main+0x2bc>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	4968      	ldr	r1, [pc, #416]	; (800a3f0 <main+0x2cc>)
 800a24e:	2000      	movs	r0, #0
 800a250:	f7ff fe1e 	bl	8009e90 <tree_hash_on_flash>
  time = TIM1->CNT;
 800a254:	4b5d      	ldr	r3, [pc, #372]	; (800a3cc <main+0x2a8>)
 800a256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a258:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
  total_time += time;
 800a25c:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 800a260:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800a264:	4413      	add	r3, r2
 800a266:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
  HAL_UART_Transmit(&huart2, "\r       -TREE HASH IN FLASH\n\r", 28, 1000);
 800a26a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a26e:	221c      	movs	r2, #28
 800a270:	4960      	ldr	r1, [pc, #384]	; (800a3f4 <main+0x2d0>)
 800a272:	4855      	ldr	r0, [pc, #340]	; (800a3c8 <main+0x2a4>)
 800a274:	f00a fdd3 	bl	8014e1e <HAL_UART_Transmit>
  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 800a278:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 800a27c:	ee07 3a90 	vmov	s15, r3
 800a280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a284:	ee17 0a90 	vmov	r0, s15
 800a288:	f7f6 f95e 	bl	8000548 <__aeabi_f2d>
 800a28c:	f04f 0200 	mov.w	r2, #0
 800a290:	4b55      	ldr	r3, [pc, #340]	; (800a3e8 <main+0x2c4>)
 800a292:	f7f6 fadb 	bl	800084c <__aeabi_ddiv>
 800a296:	4602      	mov	r2, r0
 800a298:	460b      	mov	r3, r1
 800a29a:	1d38      	adds	r0, r7, #4
 800a29c:	4956      	ldr	r1, [pc, #344]	; (800a3f8 <main+0x2d4>)
 800a29e:	f00f f841 	bl	8019324 <siprintf>
  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 800a2a2:	1d39      	adds	r1, r7, #4
 800a2a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a2a8:	2228      	movs	r2, #40	; 0x28
 800a2aa:	4847      	ldr	r0, [pc, #284]	; (800a3c8 <main+0x2a4>)
 800a2ac:	f00a fdb7 	bl	8014e1e <HAL_UART_Transmit>
  memset(buffer, 0, 100);
 800a2b0:	1d3b      	adds	r3, r7, #4
 800a2b2:	2264      	movs	r2, #100	; 0x64
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f00e fb08 	bl	80188cc <memset>
  TIM1->CNT = 0;
 800a2bc:	4b43      	ldr	r3, [pc, #268]	; (800a3cc <main+0x2a8>)
 800a2be:	2200      	movs	r2, #0
 800a2c0:	625a      	str	r2, [r3, #36]	; 0x24
  W25qxx_Init();
 800a2c2:	f7f7 f9b1 	bl	8001628 <W25qxx_Init>
  W25qxx_ReadSector(sig, 1, ADDRESS_STORE_BOOTLOADER_CERT , 64);
 800a2c6:	2340      	movs	r3, #64	; 0x40
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	484b      	ldr	r0, [pc, #300]	; (800a3fc <main+0x2d8>)
 800a2ce:	f7f7 fb05 	bl	80018dc <W25qxx_ReadSector>
  W25qxx_ReadSector(pub, 1, ADDRESS_STORE_BOOTLOADER_CERT + 64, 32);
 800a2d2:	2320      	movs	r3, #32
 800a2d4:	2240      	movs	r2, #64	; 0x40
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	4849      	ldr	r0, [pc, #292]	; (800a400 <main+0x2dc>)
 800a2da:	f7f7 faff 	bl	80018dc <W25qxx_ReadSector>
  W25qxx_ReadSector(hashval, 1, ADDRESS_STORE_BOOTLOADER_CERT + 32 + 64, 64);
 800a2de:	2340      	movs	r3, #64	; 0x40
 800a2e0:	2260      	movs	r2, #96	; 0x60
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	4847      	ldr	r0, [pc, #284]	; (800a404 <main+0x2e0>)
 800a2e6:	f7f7 faf9 	bl	80018dc <W25qxx_ReadSector>
  if (ed25519_verify(sig, md, 64, pub)) {
 800a2ea:	4b45      	ldr	r3, [pc, #276]	; (800a400 <main+0x2dc>)
 800a2ec:	2240      	movs	r2, #64	; 0x40
 800a2ee:	4940      	ldr	r1, [pc, #256]	; (800a3f0 <main+0x2cc>)
 800a2f0:	4842      	ldr	r0, [pc, #264]	; (800a3fc <main+0x2d8>)
 800a2f2:	f007 fafb 	bl	80118ec <ed25519_verify>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d053      	beq.n	800a3a4 <main+0x280>
	  time = TIM1->CNT;
 800a2fc:	4b33      	ldr	r3, [pc, #204]	; (800a3cc <main+0x2a8>)
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
	  total_time += time;
 800a304:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 800a308:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 800a30c:	4413      	add	r3, r2
 800a30e:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
	  HAL_UART_Transmit(&huart2, "\r       -VERIFY BOOTLOADER SUCCESSFULL\n\r", 50, 1000);
 800a312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a316:	2232      	movs	r2, #50	; 0x32
 800a318:	493b      	ldr	r1, [pc, #236]	; (800a408 <main+0x2e4>)
 800a31a:	482b      	ldr	r0, [pc, #172]	; (800a3c8 <main+0x2a4>)
 800a31c:	f00a fd7f 	bl	8014e1e <HAL_UART_Transmit>
	  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 800a320:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 800a324:	ee07 3a90 	vmov	s15, r3
 800a328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32c:	ee17 0a90 	vmov	r0, s15
 800a330:	f7f6 f90a 	bl	8000548 <__aeabi_f2d>
 800a334:	f04f 0200 	mov.w	r2, #0
 800a338:	4b2b      	ldr	r3, [pc, #172]	; (800a3e8 <main+0x2c4>)
 800a33a:	f7f6 fa87 	bl	800084c <__aeabi_ddiv>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	1d38      	adds	r0, r7, #4
 800a344:	492c      	ldr	r1, [pc, #176]	; (800a3f8 <main+0x2d4>)
 800a346:	f00e ffed 	bl	8019324 <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 800a34a:	1d39      	adds	r1, r7, #4
 800a34c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a350:	2228      	movs	r2, #40	; 0x28
 800a352:	481d      	ldr	r0, [pc, #116]	; (800a3c8 <main+0x2a4>)
 800a354:	f00a fd63 	bl	8014e1e <HAL_UART_Transmit>
	  sprintf(buffer, "\r       -TOTAL TIME: %.2f(MS)\n\r", (float)total_time/5.0);
 800a358:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 800a35c:	ee07 3a90 	vmov	s15, r3
 800a360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a364:	ee17 0a90 	vmov	r0, s15
 800a368:	f7f6 f8ee 	bl	8000548 <__aeabi_f2d>
 800a36c:	f04f 0200 	mov.w	r2, #0
 800a370:	4b1d      	ldr	r3, [pc, #116]	; (800a3e8 <main+0x2c4>)
 800a372:	f7f6 fa6b 	bl	800084c <__aeabi_ddiv>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	1d38      	adds	r0, r7, #4
 800a37c:	4923      	ldr	r1, [pc, #140]	; (800a40c <main+0x2e8>)
 800a37e:	f00e ffd1 	bl	8019324 <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 800a382:	1d39      	adds	r1, r7, #4
 800a384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a388:	2228      	movs	r2, #40	; 0x28
 800a38a:	480f      	ldr	r0, [pc, #60]	; (800a3c8 <main+0x2a4>)
 800a38c:	f00a fd47 	bl	8014e1e <HAL_UART_Transmit>
	  goto_application(FLASH_SLOT_0_ADD);
 800a390:	480b      	ldr	r0, [pc, #44]	; (800a3c0 <main+0x29c>)
 800a392:	f7ff fb61 	bl	8009a58 <goto_application>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800a396:	2201      	movs	r2, #1
 800a398:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a39c:	4807      	ldr	r0, [pc, #28]	; (800a3bc <main+0x298>)
 800a39e:	f008 f93d 	bl	801261c <HAL_GPIO_WritePin>
 800a3a2:	e007      	b.n	800a3b4 <main+0x290>
  } else {
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a3aa:	4804      	ldr	r0, [pc, #16]	; (800a3bc <main+0x298>)
 800a3ac:	f008 f936 	bl	801261c <HAL_GPIO_WritePin>
	  Error_Handler();
 800a3b0:	f000 fa44 	bl	800a83c <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a3b4:	e7fe      	b.n	800a3b4 <main+0x290>
 800a3b6:	bf00      	nop
 800a3b8:	200004e8 	.word	0x200004e8
 800a3bc:	40020c00 	.word	0x40020c00
 800a3c0:	08020000 	.word	0x08020000
 800a3c4:	0801b1c4 	.word	0x0801b1c4
 800a3c8:	200005fc 	.word	0x200005fc
 800a3cc:	40010000 	.word	0x40010000
 800a3d0:	2000035c 	.word	0x2000035c
 800a3d4:	20000440 	.word	0x20000440
 800a3d8:	200003bc 	.word	0x200003bc
 800a3dc:	0801b1e8 	.word	0x0801b1e8
 800a3e0:	20000298 	.word	0x20000298
 800a3e4:	0801b1f4 	.word	0x0801b1f4
 800a3e8:	40140000 	.word	0x40140000
 800a3ec:	0801b224 	.word	0x0801b224
 800a3f0:	200003fc 	.word	0x200003fc
 800a3f4:	0801b264 	.word	0x0801b264
 800a3f8:	0801b284 	.word	0x0801b284
 800a3fc:	20000640 	.word	0x20000640
 800a400:	2000039c 	.word	0x2000039c
 800a404:	200004a8 	.word	0x200004a8
 800a408:	0801b2a8 	.word	0x0801b2a8
 800a40c:	0801b2d4 	.word	0x0801b2d4

0800a410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b094      	sub	sp, #80	; 0x50
 800a414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a416:	f107 0320 	add.w	r3, r7, #32
 800a41a:	2230      	movs	r2, #48	; 0x30
 800a41c:	2100      	movs	r1, #0
 800a41e:	4618      	mov	r0, r3
 800a420:	f00e fa54 	bl	80188cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a424:	f107 030c 	add.w	r3, r7, #12
 800a428:	2200      	movs	r2, #0
 800a42a:	601a      	str	r2, [r3, #0]
 800a42c:	605a      	str	r2, [r3, #4]
 800a42e:	609a      	str	r2, [r3, #8]
 800a430:	60da      	str	r2, [r3, #12]
 800a432:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a434:	2300      	movs	r3, #0
 800a436:	60bb      	str	r3, [r7, #8]
 800a438:	4b28      	ldr	r3, [pc, #160]	; (800a4dc <SystemClock_Config+0xcc>)
 800a43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43c:	4a27      	ldr	r2, [pc, #156]	; (800a4dc <SystemClock_Config+0xcc>)
 800a43e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a442:	6413      	str	r3, [r2, #64]	; 0x40
 800a444:	4b25      	ldr	r3, [pc, #148]	; (800a4dc <SystemClock_Config+0xcc>)
 800a446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a44c:	60bb      	str	r3, [r7, #8]
 800a44e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a450:	2300      	movs	r3, #0
 800a452:	607b      	str	r3, [r7, #4]
 800a454:	4b22      	ldr	r3, [pc, #136]	; (800a4e0 <SystemClock_Config+0xd0>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a21      	ldr	r2, [pc, #132]	; (800a4e0 <SystemClock_Config+0xd0>)
 800a45a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	4b1f      	ldr	r3, [pc, #124]	; (800a4e0 <SystemClock_Config+0xd0>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a468:	607b      	str	r3, [r7, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a46c:	2302      	movs	r3, #2
 800a46e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a470:	2301      	movs	r3, #1
 800a472:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a474:	2310      	movs	r3, #16
 800a476:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a478:	2302      	movs	r3, #2
 800a47a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a47c:	2300      	movs	r3, #0
 800a47e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a480:	2308      	movs	r3, #8
 800a482:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a484:	23a8      	movs	r3, #168	; 0xa8
 800a486:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a488:	2302      	movs	r3, #2
 800a48a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a48c:	2304      	movs	r3, #4
 800a48e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a490:	f107 0320 	add.w	r3, r7, #32
 800a494:	4618      	mov	r0, r3
 800a496:	f008 f8db 	bl	8012650 <HAL_RCC_OscConfig>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800a4a0:	f000 f9cc 	bl	800a83c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a4a4:	230f      	movs	r3, #15
 800a4a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a4b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a4b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a4b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a4bc:	f107 030c 	add.w	r3, r7, #12
 800a4c0:	2105      	movs	r1, #5
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f008 fb3c 	bl	8012b40 <HAL_RCC_ClockConfig>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800a4ce:	f000 f9b5 	bl	800a83c <Error_Handler>
  }
}
 800a4d2:	bf00      	nop
 800a4d4:	3750      	adds	r7, #80	; 0x50
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	40023800 	.word	0x40023800
 800a4e0:	40007000 	.word	0x40007000

0800a4e4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800a4e8:	4b0c      	ldr	r3, [pc, #48]	; (800a51c <MX_SDIO_SD_Init+0x38>)
 800a4ea:	4a0d      	ldr	r2, [pc, #52]	; (800a520 <MX_SDIO_SD_Init+0x3c>)
 800a4ec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a4ee:	4b0b      	ldr	r3, [pc, #44]	; (800a51c <MX_SDIO_SD_Init+0x38>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a4f4:	4b09      	ldr	r3, [pc, #36]	; (800a51c <MX_SDIO_SD_Init+0x38>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a4fa:	4b08      	ldr	r3, [pc, #32]	; (800a51c <MX_SDIO_SD_Init+0x38>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a500:	4b06      	ldr	r3, [pc, #24]	; (800a51c <MX_SDIO_SD_Init+0x38>)
 800a502:	2200      	movs	r2, #0
 800a504:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a506:	4b05      	ldr	r3, [pc, #20]	; (800a51c <MX_SDIO_SD_Init+0x38>)
 800a508:	2200      	movs	r2, #0
 800a50a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 800a50c:	4b03      	ldr	r3, [pc, #12]	; (800a51c <MX_SDIO_SD_Init+0x38>)
 800a50e:	2202      	movs	r2, #2
 800a510:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800a512:	bf00      	nop
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	20000530 	.word	0x20000530
 800a520:	40012c00 	.word	0x40012c00

0800a524 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a528:	4b17      	ldr	r3, [pc, #92]	; (800a588 <MX_SPI2_Init+0x64>)
 800a52a:	4a18      	ldr	r2, [pc, #96]	; (800a58c <MX_SPI2_Init+0x68>)
 800a52c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800a52e:	4b16      	ldr	r3, [pc, #88]	; (800a588 <MX_SPI2_Init+0x64>)
 800a530:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a534:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a536:	4b14      	ldr	r3, [pc, #80]	; (800a588 <MX_SPI2_Init+0x64>)
 800a538:	2200      	movs	r2, #0
 800a53a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a53c:	4b12      	ldr	r3, [pc, #72]	; (800a588 <MX_SPI2_Init+0x64>)
 800a53e:	2200      	movs	r2, #0
 800a540:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a542:	4b11      	ldr	r3, [pc, #68]	; (800a588 <MX_SPI2_Init+0x64>)
 800a544:	2200      	movs	r2, #0
 800a546:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a548:	4b0f      	ldr	r3, [pc, #60]	; (800a588 <MX_SPI2_Init+0x64>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800a54e:	4b0e      	ldr	r3, [pc, #56]	; (800a588 <MX_SPI2_Init+0x64>)
 800a550:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a554:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a556:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <MX_SPI2_Init+0x64>)
 800a558:	2200      	movs	r2, #0
 800a55a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a55c:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <MX_SPI2_Init+0x64>)
 800a55e:	2200      	movs	r2, #0
 800a560:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a562:	4b09      	ldr	r3, [pc, #36]	; (800a588 <MX_SPI2_Init+0x64>)
 800a564:	2200      	movs	r2, #0
 800a566:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a568:	4b07      	ldr	r3, [pc, #28]	; (800a588 <MX_SPI2_Init+0x64>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800a56e:	4b06      	ldr	r3, [pc, #24]	; (800a588 <MX_SPI2_Init+0x64>)
 800a570:	220a      	movs	r2, #10
 800a572:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a574:	4804      	ldr	r0, [pc, #16]	; (800a588 <MX_SPI2_Init+0x64>)
 800a576:	f009 fc63 	bl	8013e40 <HAL_SPI_Init>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800a580:	f000 f95c 	bl	800a83c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a584:	bf00      	nop
 800a586:	bd80      	pop	{r7, pc}
 800a588:	20000304 	.word	0x20000304
 800a58c:	40003800 	.word	0x40003800

0800a590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a596:	f107 0308 	add.w	r3, r7, #8
 800a59a:	2200      	movs	r2, #0
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	605a      	str	r2, [r3, #4]
 800a5a0:	609a      	str	r2, [r3, #8]
 800a5a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a5a4:	463b      	mov	r3, r7
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a5ac:	4b1f      	ldr	r3, [pc, #124]	; (800a62c <MX_TIM1_Init+0x9c>)
 800a5ae:	4a20      	ldr	r2, [pc, #128]	; (800a630 <MX_TIM1_Init+0xa0>)
 800a5b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 33600-1;
 800a5b2:	4b1e      	ldr	r3, [pc, #120]	; (800a62c <MX_TIM1_Init+0x9c>)
 800a5b4:	f248 323f 	movw	r2, #33599	; 0x833f
 800a5b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a5ba:	4b1c      	ldr	r3, [pc, #112]	; (800a62c <MX_TIM1_Init+0x9c>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800a5c0:	4b1a      	ldr	r3, [pc, #104]	; (800a62c <MX_TIM1_Init+0x9c>)
 800a5c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a5c8:	4b18      	ldr	r3, [pc, #96]	; (800a62c <MX_TIM1_Init+0x9c>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a5ce:	4b17      	ldr	r3, [pc, #92]	; (800a62c <MX_TIM1_Init+0x9c>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a5d4:	4b15      	ldr	r3, [pc, #84]	; (800a62c <MX_TIM1_Init+0x9c>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a5da:	4814      	ldr	r0, [pc, #80]	; (800a62c <MX_TIM1_Init+0x9c>)
 800a5dc:	f00a f89c 	bl	8014718 <HAL_TIM_Base_Init>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800a5e6:	f000 f929 	bl	800a83c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a5ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a5f0:	f107 0308 	add.w	r3, r7, #8
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	480d      	ldr	r0, [pc, #52]	; (800a62c <MX_TIM1_Init+0x9c>)
 800a5f8:	f00a f946 	bl	8014888 <HAL_TIM_ConfigClockSource>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800a602:	f000 f91b 	bl	800a83c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a606:	2300      	movs	r3, #0
 800a608:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a60a:	2300      	movs	r3, #0
 800a60c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a60e:	463b      	mov	r3, r7
 800a610:	4619      	mov	r1, r3
 800a612:	4806      	ldr	r0, [pc, #24]	; (800a62c <MX_TIM1_Init+0x9c>)
 800a614:	f00a fb3a 	bl	8014c8c <HAL_TIMEx_MasterConfigSynchronization>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800a61e:	f000 f90d 	bl	800a83c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800a622:	bf00      	nop
 800a624:	3718      	adds	r7, #24
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	200004e8 	.word	0x200004e8
 800a630:	40010000 	.word	0x40010000

0800a634 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800a638:	4b11      	ldr	r3, [pc, #68]	; (800a680 <MX_UART4_Init+0x4c>)
 800a63a:	4a12      	ldr	r2, [pc, #72]	; (800a684 <MX_UART4_Init+0x50>)
 800a63c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800a63e:	4b10      	ldr	r3, [pc, #64]	; (800a680 <MX_UART4_Init+0x4c>)
 800a640:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a644:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a646:	4b0e      	ldr	r3, [pc, #56]	; (800a680 <MX_UART4_Init+0x4c>)
 800a648:	2200      	movs	r2, #0
 800a64a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a64c:	4b0c      	ldr	r3, [pc, #48]	; (800a680 <MX_UART4_Init+0x4c>)
 800a64e:	2200      	movs	r2, #0
 800a650:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a652:	4b0b      	ldr	r3, [pc, #44]	; (800a680 <MX_UART4_Init+0x4c>)
 800a654:	2200      	movs	r2, #0
 800a656:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a658:	4b09      	ldr	r3, [pc, #36]	; (800a680 <MX_UART4_Init+0x4c>)
 800a65a:	220c      	movs	r2, #12
 800a65c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a65e:	4b08      	ldr	r3, [pc, #32]	; (800a680 <MX_UART4_Init+0x4c>)
 800a660:	2200      	movs	r2, #0
 800a662:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a664:	4b06      	ldr	r3, [pc, #24]	; (800a680 <MX_UART4_Init+0x4c>)
 800a666:	2200      	movs	r2, #0
 800a668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a66a:	4805      	ldr	r0, [pc, #20]	; (800a680 <MX_UART4_Init+0x4c>)
 800a66c:	f00a fb8a 	bl	8014d84 <HAL_UART_Init>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800a676:	f000 f8e1 	bl	800a83c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a67a:	bf00      	nop
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	200005b4 	.word	0x200005b4
 800a684:	40004c00 	.word	0x40004c00

0800a688 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a68c:	4b11      	ldr	r3, [pc, #68]	; (800a6d4 <MX_USART1_UART_Init+0x4c>)
 800a68e:	4a12      	ldr	r2, [pc, #72]	; (800a6d8 <MX_USART1_UART_Init+0x50>)
 800a690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800a692:	4b10      	ldr	r3, [pc, #64]	; (800a6d4 <MX_USART1_UART_Init+0x4c>)
 800a694:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a69a:	4b0e      	ldr	r3, [pc, #56]	; (800a6d4 <MX_USART1_UART_Init+0x4c>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a6a0:	4b0c      	ldr	r3, [pc, #48]	; (800a6d4 <MX_USART1_UART_Init+0x4c>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a6a6:	4b0b      	ldr	r3, [pc, #44]	; (800a6d4 <MX_USART1_UART_Init+0x4c>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a6ac:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <MX_USART1_UART_Init+0x4c>)
 800a6ae:	220c      	movs	r2, #12
 800a6b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a6b2:	4b08      	ldr	r3, [pc, #32]	; (800a6d4 <MX_USART1_UART_Init+0x4c>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a6b8:	4b06      	ldr	r3, [pc, #24]	; (800a6d4 <MX_USART1_UART_Init+0x4c>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a6be:	4805      	ldr	r0, [pc, #20]	; (800a6d4 <MX_USART1_UART_Init+0x4c>)
 800a6c0:	f00a fb60 	bl	8014d84 <HAL_UART_Init>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a6ca:	f000 f8b7 	bl	800a83c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a6ce:	bf00      	nop
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20000464 	.word	0x20000464
 800a6d8:	40011000 	.word	0x40011000

0800a6dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a6e0:	4b11      	ldr	r3, [pc, #68]	; (800a728 <MX_USART2_UART_Init+0x4c>)
 800a6e2:	4a12      	ldr	r2, [pc, #72]	; (800a72c <MX_USART2_UART_Init+0x50>)
 800a6e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800a6e6:	4b10      	ldr	r3, [pc, #64]	; (800a728 <MX_USART2_UART_Init+0x4c>)
 800a6e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a6ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a6ee:	4b0e      	ldr	r3, [pc, #56]	; (800a728 <MX_USART2_UART_Init+0x4c>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a6f4:	4b0c      	ldr	r3, [pc, #48]	; (800a728 <MX_USART2_UART_Init+0x4c>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a6fa:	4b0b      	ldr	r3, [pc, #44]	; (800a728 <MX_USART2_UART_Init+0x4c>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a700:	4b09      	ldr	r3, [pc, #36]	; (800a728 <MX_USART2_UART_Init+0x4c>)
 800a702:	220c      	movs	r2, #12
 800a704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a706:	4b08      	ldr	r3, [pc, #32]	; (800a728 <MX_USART2_UART_Init+0x4c>)
 800a708:	2200      	movs	r2, #0
 800a70a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a70c:	4b06      	ldr	r3, [pc, #24]	; (800a728 <MX_USART2_UART_Init+0x4c>)
 800a70e:	2200      	movs	r2, #0
 800a710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a712:	4805      	ldr	r0, [pc, #20]	; (800a728 <MX_USART2_UART_Init+0x4c>)
 800a714:	f00a fb36 	bl	8014d84 <HAL_UART_Init>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d001      	beq.n	800a722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a71e:	f000 f88d 	bl	800a83c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a722:	bf00      	nop
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	200005fc 	.word	0x200005fc
 800a72c:	40004400 	.word	0x40004400

0800a730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b08a      	sub	sp, #40	; 0x28
 800a734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a736:	f107 0314 	add.w	r3, r7, #20
 800a73a:	2200      	movs	r2, #0
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	605a      	str	r2, [r3, #4]
 800a740:	609a      	str	r2, [r3, #8]
 800a742:	60da      	str	r2, [r3, #12]
 800a744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a746:	2300      	movs	r3, #0
 800a748:	613b      	str	r3, [r7, #16]
 800a74a:	4b39      	ldr	r3, [pc, #228]	; (800a830 <MX_GPIO_Init+0x100>)
 800a74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74e:	4a38      	ldr	r2, [pc, #224]	; (800a830 <MX_GPIO_Init+0x100>)
 800a750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a754:	6313      	str	r3, [r2, #48]	; 0x30
 800a756:	4b36      	ldr	r3, [pc, #216]	; (800a830 <MX_GPIO_Init+0x100>)
 800a758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75e:	613b      	str	r3, [r7, #16]
 800a760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a762:	2300      	movs	r3, #0
 800a764:	60fb      	str	r3, [r7, #12]
 800a766:	4b32      	ldr	r3, [pc, #200]	; (800a830 <MX_GPIO_Init+0x100>)
 800a768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76a:	4a31      	ldr	r2, [pc, #196]	; (800a830 <MX_GPIO_Init+0x100>)
 800a76c:	f043 0301 	orr.w	r3, r3, #1
 800a770:	6313      	str	r3, [r2, #48]	; 0x30
 800a772:	4b2f      	ldr	r3, [pc, #188]	; (800a830 <MX_GPIO_Init+0x100>)
 800a774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a77e:	2300      	movs	r3, #0
 800a780:	60bb      	str	r3, [r7, #8]
 800a782:	4b2b      	ldr	r3, [pc, #172]	; (800a830 <MX_GPIO_Init+0x100>)
 800a784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a786:	4a2a      	ldr	r2, [pc, #168]	; (800a830 <MX_GPIO_Init+0x100>)
 800a788:	f043 0302 	orr.w	r3, r3, #2
 800a78c:	6313      	str	r3, [r2, #48]	; 0x30
 800a78e:	4b28      	ldr	r3, [pc, #160]	; (800a830 <MX_GPIO_Init+0x100>)
 800a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	60bb      	str	r3, [r7, #8]
 800a798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a79a:	2300      	movs	r3, #0
 800a79c:	607b      	str	r3, [r7, #4]
 800a79e:	4b24      	ldr	r3, [pc, #144]	; (800a830 <MX_GPIO_Init+0x100>)
 800a7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a2:	4a23      	ldr	r2, [pc, #140]	; (800a830 <MX_GPIO_Init+0x100>)
 800a7a4:	f043 0308 	orr.w	r3, r3, #8
 800a7a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a7aa:	4b21      	ldr	r3, [pc, #132]	; (800a830 <MX_GPIO_Init+0x100>)
 800a7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ae:	f003 0308 	and.w	r3, r3, #8
 800a7b2:	607b      	str	r3, [r7, #4]
 800a7b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	603b      	str	r3, [r7, #0]
 800a7ba:	4b1d      	ldr	r3, [pc, #116]	; (800a830 <MX_GPIO_Init+0x100>)
 800a7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7be:	4a1c      	ldr	r2, [pc, #112]	; (800a830 <MX_GPIO_Init+0x100>)
 800a7c0:	f043 0304 	orr.w	r3, r3, #4
 800a7c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a7c6:	4b1a      	ldr	r3, [pc, #104]	; (800a830 <MX_GPIO_Init+0x100>)
 800a7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ca:	f003 0304 	and.w	r3, r3, #4
 800a7ce:	603b      	str	r3, [r7, #0]
 800a7d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a7d8:	4816      	ldr	r0, [pc, #88]	; (800a834 <MX_GPIO_Init+0x104>)
 800a7da:	f007 ff1f 	bl	801261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800a7e4:	4814      	ldr	r0, [pc, #80]	; (800a838 <MX_GPIO_Init+0x108>)
 800a7e6:	f007 ff19 	bl	801261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a7ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7fc:	f107 0314 	add.w	r3, r7, #20
 800a800:	4619      	mov	r1, r3
 800a802:	480c      	ldr	r0, [pc, #48]	; (800a834 <MX_GPIO_Init+0x104>)
 800a804:	f007 fd6e 	bl	80122e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800a808:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a80c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a80e:	2301      	movs	r3, #1
 800a810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a812:	2300      	movs	r3, #0
 800a814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a816:	2300      	movs	r3, #0
 800a818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a81a:	f107 0314 	add.w	r3, r7, #20
 800a81e:	4619      	mov	r1, r3
 800a820:	4805      	ldr	r0, [pc, #20]	; (800a838 <MX_GPIO_Init+0x108>)
 800a822:	f007 fd5f 	bl	80122e4 <HAL_GPIO_Init>

}
 800a826:	bf00      	nop
 800a828:	3728      	adds	r7, #40	; 0x28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	40023800 	.word	0x40023800
 800a834:	40020400 	.word	0x40020400
 800a838:	40020c00 	.word	0x40020c00

0800a83c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a83c:	b480      	push	{r7}
 800a83e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a840:	b672      	cpsid	i
}
 800a842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a844:	e7fe      	b.n	800a844 <Error_Handler+0x8>

0800a846 <load_3>:
#include "fixedint.h"
#include "sc.h"

static uint64_t load_3(const unsigned char *in) {
 800a846:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
    uint64_t result;

    result = (uint64_t) in[0];
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	b2da      	uxtb	r2, r3
 800a856:	f04f 0300 	mov.w	r3, #0
 800a85a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result |= ((uint64_t) in[1]) << 8;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	3301      	adds	r3, #1
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	b2d8      	uxtb	r0, r3
 800a866:	f04f 0100 	mov.w	r1, #0
 800a86a:	f04f 0200 	mov.w	r2, #0
 800a86e:	f04f 0300 	mov.w	r3, #0
 800a872:	020b      	lsls	r3, r1, #8
 800a874:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a878:	0202      	lsls	r2, r0, #8
 800a87a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a87e:	ea40 0802 	orr.w	r8, r0, r2
 800a882:	ea41 0903 	orr.w	r9, r1, r3
 800a886:	e9c7 8902 	strd	r8, r9, [r7, #8]
    result |= ((uint64_t) in[2]) << 16;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	3302      	adds	r3, #2
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	b2d8      	uxtb	r0, r3
 800a892:	f04f 0100 	mov.w	r1, #0
 800a896:	f04f 0200 	mov.w	r2, #0
 800a89a:	f04f 0300 	mov.w	r3, #0
 800a89e:	040b      	lsls	r3, r1, #16
 800a8a0:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800a8a4:	0402      	lsls	r2, r0, #16
 800a8a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8aa:	ea40 0402 	orr.w	r4, r0, r2
 800a8ae:	ea41 0503 	orr.w	r5, r1, r3
 800a8b2:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return result;
 800a8b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	4619      	mov	r1, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800a8c6:	4770      	bx	lr

0800a8c8 <load_4>:

static uint64_t load_4(const unsigned char *in) {
 800a8c8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a8cc:	b086      	sub	sp, #24
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	60f8      	str	r0, [r7, #12]
    uint64_t result;

    result = (uint64_t) in[0];
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	b2da      	uxtb	r2, r3
 800a8d8:	f04f 0300 	mov.w	r3, #0
 800a8dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[1]) << 8;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	b2d8      	uxtb	r0, r3
 800a8e8:	f04f 0100 	mov.w	r1, #0
 800a8ec:	f04f 0200 	mov.w	r2, #0
 800a8f0:	f04f 0300 	mov.w	r3, #0
 800a8f4:	020b      	lsls	r3, r1, #8
 800a8f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8fa:	0202      	lsls	r2, r0, #8
 800a8fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a900:	ea40 0602 	orr.w	r6, r0, r2
 800a904:	603e      	str	r6, [r7, #0]
 800a906:	430b      	orrs	r3, r1
 800a908:	607b      	str	r3, [r7, #4]
 800a90a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a90e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[2]) << 16;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3302      	adds	r3, #2
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	b2d8      	uxtb	r0, r3
 800a91a:	f04f 0100 	mov.w	r1, #0
 800a91e:	f04f 0200 	mov.w	r2, #0
 800a922:	f04f 0300 	mov.w	r3, #0
 800a926:	040b      	lsls	r3, r1, #16
 800a928:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800a92c:	0402      	lsls	r2, r0, #16
 800a92e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a932:	ea40 0a02 	orr.w	sl, r0, r2
 800a936:	ea41 0b03 	orr.w	fp, r1, r3
 800a93a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    result |= ((uint64_t) in[3]) << 24;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3303      	adds	r3, #3
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	b2da      	uxtb	r2, r3
 800a946:	f04f 0300 	mov.w	r3, #0
 800a94a:	0a15      	lsrs	r5, r2, #8
 800a94c:	0614      	lsls	r4, r2, #24
 800a94e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a952:	ea42 0804 	orr.w	r8, r2, r4
 800a956:	ea43 0905 	orr.w	r9, r3, r5
 800a95a:	e9c7 8904 	strd	r8, r9, [r7, #16]
    
    return result;
 800a95e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800a962:	4610      	mov	r0, r2
 800a964:	4619      	mov	r1, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a96e:	4770      	bx	lr

0800a970 <sc_reduce>:
  s[0]+256*s[1]+...+256^31*s[31] = s mod l
  where l = 2^252 + 27742317777372353535851937790883648493.
  Overwrites s in place.
*/

void sc_reduce(unsigned char *s) {
 800a970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a974:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 800a978:	af00      	add	r7, sp, #0
 800a97a:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a97e:	6018      	str	r0, [r3, #0]
    int64_t s0 = 2097151 & load_3(s);
 800a980:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	f7ff ff5e 	bl	800a846 <load_3>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	4610      	mov	r0, r2
 800a990:	4619      	mov	r1, r3
 800a992:	4af0      	ldr	r2, [pc, #960]	; (800ad54 <sc_reduce+0x3e4>)
 800a994:	f04f 0300 	mov.w	r3, #0
 800a998:	ea00 0402 	and.w	r4, r0, r2
 800a99c:	ea01 0503 	and.w	r5, r1, r3
 800a9a0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800a9a4:	e9c3 4500 	strd	r4, r5, [r3]
    int64_t s1 = 2097151 & (load_4(s + 2) >> 5);
 800a9a8:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3302      	adds	r3, #2
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7ff ff89 	bl	800a8c8 <load_4>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	f04f 0000 	mov.w	r0, #0
 800a9be:	f04f 0100 	mov.w	r1, #0
 800a9c2:	0950      	lsrs	r0, r2, #5
 800a9c4:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 800a9c8:	0959      	lsrs	r1, r3, #5
 800a9ca:	4ae2      	ldr	r2, [pc, #904]	; (800ad54 <sc_reduce+0x3e4>)
 800a9cc:	f04f 0300 	mov.w	r3, #0
 800a9d0:	ea00 0802 	and.w	r8, r0, r2
 800a9d4:	ea01 0903 	and.w	r9, r1, r3
 800a9d8:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800a9dc:	e9c3 8900 	strd	r8, r9, [r3]
    int64_t s2 = 2097151 & (load_3(s + 5) >> 2);
 800a9e0:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3305      	adds	r3, #5
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff ff2c 	bl	800a846 <load_3>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	f04f 0000 	mov.w	r0, #0
 800a9f6:	f04f 0100 	mov.w	r1, #0
 800a9fa:	0890      	lsrs	r0, r2, #2
 800a9fc:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800aa00:	0899      	lsrs	r1, r3, #2
 800aa02:	4ad4      	ldr	r2, [pc, #848]	; (800ad54 <sc_reduce+0x3e4>)
 800aa04:	f04f 0300 	mov.w	r3, #0
 800aa08:	ea00 0a02 	and.w	sl, r0, r2
 800aa0c:	ea01 0b03 	and.w	fp, r1, r3
 800aa10:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800aa14:	e9c3 ab00 	strd	sl, fp, [r3]
    int64_t s3 = 2097151 & (load_4(s + 7) >> 7);
 800aa18:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3307      	adds	r3, #7
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff ff51 	bl	800a8c8 <load_4>
 800aa26:	4602      	mov	r2, r0
 800aa28:	460b      	mov	r3, r1
 800aa2a:	f04f 0000 	mov.w	r0, #0
 800aa2e:	f04f 0100 	mov.w	r1, #0
 800aa32:	09d0      	lsrs	r0, r2, #7
 800aa34:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800aa38:	09d9      	lsrs	r1, r3, #7
 800aa3a:	4ac6      	ldr	r2, [pc, #792]	; (800ad54 <sc_reduce+0x3e4>)
 800aa3c:	f04f 0300 	mov.w	r3, #0
 800aa40:	ea00 0402 	and.w	r4, r0, r2
 800aa44:	f8c7 4620 	str.w	r4, [r7, #1568]	; 0x620
 800aa48:	400b      	ands	r3, r1
 800aa4a:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 800aa4e:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800aa52:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa56:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800aa5a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s4 = 2097151 & (load_4(s + 10) >> 4);
 800aa5e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	330a      	adds	r3, #10
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7ff ff2e 	bl	800a8c8 <load_4>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	f04f 0000 	mov.w	r0, #0
 800aa74:	f04f 0100 	mov.w	r1, #0
 800aa78:	0910      	lsrs	r0, r2, #4
 800aa7a:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800aa7e:	0919      	lsrs	r1, r3, #4
 800aa80:	4ab4      	ldr	r2, [pc, #720]	; (800ad54 <sc_reduce+0x3e4>)
 800aa82:	f04f 0300 	mov.w	r3, #0
 800aa86:	ea00 0402 	and.w	r4, r0, r2
 800aa8a:	f8c7 4618 	str.w	r4, [r7, #1560]	; 0x618
 800aa8e:	400b      	ands	r3, r1
 800aa90:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800aa94:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800aa98:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa9c:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800aaa0:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s5 = 2097151 & (load_3(s + 13) >> 1);
 800aaa4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	330d      	adds	r3, #13
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7ff feca 	bl	800a846 <load_3>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	f04f 0000 	mov.w	r0, #0
 800aaba:	f04f 0100 	mov.w	r1, #0
 800aabe:	0850      	lsrs	r0, r2, #1
 800aac0:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800aac4:	0859      	lsrs	r1, r3, #1
 800aac6:	4aa3      	ldr	r2, [pc, #652]	; (800ad54 <sc_reduce+0x3e4>)
 800aac8:	f04f 0300 	mov.w	r3, #0
 800aacc:	ea00 0402 	and.w	r4, r0, r2
 800aad0:	f8c7 4610 	str.w	r4, [r7, #1552]	; 0x610
 800aad4:	400b      	ands	r3, r1
 800aad6:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 800aada:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800aade:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aae2:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800aae6:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s6 = 2097151 & (load_4(s + 15) >> 6);
 800aaea:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	330f      	adds	r3, #15
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7ff fee8 	bl	800a8c8 <load_4>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	f04f 0000 	mov.w	r0, #0
 800ab00:	f04f 0100 	mov.w	r1, #0
 800ab04:	0990      	lsrs	r0, r2, #6
 800ab06:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800ab0a:	0999      	lsrs	r1, r3, #6
 800ab0c:	4a91      	ldr	r2, [pc, #580]	; (800ad54 <sc_reduce+0x3e4>)
 800ab0e:	f04f 0300 	mov.w	r3, #0
 800ab12:	ea00 0402 	and.w	r4, r0, r2
 800ab16:	f8c7 4608 	str.w	r4, [r7, #1544]	; 0x608
 800ab1a:	400b      	ands	r3, r1
 800ab1c:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800ab20:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 800ab24:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab28:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800ab2c:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s7 = 2097151 & (load_3(s + 18) >> 3);
 800ab30:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	3312      	adds	r3, #18
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff fe84 	bl	800a846 <load_3>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	f04f 0000 	mov.w	r0, #0
 800ab46:	f04f 0100 	mov.w	r1, #0
 800ab4a:	08d0      	lsrs	r0, r2, #3
 800ab4c:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800ab50:	08d9      	lsrs	r1, r3, #3
 800ab52:	4a80      	ldr	r2, [pc, #512]	; (800ad54 <sc_reduce+0x3e4>)
 800ab54:	f04f 0300 	mov.w	r3, #0
 800ab58:	ea00 0402 	and.w	r4, r0, r2
 800ab5c:	f8c7 4600 	str.w	r4, [r7, #1536]	; 0x600
 800ab60:	400b      	ands	r3, r1
 800ab62:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800ab66:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800ab6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab6e:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800ab72:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s8 = 2097151 & load_3(s + 21);
 800ab76:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3315      	adds	r3, #21
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7ff fe61 	bl	800a846 <load_3>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4610      	mov	r0, r2
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	4a71      	ldr	r2, [pc, #452]	; (800ad54 <sc_reduce+0x3e4>)
 800ab8e:	f04f 0300 	mov.w	r3, #0
 800ab92:	ea00 0402 	and.w	r4, r0, r2
 800ab96:	f8c7 45f8 	str.w	r4, [r7, #1528]	; 0x5f8
 800ab9a:	400b      	ands	r3, r1
 800ab9c:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800aba0:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 800aba4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aba8:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800abac:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s9 = 2097151 & (load_4(s + 23) >> 5);
 800abb0:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3317      	adds	r3, #23
 800abb8:	4618      	mov	r0, r3
 800abba:	f7ff fe85 	bl	800a8c8 <load_4>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	f04f 0000 	mov.w	r0, #0
 800abc6:	f04f 0100 	mov.w	r1, #0
 800abca:	0950      	lsrs	r0, r2, #5
 800abcc:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 800abd0:	0959      	lsrs	r1, r3, #5
 800abd2:	4a60      	ldr	r2, [pc, #384]	; (800ad54 <sc_reduce+0x3e4>)
 800abd4:	f04f 0300 	mov.w	r3, #0
 800abd8:	ea00 0402 	and.w	r4, r0, r2
 800abdc:	f8c7 45f0 	str.w	r4, [r7, #1520]	; 0x5f0
 800abe0:	400b      	ands	r3, r1
 800abe2:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800abe6:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800abea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800abee:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800abf2:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s10 = 2097151 & (load_3(s + 26) >> 2);
 800abf6:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	331a      	adds	r3, #26
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7ff fe21 	bl	800a846 <load_3>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	f04f 0000 	mov.w	r0, #0
 800ac0c:	f04f 0100 	mov.w	r1, #0
 800ac10:	0890      	lsrs	r0, r2, #2
 800ac12:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ac16:	0899      	lsrs	r1, r3, #2
 800ac18:	4a4e      	ldr	r2, [pc, #312]	; (800ad54 <sc_reduce+0x3e4>)
 800ac1a:	f04f 0300 	mov.w	r3, #0
 800ac1e:	ea00 0402 	and.w	r4, r0, r2
 800ac22:	f8c7 45e8 	str.w	r4, [r7, #1512]	; 0x5e8
 800ac26:	400b      	ands	r3, r1
 800ac28:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 800ac2c:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 800ac30:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac34:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800ac38:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s11 = 2097151 & (load_4(s + 28) >> 7);
 800ac3c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	331c      	adds	r3, #28
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7ff fe3f 	bl	800a8c8 <load_4>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	f04f 0000 	mov.w	r0, #0
 800ac52:	f04f 0100 	mov.w	r1, #0
 800ac56:	09d0      	lsrs	r0, r2, #7
 800ac58:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800ac5c:	09d9      	lsrs	r1, r3, #7
 800ac5e:	4a3d      	ldr	r2, [pc, #244]	; (800ad54 <sc_reduce+0x3e4>)
 800ac60:	f04f 0300 	mov.w	r3, #0
 800ac64:	ea00 0402 	and.w	r4, r0, r2
 800ac68:	f8c7 45e0 	str.w	r4, [r7, #1504]	; 0x5e0
 800ac6c:	400b      	ands	r3, r1
 800ac6e:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 800ac72:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800ac76:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac7a:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800ac7e:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s12 = 2097151 & (load_4(s + 31) >> 4);
 800ac82:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	331f      	adds	r3, #31
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7ff fe1c 	bl	800a8c8 <load_4>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	f04f 0000 	mov.w	r0, #0
 800ac98:	f04f 0100 	mov.w	r1, #0
 800ac9c:	0910      	lsrs	r0, r2, #4
 800ac9e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800aca2:	0919      	lsrs	r1, r3, #4
 800aca4:	4a2b      	ldr	r2, [pc, #172]	; (800ad54 <sc_reduce+0x3e4>)
 800aca6:	f04f 0300 	mov.w	r3, #0
 800acaa:	ea00 0402 	and.w	r4, r0, r2
 800acae:	f8c7 45d8 	str.w	r4, [r7, #1496]	; 0x5d8
 800acb2:	400b      	ands	r3, r1
 800acb4:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800acb8:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800acbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acc0:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800acc4:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s13 = 2097151 & (load_3(s + 34) >> 1);
 800acc8:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3322      	adds	r3, #34	; 0x22
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff fdb8 	bl	800a846 <load_3>
 800acd6:	4602      	mov	r2, r0
 800acd8:	460b      	mov	r3, r1
 800acda:	f04f 0000 	mov.w	r0, #0
 800acde:	f04f 0100 	mov.w	r1, #0
 800ace2:	0850      	lsrs	r0, r2, #1
 800ace4:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800ace8:	0859      	lsrs	r1, r3, #1
 800acea:	4a1a      	ldr	r2, [pc, #104]	; (800ad54 <sc_reduce+0x3e4>)
 800acec:	f04f 0300 	mov.w	r3, #0
 800acf0:	ea00 0402 	and.w	r4, r0, r2
 800acf4:	f8c7 45d0 	str.w	r4, [r7, #1488]	; 0x5d0
 800acf8:	400b      	ands	r3, r1
 800acfa:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800acfe:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800ad02:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad06:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800ad0a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s14 = 2097151 & (load_4(s + 36) >> 6);
 800ad0e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3324      	adds	r3, #36	; 0x24
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7ff fdd6 	bl	800a8c8 <load_4>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	460b      	mov	r3, r1
 800ad20:	f04f 0000 	mov.w	r0, #0
 800ad24:	f04f 0100 	mov.w	r1, #0
 800ad28:	0990      	lsrs	r0, r2, #6
 800ad2a:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800ad2e:	0999      	lsrs	r1, r3, #6
 800ad30:	4a08      	ldr	r2, [pc, #32]	; (800ad54 <sc_reduce+0x3e4>)
 800ad32:	f04f 0300 	mov.w	r3, #0
 800ad36:	ea00 0402 	and.w	r4, r0, r2
 800ad3a:	f8c7 45c8 	str.w	r4, [r7, #1480]	; 0x5c8
 800ad3e:	400b      	ands	r3, r1
 800ad40:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800ad44:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800ad48:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad4c:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800ad50:	e002      	b.n	800ad58 <sc_reduce+0x3e8>
 800ad52:	bf00      	nop
 800ad54:	001fffff 	.word	0x001fffff
 800ad58:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s15 = 2097151 & (load_3(s + 39) >> 3);
 800ad5c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3327      	adds	r3, #39	; 0x27
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7ff fd6e 	bl	800a846 <load_3>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	f04f 0000 	mov.w	r0, #0
 800ad72:	f04f 0100 	mov.w	r1, #0
 800ad76:	08d0      	lsrs	r0, r2, #3
 800ad78:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800ad7c:	08d9      	lsrs	r1, r3, #3
 800ad7e:	4aec      	ldr	r2, [pc, #944]	; (800b130 <sc_reduce+0x7c0>)
 800ad80:	f04f 0300 	mov.w	r3, #0
 800ad84:	ea00 0402 	and.w	r4, r0, r2
 800ad88:	f8c7 45c0 	str.w	r4, [r7, #1472]	; 0x5c0
 800ad8c:	400b      	ands	r3, r1
 800ad8e:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800ad92:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800ad96:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad9a:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 800ad9e:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s16 = 2097151 & load_3(s + 42);
 800ada2:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	332a      	adds	r3, #42	; 0x2a
 800adaa:	4618      	mov	r0, r3
 800adac:	f7ff fd4b 	bl	800a846 <load_3>
 800adb0:	4602      	mov	r2, r0
 800adb2:	460b      	mov	r3, r1
 800adb4:	4610      	mov	r0, r2
 800adb6:	4619      	mov	r1, r3
 800adb8:	4add      	ldr	r2, [pc, #884]	; (800b130 <sc_reduce+0x7c0>)
 800adba:	f04f 0300 	mov.w	r3, #0
 800adbe:	ea00 0402 	and.w	r4, r0, r2
 800adc2:	f8c7 45b8 	str.w	r4, [r7, #1464]	; 0x5b8
 800adc6:	400b      	ands	r3, r1
 800adc8:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800adcc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800add0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800add4:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800add8:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s17 = 2097151 & (load_4(s + 44) >> 5);
 800addc:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	332c      	adds	r3, #44	; 0x2c
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7ff fd6f 	bl	800a8c8 <load_4>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	f04f 0000 	mov.w	r0, #0
 800adf2:	f04f 0100 	mov.w	r1, #0
 800adf6:	0950      	lsrs	r0, r2, #5
 800adf8:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 800adfc:	0959      	lsrs	r1, r3, #5
 800adfe:	4acc      	ldr	r2, [pc, #816]	; (800b130 <sc_reduce+0x7c0>)
 800ae00:	f04f 0300 	mov.w	r3, #0
 800ae04:	ea00 0402 	and.w	r4, r0, r2
 800ae08:	f8c7 45b0 	str.w	r4, [r7, #1456]	; 0x5b0
 800ae0c:	400b      	ands	r3, r1
 800ae0e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800ae12:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800ae16:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae1a:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800ae1e:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s18 = 2097151 & (load_3(s + 47) >> 2);
 800ae22:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	332f      	adds	r3, #47	; 0x2f
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7ff fd0b 	bl	800a846 <load_3>
 800ae30:	4602      	mov	r2, r0
 800ae32:	460b      	mov	r3, r1
 800ae34:	f04f 0000 	mov.w	r0, #0
 800ae38:	f04f 0100 	mov.w	r1, #0
 800ae3c:	0890      	lsrs	r0, r2, #2
 800ae3e:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800ae42:	0899      	lsrs	r1, r3, #2
 800ae44:	4aba      	ldr	r2, [pc, #744]	; (800b130 <sc_reduce+0x7c0>)
 800ae46:	f04f 0300 	mov.w	r3, #0
 800ae4a:	ea00 0402 	and.w	r4, r0, r2
 800ae4e:	f8c7 45a8 	str.w	r4, [r7, #1448]	; 0x5a8
 800ae52:	400b      	ands	r3, r1
 800ae54:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800ae58:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800ae5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae60:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 800ae64:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s19 = 2097151 & (load_4(s + 49) >> 7);
 800ae68:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3331      	adds	r3, #49	; 0x31
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7ff fd29 	bl	800a8c8 <load_4>
 800ae76:	4602      	mov	r2, r0
 800ae78:	460b      	mov	r3, r1
 800ae7a:	f04f 0000 	mov.w	r0, #0
 800ae7e:	f04f 0100 	mov.w	r1, #0
 800ae82:	09d0      	lsrs	r0, r2, #7
 800ae84:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800ae88:	09d9      	lsrs	r1, r3, #7
 800ae8a:	4aa9      	ldr	r2, [pc, #676]	; (800b130 <sc_reduce+0x7c0>)
 800ae8c:	f04f 0300 	mov.w	r3, #0
 800ae90:	ea00 0402 	and.w	r4, r0, r2
 800ae94:	f8c7 45a0 	str.w	r4, [r7, #1440]	; 0x5a0
 800ae98:	400b      	ands	r3, r1
 800ae9a:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800ae9e:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800aea2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aea6:	f507 62f2 	add.w	r2, r7, #1936	; 0x790
 800aeaa:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s20 = 2097151 & (load_4(s + 52) >> 4);
 800aeae:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3334      	adds	r3, #52	; 0x34
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff fd06 	bl	800a8c8 <load_4>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	f04f 0000 	mov.w	r0, #0
 800aec4:	f04f 0100 	mov.w	r1, #0
 800aec8:	0910      	lsrs	r0, r2, #4
 800aeca:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800aece:	0919      	lsrs	r1, r3, #4
 800aed0:	4a97      	ldr	r2, [pc, #604]	; (800b130 <sc_reduce+0x7c0>)
 800aed2:	f04f 0300 	mov.w	r3, #0
 800aed6:	ea00 0402 	and.w	r4, r0, r2
 800aeda:	f8c7 4598 	str.w	r4, [r7, #1432]	; 0x598
 800aede:	400b      	ands	r3, r1
 800aee0:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800aee4:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800aee8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aeec:	f507 62f1 	add.w	r2, r7, #1928	; 0x788
 800aef0:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s21 = 2097151 & (load_3(s + 55) >> 1);
 800aef4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3337      	adds	r3, #55	; 0x37
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7ff fca2 	bl	800a846 <load_3>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	f04f 0000 	mov.w	r0, #0
 800af0a:	f04f 0100 	mov.w	r1, #0
 800af0e:	0850      	lsrs	r0, r2, #1
 800af10:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800af14:	0859      	lsrs	r1, r3, #1
 800af16:	4a86      	ldr	r2, [pc, #536]	; (800b130 <sc_reduce+0x7c0>)
 800af18:	f04f 0300 	mov.w	r3, #0
 800af1c:	ea00 0402 	and.w	r4, r0, r2
 800af20:	f8c7 4590 	str.w	r4, [r7, #1424]	; 0x590
 800af24:	400b      	ands	r3, r1
 800af26:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800af2a:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800af2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af32:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800af36:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s22 = 2097151 & (load_4(s + 57) >> 6);
 800af3a:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3339      	adds	r3, #57	; 0x39
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff fcc0 	bl	800a8c8 <load_4>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	f04f 0000 	mov.w	r0, #0
 800af50:	f04f 0100 	mov.w	r1, #0
 800af54:	0990      	lsrs	r0, r2, #6
 800af56:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800af5a:	0999      	lsrs	r1, r3, #6
 800af5c:	4a74      	ldr	r2, [pc, #464]	; (800b130 <sc_reduce+0x7c0>)
 800af5e:	f04f 0300 	mov.w	r3, #0
 800af62:	ea00 0402 	and.w	r4, r0, r2
 800af66:	f8c7 4588 	str.w	r4, [r7, #1416]	; 0x588
 800af6a:	400b      	ands	r3, r1
 800af6c:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800af70:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800af74:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af78:	f507 62ef 	add.w	r2, r7, #1912	; 0x778
 800af7c:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s23 = (load_4(s + 60) >> 3);
 800af80:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	333c      	adds	r3, #60	; 0x3c
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff fc9d 	bl	800a8c8 <load_4>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	f04f 0000 	mov.w	r0, #0
 800af96:	f04f 0100 	mov.w	r1, #0
 800af9a:	08d0      	lsrs	r0, r2, #3
 800af9c:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 800afa0:	08d9      	lsrs	r1, r3, #3
 800afa2:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800afa6:	e9c3 0100 	strd	r0, r1, [r3]
    int64_t carry13;
    int64_t carry14;
    int64_t carry15;
    int64_t carry16;

    s11 += s23 * 666643;
 800afaa:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800afae:	4b61      	ldr	r3, [pc, #388]	; (800b134 <sc_reduce+0x7c4>)
 800afb0:	fb03 f102 	mul.w	r1, r3, r2
 800afb4:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800afb8:	2300      	movs	r3, #0
 800afba:	fb03 f302 	mul.w	r3, r3, r2
 800afbe:	18cc      	adds	r4, r1, r3
 800afc0:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800afc4:	4b5b      	ldr	r3, [pc, #364]	; (800b134 <sc_reduce+0x7c4>)
 800afc6:	fba2 0103 	umull	r0, r1, r2, r3
 800afca:	1863      	adds	r3, r4, r1
 800afcc:	4619      	mov	r1, r3
 800afce:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	1814      	adds	r4, r2, r0
 800afd8:	f8c7 4580 	str.w	r4, [r7, #1408]	; 0x580
 800afdc:	414b      	adcs	r3, r1
 800afde:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800afe2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800afe6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afea:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800afee:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s23 * 470296;
 800aff2:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800aff6:	4b50      	ldr	r3, [pc, #320]	; (800b138 <sc_reduce+0x7c8>)
 800aff8:	fb03 f102 	mul.w	r1, r3, r2
 800affc:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800b000:	2300      	movs	r3, #0
 800b002:	fb03 f302 	mul.w	r3, r3, r2
 800b006:	18cc      	adds	r4, r1, r3
 800b008:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800b00c:	4b4a      	ldr	r3, [pc, #296]	; (800b138 <sc_reduce+0x7c8>)
 800b00e:	fba2 0103 	umull	r0, r1, r2, r3
 800b012:	1863      	adds	r3, r4, r1
 800b014:	4619      	mov	r1, r3
 800b016:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	1814      	adds	r4, r2, r0
 800b020:	f8c7 4578 	str.w	r4, [r7, #1400]	; 0x578
 800b024:	414b      	adcs	r3, r1
 800b026:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800b02a:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800b02e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b032:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800b036:	e9c2 3400 	strd	r3, r4, [r2]
    s13 += s23 * 654183;
 800b03a:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800b03e:	4b3f      	ldr	r3, [pc, #252]	; (800b13c <sc_reduce+0x7cc>)
 800b040:	fb03 f102 	mul.w	r1, r3, r2
 800b044:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800b048:	2300      	movs	r3, #0
 800b04a:	fb03 f302 	mul.w	r3, r3, r2
 800b04e:	18cc      	adds	r4, r1, r3
 800b050:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800b054:	4b39      	ldr	r3, [pc, #228]	; (800b13c <sc_reduce+0x7cc>)
 800b056:	fba2 0103 	umull	r0, r1, r2, r3
 800b05a:	1863      	adds	r3, r4, r1
 800b05c:	4619      	mov	r1, r3
 800b05e:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	1814      	adds	r4, r2, r0
 800b068:	f8c7 4570 	str.w	r4, [r7, #1392]	; 0x570
 800b06c:	414b      	adcs	r3, r1
 800b06e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800b072:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800b076:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b07a:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800b07e:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= s23 * 997805;
 800b082:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800b086:	4b2e      	ldr	r3, [pc, #184]	; (800b140 <sc_reduce+0x7d0>)
 800b088:	fb03 f102 	mul.w	r1, r3, r2
 800b08c:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800b090:	f04f 33ff 	mov.w	r3, #4294967295
 800b094:	fb03 f302 	mul.w	r3, r3, r2
 800b098:	18cc      	adds	r4, r1, r3
 800b09a:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800b09e:	4b28      	ldr	r3, [pc, #160]	; (800b140 <sc_reduce+0x7d0>)
 800b0a0:	fba2 0103 	umull	r0, r1, r2, r3
 800b0a4:	1863      	adds	r3, r4, r1
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800b0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b0:	1814      	adds	r4, r2, r0
 800b0b2:	f8c7 4568 	str.w	r4, [r7, #1384]	; 0x568
 800b0b6:	414b      	adcs	r3, r1
 800b0b8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800b0bc:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800b0c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0c4:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800b0c8:	e9c2 3400 	strd	r3, r4, [r2]
    s15 += s23 * 136657;
 800b0cc:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800b0d0:	4b1c      	ldr	r3, [pc, #112]	; (800b144 <sc_reduce+0x7d4>)
 800b0d2:	fb03 f102 	mul.w	r1, r3, r2
 800b0d6:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800b0da:	2300      	movs	r3, #0
 800b0dc:	fb03 f302 	mul.w	r3, r3, r2
 800b0e0:	18cc      	adds	r4, r1, r3
 800b0e2:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800b0e6:	4b17      	ldr	r3, [pc, #92]	; (800b144 <sc_reduce+0x7d4>)
 800b0e8:	fba2 0103 	umull	r0, r1, r2, r3
 800b0ec:	1863      	adds	r3, r4, r1
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	1814      	adds	r4, r2, r0
 800b0fa:	f8c7 4560 	str.w	r4, [r7, #1376]	; 0x560
 800b0fe:	414b      	adcs	r3, r1
 800b100:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 800b104:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800b108:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b10c:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 800b110:	e9c2 3400 	strd	r3, r4, [r2]
    s16 -= s23 * 683901;
 800b114:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 800b118:	4b0b      	ldr	r3, [pc, #44]	; (800b148 <sc_reduce+0x7d8>)
 800b11a:	fb03 f102 	mul.w	r1, r3, r2
 800b11e:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800b122:	f04f 33ff 	mov.w	r3, #4294967295
 800b126:	fb03 f302 	mul.w	r3, r3, r2
 800b12a:	18cc      	adds	r4, r1, r3
 800b12c:	e00e      	b.n	800b14c <sc_reduce+0x7dc>
 800b12e:	bf00      	nop
 800b130:	001fffff 	.word	0x001fffff
 800b134:	000a2c13 	.word	0x000a2c13
 800b138:	00072d18 	.word	0x00072d18
 800b13c:	0009fb67 	.word	0x0009fb67
 800b140:	fff0c653 	.word	0xfff0c653
 800b144:	000215d1 	.word	0x000215d1
 800b148:	fff59083 	.word	0xfff59083
 800b14c:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 800b150:	4be5      	ldr	r3, [pc, #916]	; (800b4e8 <sc_reduce+0xb78>)
 800b152:	fba2 0103 	umull	r0, r1, r2, r3
 800b156:	1863      	adds	r3, r4, r1
 800b158:	4619      	mov	r1, r3
 800b15a:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b162:	1814      	adds	r4, r2, r0
 800b164:	f8c7 4558 	str.w	r4, [r7, #1368]	; 0x558
 800b168:	414b      	adcs	r3, r1
 800b16a:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 800b16e:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800b172:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b176:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800b17a:	e9c2 3400 	strd	r3, r4, [r2]
    s23 = 0;
 800b17e:	f04f 0200 	mov.w	r2, #0
 800b182:	f04f 0300 	mov.w	r3, #0
 800b186:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 800b18a:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += s22 * 666643;
 800b18e:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800b192:	4bd6      	ldr	r3, [pc, #856]	; (800b4ec <sc_reduce+0xb7c>)
 800b194:	fb03 f102 	mul.w	r1, r3, r2
 800b198:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b19c:	2300      	movs	r3, #0
 800b19e:	fb03 f302 	mul.w	r3, r3, r2
 800b1a2:	18cc      	adds	r4, r1, r3
 800b1a4:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b1a8:	4bd0      	ldr	r3, [pc, #832]	; (800b4ec <sc_reduce+0xb7c>)
 800b1aa:	fba2 0103 	umull	r0, r1, r2, r3
 800b1ae:	1863      	adds	r3, r4, r1
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800b1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ba:	1814      	adds	r4, r2, r0
 800b1bc:	f8c7 4550 	str.w	r4, [r7, #1360]	; 0x550
 800b1c0:	414b      	adcs	r3, r1
 800b1c2:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 800b1c6:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800b1ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1ce:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800b1d2:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s22 * 470296;
 800b1d6:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800b1da:	4bc5      	ldr	r3, [pc, #788]	; (800b4f0 <sc_reduce+0xb80>)
 800b1dc:	fb03 f102 	mul.w	r1, r3, r2
 800b1e0:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	fb03 f302 	mul.w	r3, r3, r2
 800b1ea:	18cc      	adds	r4, r1, r3
 800b1ec:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b1f0:	4bbf      	ldr	r3, [pc, #764]	; (800b4f0 <sc_reduce+0xb80>)
 800b1f2:	fba2 0103 	umull	r0, r1, r2, r3
 800b1f6:	1863      	adds	r3, r4, r1
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800b1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b202:	1814      	adds	r4, r2, r0
 800b204:	f8c7 4548 	str.w	r4, [r7, #1352]	; 0x548
 800b208:	414b      	adcs	r3, r1
 800b20a:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 800b20e:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800b212:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b216:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800b21a:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s22 * 654183;
 800b21e:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800b222:	4bb4      	ldr	r3, [pc, #720]	; (800b4f4 <sc_reduce+0xb84>)
 800b224:	fb03 f102 	mul.w	r1, r3, r2
 800b228:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b22c:	2300      	movs	r3, #0
 800b22e:	fb03 f302 	mul.w	r3, r3, r2
 800b232:	18cc      	adds	r4, r1, r3
 800b234:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b238:	4bae      	ldr	r3, [pc, #696]	; (800b4f4 <sc_reduce+0xb84>)
 800b23a:	fba2 0103 	umull	r0, r1, r2, r3
 800b23e:	1863      	adds	r3, r4, r1
 800b240:	4619      	mov	r1, r3
 800b242:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24a:	1814      	adds	r4, r2, r0
 800b24c:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
 800b250:	414b      	adcs	r3, r1
 800b252:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800b256:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800b25a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b25e:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800b262:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= s22 * 997805;
 800b266:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800b26a:	4ba3      	ldr	r3, [pc, #652]	; (800b4f8 <sc_reduce+0xb88>)
 800b26c:	fb03 f102 	mul.w	r1, r3, r2
 800b270:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b274:	f04f 33ff 	mov.w	r3, #4294967295
 800b278:	fb03 f302 	mul.w	r3, r3, r2
 800b27c:	18cc      	adds	r4, r1, r3
 800b27e:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b282:	4b9d      	ldr	r3, [pc, #628]	; (800b4f8 <sc_reduce+0xb88>)
 800b284:	fba2 0103 	umull	r0, r1, r2, r3
 800b288:	1863      	adds	r3, r4, r1
 800b28a:	4619      	mov	r1, r3
 800b28c:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	1814      	adds	r4, r2, r0
 800b296:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
 800b29a:	414b      	adcs	r3, r1
 800b29c:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800b2a0:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800b2a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2a8:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800b2ac:	e9c2 3400 	strd	r3, r4, [r2]
    s14 += s22 * 136657;
 800b2b0:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800b2b4:	4b91      	ldr	r3, [pc, #580]	; (800b4fc <sc_reduce+0xb8c>)
 800b2b6:	fb03 f102 	mul.w	r1, r3, r2
 800b2ba:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b2be:	2300      	movs	r3, #0
 800b2c0:	fb03 f302 	mul.w	r3, r3, r2
 800b2c4:	18cc      	adds	r4, r1, r3
 800b2c6:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b2ca:	4b8c      	ldr	r3, [pc, #560]	; (800b4fc <sc_reduce+0xb8c>)
 800b2cc:	fba2 0103 	umull	r0, r1, r2, r3
 800b2d0:	1863      	adds	r3, r4, r1
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	1814      	adds	r4, r2, r0
 800b2de:	f8c7 4530 	str.w	r4, [r7, #1328]	; 0x530
 800b2e2:	414b      	adcs	r3, r1
 800b2e4:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800b2e8:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800b2ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2f0:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800b2f4:	e9c2 3400 	strd	r3, r4, [r2]
    s15 -= s22 * 683901;
 800b2f8:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 800b2fc:	4b7a      	ldr	r3, [pc, #488]	; (800b4e8 <sc_reduce+0xb78>)
 800b2fe:	fb03 f102 	mul.w	r1, r3, r2
 800b302:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b306:	f04f 33ff 	mov.w	r3, #4294967295
 800b30a:	fb03 f302 	mul.w	r3, r3, r2
 800b30e:	18cc      	adds	r4, r1, r3
 800b310:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 800b314:	4b74      	ldr	r3, [pc, #464]	; (800b4e8 <sc_reduce+0xb78>)
 800b316:	fba2 0103 	umull	r0, r1, r2, r3
 800b31a:	1863      	adds	r3, r4, r1
 800b31c:	4619      	mov	r1, r3
 800b31e:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800b322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b326:	1814      	adds	r4, r2, r0
 800b328:	f8c7 4528 	str.w	r4, [r7, #1320]	; 0x528
 800b32c:	414b      	adcs	r3, r1
 800b32e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800b332:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800b336:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b33a:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 800b33e:	e9c2 3400 	strd	r3, r4, [r2]
    s22 = 0;
 800b342:	f04f 0200 	mov.w	r2, #0
 800b346:	f04f 0300 	mov.w	r3, #0
 800b34a:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 800b34e:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += s21 * 666643;
 800b352:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800b356:	4b65      	ldr	r3, [pc, #404]	; (800b4ec <sc_reduce+0xb7c>)
 800b358:	fb03 f102 	mul.w	r1, r3, r2
 800b35c:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b360:	2300      	movs	r3, #0
 800b362:	fb03 f302 	mul.w	r3, r3, r2
 800b366:	18cc      	adds	r4, r1, r3
 800b368:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b36c:	4b5f      	ldr	r3, [pc, #380]	; (800b4ec <sc_reduce+0xb7c>)
 800b36e:	fba2 0103 	umull	r0, r1, r2, r3
 800b372:	1863      	adds	r3, r4, r1
 800b374:	4619      	mov	r1, r3
 800b376:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37e:	1814      	adds	r4, r2, r0
 800b380:	f8c7 4520 	str.w	r4, [r7, #1312]	; 0x520
 800b384:	414b      	adcs	r3, r1
 800b386:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800b38a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800b38e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b392:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800b396:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s21 * 470296;
 800b39a:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800b39e:	4b54      	ldr	r3, [pc, #336]	; (800b4f0 <sc_reduce+0xb80>)
 800b3a0:	fb03 f102 	mul.w	r1, r3, r2
 800b3a4:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	fb03 f302 	mul.w	r3, r3, r2
 800b3ae:	18cc      	adds	r4, r1, r3
 800b3b0:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b3b4:	4b4e      	ldr	r3, [pc, #312]	; (800b4f0 <sc_reduce+0xb80>)
 800b3b6:	fba2 0103 	umull	r0, r1, r2, r3
 800b3ba:	1863      	adds	r3, r4, r1
 800b3bc:	4619      	mov	r1, r3
 800b3be:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800b3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c6:	1814      	adds	r4, r2, r0
 800b3c8:	f8c7 4518 	str.w	r4, [r7, #1304]	; 0x518
 800b3cc:	414b      	adcs	r3, r1
 800b3ce:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800b3d2:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800b3d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3da:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800b3de:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s21 * 654183;
 800b3e2:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800b3e6:	4b43      	ldr	r3, [pc, #268]	; (800b4f4 <sc_reduce+0xb84>)
 800b3e8:	fb03 f102 	mul.w	r1, r3, r2
 800b3ec:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	fb03 f302 	mul.w	r3, r3, r2
 800b3f6:	18cc      	adds	r4, r1, r3
 800b3f8:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b3fc:	4b3d      	ldr	r3, [pc, #244]	; (800b4f4 <sc_reduce+0xb84>)
 800b3fe:	fba2 0103 	umull	r0, r1, r2, r3
 800b402:	1863      	adds	r3, r4, r1
 800b404:	4619      	mov	r1, r3
 800b406:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	1814      	adds	r4, r2, r0
 800b410:	f8c7 4510 	str.w	r4, [r7, #1296]	; 0x510
 800b414:	414b      	adcs	r3, r1
 800b416:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800b41a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800b41e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b422:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800b426:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= s21 * 997805;
 800b42a:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800b42e:	4b32      	ldr	r3, [pc, #200]	; (800b4f8 <sc_reduce+0xb88>)
 800b430:	fb03 f102 	mul.w	r1, r3, r2
 800b434:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b438:	f04f 33ff 	mov.w	r3, #4294967295
 800b43c:	fb03 f302 	mul.w	r3, r3, r2
 800b440:	18cc      	adds	r4, r1, r3
 800b442:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b446:	4b2c      	ldr	r3, [pc, #176]	; (800b4f8 <sc_reduce+0xb88>)
 800b448:	fba2 0103 	umull	r0, r1, r2, r3
 800b44c:	1863      	adds	r3, r4, r1
 800b44e:	4619      	mov	r1, r3
 800b450:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b458:	1814      	adds	r4, r2, r0
 800b45a:	f8c7 4508 	str.w	r4, [r7, #1288]	; 0x508
 800b45e:	414b      	adcs	r3, r1
 800b460:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800b464:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800b468:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b46c:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800b470:	e9c2 3400 	strd	r3, r4, [r2]
    s13 += s21 * 136657;
 800b474:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800b478:	4b20      	ldr	r3, [pc, #128]	; (800b4fc <sc_reduce+0xb8c>)
 800b47a:	fb03 f102 	mul.w	r1, r3, r2
 800b47e:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b482:	2300      	movs	r3, #0
 800b484:	fb03 f302 	mul.w	r3, r3, r2
 800b488:	18cc      	adds	r4, r1, r3
 800b48a:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b48e:	4b1b      	ldr	r3, [pc, #108]	; (800b4fc <sc_reduce+0xb8c>)
 800b490:	fba2 0103 	umull	r0, r1, r2, r3
 800b494:	1863      	adds	r3, r4, r1
 800b496:	4619      	mov	r1, r3
 800b498:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	1814      	adds	r4, r2, r0
 800b4a2:	f8c7 4500 	str.w	r4, [r7, #1280]	; 0x500
 800b4a6:	414b      	adcs	r3, r1
 800b4a8:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800b4ac:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800b4b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b4b4:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800b4b8:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= s21 * 683901;
 800b4bc:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 800b4c0:	4b09      	ldr	r3, [pc, #36]	; (800b4e8 <sc_reduce+0xb78>)
 800b4c2:	fb03 f102 	mul.w	r1, r3, r2
 800b4c6:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ce:	fb03 f302 	mul.w	r3, r3, r2
 800b4d2:	18cc      	adds	r4, r1, r3
 800b4d4:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 800b4d8:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <sc_reduce+0xb78>)
 800b4da:	fba2 0103 	umull	r0, r1, r2, r3
 800b4de:	1863      	adds	r3, r4, r1
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800b4e6:	e00b      	b.n	800b500 <sc_reduce+0xb90>
 800b4e8:	fff59083 	.word	0xfff59083
 800b4ec:	000a2c13 	.word	0x000a2c13
 800b4f0:	00072d18 	.word	0x00072d18
 800b4f4:	0009fb67 	.word	0x0009fb67
 800b4f8:	fff0c653 	.word	0xfff0c653
 800b4fc:	000215d1 	.word	0x000215d1
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	1814      	adds	r4, r2, r0
 800b506:	f8c7 44f8 	str.w	r4, [r7, #1272]	; 0x4f8
 800b50a:	414b      	adcs	r3, r1
 800b50c:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800b510:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800b514:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b518:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800b51c:	e9c2 3400 	strd	r3, r4, [r2]
    s21 = 0;
 800b520:	f04f 0200 	mov.w	r2, #0
 800b524:	f04f 0300 	mov.w	r3, #0
 800b528:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 800b52c:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += s20 * 666643;
 800b530:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800b534:	4be5      	ldr	r3, [pc, #916]	; (800b8cc <sc_reduce+0xf5c>)
 800b536:	fb03 f102 	mul.w	r1, r3, r2
 800b53a:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b53e:	2300      	movs	r3, #0
 800b540:	fb03 f302 	mul.w	r3, r3, r2
 800b544:	18cc      	adds	r4, r1, r3
 800b546:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b54a:	4be0      	ldr	r3, [pc, #896]	; (800b8cc <sc_reduce+0xf5c>)
 800b54c:	fba2 0103 	umull	r0, r1, r2, r3
 800b550:	1863      	adds	r3, r4, r1
 800b552:	4619      	mov	r1, r3
 800b554:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	1814      	adds	r4, r2, r0
 800b55e:	f8c7 44f0 	str.w	r4, [r7, #1264]	; 0x4f0
 800b562:	414b      	adcs	r3, r1
 800b564:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 800b568:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800b56c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b570:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800b574:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s20 * 470296;
 800b578:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800b57c:	4bd4      	ldr	r3, [pc, #848]	; (800b8d0 <sc_reduce+0xf60>)
 800b57e:	fb03 f102 	mul.w	r1, r3, r2
 800b582:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b586:	2300      	movs	r3, #0
 800b588:	fb03 f302 	mul.w	r3, r3, r2
 800b58c:	18cc      	adds	r4, r1, r3
 800b58e:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b592:	4bcf      	ldr	r3, [pc, #828]	; (800b8d0 <sc_reduce+0xf60>)
 800b594:	fba2 0103 	umull	r0, r1, r2, r3
 800b598:	1863      	adds	r3, r4, r1
 800b59a:	4619      	mov	r1, r3
 800b59c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	1814      	adds	r4, r2, r0
 800b5a6:	f8c7 44e8 	str.w	r4, [r7, #1256]	; 0x4e8
 800b5aa:	414b      	adcs	r3, r1
 800b5ac:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800b5b0:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800b5b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5b8:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800b5bc:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s20 * 654183;
 800b5c0:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800b5c4:	4bc3      	ldr	r3, [pc, #780]	; (800b8d4 <sc_reduce+0xf64>)
 800b5c6:	fb03 f102 	mul.w	r1, r3, r2
 800b5ca:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	fb03 f302 	mul.w	r3, r3, r2
 800b5d4:	18cc      	adds	r4, r1, r3
 800b5d6:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b5da:	4bbe      	ldr	r3, [pc, #760]	; (800b8d4 <sc_reduce+0xf64>)
 800b5dc:	fba2 0103 	umull	r0, r1, r2, r3
 800b5e0:	1863      	adds	r3, r4, r1
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	1814      	adds	r4, r2, r0
 800b5ee:	f8c7 44e0 	str.w	r4, [r7, #1248]	; 0x4e0
 800b5f2:	414b      	adcs	r3, r1
 800b5f4:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 800b5f8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 800b5fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b600:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800b604:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= s20 * 997805;
 800b608:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800b60c:	4bb2      	ldr	r3, [pc, #712]	; (800b8d8 <sc_reduce+0xf68>)
 800b60e:	fb03 f102 	mul.w	r1, r3, r2
 800b612:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b616:	f04f 33ff 	mov.w	r3, #4294967295
 800b61a:	fb03 f302 	mul.w	r3, r3, r2
 800b61e:	18cc      	adds	r4, r1, r3
 800b620:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b624:	4bac      	ldr	r3, [pc, #688]	; (800b8d8 <sc_reduce+0xf68>)
 800b626:	fba2 0103 	umull	r0, r1, r2, r3
 800b62a:	1863      	adds	r3, r4, r1
 800b62c:	4619      	mov	r1, r3
 800b62e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	1814      	adds	r4, r2, r0
 800b638:	f8c7 44d8 	str.w	r4, [r7, #1240]	; 0x4d8
 800b63c:	414b      	adcs	r3, r1
 800b63e:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800b642:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800b646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b64a:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800b64e:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s20 * 136657;
 800b652:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800b656:	4ba1      	ldr	r3, [pc, #644]	; (800b8dc <sc_reduce+0xf6c>)
 800b658:	fb03 f102 	mul.w	r1, r3, r2
 800b65c:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b660:	2300      	movs	r3, #0
 800b662:	fb03 f302 	mul.w	r3, r3, r2
 800b666:	18cc      	adds	r4, r1, r3
 800b668:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b66c:	4b9b      	ldr	r3, [pc, #620]	; (800b8dc <sc_reduce+0xf6c>)
 800b66e:	fba2 0103 	umull	r0, r1, r2, r3
 800b672:	1863      	adds	r3, r4, r1
 800b674:	4619      	mov	r1, r3
 800b676:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	1814      	adds	r4, r2, r0
 800b680:	f8c7 44d0 	str.w	r4, [r7, #1232]	; 0x4d0
 800b684:	414b      	adcs	r3, r1
 800b686:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800b68a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800b68e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b692:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800b696:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= s20 * 683901;
 800b69a:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 800b69e:	4b90      	ldr	r3, [pc, #576]	; (800b8e0 <sc_reduce+0xf70>)
 800b6a0:	fb03 f102 	mul.w	r1, r3, r2
 800b6a4:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ac:	fb03 f302 	mul.w	r3, r3, r2
 800b6b0:	18cc      	adds	r4, r1, r3
 800b6b2:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 800b6b6:	4b8a      	ldr	r3, [pc, #552]	; (800b8e0 <sc_reduce+0xf70>)
 800b6b8:	fba2 0103 	umull	r0, r1, r2, r3
 800b6bc:	1863      	adds	r3, r4, r1
 800b6be:	4619      	mov	r1, r3
 800b6c0:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	1814      	adds	r4, r2, r0
 800b6ca:	f8c7 44c8 	str.w	r4, [r7, #1224]	; 0x4c8
 800b6ce:	414b      	adcs	r3, r1
 800b6d0:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800b6d4:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800b6d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b6dc:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800b6e0:	e9c2 3400 	strd	r3, r4, [r2]
    s20 = 0;
 800b6e4:	f04f 0200 	mov.w	r2, #0
 800b6e8:	f04f 0300 	mov.w	r3, #0
 800b6ec:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 800b6f0:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += s19 * 666643;
 800b6f4:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b6f8:	4b74      	ldr	r3, [pc, #464]	; (800b8cc <sc_reduce+0xf5c>)
 800b6fa:	fb03 f102 	mul.w	r1, r3, r2
 800b6fe:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b702:	2300      	movs	r3, #0
 800b704:	fb03 f302 	mul.w	r3, r3, r2
 800b708:	18cc      	adds	r4, r1, r3
 800b70a:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b70e:	4b6f      	ldr	r3, [pc, #444]	; (800b8cc <sc_reduce+0xf5c>)
 800b710:	fba2 0103 	umull	r0, r1, r2, r3
 800b714:	1863      	adds	r3, r4, r1
 800b716:	4619      	mov	r1, r3
 800b718:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b720:	1814      	adds	r4, r2, r0
 800b722:	f8c7 44c0 	str.w	r4, [r7, #1216]	; 0x4c0
 800b726:	414b      	adcs	r3, r1
 800b728:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800b72c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800b730:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b734:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800b738:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s19 * 470296;
 800b73c:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b740:	4b63      	ldr	r3, [pc, #396]	; (800b8d0 <sc_reduce+0xf60>)
 800b742:	fb03 f102 	mul.w	r1, r3, r2
 800b746:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b74a:	2300      	movs	r3, #0
 800b74c:	fb03 f302 	mul.w	r3, r3, r2
 800b750:	18cc      	adds	r4, r1, r3
 800b752:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b756:	4b5e      	ldr	r3, [pc, #376]	; (800b8d0 <sc_reduce+0xf60>)
 800b758:	fba2 0103 	umull	r0, r1, r2, r3
 800b75c:	1863      	adds	r3, r4, r1
 800b75e:	4619      	mov	r1, r3
 800b760:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	1814      	adds	r4, r2, r0
 800b76a:	f8c7 44b8 	str.w	r4, [r7, #1208]	; 0x4b8
 800b76e:	414b      	adcs	r3, r1
 800b770:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800b774:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800b778:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b77c:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800b780:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s19 * 654183;
 800b784:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b788:	4b52      	ldr	r3, [pc, #328]	; (800b8d4 <sc_reduce+0xf64>)
 800b78a:	fb03 f102 	mul.w	r1, r3, r2
 800b78e:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b792:	2300      	movs	r3, #0
 800b794:	fb03 f302 	mul.w	r3, r3, r2
 800b798:	18cc      	adds	r4, r1, r3
 800b79a:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b79e:	4b4d      	ldr	r3, [pc, #308]	; (800b8d4 <sc_reduce+0xf64>)
 800b7a0:	fba2 0103 	umull	r0, r1, r2, r3
 800b7a4:	1863      	adds	r3, r4, r1
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	1814      	adds	r4, r2, r0
 800b7b2:	f8c7 44b0 	str.w	r4, [r7, #1200]	; 0x4b0
 800b7b6:	414b      	adcs	r3, r1
 800b7b8:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800b7bc:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800b7c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b7c4:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800b7c8:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= s19 * 997805;
 800b7cc:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b7d0:	4b41      	ldr	r3, [pc, #260]	; (800b8d8 <sc_reduce+0xf68>)
 800b7d2:	fb03 f102 	mul.w	r1, r3, r2
 800b7d6:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b7da:	f04f 33ff 	mov.w	r3, #4294967295
 800b7de:	fb03 f302 	mul.w	r3, r3, r2
 800b7e2:	18cc      	adds	r4, r1, r3
 800b7e4:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b7e8:	4b3b      	ldr	r3, [pc, #236]	; (800b8d8 <sc_reduce+0xf68>)
 800b7ea:	fba2 0103 	umull	r0, r1, r2, r3
 800b7ee:	1863      	adds	r3, r4, r1
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	1814      	adds	r4, r2, r0
 800b7fc:	f8c7 44a8 	str.w	r4, [r7, #1192]	; 0x4a8
 800b800:	414b      	adcs	r3, r1
 800b802:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800b806:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800b80a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b80e:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800b812:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s19 * 136657;
 800b816:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b81a:	4b30      	ldr	r3, [pc, #192]	; (800b8dc <sc_reduce+0xf6c>)
 800b81c:	fb03 f102 	mul.w	r1, r3, r2
 800b820:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b824:	2300      	movs	r3, #0
 800b826:	fb03 f302 	mul.w	r3, r3, r2
 800b82a:	18cc      	adds	r4, r1, r3
 800b82c:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b830:	4b2a      	ldr	r3, [pc, #168]	; (800b8dc <sc_reduce+0xf6c>)
 800b832:	fba2 0103 	umull	r0, r1, r2, r3
 800b836:	1863      	adds	r3, r4, r1
 800b838:	4619      	mov	r1, r3
 800b83a:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	1814      	adds	r4, r2, r0
 800b844:	f8c7 44a0 	str.w	r4, [r7, #1184]	; 0x4a0
 800b848:	414b      	adcs	r3, r1
 800b84a:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800b84e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800b852:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b856:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800b85a:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= s19 * 683901;
 800b85e:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 800b862:	4b1f      	ldr	r3, [pc, #124]	; (800b8e0 <sc_reduce+0xf70>)
 800b864:	fb03 f102 	mul.w	r1, r3, r2
 800b868:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b86c:	f04f 33ff 	mov.w	r3, #4294967295
 800b870:	fb03 f302 	mul.w	r3, r3, r2
 800b874:	18cc      	adds	r4, r1, r3
 800b876:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 800b87a:	4b19      	ldr	r3, [pc, #100]	; (800b8e0 <sc_reduce+0xf70>)
 800b87c:	fba2 0103 	umull	r0, r1, r2, r3
 800b880:	1863      	adds	r3, r4, r1
 800b882:	4619      	mov	r1, r3
 800b884:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	1814      	adds	r4, r2, r0
 800b88e:	f8c7 4498 	str.w	r4, [r7, #1176]	; 0x498
 800b892:	414b      	adcs	r3, r1
 800b894:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800b898:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800b89c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8a0:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800b8a4:	e9c2 3400 	strd	r3, r4, [r2]
    s19 = 0;
 800b8a8:	f04f 0200 	mov.w	r2, #0
 800b8ac:	f04f 0300 	mov.w	r3, #0
 800b8b0:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 800b8b4:	e9c1 2300 	strd	r2, r3, [r1]
    s6 += s18 * 666643;
 800b8b8:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800b8bc:	4b03      	ldr	r3, [pc, #12]	; (800b8cc <sc_reduce+0xf5c>)
 800b8be:	fb03 f102 	mul.w	r1, r3, r2
 800b8c2:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e00c      	b.n	800b8e4 <sc_reduce+0xf74>
 800b8ca:	bf00      	nop
 800b8cc:	000a2c13 	.word	0x000a2c13
 800b8d0:	00072d18 	.word	0x00072d18
 800b8d4:	0009fb67 	.word	0x0009fb67
 800b8d8:	fff0c653 	.word	0xfff0c653
 800b8dc:	000215d1 	.word	0x000215d1
 800b8e0:	fff59083 	.word	0xfff59083
 800b8e4:	fb03 f302 	mul.w	r3, r3, r2
 800b8e8:	18cc      	adds	r4, r1, r3
 800b8ea:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b8ee:	4bef      	ldr	r3, [pc, #956]	; (800bcac <sc_reduce+0x133c>)
 800b8f0:	fba2 0103 	umull	r0, r1, r2, r3
 800b8f4:	1863      	adds	r3, r4, r1
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	1814      	adds	r4, r2, r0
 800b902:	f8c7 4490 	str.w	r4, [r7, #1168]	; 0x490
 800b906:	414b      	adcs	r3, r1
 800b908:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800b90c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800b910:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b914:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800b918:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s18 * 470296;
 800b91c:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800b920:	4be3      	ldr	r3, [pc, #908]	; (800bcb0 <sc_reduce+0x1340>)
 800b922:	fb03 f102 	mul.w	r1, r3, r2
 800b926:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b92a:	2300      	movs	r3, #0
 800b92c:	fb03 f302 	mul.w	r3, r3, r2
 800b930:	18cc      	adds	r4, r1, r3
 800b932:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b936:	4bde      	ldr	r3, [pc, #888]	; (800bcb0 <sc_reduce+0x1340>)
 800b938:	fba2 0103 	umull	r0, r1, r2, r3
 800b93c:	1863      	adds	r3, r4, r1
 800b93e:	4619      	mov	r1, r3
 800b940:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	1814      	adds	r4, r2, r0
 800b94a:	f8c7 4488 	str.w	r4, [r7, #1160]	; 0x488
 800b94e:	414b      	adcs	r3, r1
 800b950:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 800b954:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800b958:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b95c:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800b960:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s18 * 654183;
 800b964:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800b968:	4bd2      	ldr	r3, [pc, #840]	; (800bcb4 <sc_reduce+0x1344>)
 800b96a:	fb03 f102 	mul.w	r1, r3, r2
 800b96e:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b972:	2300      	movs	r3, #0
 800b974:	fb03 f302 	mul.w	r3, r3, r2
 800b978:	18cc      	adds	r4, r1, r3
 800b97a:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b97e:	4bcd      	ldr	r3, [pc, #820]	; (800bcb4 <sc_reduce+0x1344>)
 800b980:	fba2 0103 	umull	r0, r1, r2, r3
 800b984:	1863      	adds	r3, r4, r1
 800b986:	4619      	mov	r1, r3
 800b988:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	1814      	adds	r4, r2, r0
 800b992:	f8c7 4480 	str.w	r4, [r7, #1152]	; 0x480
 800b996:	414b      	adcs	r3, r1
 800b998:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800b99c:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800b9a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b9a4:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800b9a8:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= s18 * 997805;
 800b9ac:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800b9b0:	4bc1      	ldr	r3, [pc, #772]	; (800bcb8 <sc_reduce+0x1348>)
 800b9b2:	fb03 f102 	mul.w	r1, r3, r2
 800b9b6:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b9be:	fb03 f302 	mul.w	r3, r3, r2
 800b9c2:	18cc      	adds	r4, r1, r3
 800b9c4:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800b9c8:	4bbb      	ldr	r3, [pc, #748]	; (800bcb8 <sc_reduce+0x1348>)
 800b9ca:	fba2 0103 	umull	r0, r1, r2, r3
 800b9ce:	1863      	adds	r3, r4, r1
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	1814      	adds	r4, r2, r0
 800b9dc:	f8c7 4478 	str.w	r4, [r7, #1144]	; 0x478
 800b9e0:	414b      	adcs	r3, r1
 800b9e2:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800b9e6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800b9ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b9ee:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800b9f2:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s18 * 136657;
 800b9f6:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800b9fa:	4bb0      	ldr	r3, [pc, #704]	; (800bcbc <sc_reduce+0x134c>)
 800b9fc:	fb03 f102 	mul.w	r1, r3, r2
 800ba00:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800ba04:	2300      	movs	r3, #0
 800ba06:	fb03 f302 	mul.w	r3, r3, r2
 800ba0a:	18cc      	adds	r4, r1, r3
 800ba0c:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800ba10:	4baa      	ldr	r3, [pc, #680]	; (800bcbc <sc_reduce+0x134c>)
 800ba12:	fba2 0103 	umull	r0, r1, r2, r3
 800ba16:	1863      	adds	r3, r4, r1
 800ba18:	4619      	mov	r1, r3
 800ba1a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800ba1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba22:	1814      	adds	r4, r2, r0
 800ba24:	f8c7 4470 	str.w	r4, [r7, #1136]	; 0x470
 800ba28:	414b      	adcs	r3, r1
 800ba2a:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 800ba2e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800ba32:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba36:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800ba3a:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= s18 * 683901;
 800ba3e:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 800ba42:	4b9f      	ldr	r3, [pc, #636]	; (800bcc0 <sc_reduce+0x1350>)
 800ba44:	fb03 f102 	mul.w	r1, r3, r2
 800ba48:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800ba4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba50:	fb03 f302 	mul.w	r3, r3, r2
 800ba54:	18cc      	adds	r4, r1, r3
 800ba56:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 800ba5a:	4b99      	ldr	r3, [pc, #612]	; (800bcc0 <sc_reduce+0x1350>)
 800ba5c:	fba2 0103 	umull	r0, r1, r2, r3
 800ba60:	1863      	adds	r3, r4, r1
 800ba62:	4619      	mov	r1, r3
 800ba64:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	1814      	adds	r4, r2, r0
 800ba6e:	f8c7 4468 	str.w	r4, [r7, #1128]	; 0x468
 800ba72:	414b      	adcs	r3, r1
 800ba74:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800ba78:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800ba7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ba80:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800ba84:	e9c2 3400 	strd	r3, r4, [r2]
    s18 = 0;
 800ba88:	f04f 0200 	mov.w	r2, #0
 800ba8c:	f04f 0300 	mov.w	r3, #0
 800ba90:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 800ba94:	e9c1 2300 	strd	r2, r3, [r1]
    carry6 = (s6 + (1 << 20)) >> 21;
 800ba98:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800baa4:	f8c7 16d8 	str.w	r1, [r7, #1752]	; 0x6d8
 800baa8:	f143 0300 	adc.w	r3, r3, #0
 800baac:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 800bab0:	f04f 0200 	mov.w	r2, #0
 800bab4:	f04f 0300 	mov.w	r3, #0
 800bab8:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 800babc:	e9d1 4500 	ldrd	r4, r5, [r1]
 800bac0:	4621      	mov	r1, r4
 800bac2:	0d4a      	lsrs	r2, r1, #21
 800bac4:	4629      	mov	r1, r5
 800bac6:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800baca:	4629      	mov	r1, r5
 800bacc:	154b      	asrs	r3, r1, #21
 800bace:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800bad2:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += carry6;
 800bad6:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800bada:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bade:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800bae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae6:	1884      	adds	r4, r0, r2
 800bae8:	f8c7 4460 	str.w	r4, [r7, #1120]	; 0x460
 800baec:	eb41 0303 	adc.w	r3, r1, r3
 800baf0:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800baf4:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800baf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bafc:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800bb00:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 800bb04:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800bb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0c:	f04f 0000 	mov.w	r0, #0
 800bb10:	f04f 0100 	mov.w	r1, #0
 800bb14:	0559      	lsls	r1, r3, #21
 800bb16:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800bb1a:	0550      	lsls	r0, r2, #21
 800bb1c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	1a14      	subs	r4, r2, r0
 800bb26:	f8c7 4458 	str.w	r4, [r7, #1112]	; 0x458
 800bb2a:	eb63 0301 	sbc.w	r3, r3, r1
 800bb2e:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800bb32:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800bb36:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb3a:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800bb3e:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (s8 + (1 << 20)) >> 21;
 800bb42:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800bb4e:	f8c7 16d0 	str.w	r1, [r7, #1744]	; 0x6d0
 800bb52:	f143 0300 	adc.w	r3, r3, #0
 800bb56:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 800bb5a:	f04f 0200 	mov.w	r2, #0
 800bb5e:	f04f 0300 	mov.w	r3, #0
 800bb62:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 800bb66:	e9d1 4500 	ldrd	r4, r5, [r1]
 800bb6a:	4621      	mov	r1, r4
 800bb6c:	0d4a      	lsrs	r2, r1, #21
 800bb6e:	4629      	mov	r1, r5
 800bb70:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800bb74:	4629      	mov	r1, r5
 800bb76:	154b      	asrs	r3, r1, #21
 800bb78:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 800bb7c:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += carry8;
 800bb80:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800bb84:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb88:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800bb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb90:	1884      	adds	r4, r0, r2
 800bb92:	f8c7 4450 	str.w	r4, [r7, #1104]	; 0x450
 800bb96:	eb41 0303 	adc.w	r3, r1, r3
 800bb9a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800bb9e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800bba2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bba6:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800bbaa:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 800bbae:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb6:	f04f 0000 	mov.w	r0, #0
 800bbba:	f04f 0100 	mov.w	r1, #0
 800bbbe:	0559      	lsls	r1, r3, #21
 800bbc0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800bbc4:	0550      	lsls	r0, r2, #21
 800bbc6:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	1a14      	subs	r4, r2, r0
 800bbd0:	f8c7 4448 	str.w	r4, [r7, #1096]	; 0x448
 800bbd4:	eb63 0301 	sbc.w	r3, r3, r1
 800bbd8:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800bbdc:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800bbe0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bbe4:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800bbe8:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = (s10 + (1 << 20)) >> 21;
 800bbec:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf4:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800bbf8:	f8c7 16c8 	str.w	r1, [r7, #1736]	; 0x6c8
 800bbfc:	f143 0300 	adc.w	r3, r3, #0
 800bc00:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 800bc04:	f04f 0200 	mov.w	r2, #0
 800bc08:	f04f 0300 	mov.w	r3, #0
 800bc0c:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 800bc10:	e9d1 4500 	ldrd	r4, r5, [r1]
 800bc14:	4621      	mov	r1, r4
 800bc16:	0d4a      	lsrs	r2, r1, #21
 800bc18:	4629      	mov	r1, r5
 800bc1a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800bc1e:	4629      	mov	r1, r5
 800bc20:	154b      	asrs	r3, r1, #21
 800bc22:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800bc26:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 800bc2a:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800bc2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc32:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	1884      	adds	r4, r0, r2
 800bc3c:	f8c7 4440 	str.w	r4, [r7, #1088]	; 0x440
 800bc40:	eb41 0303 	adc.w	r3, r1, r3
 800bc44:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 800bc48:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800bc4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc50:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800bc54:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 800bc58:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f04f 0000 	mov.w	r0, #0
 800bc64:	f04f 0100 	mov.w	r1, #0
 800bc68:	0559      	lsls	r1, r3, #21
 800bc6a:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800bc6e:	0550      	lsls	r0, r2, #21
 800bc70:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	1a14      	subs	r4, r2, r0
 800bc7a:	f8c7 4438 	str.w	r4, [r7, #1080]	; 0x438
 800bc7e:	eb63 0301 	sbc.w	r3, r3, r1
 800bc82:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800bc86:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800bc8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bc8e:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800bc92:	e9c2 3400 	strd	r3, r4, [r2]
    carry12 = (s12 + (1 << 20)) >> 21;
 800bc96:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800bca2:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 800bca6:	f143 0300 	adc.w	r3, r3, #0
 800bcaa:	e00b      	b.n	800bcc4 <sc_reduce+0x1354>
 800bcac:	000a2c13 	.word	0x000a2c13
 800bcb0:	00072d18 	.word	0x00072d18
 800bcb4:	0009fb67 	.word	0x0009fb67
 800bcb8:	fff0c653 	.word	0xfff0c653
 800bcbc:	000215d1 	.word	0x000215d1
 800bcc0:	fff59083 	.word	0xfff59083
 800bcc4:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 800bcc8:	f04f 0200 	mov.w	r2, #0
 800bccc:	f04f 0300 	mov.w	r3, #0
 800bcd0:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 800bcd4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800bcd8:	4621      	mov	r1, r4
 800bcda:	0d4a      	lsrs	r2, r1, #21
 800bcdc:	4629      	mov	r1, r5
 800bcde:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800bce2:	4629      	mov	r1, r5
 800bce4:	154b      	asrs	r3, r1, #21
 800bce6:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 800bcea:	e9c1 2300 	strd	r2, r3, [r1]
    s13 += carry12;
 800bcee:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800bcf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bcf6:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	1884      	adds	r4, r0, r2
 800bd00:	f8c7 4430 	str.w	r4, [r7, #1072]	; 0x430
 800bd04:	eb41 0303 	adc.w	r3, r1, r3
 800bd08:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800bd0c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800bd10:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd14:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800bd18:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= carry12 << 21;
 800bd1c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	f04f 0000 	mov.w	r0, #0
 800bd28:	f04f 0100 	mov.w	r1, #0
 800bd2c:	0559      	lsls	r1, r3, #21
 800bd2e:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800bd32:	0550      	lsls	r0, r2, #21
 800bd34:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800bd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3c:	1a14      	subs	r4, r2, r0
 800bd3e:	f8c7 4428 	str.w	r4, [r7, #1064]	; 0x428
 800bd42:	eb63 0301 	sbc.w	r3, r3, r1
 800bd46:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800bd4a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800bd4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd52:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800bd56:	e9c2 3400 	strd	r3, r4, [r2]
    carry14 = (s14 + (1 << 20)) >> 21;
 800bd5a:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd62:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800bd66:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 800bd6a:	f143 0300 	adc.w	r3, r3, #0
 800bd6e:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 800bd72:	f04f 0200 	mov.w	r2, #0
 800bd76:	f04f 0300 	mov.w	r3, #0
 800bd7a:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800bd7e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800bd82:	4621      	mov	r1, r4
 800bd84:	0d4a      	lsrs	r2, r1, #21
 800bd86:	4629      	mov	r1, r5
 800bd88:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	154b      	asrs	r3, r1, #21
 800bd90:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 800bd94:	e9c1 2300 	strd	r2, r3, [r1]
    s15 += carry14;
 800bd98:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800bd9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bda0:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	1884      	adds	r4, r0, r2
 800bdaa:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
 800bdae:	eb41 0303 	adc.w	r3, r1, r3
 800bdb2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800bdb6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800bdba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bdbe:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 800bdc2:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= carry14 << 21;
 800bdc6:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f04f 0000 	mov.w	r0, #0
 800bdd2:	f04f 0100 	mov.w	r1, #0
 800bdd6:	0559      	lsls	r1, r3, #21
 800bdd8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800bddc:	0550      	lsls	r0, r2, #21
 800bdde:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	1a14      	subs	r4, r2, r0
 800bde8:	f8c7 4418 	str.w	r4, [r7, #1048]	; 0x418
 800bdec:	eb63 0301 	sbc.w	r3, r3, r1
 800bdf0:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800bdf4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800bdf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bdfc:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800be00:	e9c2 3400 	strd	r3, r4, [r2]
    carry16 = (s16 + (1 << 20)) >> 21;
 800be04:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800be10:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 800be14:	f143 0300 	adc.w	r3, r3, #0
 800be18:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 800be1c:	f04f 0200 	mov.w	r2, #0
 800be20:	f04f 0300 	mov.w	r3, #0
 800be24:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 800be28:	e9d1 4500 	ldrd	r4, r5, [r1]
 800be2c:	4621      	mov	r1, r4
 800be2e:	0d4a      	lsrs	r2, r1, #21
 800be30:	4629      	mov	r1, r5
 800be32:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800be36:	4629      	mov	r1, r5
 800be38:	154b      	asrs	r3, r1, #21
 800be3a:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 800be3e:	e9c1 2300 	strd	r2, r3, [r1]
    s17 += carry16;
 800be42:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800be46:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be4a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	1884      	adds	r4, r0, r2
 800be54:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 800be58:	eb41 0303 	adc.w	r3, r1, r3
 800be5c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800be60:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800be64:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be68:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800be6c:	e9c2 3400 	strd	r3, r4, [r2]
    s16 -= carry16 << 21;
 800be70:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f04f 0000 	mov.w	r0, #0
 800be7c:	f04f 0100 	mov.w	r1, #0
 800be80:	0559      	lsls	r1, r3, #21
 800be82:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800be86:	0550      	lsls	r0, r2, #21
 800be88:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800be8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be90:	1a14      	subs	r4, r2, r0
 800be92:	f8c7 4408 	str.w	r4, [r7, #1032]	; 0x408
 800be96:	eb63 0301 	sbc.w	r3, r3, r1
 800be9a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800be9e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800bea2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bea6:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800beaa:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (s7 + (1 << 20)) >> 21;
 800beae:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800beba:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 800bebe:	f143 0300 	adc.w	r3, r3, #0
 800bec2:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 800bec6:	f04f 0200 	mov.w	r2, #0
 800beca:	f04f 0300 	mov.w	r3, #0
 800bece:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 800bed2:	e9d1 4500 	ldrd	r4, r5, [r1]
 800bed6:	4621      	mov	r1, r4
 800bed8:	0d4a      	lsrs	r2, r1, #21
 800beda:	4629      	mov	r1, r5
 800bedc:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800bee0:	4629      	mov	r1, r5
 800bee2:	154b      	asrs	r3, r1, #21
 800bee4:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 800bee8:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += carry7;
 800beec:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800bef0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bef4:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	1884      	adds	r4, r0, r2
 800befe:	f8c7 4400 	str.w	r4, [r7, #1024]	; 0x400
 800bf02:	eb41 0303 	adc.w	r3, r1, r3
 800bf06:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800bf0a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800bf0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf12:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800bf16:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 800bf1a:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	f04f 0000 	mov.w	r0, #0
 800bf26:	f04f 0100 	mov.w	r1, #0
 800bf2a:	0559      	lsls	r1, r3, #21
 800bf2c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800bf30:	0550      	lsls	r0, r2, #21
 800bf32:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	1a14      	subs	r4, r2, r0
 800bf3c:	f8c7 43f8 	str.w	r4, [r7, #1016]	; 0x3f8
 800bf40:	eb63 0301 	sbc.w	r3, r3, r1
 800bf44:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800bf48:	e9d7 34fe 	ldrd	r3, r4, [r7, #1016]	; 0x3f8
 800bf4c:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800bf50:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = (s9 + (1 << 20)) >> 21;
 800bf54:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5c:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800bf60:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 800bf64:	f143 0300 	adc.w	r3, r3, #0
 800bf68:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 800bf6c:	f04f 0200 	mov.w	r2, #0
 800bf70:	f04f 0300 	mov.w	r3, #0
 800bf74:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 800bf78:	e9d1 4500 	ldrd	r4, r5, [r1]
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	0d4a      	lsrs	r2, r1, #21
 800bf80:	4629      	mov	r1, r5
 800bf82:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800bf86:	4629      	mov	r1, r5
 800bf88:	154b      	asrs	r3, r1, #21
 800bf8a:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 800bf8e:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 800bf92:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800bf96:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf9a:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	1884      	adds	r4, r0, r2
 800bfa4:	f8c7 43f0 	str.w	r4, [r7, #1008]	; 0x3f0
 800bfa8:	eb41 0303 	adc.w	r3, r1, r3
 800bfac:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800bfb0:	e9d7 34fc 	ldrd	r3, r4, [r7, #1008]	; 0x3f0
 800bfb4:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800bfb8:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 800bfbc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800bfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc4:	f04f 0000 	mov.w	r0, #0
 800bfc8:	f04f 0100 	mov.w	r1, #0
 800bfcc:	0559      	lsls	r1, r3, #21
 800bfce:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800bfd2:	0550      	lsls	r0, r2, #21
 800bfd4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	1a14      	subs	r4, r2, r0
 800bfde:	f8c7 43e8 	str.w	r4, [r7, #1000]	; 0x3e8
 800bfe2:	eb63 0301 	sbc.w	r3, r3, r1
 800bfe6:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800bfea:	e9d7 34fa 	ldrd	r3, r4, [r7, #1000]	; 0x3e8
 800bfee:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800bff2:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = (s11 + (1 << 20)) >> 21;
 800bff6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800c002:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 800c006:	f143 0300 	adc.w	r3, r3, #0
 800c00a:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 800c00e:	f04f 0200 	mov.w	r2, #0
 800c012:	f04f 0300 	mov.w	r3, #0
 800c016:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 800c01a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c01e:	4621      	mov	r1, r4
 800c020:	0d4a      	lsrs	r2, r1, #21
 800c022:	4629      	mov	r1, r5
 800c024:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800c028:	4629      	mov	r1, r5
 800c02a:	154b      	asrs	r3, r1, #21
 800c02c:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 800c030:	e9c1 2300 	strd	r2, r3, [r1]
    s12 += carry11;
 800c034:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800c038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c03c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	1884      	adds	r4, r0, r2
 800c046:	f8c7 43e0 	str.w	r4, [r7, #992]	; 0x3e0
 800c04a:	eb41 0303 	adc.w	r3, r1, r3
 800c04e:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800c052:	e9d7 34f8 	ldrd	r3, r4, [r7, #992]	; 0x3e0
 800c056:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800c05a:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 800c05e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800c062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c066:	f04f 0000 	mov.w	r0, #0
 800c06a:	f04f 0100 	mov.w	r1, #0
 800c06e:	0559      	lsls	r1, r3, #21
 800c070:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800c074:	0550      	lsls	r0, r2, #21
 800c076:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800c07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07e:	1a14      	subs	r4, r2, r0
 800c080:	f8c7 43d8 	str.w	r4, [r7, #984]	; 0x3d8
 800c084:	eb63 0301 	sbc.w	r3, r3, r1
 800c088:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800c08c:	e9d7 34f6 	ldrd	r3, r4, [r7, #984]	; 0x3d8
 800c090:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800c094:	e9c2 3400 	strd	r3, r4, [r2]
    carry13 = (s13 + (1 << 20)) >> 21;
 800c098:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800c0a4:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 800c0a8:	f143 0300 	adc.w	r3, r3, #0
 800c0ac:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 800c0b0:	f04f 0200 	mov.w	r2, #0
 800c0b4:	f04f 0300 	mov.w	r3, #0
 800c0b8:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 800c0bc:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	0d4a      	lsrs	r2, r1, #21
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	154b      	asrs	r3, r1, #21
 800c0ce:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 800c0d2:	e9c1 2300 	strd	r2, r3, [r1]
    s14 += carry13;
 800c0d6:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 800c0da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0de:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	1884      	adds	r4, r0, r2
 800c0e8:	f8c7 43d0 	str.w	r4, [r7, #976]	; 0x3d0
 800c0ec:	eb41 0303 	adc.w	r3, r1, r3
 800c0f0:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800c0f4:	e9d7 34f4 	ldrd	r3, r4, [r7, #976]	; 0x3d0
 800c0f8:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 800c0fc:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= carry13 << 21;
 800c100:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	f04f 0000 	mov.w	r0, #0
 800c10c:	f04f 0100 	mov.w	r1, #0
 800c110:	0559      	lsls	r1, r3, #21
 800c112:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800c116:	0550      	lsls	r0, r2, #21
 800c118:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	1a14      	subs	r4, r2, r0
 800c122:	f8c7 43c8 	str.w	r4, [r7, #968]	; 0x3c8
 800c126:	eb63 0301 	sbc.w	r3, r3, r1
 800c12a:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800c12e:	e9d7 34f2 	ldrd	r3, r4, [r7, #968]	; 0x3c8
 800c132:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800c136:	e9c2 3400 	strd	r3, r4, [r2]
    carry15 = (s15 + (1 << 20)) >> 21;
 800c13a:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800c13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c142:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800c146:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 800c14a:	f143 0300 	adc.w	r3, r3, #0
 800c14e:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 800c152:	f04f 0200 	mov.w	r2, #0
 800c156:	f04f 0300 	mov.w	r3, #0
 800c15a:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 800c15e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800c162:	4621      	mov	r1, r4
 800c164:	0d4a      	lsrs	r2, r1, #21
 800c166:	4629      	mov	r1, r5
 800c168:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800c16c:	4629      	mov	r1, r5
 800c16e:	154b      	asrs	r3, r1, #21
 800c170:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 800c174:	e9c1 2300 	strd	r2, r3, [r1]
    s16 += carry15;
 800c178:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 800c17c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c180:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	1884      	adds	r4, r0, r2
 800c18a:	f8c7 43c0 	str.w	r4, [r7, #960]	; 0x3c0
 800c18e:	eb41 0303 	adc.w	r3, r1, r3
 800c192:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800c196:	e9d7 34f0 	ldrd	r3, r4, [r7, #960]	; 0x3c0
 800c19a:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 800c19e:	e9c2 3400 	strd	r3, r4, [r2]
    s15 -= carry15 << 21;
 800c1a2:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	f04f 0000 	mov.w	r0, #0
 800c1ae:	f04f 0100 	mov.w	r1, #0
 800c1b2:	0559      	lsls	r1, r3, #21
 800c1b4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800c1b8:	0550      	lsls	r0, r2, #21
 800c1ba:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	1a14      	subs	r4, r2, r0
 800c1c4:	f8c7 43b8 	str.w	r4, [r7, #952]	; 0x3b8
 800c1c8:	eb63 0301 	sbc.w	r3, r3, r1
 800c1cc:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800c1d0:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 800c1d4:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 800c1d8:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s17 * 666643;
 800c1dc:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800c1e0:	4be4      	ldr	r3, [pc, #912]	; (800c574 <sc_reduce+0x1c04>)
 800c1e2:	fb03 f102 	mul.w	r1, r3, r2
 800c1e6:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	fb03 f302 	mul.w	r3, r3, r2
 800c1f0:	18cc      	adds	r4, r1, r3
 800c1f2:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c1f6:	4bdf      	ldr	r3, [pc, #892]	; (800c574 <sc_reduce+0x1c04>)
 800c1f8:	fba2 0103 	umull	r0, r1, r2, r3
 800c1fc:	1863      	adds	r3, r4, r1
 800c1fe:	4619      	mov	r1, r3
 800c200:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c208:	1814      	adds	r4, r2, r0
 800c20a:	f8c7 43b0 	str.w	r4, [r7, #944]	; 0x3b0
 800c20e:	414b      	adcs	r3, r1
 800c210:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800c214:	e9d7 34ec 	ldrd	r3, r4, [r7, #944]	; 0x3b0
 800c218:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800c21c:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s17 * 470296;
 800c220:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800c224:	4bd4      	ldr	r3, [pc, #848]	; (800c578 <sc_reduce+0x1c08>)
 800c226:	fb03 f102 	mul.w	r1, r3, r2
 800c22a:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c22e:	2300      	movs	r3, #0
 800c230:	fb03 f302 	mul.w	r3, r3, r2
 800c234:	18cc      	adds	r4, r1, r3
 800c236:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c23a:	4bcf      	ldr	r3, [pc, #828]	; (800c578 <sc_reduce+0x1c08>)
 800c23c:	fba2 0103 	umull	r0, r1, r2, r3
 800c240:	1863      	adds	r3, r4, r1
 800c242:	4619      	mov	r1, r3
 800c244:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	1814      	adds	r4, r2, r0
 800c24e:	f8c7 43a8 	str.w	r4, [r7, #936]	; 0x3a8
 800c252:	414b      	adcs	r3, r1
 800c254:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800c258:	e9d7 34ea 	ldrd	r3, r4, [r7, #936]	; 0x3a8
 800c25c:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800c260:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s17 * 654183;
 800c264:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800c268:	4bc4      	ldr	r3, [pc, #784]	; (800c57c <sc_reduce+0x1c0c>)
 800c26a:	fb03 f102 	mul.w	r1, r3, r2
 800c26e:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c272:	2300      	movs	r3, #0
 800c274:	fb03 f302 	mul.w	r3, r3, r2
 800c278:	18cc      	adds	r4, r1, r3
 800c27a:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c27e:	4bbf      	ldr	r3, [pc, #764]	; (800c57c <sc_reduce+0x1c0c>)
 800c280:	fba2 0103 	umull	r0, r1, r2, r3
 800c284:	1863      	adds	r3, r4, r1
 800c286:	4619      	mov	r1, r3
 800c288:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	1814      	adds	r4, r2, r0
 800c292:	f8c7 43a0 	str.w	r4, [r7, #928]	; 0x3a0
 800c296:	414b      	adcs	r3, r1
 800c298:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800c29c:	e9d7 34e8 	ldrd	r3, r4, [r7, #928]	; 0x3a0
 800c2a0:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800c2a4:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= s17 * 997805;
 800c2a8:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800c2ac:	4bb4      	ldr	r3, [pc, #720]	; (800c580 <sc_reduce+0x1c10>)
 800c2ae:	fb03 f102 	mul.w	r1, r3, r2
 800c2b2:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ba:	fb03 f302 	mul.w	r3, r3, r2
 800c2be:	18cc      	adds	r4, r1, r3
 800c2c0:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c2c4:	4bae      	ldr	r3, [pc, #696]	; (800c580 <sc_reduce+0x1c10>)
 800c2c6:	fba2 0103 	umull	r0, r1, r2, r3
 800c2ca:	1863      	adds	r3, r4, r1
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800c2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d6:	1814      	adds	r4, r2, r0
 800c2d8:	f8c7 4398 	str.w	r4, [r7, #920]	; 0x398
 800c2dc:	414b      	adcs	r3, r1
 800c2de:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800c2e2:	e9d7 34e6 	ldrd	r3, r4, [r7, #920]	; 0x398
 800c2e6:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800c2ea:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s17 * 136657;
 800c2ee:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800c2f2:	4ba4      	ldr	r3, [pc, #656]	; (800c584 <sc_reduce+0x1c14>)
 800c2f4:	fb03 f102 	mul.w	r1, r3, r2
 800c2f8:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	fb03 f302 	mul.w	r3, r3, r2
 800c302:	18cc      	adds	r4, r1, r3
 800c304:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c308:	4b9e      	ldr	r3, [pc, #632]	; (800c584 <sc_reduce+0x1c14>)
 800c30a:	fba2 0103 	umull	r0, r1, r2, r3
 800c30e:	1863      	adds	r3, r4, r1
 800c310:	4619      	mov	r1, r3
 800c312:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800c316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31a:	1814      	adds	r4, r2, r0
 800c31c:	f8c7 4390 	str.w	r4, [r7, #912]	; 0x390
 800c320:	414b      	adcs	r3, r1
 800c322:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800c326:	e9d7 34e4 	ldrd	r3, r4, [r7, #912]	; 0x390
 800c32a:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800c32e:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= s17 * 683901;
 800c332:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 800c336:	4b94      	ldr	r3, [pc, #592]	; (800c588 <sc_reduce+0x1c18>)
 800c338:	fb03 f102 	mul.w	r1, r3, r2
 800c33c:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c340:	f04f 33ff 	mov.w	r3, #4294967295
 800c344:	fb03 f302 	mul.w	r3, r3, r2
 800c348:	18cc      	adds	r4, r1, r3
 800c34a:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 800c34e:	4b8e      	ldr	r3, [pc, #568]	; (800c588 <sc_reduce+0x1c18>)
 800c350:	fba2 0103 	umull	r0, r1, r2, r3
 800c354:	1863      	adds	r3, r4, r1
 800c356:	4619      	mov	r1, r3
 800c358:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800c35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c360:	1814      	adds	r4, r2, r0
 800c362:	f8c7 4388 	str.w	r4, [r7, #904]	; 0x388
 800c366:	414b      	adcs	r3, r1
 800c368:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800c36c:	e9d7 34e2 	ldrd	r3, r4, [r7, #904]	; 0x388
 800c370:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800c374:	e9c2 3400 	strd	r3, r4, [r2]
    s17 = 0;
 800c378:	f04f 0200 	mov.w	r2, #0
 800c37c:	f04f 0300 	mov.w	r3, #0
 800c380:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 800c384:	e9c1 2300 	strd	r2, r3, [r1]
    s4 += s16 * 666643;
 800c388:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800c38c:	4b79      	ldr	r3, [pc, #484]	; (800c574 <sc_reduce+0x1c04>)
 800c38e:	fb03 f102 	mul.w	r1, r3, r2
 800c392:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c396:	2300      	movs	r3, #0
 800c398:	fb03 f302 	mul.w	r3, r3, r2
 800c39c:	18cc      	adds	r4, r1, r3
 800c39e:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c3a2:	4b74      	ldr	r3, [pc, #464]	; (800c574 <sc_reduce+0x1c04>)
 800c3a4:	fba2 0103 	umull	r0, r1, r2, r3
 800c3a8:	1863      	adds	r3, r4, r1
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	1814      	adds	r4, r2, r0
 800c3b6:	f8c7 4380 	str.w	r4, [r7, #896]	; 0x380
 800c3ba:	414b      	adcs	r3, r1
 800c3bc:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 800c3c0:	e9d7 34e0 	ldrd	r3, r4, [r7, #896]	; 0x380
 800c3c4:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800c3c8:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s16 * 470296;
 800c3cc:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800c3d0:	4b69      	ldr	r3, [pc, #420]	; (800c578 <sc_reduce+0x1c08>)
 800c3d2:	fb03 f102 	mul.w	r1, r3, r2
 800c3d6:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c3da:	2300      	movs	r3, #0
 800c3dc:	fb03 f302 	mul.w	r3, r3, r2
 800c3e0:	18cc      	adds	r4, r1, r3
 800c3e2:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c3e6:	4b64      	ldr	r3, [pc, #400]	; (800c578 <sc_reduce+0x1c08>)
 800c3e8:	fba2 0103 	umull	r0, r1, r2, r3
 800c3ec:	1863      	adds	r3, r4, r1
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	1814      	adds	r4, r2, r0
 800c3fa:	f8c7 4378 	str.w	r4, [r7, #888]	; 0x378
 800c3fe:	414b      	adcs	r3, r1
 800c400:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800c404:	e9d7 34de 	ldrd	r3, r4, [r7, #888]	; 0x378
 800c408:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800c40c:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s16 * 654183;
 800c410:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800c414:	4b59      	ldr	r3, [pc, #356]	; (800c57c <sc_reduce+0x1c0c>)
 800c416:	fb03 f102 	mul.w	r1, r3, r2
 800c41a:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c41e:	2300      	movs	r3, #0
 800c420:	fb03 f302 	mul.w	r3, r3, r2
 800c424:	18cc      	adds	r4, r1, r3
 800c426:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c42a:	4b54      	ldr	r3, [pc, #336]	; (800c57c <sc_reduce+0x1c0c>)
 800c42c:	fba2 0103 	umull	r0, r1, r2, r3
 800c430:	1863      	adds	r3, r4, r1
 800c432:	4619      	mov	r1, r3
 800c434:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800c438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43c:	1814      	adds	r4, r2, r0
 800c43e:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 800c442:	414b      	adcs	r3, r1
 800c444:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800c448:	e9d7 34dc 	ldrd	r3, r4, [r7, #880]	; 0x370
 800c44c:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800c450:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= s16 * 997805;
 800c454:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800c458:	4b49      	ldr	r3, [pc, #292]	; (800c580 <sc_reduce+0x1c10>)
 800c45a:	fb03 f102 	mul.w	r1, r3, r2
 800c45e:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c462:	f04f 33ff 	mov.w	r3, #4294967295
 800c466:	fb03 f302 	mul.w	r3, r3, r2
 800c46a:	18cc      	adds	r4, r1, r3
 800c46c:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c470:	4b43      	ldr	r3, [pc, #268]	; (800c580 <sc_reduce+0x1c10>)
 800c472:	fba2 0103 	umull	r0, r1, r2, r3
 800c476:	1863      	adds	r3, r4, r1
 800c478:	4619      	mov	r1, r3
 800c47a:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	1814      	adds	r4, r2, r0
 800c484:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 800c488:	414b      	adcs	r3, r1
 800c48a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800c48e:	e9d7 34da 	ldrd	r3, r4, [r7, #872]	; 0x368
 800c492:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800c496:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s16 * 136657;
 800c49a:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800c49e:	4b39      	ldr	r3, [pc, #228]	; (800c584 <sc_reduce+0x1c14>)
 800c4a0:	fb03 f102 	mul.w	r1, r3, r2
 800c4a4:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	fb03 f302 	mul.w	r3, r3, r2
 800c4ae:	18cc      	adds	r4, r1, r3
 800c4b0:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c4b4:	4b33      	ldr	r3, [pc, #204]	; (800c584 <sc_reduce+0x1c14>)
 800c4b6:	fba2 0103 	umull	r0, r1, r2, r3
 800c4ba:	1863      	adds	r3, r4, r1
 800c4bc:	4619      	mov	r1, r3
 800c4be:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	1814      	adds	r4, r2, r0
 800c4c8:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 800c4cc:	414b      	adcs	r3, r1
 800c4ce:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800c4d2:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 800c4d6:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800c4da:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= s16 * 683901;
 800c4de:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 800c4e2:	4b29      	ldr	r3, [pc, #164]	; (800c588 <sc_reduce+0x1c18>)
 800c4e4:	fb03 f102 	mul.w	r1, r3, r2
 800c4e8:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f0:	fb03 f302 	mul.w	r3, r3, r2
 800c4f4:	18cc      	adds	r4, r1, r3
 800c4f6:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 800c4fa:	4b23      	ldr	r3, [pc, #140]	; (800c588 <sc_reduce+0x1c18>)
 800c4fc:	fba2 0103 	umull	r0, r1, r2, r3
 800c500:	1863      	adds	r3, r4, r1
 800c502:	4619      	mov	r1, r3
 800c504:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50c:	1814      	adds	r4, r2, r0
 800c50e:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 800c512:	414b      	adcs	r3, r1
 800c514:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800c518:	e9d7 34d6 	ldrd	r3, r4, [r7, #856]	; 0x358
 800c51c:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800c520:	e9c2 3400 	strd	r3, r4, [r2]
    s16 = 0;
 800c524:	f04f 0200 	mov.w	r2, #0
 800c528:	f04f 0300 	mov.w	r3, #0
 800c52c:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 800c530:	e9c1 2300 	strd	r2, r3, [r1]
    s3 += s15 * 666643;
 800c534:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800c538:	4b0e      	ldr	r3, [pc, #56]	; (800c574 <sc_reduce+0x1c04>)
 800c53a:	fb03 f102 	mul.w	r1, r3, r2
 800c53e:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c542:	2300      	movs	r3, #0
 800c544:	fb03 f302 	mul.w	r3, r3, r2
 800c548:	18cc      	adds	r4, r1, r3
 800c54a:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c54e:	4b09      	ldr	r3, [pc, #36]	; (800c574 <sc_reduce+0x1c04>)
 800c550:	fba2 0103 	umull	r0, r1, r2, r3
 800c554:	1863      	adds	r3, r4, r1
 800c556:	4619      	mov	r1, r3
 800c558:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	1814      	adds	r4, r2, r0
 800c562:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 800c566:	414b      	adcs	r3, r1
 800c568:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800c56c:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 800c570:	e00c      	b.n	800c58c <sc_reduce+0x1c1c>
 800c572:	bf00      	nop
 800c574:	000a2c13 	.word	0x000a2c13
 800c578:	00072d18 	.word	0x00072d18
 800c57c:	0009fb67 	.word	0x0009fb67
 800c580:	fff0c653 	.word	0xfff0c653
 800c584:	000215d1 	.word	0x000215d1
 800c588:	fff59083 	.word	0xfff59083
 800c58c:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800c590:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s15 * 470296;
 800c594:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800c598:	4be4      	ldr	r3, [pc, #912]	; (800c92c <sc_reduce+0x1fbc>)
 800c59a:	fb03 f102 	mul.w	r1, r3, r2
 800c59e:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	fb03 f302 	mul.w	r3, r3, r2
 800c5a8:	18cc      	adds	r4, r1, r3
 800c5aa:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c5ae:	4bdf      	ldr	r3, [pc, #892]	; (800c92c <sc_reduce+0x1fbc>)
 800c5b0:	fba2 0103 	umull	r0, r1, r2, r3
 800c5b4:	1863      	adds	r3, r4, r1
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800c5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c0:	1814      	adds	r4, r2, r0
 800c5c2:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 800c5c6:	414b      	adcs	r3, r1
 800c5c8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800c5cc:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 800c5d0:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800c5d4:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s15 * 654183;
 800c5d8:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800c5dc:	4bd4      	ldr	r3, [pc, #848]	; (800c930 <sc_reduce+0x1fc0>)
 800c5de:	fb03 f102 	mul.w	r1, r3, r2
 800c5e2:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	fb03 f302 	mul.w	r3, r3, r2
 800c5ec:	18cc      	adds	r4, r1, r3
 800c5ee:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c5f2:	4bcf      	ldr	r3, [pc, #828]	; (800c930 <sc_reduce+0x1fc0>)
 800c5f4:	fba2 0103 	umull	r0, r1, r2, r3
 800c5f8:	1863      	adds	r3, r4, r1
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	1814      	adds	r4, r2, r0
 800c606:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 800c60a:	414b      	adcs	r3, r1
 800c60c:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800c610:	e9d7 34d0 	ldrd	r3, r4, [r7, #832]	; 0x340
 800c614:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800c618:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= s15 * 997805;
 800c61c:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800c620:	4bc4      	ldr	r3, [pc, #784]	; (800c934 <sc_reduce+0x1fc4>)
 800c622:	fb03 f102 	mul.w	r1, r3, r2
 800c626:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c62a:	f04f 33ff 	mov.w	r3, #4294967295
 800c62e:	fb03 f302 	mul.w	r3, r3, r2
 800c632:	18cc      	adds	r4, r1, r3
 800c634:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c638:	4bbe      	ldr	r3, [pc, #760]	; (800c934 <sc_reduce+0x1fc4>)
 800c63a:	fba2 0103 	umull	r0, r1, r2, r3
 800c63e:	1863      	adds	r3, r4, r1
 800c640:	4619      	mov	r1, r3
 800c642:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	1814      	adds	r4, r2, r0
 800c64c:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 800c650:	414b      	adcs	r3, r1
 800c652:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800c656:	e9d7 34ce 	ldrd	r3, r4, [r7, #824]	; 0x338
 800c65a:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800c65e:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s15 * 136657;
 800c662:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800c666:	4bb4      	ldr	r3, [pc, #720]	; (800c938 <sc_reduce+0x1fc8>)
 800c668:	fb03 f102 	mul.w	r1, r3, r2
 800c66c:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c670:	2300      	movs	r3, #0
 800c672:	fb03 f302 	mul.w	r3, r3, r2
 800c676:	18cc      	adds	r4, r1, r3
 800c678:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c67c:	4bae      	ldr	r3, [pc, #696]	; (800c938 <sc_reduce+0x1fc8>)
 800c67e:	fba2 0103 	umull	r0, r1, r2, r3
 800c682:	1863      	adds	r3, r4, r1
 800c684:	4619      	mov	r1, r3
 800c686:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800c68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68e:	1814      	adds	r4, r2, r0
 800c690:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 800c694:	414b      	adcs	r3, r1
 800c696:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800c69a:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 800c69e:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800c6a2:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= s15 * 683901;
 800c6a6:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 800c6aa:	4ba4      	ldr	r3, [pc, #656]	; (800c93c <sc_reduce+0x1fcc>)
 800c6ac:	fb03 f102 	mul.w	r1, r3, r2
 800c6b0:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b8:	fb03 f302 	mul.w	r3, r3, r2
 800c6bc:	18cc      	adds	r4, r1, r3
 800c6be:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 800c6c2:	4b9e      	ldr	r3, [pc, #632]	; (800c93c <sc_reduce+0x1fcc>)
 800c6c4:	fba2 0103 	umull	r0, r1, r2, r3
 800c6c8:	1863      	adds	r3, r4, r1
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d4:	1814      	adds	r4, r2, r0
 800c6d6:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 800c6da:	414b      	adcs	r3, r1
 800c6dc:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 800c6e0:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 800c6e4:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800c6e8:	e9c2 3400 	strd	r3, r4, [r2]
    s15 = 0;
 800c6ec:	f04f 0200 	mov.w	r2, #0
 800c6f0:	f04f 0300 	mov.w	r3, #0
 800c6f4:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 800c6f8:	e9c1 2300 	strd	r2, r3, [r1]
    s2 += s14 * 666643;
 800c6fc:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c700:	4b8f      	ldr	r3, [pc, #572]	; (800c940 <sc_reduce+0x1fd0>)
 800c702:	fb03 f102 	mul.w	r1, r3, r2
 800c706:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c70a:	2300      	movs	r3, #0
 800c70c:	fb03 f302 	mul.w	r3, r3, r2
 800c710:	18cc      	adds	r4, r1, r3
 800c712:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c716:	4b8a      	ldr	r3, [pc, #552]	; (800c940 <sc_reduce+0x1fd0>)
 800c718:	fba2 0103 	umull	r0, r1, r2, r3
 800c71c:	1863      	adds	r3, r4, r1
 800c71e:	4619      	mov	r1, r3
 800c720:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800c724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c728:	1814      	adds	r4, r2, r0
 800c72a:	f8c7 4320 	str.w	r4, [r7, #800]	; 0x320
 800c72e:	414b      	adcs	r3, r1
 800c730:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800c734:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 800c738:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800c73c:	e9c2 3400 	strd	r3, r4, [r2]
    s3 += s14 * 470296;
 800c740:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c744:	4b79      	ldr	r3, [pc, #484]	; (800c92c <sc_reduce+0x1fbc>)
 800c746:	fb03 f102 	mul.w	r1, r3, r2
 800c74a:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c74e:	2300      	movs	r3, #0
 800c750:	fb03 f302 	mul.w	r3, r3, r2
 800c754:	18cc      	adds	r4, r1, r3
 800c756:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c75a:	4b74      	ldr	r3, [pc, #464]	; (800c92c <sc_reduce+0x1fbc>)
 800c75c:	fba2 0103 	umull	r0, r1, r2, r3
 800c760:	1863      	adds	r3, r4, r1
 800c762:	4619      	mov	r1, r3
 800c764:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	1814      	adds	r4, r2, r0
 800c76e:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
 800c772:	414b      	adcs	r3, r1
 800c774:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 800c778:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 800c77c:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800c780:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s14 * 654183;
 800c784:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c788:	4b69      	ldr	r3, [pc, #420]	; (800c930 <sc_reduce+0x1fc0>)
 800c78a:	fb03 f102 	mul.w	r1, r3, r2
 800c78e:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c792:	2300      	movs	r3, #0
 800c794:	fb03 f302 	mul.w	r3, r3, r2
 800c798:	18cc      	adds	r4, r1, r3
 800c79a:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c79e:	4b64      	ldr	r3, [pc, #400]	; (800c930 <sc_reduce+0x1fc0>)
 800c7a0:	fba2 0103 	umull	r0, r1, r2, r3
 800c7a4:	1863      	adds	r3, r4, r1
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b0:	1814      	adds	r4, r2, r0
 800c7b2:	f8c7 4310 	str.w	r4, [r7, #784]	; 0x310
 800c7b6:	414b      	adcs	r3, r1
 800c7b8:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 800c7bc:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 800c7c0:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800c7c4:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s14 * 997805;
 800c7c8:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c7cc:	4b59      	ldr	r3, [pc, #356]	; (800c934 <sc_reduce+0x1fc4>)
 800c7ce:	fb03 f102 	mul.w	r1, r3, r2
 800c7d2:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7da:	fb03 f302 	mul.w	r3, r3, r2
 800c7de:	18cc      	adds	r4, r1, r3
 800c7e0:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c7e4:	4b53      	ldr	r3, [pc, #332]	; (800c934 <sc_reduce+0x1fc4>)
 800c7e6:	fba2 0103 	umull	r0, r1, r2, r3
 800c7ea:	1863      	adds	r3, r4, r1
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f6:	1814      	adds	r4, r2, r0
 800c7f8:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 800c7fc:	414b      	adcs	r3, r1
 800c7fe:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800c802:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 800c806:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800c80a:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s14 * 136657;
 800c80e:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c812:	4b49      	ldr	r3, [pc, #292]	; (800c938 <sc_reduce+0x1fc8>)
 800c814:	fb03 f102 	mul.w	r1, r3, r2
 800c818:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c81c:	2300      	movs	r3, #0
 800c81e:	fb03 f302 	mul.w	r3, r3, r2
 800c822:	18cc      	adds	r4, r1, r3
 800c824:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c828:	4b43      	ldr	r3, [pc, #268]	; (800c938 <sc_reduce+0x1fc8>)
 800c82a:	fba2 0103 	umull	r0, r1, r2, r3
 800c82e:	1863      	adds	r3, r4, r1
 800c830:	4619      	mov	r1, r3
 800c832:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	1814      	adds	r4, r2, r0
 800c83c:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300
 800c840:	414b      	adcs	r3, r1
 800c842:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 800c846:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 800c84a:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800c84e:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= s14 * 683901;
 800c852:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 800c856:	4b39      	ldr	r3, [pc, #228]	; (800c93c <sc_reduce+0x1fcc>)
 800c858:	fb03 f102 	mul.w	r1, r3, r2
 800c85c:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c860:	f04f 33ff 	mov.w	r3, #4294967295
 800c864:	fb03 f302 	mul.w	r3, r3, r2
 800c868:	18cc      	adds	r4, r1, r3
 800c86a:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 800c86e:	4b33      	ldr	r3, [pc, #204]	; (800c93c <sc_reduce+0x1fcc>)
 800c870:	fba2 0103 	umull	r0, r1, r2, r3
 800c874:	1863      	adds	r3, r4, r1
 800c876:	4619      	mov	r1, r3
 800c878:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	1814      	adds	r4, r2, r0
 800c882:	f8c7 42f8 	str.w	r4, [r7, #760]	; 0x2f8
 800c886:	414b      	adcs	r3, r1
 800c888:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800c88c:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800c890:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800c894:	e9c2 3400 	strd	r3, r4, [r2]
    s14 = 0;
 800c898:	f04f 0200 	mov.w	r2, #0
 800c89c:	f04f 0300 	mov.w	r3, #0
 800c8a0:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 800c8a4:	e9c1 2300 	strd	r2, r3, [r1]
    s1 += s13 * 666643;
 800c8a8:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800c8ac:	4b24      	ldr	r3, [pc, #144]	; (800c940 <sc_reduce+0x1fd0>)
 800c8ae:	fb03 f102 	mul.w	r1, r3, r2
 800c8b2:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	fb03 f302 	mul.w	r3, r3, r2
 800c8bc:	18cc      	adds	r4, r1, r3
 800c8be:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c8c2:	4b1f      	ldr	r3, [pc, #124]	; (800c940 <sc_reduce+0x1fd0>)
 800c8c4:	fba2 0103 	umull	r0, r1, r2, r3
 800c8c8:	1863      	adds	r3, r4, r1
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	1814      	adds	r4, r2, r0
 800c8d6:	f8c7 42f0 	str.w	r4, [r7, #752]	; 0x2f0
 800c8da:	414b      	adcs	r3, r1
 800c8dc:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800c8e0:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 800c8e4:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800c8e8:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s13 * 470296;
 800c8ec:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800c8f0:	4b0e      	ldr	r3, [pc, #56]	; (800c92c <sc_reduce+0x1fbc>)
 800c8f2:	fb03 f102 	mul.w	r1, r3, r2
 800c8f6:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	fb03 f302 	mul.w	r3, r3, r2
 800c900:	18cc      	adds	r4, r1, r3
 800c902:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c906:	4b09      	ldr	r3, [pc, #36]	; (800c92c <sc_reduce+0x1fbc>)
 800c908:	fba2 0103 	umull	r0, r1, r2, r3
 800c90c:	1863      	adds	r3, r4, r1
 800c90e:	4619      	mov	r1, r3
 800c910:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	1814      	adds	r4, r2, r0
 800c91a:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 800c91e:	414b      	adcs	r3, r1
 800c920:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800c924:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 800c928:	e00c      	b.n	800c944 <sc_reduce+0x1fd4>
 800c92a:	bf00      	nop
 800c92c:	00072d18 	.word	0x00072d18
 800c930:	0009fb67 	.word	0x0009fb67
 800c934:	fff0c653 	.word	0xfff0c653
 800c938:	000215d1 	.word	0x000215d1
 800c93c:	fff59083 	.word	0xfff59083
 800c940:	000a2c13 	.word	0x000a2c13
 800c944:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800c948:	e9c2 3400 	strd	r3, r4, [r2]
    s3 += s13 * 654183;
 800c94c:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800c950:	4be9      	ldr	r3, [pc, #932]	; (800ccf8 <sc_reduce+0x2388>)
 800c952:	fb03 f102 	mul.w	r1, r3, r2
 800c956:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c95a:	2300      	movs	r3, #0
 800c95c:	fb03 f302 	mul.w	r3, r3, r2
 800c960:	18cc      	adds	r4, r1, r3
 800c962:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c966:	4be4      	ldr	r3, [pc, #912]	; (800ccf8 <sc_reduce+0x2388>)
 800c968:	fba2 0103 	umull	r0, r1, r2, r3
 800c96c:	1863      	adds	r3, r4, r1
 800c96e:	4619      	mov	r1, r3
 800c970:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800c974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c978:	1814      	adds	r4, r2, r0
 800c97a:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 800c97e:	414b      	adcs	r3, r1
 800c980:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 800c984:	e9d7 34b8 	ldrd	r3, r4, [r7, #736]	; 0x2e0
 800c988:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800c98c:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= s13 * 997805;
 800c990:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800c994:	4bd9      	ldr	r3, [pc, #868]	; (800ccfc <sc_reduce+0x238c>)
 800c996:	fb03 f102 	mul.w	r1, r3, r2
 800c99a:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c99e:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a2:	fb03 f302 	mul.w	r3, r3, r2
 800c9a6:	18cc      	adds	r4, r1, r3
 800c9a8:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c9ac:	4bd3      	ldr	r3, [pc, #844]	; (800ccfc <sc_reduce+0x238c>)
 800c9ae:	fba2 0103 	umull	r0, r1, r2, r3
 800c9b2:	1863      	adds	r3, r4, r1
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9be:	1814      	adds	r4, r2, r0
 800c9c0:	f8c7 42d8 	str.w	r4, [r7, #728]	; 0x2d8
 800c9c4:	414b      	adcs	r3, r1
 800c9c6:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 800c9ca:	e9d7 34b6 	ldrd	r3, r4, [r7, #728]	; 0x2d8
 800c9ce:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800c9d2:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s13 * 136657;
 800c9d6:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800c9da:	4bc9      	ldr	r3, [pc, #804]	; (800cd00 <sc_reduce+0x2390>)
 800c9dc:	fb03 f102 	mul.w	r1, r3, r2
 800c9e0:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	fb03 f302 	mul.w	r3, r3, r2
 800c9ea:	18cc      	adds	r4, r1, r3
 800c9ec:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800c9f0:	4bc3      	ldr	r3, [pc, #780]	; (800cd00 <sc_reduce+0x2390>)
 800c9f2:	fba2 0103 	umull	r0, r1, r2, r3
 800c9f6:	1863      	adds	r3, r4, r1
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	1814      	adds	r4, r2, r0
 800ca04:	f8c7 42d0 	str.w	r4, [r7, #720]	; 0x2d0
 800ca08:	414b      	adcs	r3, r1
 800ca0a:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800ca0e:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 800ca12:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800ca16:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= s13 * 683901;
 800ca1a:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 800ca1e:	4bb9      	ldr	r3, [pc, #740]	; (800cd04 <sc_reduce+0x2394>)
 800ca20:	fb03 f102 	mul.w	r1, r3, r2
 800ca24:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800ca28:	f04f 33ff 	mov.w	r3, #4294967295
 800ca2c:	fb03 f302 	mul.w	r3, r3, r2
 800ca30:	18cc      	adds	r4, r1, r3
 800ca32:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 800ca36:	4bb3      	ldr	r3, [pc, #716]	; (800cd04 <sc_reduce+0x2394>)
 800ca38:	fba2 0103 	umull	r0, r1, r2, r3
 800ca3c:	1863      	adds	r3, r4, r1
 800ca3e:	4619      	mov	r1, r3
 800ca40:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	1814      	adds	r4, r2, r0
 800ca4a:	f8c7 42c8 	str.w	r4, [r7, #712]	; 0x2c8
 800ca4e:	414b      	adcs	r3, r1
 800ca50:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800ca54:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 800ca58:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800ca5c:	e9c2 3400 	strd	r3, r4, [r2]
    s13 = 0;
 800ca60:	f04f 0200 	mov.w	r2, #0
 800ca64:	f04f 0300 	mov.w	r3, #0
 800ca68:	f507 61f8 	add.w	r1, r7, #1984	; 0x7c0
 800ca6c:	e9c1 2300 	strd	r2, r3, [r1]
    s0 += s12 * 666643;
 800ca70:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800ca74:	4ba4      	ldr	r3, [pc, #656]	; (800cd08 <sc_reduce+0x2398>)
 800ca76:	fb03 f102 	mul.w	r1, r3, r2
 800ca7a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800ca7e:	2300      	movs	r3, #0
 800ca80:	fb03 f302 	mul.w	r3, r3, r2
 800ca84:	18cc      	adds	r4, r1, r3
 800ca86:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800ca8a:	4b9f      	ldr	r3, [pc, #636]	; (800cd08 <sc_reduce+0x2398>)
 800ca8c:	fba2 0103 	umull	r0, r1, r2, r3
 800ca90:	1863      	adds	r3, r4, r1
 800ca92:	4619      	mov	r1, r3
 800ca94:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800ca98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9c:	1814      	adds	r4, r2, r0
 800ca9e:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 800caa2:	414b      	adcs	r3, r1
 800caa4:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800caa8:	e9d7 34b0 	ldrd	r3, r4, [r7, #704]	; 0x2c0
 800caac:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800cab0:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 800cab4:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800cab8:	4b94      	ldr	r3, [pc, #592]	; (800cd0c <sc_reduce+0x239c>)
 800caba:	fb03 f102 	mul.w	r1, r3, r2
 800cabe:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cac2:	2300      	movs	r3, #0
 800cac4:	fb03 f302 	mul.w	r3, r3, r2
 800cac8:	18cc      	adds	r4, r1, r3
 800caca:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cace:	4b8f      	ldr	r3, [pc, #572]	; (800cd0c <sc_reduce+0x239c>)
 800cad0:	fba2 0103 	umull	r0, r1, r2, r3
 800cad4:	1863      	adds	r3, r4, r1
 800cad6:	4619      	mov	r1, r3
 800cad8:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800cadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae0:	1814      	adds	r4, r2, r0
 800cae2:	f8c7 42b8 	str.w	r4, [r7, #696]	; 0x2b8
 800cae6:	414b      	adcs	r3, r1
 800cae8:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800caec:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 800caf0:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800caf4:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 800caf8:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800cafc:	4b7e      	ldr	r3, [pc, #504]	; (800ccf8 <sc_reduce+0x2388>)
 800cafe:	fb03 f102 	mul.w	r1, r3, r2
 800cb02:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cb06:	2300      	movs	r3, #0
 800cb08:	fb03 f302 	mul.w	r3, r3, r2
 800cb0c:	18cc      	adds	r4, r1, r3
 800cb0e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cb12:	4b79      	ldr	r3, [pc, #484]	; (800ccf8 <sc_reduce+0x2388>)
 800cb14:	fba2 0103 	umull	r0, r1, r2, r3
 800cb18:	1863      	adds	r3, r4, r1
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800cb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb24:	1814      	adds	r4, r2, r0
 800cb26:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 800cb2a:	414b      	adcs	r3, r1
 800cb2c:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800cb30:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 800cb34:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800cb38:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 800cb3c:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800cb40:	4b6e      	ldr	r3, [pc, #440]	; (800ccfc <sc_reduce+0x238c>)
 800cb42:	fb03 f102 	mul.w	r1, r3, r2
 800cb46:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cb4a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4e:	fb03 f302 	mul.w	r3, r3, r2
 800cb52:	18cc      	adds	r4, r1, r3
 800cb54:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cb58:	4b68      	ldr	r3, [pc, #416]	; (800ccfc <sc_reduce+0x238c>)
 800cb5a:	fba2 0103 	umull	r0, r1, r2, r3
 800cb5e:	1863      	adds	r3, r4, r1
 800cb60:	4619      	mov	r1, r3
 800cb62:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	1814      	adds	r4, r2, r0
 800cb6c:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 800cb70:	414b      	adcs	r3, r1
 800cb72:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800cb76:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	; 0x2a8
 800cb7a:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800cb7e:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 800cb82:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800cb86:	4b5e      	ldr	r3, [pc, #376]	; (800cd00 <sc_reduce+0x2390>)
 800cb88:	fb03 f102 	mul.w	r1, r3, r2
 800cb8c:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cb90:	2300      	movs	r3, #0
 800cb92:	fb03 f302 	mul.w	r3, r3, r2
 800cb96:	18cc      	adds	r4, r1, r3
 800cb98:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cb9c:	4b58      	ldr	r3, [pc, #352]	; (800cd00 <sc_reduce+0x2390>)
 800cb9e:	fba2 0103 	umull	r0, r1, r2, r3
 800cba2:	1863      	adds	r3, r4, r1
 800cba4:	4619      	mov	r1, r3
 800cba6:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	1814      	adds	r4, r2, r0
 800cbb0:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 800cbb4:	414b      	adcs	r3, r1
 800cbb6:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 800cbba:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 800cbbe:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800cbc2:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 800cbc6:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800cbca:	4b4e      	ldr	r3, [pc, #312]	; (800cd04 <sc_reduce+0x2394>)
 800cbcc:	fb03 f102 	mul.w	r1, r3, r2
 800cbd0:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd8:	fb03 f302 	mul.w	r3, r3, r2
 800cbdc:	18cc      	adds	r4, r1, r3
 800cbde:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800cbe2:	4b48      	ldr	r3, [pc, #288]	; (800cd04 <sc_reduce+0x2394>)
 800cbe4:	fba2 0103 	umull	r0, r1, r2, r3
 800cbe8:	1863      	adds	r3, r4, r1
 800cbea:	4619      	mov	r1, r3
 800cbec:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	1814      	adds	r4, r2, r0
 800cbf6:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 800cbfa:	414b      	adcs	r3, r1
 800cbfc:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800cc00:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 800cc04:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800cc08:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 800cc0c:	f04f 0200 	mov.w	r2, #0
 800cc10:	f04f 0300 	mov.w	r3, #0
 800cc14:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 800cc18:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = (s0 + (1 << 20)) >> 21;
 800cc1c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800cc28:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 800cc2c:	f143 0300 	adc.w	r3, r3, #0
 800cc30:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 800cc34:	f04f 0200 	mov.w	r2, #0
 800cc38:	f04f 0300 	mov.w	r3, #0
 800cc3c:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 800cc40:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cc44:	4621      	mov	r1, r4
 800cc46:	0d4a      	lsrs	r2, r1, #21
 800cc48:	4629      	mov	r1, r5
 800cc4a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800cc4e:	4629      	mov	r1, r5
 800cc50:	154b      	asrs	r3, r1, #21
 800cc52:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 800cc56:	e9c1 2300 	strd	r2, r3, [r1]
    s1 += carry0;
 800cc5a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800cc5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cc62:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	1884      	adds	r4, r0, r2
 800cc6c:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 800cc70:	eb41 0303 	adc.w	r3, r1, r3
 800cc74:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800cc78:	e9d7 34a4 	ldrd	r3, r4, [r7, #656]	; 0x290
 800cc7c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800cc80:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 800cc84:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8c:	f04f 0000 	mov.w	r0, #0
 800cc90:	f04f 0100 	mov.w	r1, #0
 800cc94:	0559      	lsls	r1, r3, #21
 800cc96:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800cc9a:	0550      	lsls	r0, r2, #21
 800cc9c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca4:	1a14      	subs	r4, r2, r0
 800cca6:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 800ccaa:	eb63 0301 	sbc.w	r3, r3, r1
 800ccae:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800ccb2:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800ccb6:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800ccba:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = (s2 + (1 << 20)) >> 21;
 800ccbe:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800ccca:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 800ccce:	f143 0300 	adc.w	r3, r3, #0
 800ccd2:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 800ccd6:	f04f 0200 	mov.w	r2, #0
 800ccda:	f04f 0300 	mov.w	r3, #0
 800ccde:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 800cce2:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cce6:	4621      	mov	r1, r4
 800cce8:	0d4a      	lsrs	r2, r1, #21
 800ccea:	4629      	mov	r1, r5
 800ccec:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	154b      	asrs	r3, r1, #21
 800ccf4:	e00c      	b.n	800cd10 <sc_reduce+0x23a0>
 800ccf6:	bf00      	nop
 800ccf8:	0009fb67 	.word	0x0009fb67
 800ccfc:	fff0c653 	.word	0xfff0c653
 800cd00:	000215d1 	.word	0x000215d1
 800cd04:	fff59083 	.word	0xfff59083
 800cd08:	000a2c13 	.word	0x000a2c13
 800cd0c:	00072d18 	.word	0x00072d18
 800cd10:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 800cd14:	e9c1 2300 	strd	r2, r3, [r1]
    s3 += carry2;
 800cd18:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800cd1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cd20:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	1884      	adds	r4, r0, r2
 800cd2a:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 800cd2e:	eb41 0303 	adc.w	r3, r1, r3
 800cd32:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800cd36:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 800cd3a:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800cd3e:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 800cd42:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	f04f 0000 	mov.w	r0, #0
 800cd4e:	f04f 0100 	mov.w	r1, #0
 800cd52:	0559      	lsls	r1, r3, #21
 800cd54:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800cd58:	0550      	lsls	r0, r2, #21
 800cd5a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800cd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd62:	1a14      	subs	r4, r2, r0
 800cd64:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 800cd68:	eb63 0301 	sbc.w	r3, r3, r1
 800cd6c:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800cd70:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	; 0x278
 800cd74:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800cd78:	e9c2 3400 	strd	r3, r4, [r2]
    carry4 = (s4 + (1 << 20)) >> 21;
 800cd7c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800cd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd84:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800cd88:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 800cd8c:	f143 0300 	adc.w	r3, r3, #0
 800cd90:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 800cd94:	f04f 0200 	mov.w	r2, #0
 800cd98:	f04f 0300 	mov.w	r3, #0
 800cd9c:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 800cda0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cda4:	4621      	mov	r1, r4
 800cda6:	0d4a      	lsrs	r2, r1, #21
 800cda8:	4629      	mov	r1, r5
 800cdaa:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800cdae:	4629      	mov	r1, r5
 800cdb0:	154b      	asrs	r3, r1, #21
 800cdb2:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 800cdb6:	e9c1 2300 	strd	r2, r3, [r1]
    s5 += carry4;
 800cdba:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800cdbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cdc2:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdca:	1884      	adds	r4, r0, r2
 800cdcc:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 800cdd0:	eb41 0303 	adc.w	r3, r1, r3
 800cdd4:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800cdd8:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 800cddc:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800cde0:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 800cde4:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdec:	f04f 0000 	mov.w	r0, #0
 800cdf0:	f04f 0100 	mov.w	r1, #0
 800cdf4:	0559      	lsls	r1, r3, #21
 800cdf6:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800cdfa:	0550      	lsls	r0, r2, #21
 800cdfc:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800ce00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce04:	1a14      	subs	r4, r2, r0
 800ce06:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 800ce0a:	eb63 0301 	sbc.w	r3, r3, r1
 800ce0e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800ce12:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 800ce16:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800ce1a:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = (s6 + (1 << 20)) >> 21;
 800ce1e:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800ce22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce26:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800ce2a:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 800ce2e:	f143 0300 	adc.w	r3, r3, #0
 800ce32:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 800ce36:	f04f 0200 	mov.w	r2, #0
 800ce3a:	f04f 0300 	mov.w	r3, #0
 800ce3e:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 800ce42:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ce46:	4621      	mov	r1, r4
 800ce48:	0d4a      	lsrs	r2, r1, #21
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800ce50:	4629      	mov	r1, r5
 800ce52:	154b      	asrs	r3, r1, #21
 800ce54:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 800ce58:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += carry6;
 800ce5c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800ce60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce64:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800ce68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6c:	1884      	adds	r4, r0, r2
 800ce6e:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 800ce72:	eb41 0303 	adc.w	r3, r1, r3
 800ce76:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800ce7a:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	; 0x260
 800ce7e:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800ce82:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 800ce86:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800ce8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8e:	f04f 0000 	mov.w	r0, #0
 800ce92:	f04f 0100 	mov.w	r1, #0
 800ce96:	0559      	lsls	r1, r3, #21
 800ce98:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800ce9c:	0550      	lsls	r0, r2, #21
 800ce9e:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800cea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea6:	1a14      	subs	r4, r2, r0
 800cea8:	f8c7 4258 	str.w	r4, [r7, #600]	; 0x258
 800ceac:	eb63 0301 	sbc.w	r3, r3, r1
 800ceb0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800ceb4:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 800ceb8:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800cebc:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (s8 + (1 << 20)) >> 21;
 800cec0:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800cec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec8:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800cecc:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 800ced0:	f143 0300 	adc.w	r3, r3, #0
 800ced4:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 800ced8:	f04f 0200 	mov.w	r2, #0
 800cedc:	f04f 0300 	mov.w	r3, #0
 800cee0:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 800cee4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cee8:	4621      	mov	r1, r4
 800ceea:	0d4a      	lsrs	r2, r1, #21
 800ceec:	4629      	mov	r1, r5
 800ceee:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800cef2:	4629      	mov	r1, r5
 800cef4:	154b      	asrs	r3, r1, #21
 800cef6:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 800cefa:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += carry8;
 800cefe:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800cf02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf06:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0e:	1884      	adds	r4, r0, r2
 800cf10:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 800cf14:	eb41 0303 	adc.w	r3, r1, r3
 800cf18:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800cf1c:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 800cf20:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800cf24:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 800cf28:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf30:	f04f 0000 	mov.w	r0, #0
 800cf34:	f04f 0100 	mov.w	r1, #0
 800cf38:	0559      	lsls	r1, r3, #21
 800cf3a:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800cf3e:	0550      	lsls	r0, r2, #21
 800cf40:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800cf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf48:	1a14      	subs	r4, r2, r0
 800cf4a:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 800cf4e:	eb63 0301 	sbc.w	r3, r3, r1
 800cf52:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800cf56:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800cf5a:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800cf5e:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = (s10 + (1 << 20)) >> 21;
 800cf62:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800cf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6a:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800cf6e:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 800cf72:	f143 0300 	adc.w	r3, r3, #0
 800cf76:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 800cf7a:	f04f 0200 	mov.w	r2, #0
 800cf7e:	f04f 0300 	mov.w	r3, #0
 800cf82:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 800cf86:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	0d4a      	lsrs	r2, r1, #21
 800cf8e:	4629      	mov	r1, r5
 800cf90:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800cf94:	4629      	mov	r1, r5
 800cf96:	154b      	asrs	r3, r1, #21
 800cf98:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800cf9c:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 800cfa0:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800cfa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cfa8:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800cfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb0:	1884      	adds	r4, r0, r2
 800cfb2:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 800cfb6:	eb41 0303 	adc.w	r3, r1, r3
 800cfba:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800cfbe:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800cfc2:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800cfc6:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 800cfca:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	f04f 0000 	mov.w	r0, #0
 800cfd6:	f04f 0100 	mov.w	r1, #0
 800cfda:	0559      	lsls	r1, r3, #21
 800cfdc:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800cfe0:	0550      	lsls	r0, r2, #21
 800cfe2:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800cfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfea:	1a14      	subs	r4, r2, r0
 800cfec:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 800cff0:	eb63 0301 	sbc.w	r3, r3, r1
 800cff4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 800cff8:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800cffc:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800d000:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = (s1 + (1 << 20)) >> 21;
 800d004:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00c:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800d010:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 800d014:	f143 0300 	adc.w	r3, r3, #0
 800d018:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 800d01c:	f04f 0200 	mov.w	r2, #0
 800d020:	f04f 0300 	mov.w	r3, #0
 800d024:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 800d028:	e9d1 4500 	ldrd	r4, r5, [r1]
 800d02c:	4621      	mov	r1, r4
 800d02e:	0d4a      	lsrs	r2, r1, #21
 800d030:	4629      	mov	r1, r5
 800d032:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800d036:	4629      	mov	r1, r5
 800d038:	154b      	asrs	r3, r1, #21
 800d03a:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 800d03e:	e9c1 2300 	strd	r2, r3, [r1]
    s2 += carry1;
 800d042:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d046:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d04a:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d052:	1884      	adds	r4, r0, r2
 800d054:	f8c7 4230 	str.w	r4, [r7, #560]	; 0x230
 800d058:	eb41 0303 	adc.w	r3, r1, r3
 800d05c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800d060:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 800d064:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800d068:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 800d06c:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800d070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d074:	f04f 0000 	mov.w	r0, #0
 800d078:	f04f 0100 	mov.w	r1, #0
 800d07c:	0559      	lsls	r1, r3, #21
 800d07e:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d082:	0550      	lsls	r0, r2, #21
 800d084:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08c:	1a14      	subs	r4, r2, r0
 800d08e:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 800d092:	eb63 0301 	sbc.w	r3, r3, r1
 800d096:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800d09a:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800d09e:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800d0a2:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = (s3 + (1 << 20)) >> 21;
 800d0a6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800d0b2:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 800d0b6:	f143 0300 	adc.w	r3, r3, #0
 800d0ba:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 800d0be:	f04f 0200 	mov.w	r2, #0
 800d0c2:	f04f 0300 	mov.w	r3, #0
 800d0c6:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 800d0ca:	e9d1 4500 	ldrd	r4, r5, [r1]
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	0d4a      	lsrs	r2, r1, #21
 800d0d2:	4629      	mov	r1, r5
 800d0d4:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800d0d8:	4629      	mov	r1, r5
 800d0da:	154b      	asrs	r3, r1, #21
 800d0dc:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 800d0e0:	e9c1 2300 	strd	r2, r3, [r1]
    s4 += carry3;
 800d0e4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d0e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d0ec:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f4:	1884      	adds	r4, r0, r2
 800d0f6:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 800d0fa:	eb41 0303 	adc.w	r3, r1, r3
 800d0fe:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800d102:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 800d106:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800d10a:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 800d10e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	f04f 0000 	mov.w	r0, #0
 800d11a:	f04f 0100 	mov.w	r1, #0
 800d11e:	0559      	lsls	r1, r3, #21
 800d120:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d124:	0550      	lsls	r0, r2, #21
 800d126:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12e:	1a14      	subs	r4, r2, r0
 800d130:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 800d134:	eb63 0301 	sbc.w	r3, r3, r1
 800d138:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800d13c:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 800d140:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800d144:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = (s5 + (1 << 20)) >> 21;
 800d148:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800d14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d150:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800d154:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 800d158:	f143 0300 	adc.w	r3, r3, #0
 800d15c:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 800d160:	f04f 0200 	mov.w	r2, #0
 800d164:	f04f 0300 	mov.w	r3, #0
 800d168:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 800d16c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800d170:	4621      	mov	r1, r4
 800d172:	0d4a      	lsrs	r2, r1, #21
 800d174:	4629      	mov	r1, r5
 800d176:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800d17a:	4629      	mov	r1, r5
 800d17c:	154b      	asrs	r3, r1, #21
 800d17e:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 800d182:	e9c1 2300 	strd	r2, r3, [r1]
    s6 += carry5;
 800d186:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800d18a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d18e:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d196:	1884      	adds	r4, r0, r2
 800d198:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 800d19c:	eb41 0303 	adc.w	r3, r1, r3
 800d1a0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800d1a4:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800d1a8:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800d1ac:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 800d1b0:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b8:	f04f 0000 	mov.w	r0, #0
 800d1bc:	f04f 0100 	mov.w	r1, #0
 800d1c0:	0559      	lsls	r1, r3, #21
 800d1c2:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d1c6:	0550      	lsls	r0, r2, #21
 800d1c8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800d1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d0:	1a14      	subs	r4, r2, r0
 800d1d2:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 800d1d6:	eb63 0301 	sbc.w	r3, r3, r1
 800d1da:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800d1de:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800d1e2:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800d1e6:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (s7 + (1 << 20)) >> 21;
 800d1ea:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800d1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f2:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800d1f6:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 800d1fa:	f143 0300 	adc.w	r3, r3, #0
 800d1fe:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 800d202:	f04f 0200 	mov.w	r2, #0
 800d206:	f04f 0300 	mov.w	r3, #0
 800d20a:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 800d20e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800d212:	4621      	mov	r1, r4
 800d214:	0d4a      	lsrs	r2, r1, #21
 800d216:	4629      	mov	r1, r5
 800d218:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800d21c:	4629      	mov	r1, r5
 800d21e:	154b      	asrs	r3, r1, #21
 800d220:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 800d224:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += carry7;
 800d228:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800d22c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d230:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800d234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d238:	1884      	adds	r4, r0, r2
 800d23a:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 800d23e:	eb41 0303 	adc.w	r3, r1, r3
 800d242:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800d246:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 800d24a:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800d24e:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 800d252:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800d256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25a:	f04f 0000 	mov.w	r0, #0
 800d25e:	f04f 0100 	mov.w	r1, #0
 800d262:	0559      	lsls	r1, r3, #21
 800d264:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d268:	0550      	lsls	r0, r2, #21
 800d26a:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800d26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d272:	1a14      	subs	r4, r2, r0
 800d274:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 800d278:	eb63 0301 	sbc.w	r3, r3, r1
 800d27c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800d280:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 800d284:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800d288:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = (s9 + (1 << 20)) >> 21;
 800d28c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800d290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d294:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800d298:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 800d29c:	f143 0300 	adc.w	r3, r3, #0
 800d2a0:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 800d2a4:	f04f 0200 	mov.w	r2, #0
 800d2a8:	f04f 0300 	mov.w	r3, #0
 800d2ac:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 800d2b0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	0d4a      	lsrs	r2, r1, #21
 800d2b8:	4629      	mov	r1, r5
 800d2ba:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800d2be:	4629      	mov	r1, r5
 800d2c0:	154b      	asrs	r3, r1, #21
 800d2c2:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 800d2c6:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 800d2ca:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800d2ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2d2:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2da:	1884      	adds	r4, r0, r2
 800d2dc:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 800d2e0:	eb41 0303 	adc.w	r3, r1, r3
 800d2e4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800d2e8:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 800d2ec:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800d2f0:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 800d2f4:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	f04f 0000 	mov.w	r0, #0
 800d300:	f04f 0100 	mov.w	r1, #0
 800d304:	0559      	lsls	r1, r3, #21
 800d306:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d30a:	0550      	lsls	r0, r2, #21
 800d30c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800d310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d314:	1a14      	subs	r4, r2, r0
 800d316:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 800d31a:	eb63 0301 	sbc.w	r3, r3, r1
 800d31e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800d322:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 800d326:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800d32a:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = (s11 + (1 << 20)) >> 21;
 800d32e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 800d33a:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 800d33e:	f143 0300 	adc.w	r3, r3, #0
 800d342:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800d346:	f04f 0200 	mov.w	r2, #0
 800d34a:	f04f 0300 	mov.w	r3, #0
 800d34e:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 800d352:	e9d1 4500 	ldrd	r4, r5, [r1]
 800d356:	4621      	mov	r1, r4
 800d358:	0d4a      	lsrs	r2, r1, #21
 800d35a:	4629      	mov	r1, r5
 800d35c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800d360:	4629      	mov	r1, r5
 800d362:	154b      	asrs	r3, r1, #21
 800d364:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 800d368:	e9c1 2300 	strd	r2, r3, [r1]
    s12 += carry11;
 800d36c:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800d370:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d374:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800d378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37c:	1884      	adds	r4, r0, r2
 800d37e:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 800d382:	eb41 0303 	adc.w	r3, r1, r3
 800d386:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800d38a:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800d38e:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800d392:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 800d396:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	f04f 0000 	mov.w	r0, #0
 800d3a2:	f04f 0100 	mov.w	r1, #0
 800d3a6:	0559      	lsls	r1, r3, #21
 800d3a8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d3ac:	0550      	lsls	r0, r2, #21
 800d3ae:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800d3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b6:	1a14      	subs	r4, r2, r0
 800d3b8:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 800d3bc:	eb63 0301 	sbc.w	r3, r3, r1
 800d3c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800d3c4:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800d3c8:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800d3cc:	e9c2 3400 	strd	r3, r4, [r2]
    s0 += s12 * 666643;
 800d3d0:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d3d4:	4bee      	ldr	r3, [pc, #952]	; (800d790 <sc_reduce+0x2e20>)
 800d3d6:	fb03 f102 	mul.w	r1, r3, r2
 800d3da:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d3de:	2300      	movs	r3, #0
 800d3e0:	fb03 f302 	mul.w	r3, r3, r2
 800d3e4:	18cc      	adds	r4, r1, r3
 800d3e6:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d3ea:	4be9      	ldr	r3, [pc, #932]	; (800d790 <sc_reduce+0x2e20>)
 800d3ec:	fba2 0103 	umull	r0, r1, r2, r3
 800d3f0:	1863      	adds	r3, r4, r1
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800d3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fc:	1814      	adds	r4, r2, r0
 800d3fe:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 800d402:	414b      	adcs	r3, r1
 800d404:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800d408:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 800d40c:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800d410:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 800d414:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d418:	4bde      	ldr	r3, [pc, #888]	; (800d794 <sc_reduce+0x2e24>)
 800d41a:	fb03 f102 	mul.w	r1, r3, r2
 800d41e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d422:	2300      	movs	r3, #0
 800d424:	fb03 f302 	mul.w	r3, r3, r2
 800d428:	18cc      	adds	r4, r1, r3
 800d42a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d42e:	4bd9      	ldr	r3, [pc, #868]	; (800d794 <sc_reduce+0x2e24>)
 800d430:	fba2 0103 	umull	r0, r1, r2, r3
 800d434:	1863      	adds	r3, r4, r1
 800d436:	4619      	mov	r1, r3
 800d438:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d440:	1814      	adds	r4, r2, r0
 800d442:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 800d446:	414b      	adcs	r3, r1
 800d448:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800d44c:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 800d450:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800d454:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 800d458:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d45c:	4bce      	ldr	r3, [pc, #824]	; (800d798 <sc_reduce+0x2e28>)
 800d45e:	fb03 f102 	mul.w	r1, r3, r2
 800d462:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d466:	2300      	movs	r3, #0
 800d468:	fb03 f302 	mul.w	r3, r3, r2
 800d46c:	18cc      	adds	r4, r1, r3
 800d46e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d472:	4bc9      	ldr	r3, [pc, #804]	; (800d798 <sc_reduce+0x2e28>)
 800d474:	fba2 0103 	umull	r0, r1, r2, r3
 800d478:	1863      	adds	r3, r4, r1
 800d47a:	4619      	mov	r1, r3
 800d47c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	1814      	adds	r4, r2, r0
 800d486:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 800d48a:	414b      	adcs	r3, r1
 800d48c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800d490:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 800d494:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800d498:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 800d49c:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d4a0:	4bbe      	ldr	r3, [pc, #760]	; (800d79c <sc_reduce+0x2e2c>)
 800d4a2:	fb03 f102 	mul.w	r1, r3, r2
 800d4a6:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ae:	fb03 f302 	mul.w	r3, r3, r2
 800d4b2:	18cc      	adds	r4, r1, r3
 800d4b4:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d4b8:	4bb8      	ldr	r3, [pc, #736]	; (800d79c <sc_reduce+0x2e2c>)
 800d4ba:	fba2 0103 	umull	r0, r1, r2, r3
 800d4be:	1863      	adds	r3, r4, r1
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ca:	1814      	adds	r4, r2, r0
 800d4cc:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 800d4d0:	414b      	adcs	r3, r1
 800d4d2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800d4d6:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 800d4da:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800d4de:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 800d4e2:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d4e6:	4bae      	ldr	r3, [pc, #696]	; (800d7a0 <sc_reduce+0x2e30>)
 800d4e8:	fb03 f102 	mul.w	r1, r3, r2
 800d4ec:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	fb03 f302 	mul.w	r3, r3, r2
 800d4f6:	18cc      	adds	r4, r1, r3
 800d4f8:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d4fc:	4ba8      	ldr	r3, [pc, #672]	; (800d7a0 <sc_reduce+0x2e30>)
 800d4fe:	fba2 0103 	umull	r0, r1, r2, r3
 800d502:	1863      	adds	r3, r4, r1
 800d504:	4619      	mov	r1, r3
 800d506:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50e:	1814      	adds	r4, r2, r0
 800d510:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 800d514:	414b      	adcs	r3, r1
 800d516:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800d51a:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 800d51e:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800d522:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 800d526:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800d52a:	4b9e      	ldr	r3, [pc, #632]	; (800d7a4 <sc_reduce+0x2e34>)
 800d52c:	fb03 f102 	mul.w	r1, r3, r2
 800d530:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d534:	f04f 33ff 	mov.w	r3, #4294967295
 800d538:	fb03 f302 	mul.w	r3, r3, r2
 800d53c:	18cc      	adds	r4, r1, r3
 800d53e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800d542:	4b98      	ldr	r3, [pc, #608]	; (800d7a4 <sc_reduce+0x2e34>)
 800d544:	fba2 0103 	umull	r0, r1, r2, r3
 800d548:	1863      	adds	r3, r4, r1
 800d54a:	4619      	mov	r1, r3
 800d54c:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d554:	1814      	adds	r4, r2, r0
 800d556:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 800d55a:	414b      	adcs	r3, r1
 800d55c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800d560:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800d564:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800d568:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 800d56c:	f04f 0200 	mov.w	r2, #0
 800d570:	f04f 0300 	mov.w	r3, #0
 800d574:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 800d578:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = s0 >> 21;
 800d57c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800d580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d584:	f04f 0000 	mov.w	r0, #0
 800d588:	f04f 0100 	mov.w	r1, #0
 800d58c:	0d50      	lsrs	r0, r2, #21
 800d58e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d592:	1559      	asrs	r1, r3, #21
 800d594:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800d598:	e9c3 0100 	strd	r0, r1, [r3]
    s1 += carry0;
 800d59c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d5a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d5a4:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800d5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ac:	1884      	adds	r4, r0, r2
 800d5ae:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 800d5b2:	eb41 0303 	adc.w	r3, r1, r3
 800d5b6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800d5ba:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 800d5be:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800d5c2:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 800d5c6:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800d5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ce:	f04f 0000 	mov.w	r0, #0
 800d5d2:	f04f 0100 	mov.w	r1, #0
 800d5d6:	0559      	lsls	r1, r3, #21
 800d5d8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d5dc:	0550      	lsls	r0, r2, #21
 800d5de:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	1a14      	subs	r4, r2, r0
 800d5e8:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 800d5ec:	eb63 0301 	sbc.w	r3, r3, r1
 800d5f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800d5f4:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 800d5f8:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800d5fc:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = s1 >> 21;
 800d600:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d608:	f04f 0000 	mov.w	r0, #0
 800d60c:	f04f 0100 	mov.w	r1, #0
 800d610:	0d50      	lsrs	r0, r2, #21
 800d612:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d616:	1559      	asrs	r1, r3, #21
 800d618:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800d61c:	e9c3 0100 	strd	r0, r1, [r3]
    s2 += carry1;
 800d620:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d624:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d628:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800d62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d630:	1884      	adds	r4, r0, r2
 800d632:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 800d636:	eb41 0303 	adc.w	r3, r1, r3
 800d63a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800d63e:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 800d642:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800d646:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 800d64a:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800d64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d652:	f04f 0000 	mov.w	r0, #0
 800d656:	f04f 0100 	mov.w	r1, #0
 800d65a:	0559      	lsls	r1, r3, #21
 800d65c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d660:	0550      	lsls	r0, r2, #21
 800d662:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66a:	1a14      	subs	r4, r2, r0
 800d66c:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 800d670:	eb63 0301 	sbc.w	r3, r3, r1
 800d674:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800d678:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 800d67c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800d680:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = s2 >> 21;
 800d684:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68c:	f04f 0000 	mov.w	r0, #0
 800d690:	f04f 0100 	mov.w	r1, #0
 800d694:	0d50      	lsrs	r0, r2, #21
 800d696:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d69a:	1559      	asrs	r1, r3, #21
 800d69c:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800d6a0:	e9c3 0100 	strd	r0, r1, [r3]
    s3 += carry2;
 800d6a4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d6a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d6ac:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	1884      	adds	r4, r0, r2
 800d6b6:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 800d6ba:	eb41 0303 	adc.w	r3, r1, r3
 800d6be:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800d6c2:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 800d6c6:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800d6ca:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 800d6ce:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800d6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d6:	f04f 0000 	mov.w	r0, #0
 800d6da:	f04f 0100 	mov.w	r1, #0
 800d6de:	0559      	lsls	r1, r3, #21
 800d6e0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d6e4:	0550      	lsls	r0, r2, #21
 800d6e6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ee:	1a14      	subs	r4, r2, r0
 800d6f0:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800d6f4:	eb63 0301 	sbc.w	r3, r3, r1
 800d6f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800d6fc:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800d700:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800d704:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = s3 >> 21;
 800d708:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d710:	f04f 0000 	mov.w	r0, #0
 800d714:	f04f 0100 	mov.w	r1, #0
 800d718:	0d50      	lsrs	r0, r2, #21
 800d71a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d71e:	1559      	asrs	r1, r3, #21
 800d720:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800d724:	e9c3 0100 	strd	r0, r1, [r3]
    s4 += carry3;
 800d728:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d72c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d730:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	1884      	adds	r4, r0, r2
 800d73a:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 800d73e:	eb41 0303 	adc.w	r3, r1, r3
 800d742:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800d746:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800d74a:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800d74e:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 800d752:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75a:	f04f 0000 	mov.w	r0, #0
 800d75e:	f04f 0100 	mov.w	r1, #0
 800d762:	0559      	lsls	r1, r3, #21
 800d764:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d768:	0550      	lsls	r0, r2, #21
 800d76a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800d76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d772:	1a14      	subs	r4, r2, r0
 800d774:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800d778:	eb63 0301 	sbc.w	r3, r3, r1
 800d77c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800d780:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800d784:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800d788:	e9c2 3400 	strd	r3, r4, [r2]
 800d78c:	e00c      	b.n	800d7a8 <sc_reduce+0x2e38>
 800d78e:	bf00      	nop
 800d790:	000a2c13 	.word	0x000a2c13
 800d794:	00072d18 	.word	0x00072d18
 800d798:	0009fb67 	.word	0x0009fb67
 800d79c:	fff0c653 	.word	0xfff0c653
 800d7a0:	000215d1 	.word	0x000215d1
 800d7a4:	fff59083 	.word	0xfff59083
    carry4 = s4 >> 21;
 800d7a8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b0:	f04f 0000 	mov.w	r0, #0
 800d7b4:	f04f 0100 	mov.w	r1, #0
 800d7b8:	0d50      	lsrs	r0, r2, #21
 800d7ba:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d7be:	1559      	asrs	r1, r3, #21
 800d7c0:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800d7c4:	e9c3 0100 	strd	r0, r1, [r3]
    s5 += carry4;
 800d7c8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800d7cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d7d0:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800d7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d8:	1884      	adds	r4, r0, r2
 800d7da:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 800d7de:	eb41 0303 	adc.w	r3, r1, r3
 800d7e2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800d7e6:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800d7ea:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800d7ee:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 800d7f2:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fa:	f04f 0000 	mov.w	r0, #0
 800d7fe:	f04f 0100 	mov.w	r1, #0
 800d802:	0559      	lsls	r1, r3, #21
 800d804:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d808:	0550      	lsls	r0, r2, #21
 800d80a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800d80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d812:	1a14      	subs	r4, r2, r0
 800d814:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 800d818:	eb63 0301 	sbc.w	r3, r3, r1
 800d81c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800d820:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800d824:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800d828:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = s5 >> 21;
 800d82c:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800d830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d834:	f04f 0000 	mov.w	r0, #0
 800d838:	f04f 0100 	mov.w	r1, #0
 800d83c:	0d50      	lsrs	r0, r2, #21
 800d83e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d842:	1559      	asrs	r1, r3, #21
 800d844:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800d848:	e9c3 0100 	strd	r0, r1, [r3]
    s6 += carry5;
 800d84c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800d850:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d854:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85c:	1884      	adds	r4, r0, r2
 800d85e:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800d862:	eb41 0303 	adc.w	r3, r1, r3
 800d866:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800d86a:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800d86e:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800d872:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 800d876:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800d87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87e:	f04f 0000 	mov.w	r0, #0
 800d882:	f04f 0100 	mov.w	r1, #0
 800d886:	0559      	lsls	r1, r3, #21
 800d888:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d88c:	0550      	lsls	r0, r2, #21
 800d88e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	1a14      	subs	r4, r2, r0
 800d898:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800d89c:	eb63 0301 	sbc.w	r3, r3, r1
 800d8a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800d8a4:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800d8a8:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800d8ac:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = s6 >> 21;
 800d8b0:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800d8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b8:	f04f 0000 	mov.w	r0, #0
 800d8bc:	f04f 0100 	mov.w	r1, #0
 800d8c0:	0d50      	lsrs	r0, r2, #21
 800d8c2:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d8c6:	1559      	asrs	r1, r3, #21
 800d8c8:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800d8cc:	e9c3 0100 	strd	r0, r1, [r3]
    s7 += carry6;
 800d8d0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800d8d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d8d8:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800d8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e0:	1884      	adds	r4, r0, r2
 800d8e2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800d8e6:	eb41 0303 	adc.w	r3, r1, r3
 800d8ea:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800d8ee:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800d8f2:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800d8f6:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 800d8fa:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800d8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d902:	f04f 0000 	mov.w	r0, #0
 800d906:	f04f 0100 	mov.w	r1, #0
 800d90a:	0559      	lsls	r1, r3, #21
 800d90c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d910:	0550      	lsls	r0, r2, #21
 800d912:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800d916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91a:	1a14      	subs	r4, r2, r0
 800d91c:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 800d920:	eb63 0301 	sbc.w	r3, r3, r1
 800d924:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800d928:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800d92c:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800d930:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = s7 >> 21;
 800d934:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800d938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93c:	f04f 0000 	mov.w	r0, #0
 800d940:	f04f 0100 	mov.w	r1, #0
 800d944:	0d50      	lsrs	r0, r2, #21
 800d946:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d94a:	1559      	asrs	r1, r3, #21
 800d94c:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800d950:	e9c3 0100 	strd	r0, r1, [r3]
    s8 += carry7;
 800d954:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800d958:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d95c:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800d960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d964:	1884      	adds	r4, r0, r2
 800d966:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800d96a:	eb41 0303 	adc.w	r3, r1, r3
 800d96e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800d972:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800d976:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800d97a:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 800d97e:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800d982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d986:	f04f 0000 	mov.w	r0, #0
 800d98a:	f04f 0100 	mov.w	r1, #0
 800d98e:	0559      	lsls	r1, r3, #21
 800d990:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800d994:	0550      	lsls	r0, r2, #21
 800d996:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99e:	1a14      	subs	r4, r2, r0
 800d9a0:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800d9a4:	eb63 0301 	sbc.w	r3, r3, r1
 800d9a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800d9ac:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800d9b0:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800d9b4:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = s8 >> 21;
 800d9b8:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800d9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c0:	f04f 0000 	mov.w	r0, #0
 800d9c4:	f04f 0100 	mov.w	r1, #0
 800d9c8:	0d50      	lsrs	r0, r2, #21
 800d9ca:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800d9ce:	1559      	asrs	r1, r3, #21
 800d9d0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800d9d4:	e9c3 0100 	strd	r0, r1, [r3]
    s9 += carry8;
 800d9d8:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800d9dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d9e0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	1884      	adds	r4, r0, r2
 800d9ea:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800d9ee:	eb41 0303 	adc.w	r3, r1, r3
 800d9f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d9f6:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800d9fa:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800d9fe:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 800da02:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800da06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0a:	f04f 0000 	mov.w	r0, #0
 800da0e:	f04f 0100 	mov.w	r1, #0
 800da12:	0559      	lsls	r1, r3, #21
 800da14:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800da18:	0550      	lsls	r0, r2, #21
 800da1a:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800da1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da22:	1a14      	subs	r4, r2, r0
 800da24:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800da28:	eb63 0301 	sbc.w	r3, r3, r1
 800da2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800da30:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800da34:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800da38:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = s9 >> 21;
 800da3c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800da40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da44:	f04f 0000 	mov.w	r0, #0
 800da48:	f04f 0100 	mov.w	r1, #0
 800da4c:	0d50      	lsrs	r0, r2, #21
 800da4e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800da52:	1559      	asrs	r1, r3, #21
 800da54:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800da58:	e9c3 0100 	strd	r0, r1, [r3]
    s10 += carry9;
 800da5c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800da60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da64:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6c:	1884      	adds	r4, r0, r2
 800da6e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800da72:	eb41 0303 	adc.w	r3, r1, r3
 800da76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800da7a:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800da7e:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800da82:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 800da86:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800da8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8e:	f04f 0000 	mov.w	r0, #0
 800da92:	f04f 0100 	mov.w	r1, #0
 800da96:	0559      	lsls	r1, r3, #21
 800da98:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800da9c:	0550      	lsls	r0, r2, #21
 800da9e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa6:	1a14      	subs	r4, r2, r0
 800daa8:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 800daac:	eb63 0301 	sbc.w	r3, r3, r1
 800dab0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800dab4:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800dab8:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800dabc:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = s10 >> 21;
 800dac0:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800dac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac8:	f04f 0000 	mov.w	r0, #0
 800dacc:	f04f 0100 	mov.w	r1, #0
 800dad0:	0d50      	lsrs	r0, r2, #21
 800dad2:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800dad6:	1559      	asrs	r1, r3, #21
 800dad8:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800dadc:	e9c3 0100 	strd	r0, r1, [r3]
    s11 += carry10;
 800dae0:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800dae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dae8:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	1884      	adds	r4, r0, r2
 800daf2:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 800daf6:	eb41 0303 	adc.w	r3, r1, r3
 800dafa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800dafe:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800db02:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800db06:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 800db0a:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800db0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db12:	f04f 0000 	mov.w	r0, #0
 800db16:	f04f 0100 	mov.w	r1, #0
 800db1a:	0559      	lsls	r1, r3, #21
 800db1c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800db20:	0550      	lsls	r0, r2, #21
 800db22:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800db26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2a:	1a14      	subs	r4, r2, r0
 800db2c:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 800db30:	eb63 0301 	sbc.w	r3, r3, r1
 800db34:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800db38:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800db3c:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800db40:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = s11 >> 21;
 800db44:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800db48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4c:	f04f 0000 	mov.w	r0, #0
 800db50:	f04f 0100 	mov.w	r1, #0
 800db54:	0d50      	lsrs	r0, r2, #21
 800db56:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800db5a:	1559      	asrs	r1, r3, #21
 800db5c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800db60:	e9c3 0100 	strd	r0, r1, [r3]
    s12 += carry11;
 800db64:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 800db68:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db6c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db74:	1884      	adds	r4, r0, r2
 800db76:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800db7a:	eb41 0303 	adc.w	r3, r1, r3
 800db7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800db82:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800db86:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 800db8a:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 800db8e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 800db92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db96:	f04f 0000 	mov.w	r0, #0
 800db9a:	f04f 0100 	mov.w	r1, #0
 800db9e:	0559      	lsls	r1, r3, #21
 800dba0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800dba4:	0550      	lsls	r0, r2, #21
 800dba6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800dbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbae:	1a14      	subs	r4, r2, r0
 800dbb0:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800dbb4:	eb63 0301 	sbc.w	r3, r3, r1
 800dbb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800dbbc:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800dbc0:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800dbc4:	e9c2 3400 	strd	r3, r4, [r2]
    s0 += s12 * 666643;
 800dbc8:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800dbcc:	4bed      	ldr	r3, [pc, #948]	; (800df84 <sc_reduce+0x3614>)
 800dbce:	fb03 f102 	mul.w	r1, r3, r2
 800dbd2:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	fb03 f302 	mul.w	r3, r3, r2
 800dbdc:	18cc      	adds	r4, r1, r3
 800dbde:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dbe2:	4be8      	ldr	r3, [pc, #928]	; (800df84 <sc_reduce+0x3614>)
 800dbe4:	fba2 0103 	umull	r0, r1, r2, r3
 800dbe8:	1863      	adds	r3, r4, r1
 800dbea:	4619      	mov	r1, r3
 800dbec:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800dbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf4:	1814      	adds	r4, r2, r0
 800dbf6:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800dbfa:	414b      	adcs	r3, r1
 800dbfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dc00:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800dc04:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800dc08:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 800dc0c:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800dc10:	4bdd      	ldr	r3, [pc, #884]	; (800df88 <sc_reduce+0x3618>)
 800dc12:	fb03 f102 	mul.w	r1, r3, r2
 800dc16:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	fb03 f302 	mul.w	r3, r3, r2
 800dc20:	18cc      	adds	r4, r1, r3
 800dc22:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dc26:	4bd8      	ldr	r3, [pc, #864]	; (800df88 <sc_reduce+0x3618>)
 800dc28:	fba2 0103 	umull	r0, r1, r2, r3
 800dc2c:	1863      	adds	r3, r4, r1
 800dc2e:	4619      	mov	r1, r3
 800dc30:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800dc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc38:	1814      	adds	r4, r2, r0
 800dc3a:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800dc3e:	414b      	adcs	r3, r1
 800dc40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dc44:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800dc48:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800dc4c:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 800dc50:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800dc54:	4bcd      	ldr	r3, [pc, #820]	; (800df8c <sc_reduce+0x361c>)
 800dc56:	fb03 f102 	mul.w	r1, r3, r2
 800dc5a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dc5e:	2300      	movs	r3, #0
 800dc60:	fb03 f302 	mul.w	r3, r3, r2
 800dc64:	18cc      	adds	r4, r1, r3
 800dc66:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dc6a:	4bc8      	ldr	r3, [pc, #800]	; (800df8c <sc_reduce+0x361c>)
 800dc6c:	fba2 0103 	umull	r0, r1, r2, r3
 800dc70:	1863      	adds	r3, r4, r1
 800dc72:	4619      	mov	r1, r3
 800dc74:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800dc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7c:	1814      	adds	r4, r2, r0
 800dc7e:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800dc82:	414b      	adcs	r3, r1
 800dc84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800dc88:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800dc8c:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800dc90:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 800dc94:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800dc98:	4bbd      	ldr	r3, [pc, #756]	; (800df90 <sc_reduce+0x3620>)
 800dc9a:	fb03 f102 	mul.w	r1, r3, r2
 800dc9e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dca2:	f04f 33ff 	mov.w	r3, #4294967295
 800dca6:	fb03 f302 	mul.w	r3, r3, r2
 800dcaa:	18cc      	adds	r4, r1, r3
 800dcac:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dcb0:	4bb7      	ldr	r3, [pc, #732]	; (800df90 <sc_reduce+0x3620>)
 800dcb2:	fba2 0103 	umull	r0, r1, r2, r3
 800dcb6:	1863      	adds	r3, r4, r1
 800dcb8:	4619      	mov	r1, r3
 800dcba:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc2:	1814      	adds	r4, r2, r0
 800dcc4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800dcc8:	414b      	adcs	r3, r1
 800dcca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dcce:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800dcd2:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800dcd6:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 800dcda:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800dcde:	4bad      	ldr	r3, [pc, #692]	; (800df94 <sc_reduce+0x3624>)
 800dce0:	fb03 f102 	mul.w	r1, r3, r2
 800dce4:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dce8:	2300      	movs	r3, #0
 800dcea:	fb03 f302 	mul.w	r3, r3, r2
 800dcee:	18cc      	adds	r4, r1, r3
 800dcf0:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dcf4:	4ba7      	ldr	r3, [pc, #668]	; (800df94 <sc_reduce+0x3624>)
 800dcf6:	fba2 0103 	umull	r0, r1, r2, r3
 800dcfa:	1863      	adds	r3, r4, r1
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	1814      	adds	r4, r2, r0
 800dd08:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800dd0c:	414b      	adcs	r3, r1
 800dd0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dd12:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800dd16:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800dd1a:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 800dd1e:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 800dd22:	4b9d      	ldr	r3, [pc, #628]	; (800df98 <sc_reduce+0x3628>)
 800dd24:	fb03 f102 	mul.w	r1, r3, r2
 800dd28:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dd2c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd30:	fb03 f302 	mul.w	r3, r3, r2
 800dd34:	18cc      	adds	r4, r1, r3
 800dd36:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 800dd3a:	4b97      	ldr	r3, [pc, #604]	; (800df98 <sc_reduce+0x3628>)
 800dd3c:	fba2 0103 	umull	r0, r1, r2, r3
 800dd40:	1863      	adds	r3, r4, r1
 800dd42:	4619      	mov	r1, r3
 800dd44:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4c:	1814      	adds	r4, r2, r0
 800dd4e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800dd52:	414b      	adcs	r3, r1
 800dd54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dd58:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800dd5c:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800dd60:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 800dd64:	f04f 0200 	mov.w	r2, #0
 800dd68:	f04f 0300 	mov.w	r3, #0
 800dd6c:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 800dd70:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = s0 >> 21;
 800dd74:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	f04f 0000 	mov.w	r0, #0
 800dd80:	f04f 0100 	mov.w	r1, #0
 800dd84:	0d50      	lsrs	r0, r2, #21
 800dd86:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800dd8a:	1559      	asrs	r1, r3, #21
 800dd8c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800dd90:	e9c3 0100 	strd	r0, r1, [r3]
    s1 += carry0;
 800dd94:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800dd98:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dd9c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800dda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda4:	1884      	adds	r4, r0, r2
 800dda6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800ddaa:	eb41 0303 	adc.w	r3, r1, r3
 800ddae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ddb2:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800ddb6:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800ddba:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 800ddbe:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc6:	f04f 0000 	mov.w	r0, #0
 800ddca:	f04f 0100 	mov.w	r1, #0
 800ddce:	0559      	lsls	r1, r3, #21
 800ddd0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800ddd4:	0550      	lsls	r0, r2, #21
 800ddd6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800ddda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddde:	1a14      	subs	r4, r2, r0
 800dde0:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800dde4:	eb63 0301 	sbc.w	r3, r3, r1
 800dde8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ddec:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800ddf0:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800ddf4:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = s1 >> 21;
 800ddf8:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800ddfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de00:	f04f 0000 	mov.w	r0, #0
 800de04:	f04f 0100 	mov.w	r1, #0
 800de08:	0d50      	lsrs	r0, r2, #21
 800de0a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800de0e:	1559      	asrs	r1, r3, #21
 800de10:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800de14:	e9c3 0100 	strd	r0, r1, [r3]
    s2 += carry1;
 800de18:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800de1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de20:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800de24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de28:	1884      	adds	r4, r0, r2
 800de2a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800de2e:	eb41 0303 	adc.w	r3, r1, r3
 800de32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800de36:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800de3a:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800de3e:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 800de42:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 800de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4a:	f04f 0000 	mov.w	r0, #0
 800de4e:	f04f 0100 	mov.w	r1, #0
 800de52:	0559      	lsls	r1, r3, #21
 800de54:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800de58:	0550      	lsls	r0, r2, #21
 800de5a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de62:	1a14      	subs	r4, r2, r0
 800de64:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800de68:	eb63 0301 	sbc.w	r3, r3, r1
 800de6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800de70:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800de74:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800de78:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = s2 >> 21;
 800de7c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800de80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de84:	f04f 0000 	mov.w	r0, #0
 800de88:	f04f 0100 	mov.w	r1, #0
 800de8c:	0d50      	lsrs	r0, r2, #21
 800de8e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800de92:	1559      	asrs	r1, r3, #21
 800de94:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800de98:	e9c3 0100 	strd	r0, r1, [r3]
    s3 += carry2;
 800de9c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800dea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dea4:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800dea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deac:	1884      	adds	r4, r0, r2
 800deae:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800deb2:	eb41 0303 	adc.w	r3, r1, r3
 800deb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800deba:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800debe:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800dec2:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 800dec6:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	f04f 0000 	mov.w	r0, #0
 800ded2:	f04f 0100 	mov.w	r1, #0
 800ded6:	0559      	lsls	r1, r3, #21
 800ded8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800dedc:	0550      	lsls	r0, r2, #21
 800dede:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800dee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee6:	1a14      	subs	r4, r2, r0
 800dee8:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800deec:	eb63 0301 	sbc.w	r3, r3, r1
 800def0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800def4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800def8:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800defc:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = s3 >> 21;
 800df00:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800df04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df08:	f04f 0000 	mov.w	r0, #0
 800df0c:	f04f 0100 	mov.w	r1, #0
 800df10:	0d50      	lsrs	r0, r2, #21
 800df12:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800df16:	1559      	asrs	r1, r3, #21
 800df18:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800df1c:	e9c3 0100 	strd	r0, r1, [r3]
    s4 += carry3;
 800df20:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800df24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df28:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	1884      	adds	r4, r0, r2
 800df32:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 800df36:	eb41 0303 	adc.w	r3, r1, r3
 800df3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df3e:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800df42:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800df46:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 800df4a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800df4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df52:	f04f 0000 	mov.w	r0, #0
 800df56:	f04f 0100 	mov.w	r1, #0
 800df5a:	0559      	lsls	r1, r3, #21
 800df5c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800df60:	0550      	lsls	r0, r2, #21
 800df62:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800df66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6a:	1a14      	subs	r4, r2, r0
 800df6c:	67bc      	str	r4, [r7, #120]	; 0x78
 800df6e:	eb63 0301 	sbc.w	r3, r3, r1
 800df72:	67fb      	str	r3, [r7, #124]	; 0x7c
 800df74:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800df78:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800df7c:	e9c2 3400 	strd	r3, r4, [r2]
 800df80:	e00c      	b.n	800df9c <sc_reduce+0x362c>
 800df82:	bf00      	nop
 800df84:	000a2c13 	.word	0x000a2c13
 800df88:	00072d18 	.word	0x00072d18
 800df8c:	0009fb67 	.word	0x0009fb67
 800df90:	fff0c653 	.word	0xfff0c653
 800df94:	000215d1 	.word	0x000215d1
 800df98:	fff59083 	.word	0xfff59083
    carry4 = s4 >> 21;
 800df9c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800dfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa4:	f04f 0000 	mov.w	r0, #0
 800dfa8:	f04f 0100 	mov.w	r1, #0
 800dfac:	0d50      	lsrs	r0, r2, #21
 800dfae:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800dfb2:	1559      	asrs	r1, r3, #21
 800dfb4:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800dfb8:	e9c3 0100 	strd	r0, r1, [r3]
    s5 += carry4;
 800dfbc:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800dfc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfc4:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800dfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfcc:	1884      	adds	r4, r0, r2
 800dfce:	673c      	str	r4, [r7, #112]	; 0x70
 800dfd0:	eb41 0303 	adc.w	r3, r1, r3
 800dfd4:	677b      	str	r3, [r7, #116]	; 0x74
 800dfd6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800dfda:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800dfde:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 800dfe2:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfea:	f04f 0000 	mov.w	r0, #0
 800dfee:	f04f 0100 	mov.w	r1, #0
 800dff2:	0559      	lsls	r1, r3, #21
 800dff4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800dff8:	0550      	lsls	r0, r2, #21
 800dffa:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800dffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e002:	1a14      	subs	r4, r2, r0
 800e004:	66bc      	str	r4, [r7, #104]	; 0x68
 800e006:	eb63 0301 	sbc.w	r3, r3, r1
 800e00a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e00c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800e010:	f607 0208 	addw	r2, r7, #2056	; 0x808
 800e014:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = s5 >> 21;
 800e018:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e020:	f04f 0000 	mov.w	r0, #0
 800e024:	f04f 0100 	mov.w	r1, #0
 800e028:	0d50      	lsrs	r0, r2, #21
 800e02a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800e02e:	1559      	asrs	r1, r3, #21
 800e030:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800e034:	e9c3 0100 	strd	r0, r1, [r3]
    s6 += carry5;
 800e038:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800e03c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e040:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800e044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e048:	1884      	adds	r4, r0, r2
 800e04a:	663c      	str	r4, [r7, #96]	; 0x60
 800e04c:	eb41 0303 	adc.w	r3, r1, r3
 800e050:	667b      	str	r3, [r7, #100]	; 0x64
 800e052:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800e056:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800e05a:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 800e05e:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f04f 0000 	mov.w	r0, #0
 800e06a:	f04f 0100 	mov.w	r1, #0
 800e06e:	0559      	lsls	r1, r3, #21
 800e070:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800e074:	0550      	lsls	r0, r2, #21
 800e076:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07e:	1a14      	subs	r4, r2, r0
 800e080:	65bc      	str	r4, [r7, #88]	; 0x58
 800e082:	eb63 0301 	sbc.w	r3, r3, r1
 800e086:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e088:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800e08c:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 800e090:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = s6 >> 21;
 800e094:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	f04f 0000 	mov.w	r0, #0
 800e0a0:	f04f 0100 	mov.w	r1, #0
 800e0a4:	0d50      	lsrs	r0, r2, #21
 800e0a6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800e0aa:	1559      	asrs	r1, r3, #21
 800e0ac:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800e0b0:	e9c3 0100 	strd	r0, r1, [r3]
    s7 += carry6;
 800e0b4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e0b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e0bc:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800e0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c4:	1884      	adds	r4, r0, r2
 800e0c6:	653c      	str	r4, [r7, #80]	; 0x50
 800e0c8:	eb41 0303 	adc.w	r3, r1, r3
 800e0cc:	657b      	str	r3, [r7, #84]	; 0x54
 800e0ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800e0d2:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800e0d6:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 800e0da:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 800e0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e2:	f04f 0000 	mov.w	r0, #0
 800e0e6:	f04f 0100 	mov.w	r1, #0
 800e0ea:	0559      	lsls	r1, r3, #21
 800e0ec:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800e0f0:	0550      	lsls	r0, r2, #21
 800e0f2:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800e0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fa:	1a14      	subs	r4, r2, r0
 800e0fc:	64bc      	str	r4, [r7, #72]	; 0x48
 800e0fe:	eb63 0301 	sbc.w	r3, r3, r1
 800e102:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e104:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800e108:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 800e10c:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = s7 >> 21;
 800e110:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e118:	f04f 0000 	mov.w	r0, #0
 800e11c:	f04f 0100 	mov.w	r1, #0
 800e120:	0d50      	lsrs	r0, r2, #21
 800e122:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800e126:	1559      	asrs	r1, r3, #21
 800e128:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800e12c:	e9c3 0100 	strd	r0, r1, [r3]
    s8 += carry7;
 800e130:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800e134:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e138:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800e13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e140:	1884      	adds	r4, r0, r2
 800e142:	643c      	str	r4, [r7, #64]	; 0x40
 800e144:	eb41 0303 	adc.w	r3, r1, r3
 800e148:	647b      	str	r3, [r7, #68]	; 0x44
 800e14a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800e14e:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800e152:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 800e156:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 800e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15e:	f04f 0000 	mov.w	r0, #0
 800e162:	f04f 0100 	mov.w	r1, #0
 800e166:	0559      	lsls	r1, r3, #21
 800e168:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800e16c:	0550      	lsls	r0, r2, #21
 800e16e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	1a14      	subs	r4, r2, r0
 800e178:	63bc      	str	r4, [r7, #56]	; 0x38
 800e17a:	eb63 0301 	sbc.w	r3, r3, r1
 800e17e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e180:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800e184:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 800e188:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = s8 >> 21;
 800e18c:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	f04f 0000 	mov.w	r0, #0
 800e198:	f04f 0100 	mov.w	r1, #0
 800e19c:	0d50      	lsrs	r0, r2, #21
 800e19e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800e1a2:	1559      	asrs	r1, r3, #21
 800e1a4:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800e1a8:	e9c3 0100 	strd	r0, r1, [r3]
    s9 += carry8;
 800e1ac:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e1b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1b4:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800e1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1bc:	1884      	adds	r4, r0, r2
 800e1be:	633c      	str	r4, [r7, #48]	; 0x30
 800e1c0:	eb41 0303 	adc.w	r3, r1, r3
 800e1c4:	637b      	str	r3, [r7, #52]	; 0x34
 800e1c6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800e1ca:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800e1ce:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 800e1d2:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800e1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1da:	f04f 0000 	mov.w	r0, #0
 800e1de:	f04f 0100 	mov.w	r1, #0
 800e1e2:	0559      	lsls	r1, r3, #21
 800e1e4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 800e1e8:	0550      	lsls	r0, r2, #21
 800e1ea:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800e1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f2:	1a14      	subs	r4, r2, r0
 800e1f4:	62bc      	str	r4, [r7, #40]	; 0x28
 800e1f6:	eb63 0301 	sbc.w	r3, r3, r1
 800e1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1fc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e200:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 800e204:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = s9 >> 21;
 800e208:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e20c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e210:	f04f 0200 	mov.w	r2, #0
 800e214:	f04f 0300 	mov.w	r3, #0
 800e218:	0d42      	lsrs	r2, r0, #21
 800e21a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800e21e:	154b      	asrs	r3, r1, #21
 800e220:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 800e224:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 800e228:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800e22c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e230:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	1884      	adds	r4, r0, r2
 800e23a:	623c      	str	r4, [r7, #32]
 800e23c:	eb41 0303 	adc.w	r3, r1, r3
 800e240:	627b      	str	r3, [r7, #36]	; 0x24
 800e242:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e246:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800e24a:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 800e24e:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800e252:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e256:	f04f 0200 	mov.w	r2, #0
 800e25a:	f04f 0300 	mov.w	r3, #0
 800e25e:	054b      	lsls	r3, r1, #21
 800e260:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 800e264:	0542      	lsls	r2, r0, #21
 800e266:	f507 61fc 	add.w	r1, r7, #2016	; 0x7e0
 800e26a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e26e:	1a84      	subs	r4, r0, r2
 800e270:	61bc      	str	r4, [r7, #24]
 800e272:	eb61 0303 	sbc.w	r3, r1, r3
 800e276:	61fb      	str	r3, [r7, #28]
 800e278:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e27c:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800e280:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = s10 >> 21;
 800e284:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800e288:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e28c:	f04f 0200 	mov.w	r2, #0
 800e290:	f04f 0300 	mov.w	r3, #0
 800e294:	0d42      	lsrs	r2, r0, #21
 800e296:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800e29a:	154b      	asrs	r3, r1, #21
 800e29c:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 800e2a0:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 800e2a4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e2a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2ac:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800e2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b4:	1884      	adds	r4, r0, r2
 800e2b6:	613c      	str	r4, [r7, #16]
 800e2b8:	eb41 0303 	adc.w	r3, r1, r3
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e2c2:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 800e2c6:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 800e2ca:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 800e2ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2d2:	f04f 0200 	mov.w	r2, #0
 800e2d6:	f04f 0300 	mov.w	r3, #0
 800e2da:	054b      	lsls	r3, r1, #21
 800e2dc:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 800e2e0:	0542      	lsls	r2, r0, #21
 800e2e2:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 800e2e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2ea:	1a84      	subs	r4, r0, r2
 800e2ec:	60bc      	str	r4, [r7, #8]
 800e2ee:	eb61 0303 	sbc.w	r3, r1, r3
 800e2f2:	60fb      	str	r3, [r7, #12]
 800e2f4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e2f8:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800e2fc:	e9c2 3400 	strd	r3, r4, [r2]

    s[0] = (unsigned char) (s0 >> 0);
 800e300:	f897 2828 	ldrb.w	r2, [r7, #2088]	; 0x828
 800e304:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	701a      	strb	r2, [r3, #0]
    s[1] = (unsigned char) (s0 >> 8);
 800e30c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800e310:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e314:	f04f 0200 	mov.w	r2, #0
 800e318:	f04f 0300 	mov.w	r3, #0
 800e31c:	0a02      	lsrs	r2, r0, #8
 800e31e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e322:	120b      	asrs	r3, r1, #8
 800e324:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e328:	6809      	ldr	r1, [r1, #0]
 800e32a:	3101      	adds	r1, #1
 800e32c:	b2d3      	uxtb	r3, r2
 800e32e:	700b      	strb	r3, [r1, #0]
    s[2] = (unsigned char) ((s0 >> 16) | (s1 << 5));
 800e330:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800e334:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e338:	f04f 0200 	mov.w	r2, #0
 800e33c:	f04f 0300 	mov.w	r3, #0
 800e340:	0c02      	lsrs	r2, r0, #16
 800e342:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e346:	140b      	asrs	r3, r1, #16
 800e348:	b254      	sxtb	r4, r2
 800e34a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e34e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e352:	f04f 0200 	mov.w	r2, #0
 800e356:	f04f 0300 	mov.w	r3, #0
 800e35a:	014b      	lsls	r3, r1, #5
 800e35c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e360:	0142      	lsls	r2, r0, #5
 800e362:	b253      	sxtb	r3, r2
 800e364:	4323      	orrs	r3, r4
 800e366:	b25a      	sxtb	r2, r3
 800e368:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	3302      	adds	r3, #2
 800e370:	b2d2      	uxtb	r2, r2
 800e372:	701a      	strb	r2, [r3, #0]
    s[3] = (unsigned char) (s1 >> 3);
 800e374:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e378:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e37c:	f04f 0200 	mov.w	r2, #0
 800e380:	f04f 0300 	mov.w	r3, #0
 800e384:	08c2      	lsrs	r2, r0, #3
 800e386:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 800e38a:	10cb      	asrs	r3, r1, #3
 800e38c:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e390:	6809      	ldr	r1, [r1, #0]
 800e392:	3103      	adds	r1, #3
 800e394:	b2d3      	uxtb	r3, r2
 800e396:	700b      	strb	r3, [r1, #0]
    s[4] = (unsigned char) (s1 >> 11);
 800e398:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e39c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e3a0:	f04f 0200 	mov.w	r2, #0
 800e3a4:	f04f 0300 	mov.w	r3, #0
 800e3a8:	0ac2      	lsrs	r2, r0, #11
 800e3aa:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 800e3ae:	12cb      	asrs	r3, r1, #11
 800e3b0:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e3b4:	6809      	ldr	r1, [r1, #0]
 800e3b6:	3104      	adds	r1, #4
 800e3b8:	b2d3      	uxtb	r3, r2
 800e3ba:	700b      	strb	r3, [r1, #0]
    s[5] = (unsigned char) ((s1 >> 19) | (s2 << 2));
 800e3bc:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e3c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e3c4:	f04f 0200 	mov.w	r2, #0
 800e3c8:	f04f 0300 	mov.w	r3, #0
 800e3cc:	0cc2      	lsrs	r2, r0, #19
 800e3ce:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800e3d2:	14cb      	asrs	r3, r1, #19
 800e3d4:	b254      	sxtb	r4, r2
 800e3d6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800e3da:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e3de:	f04f 0200 	mov.w	r2, #0
 800e3e2:	f04f 0300 	mov.w	r3, #0
 800e3e6:	008b      	lsls	r3, r1, #2
 800e3e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e3ec:	0082      	lsls	r2, r0, #2
 800e3ee:	b253      	sxtb	r3, r2
 800e3f0:	4323      	orrs	r3, r4
 800e3f2:	b25a      	sxtb	r2, r3
 800e3f4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	3305      	adds	r3, #5
 800e3fc:	b2d2      	uxtb	r2, r2
 800e3fe:	701a      	strb	r2, [r3, #0]
    s[6] = (unsigned char) (s2 >> 6);
 800e400:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800e404:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e408:	f04f 0200 	mov.w	r2, #0
 800e40c:	f04f 0300 	mov.w	r3, #0
 800e410:	0982      	lsrs	r2, r0, #6
 800e412:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 800e416:	118b      	asrs	r3, r1, #6
 800e418:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e41c:	6809      	ldr	r1, [r1, #0]
 800e41e:	3106      	adds	r1, #6
 800e420:	b2d3      	uxtb	r3, r2
 800e422:	700b      	strb	r3, [r1, #0]
    s[7] = (unsigned char) ((s2 >> 14) | (s3 << 7));
 800e424:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800e428:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e42c:	f04f 0200 	mov.w	r2, #0
 800e430:	f04f 0300 	mov.w	r3, #0
 800e434:	0b82      	lsrs	r2, r0, #14
 800e436:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800e43a:	138b      	asrs	r3, r1, #14
 800e43c:	b254      	sxtb	r4, r2
 800e43e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e442:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e446:	f04f 0200 	mov.w	r2, #0
 800e44a:	f04f 0300 	mov.w	r3, #0
 800e44e:	01cb      	lsls	r3, r1, #7
 800e450:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800e454:	01c2      	lsls	r2, r0, #7
 800e456:	b253      	sxtb	r3, r2
 800e458:	4323      	orrs	r3, r4
 800e45a:	b25a      	sxtb	r2, r3
 800e45c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	3307      	adds	r3, #7
 800e464:	b2d2      	uxtb	r2, r2
 800e466:	701a      	strb	r2, [r3, #0]
    s[8] = (unsigned char) (s3 >> 1);
 800e468:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e46c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e470:	f04f 0200 	mov.w	r2, #0
 800e474:	f04f 0300 	mov.w	r3, #0
 800e478:	0842      	lsrs	r2, r0, #1
 800e47a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e47e:	104b      	asrs	r3, r1, #1
 800e480:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e484:	6809      	ldr	r1, [r1, #0]
 800e486:	3108      	adds	r1, #8
 800e488:	b2d3      	uxtb	r3, r2
 800e48a:	700b      	strb	r3, [r1, #0]
    s[9] = (unsigned char) (s3 >> 9);
 800e48c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e490:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e494:	f04f 0200 	mov.w	r2, #0
 800e498:	f04f 0300 	mov.w	r3, #0
 800e49c:	0a42      	lsrs	r2, r0, #9
 800e49e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e4a2:	124b      	asrs	r3, r1, #9
 800e4a4:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e4a8:	6809      	ldr	r1, [r1, #0]
 800e4aa:	3109      	adds	r1, #9
 800e4ac:	b2d3      	uxtb	r3, r2
 800e4ae:	700b      	strb	r3, [r1, #0]
    s[10] = (unsigned char) ((s3 >> 17) | (s4 << 4));
 800e4b0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e4b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e4b8:	f04f 0200 	mov.w	r2, #0
 800e4bc:	f04f 0300 	mov.w	r3, #0
 800e4c0:	0c42      	lsrs	r2, r0, #17
 800e4c2:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 800e4c6:	144b      	asrs	r3, r1, #17
 800e4c8:	b254      	sxtb	r4, r2
 800e4ca:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800e4ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e4d2:	f04f 0200 	mov.w	r2, #0
 800e4d6:	f04f 0300 	mov.w	r3, #0
 800e4da:	010b      	lsls	r3, r1, #4
 800e4dc:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800e4e0:	0102      	lsls	r2, r0, #4
 800e4e2:	b253      	sxtb	r3, r2
 800e4e4:	4323      	orrs	r3, r4
 800e4e6:	b25a      	sxtb	r2, r3
 800e4e8:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	330a      	adds	r3, #10
 800e4f0:	b2d2      	uxtb	r2, r2
 800e4f2:	701a      	strb	r2, [r3, #0]
    s[11] = (unsigned char) (s4 >> 4);
 800e4f4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800e4f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e4fc:	f04f 0200 	mov.w	r2, #0
 800e500:	f04f 0300 	mov.w	r3, #0
 800e504:	0902      	lsrs	r2, r0, #4
 800e506:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800e50a:	110b      	asrs	r3, r1, #4
 800e50c:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e510:	6809      	ldr	r1, [r1, #0]
 800e512:	310b      	adds	r1, #11
 800e514:	b2d3      	uxtb	r3, r2
 800e516:	700b      	strb	r3, [r1, #0]
    s[12] = (unsigned char) (s4 >> 12);
 800e518:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800e51c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e520:	f04f 0200 	mov.w	r2, #0
 800e524:	f04f 0300 	mov.w	r3, #0
 800e528:	0b02      	lsrs	r2, r0, #12
 800e52a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e52e:	130b      	asrs	r3, r1, #12
 800e530:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e534:	6809      	ldr	r1, [r1, #0]
 800e536:	310c      	adds	r1, #12
 800e538:	b2d3      	uxtb	r3, r2
 800e53a:	700b      	strb	r3, [r1, #0]
    s[13] = (unsigned char) ((s4 >> 20) | (s5 << 1));
 800e53c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800e540:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e544:	f04f 0200 	mov.w	r2, #0
 800e548:	f04f 0300 	mov.w	r3, #0
 800e54c:	0d02      	lsrs	r2, r0, #20
 800e54e:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800e552:	150b      	asrs	r3, r1, #20
 800e554:	b251      	sxtb	r1, r2
 800e556:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	1890      	adds	r0, r2, r2
 800e560:	6038      	str	r0, [r7, #0]
 800e562:	415b      	adcs	r3, r3
 800e564:	607b      	str	r3, [r7, #4]
 800e566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e56a:	b253      	sxtb	r3, r2
 800e56c:	430b      	orrs	r3, r1
 800e56e:	b25a      	sxtb	r2, r3
 800e570:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	330d      	adds	r3, #13
 800e578:	b2d2      	uxtb	r2, r2
 800e57a:	701a      	strb	r2, [r3, #0]
    s[14] = (unsigned char) (s5 >> 7);
 800e57c:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e580:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e584:	f04f 0200 	mov.w	r2, #0
 800e588:	f04f 0300 	mov.w	r3, #0
 800e58c:	09c2      	lsrs	r2, r0, #7
 800e58e:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 800e592:	11cb      	asrs	r3, r1, #7
 800e594:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e598:	6809      	ldr	r1, [r1, #0]
 800e59a:	310e      	adds	r1, #14
 800e59c:	b2d3      	uxtb	r3, r2
 800e59e:	700b      	strb	r3, [r1, #0]
    s[15] = (unsigned char) ((s5 >> 15) | (s6 << 6));
 800e5a0:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e5a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5a8:	f04f 0200 	mov.w	r2, #0
 800e5ac:	f04f 0300 	mov.w	r3, #0
 800e5b0:	0bc2      	lsrs	r2, r0, #15
 800e5b2:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800e5b6:	13cb      	asrs	r3, r1, #15
 800e5b8:	b254      	sxtb	r4, r2
 800e5ba:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800e5be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5c2:	f04f 0200 	mov.w	r2, #0
 800e5c6:	f04f 0300 	mov.w	r3, #0
 800e5ca:	018b      	lsls	r3, r1, #6
 800e5cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e5d0:	0182      	lsls	r2, r0, #6
 800e5d2:	b253      	sxtb	r3, r2
 800e5d4:	4323      	orrs	r3, r4
 800e5d6:	b25a      	sxtb	r2, r3
 800e5d8:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	330f      	adds	r3, #15
 800e5e0:	b2d2      	uxtb	r2, r2
 800e5e2:	701a      	strb	r2, [r3, #0]
    s[16] = (unsigned char) (s6 >> 2);
 800e5e4:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800e5e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5ec:	f04f 0200 	mov.w	r2, #0
 800e5f0:	f04f 0300 	mov.w	r3, #0
 800e5f4:	0882      	lsrs	r2, r0, #2
 800e5f6:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 800e5fa:	108b      	asrs	r3, r1, #2
 800e5fc:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e600:	6809      	ldr	r1, [r1, #0]
 800e602:	3110      	adds	r1, #16
 800e604:	b2d3      	uxtb	r3, r2
 800e606:	700b      	strb	r3, [r1, #0]
    s[17] = (unsigned char) (s6 >> 10);
 800e608:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800e60c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e610:	f04f 0200 	mov.w	r2, #0
 800e614:	f04f 0300 	mov.w	r3, #0
 800e618:	0a82      	lsrs	r2, r0, #10
 800e61a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800e61e:	128b      	asrs	r3, r1, #10
 800e620:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e624:	6809      	ldr	r1, [r1, #0]
 800e626:	3111      	adds	r1, #17
 800e628:	b2d3      	uxtb	r3, r2
 800e62a:	700b      	strb	r3, [r1, #0]
    s[18] = (unsigned char) ((s6 >> 18) | (s7 << 3));
 800e62c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 800e630:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e634:	f04f 0200 	mov.w	r2, #0
 800e638:	f04f 0300 	mov.w	r3, #0
 800e63c:	0c82      	lsrs	r2, r0, #18
 800e63e:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 800e642:	148b      	asrs	r3, r1, #18
 800e644:	b254      	sxtb	r4, r2
 800e646:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e64a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e64e:	f04f 0200 	mov.w	r2, #0
 800e652:	f04f 0300 	mov.w	r3, #0
 800e656:	00cb      	lsls	r3, r1, #3
 800e658:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800e65c:	00c2      	lsls	r2, r0, #3
 800e65e:	b253      	sxtb	r3, r2
 800e660:	4323      	orrs	r3, r4
 800e662:	b25a      	sxtb	r2, r3
 800e664:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	3312      	adds	r3, #18
 800e66c:	b2d2      	uxtb	r2, r2
 800e66e:	701a      	strb	r2, [r3, #0]
    s[19] = (unsigned char) (s7 >> 5);
 800e670:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e674:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e678:	f04f 0200 	mov.w	r2, #0
 800e67c:	f04f 0300 	mov.w	r3, #0
 800e680:	0942      	lsrs	r2, r0, #5
 800e682:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 800e686:	114b      	asrs	r3, r1, #5
 800e688:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e68c:	6809      	ldr	r1, [r1, #0]
 800e68e:	3113      	adds	r1, #19
 800e690:	b2d3      	uxtb	r3, r2
 800e692:	700b      	strb	r3, [r1, #0]
    s[20] = (unsigned char) (s7 >> 13);
 800e694:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e698:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e69c:	f04f 0200 	mov.w	r2, #0
 800e6a0:	f04f 0300 	mov.w	r3, #0
 800e6a4:	0b42      	lsrs	r2, r0, #13
 800e6a6:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800e6aa:	134b      	asrs	r3, r1, #13
 800e6ac:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e6b0:	6809      	ldr	r1, [r1, #0]
 800e6b2:	3114      	adds	r1, #20
 800e6b4:	b2d3      	uxtb	r3, r2
 800e6b6:	700b      	strb	r3, [r1, #0]
    s[21] = (unsigned char) (s8 >> 0);
 800e6b8:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	3315      	adds	r3, #21
 800e6c0:	f897 27e8 	ldrb.w	r2, [r7, #2024]	; 0x7e8
 800e6c4:	701a      	strb	r2, [r3, #0]
    s[22] = (unsigned char) (s8 >> 8);
 800e6c6:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800e6ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e6ce:	f04f 0200 	mov.w	r2, #0
 800e6d2:	f04f 0300 	mov.w	r3, #0
 800e6d6:	0a02      	lsrs	r2, r0, #8
 800e6d8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e6dc:	120b      	asrs	r3, r1, #8
 800e6de:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e6e2:	6809      	ldr	r1, [r1, #0]
 800e6e4:	3116      	adds	r1, #22
 800e6e6:	b2d3      	uxtb	r3, r2
 800e6e8:	700b      	strb	r3, [r1, #0]
    s[23] = (unsigned char) ((s8 >> 16) | (s9 << 5));
 800e6ea:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800e6ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e6f2:	f04f 0200 	mov.w	r2, #0
 800e6f6:	f04f 0300 	mov.w	r3, #0
 800e6fa:	0c02      	lsrs	r2, r0, #16
 800e6fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800e700:	140b      	asrs	r3, r1, #16
 800e702:	b254      	sxtb	r4, r2
 800e704:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e70c:	f04f 0200 	mov.w	r2, #0
 800e710:	f04f 0300 	mov.w	r3, #0
 800e714:	014b      	lsls	r3, r1, #5
 800e716:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e71a:	0142      	lsls	r2, r0, #5
 800e71c:	b253      	sxtb	r3, r2
 800e71e:	4323      	orrs	r3, r4
 800e720:	b25a      	sxtb	r2, r3
 800e722:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	3317      	adds	r3, #23
 800e72a:	b2d2      	uxtb	r2, r2
 800e72c:	701a      	strb	r2, [r3, #0]
    s[24] = (unsigned char) (s9 >> 3);
 800e72e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e732:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e736:	f04f 0200 	mov.w	r2, #0
 800e73a:	f04f 0300 	mov.w	r3, #0
 800e73e:	08c2      	lsrs	r2, r0, #3
 800e740:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 800e744:	10cb      	asrs	r3, r1, #3
 800e746:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e74a:	6809      	ldr	r1, [r1, #0]
 800e74c:	3118      	adds	r1, #24
 800e74e:	b2d3      	uxtb	r3, r2
 800e750:	700b      	strb	r3, [r1, #0]
    s[25] = (unsigned char) (s9 >> 11);
 800e752:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e75a:	f04f 0200 	mov.w	r2, #0
 800e75e:	f04f 0300 	mov.w	r3, #0
 800e762:	0ac2      	lsrs	r2, r0, #11
 800e764:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 800e768:	12cb      	asrs	r3, r1, #11
 800e76a:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e76e:	6809      	ldr	r1, [r1, #0]
 800e770:	3119      	adds	r1, #25
 800e772:	b2d3      	uxtb	r3, r2
 800e774:	700b      	strb	r3, [r1, #0]
    s[26] = (unsigned char) ((s9 >> 19) | (s10 << 2));
 800e776:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800e77a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e77e:	f04f 0200 	mov.w	r2, #0
 800e782:	f04f 0300 	mov.w	r3, #0
 800e786:	0cc2      	lsrs	r2, r0, #19
 800e788:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800e78c:	14cb      	asrs	r3, r1, #19
 800e78e:	b254      	sxtb	r4, r2
 800e790:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800e794:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e798:	f04f 0200 	mov.w	r2, #0
 800e79c:	f04f 0300 	mov.w	r3, #0
 800e7a0:	008b      	lsls	r3, r1, #2
 800e7a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e7a6:	0082      	lsls	r2, r0, #2
 800e7a8:	b253      	sxtb	r3, r2
 800e7aa:	4323      	orrs	r3, r4
 800e7ac:	b25a      	sxtb	r2, r3
 800e7ae:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	331a      	adds	r3, #26
 800e7b6:	b2d2      	uxtb	r2, r2
 800e7b8:	701a      	strb	r2, [r3, #0]
    s[27] = (unsigned char) (s10 >> 6);
 800e7ba:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800e7be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7c2:	f04f 0200 	mov.w	r2, #0
 800e7c6:	f04f 0300 	mov.w	r3, #0
 800e7ca:	0982      	lsrs	r2, r0, #6
 800e7cc:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 800e7d0:	118b      	asrs	r3, r1, #6
 800e7d2:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e7d6:	6809      	ldr	r1, [r1, #0]
 800e7d8:	311b      	adds	r1, #27
 800e7da:	b2d3      	uxtb	r3, r2
 800e7dc:	700b      	strb	r3, [r1, #0]
    s[28] = (unsigned char) ((s10 >> 14) | (s11 << 7));
 800e7de:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 800e7e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7e6:	f04f 0200 	mov.w	r2, #0
 800e7ea:	f04f 0300 	mov.w	r3, #0
 800e7ee:	0b82      	lsrs	r2, r0, #14
 800e7f0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800e7f4:	138b      	asrs	r3, r1, #14
 800e7f6:	b254      	sxtb	r4, r2
 800e7f8:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e7fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e800:	f04f 0200 	mov.w	r2, #0
 800e804:	f04f 0300 	mov.w	r3, #0
 800e808:	01cb      	lsls	r3, r1, #7
 800e80a:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800e80e:	01c2      	lsls	r2, r0, #7
 800e810:	b253      	sxtb	r3, r2
 800e812:	4323      	orrs	r3, r4
 800e814:	b25a      	sxtb	r2, r3
 800e816:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	331c      	adds	r3, #28
 800e81e:	b2d2      	uxtb	r2, r2
 800e820:	701a      	strb	r2, [r3, #0]
    s[29] = (unsigned char) (s11 >> 1);
 800e822:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e826:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e82a:	f04f 0200 	mov.w	r2, #0
 800e82e:	f04f 0300 	mov.w	r3, #0
 800e832:	0842      	lsrs	r2, r0, #1
 800e834:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e838:	104b      	asrs	r3, r1, #1
 800e83a:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e83e:	6809      	ldr	r1, [r1, #0]
 800e840:	311d      	adds	r1, #29
 800e842:	b2d3      	uxtb	r3, r2
 800e844:	700b      	strb	r3, [r1, #0]
    s[30] = (unsigned char) (s11 >> 9);
 800e846:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e84a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e84e:	f04f 0200 	mov.w	r2, #0
 800e852:	f04f 0300 	mov.w	r3, #0
 800e856:	0a42      	lsrs	r2, r0, #9
 800e858:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e85c:	124b      	asrs	r3, r1, #9
 800e85e:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e862:	6809      	ldr	r1, [r1, #0]
 800e864:	311e      	adds	r1, #30
 800e866:	b2d3      	uxtb	r3, r2
 800e868:	700b      	strb	r3, [r1, #0]
    s[31] = (unsigned char) (s11 >> 17);
 800e86a:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800e86e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e872:	f04f 0200 	mov.w	r2, #0
 800e876:	f04f 0300 	mov.w	r3, #0
 800e87a:	0c42      	lsrs	r2, r0, #17
 800e87c:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 800e880:	144b      	asrs	r3, r1, #17
 800e882:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 800e886:	6809      	ldr	r1, [r1, #0]
 800e888:	311f      	adds	r1, #31
 800e88a:	b2d3      	uxtb	r3, r2
 800e88c:	700b      	strb	r3, [r1, #0]
}
 800e88e:	bf00      	nop
 800e890:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 800e894:	46bd      	mov	sp, r7
 800e896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e89a:	bf00      	nop

0800e89c <sha3_keccakf>:
#include "sha3.h"

// update the state with given number of rounds

void sha3_keccakf(uint64_t st[25])
{
 800e89c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8a0:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e8aa:	6018      	str	r0, [r3, #0]
    // constants
    const uint64_t keccakf_rndc[24] = {
 800e8ac:	4bc5      	ldr	r3, [pc, #788]	; (800ebc4 <sha3_keccakf+0x328>)
 800e8ae:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	23c0      	movs	r3, #192	; 0xc0
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	f009 fffa 	bl	80188b0 <memcpy>
        0x000000008000808b, 0x800000000000008b, 0x8000000000008089,
        0x8000000000008003, 0x8000000000008002, 0x8000000000000080,
        0x000000000000800a, 0x800000008000000a, 0x8000000080008081,
        0x8000000000008080, 0x0000000080000001, 0x8000000080008008
    };
    const int keccakf_rotc[24] = {
 800e8bc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800e8c0:	4ac1      	ldr	r2, [pc, #772]	; (800ebc8 <sha3_keccakf+0x32c>)
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	2360      	movs	r3, #96	; 0x60
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	f009 fff1 	bl	80188b0 <memcpy>
        1,  3,  6,  10, 15, 21, 28, 36, 45, 55, 2,  14,
        27, 41, 56, 8,  25, 43, 62, 18, 39, 61, 20, 44
    };
    const int keccakf_piln[24] = {
 800e8ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e8d2:	4abe      	ldr	r2, [pc, #760]	; (800ebcc <sha3_keccakf+0x330>)
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	4611      	mov	r1, r2
 800e8d8:	2360      	movs	r3, #96	; 0x60
 800e8da:	461a      	mov	r2, r3
 800e8dc:	f009 ffe8 	bl	80188b0 <memcpy>
            (((uint64_t) v[6]) << 48) | (((uint64_t) v[7]) << 56);
    }
#endif

    // actual iteration
    for (r = 0; r < KECCAKF_ROUNDS; r++) {
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800e8e6:	e1f9      	b.n	800ecdc <sha3_keccakf+0x440>

        // Theta
        for (i = 0; i < 5; i++)
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e8ee:	e05c      	b.n	800e9aa <sha3_keccakf+0x10e>
            bc[i] = st[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15] ^ st[i + 20];
 800e8f0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e8f4:	00da      	lsls	r2, r3, #3
 800e8f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e902:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e906:	3305      	adds	r3, #5
 800e908:	00da      	lsls	r2, r3, #3
 800e90a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4413      	add	r3, r2
 800e912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e916:	ea80 0402 	eor.w	r4, r0, r2
 800e91a:	653c      	str	r4, [r7, #80]	; 0x50
 800e91c:	404b      	eors	r3, r1
 800e91e:	657b      	str	r3, [r7, #84]	; 0x54
 800e920:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e924:	330a      	adds	r3, #10
 800e926:	00da      	lsls	r2, r3, #3
 800e928:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4413      	add	r3, r2
 800e930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e934:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800e938:	4621      	mov	r1, r4
 800e93a:	4051      	eors	r1, r2
 800e93c:	64b9      	str	r1, [r7, #72]	; 0x48
 800e93e:	4629      	mov	r1, r5
 800e940:	404b      	eors	r3, r1
 800e942:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e944:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e948:	330f      	adds	r3, #15
 800e94a:	00da      	lsls	r2, r3, #3
 800e94c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4413      	add	r3, r2
 800e954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e958:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800e95c:	4621      	mov	r1, r4
 800e95e:	4051      	eors	r1, r2
 800e960:	6439      	str	r1, [r7, #64]	; 0x40
 800e962:	4629      	mov	r1, r5
 800e964:	404b      	eors	r3, r1
 800e966:	647b      	str	r3, [r7, #68]	; 0x44
 800e968:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e96c:	3314      	adds	r3, #20
 800e96e:	00da      	lsls	r2, r3, #3
 800e970:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4413      	add	r3, r2
 800e978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800e980:	4621      	mov	r1, r4
 800e982:	4051      	eors	r1, r2
 800e984:	63b9      	str	r1, [r7, #56]	; 0x38
 800e986:	4629      	mov	r1, r5
 800e988:	404b      	eors	r3, r1
 800e98a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e98c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800e990:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e994:	00db      	lsls	r3, r3, #3
 800e996:	4413      	add	r3, r2
 800e998:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e99c:	e9c3 1200 	strd	r1, r2, [r3]
        for (i = 0; i < 5; i++)
 800e9a0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e9aa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e9ae:	2b04      	cmp	r3, #4
 800e9b0:	dd9e      	ble.n	800e8f0 <sha3_keccakf+0x54>

        for (i = 0; i < 5; i++) {
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800e9b8:	e06c      	b.n	800ea94 <sha3_keccakf+0x1f8>
            t = bc[(i + 4) % 5] ^ ROTL64(bc[(i + 1) % 5], 1);
 800e9ba:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e9be:	1d19      	adds	r1, r3, #4
 800e9c0:	4b83      	ldr	r3, [pc, #524]	; (800ebd0 <sha3_keccakf+0x334>)
 800e9c2:	fb83 2301 	smull	r2, r3, r3, r1
 800e9c6:	105a      	asrs	r2, r3, #1
 800e9c8:	17cb      	asrs	r3, r1, #31
 800e9ca:	1ad2      	subs	r2, r2, r3
 800e9cc:	4613      	mov	r3, r2
 800e9ce:	009b      	lsls	r3, r3, #2
 800e9d0:	4413      	add	r3, r2
 800e9d2:	1aca      	subs	r2, r1, r3
 800e9d4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800e9d8:	00d3      	lsls	r3, r2, #3
 800e9da:	440b      	add	r3, r1
 800e9dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800e9e0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800e9e4:	1c59      	adds	r1, r3, #1
 800e9e6:	4b7a      	ldr	r3, [pc, #488]	; (800ebd0 <sha3_keccakf+0x334>)
 800e9e8:	fb83 2301 	smull	r2, r3, r3, r1
 800e9ec:	105a      	asrs	r2, r3, #1
 800e9ee:	17cb      	asrs	r3, r1, #31
 800e9f0:	1ad2      	subs	r2, r2, r3
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	1aca      	subs	r2, r1, r3
 800e9fa:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800e9fe:	00d3      	lsls	r3, r2, #3
 800ea00:	440b      	add	r3, r1
 800ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea06:	0fd0      	lsrs	r0, r2, #31
 800ea08:	0059      	lsls	r1, r3, #1
 800ea0a:	4301      	orrs	r1, r0
 800ea0c:	6379      	str	r1, [r7, #52]	; 0x34
 800ea0e:	0fd9      	lsrs	r1, r3, #31
 800ea10:	0053      	lsls	r3, r2, #1
 800ea12:	430b      	orrs	r3, r1
 800ea14:	633b      	str	r3, [r7, #48]	; 0x30
 800ea16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4063      	eors	r3, r4
 800ea1e:	60bb      	str	r3, [r7, #8]
 800ea20:	4613      	mov	r3, r2
 800ea22:	406b      	eors	r3, r5
 800ea24:	60fb      	str	r3, [r7, #12]
 800ea26:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ea2a:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
            for (j = 0; j < 25; j += 5)
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800ea34:	e025      	b.n	800ea82 <sha3_keccakf+0x1e6>
                st[j + i] ^= t;
 800ea36:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800ea3a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ea3e:	4413      	add	r3, r2
 800ea40:	00da      	lsls	r2, r3, #3
 800ea42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4413      	add	r3, r2
 800ea4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea4e:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800ea52:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ea56:	4413      	add	r3, r2
 800ea58:	00da      	lsls	r2, r3, #3
 800ea5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	189c      	adds	r4, r3, r2
 800ea62:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 800ea66:	ea80 0502 	eor.w	r5, r0, r2
 800ea6a:	62bd      	str	r5, [r7, #40]	; 0x28
 800ea6c:	404b      	eors	r3, r1
 800ea6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ea74:	e9c4 2300 	strd	r2, r3, [r4]
            for (j = 0; j < 25; j += 5)
 800ea78:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ea7c:	3305      	adds	r3, #5
 800ea7e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800ea82:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ea86:	2b18      	cmp	r3, #24
 800ea88:	ddd5      	ble.n	800ea36 <sha3_keccakf+0x19a>
        for (i = 0; i < 5; i++) {
 800ea8a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ea8e:	3301      	adds	r3, #1
 800ea90:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800ea94:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ea98:	2b04      	cmp	r3, #4
 800ea9a:	dd8e      	ble.n	800e9ba <sha3_keccakf+0x11e>
        }

        // Rho Pi
        t = st[1];
 800ea9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800eaa6:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
        for (i = 0; i < 24; i++) {
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800eab0:	e05b      	b.n	800eb6a <sha3_keccakf+0x2ce>
            j = keccakf_piln[i];
 800eab2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800eab6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800eaba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eabe:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
            bc[0] = st[j];
 800eac2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800eac6:	00da      	lsls	r2, r3, #3
 800eac8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4413      	add	r3, r2
 800ead0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ead4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ead8:	e9c3 0100 	strd	r0, r1, [r3]
            st[j] = ROTL64(t, keccakf_rotc[i]);
 800eadc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800eae0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800eae4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eae8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800eaec:	00da      	lsls	r2, r3, #3
 800eaee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	189d      	adds	r5, r3, r2
 800eaf6:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 800eafa:	f1a4 0120 	sub.w	r1, r4, #32
 800eafe:	f1c4 0020 	rsb	r0, r4, #32
 800eb02:	fa03 fb04 	lsl.w	fp, r3, r4
 800eb06:	fa02 f101 	lsl.w	r1, r2, r1
 800eb0a:	ea4b 0b01 	orr.w	fp, fp, r1
 800eb0e:	fa22 f000 	lsr.w	r0, r2, r0
 800eb12:	ea4b 0b00 	orr.w	fp, fp, r0
 800eb16:	fa02 fa04 	lsl.w	sl, r2, r4
 800eb1a:	4264      	negs	r4, r4
 800eb1c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 800eb20:	f1c4 0120 	rsb	r1, r4, #32
 800eb24:	f1a4 0020 	sub.w	r0, r4, #32
 800eb28:	fa22 f804 	lsr.w	r8, r2, r4
 800eb2c:	fa03 f101 	lsl.w	r1, r3, r1
 800eb30:	ea48 0801 	orr.w	r8, r8, r1
 800eb34:	fa23 f000 	lsr.w	r0, r3, r0
 800eb38:	ea48 0800 	orr.w	r8, r8, r0
 800eb3c:	fa23 f904 	lsr.w	r9, r3, r4
 800eb40:	ea4a 0308 	orr.w	r3, sl, r8
 800eb44:	603b      	str	r3, [r7, #0]
 800eb46:	ea4b 0309 	orr.w	r3, fp, r9
 800eb4a:	607b      	str	r3, [r7, #4]
 800eb4c:	e9d7 8900 	ldrd	r8, r9, [r7]
 800eb50:	e9c5 8900 	strd	r8, r9, [r5]
            t = bc[0];
 800eb54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5c:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
        for (i = 0; i < 24; i++) {
 800eb60:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800eb64:	3301      	adds	r3, #1
 800eb66:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800eb6a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800eb6e:	2b17      	cmp	r3, #23
 800eb70:	dd9f      	ble.n	800eab2 <sha3_keccakf+0x216>
        }

        //  Chi
        for (j = 0; j < 25; j += 5) {
 800eb72:	2300      	movs	r3, #0
 800eb74:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800eb78:	e08c      	b.n	800ec94 <sha3_keccakf+0x3f8>
            for (i = 0; i < 5; i++)
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800eb80:	e018      	b.n	800ebb4 <sha3_keccakf+0x318>
                bc[i] = st[j + i];
 800eb82:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800eb86:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800eb8a:	4413      	add	r3, r2
 800eb8c:	00da      	lsls	r2, r3, #3
 800eb8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4413      	add	r3, r2
 800eb96:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eb9a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800eb9e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800eba2:	00db      	lsls	r3, r3, #3
 800eba4:	4413      	add	r3, r2
 800eba6:	e9c3 0100 	strd	r0, r1, [r3]
            for (i = 0; i < 5; i++)
 800ebaa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ebae:	3301      	adds	r3, #1
 800ebb0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800ebb4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ebb8:	2b04      	cmp	r3, #4
 800ebba:	dde2      	ble.n	800eb82 <sha3_keccakf+0x2e6>
            for (i = 0; i < 5; i++)
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800ebc2:	e05e      	b.n	800ec82 <sha3_keccakf+0x3e6>
 800ebc4:	0801b2f8 	.word	0x0801b2f8
 800ebc8:	0801b3b8 	.word	0x0801b3b8
 800ebcc:	0801b418 	.word	0x0801b418
 800ebd0:	66666667 	.word	0x66666667
                st[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
 800ebd4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800ebd8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ebdc:	4413      	add	r3, r2
 800ebde:	00da      	lsls	r2, r3, #3
 800ebe0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ebec:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ebf0:	1c59      	adds	r1, r3, #1
 800ebf2:	4b40      	ldr	r3, [pc, #256]	; (800ecf4 <sha3_keccakf+0x458>)
 800ebf4:	fb83 2301 	smull	r2, r3, r3, r1
 800ebf8:	105a      	asrs	r2, r3, #1
 800ebfa:	17cb      	asrs	r3, r1, #31
 800ebfc:	1ad2      	subs	r2, r2, r3
 800ebfe:	4613      	mov	r3, r2
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	4413      	add	r3, r2
 800ec04:	1aca      	subs	r2, r1, r3
 800ec06:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800ec0a:	00d3      	lsls	r3, r2, #3
 800ec0c:	440b      	add	r3, r1
 800ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec12:	43d1      	mvns	r1, r2
 800ec14:	65b9      	str	r1, [r7, #88]	; 0x58
 800ec16:	43db      	mvns	r3, r3
 800ec18:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec1a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ec1e:	1c99      	adds	r1, r3, #2
 800ec20:	4b34      	ldr	r3, [pc, #208]	; (800ecf4 <sha3_keccakf+0x458>)
 800ec22:	fb83 2301 	smull	r2, r3, r3, r1
 800ec26:	105a      	asrs	r2, r3, #1
 800ec28:	17cb      	asrs	r3, r1, #31
 800ec2a:	1ad2      	subs	r2, r2, r3
 800ec2c:	4613      	mov	r3, r2
 800ec2e:	009b      	lsls	r3, r3, #2
 800ec30:	4413      	add	r3, r2
 800ec32:	1aca      	subs	r2, r1, r3
 800ec34:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800ec38:	00d3      	lsls	r3, r2, #3
 800ec3a:	440b      	add	r3, r1
 800ec3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec42:	4011      	ands	r1, r2
 800ec44:	6239      	str	r1, [r7, #32]
 800ec46:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800ec48:	400b      	ands	r3, r1
 800ec4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec4c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800ec50:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ec54:	4413      	add	r3, r2
 800ec56:	00da      	lsls	r2, r3, #3
 800ec58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4413      	add	r3, r2
 800ec60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ec64:	4602      	mov	r2, r0
 800ec66:	4062      	eors	r2, r4
 800ec68:	61ba      	str	r2, [r7, #24]
 800ec6a:	460a      	mov	r2, r1
 800ec6c:	406a      	eors	r2, r5
 800ec6e:	61fa      	str	r2, [r7, #28]
 800ec70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ec74:	e9c3 1200 	strd	r1, r2, [r3]
            for (i = 0; i < 5; i++)
 800ec78:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800ec82:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800ec86:	2b04      	cmp	r3, #4
 800ec88:	dda4      	ble.n	800ebd4 <sha3_keccakf+0x338>
        for (j = 0; j < 25; j += 5) {
 800ec8a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ec8e:	3305      	adds	r3, #5
 800ec90:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800ec94:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800ec98:	2b18      	cmp	r3, #24
 800ec9a:	f77f af6e 	ble.w	800eb7a <sha3_keccakf+0x2de>
        }

        //  Iota
        st[0] ^= keccakf_rndc[r];
 800ec9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eca8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800ecac:	00db      	lsls	r3, r3, #3
 800ecae:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800ecb2:	4413      	add	r3, r2
 800ecb4:	3bd8      	subs	r3, #216	; 0xd8
 800ecb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecba:	ea80 0402 	eor.w	r4, r0, r2
 800ecbe:	613c      	str	r4, [r7, #16]
 800ecc0:	404b      	eors	r3, r1
 800ecc2:	617b      	str	r3, [r7, #20]
 800ecc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ecce:	e9c3 1200 	strd	r1, r2, [r3]
    for (r = 0; r < KECCAKF_ROUNDS; r++) {
 800ecd2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800ecdc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800ece0:	2b17      	cmp	r3, #23
 800ece2:	f77f ae01 	ble.w	800e8e8 <sha3_keccakf+0x4c>
        v[5] = (t >> 40) & 0xFF;
        v[6] = (t >> 48) & 0xFF;
        v[7] = (t >> 56) & 0xFF;
    }
#endif
}
 800ece6:	bf00      	nop
 800ece8:	bf00      	nop
 800ecea:	f507 770a 	add.w	r7, r7, #552	; 0x228
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecf4:	66666667 	.word	0x66666667

0800ecf8 <sha3_init>:

// Initialize the context for SHA3

int sha3_init(sha3_ctx_t *c, int mdlen)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b085      	sub	sp, #20
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
    int i;

    for (i = 0; i < 25; i++)
 800ed02:	2300      	movs	r3, #0
 800ed04:	60fb      	str	r3, [r7, #12]
 800ed06:	e00c      	b.n	800ed22 <sha3_init+0x2a>
        c->st.q[i] = 0;
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	00db      	lsls	r3, r3, #3
 800ed0e:	18d1      	adds	r1, r2, r3
 800ed10:	f04f 0200 	mov.w	r2, #0
 800ed14:	f04f 0300 	mov.w	r3, #0
 800ed18:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 25; i++)
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	60fb      	str	r3, [r7, #12]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2b18      	cmp	r3, #24
 800ed26:	ddef      	ble.n	800ed08 <sha3_init+0x10>
    c->mdlen = mdlen;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	683a      	ldr	r2, [r7, #0]
 800ed2c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    c->rsiz = 200 - 2 * mdlen;
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800ed36:	005a      	lsls	r2, r3, #1
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    c->pt = 0;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    return 1;
 800ed46:	2301      	movs	r3, #1
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3714      	adds	r7, #20
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <sha3_update>:

// update state with more data

int sha3_update(sha3_ctx_t *c, const void *data, size_t len)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
    size_t i;
    int j;

    j = c->pt;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ed66:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len; i++) {
 800ed68:	2300      	movs	r3, #0
 800ed6a:	617b      	str	r3, [r7, #20]
 800ed6c:	e01b      	b.n	800eda6 <sha3_update+0x52>
        c->st.b[j++] ^= ((const uint8_t *) data)[i];
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	1c5a      	adds	r2, r3, #1
 800ed72:	613a      	str	r2, [r7, #16]
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	5cd1      	ldrb	r1, [r2, r3]
 800ed78:	68b8      	ldr	r0, [r7, #8]
 800ed7a:	697a      	ldr	r2, [r7, #20]
 800ed7c:	4402      	add	r2, r0
 800ed7e:	7812      	ldrb	r2, [r2, #0]
 800ed80:	404a      	eors	r2, r1
 800ed82:	b2d1      	uxtb	r1, r2
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	54d1      	strb	r1, [r2, r3]
        if (j >= c->rsiz) {
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ed8e:	693a      	ldr	r2, [r7, #16]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	db05      	blt.n	800eda0 <sha3_update+0x4c>
            sha3_keccakf(c->st.q);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7ff fd80 	bl	800e89c <sha3_keccakf>
            j = 0;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len; i++) {
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	3301      	adds	r3, #1
 800eda4:	617b      	str	r3, [r7, #20]
 800eda6:	697a      	ldr	r2, [r7, #20]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d3df      	bcc.n	800ed6e <sha3_update+0x1a>
        }
    }
    c->pt = j;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	693a      	ldr	r2, [r7, #16]
 800edb2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    return 1;
 800edb6:	2301      	movs	r3, #1
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3718      	adds	r7, #24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <sha3_final>:

// finalize and output a hash

int sha3_final(void *md, sha3_ctx_t *c)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
    int i;

    c->st.b[c->pt] ^= 0x06;
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800edd0:	683a      	ldr	r2, [r7, #0]
 800edd2:	5cd2      	ldrb	r2, [r2, r3]
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800edda:	f082 0206 	eor.w	r2, r2, #6
 800edde:	b2d1      	uxtb	r1, r2
 800ede0:	683a      	ldr	r2, [r7, #0]
 800ede2:	54d1      	strb	r1, [r2, r3]
    c->st.b[c->rsiz - 1] ^= 0x80;
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800edea:	3b01      	subs	r3, #1
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	5cd3      	ldrb	r3, [r2, r3]
 800edf0:	683a      	ldr	r2, [r7, #0]
 800edf2:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 800edf6:	3a01      	subs	r2, #1
 800edf8:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800edfc:	43db      	mvns	r3, r3
 800edfe:	b2d9      	uxtb	r1, r3
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	5499      	strb	r1, [r3, r2]
    sha3_keccakf(c->st.q);
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fd48 	bl	800e89c <sha3_keccakf>

    for (i = 0; i < c->mdlen; i++) {
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	60fb      	str	r3, [r7, #12]
 800ee10:	e00a      	b.n	800ee28 <sha3_final+0x68>
        ((uint8_t *) md)[i] = c->st.b[i];
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	4413      	add	r3, r2
 800ee18:	6839      	ldr	r1, [r7, #0]
 800ee1a:	68fa      	ldr	r2, [r7, #12]
 800ee1c:	440a      	add	r2, r1
 800ee1e:	7812      	ldrb	r2, [r2, #0]
 800ee20:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < c->mdlen; i++) {
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	3301      	adds	r3, #1
 800ee26:	60fb      	str	r3, [r7, #12]
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	dbee      	blt.n	800ee12 <sha3_final+0x52>
    }

    return 1;
 800ee34:	2301      	movs	r3, #1
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <sha3>:

// compute a SHA-3 hash (md) of given byte length from "in"

void *sha3(const void *in, size_t inlen, void *md, int mdlen)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b0ba      	sub	sp, #232	; 0xe8
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	60f8      	str	r0, [r7, #12]
 800ee46:	60b9      	str	r1, [r7, #8]
 800ee48:	607a      	str	r2, [r7, #4]
 800ee4a:	603b      	str	r3, [r7, #0]
    sha3_ctx_t sha3;

    sha3_init(&sha3, mdlen);
 800ee4c:	f107 0310 	add.w	r3, r7, #16
 800ee50:	6839      	ldr	r1, [r7, #0]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7ff ff50 	bl	800ecf8 <sha3_init>
    sha3_update(&sha3, in, inlen);
 800ee58:	f107 0310 	add.w	r3, r7, #16
 800ee5c:	68ba      	ldr	r2, [r7, #8]
 800ee5e:	68f9      	ldr	r1, [r7, #12]
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7ff ff77 	bl	800ed54 <sha3_update>
    sha3_final(md, &sha3);
 800ee66:	f107 0310 	add.w	r3, r7, #16
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f7ff ffa7 	bl	800edc0 <sha3_final>

    return md;
 800ee72:	687b      	ldr	r3, [r7, #4]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	37e8      	adds	r7, #232	; 0xe8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <sha512_compress>:
   #define MIN(x, y) ( ((x)<(y))?(x):(y) )
#endif

/* compress 1024-bits */
static int sha512_compress(sha512_context *md, unsigned char *buf)
{
 800ee7c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ee80:	f5ad 6d17 	sub.w	sp, sp, #2416	; 0x970
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	f207 6394 	addw	r3, r7, #1684	; 0x694
 800ee8a:	6018      	str	r0, [r3, #0]
 800ee8c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800ee90:	6019      	str	r1, [r3, #0]
    uint64_t S[8], W[80], t0, t1;
    int i;

    /* copy state into S */
    for (i = 0; i < 8; i++) {
 800ee92:	2300      	movs	r3, #0
 800ee94:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800ee98:	e017      	b.n	800eeca <sha512_compress+0x4e>
        S[i] = md->state[i];
 800ee9a:	f207 6394 	addw	r3, r7, #1684	; 0x694
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eea4:	3301      	adds	r3, #1
 800eea6:	00db      	lsls	r3, r3, #3
 800eea8:	4413      	add	r3, r2
 800eeaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800eeae:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eeb2:	00db      	lsls	r3, r3, #3
 800eeb4:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 800eeb8:	4413      	add	r3, r2
 800eeba:	3b58      	subs	r3, #88	; 0x58
 800eebc:	e9c3 0100 	strd	r0, r1, [r3]
    for (i = 0; i < 8; i++) {
 800eec0:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eec4:	3301      	adds	r3, #1
 800eec6:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800eeca:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eece:	2b07      	cmp	r3, #7
 800eed0:	dde3      	ble.n	800ee9a <sha512_compress+0x1e>
    }

    /* copy the state into 1024-bits into W[0..15] */
    for (i = 0; i < 16; i++) {
 800eed2:	2300      	movs	r3, #0
 800eed4:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800eed8:	e0e6      	b.n	800f0a8 <sha512_compress+0x22c>
        LOAD64H(W[i], buf + (8*i));
 800eeda:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eede:	00db      	lsls	r3, r3, #3
 800eee0:	461a      	mov	r2, r3
 800eee2:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4413      	add	r3, r2
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	b2da      	uxtb	r2, r3
 800eeee:	f04f 0300 	mov.w	r3, #0
 800eef2:	f04f 0400 	mov.w	r4, #0
 800eef6:	f04f 0500 	mov.w	r5, #0
 800eefa:	0615      	lsls	r5, r2, #24
 800eefc:	2400      	movs	r4, #0
 800eefe:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ef02:	00db      	lsls	r3, r3, #3
 800ef04:	1c5a      	adds	r2, r3, #1
 800ef06:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	b2da      	uxtb	r2, r3
 800ef12:	f04f 0300 	mov.w	r3, #0
 800ef16:	f04f 0000 	mov.w	r0, #0
 800ef1a:	f04f 0100 	mov.w	r1, #0
 800ef1e:	0411      	lsls	r1, r2, #16
 800ef20:	2000      	movs	r0, #0
 800ef22:	ea44 0300 	orr.w	r3, r4, r0
 800ef26:	f8c7 3688 	str.w	r3, [r7, #1672]	; 0x688
 800ef2a:	ea45 0301 	orr.w	r3, r5, r1
 800ef2e:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 800ef32:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ef36:	00db      	lsls	r3, r3, #3
 800ef38:	1c9a      	adds	r2, r3, #2
 800ef3a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4413      	add	r3, r2
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	f04f 0300 	mov.w	r3, #0
 800ef4a:	f04f 0000 	mov.w	r0, #0
 800ef4e:	f04f 0100 	mov.w	r1, #0
 800ef52:	0211      	lsls	r1, r2, #8
 800ef54:	2000      	movs	r0, #0
 800ef56:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800ef5a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ef5e:	4623      	mov	r3, r4
 800ef60:	4303      	orrs	r3, r0
 800ef62:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
 800ef66:	462b      	mov	r3, r5
 800ef68:	430b      	orrs	r3, r1
 800ef6a:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 800ef6e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800ef72:	00db      	lsls	r3, r3, #3
 800ef74:	1cda      	adds	r2, r3, #3
 800ef76:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	f04f 0300 	mov.w	r3, #0
 800ef86:	f04f 0000 	mov.w	r0, #0
 800ef8a:	f04f 0100 	mov.w	r1, #0
 800ef8e:	0011      	movs	r1, r2
 800ef90:	2000      	movs	r0, #0
 800ef92:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800ef96:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ef9a:	4623      	mov	r3, r4
 800ef9c:	4303      	orrs	r3, r0
 800ef9e:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
 800efa2:	462b      	mov	r3, r5
 800efa4:	430b      	orrs	r3, r1
 800efa6:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 800efaa:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800efae:	00db      	lsls	r3, r3, #3
 800efb0:	1d1a      	adds	r2, r3, #4
 800efb2:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4413      	add	r3, r2
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	b2da      	uxtb	r2, r3
 800efbe:	f04f 0300 	mov.w	r3, #0
 800efc2:	0a11      	lsrs	r1, r2, #8
 800efc4:	f8c7 1674 	str.w	r1, [r7, #1652]	; 0x674
 800efc8:	0613      	lsls	r3, r2, #24
 800efca:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 800efce:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 800efd2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800efd6:	4623      	mov	r3, r4
 800efd8:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 800efdc:	e9d2 0100 	ldrd	r0, r1, [r2]
 800efe0:	4602      	mov	r2, r0
 800efe2:	4313      	orrs	r3, r2
 800efe4:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 800efe8:	462b      	mov	r3, r5
 800efea:	460a      	mov	r2, r1
 800efec:	4313      	orrs	r3, r2
 800efee:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 800eff2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800eff6:	00db      	lsls	r3, r3, #3
 800eff8:	1d5a      	adds	r2, r3, #5
 800effa:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4413      	add	r3, r2
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	b2da      	uxtb	r2, r3
 800f006:	f04f 0300 	mov.w	r3, #0
 800f00a:	f04f 0000 	mov.w	r0, #0
 800f00e:	f04f 0100 	mov.w	r1, #0
 800f012:	0419      	lsls	r1, r3, #16
 800f014:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800f018:	0410      	lsls	r0, r2, #16
 800f01a:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800f01e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f022:	4623      	mov	r3, r4
 800f024:	ea43 0a00 	orr.w	sl, r3, r0
 800f028:	462b      	mov	r3, r5
 800f02a:	ea43 0b01 	orr.w	fp, r3, r1
 800f02e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f032:	00db      	lsls	r3, r3, #3
 800f034:	1d9a      	adds	r2, r3, #6
 800f036:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4413      	add	r3, r2
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	b2da      	uxtb	r2, r3
 800f042:	f04f 0300 	mov.w	r3, #0
 800f046:	f04f 0000 	mov.w	r0, #0
 800f04a:	f04f 0100 	mov.w	r1, #0
 800f04e:	0219      	lsls	r1, r3, #8
 800f050:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800f054:	0210      	lsls	r0, r2, #8
 800f056:	ea4a 0800 	orr.w	r8, sl, r0
 800f05a:	ea4b 0901 	orr.w	r9, fp, r1
 800f05e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f062:	00db      	lsls	r3, r3, #3
 800f064:	1dda      	adds	r2, r3, #7
 800f066:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4413      	add	r3, r2
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	b2da      	uxtb	r2, r3
 800f072:	f04f 0300 	mov.w	r3, #0
 800f076:	ea48 0102 	orr.w	r1, r8, r2
 800f07a:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 800f07e:	ea49 0303 	orr.w	r3, r9, r3
 800f082:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 800f086:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f08a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f08e:	00db      	lsls	r3, r3, #3
 800f090:	4413      	add	r3, r2
 800f092:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 800f096:	e9d2 1200 	ldrd	r1, r2, [r2]
 800f09a:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 0; i < 16; i++) {
 800f09e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800f0a8:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f0ac:	2b0f      	cmp	r3, #15
 800f0ae:	f77f af14 	ble.w	800eeda <sha512_compress+0x5e>
    }

    /* fill W[16..79] */
    for (i = 16; i < 80; i++) {
 800f0b2:	2310      	movs	r3, #16
 800f0b4:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800f0b8:	e0f8      	b.n	800f2ac <sha512_compress+0x430>
        W[i] = Gamma1(W[i - 2]) + W[i - 7] + Gamma0(W[i - 15]) + W[i - 16];
 800f0ba:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f0be:	3b02      	subs	r3, #2
 800f0c0:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f0c4:	00db      	lsls	r3, r3, #3
 800f0c6:	4413      	add	r3, r2
 800f0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0cc:	0358      	lsls	r0, r3, #13
 800f0ce:	0cd1      	lsrs	r1, r2, #19
 800f0d0:	4301      	orrs	r1, r0
 800f0d2:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 800f0d6:	0351      	lsls	r1, r2, #13
 800f0d8:	0cdb      	lsrs	r3, r3, #19
 800f0da:	430b      	orrs	r3, r1
 800f0dc:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 800f0e0:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f0e4:	3b02      	subs	r3, #2
 800f0e6:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f0ea:	00db      	lsls	r3, r3, #3
 800f0ec:	4413      	add	r3, r2
 800f0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f2:	0f50      	lsrs	r0, r2, #29
 800f0f4:	00d9      	lsls	r1, r3, #3
 800f0f6:	4301      	orrs	r1, r0
 800f0f8:	f8c7 1654 	str.w	r1, [r7, #1620]	; 0x654
 800f0fc:	0f59      	lsrs	r1, r3, #29
 800f0fe:	00d3      	lsls	r3, r2, #3
 800f100:	430b      	orrs	r3, r1
 800f102:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 800f106:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800f10a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f10e:	4623      	mov	r3, r4
 800f110:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 800f114:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f118:	4602      	mov	r2, r0
 800f11a:	4053      	eors	r3, r2
 800f11c:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 800f120:	462b      	mov	r3, r5
 800f122:	460a      	mov	r2, r1
 800f124:	4053      	eors	r3, r2
 800f126:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 800f12a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f12e:	3b02      	subs	r3, #2
 800f130:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f134:	00db      	lsls	r3, r3, #3
 800f136:	4413      	add	r3, r2
 800f138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13c:	f04f 0000 	mov.w	r0, #0
 800f140:	f04f 0100 	mov.w	r1, #0
 800f144:	0990      	lsrs	r0, r2, #6
 800f146:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800f14a:	0999      	lsrs	r1, r3, #6
 800f14c:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800f150:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f154:	4623      	mov	r3, r4
 800f156:	4043      	eors	r3, r0
 800f158:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
 800f15c:	462b      	mov	r3, r5
 800f15e:	404b      	eors	r3, r1
 800f160:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 800f164:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f168:	3b07      	subs	r3, #7
 800f16a:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f16e:	00db      	lsls	r3, r3, #3
 800f170:	4413      	add	r3, r2
 800f172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f176:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 800f17a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f17e:	4621      	mov	r1, r4
 800f180:	1889      	adds	r1, r1, r2
 800f182:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 800f186:	4629      	mov	r1, r5
 800f188:	eb41 0303 	adc.w	r3, r1, r3
 800f18c:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 800f190:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f194:	3b0f      	subs	r3, #15
 800f196:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f19a:	00db      	lsls	r3, r3, #3
 800f19c:	4413      	add	r3, r2
 800f19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a2:	07d8      	lsls	r0, r3, #31
 800f1a4:	0851      	lsrs	r1, r2, #1
 800f1a6:	4301      	orrs	r1, r0
 800f1a8:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 800f1ac:	07d1      	lsls	r1, r2, #31
 800f1ae:	085b      	lsrs	r3, r3, #1
 800f1b0:	430b      	orrs	r3, r1
 800f1b2:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 800f1b6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f1ba:	3b0f      	subs	r3, #15
 800f1bc:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f1c0:	00db      	lsls	r3, r3, #3
 800f1c2:	4413      	add	r3, r2
 800f1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c8:	0618      	lsls	r0, r3, #24
 800f1ca:	0a11      	lsrs	r1, r2, #8
 800f1cc:	4301      	orrs	r1, r0
 800f1ce:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 800f1d2:	0611      	lsls	r1, r2, #24
 800f1d4:	0a1b      	lsrs	r3, r3, #8
 800f1d6:	430b      	orrs	r3, r1
 800f1d8:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 800f1dc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800f1e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f1e4:	4623      	mov	r3, r4
 800f1e6:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 800f1ea:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	4053      	eors	r3, r2
 800f1f2:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 800f1f6:	462b      	mov	r3, r5
 800f1f8:	460a      	mov	r2, r1
 800f1fa:	4053      	eors	r3, r2
 800f1fc:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 800f200:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f204:	3b0f      	subs	r3, #15
 800f206:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f20a:	00db      	lsls	r3, r3, #3
 800f20c:	4413      	add	r3, r2
 800f20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f212:	f04f 0000 	mov.w	r0, #0
 800f216:	f04f 0100 	mov.w	r1, #0
 800f21a:	09d0      	lsrs	r0, r2, #7
 800f21c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800f220:	09d9      	lsrs	r1, r3, #7
 800f222:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800f226:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f22a:	4623      	mov	r3, r4
 800f22c:	4043      	eors	r3, r0
 800f22e:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800f232:	462b      	mov	r3, r5
 800f234:	404b      	eors	r3, r1
 800f236:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 800f23a:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800f23e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f242:	4623      	mov	r3, r4
 800f244:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 800f248:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f24c:	4602      	mov	r2, r0
 800f24e:	189b      	adds	r3, r3, r2
 800f250:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
 800f254:	462b      	mov	r3, r5
 800f256:	460a      	mov	r2, r1
 800f258:	4153      	adcs	r3, r2
 800f25a:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 800f25e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f262:	3b10      	subs	r3, #16
 800f264:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f268:	00db      	lsls	r3, r3, #3
 800f26a:	4413      	add	r3, r2
 800f26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f270:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 800f274:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f278:	4621      	mov	r1, r4
 800f27a:	1889      	adds	r1, r1, r2
 800f27c:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 800f280:	4629      	mov	r1, r5
 800f282:	eb41 0303 	adc.w	r3, r1, r3
 800f286:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800f28a:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f28e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f292:	00db      	lsls	r3, r3, #3
 800f294:	4413      	add	r3, r2
 800f296:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 800f29a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800f29e:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 16; i < 80; i++) {
 800f2a2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800f2ac:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f2b0:	2b4f      	cmp	r3, #79	; 0x4f
 800f2b2:	f77f af02 	ble.w	800f0ba <sha512_compress+0x23e>
    t0 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i]; \
    t1 = Sigma0(a) + Maj(a, b, c);\
    d += t0; \
    h  = t0 + t1;

    for (i = 0; i < 80; i += 8) {
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 800f2bc:	f001 bc4b 	b.w	8010b56 <sha512_compress+0x1cda>
       RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],i+0);
 800f2c0:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f2c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f2c8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800f2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d0:	0498      	lsls	r0, r3, #18
 800f2d2:	0b91      	lsrs	r1, r2, #14
 800f2d4:	4301      	orrs	r1, r0
 800f2d6:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 800f2da:	0491      	lsls	r1, r2, #18
 800f2dc:	0b9b      	lsrs	r3, r3, #14
 800f2de:	430b      	orrs	r3, r1
 800f2e0:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800f2e4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800f2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ec:	0398      	lsls	r0, r3, #14
 800f2ee:	0c91      	lsrs	r1, r2, #18
 800f2f0:	4301      	orrs	r1, r0
 800f2f2:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 800f2f6:	0391      	lsls	r1, r2, #14
 800f2f8:	0c9b      	lsrs	r3, r3, #18
 800f2fa:	430b      	orrs	r3, r1
 800f2fc:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800f300:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800f304:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f308:	4643      	mov	r3, r8
 800f30a:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 800f30e:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f312:	4602      	mov	r2, r0
 800f314:	4053      	eors	r3, r2
 800f316:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 800f31a:	464b      	mov	r3, r9
 800f31c:	460a      	mov	r2, r1
 800f31e:	4053      	eors	r3, r2
 800f320:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800f324:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800f328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32c:	0a50      	lsrs	r0, r2, #9
 800f32e:	05d9      	lsls	r1, r3, #23
 800f330:	4301      	orrs	r1, r0
 800f332:	f8c7 15ec 	str.w	r1, [r7, #1516]	; 0x5ec
 800f336:	0a59      	lsrs	r1, r3, #9
 800f338:	05d3      	lsls	r3, r2, #23
 800f33a:	430b      	orrs	r3, r1
 800f33c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
 800f340:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800f344:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f348:	4643      	mov	r3, r8
 800f34a:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 800f34e:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f352:	4602      	mov	r2, r0
 800f354:	4053      	eors	r3, r2
 800f356:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 800f35a:	464b      	mov	r3, r9
 800f35c:	460a      	mov	r2, r1
 800f35e:	4053      	eors	r3, r2
 800f360:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 800f364:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800f368:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f36c:	460b      	mov	r3, r1
 800f36e:	18e3      	adds	r3, r4, r3
 800f370:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
 800f374:	4613      	mov	r3, r2
 800f376:	eb45 0303 	adc.w	r3, r5, r3
 800f37a:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 800f37e:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800f382:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f386:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800f38a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f38e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f392:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f396:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800f39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39e:	ea80 0602 	eor.w	r6, r0, r2
 800f3a2:	f8c7 65d0 	str.w	r6, [r7, #1488]	; 0x5d0
 800f3a6:	404b      	eors	r3, r1
 800f3a8:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 800f3ac:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800f3b0:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	4023      	ands	r3, r4
 800f3b8:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
 800f3bc:	4613      	mov	r3, r2
 800f3be:	402b      	ands	r3, r5
 800f3c0:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800f3c4:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 800f3c8:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	ea88 0303 	eor.w	r3, r8, r3
 800f3d2:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	ea89 0303 	eor.w	r3, r9, r3
 800f3dc:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 800f3e0:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800f3e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f3e8:	4623      	mov	r3, r4
 800f3ea:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800f3ee:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	189b      	adds	r3, r3, r2
 800f3f6:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 800f3fa:	462b      	mov	r3, r5
 800f3fc:	460a      	mov	r2, r1
 800f3fe:	4153      	adcs	r3, r2
 800f400:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800f404:	4af4      	ldr	r2, [pc, #976]	; (800f7d8 <sha512_compress+0x95c>)
 800f406:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f40a:	00db      	lsls	r3, r3, #3
 800f40c:	4413      	add	r3, r2
 800f40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f412:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 800f416:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f41a:	4621      	mov	r1, r4
 800f41c:	1889      	adds	r1, r1, r2
 800f41e:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800f422:	4629      	mov	r1, r5
 800f424:	eb41 0303 	adc.w	r3, r1, r3
 800f428:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800f42c:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f430:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f434:	00db      	lsls	r3, r3, #3
 800f436:	4413      	add	r3, r2
 800f438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43c:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 800f440:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f444:	4621      	mov	r1, r4
 800f446:	1889      	adds	r1, r1, r2
 800f448:	67b9      	str	r1, [r7, #120]	; 0x78
 800f44a:	4629      	mov	r1, r5
 800f44c:	eb41 0303 	adc.w	r3, r1, r3
 800f450:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f452:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800f456:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 800f45a:	e9c2 3400 	strd	r3, r4, [r2]
 800f45e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f466:	0118      	lsls	r0, r3, #4
 800f468:	0f11      	lsrs	r1, r2, #28
 800f46a:	4301      	orrs	r1, r0
 800f46c:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 800f470:	0111      	lsls	r1, r2, #4
 800f472:	0f1b      	lsrs	r3, r3, #28
 800f474:	430b      	orrs	r3, r1
 800f476:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800f47a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f482:	0890      	lsrs	r0, r2, #2
 800f484:	0799      	lsls	r1, r3, #30
 800f486:	4301      	orrs	r1, r0
 800f488:	f8c7 15a4 	str.w	r1, [r7, #1444]	; 0x5a4
 800f48c:	0899      	lsrs	r1, r3, #2
 800f48e:	0793      	lsls	r3, r2, #30
 800f490:	430b      	orrs	r3, r1
 800f492:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 800f496:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800f49a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f49e:	4623      	mov	r3, r4
 800f4a0:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 800f4a4:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	4053      	eors	r3, r2
 800f4ac:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 800f4b0:	462b      	mov	r3, r5
 800f4b2:	460a      	mov	r2, r1
 800f4b4:	4053      	eors	r3, r2
 800f4b6:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 800f4ba:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c2:	09d0      	lsrs	r0, r2, #7
 800f4c4:	0659      	lsls	r1, r3, #25
 800f4c6:	4301      	orrs	r1, r0
 800f4c8:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
 800f4cc:	09d9      	lsrs	r1, r3, #7
 800f4ce:	0653      	lsls	r3, r2, #25
 800f4d0:	430b      	orrs	r3, r1
 800f4d2:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 800f4d6:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800f4da:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f4de:	4623      	mov	r3, r4
 800f4e0:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 800f4e4:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	4053      	eors	r3, r2
 800f4ec:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 800f4f0:	462b      	mov	r3, r5
 800f4f2:	460a      	mov	r2, r1
 800f4f4:	4053      	eors	r3, r2
 800f4f6:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 800f4fa:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f4fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f502:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800f506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50a:	ea40 0402 	orr.w	r4, r0, r2
 800f50e:	f8c7 4580 	str.w	r4, [r7, #1408]	; 0x580
 800f512:	430b      	orrs	r3, r1
 800f514:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800f518:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f520:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 800f524:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f528:	4621      	mov	r1, r4
 800f52a:	4011      	ands	r1, r2
 800f52c:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 800f530:	4629      	mov	r1, r5
 800f532:	400b      	ands	r3, r1
 800f534:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 800f538:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f53c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f540:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800f544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f548:	ea00 0402 	and.w	r4, r0, r2
 800f54c:	f8c7 4570 	str.w	r4, [r7, #1392]	; 0x570
 800f550:	400b      	ands	r3, r1
 800f552:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800f556:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 800f55a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f55e:	4623      	mov	r3, r4
 800f560:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 800f564:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f568:	4602      	mov	r2, r0
 800f56a:	4313      	orrs	r3, r2
 800f56c:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
 800f570:	462b      	mov	r3, r5
 800f572:	460a      	mov	r2, r1
 800f574:	4313      	orrs	r3, r2
 800f576:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800f57a:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800f57e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f582:	4623      	mov	r3, r4
 800f584:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 800f588:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f58c:	4602      	mov	r2, r0
 800f58e:	189b      	adds	r3, r3, r2
 800f590:	673b      	str	r3, [r7, #112]	; 0x70
 800f592:	462b      	mov	r3, r5
 800f594:	460a      	mov	r2, r1
 800f596:	4153      	adcs	r3, r2
 800f598:	677b      	str	r3, [r7, #116]	; 0x74
 800f59a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800f59e:	f607 1258 	addw	r2, r7, #2392	; 0x958
 800f5a2:	e9c2 3400 	strd	r3, r4, [r2]
 800f5a6:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f5aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5ae:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800f5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b6:	1884      	adds	r4, r0, r2
 800f5b8:	f8c7 4560 	str.w	r4, [r7, #1376]	; 0x560
 800f5bc:	eb41 0303 	adc.w	r3, r1, r3
 800f5c0:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 800f5c4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800f5c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f5cc:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 800f5d0:	e9c2 3400 	strd	r3, r4, [r2]
 800f5d4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800f5d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f5dc:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800f5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e4:	1884      	adds	r4, r0, r2
 800f5e6:	f8c7 4558 	str.w	r4, [r7, #1368]	; 0x558
 800f5ea:	eb41 0303 	adc.w	r3, r1, r3
 800f5ee:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 800f5f2:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800f5f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f5fa:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 800f5fe:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],i+1);
 800f602:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800f606:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f60a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f612:	0498      	lsls	r0, r3, #18
 800f614:	0b91      	lsrs	r1, r2, #14
 800f616:	4301      	orrs	r1, r0
 800f618:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 800f61c:	0491      	lsls	r1, r2, #18
 800f61e:	0b9b      	lsrs	r3, r3, #14
 800f620:	430b      	orrs	r3, r1
 800f622:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 800f626:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62e:	0398      	lsls	r0, r3, #14
 800f630:	0c91      	lsrs	r1, r2, #18
 800f632:	4301      	orrs	r1, r0
 800f634:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 800f638:	0391      	lsls	r1, r2, #14
 800f63a:	0c9b      	lsrs	r3, r3, #18
 800f63c:	430b      	orrs	r3, r1
 800f63e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 800f642:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800f646:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f64a:	4643      	mov	r3, r8
 800f64c:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 800f650:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f654:	4602      	mov	r2, r0
 800f656:	4053      	eors	r3, r2
 800f658:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 800f65c:	464b      	mov	r3, r9
 800f65e:	460a      	mov	r2, r1
 800f660:	4053      	eors	r3, r2
 800f662:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 800f666:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66e:	0a50      	lsrs	r0, r2, #9
 800f670:	05d9      	lsls	r1, r3, #23
 800f672:	4301      	orrs	r1, r0
 800f674:	f8c7 153c 	str.w	r1, [r7, #1340]	; 0x53c
 800f678:	0a59      	lsrs	r1, r3, #9
 800f67a:	05d3      	lsls	r3, r2, #23
 800f67c:	430b      	orrs	r3, r1
 800f67e:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 800f682:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800f686:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f68a:	4643      	mov	r3, r8
 800f68c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800f690:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f694:	4602      	mov	r2, r0
 800f696:	4053      	eors	r3, r2
 800f698:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 800f69c:	464b      	mov	r3, r9
 800f69e:	460a      	mov	r2, r1
 800f6a0:	4053      	eors	r3, r2
 800f6a2:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 800f6a6:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800f6aa:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	18e3      	adds	r3, r4, r3
 800f6b2:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	eb45 0303 	adc.w	r3, r5, r3
 800f6bc:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800f6c0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f6c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f6c8:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800f6cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f6d0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800f6d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f6d8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e0:	ea80 0602 	eor.w	r6, r0, r2
 800f6e4:	f8c7 6520 	str.w	r6, [r7, #1312]	; 0x520
 800f6e8:	404b      	eors	r3, r1
 800f6ea:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800f6ee:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800f6f2:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f6f6:	460b      	mov	r3, r1
 800f6f8:	4023      	ands	r3, r4
 800f6fa:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 800f6fe:	4613      	mov	r3, r2
 800f700:	402b      	ands	r3, r5
 800f702:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800f706:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800f70a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f70e:	460b      	mov	r3, r1
 800f710:	ea88 0303 	eor.w	r3, r8, r3
 800f714:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 800f718:	4613      	mov	r3, r2
 800f71a:	ea89 0303 	eor.w	r3, r9, r3
 800f71e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800f722:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800f726:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f72a:	4623      	mov	r3, r4
 800f72c:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 800f730:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f734:	4602      	mov	r2, r0
 800f736:	189b      	adds	r3, r3, r2
 800f738:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 800f73c:	462b      	mov	r3, r5
 800f73e:	460a      	mov	r2, r1
 800f740:	4153      	adcs	r3, r2
 800f742:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 800f746:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f74a:	3301      	adds	r3, #1
 800f74c:	4a22      	ldr	r2, [pc, #136]	; (800f7d8 <sha512_compress+0x95c>)
 800f74e:	00db      	lsls	r3, r3, #3
 800f750:	4413      	add	r3, r2
 800f752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f756:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 800f75a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f75e:	4621      	mov	r1, r4
 800f760:	1889      	adds	r1, r1, r2
 800f762:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 800f766:	4629      	mov	r1, r5
 800f768:	eb41 0303 	adc.w	r3, r1, r3
 800f76c:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800f770:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800f774:	3301      	adds	r3, #1
 800f776:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800f77a:	00db      	lsls	r3, r3, #3
 800f77c:	4413      	add	r3, r2
 800f77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f782:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 800f786:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f78a:	4621      	mov	r1, r4
 800f78c:	1889      	adds	r1, r1, r2
 800f78e:	66b9      	str	r1, [r7, #104]	; 0x68
 800f790:	4629      	mov	r1, r5
 800f792:	eb41 0303 	adc.w	r3, r1, r3
 800f796:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f798:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800f79c:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 800f7a0:	e9c2 3400 	strd	r3, r4, [r2]
 800f7a4:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ac:	0118      	lsls	r0, r3, #4
 800f7ae:	0f11      	lsrs	r1, r2, #28
 800f7b0:	4301      	orrs	r1, r0
 800f7b2:	f8c7 14f8 	str.w	r1, [r7, #1272]	; 0x4f8
 800f7b6:	0111      	lsls	r1, r2, #4
 800f7b8:	0f1b      	lsrs	r3, r3, #28
 800f7ba:	430b      	orrs	r3, r1
 800f7bc:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 800f7c0:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c8:	0890      	lsrs	r0, r2, #2
 800f7ca:	0799      	lsls	r1, r3, #30
 800f7cc:	4301      	orrs	r1, r0
 800f7ce:	f8c7 14f4 	str.w	r1, [r7, #1268]	; 0x4f4
 800f7d2:	0899      	lsrs	r1, r3, #2
 800f7d4:	0793      	lsls	r3, r2, #30
 800f7d6:	e001      	b.n	800f7dc <sha512_compress+0x960>
 800f7d8:	0801b918 	.word	0x0801b918
 800f7dc:	430b      	orrs	r3, r1
 800f7de:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 800f7e2:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800f7e6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f7ea:	4623      	mov	r3, r4
 800f7ec:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 800f7f0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	4053      	eors	r3, r2
 800f7f8:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 800f7fc:	462b      	mov	r3, r5
 800f7fe:	460a      	mov	r2, r1
 800f800:	4053      	eors	r3, r2
 800f802:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800f806:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80e:	09d0      	lsrs	r0, r2, #7
 800f810:	0659      	lsls	r1, r3, #25
 800f812:	4301      	orrs	r1, r0
 800f814:	f8c7 14e4 	str.w	r1, [r7, #1252]	; 0x4e4
 800f818:	09d9      	lsrs	r1, r3, #7
 800f81a:	0653      	lsls	r3, r2, #25
 800f81c:	430b      	orrs	r3, r1
 800f81e:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 800f822:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800f826:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f82a:	4623      	mov	r3, r4
 800f82c:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800f830:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f834:	4602      	mov	r2, r0
 800f836:	4053      	eors	r3, r2
 800f838:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800f83c:	462b      	mov	r3, r5
 800f83e:	460a      	mov	r2, r1
 800f840:	4053      	eors	r3, r2
 800f842:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800f846:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f84a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f84e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f856:	ea40 0402 	orr.w	r4, r0, r2
 800f85a:	f8c7 44d0 	str.w	r4, [r7, #1232]	; 0x4d0
 800f85e:	430b      	orrs	r3, r1
 800f860:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800f864:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800f868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86c:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 800f870:	e9d1 4500 	ldrd	r4, r5, [r1]
 800f874:	4621      	mov	r1, r4
 800f876:	4011      	ands	r1, r2
 800f878:	f8c7 14c8 	str.w	r1, [r7, #1224]	; 0x4c8
 800f87c:	4629      	mov	r1, r5
 800f87e:	400b      	ands	r3, r1
 800f880:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800f884:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800f888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f88c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800f890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f894:	ea00 0402 	and.w	r4, r0, r2
 800f898:	f8c7 44c0 	str.w	r4, [r7, #1216]	; 0x4c0
 800f89c:	400b      	ands	r3, r1
 800f89e:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800f8a2:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 800f8a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f8aa:	4623      	mov	r3, r4
 800f8ac:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 800f8b0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800f8bc:	462b      	mov	r3, r5
 800f8be:	460a      	mov	r2, r1
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800f8c6:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 800f8ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f8ce:	4623      	mov	r3, r4
 800f8d0:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800f8d4:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f8d8:	4602      	mov	r2, r0
 800f8da:	189b      	adds	r3, r3, r2
 800f8dc:	663b      	str	r3, [r7, #96]	; 0x60
 800f8de:	462b      	mov	r3, r5
 800f8e0:	460a      	mov	r2, r1
 800f8e2:	4153      	adcs	r3, r2
 800f8e4:	667b      	str	r3, [r7, #100]	; 0x64
 800f8e6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800f8ea:	f607 1258 	addw	r2, r7, #2392	; 0x958
 800f8ee:	e9c2 3400 	strd	r3, r4, [r2]
 800f8f2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f8f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8fa:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800f8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f902:	1884      	adds	r4, r0, r2
 800f904:	f8c7 44b0 	str.w	r4, [r7, #1200]	; 0x4b0
 800f908:	eb41 0303 	adc.w	r3, r1, r3
 800f90c:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800f910:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800f914:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f918:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800f91c:	e9c2 3400 	strd	r3, r4, [r2]
 800f920:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800f924:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f928:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f930:	1884      	adds	r4, r0, r2
 800f932:	f8c7 44a8 	str.w	r4, [r7, #1192]	; 0x4a8
 800f936:	eb41 0303 	adc.w	r3, r1, r3
 800f93a:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800f93e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800f942:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f946:	f607 1248 	addw	r2, r7, #2376	; 0x948
 800f94a:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],i+2);
 800f94e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800f952:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f956:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f95e:	0498      	lsls	r0, r3, #18
 800f960:	0b91      	lsrs	r1, r2, #14
 800f962:	4301      	orrs	r1, r0
 800f964:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 800f968:	0491      	lsls	r1, r2, #18
 800f96a:	0b9b      	lsrs	r3, r3, #14
 800f96c:	430b      	orrs	r3, r1
 800f96e:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 800f972:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97a:	0398      	lsls	r0, r3, #14
 800f97c:	0c91      	lsrs	r1, r2, #18
 800f97e:	4301      	orrs	r1, r0
 800f980:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 800f984:	0391      	lsls	r1, r2, #14
 800f986:	0c9b      	lsrs	r3, r3, #18
 800f988:	430b      	orrs	r3, r1
 800f98a:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800f98e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800f992:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f996:	4643      	mov	r3, r8
 800f998:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800f99c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f9a0:	4602      	mov	r2, r0
 800f9a2:	4053      	eors	r3, r2
 800f9a4:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 800f9a8:	464b      	mov	r3, r9
 800f9aa:	460a      	mov	r2, r1
 800f9ac:	4053      	eors	r3, r2
 800f9ae:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 800f9b2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800f9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ba:	0a50      	lsrs	r0, r2, #9
 800f9bc:	05d9      	lsls	r1, r3, #23
 800f9be:	4301      	orrs	r1, r0
 800f9c0:	f8c7 148c 	str.w	r1, [r7, #1164]	; 0x48c
 800f9c4:	0a59      	lsrs	r1, r3, #9
 800f9c6:	05d3      	lsls	r3, r2, #23
 800f9c8:	430b      	orrs	r3, r1
 800f9ca:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 800f9ce:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800f9d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9d6:	4643      	mov	r3, r8
 800f9d8:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 800f9dc:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	4053      	eors	r3, r2
 800f9e4:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 800f9e8:	464b      	mov	r3, r9
 800f9ea:	460a      	mov	r2, r1
 800f9ec:	4053      	eors	r3, r2
 800f9ee:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 800f9f2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800f9f6:	e9d3 1200 	ldrd	r1, r2, [r3]
 800f9fa:	460b      	mov	r3, r1
 800f9fc:	18e3      	adds	r3, r4, r3
 800f9fe:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800fa02:	4613      	mov	r3, r2
 800fa04:	eb45 0303 	adc.w	r3, r5, r3
 800fa08:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800fa0c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800fa10:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa14:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800fa18:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fa1c:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800fa20:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fa24:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800fa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2c:	ea80 0602 	eor.w	r6, r0, r2
 800fa30:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 800fa34:	404b      	eors	r3, r1
 800fa36:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 800fa3a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800fa3e:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fa42:	460b      	mov	r3, r1
 800fa44:	4023      	ands	r3, r4
 800fa46:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800fa4a:	4613      	mov	r3, r2
 800fa4c:	402b      	ands	r3, r5
 800fa4e:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 800fa52:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800fa56:	e9d3 1200 	ldrd	r1, r2, [r3]
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	ea88 0303 	eor.w	r3, r8, r3
 800fa60:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 800fa64:	4613      	mov	r3, r2
 800fa66:	ea89 0303 	eor.w	r3, r9, r3
 800fa6a:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800fa6e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800fa72:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fa76:	4623      	mov	r3, r4
 800fa78:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 800fa7c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fa80:	4602      	mov	r2, r0
 800fa82:	189b      	adds	r3, r3, r2
 800fa84:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800fa88:	462b      	mov	r3, r5
 800fa8a:	460a      	mov	r2, r1
 800fa8c:	4153      	adcs	r3, r2
 800fa8e:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800fa92:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800fa96:	3302      	adds	r3, #2
 800fa98:	4af4      	ldr	r2, [pc, #976]	; (800fe6c <sha512_compress+0xff0>)
 800fa9a:	00db      	lsls	r3, r3, #3
 800fa9c:	4413      	add	r3, r2
 800fa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa2:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 800faa6:	e9d1 4500 	ldrd	r4, r5, [r1]
 800faaa:	4621      	mov	r1, r4
 800faac:	1889      	adds	r1, r1, r2
 800faae:	f8c7 1450 	str.w	r1, [r7, #1104]	; 0x450
 800fab2:	4629      	mov	r1, r5
 800fab4:	eb41 0303 	adc.w	r3, r1, r3
 800fab8:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800fabc:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800fac0:	3302      	adds	r3, #2
 800fac2:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800fac6:	00db      	lsls	r3, r3, #3
 800fac8:	4413      	add	r3, r2
 800faca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800face:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 800fad2:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fad6:	4621      	mov	r1, r4
 800fad8:	1889      	adds	r1, r1, r2
 800fada:	65b9      	str	r1, [r7, #88]	; 0x58
 800fadc:	4629      	mov	r1, r5
 800fade:	eb41 0303 	adc.w	r3, r1, r3
 800fae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fae4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800fae8:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 800faec:	e9c2 3400 	strd	r3, r4, [r2]
 800faf0:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800faf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf8:	0118      	lsls	r0, r3, #4
 800fafa:	0f11      	lsrs	r1, r2, #28
 800fafc:	4301      	orrs	r1, r0
 800fafe:	f8c7 1448 	str.w	r1, [r7, #1096]	; 0x448
 800fb02:	0111      	lsls	r1, r2, #4
 800fb04:	0f1b      	lsrs	r3, r3, #28
 800fb06:	430b      	orrs	r3, r1
 800fb08:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 800fb0c:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800fb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb14:	0890      	lsrs	r0, r2, #2
 800fb16:	0799      	lsls	r1, r3, #30
 800fb18:	4301      	orrs	r1, r0
 800fb1a:	f8c7 1444 	str.w	r1, [r7, #1092]	; 0x444
 800fb1e:	0899      	lsrs	r1, r3, #2
 800fb20:	0793      	lsls	r3, r2, #30
 800fb22:	430b      	orrs	r3, r1
 800fb24:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 800fb28:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800fb2c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fb30:	4623      	mov	r3, r4
 800fb32:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800fb36:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	4053      	eors	r3, r2
 800fb3e:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 800fb42:	462b      	mov	r3, r5
 800fb44:	460a      	mov	r2, r1
 800fb46:	4053      	eors	r3, r2
 800fb48:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 800fb4c:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800fb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb54:	09d0      	lsrs	r0, r2, #7
 800fb56:	0659      	lsls	r1, r3, #25
 800fb58:	4301      	orrs	r1, r0
 800fb5a:	f8c7 1434 	str.w	r1, [r7, #1076]	; 0x434
 800fb5e:	09d9      	lsrs	r1, r3, #7
 800fb60:	0653      	lsls	r3, r2, #25
 800fb62:	430b      	orrs	r3, r1
 800fb64:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 800fb68:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800fb6c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fb70:	4623      	mov	r3, r4
 800fb72:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 800fb76:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	4053      	eors	r3, r2
 800fb7e:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 800fb82:	462b      	mov	r3, r5
 800fb84:	460a      	mov	r2, r1
 800fb86:	4053      	eors	r3, r2
 800fb88:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800fb8c:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800fb90:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb94:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800fb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9c:	ea40 0402 	orr.w	r4, r0, r2
 800fba0:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
 800fba4:	430b      	orrs	r3, r1
 800fba6:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800fbaa:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800fbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb2:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800fbb6:	e9d1 4500 	ldrd	r4, r5, [r1]
 800fbba:	4621      	mov	r1, r4
 800fbbc:	4011      	ands	r1, r2
 800fbbe:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 800fbc2:	4629      	mov	r1, r5
 800fbc4:	400b      	ands	r3, r1
 800fbc6:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800fbca:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800fbce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fbd2:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800fbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbda:	ea00 0402 	and.w	r4, r0, r2
 800fbde:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 800fbe2:	400b      	ands	r3, r1
 800fbe4:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800fbe8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800fbec:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fbf0:	4623      	mov	r3, r4
 800fbf2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800fbf6:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fbfa:	4602      	mov	r2, r0
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 800fc02:	462b      	mov	r3, r5
 800fc04:	460a      	mov	r2, r1
 800fc06:	4313      	orrs	r3, r2
 800fc08:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 800fc0c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800fc10:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fc14:	4623      	mov	r3, r4
 800fc16:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800fc1a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fc1e:	4602      	mov	r2, r0
 800fc20:	189b      	adds	r3, r3, r2
 800fc22:	653b      	str	r3, [r7, #80]	; 0x50
 800fc24:	462b      	mov	r3, r5
 800fc26:	460a      	mov	r2, r1
 800fc28:	4153      	adcs	r3, r2
 800fc2a:	657b      	str	r3, [r7, #84]	; 0x54
 800fc2c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800fc30:	f607 1258 	addw	r2, r7, #2392	; 0x958
 800fc34:	e9c2 3400 	strd	r3, r4, [r2]
 800fc38:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800fc3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc40:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800fc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc48:	1884      	adds	r4, r0, r2
 800fc4a:	f8c7 4400 	str.w	r4, [r7, #1024]	; 0x400
 800fc4e:	eb41 0303 	adc.w	r3, r1, r3
 800fc52:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800fc56:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800fc5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fc5e:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 800fc62:	e9c2 3400 	strd	r3, r4, [r2]
 800fc66:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800fc6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fc6e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800fc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc76:	1884      	adds	r4, r0, r2
 800fc78:	f8c7 43f8 	str.w	r4, [r7, #1016]	; 0x3f8
 800fc7c:	eb41 0303 	adc.w	r3, r1, r3
 800fc80:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 800fc84:	e9d7 34fe 	ldrd	r3, r4, [r7, #1016]	; 0x3f8
 800fc88:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 800fc8c:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],i+3);
 800fc90:	f607 1338 	addw	r3, r7, #2360	; 0x938
 800fc94:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fc98:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800fc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca0:	0498      	lsls	r0, r3, #18
 800fca2:	0b91      	lsrs	r1, r2, #14
 800fca4:	4301      	orrs	r1, r0
 800fca6:	f8c7 13f0 	str.w	r1, [r7, #1008]	; 0x3f0
 800fcaa:	0491      	lsls	r1, r2, #18
 800fcac:	0b9b      	lsrs	r3, r3, #14
 800fcae:	430b      	orrs	r3, r1
 800fcb0:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 800fcb4:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800fcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcbc:	0398      	lsls	r0, r3, #14
 800fcbe:	0c91      	lsrs	r1, r2, #18
 800fcc0:	4301      	orrs	r1, r0
 800fcc2:	f8c7 13e8 	str.w	r1, [r7, #1000]	; 0x3e8
 800fcc6:	0391      	lsls	r1, r2, #14
 800fcc8:	0c9b      	lsrs	r3, r3, #18
 800fcca:	430b      	orrs	r3, r1
 800fccc:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800fcd0:	e9d7 89fc 	ldrd	r8, r9, [r7, #1008]	; 0x3f0
 800fcd4:	4643      	mov	r3, r8
 800fcd6:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 800fcda:	4602      	mov	r2, r0
 800fcdc:	4053      	eors	r3, r2
 800fcde:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 800fce2:	464b      	mov	r3, r9
 800fce4:	460a      	mov	r2, r1
 800fce6:	4053      	eors	r3, r2
 800fce8:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800fcec:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800fcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf4:	0a50      	lsrs	r0, r2, #9
 800fcf6:	05d9      	lsls	r1, r3, #23
 800fcf8:	4301      	orrs	r1, r0
 800fcfa:	f8c7 13dc 	str.w	r1, [r7, #988]	; 0x3dc
 800fcfe:	0a59      	lsrs	r1, r3, #9
 800fd00:	05d3      	lsls	r3, r2, #23
 800fd02:	430b      	orrs	r3, r1
 800fd04:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 800fd08:	e9d7 89f8 	ldrd	r8, r9, [r7, #992]	; 0x3e0
 800fd0c:	4643      	mov	r3, r8
 800fd0e:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 800fd12:	4602      	mov	r2, r0
 800fd14:	4053      	eors	r3, r2
 800fd16:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800fd1a:	464b      	mov	r3, r9
 800fd1c:	460a      	mov	r2, r1
 800fd1e:	4053      	eors	r3, r2
 800fd20:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 800fd24:	e9d7 12f4 	ldrd	r1, r2, [r7, #976]	; 0x3d0
 800fd28:	460b      	mov	r3, r1
 800fd2a:	18e3      	adds	r3, r4, r3
 800fd2c:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 800fd30:	4613      	mov	r3, r2
 800fd32:	eb45 0303 	adc.w	r3, r5, r3
 800fd36:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 800fd3a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800fd3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fd42:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800fd46:	e9d3 4500 	ldrd	r4, r5, [r3]
 800fd4a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800fd4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd52:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800fd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5a:	ea80 0602 	eor.w	r6, r0, r2
 800fd5e:	f8c7 63c0 	str.w	r6, [r7, #960]	; 0x3c0
 800fd62:	404b      	eors	r3, r1
 800fd64:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800fd68:	e9d7 12f0 	ldrd	r1, r2, [r7, #960]	; 0x3c0
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	4023      	ands	r3, r4
 800fd70:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 800fd74:	4613      	mov	r3, r2
 800fd76:	402b      	ands	r3, r5
 800fd78:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800fd7c:	e9d7 12ee 	ldrd	r1, r2, [r7, #952]	; 0x3b8
 800fd80:	460b      	mov	r3, r1
 800fd82:	ea88 0303 	eor.w	r3, r8, r3
 800fd86:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 800fd8a:	4613      	mov	r3, r2
 800fd8c:	ea89 0303 	eor.w	r3, r9, r3
 800fd90:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 800fd94:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	; 0x3c8
 800fd98:	4623      	mov	r3, r4
 800fd9a:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 800fd9e:	4602      	mov	r2, r0
 800fda0:	189b      	adds	r3, r3, r2
 800fda2:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 800fda6:	462b      	mov	r3, r5
 800fda8:	460a      	mov	r2, r1
 800fdaa:	4153      	adcs	r3, r2
 800fdac:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 800fdb0:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800fdb4:	3303      	adds	r3, #3
 800fdb6:	4a2d      	ldr	r2, [pc, #180]	; (800fe6c <sha512_compress+0xff0>)
 800fdb8:	00db      	lsls	r3, r3, #3
 800fdba:	4413      	add	r3, r2
 800fdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc0:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 800fdc4:	4621      	mov	r1, r4
 800fdc6:	1889      	adds	r1, r1, r2
 800fdc8:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 800fdcc:	4629      	mov	r1, r5
 800fdce:	eb41 0303 	adc.w	r3, r1, r3
 800fdd2:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 800fdd6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 800fdda:	3303      	adds	r3, #3
 800fddc:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800fde0:	00db      	lsls	r3, r3, #3
 800fde2:	4413      	add	r3, r2
 800fde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde8:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 800fdec:	4621      	mov	r1, r4
 800fdee:	1889      	adds	r1, r1, r2
 800fdf0:	64b9      	str	r1, [r7, #72]	; 0x48
 800fdf2:	4629      	mov	r1, r5
 800fdf4:	eb41 0303 	adc.w	r3, r1, r3
 800fdf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fdfa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800fdfe:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 800fe02:	e9c2 3400 	strd	r3, r4, [r2]
 800fe06:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800fe0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0e:	0118      	lsls	r0, r3, #4
 800fe10:	0f11      	lsrs	r1, r2, #28
 800fe12:	4301      	orrs	r1, r0
 800fe14:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 800fe18:	0111      	lsls	r1, r2, #4
 800fe1a:	0f1b      	lsrs	r3, r3, #28
 800fe1c:	430b      	orrs	r3, r1
 800fe1e:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800fe22:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2a:	0890      	lsrs	r0, r2, #2
 800fe2c:	0799      	lsls	r1, r3, #30
 800fe2e:	4301      	orrs	r1, r0
 800fe30:	f8c7 1394 	str.w	r1, [r7, #916]	; 0x394
 800fe34:	0899      	lsrs	r1, r3, #2
 800fe36:	0793      	lsls	r3, r2, #30
 800fe38:	430b      	orrs	r3, r1
 800fe3a:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 800fe3e:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 800fe42:	4623      	mov	r3, r4
 800fe44:	e9d7 01e4 	ldrd	r0, r1, [r7, #912]	; 0x390
 800fe48:	4602      	mov	r2, r0
 800fe4a:	4053      	eors	r3, r2
 800fe4c:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 800fe50:	462b      	mov	r3, r5
 800fe52:	460a      	mov	r2, r1
 800fe54:	4053      	eors	r3, r2
 800fe56:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800fe5a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe62:	09d0      	lsrs	r0, r2, #7
 800fe64:	0659      	lsls	r1, r3, #25
 800fe66:	4301      	orrs	r1, r0
 800fe68:	e002      	b.n	800fe70 <sha512_compress+0xff4>
 800fe6a:	bf00      	nop
 800fe6c:	0801b918 	.word	0x0801b918
 800fe70:	f8c7 1384 	str.w	r1, [r7, #900]	; 0x384
 800fe74:	09d9      	lsrs	r1, r3, #7
 800fe76:	0653      	lsls	r3, r2, #25
 800fe78:	430b      	orrs	r3, r1
 800fe7a:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 800fe7e:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 800fe82:	4623      	mov	r3, r4
 800fe84:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 800fe88:	4602      	mov	r2, r0
 800fe8a:	4053      	eors	r3, r2
 800fe8c:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 800fe90:	462b      	mov	r3, r5
 800fe92:	460a      	mov	r2, r1
 800fe94:	4053      	eors	r3, r2
 800fe96:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 800fe9a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800fe9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fea2:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800fea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feaa:	ea40 0402 	orr.w	r4, r0, r2
 800feae:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 800feb2:	430b      	orrs	r3, r1
 800feb4:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800feb8:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800febc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec0:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	; 0x370
 800fec4:	4621      	mov	r1, r4
 800fec6:	4011      	ands	r1, r2
 800fec8:	f8c7 1368 	str.w	r1, [r7, #872]	; 0x368
 800fecc:	4629      	mov	r1, r5
 800fece:	400b      	ands	r3, r1
 800fed0:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800fed4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800fed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fedc:	f607 1348 	addw	r3, r7, #2376	; 0x948
 800fee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee4:	ea00 0402 	and.w	r4, r0, r2
 800fee8:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 800feec:	400b      	ands	r3, r1
 800feee:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800fef2:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 800fef6:	4623      	mov	r3, r4
 800fef8:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 800fefc:	4602      	mov	r2, r0
 800fefe:	4313      	orrs	r3, r2
 800ff00:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 800ff04:	462b      	mov	r3, r5
 800ff06:	460a      	mov	r2, r1
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800ff0e:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 800ff12:	4623      	mov	r3, r4
 800ff14:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	; 0x358
 800ff18:	4602      	mov	r2, r0
 800ff1a:	189b      	adds	r3, r3, r2
 800ff1c:	643b      	str	r3, [r7, #64]	; 0x40
 800ff1e:	462b      	mov	r3, r5
 800ff20:	460a      	mov	r2, r1
 800ff22:	4153      	adcs	r3, r2
 800ff24:	647b      	str	r3, [r7, #68]	; 0x44
 800ff26:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800ff2a:	f607 1258 	addw	r2, r7, #2392	; 0x958
 800ff2e:	e9c2 3400 	strd	r3, r4, [r2]
 800ff32:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800ff36:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff3a:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800ff3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff42:	1884      	adds	r4, r0, r2
 800ff44:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 800ff48:	eb41 0303 	adc.w	r3, r1, r3
 800ff4c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800ff50:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 800ff54:	f607 1218 	addw	r2, r7, #2328	; 0x918
 800ff58:	e9c2 3400 	strd	r3, r4, [r2]
 800ff5c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800ff60:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ff64:	f607 1358 	addw	r3, r7, #2392	; 0x958
 800ff68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6c:	1884      	adds	r4, r0, r2
 800ff6e:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 800ff72:	eb41 0303 	adc.w	r3, r1, r3
 800ff76:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800ff7a:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 800ff7e:	f607 1238 	addw	r2, r7, #2360	; 0x938
 800ff82:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],i+4);
 800ff86:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800ff8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ff8e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800ff92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff96:	0498      	lsls	r0, r3, #18
 800ff98:	0b91      	lsrs	r1, r2, #14
 800ff9a:	4301      	orrs	r1, r0
 800ff9c:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 800ffa0:	0491      	lsls	r1, r2, #18
 800ffa2:	0b9b      	lsrs	r3, r3, #14
 800ffa4:	430b      	orrs	r3, r1
 800ffa6:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800ffaa:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800ffae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb2:	0398      	lsls	r0, r3, #14
 800ffb4:	0c91      	lsrs	r1, r2, #18
 800ffb6:	4301      	orrs	r1, r0
 800ffb8:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 800ffbc:	0391      	lsls	r1, r2, #14
 800ffbe:	0c9b      	lsrs	r3, r3, #18
 800ffc0:	430b      	orrs	r3, r1
 800ffc2:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800ffc6:	e9d7 89d0 	ldrd	r8, r9, [r7, #832]	; 0x340
 800ffca:	4643      	mov	r3, r8
 800ffcc:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	4053      	eors	r3, r2
 800ffd4:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 800ffd8:	464b      	mov	r3, r9
 800ffda:	460a      	mov	r2, r1
 800ffdc:	4053      	eors	r3, r2
 800ffde:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800ffe2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800ffe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffea:	0a50      	lsrs	r0, r2, #9
 800ffec:	05d9      	lsls	r1, r3, #23
 800ffee:	4301      	orrs	r1, r0
 800fff0:	f8c7 132c 	str.w	r1, [r7, #812]	; 0x32c
 800fff4:	0a59      	lsrs	r1, r3, #9
 800fff6:	05d3      	lsls	r3, r2, #23
 800fff8:	430b      	orrs	r3, r1
 800fffa:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800fffe:	e9d7 89cc 	ldrd	r8, r9, [r7, #816]	; 0x330
 8010002:	4643      	mov	r3, r8
 8010004:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8010008:	4602      	mov	r2, r0
 801000a:	4053      	eors	r3, r2
 801000c:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8010010:	464b      	mov	r3, r9
 8010012:	460a      	mov	r2, r1
 8010014:	4053      	eors	r3, r2
 8010016:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 801001a:	e9d7 12c8 	ldrd	r1, r2, [r7, #800]	; 0x320
 801001e:	460b      	mov	r3, r1
 8010020:	18e3      	adds	r3, r4, r3
 8010022:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 8010026:	4613      	mov	r3, r2
 8010028:	eb45 0303 	adc.w	r3, r5, r3
 801002c:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8010030:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8010034:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010038:	f607 1318 	addw	r3, r7, #2328	; 0x918
 801003c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010040:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010044:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010048:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801004c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010050:	ea80 0602 	eor.w	r6, r0, r2
 8010054:	f8c7 6310 	str.w	r6, [r7, #784]	; 0x310
 8010058:	404b      	eors	r3, r1
 801005a:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 801005e:	e9d7 12c4 	ldrd	r1, r2, [r7, #784]	; 0x310
 8010062:	460b      	mov	r3, r1
 8010064:	4023      	ands	r3, r4
 8010066:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801006a:	4613      	mov	r3, r2
 801006c:	402b      	ands	r3, r5
 801006e:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8010072:	e9d7 12c2 	ldrd	r1, r2, [r7, #776]	; 0x308
 8010076:	460b      	mov	r3, r1
 8010078:	ea88 0303 	eor.w	r3, r8, r3
 801007c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8010080:	4613      	mov	r3, r2
 8010082:	ea89 0303 	eor.w	r3, r9, r3
 8010086:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801008a:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	; 0x318
 801008e:	4623      	mov	r3, r4
 8010090:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8010094:	4602      	mov	r2, r0
 8010096:	189b      	adds	r3, r3, r2
 8010098:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 801009c:	462b      	mov	r3, r5
 801009e:	460a      	mov	r2, r1
 80100a0:	4153      	adcs	r3, r2
 80100a2:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80100a6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80100aa:	3304      	adds	r3, #4
 80100ac:	4af4      	ldr	r2, [pc, #976]	; (8010480 <sha512_compress+0x1604>)
 80100ae:	00db      	lsls	r3, r3, #3
 80100b0:	4413      	add	r3, r2
 80100b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b6:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 80100ba:	4621      	mov	r1, r4
 80100bc:	1889      	adds	r1, r1, r2
 80100be:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 80100c2:	4629      	mov	r1, r5
 80100c4:	eb41 0303 	adc.w	r3, r1, r3
 80100c8:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80100cc:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80100d0:	3304      	adds	r3, #4
 80100d2:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80100d6:	00db      	lsls	r3, r3, #3
 80100d8:	4413      	add	r3, r2
 80100da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100de:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 80100e2:	4621      	mov	r1, r4
 80100e4:	1889      	adds	r1, r1, r2
 80100e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80100e8:	4629      	mov	r1, r5
 80100ea:	eb41 0303 	adc.w	r3, r1, r3
 80100ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100f0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80100f4:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80100f8:	e9c2 3400 	strd	r3, r4, [r2]
 80100fc:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8010100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010104:	0118      	lsls	r0, r3, #4
 8010106:	0f11      	lsrs	r1, r2, #28
 8010108:	4301      	orrs	r1, r0
 801010a:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 801010e:	0111      	lsls	r1, r2, #4
 8010110:	0f1b      	lsrs	r3, r3, #28
 8010112:	430b      	orrs	r3, r1
 8010114:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8010118:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801011c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010120:	0890      	lsrs	r0, r2, #2
 8010122:	0799      	lsls	r1, r3, #30
 8010124:	4301      	orrs	r1, r0
 8010126:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 801012a:	0899      	lsrs	r1, r3, #2
 801012c:	0793      	lsls	r3, r2, #30
 801012e:	430b      	orrs	r3, r1
 8010130:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8010134:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	; 0x2e8
 8010138:	4623      	mov	r3, r4
 801013a:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 801013e:	4602      	mov	r2, r0
 8010140:	4053      	eors	r3, r2
 8010142:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8010146:	462b      	mov	r3, r5
 8010148:	460a      	mov	r2, r1
 801014a:	4053      	eors	r3, r2
 801014c:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8010150:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8010154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010158:	09d0      	lsrs	r0, r2, #7
 801015a:	0659      	lsls	r1, r3, #25
 801015c:	4301      	orrs	r1, r0
 801015e:	f8c7 12d4 	str.w	r1, [r7, #724]	; 0x2d4
 8010162:	09d9      	lsrs	r1, r3, #7
 8010164:	0653      	lsls	r3, r2, #25
 8010166:	430b      	orrs	r3, r1
 8010168:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 801016c:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	; 0x2d8
 8010170:	4623      	mov	r3, r4
 8010172:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 8010176:	4602      	mov	r2, r0
 8010178:	4053      	eors	r3, r2
 801017a:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 801017e:	462b      	mov	r3, r5
 8010180:	460a      	mov	r2, r1
 8010182:	4053      	eors	r3, r2
 8010184:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8010188:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801018c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010190:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010198:	ea40 0402 	orr.w	r4, r0, r2
 801019c:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 80101a0:	430b      	orrs	r3, r1
 80101a2:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80101a6:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80101aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ae:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 80101b2:	4621      	mov	r1, r4
 80101b4:	4011      	ands	r1, r2
 80101b6:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 80101ba:	4629      	mov	r1, r5
 80101bc:	400b      	ands	r3, r1
 80101be:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80101c2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80101c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80101ca:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d2:	ea00 0402 	and.w	r4, r0, r2
 80101d6:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 80101da:	400b      	ands	r3, r1
 80101dc:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80101e0:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 80101e4:	4623      	mov	r3, r4
 80101e6:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 80101ea:	4602      	mov	r2, r0
 80101ec:	4313      	orrs	r3, r2
 80101ee:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 80101f2:	462b      	mov	r3, r5
 80101f4:	460a      	mov	r2, r1
 80101f6:	4313      	orrs	r3, r2
 80101f8:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80101fc:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 8010200:	4623      	mov	r3, r4
 8010202:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 8010206:	4602      	mov	r2, r0
 8010208:	189b      	adds	r3, r3, r2
 801020a:	633b      	str	r3, [r7, #48]	; 0x30
 801020c:	462b      	mov	r3, r5
 801020e:	460a      	mov	r2, r1
 8010210:	4153      	adcs	r3, r2
 8010212:	637b      	str	r3, [r7, #52]	; 0x34
 8010214:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010218:	f607 1258 	addw	r2, r7, #2392	; 0x958
 801021c:	e9c2 3400 	strd	r3, r4, [r2]
 8010220:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010228:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 801022c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010230:	1884      	adds	r4, r0, r2
 8010232:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 8010236:	eb41 0303 	adc.w	r3, r1, r3
 801023a:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 801023e:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 8010242:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 8010246:	e9c2 3400 	strd	r3, r4, [r2]
 801024a:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 801024e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010252:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8010256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025a:	1884      	adds	r4, r0, r2
 801025c:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 8010260:	eb41 0303 	adc.w	r3, r1, r3
 8010264:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8010268:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 801026c:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8010270:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],i+5);
 8010274:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8010278:	e9d3 4500 	ldrd	r4, r5, [r3]
 801027c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010284:	0498      	lsls	r0, r3, #18
 8010286:	0b91      	lsrs	r1, r2, #14
 8010288:	4301      	orrs	r1, r0
 801028a:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 801028e:	0491      	lsls	r1, r2, #18
 8010290:	0b9b      	lsrs	r3, r3, #14
 8010292:	430b      	orrs	r3, r1
 8010294:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8010298:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 801029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a0:	0398      	lsls	r0, r3, #14
 80102a2:	0c91      	lsrs	r1, r2, #18
 80102a4:	4301      	orrs	r1, r0
 80102a6:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 80102aa:	0391      	lsls	r1, r2, #14
 80102ac:	0c9b      	lsrs	r3, r3, #18
 80102ae:	430b      	orrs	r3, r1
 80102b0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80102b4:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 80102b8:	4643      	mov	r3, r8
 80102ba:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	; 0x288
 80102be:	4602      	mov	r2, r0
 80102c0:	4053      	eors	r3, r2
 80102c2:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80102c6:	464b      	mov	r3, r9
 80102c8:	460a      	mov	r2, r1
 80102ca:	4053      	eors	r3, r2
 80102cc:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80102d0:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80102d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d8:	0a50      	lsrs	r0, r2, #9
 80102da:	05d9      	lsls	r1, r3, #23
 80102dc:	4301      	orrs	r1, r0
 80102de:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 80102e2:	0a59      	lsrs	r1, r3, #9
 80102e4:	05d3      	lsls	r3, r2, #23
 80102e6:	430b      	orrs	r3, r1
 80102e8:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 80102ec:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 80102f0:	4643      	mov	r3, r8
 80102f2:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80102f6:	4602      	mov	r2, r0
 80102f8:	4053      	eors	r3, r2
 80102fa:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 80102fe:	464b      	mov	r3, r9
 8010300:	460a      	mov	r2, r1
 8010302:	4053      	eors	r3, r2
 8010304:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8010308:	e9d7 129c 	ldrd	r1, r2, [r7, #624]	; 0x270
 801030c:	460b      	mov	r3, r1
 801030e:	18e3      	adds	r3, r4, r3
 8010310:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8010314:	4613      	mov	r3, r2
 8010316:	eb45 0303 	adc.w	r3, r5, r3
 801031a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 801031e:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010322:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010326:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 801032a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801032e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8010332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010336:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033e:	ea80 0602 	eor.w	r6, r0, r2
 8010342:	f8c7 6260 	str.w	r6, [r7, #608]	; 0x260
 8010346:	404b      	eors	r3, r1
 8010348:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 801034c:	e9d7 1298 	ldrd	r1, r2, [r7, #608]	; 0x260
 8010350:	460b      	mov	r3, r1
 8010352:	4023      	ands	r3, r4
 8010354:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8010358:	4613      	mov	r3, r2
 801035a:	402b      	ands	r3, r5
 801035c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010360:	e9d7 1296 	ldrd	r1, r2, [r7, #600]	; 0x258
 8010364:	460b      	mov	r3, r1
 8010366:	ea88 0303 	eor.w	r3, r8, r3
 801036a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 801036e:	4613      	mov	r3, r2
 8010370:	ea89 0303 	eor.w	r3, r9, r3
 8010374:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8010378:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 801037c:	4623      	mov	r3, r4
 801037e:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 8010382:	4602      	mov	r2, r0
 8010384:	189b      	adds	r3, r3, r2
 8010386:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 801038a:	462b      	mov	r3, r5
 801038c:	460a      	mov	r2, r1
 801038e:	4153      	adcs	r3, r2
 8010390:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8010394:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010398:	3305      	adds	r3, #5
 801039a:	4a39      	ldr	r2, [pc, #228]	; (8010480 <sha512_compress+0x1604>)
 801039c:	00db      	lsls	r3, r3, #3
 801039e:	4413      	add	r3, r2
 80103a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a4:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 80103a8:	4621      	mov	r1, r4
 80103aa:	1889      	adds	r1, r1, r2
 80103ac:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 80103b0:	4629      	mov	r1, r5
 80103b2:	eb41 0303 	adc.w	r3, r1, r3
 80103b6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80103ba:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80103be:	3305      	adds	r3, #5
 80103c0:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80103c4:	00db      	lsls	r3, r3, #3
 80103c6:	4413      	add	r3, r2
 80103c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103cc:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 80103d0:	4621      	mov	r1, r4
 80103d2:	1889      	adds	r1, r1, r2
 80103d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80103d6:	4629      	mov	r1, r5
 80103d8:	eb41 0303 	adc.w	r3, r1, r3
 80103dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103de:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80103e2:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80103e6:	e9c2 3400 	strd	r3, r4, [r2]
 80103ea:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80103ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f2:	0118      	lsls	r0, r3, #4
 80103f4:	0f11      	lsrs	r1, r2, #28
 80103f6:	4301      	orrs	r1, r0
 80103f8:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 80103fc:	0111      	lsls	r1, r2, #4
 80103fe:	0f1b      	lsrs	r3, r3, #28
 8010400:	430b      	orrs	r3, r1
 8010402:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8010406:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801040a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801040e:	0890      	lsrs	r0, r2, #2
 8010410:	0799      	lsls	r1, r3, #30
 8010412:	4301      	orrs	r1, r0
 8010414:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 8010418:	0899      	lsrs	r1, r3, #2
 801041a:	0793      	lsls	r3, r2, #30
 801041c:	430b      	orrs	r3, r1
 801041e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8010422:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 8010426:	4623      	mov	r3, r4
 8010428:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 801042c:	4602      	mov	r2, r0
 801042e:	4053      	eors	r3, r2
 8010430:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8010434:	462b      	mov	r3, r5
 8010436:	460a      	mov	r2, r1
 8010438:	4053      	eors	r3, r2
 801043a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 801043e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010446:	09d0      	lsrs	r0, r2, #7
 8010448:	0659      	lsls	r1, r3, #25
 801044a:	4301      	orrs	r1, r0
 801044c:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 8010450:	09d9      	lsrs	r1, r3, #7
 8010452:	0653      	lsls	r3, r2, #25
 8010454:	430b      	orrs	r3, r1
 8010456:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 801045a:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 801045e:	4623      	mov	r3, r4
 8010460:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8010464:	4602      	mov	r2, r0
 8010466:	4053      	eors	r3, r2
 8010468:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 801046c:	462b      	mov	r3, r5
 801046e:	460a      	mov	r2, r1
 8010470:	4053      	eors	r3, r2
 8010472:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8010476:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801047a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801047e:	e001      	b.n	8010484 <sha512_compress+0x1608>
 8010480:	0801b918 	.word	0x0801b918
 8010484:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8010488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048c:	ea40 0402 	orr.w	r4, r0, r2
 8010490:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 8010494:	430b      	orrs	r3, r1
 8010496:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 801049a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a2:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 80104a6:	4621      	mov	r1, r4
 80104a8:	4011      	ands	r1, r2
 80104aa:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 80104ae:	4629      	mov	r1, r5
 80104b0:	400b      	ands	r3, r1
 80104b2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80104b6:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80104ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80104be:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80104c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c6:	ea00 0402 	and.w	r4, r0, r2
 80104ca:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 80104ce:	400b      	ands	r3, r1
 80104d0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80104d4:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 80104d8:	4623      	mov	r3, r4
 80104da:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80104de:	4602      	mov	r2, r0
 80104e0:	4313      	orrs	r3, r2
 80104e2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80104e6:	462b      	mov	r3, r5
 80104e8:	460a      	mov	r2, r1
 80104ea:	4313      	orrs	r3, r2
 80104ec:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80104f0:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 80104f4:	4623      	mov	r3, r4
 80104f6:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80104fa:	4602      	mov	r2, r0
 80104fc:	189b      	adds	r3, r3, r2
 80104fe:	623b      	str	r3, [r7, #32]
 8010500:	462b      	mov	r3, r5
 8010502:	460a      	mov	r2, r1
 8010504:	4153      	adcs	r3, r2
 8010506:	627b      	str	r3, [r7, #36]	; 0x24
 8010508:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801050c:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8010510:	e9c2 3400 	strd	r3, r4, [r2]
 8010514:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8010518:	e9d3 0100 	ldrd	r0, r1, [r3]
 801051c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010524:	1884      	adds	r4, r0, r2
 8010526:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 801052a:	eb41 0303 	adc.w	r3, r1, r3
 801052e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8010532:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8010536:	f607 1248 	addw	r2, r7, #2376	; 0x948
 801053a:	e9c2 3400 	strd	r3, r4, [r2]
 801053e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010546:	f607 1358 	addw	r3, r7, #2392	; 0x958
 801054a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054e:	1884      	adds	r4, r0, r2
 8010550:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 8010554:	eb41 0303 	adc.w	r3, r1, r3
 8010558:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801055c:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8010560:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8010564:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],i+6);
 8010568:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801056c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010570:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8010574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010578:	0498      	lsls	r0, r3, #18
 801057a:	0b91      	lsrs	r1, r2, #14
 801057c:	4301      	orrs	r1, r0
 801057e:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8010582:	0491      	lsls	r1, r2, #18
 8010584:	0b9b      	lsrs	r3, r3, #14
 8010586:	430b      	orrs	r3, r1
 8010588:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 801058c:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8010590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010594:	0398      	lsls	r0, r3, #14
 8010596:	0c91      	lsrs	r1, r2, #18
 8010598:	4301      	orrs	r1, r0
 801059a:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 801059e:	0391      	lsls	r1, r2, #14
 80105a0:	0c9b      	lsrs	r3, r3, #18
 80105a2:	430b      	orrs	r3, r1
 80105a4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80105a8:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 80105ac:	4643      	mov	r3, r8
 80105ae:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80105b2:	4602      	mov	r2, r0
 80105b4:	4053      	eors	r3, r2
 80105b6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80105ba:	464b      	mov	r3, r9
 80105bc:	460a      	mov	r2, r1
 80105be:	4053      	eors	r3, r2
 80105c0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80105c4:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80105c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105cc:	0a50      	lsrs	r0, r2, #9
 80105ce:	05d9      	lsls	r1, r3, #23
 80105d0:	4301      	orrs	r1, r0
 80105d2:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 80105d6:	0a59      	lsrs	r1, r3, #9
 80105d8:	05d3      	lsls	r3, r2, #23
 80105da:	430b      	orrs	r3, r1
 80105dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80105e0:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	; 0x1d0
 80105e4:	4643      	mov	r3, r8
 80105e6:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 80105ea:	4602      	mov	r2, r0
 80105ec:	4053      	eors	r3, r2
 80105ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80105f2:	464b      	mov	r3, r9
 80105f4:	460a      	mov	r2, r1
 80105f6:	4053      	eors	r3, r2
 80105f8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80105fc:	e9d7 1270 	ldrd	r1, r2, [r7, #448]	; 0x1c0
 8010600:	460b      	mov	r3, r1
 8010602:	18e3      	adds	r3, r4, r3
 8010604:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8010608:	4613      	mov	r3, r2
 801060a:	eb45 0303 	adc.w	r3, r5, r3
 801060e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8010612:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8010616:	e9d3 8900 	ldrd	r8, r9, [r3]
 801061a:	f607 1348 	addw	r3, r7, #2376	; 0x948
 801061e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010622:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010626:	e9d3 0100 	ldrd	r0, r1, [r3]
 801062a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 801062e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010632:	ea80 0602 	eor.w	r6, r0, r2
 8010636:	f8c7 61b0 	str.w	r6, [r7, #432]	; 0x1b0
 801063a:	404b      	eors	r3, r1
 801063c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8010640:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8010644:	460b      	mov	r3, r1
 8010646:	4023      	ands	r3, r4
 8010648:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 801064c:	4613      	mov	r3, r2
 801064e:	402b      	ands	r3, r5
 8010650:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8010654:	e9d7 126a 	ldrd	r1, r2, [r7, #424]	; 0x1a8
 8010658:	460b      	mov	r3, r1
 801065a:	ea88 0303 	eor.w	r3, r8, r3
 801065e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8010662:	4613      	mov	r3, r2
 8010664:	ea89 0303 	eor.w	r3, r9, r3
 8010668:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 801066c:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8010670:	4623      	mov	r3, r4
 8010672:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8010676:	4602      	mov	r2, r0
 8010678:	189b      	adds	r3, r3, r2
 801067a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 801067e:	462b      	mov	r3, r5
 8010680:	460a      	mov	r2, r1
 8010682:	4153      	adcs	r3, r2
 8010684:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8010688:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801068c:	3306      	adds	r3, #6
 801068e:	4af5      	ldr	r2, [pc, #980]	; (8010a64 <sha512_compress+0x1be8>)
 8010690:	00db      	lsls	r3, r3, #3
 8010692:	4413      	add	r3, r2
 8010694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010698:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 801069c:	4621      	mov	r1, r4
 801069e:	1889      	adds	r1, r1, r2
 80106a0:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 80106a4:	4629      	mov	r1, r5
 80106a6:	eb41 0303 	adc.w	r3, r1, r3
 80106aa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80106ae:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80106b2:	3306      	adds	r3, #6
 80106b4:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80106b8:	00db      	lsls	r3, r3, #3
 80106ba:	4413      	add	r3, r2
 80106bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c0:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80106c4:	4621      	mov	r1, r4
 80106c6:	1889      	adds	r1, r1, r2
 80106c8:	61b9      	str	r1, [r7, #24]
 80106ca:	4629      	mov	r1, r5
 80106cc:	eb41 0303 	adc.w	r3, r1, r3
 80106d0:	61fb      	str	r3, [r7, #28]
 80106d2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80106d6:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80106da:	e9c2 3400 	strd	r3, r4, [r2]
 80106de:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80106e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e6:	0118      	lsls	r0, r3, #4
 80106e8:	0f11      	lsrs	r1, r2, #28
 80106ea:	4301      	orrs	r1, r0
 80106ec:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 80106f0:	0111      	lsls	r1, r2, #4
 80106f2:	0f1b      	lsrs	r3, r3, #28
 80106f4:	430b      	orrs	r3, r1
 80106f6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80106fa:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80106fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010702:	0890      	lsrs	r0, r2, #2
 8010704:	0799      	lsls	r1, r3, #30
 8010706:	4301      	orrs	r1, r0
 8010708:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 801070c:	0899      	lsrs	r1, r3, #2
 801070e:	0793      	lsls	r3, r2, #30
 8010710:	430b      	orrs	r3, r1
 8010712:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8010716:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 801071a:	4623      	mov	r3, r4
 801071c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8010720:	4602      	mov	r2, r0
 8010722:	4053      	eors	r3, r2
 8010724:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8010728:	462b      	mov	r3, r5
 801072a:	460a      	mov	r2, r1
 801072c:	4053      	eors	r3, r2
 801072e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8010732:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8010736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073a:	09d0      	lsrs	r0, r2, #7
 801073c:	0659      	lsls	r1, r3, #25
 801073e:	4301      	orrs	r1, r0
 8010740:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8010744:	09d9      	lsrs	r1, r3, #7
 8010746:	0653      	lsls	r3, r2, #25
 8010748:	430b      	orrs	r3, r1
 801074a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 801074e:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8010752:	4623      	mov	r3, r4
 8010754:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8010758:	4602      	mov	r2, r0
 801075a:	4053      	eors	r3, r2
 801075c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8010760:	462b      	mov	r3, r5
 8010762:	460a      	mov	r2, r1
 8010764:	4053      	eors	r3, r2
 8010766:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 801076a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801076e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010772:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077a:	ea40 0402 	orr.w	r4, r0, r2
 801077e:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 8010782:	430b      	orrs	r3, r1
 8010784:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8010788:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801078c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010790:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8010794:	4621      	mov	r1, r4
 8010796:	4011      	ands	r1, r2
 8010798:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 801079c:	4629      	mov	r1, r5
 801079e:	400b      	ands	r3, r1
 80107a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80107a4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80107a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80107ac:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80107b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b4:	ea00 0402 	and.w	r4, r0, r2
 80107b8:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80107bc:	400b      	ands	r3, r1
 80107be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80107c2:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80107c6:	4623      	mov	r3, r4
 80107c8:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80107cc:	4602      	mov	r2, r0
 80107ce:	4313      	orrs	r3, r2
 80107d0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80107d4:	462b      	mov	r3, r5
 80107d6:	460a      	mov	r2, r1
 80107d8:	4313      	orrs	r3, r2
 80107da:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80107de:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80107e2:	4623      	mov	r3, r4
 80107e4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80107e8:	4602      	mov	r2, r0
 80107ea:	189b      	adds	r3, r3, r2
 80107ec:	613b      	str	r3, [r7, #16]
 80107ee:	462b      	mov	r3, r5
 80107f0:	460a      	mov	r2, r1
 80107f2:	4153      	adcs	r3, r2
 80107f4:	617b      	str	r3, [r7, #20]
 80107f6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80107fa:	f607 1258 	addw	r2, r7, #2392	; 0x958
 80107fe:	e9c2 3400 	strd	r3, r4, [r2]
 8010802:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010806:	e9d3 0100 	ldrd	r0, r1, [r3]
 801080a:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 801080e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010812:	1884      	adds	r4, r0, r2
 8010814:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8010818:	eb41 0303 	adc.w	r3, r1, r3
 801081c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8010820:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8010824:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8010828:	e9c2 3400 	strd	r3, r4, [r2]
 801082c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010834:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8010838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801083c:	1884      	adds	r4, r0, r2
 801083e:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8010842:	eb41 0303 	adc.w	r3, r1, r3
 8010846:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801084a:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 801084e:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8010852:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],i+7);
 8010856:	f607 1318 	addw	r3, r7, #2328	; 0x918
 801085a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801085e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010866:	0498      	lsls	r0, r3, #18
 8010868:	0b91      	lsrs	r1, r2, #14
 801086a:	4301      	orrs	r1, r0
 801086c:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8010870:	0491      	lsls	r1, r2, #18
 8010872:	0b9b      	lsrs	r3, r3, #14
 8010874:	430b      	orrs	r3, r1
 8010876:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801087a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801087e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010882:	0398      	lsls	r0, r3, #14
 8010884:	0c91      	lsrs	r1, r2, #18
 8010886:	4301      	orrs	r1, r0
 8010888:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 801088c:	0391      	lsls	r1, r2, #14
 801088e:	0c9b      	lsrs	r3, r3, #18
 8010890:	430b      	orrs	r3, r1
 8010892:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8010896:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 801089a:	4643      	mov	r3, r8
 801089c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80108a0:	4602      	mov	r2, r0
 80108a2:	4053      	eors	r3, r2
 80108a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80108a8:	464b      	mov	r3, r9
 80108aa:	460a      	mov	r2, r1
 80108ac:	4053      	eors	r3, r2
 80108ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80108b2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80108b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ba:	0a50      	lsrs	r0, r2, #9
 80108bc:	05d9      	lsls	r1, r3, #23
 80108be:	4301      	orrs	r1, r0
 80108c0:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80108c4:	0a59      	lsrs	r1, r3, #9
 80108c6:	05d3      	lsls	r3, r2, #23
 80108c8:	430b      	orrs	r3, r1
 80108ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80108ce:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80108d2:	4643      	mov	r3, r8
 80108d4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80108d8:	4602      	mov	r2, r0
 80108da:	4053      	eors	r3, r2
 80108dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80108e0:	464b      	mov	r3, r9
 80108e2:	460a      	mov	r2, r1
 80108e4:	4053      	eors	r3, r2
 80108e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80108ea:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80108ee:	460b      	mov	r3, r1
 80108f0:	18e3      	adds	r3, r4, r3
 80108f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80108f6:	4613      	mov	r3, r2
 80108f8:	eb45 0303 	adc.w	r3, r5, r3
 80108fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010900:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010904:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010908:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801090c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010910:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8010914:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010918:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 801091c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010920:	ea80 0602 	eor.w	r6, r0, r2
 8010924:	f8c7 6100 	str.w	r6, [r7, #256]	; 0x100
 8010928:	404b      	eors	r3, r1
 801092a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801092e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8010932:	460b      	mov	r3, r1
 8010934:	4023      	ands	r3, r4
 8010936:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801093a:	4613      	mov	r3, r2
 801093c:	402b      	ands	r3, r5
 801093e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010942:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8010946:	460b      	mov	r3, r1
 8010948:	ea88 0303 	eor.w	r3, r8, r3
 801094c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010950:	4613      	mov	r3, r2
 8010952:	ea89 0303 	eor.w	r3, r9, r3
 8010956:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801095a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 801095e:	4623      	mov	r3, r4
 8010960:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8010964:	4602      	mov	r2, r0
 8010966:	189b      	adds	r3, r3, r2
 8010968:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801096c:	462b      	mov	r3, r5
 801096e:	460a      	mov	r2, r1
 8010970:	4153      	adcs	r3, r2
 8010972:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010976:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801097a:	3307      	adds	r3, #7
 801097c:	4a39      	ldr	r2, [pc, #228]	; (8010a64 <sha512_compress+0x1be8>)
 801097e:	00db      	lsls	r3, r3, #3
 8010980:	4413      	add	r3, r2
 8010982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010986:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801098a:	4621      	mov	r1, r4
 801098c:	1889      	adds	r1, r1, r2
 801098e:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8010992:	4629      	mov	r1, r5
 8010994:	eb41 0303 	adc.w	r3, r1, r3
 8010998:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801099c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80109a0:	3307      	adds	r3, #7
 80109a2:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80109a6:	00db      	lsls	r3, r3, #3
 80109a8:	4413      	add	r3, r2
 80109aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ae:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80109b2:	4621      	mov	r1, r4
 80109b4:	1889      	adds	r1, r1, r2
 80109b6:	60b9      	str	r1, [r7, #8]
 80109b8:	4629      	mov	r1, r5
 80109ba:	eb41 0303 	adc.w	r3, r1, r3
 80109be:	60fb      	str	r3, [r7, #12]
 80109c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80109c4:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80109c8:	e9c2 3400 	strd	r3, r4, [r2]
 80109cc:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80109d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d4:	0118      	lsls	r0, r3, #4
 80109d6:	0f11      	lsrs	r1, r2, #28
 80109d8:	4301      	orrs	r1, r0
 80109da:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80109de:	0111      	lsls	r1, r2, #4
 80109e0:	0f1b      	lsrs	r3, r3, #28
 80109e2:	430b      	orrs	r3, r1
 80109e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80109e8:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80109ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f0:	0890      	lsrs	r0, r2, #2
 80109f2:	0799      	lsls	r1, r3, #30
 80109f4:	4301      	orrs	r1, r0
 80109f6:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80109fa:	0899      	lsrs	r1, r3, #2
 80109fc:	0793      	lsls	r3, r2, #30
 80109fe:	430b      	orrs	r3, r1
 8010a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010a04:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8010a08:	4623      	mov	r3, r4
 8010a0a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8010a0e:	4602      	mov	r2, r0
 8010a10:	4053      	eors	r3, r2
 8010a12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010a16:	462b      	mov	r3, r5
 8010a18:	460a      	mov	r2, r1
 8010a1a:	4053      	eors	r3, r2
 8010a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010a20:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a28:	09d0      	lsrs	r0, r2, #7
 8010a2a:	0659      	lsls	r1, r3, #25
 8010a2c:	4301      	orrs	r1, r0
 8010a2e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8010a32:	09d9      	lsrs	r1, r3, #7
 8010a34:	0653      	lsls	r3, r2, #25
 8010a36:	430b      	orrs	r3, r1
 8010a38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010a3c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8010a40:	4623      	mov	r3, r4
 8010a42:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8010a46:	4602      	mov	r2, r0
 8010a48:	4053      	eors	r3, r2
 8010a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010a4e:	462b      	mov	r3, r5
 8010a50:	460a      	mov	r2, r1
 8010a52:	4053      	eors	r3, r2
 8010a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010a58:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010a5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010a60:	e002      	b.n	8010a68 <sha512_compress+0x1bec>
 8010a62:	bf00      	nop
 8010a64:	0801b918 	.word	0x0801b918
 8010a68:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8010a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a70:	ea40 0402 	orr.w	r4, r0, r2
 8010a74:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8010a78:	430b      	orrs	r3, r1
 8010a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010a7e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a86:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8010a8a:	4621      	mov	r1, r4
 8010a8c:	4011      	ands	r1, r2
 8010a8e:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8010a92:	4629      	mov	r1, r5
 8010a94:	400b      	ands	r3, r1
 8010a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010a9a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010a9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010aa2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8010aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aaa:	ea00 0402 	and.w	r4, r0, r2
 8010aae:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8010ab2:	400b      	ands	r3, r1
 8010ab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010ab8:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8010abc:	4623      	mov	r3, r4
 8010abe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	4313      	orrs	r3, r2
 8010ac6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010aca:	462b      	mov	r3, r5
 8010acc:	460a      	mov	r2, r1
 8010ace:	4313      	orrs	r3, r2
 8010ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010ad4:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8010ad8:	4623      	mov	r3, r4
 8010ada:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010ade:	4602      	mov	r2, r0
 8010ae0:	189b      	adds	r3, r3, r2
 8010ae2:	603b      	str	r3, [r7, #0]
 8010ae4:	462b      	mov	r3, r5
 8010ae6:	460a      	mov	r2, r1
 8010ae8:	4153      	adcs	r3, r2
 8010aea:	607b      	str	r3, [r7, #4]
 8010aec:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010af0:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8010af4:	e9c2 3400 	strd	r3, r4, [r2]
 8010af8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8010afc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b00:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b08:	1884      	adds	r4, r0, r2
 8010b0a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8010b0e:	eb41 0303 	adc.w	r3, r1, r3
 8010b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010b16:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8010b1a:	f607 1238 	addw	r2, r7, #2360	; 0x938
 8010b1e:	e9c2 3400 	strd	r3, r4, [r2]
 8010b22:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b2a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8010b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b32:	1884      	adds	r4, r0, r2
 8010b34:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8010b38:	eb41 0303 	adc.w	r3, r1, r3
 8010b3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010b40:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8010b44:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8010b48:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 80; i += 8) {
 8010b4c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010b50:	3308      	adds	r3, #8
 8010b52:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8010b56:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010b5a:	2b4f      	cmp	r3, #79	; 0x4f
 8010b5c:	f77e abb0 	ble.w	800f2c0 <sha512_compress+0x444>
   #undef RND



    /* feedback */
   for (i = 0; i < 8; i++) {
 8010b60:	2300      	movs	r3, #0
 8010b62:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8010b66:	e02a      	b.n	8010bbe <sha512_compress+0x1d42>
        md->state[i] = md->state[i] + S[i];
 8010b68:	f207 6394 	addw	r3, r7, #1684	; 0x694
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010b72:	3301      	adds	r3, #1
 8010b74:	00db      	lsls	r3, r3, #3
 8010b76:	4413      	add	r3, r2
 8010b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b7c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010b80:	00db      	lsls	r3, r3, #3
 8010b82:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 8010b86:	4413      	add	r3, r2
 8010b88:	3b58      	subs	r3, #88	; 0x58
 8010b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8e:	1884      	adds	r4, r0, r2
 8010b90:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8010b94:	eb41 0303 	adc.w	r3, r1, r3
 8010b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010b9c:	f207 6394 	addw	r3, r7, #1684	; 0x694
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	00db      	lsls	r3, r3, #3
 8010baa:	4413      	add	r3, r2
 8010bac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8010bb0:	e9c3 1200 	strd	r1, r2, [r3]
   for (i = 0; i < 8; i++) {
 8010bb4:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010bb8:	3301      	adds	r3, #1
 8010bba:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8010bbe:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8010bc2:	2b07      	cmp	r3, #7
 8010bc4:	ddd0      	ble.n	8010b68 <sha512_compress+0x1cec>
    }

    return 0;
 8010bc6:	2300      	movs	r3, #0
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f507 6717 	add.w	r7, r7, #2416	; 0x970
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <sha512_init>:
/**
   Initialize the hash state
   @param md   The hash state you wish to initialize
   @return 0 if successful
*/
int sha512_init(sha512_context * md) {
 8010bd8:	b480      	push	{r7}
 8010bda:	b083      	sub	sp, #12
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
    if (md == NULL) return 1;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d101      	bne.n	8010bea <sha512_init+0x12>
 8010be6:	2301      	movs	r3, #1
 8010be8:	e03a      	b.n	8010c60 <sha512_init+0x88>

    md->curlen = 0;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2200      	movs	r2, #0
 8010bee:	649a      	str	r2, [r3, #72]	; 0x48
    md->length = 0;
 8010bf0:	6879      	ldr	r1, [r7, #4]
 8010bf2:	f04f 0200 	mov.w	r2, #0
 8010bf6:	f04f 0300 	mov.w	r3, #0
 8010bfa:	e9c1 2300 	strd	r2, r3, [r1]
    md->state[0] = (0x6a09e667f3bcc908);
 8010bfe:	6879      	ldr	r1, [r7, #4]
 8010c00:	a31b      	add	r3, pc, #108	; (adr r3, 8010c70 <sha512_init+0x98>)
 8010c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c06:	e9c1 2302 	strd	r2, r3, [r1, #8]
    md->state[1] = (0xbb67ae8584caa73b);
 8010c0a:	6879      	ldr	r1, [r7, #4]
 8010c0c:	a31a      	add	r3, pc, #104	; (adr r3, 8010c78 <sha512_init+0xa0>)
 8010c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c12:	e9c1 2304 	strd	r2, r3, [r1, #16]
    md->state[2] = (0x3c6ef372fe94f82b);
 8010c16:	6879      	ldr	r1, [r7, #4]
 8010c18:	a319      	add	r3, pc, #100	; (adr r3, 8010c80 <sha512_init+0xa8>)
 8010c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    md->state[3] = (0xa54ff53a5f1d36f1);
 8010c22:	6879      	ldr	r1, [r7, #4]
 8010c24:	a318      	add	r3, pc, #96	; (adr r3, 8010c88 <sha512_init+0xb0>)
 8010c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    md->state[4] = (0x510e527fade682d1);
 8010c2e:	6879      	ldr	r1, [r7, #4]
 8010c30:	a317      	add	r3, pc, #92	; (adr r3, 8010c90 <sha512_init+0xb8>)
 8010c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c36:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    md->state[5] = (0x9b05688c2b3e6c1f);
 8010c3a:	6879      	ldr	r1, [r7, #4]
 8010c3c:	a316      	add	r3, pc, #88	; (adr r3, 8010c98 <sha512_init+0xc0>)
 8010c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c42:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    md->state[6] = (0x1f83d9abfb41bd6b);
 8010c46:	6879      	ldr	r1, [r7, #4]
 8010c48:	a315      	add	r3, pc, #84	; (adr r3, 8010ca0 <sha512_init+0xc8>)
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    md->state[7] = (0x5be0cd19137e2179);
 8010c52:	6879      	ldr	r1, [r7, #4]
 8010c54:	a314      	add	r3, pc, #80	; (adr r3, 8010ca8 <sha512_init+0xd0>)
 8010c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return 0;
 8010c5e:	2300      	movs	r3, #0
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	370c      	adds	r7, #12
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr
 8010c6c:	f3af 8000 	nop.w
 8010c70:	f3bcc908 	.word	0xf3bcc908
 8010c74:	6a09e667 	.word	0x6a09e667
 8010c78:	84caa73b 	.word	0x84caa73b
 8010c7c:	bb67ae85 	.word	0xbb67ae85
 8010c80:	fe94f82b 	.word	0xfe94f82b
 8010c84:	3c6ef372 	.word	0x3c6ef372
 8010c88:	5f1d36f1 	.word	0x5f1d36f1
 8010c8c:	a54ff53a 	.word	0xa54ff53a
 8010c90:	ade682d1 	.word	0xade682d1
 8010c94:	510e527f 	.word	0x510e527f
 8010c98:	2b3e6c1f 	.word	0x2b3e6c1f
 8010c9c:	9b05688c 	.word	0x9b05688c
 8010ca0:	fb41bd6b 	.word	0xfb41bd6b
 8010ca4:	1f83d9ab 	.word	0x1f83d9ab
 8010ca8:	137e2179 	.word	0x137e2179
 8010cac:	5be0cd19 	.word	0x5be0cd19

08010cb0 <sha512_update>:
   @param in     The data to hash
   @param inlen  The length of the data (octets)
   @return 0 if successful
*/
int sha512_update (sha512_context * md, const unsigned char *in, size_t inlen)               
{                                                                                           
 8010cb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010cb4:	b088      	sub	sp, #32
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	60f8      	str	r0, [r7, #12]
 8010cba:	60b9      	str	r1, [r7, #8]
 8010cbc:	607a      	str	r2, [r7, #4]
    size_t n;
    size_t i;                                                                        
    int           err;     
    if (md == NULL) return 1;  
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d101      	bne.n	8010cc8 <sha512_update+0x18>
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	e07b      	b.n	8010dc0 <sha512_update+0x110>
    if (in == NULL) return 1;                                                              
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d101      	bne.n	8010cd2 <sha512_update+0x22>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e076      	b.n	8010dc0 <sha512_update+0x110>
    if (md->curlen > sizeof(md->buf)) {                             
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010cd6:	2b80      	cmp	r3, #128	; 0x80
 8010cd8:	d96e      	bls.n	8010db8 <sha512_update+0x108>
       return 1;                                                            
 8010cda:	2301      	movs	r3, #1
 8010cdc:	e070      	b.n	8010dc0 <sha512_update+0x110>
    }                                                                                       
    while (inlen > 0) {                                                                     
        if (md->curlen == 0 && inlen >= 128) {                           
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d11d      	bne.n	8010d22 <sha512_update+0x72>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8010cea:	d91a      	bls.n	8010d22 <sha512_update+0x72>
           if ((err = sha512_compress (md, (unsigned char *)in)) != 0) {               
 8010cec:	68b9      	ldr	r1, [r7, #8]
 8010cee:	68f8      	ldr	r0, [r7, #12]
 8010cf0:	f7fe f8c4 	bl	800ee7c <sha512_compress>
 8010cf4:	61b8      	str	r0, [r7, #24]
 8010cf6:	69bb      	ldr	r3, [r7, #24]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d001      	beq.n	8010d00 <sha512_update+0x50>
              return err;                                                                   
 8010cfc:	69bb      	ldr	r3, [r7, #24]
 8010cfe:	e05f      	b.n	8010dc0 <sha512_update+0x110>
           }                                                                                
           md->length += 128 * 8;                                        
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d06:	f512 6480 	adds.w	r4, r2, #1024	; 0x400
 8010d0a:	f143 0500 	adc.w	r5, r3, #0
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	e9c3 4500 	strd	r4, r5, [r3]
           in             += 128;                                                    
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	3380      	adds	r3, #128	; 0x80
 8010d18:	60bb      	str	r3, [r7, #8]
           inlen          -= 128;                                                    
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	3b80      	subs	r3, #128	; 0x80
 8010d1e:	607b      	str	r3, [r7, #4]
 8010d20:	e04a      	b.n	8010db8 <sha512_update+0x108>
        } else {                                                                            
           n = MIN(inlen, (128 - md->curlen));
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d26:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	bf28      	it	cs
 8010d30:	4613      	movcs	r3, r2
 8010d32:	617b      	str	r3, [r7, #20]

           for (i = 0; i < n; i++) {
 8010d34:	2300      	movs	r3, #0
 8010d36:	61fb      	str	r3, [r7, #28]
 8010d38:	e00f      	b.n	8010d5a <sha512_update+0xaa>
            md->buf[i + md->curlen] = in[i];
 8010d3a:	68ba      	ldr	r2, [r7, #8]
 8010d3c:	69fb      	ldr	r3, [r7, #28]
 8010d3e:	441a      	add	r2, r3
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	440b      	add	r3, r1
 8010d48:	7811      	ldrb	r1, [r2, #0]
 8010d4a:	68fa      	ldr	r2, [r7, #12]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	460a      	mov	r2, r1
 8010d50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
           for (i = 0; i < n; i++) {
 8010d54:	69fb      	ldr	r3, [r7, #28]
 8010d56:	3301      	adds	r3, #1
 8010d58:	61fb      	str	r3, [r7, #28]
 8010d5a:	69fa      	ldr	r2, [r7, #28]
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d3eb      	bcc.n	8010d3a <sha512_update+0x8a>
           }


           md->curlen += n;                                                     
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	441a      	add	r2, r3
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	649a      	str	r2, [r3, #72]	; 0x48
           in             += n;                                                             
 8010d6e:	68ba      	ldr	r2, [r7, #8]
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	4413      	add	r3, r2
 8010d74:	60bb      	str	r3, [r7, #8]
           inlen          -= n;                                                             
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	1ad3      	subs	r3, r2, r3
 8010d7c:	607b      	str	r3, [r7, #4]
           if (md->curlen == 128) {                                      
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d82:	2b80      	cmp	r3, #128	; 0x80
 8010d84:	d118      	bne.n	8010db8 <sha512_update+0x108>
              if ((err = sha512_compress (md, md->buf)) != 0) {            
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	334c      	adds	r3, #76	; 0x4c
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	68f8      	ldr	r0, [r7, #12]
 8010d8e:	f7fe f875 	bl	800ee7c <sha512_compress>
 8010d92:	61b8      	str	r0, [r7, #24]
 8010d94:	69bb      	ldr	r3, [r7, #24]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d001      	beq.n	8010d9e <sha512_update+0xee>
                 return err;                                                                
 8010d9a:	69bb      	ldr	r3, [r7, #24]
 8010d9c:	e010      	b.n	8010dc0 <sha512_update+0x110>
              }                                                                             
              md->length += 8*128;                                       
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da4:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8010da8:	f143 0900 	adc.w	r9, r3, #0
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	e9c3 8900 	strd	r8, r9, [r3]
              md->curlen = 0;                                                   
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	2200      	movs	r2, #0
 8010db6:	649a      	str	r2, [r3, #72]	; 0x48
    while (inlen > 0) {                                                                     
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d18f      	bne.n	8010cde <sha512_update+0x2e>
           }                                                                                
       }                                                                                    
    }                                                                                       
    return 0;                                                                        
 8010dbe:	2300      	movs	r3, #0
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3720      	adds	r7, #32
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08010dca <sha512_final>:
   @param md  The hash state
   @param out [out] The destination of the hash (64 bytes)
   @return 0 if successful
*/
   int sha512_final(sha512_context * md, unsigned char *out)
   {
 8010dca:	b5b0      	push	{r4, r5, r7, lr}
 8010dcc:	b084      	sub	sp, #16
 8010dce:	af00      	add	r7, sp, #0
 8010dd0:	6078      	str	r0, [r7, #4]
 8010dd2:	6039      	str	r1, [r7, #0]
    int i;

    if (md == NULL) return 1;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d101      	bne.n	8010dde <sha512_final+0x14>
 8010dda:	2301      	movs	r3, #1
 8010ddc:	e167      	b.n	80110ae <sha512_final+0x2e4>
    if (out == NULL) return 1;
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d101      	bne.n	8010de8 <sha512_final+0x1e>
 8010de4:	2301      	movs	r3, #1
 8010de6:	e162      	b.n	80110ae <sha512_final+0x2e4>

    if (md->curlen >= sizeof(md->buf)) {
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dec:	2b7f      	cmp	r3, #127	; 0x7f
 8010dee:	d901      	bls.n	8010df4 <sha512_final+0x2a>
     return 1;
 8010df0:	2301      	movs	r3, #1
 8010df2:	e15c      	b.n	80110ae <sha512_final+0x2e4>
 }

    /* increase the length of the message */
 md->length += md->curlen * (8);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010dfe:	00db      	lsls	r3, r3, #3
 8010e00:	461a      	mov	r2, r3
 8010e02:	f04f 0300 	mov.w	r3, #0
 8010e06:	1884      	adds	r4, r0, r2
 8010e08:	eb41 0503 	adc.w	r5, r1, r3
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	e9c3 4500 	strd	r4, r5, [r3]

    /* append the '1' bit */
 md->buf[md->curlen++] = (unsigned char)0x80;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e16:	1c59      	adds	r1, r3, #1
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	6491      	str	r1, [r2, #72]	; 0x48
 8010e1c:	687a      	ldr	r2, [r7, #4]
 8010e1e:	4413      	add	r3, r2
 8010e20:	2280      	movs	r2, #128	; 0x80
 8010e22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* if the length is currently above 112 bytes we append zeros
     * then compress.  Then we can fall back to padding zeros and length
     * encoding like normal.
     */
     if (md->curlen > 112) {
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e2a:	2b70      	cmp	r3, #112	; 0x70
 8010e2c:	d922      	bls.n	8010e74 <sha512_final+0xaa>
        while (md->curlen < 128) {
 8010e2e:	e009      	b.n	8010e44 <sha512_final+0x7a>
            md->buf[md->curlen++] = (unsigned char)0;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e34:	1c59      	adds	r1, r3, #1
 8010e36:	687a      	ldr	r2, [r7, #4]
 8010e38:	6491      	str	r1, [r2, #72]	; 0x48
 8010e3a:	687a      	ldr	r2, [r7, #4]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	2200      	movs	r2, #0
 8010e40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        while (md->curlen < 128) {
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e48:	2b7f      	cmp	r3, #127	; 0x7f
 8010e4a:	d9f1      	bls.n	8010e30 <sha512_final+0x66>
        }
        sha512_compress(md, md->buf);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	334c      	adds	r3, #76	; 0x4c
 8010e50:	4619      	mov	r1, r3
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f7fe f812 	bl	800ee7c <sha512_compress>
        md->curlen = 0;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	649a      	str	r2, [r3, #72]	; 0x48

    /* pad upto 120 bytes of zeroes 
     * note: that from 112 to 120 is the 64 MSB of the length.  We assume that you won't hash
     * > 2^64 bits of data... :-)
     */
while (md->curlen < 120) {
 8010e5e:	e009      	b.n	8010e74 <sha512_final+0xaa>
    md->buf[md->curlen++] = (unsigned char)0;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e64:	1c59      	adds	r1, r3, #1
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	6491      	str	r1, [r2, #72]	; 0x48
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
while (md->curlen < 120) {
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e78:	2b77      	cmp	r3, #119	; 0x77
 8010e7a:	d9f1      	bls.n	8010e60 <sha512_final+0x96>
}

    /* store length */
STORE64H(md->length, md->buf+120);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e82:	f04f 0200 	mov.w	r2, #0
 8010e86:	f04f 0300 	mov.w	r3, #0
 8010e8a:	0e0a      	lsrs	r2, r1, #24
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	b2d2      	uxtb	r2, r2
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e9c:	f04f 0200 	mov.w	r2, #0
 8010ea0:	f04f 0300 	mov.w	r3, #0
 8010ea4:	0c0a      	lsrs	r2, r1, #16
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	b2d2      	uxtb	r2, r2
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010eb6:	f04f 0200 	mov.w	r2, #0
 8010eba:	f04f 0300 	mov.w	r3, #0
 8010ebe:	0a0a      	lsrs	r2, r1, #8
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	b2d2      	uxtb	r2, r2
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010ed0:	f04f 0200 	mov.w	r2, #0
 8010ed4:	f04f 0300 	mov.w	r3, #0
 8010ed8:	000a      	movs	r2, r1
 8010eda:	2300      	movs	r3, #0
 8010edc:	b2d2      	uxtb	r2, r2
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010eea:	f04f 0200 	mov.w	r2, #0
 8010eee:	f04f 0300 	mov.w	r3, #0
 8010ef2:	0e02      	lsrs	r2, r0, #24
 8010ef4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8010ef8:	0e0b      	lsrs	r3, r1, #24
 8010efa:	b2d2      	uxtb	r2, r2
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f08:	f04f 0200 	mov.w	r2, #0
 8010f0c:	f04f 0300 	mov.w	r3, #0
 8010f10:	0c02      	lsrs	r2, r0, #16
 8010f12:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010f16:	0c0b      	lsrs	r3, r1, #16
 8010f18:	b2d2      	uxtb	r2, r2
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f26:	f04f 0200 	mov.w	r2, #0
 8010f2a:	f04f 0300 	mov.w	r3, #0
 8010f2e:	0a02      	lsrs	r2, r0, #8
 8010f30:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010f34:	0a0b      	lsrs	r3, r1, #8
 8010f36:	b2d2      	uxtb	r2, r2
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f44:	b2d2      	uxtb	r2, r2
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
sha512_compress(md, md->buf);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	334c      	adds	r3, #76	; 0x4c
 8010f50:	4619      	mov	r1, r3
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7fd ff92 	bl	800ee7c <sha512_compress>

    /* copy output */
for (i = 0; i < 8; i++) {
 8010f58:	2300      	movs	r3, #0
 8010f5a:	60fb      	str	r3, [r7, #12]
 8010f5c:	e0a2      	b.n	80110a4 <sha512_final+0x2da>
    STORE64H(md->state[i], out+(8*i));
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	3301      	adds	r3, #1
 8010f64:	00db      	lsls	r3, r3, #3
 8010f66:	4413      	add	r3, r2
 8010f68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f6c:	f04f 0200 	mov.w	r2, #0
 8010f70:	f04f 0300 	mov.w	r3, #0
 8010f74:	0e0a      	lsrs	r2, r1, #24
 8010f76:	2300      	movs	r3, #0
 8010f78:	68f9      	ldr	r1, [r7, #12]
 8010f7a:	00c9      	lsls	r1, r1, #3
 8010f7c:	4608      	mov	r0, r1
 8010f7e:	6839      	ldr	r1, [r7, #0]
 8010f80:	4401      	add	r1, r0
 8010f82:	b2d3      	uxtb	r3, r2
 8010f84:	700b      	strb	r3, [r1, #0]
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	00db      	lsls	r3, r3, #3
 8010f8e:	4413      	add	r3, r2
 8010f90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010f94:	f04f 0200 	mov.w	r2, #0
 8010f98:	f04f 0300 	mov.w	r3, #0
 8010f9c:	0c0a      	lsrs	r2, r1, #16
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	68f9      	ldr	r1, [r7, #12]
 8010fa2:	00c9      	lsls	r1, r1, #3
 8010fa4:	3101      	adds	r1, #1
 8010fa6:	6838      	ldr	r0, [r7, #0]
 8010fa8:	4401      	add	r1, r0
 8010faa:	b2d3      	uxtb	r3, r2
 8010fac:	700b      	strb	r3, [r1, #0]
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	3301      	adds	r3, #1
 8010fb4:	00db      	lsls	r3, r3, #3
 8010fb6:	4413      	add	r3, r2
 8010fb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010fbc:	f04f 0200 	mov.w	r2, #0
 8010fc0:	f04f 0300 	mov.w	r3, #0
 8010fc4:	0a0a      	lsrs	r2, r1, #8
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	68f9      	ldr	r1, [r7, #12]
 8010fca:	00c9      	lsls	r1, r1, #3
 8010fcc:	3102      	adds	r1, #2
 8010fce:	6838      	ldr	r0, [r7, #0]
 8010fd0:	4401      	add	r1, r0
 8010fd2:	b2d3      	uxtb	r3, r2
 8010fd4:	700b      	strb	r3, [r1, #0]
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	00db      	lsls	r3, r3, #3
 8010fde:	4413      	add	r3, r2
 8010fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010fe4:	f04f 0200 	mov.w	r2, #0
 8010fe8:	f04f 0300 	mov.w	r3, #0
 8010fec:	000a      	movs	r2, r1
 8010fee:	2300      	movs	r3, #0
 8010ff0:	68f9      	ldr	r1, [r7, #12]
 8010ff2:	00c9      	lsls	r1, r1, #3
 8010ff4:	3103      	adds	r1, #3
 8010ff6:	6838      	ldr	r0, [r7, #0]
 8010ff8:	4401      	add	r1, r0
 8010ffa:	b2d3      	uxtb	r3, r2
 8010ffc:	700b      	strb	r3, [r1, #0]
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	3301      	adds	r3, #1
 8011004:	00db      	lsls	r3, r3, #3
 8011006:	4413      	add	r3, r2
 8011008:	e9d3 0100 	ldrd	r0, r1, [r3]
 801100c:	f04f 0200 	mov.w	r2, #0
 8011010:	f04f 0300 	mov.w	r3, #0
 8011014:	0e02      	lsrs	r2, r0, #24
 8011016:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801101a:	0e0b      	lsrs	r3, r1, #24
 801101c:	68f9      	ldr	r1, [r7, #12]
 801101e:	00c9      	lsls	r1, r1, #3
 8011020:	3104      	adds	r1, #4
 8011022:	6838      	ldr	r0, [r7, #0]
 8011024:	4401      	add	r1, r0
 8011026:	b2d3      	uxtb	r3, r2
 8011028:	700b      	strb	r3, [r1, #0]
 801102a:	687a      	ldr	r2, [r7, #4]
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	3301      	adds	r3, #1
 8011030:	00db      	lsls	r3, r3, #3
 8011032:	4413      	add	r3, r2
 8011034:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011038:	f04f 0200 	mov.w	r2, #0
 801103c:	f04f 0300 	mov.w	r3, #0
 8011040:	0c02      	lsrs	r2, r0, #16
 8011042:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8011046:	0c0b      	lsrs	r3, r1, #16
 8011048:	68f9      	ldr	r1, [r7, #12]
 801104a:	00c9      	lsls	r1, r1, #3
 801104c:	3105      	adds	r1, #5
 801104e:	6838      	ldr	r0, [r7, #0]
 8011050:	4401      	add	r1, r0
 8011052:	b2d3      	uxtb	r3, r2
 8011054:	700b      	strb	r3, [r1, #0]
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	3301      	adds	r3, #1
 801105c:	00db      	lsls	r3, r3, #3
 801105e:	4413      	add	r3, r2
 8011060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011064:	f04f 0200 	mov.w	r2, #0
 8011068:	f04f 0300 	mov.w	r3, #0
 801106c:	0a02      	lsrs	r2, r0, #8
 801106e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011072:	0a0b      	lsrs	r3, r1, #8
 8011074:	68f9      	ldr	r1, [r7, #12]
 8011076:	00c9      	lsls	r1, r1, #3
 8011078:	3106      	adds	r1, #6
 801107a:	6838      	ldr	r0, [r7, #0]
 801107c:	4401      	add	r1, r0
 801107e:	b2d3      	uxtb	r3, r2
 8011080:	700b      	strb	r3, [r1, #0]
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	3301      	adds	r3, #1
 8011088:	00db      	lsls	r3, r3, #3
 801108a:	4413      	add	r3, r2
 801108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011090:	68f9      	ldr	r1, [r7, #12]
 8011092:	00c9      	lsls	r1, r1, #3
 8011094:	3107      	adds	r1, #7
 8011096:	6838      	ldr	r0, [r7, #0]
 8011098:	4401      	add	r1, r0
 801109a:	b2d3      	uxtb	r3, r2
 801109c:	700b      	strb	r3, [r1, #0]
for (i = 0; i < 8; i++) {
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	3301      	adds	r3, #1
 80110a2:	60fb      	str	r3, [r7, #12]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2b07      	cmp	r3, #7
 80110a8:	f77f af59 	ble.w	8010f5e <sha512_final+0x194>
}

return 0;
 80110ac:	2300      	movs	r3, #0
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3710      	adds	r7, #16
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080110b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b083      	sub	sp, #12
 80110bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80110be:	2300      	movs	r3, #0
 80110c0:	607b      	str	r3, [r7, #4]
 80110c2:	4b10      	ldr	r3, [pc, #64]	; (8011104 <HAL_MspInit+0x4c>)
 80110c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110c6:	4a0f      	ldr	r2, [pc, #60]	; (8011104 <HAL_MspInit+0x4c>)
 80110c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80110cc:	6453      	str	r3, [r2, #68]	; 0x44
 80110ce:	4b0d      	ldr	r3, [pc, #52]	; (8011104 <HAL_MspInit+0x4c>)
 80110d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80110d6:	607b      	str	r3, [r7, #4]
 80110d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80110da:	2300      	movs	r3, #0
 80110dc:	603b      	str	r3, [r7, #0]
 80110de:	4b09      	ldr	r3, [pc, #36]	; (8011104 <HAL_MspInit+0x4c>)
 80110e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110e2:	4a08      	ldr	r2, [pc, #32]	; (8011104 <HAL_MspInit+0x4c>)
 80110e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80110e8:	6413      	str	r3, [r2, #64]	; 0x40
 80110ea:	4b06      	ldr	r3, [pc, #24]	; (8011104 <HAL_MspInit+0x4c>)
 80110ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80110f2:	603b      	str	r3, [r7, #0]
 80110f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80110f6:	bf00      	nop
 80110f8:	370c      	adds	r7, #12
 80110fa:	46bd      	mov	sp, r7
 80110fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011100:	4770      	bx	lr
 8011102:	bf00      	nop
 8011104:	40023800 	.word	0x40023800

08011108 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b08a      	sub	sp, #40	; 0x28
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011110:	f107 0314 	add.w	r3, r7, #20
 8011114:	2200      	movs	r2, #0
 8011116:	601a      	str	r2, [r3, #0]
 8011118:	605a      	str	r2, [r3, #4]
 801111a:	609a      	str	r2, [r3, #8]
 801111c:	60da      	str	r2, [r3, #12]
 801111e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	4a28      	ldr	r2, [pc, #160]	; (80111c8 <HAL_SD_MspInit+0xc0>)
 8011126:	4293      	cmp	r3, r2
 8011128:	d14a      	bne.n	80111c0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 801112a:	2300      	movs	r3, #0
 801112c:	613b      	str	r3, [r7, #16]
 801112e:	4b27      	ldr	r3, [pc, #156]	; (80111cc <HAL_SD_MspInit+0xc4>)
 8011130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011132:	4a26      	ldr	r2, [pc, #152]	; (80111cc <HAL_SD_MspInit+0xc4>)
 8011134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011138:	6453      	str	r3, [r2, #68]	; 0x44
 801113a:	4b24      	ldr	r3, [pc, #144]	; (80111cc <HAL_SD_MspInit+0xc4>)
 801113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801113e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011142:	613b      	str	r3, [r7, #16]
 8011144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011146:	2300      	movs	r3, #0
 8011148:	60fb      	str	r3, [r7, #12]
 801114a:	4b20      	ldr	r3, [pc, #128]	; (80111cc <HAL_SD_MspInit+0xc4>)
 801114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801114e:	4a1f      	ldr	r2, [pc, #124]	; (80111cc <HAL_SD_MspInit+0xc4>)
 8011150:	f043 0304 	orr.w	r3, r3, #4
 8011154:	6313      	str	r3, [r2, #48]	; 0x30
 8011156:	4b1d      	ldr	r3, [pc, #116]	; (80111cc <HAL_SD_MspInit+0xc4>)
 8011158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801115a:	f003 0304 	and.w	r3, r3, #4
 801115e:	60fb      	str	r3, [r7, #12]
 8011160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011162:	2300      	movs	r3, #0
 8011164:	60bb      	str	r3, [r7, #8]
 8011166:	4b19      	ldr	r3, [pc, #100]	; (80111cc <HAL_SD_MspInit+0xc4>)
 8011168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801116a:	4a18      	ldr	r2, [pc, #96]	; (80111cc <HAL_SD_MspInit+0xc4>)
 801116c:	f043 0308 	orr.w	r3, r3, #8
 8011170:	6313      	str	r3, [r2, #48]	; 0x30
 8011172:	4b16      	ldr	r3, [pc, #88]	; (80111cc <HAL_SD_MspInit+0xc4>)
 8011174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011176:	f003 0308 	and.w	r3, r3, #8
 801117a:	60bb      	str	r3, [r7, #8]
 801117c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 801117e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8011182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011184:	2302      	movs	r3, #2
 8011186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011188:	2300      	movs	r3, #0
 801118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801118c:	2303      	movs	r3, #3
 801118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8011190:	230c      	movs	r3, #12
 8011192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011194:	f107 0314 	add.w	r3, r7, #20
 8011198:	4619      	mov	r1, r3
 801119a:	480d      	ldr	r0, [pc, #52]	; (80111d0 <HAL_SD_MspInit+0xc8>)
 801119c:	f001 f8a2 	bl	80122e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80111a0:	2304      	movs	r3, #4
 80111a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111a4:	2302      	movs	r3, #2
 80111a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111a8:	2300      	movs	r3, #0
 80111aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80111ac:	2303      	movs	r3, #3
 80111ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80111b0:	230c      	movs	r3, #12
 80111b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80111b4:	f107 0314 	add.w	r3, r7, #20
 80111b8:	4619      	mov	r1, r3
 80111ba:	4806      	ldr	r0, [pc, #24]	; (80111d4 <HAL_SD_MspInit+0xcc>)
 80111bc:	f001 f892 	bl	80122e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80111c0:	bf00      	nop
 80111c2:	3728      	adds	r7, #40	; 0x28
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}
 80111c8:	40012c00 	.word	0x40012c00
 80111cc:	40023800 	.word	0x40023800
 80111d0:	40020800 	.word	0x40020800
 80111d4:	40020c00 	.word	0x40020c00

080111d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b08a      	sub	sp, #40	; 0x28
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80111e0:	f107 0314 	add.w	r3, r7, #20
 80111e4:	2200      	movs	r2, #0
 80111e6:	601a      	str	r2, [r3, #0]
 80111e8:	605a      	str	r2, [r3, #4]
 80111ea:	609a      	str	r2, [r3, #8]
 80111ec:	60da      	str	r2, [r3, #12]
 80111ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4a19      	ldr	r2, [pc, #100]	; (801125c <HAL_SPI_MspInit+0x84>)
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d12c      	bne.n	8011254 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80111fa:	2300      	movs	r3, #0
 80111fc:	613b      	str	r3, [r7, #16]
 80111fe:	4b18      	ldr	r3, [pc, #96]	; (8011260 <HAL_SPI_MspInit+0x88>)
 8011200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011202:	4a17      	ldr	r2, [pc, #92]	; (8011260 <HAL_SPI_MspInit+0x88>)
 8011204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011208:	6413      	str	r3, [r2, #64]	; 0x40
 801120a:	4b15      	ldr	r3, [pc, #84]	; (8011260 <HAL_SPI_MspInit+0x88>)
 801120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011212:	613b      	str	r3, [r7, #16]
 8011214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011216:	2300      	movs	r3, #0
 8011218:	60fb      	str	r3, [r7, #12]
 801121a:	4b11      	ldr	r3, [pc, #68]	; (8011260 <HAL_SPI_MspInit+0x88>)
 801121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801121e:	4a10      	ldr	r2, [pc, #64]	; (8011260 <HAL_SPI_MspInit+0x88>)
 8011220:	f043 0302 	orr.w	r3, r3, #2
 8011224:	6313      	str	r3, [r2, #48]	; 0x30
 8011226:	4b0e      	ldr	r3, [pc, #56]	; (8011260 <HAL_SPI_MspInit+0x88>)
 8011228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801122a:	f003 0302 	and.w	r3, r3, #2
 801122e:	60fb      	str	r3, [r7, #12]
 8011230:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8011232:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8011236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011238:	2302      	movs	r3, #2
 801123a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801123c:	2300      	movs	r3, #0
 801123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011240:	2303      	movs	r3, #3
 8011242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011244:	2305      	movs	r3, #5
 8011246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011248:	f107 0314 	add.w	r3, r7, #20
 801124c:	4619      	mov	r1, r3
 801124e:	4805      	ldr	r0, [pc, #20]	; (8011264 <HAL_SPI_MspInit+0x8c>)
 8011250:	f001 f848 	bl	80122e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8011254:	bf00      	nop
 8011256:	3728      	adds	r7, #40	; 0x28
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	40003800 	.word	0x40003800
 8011260:	40023800 	.word	0x40023800
 8011264:	40020400 	.word	0x40020400

08011268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8011268:	b480      	push	{r7}
 801126a:	b085      	sub	sp, #20
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	4a0b      	ldr	r2, [pc, #44]	; (80112a4 <HAL_TIM_Base_MspInit+0x3c>)
 8011276:	4293      	cmp	r3, r2
 8011278:	d10d      	bne.n	8011296 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801127a:	2300      	movs	r3, #0
 801127c:	60fb      	str	r3, [r7, #12]
 801127e:	4b0a      	ldr	r3, [pc, #40]	; (80112a8 <HAL_TIM_Base_MspInit+0x40>)
 8011280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011282:	4a09      	ldr	r2, [pc, #36]	; (80112a8 <HAL_TIM_Base_MspInit+0x40>)
 8011284:	f043 0301 	orr.w	r3, r3, #1
 8011288:	6453      	str	r3, [r2, #68]	; 0x44
 801128a:	4b07      	ldr	r3, [pc, #28]	; (80112a8 <HAL_TIM_Base_MspInit+0x40>)
 801128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801128e:	f003 0301 	and.w	r3, r3, #1
 8011292:	60fb      	str	r3, [r7, #12]
 8011294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8011296:	bf00      	nop
 8011298:	3714      	adds	r7, #20
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	40010000 	.word	0x40010000
 80112a8:	40023800 	.word	0x40023800

080112ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b08e      	sub	sp, #56	; 0x38
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80112b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112b8:	2200      	movs	r2, #0
 80112ba:	601a      	str	r2, [r3, #0]
 80112bc:	605a      	str	r2, [r3, #4]
 80112be:	609a      	str	r2, [r3, #8]
 80112c0:	60da      	str	r2, [r3, #12]
 80112c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	4a4b      	ldr	r2, [pc, #300]	; (80113f8 <HAL_UART_MspInit+0x14c>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d12c      	bne.n	8011328 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80112ce:	2300      	movs	r3, #0
 80112d0:	623b      	str	r3, [r7, #32]
 80112d2:	4b4a      	ldr	r3, [pc, #296]	; (80113fc <HAL_UART_MspInit+0x150>)
 80112d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112d6:	4a49      	ldr	r2, [pc, #292]	; (80113fc <HAL_UART_MspInit+0x150>)
 80112d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80112dc:	6413      	str	r3, [r2, #64]	; 0x40
 80112de:	4b47      	ldr	r3, [pc, #284]	; (80113fc <HAL_UART_MspInit+0x150>)
 80112e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80112e6:	623b      	str	r3, [r7, #32]
 80112e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80112ea:	2300      	movs	r3, #0
 80112ec:	61fb      	str	r3, [r7, #28]
 80112ee:	4b43      	ldr	r3, [pc, #268]	; (80113fc <HAL_UART_MspInit+0x150>)
 80112f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112f2:	4a42      	ldr	r2, [pc, #264]	; (80113fc <HAL_UART_MspInit+0x150>)
 80112f4:	f043 0301 	orr.w	r3, r3, #1
 80112f8:	6313      	str	r3, [r2, #48]	; 0x30
 80112fa:	4b40      	ldr	r3, [pc, #256]	; (80113fc <HAL_UART_MspInit+0x150>)
 80112fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112fe:	f003 0301 	and.w	r3, r3, #1
 8011302:	61fb      	str	r3, [r7, #28]
 8011304:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8011306:	2303      	movs	r3, #3
 8011308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801130a:	2302      	movs	r3, #2
 801130c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801130e:	2300      	movs	r3, #0
 8011310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011312:	2303      	movs	r3, #3
 8011314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8011316:	2308      	movs	r3, #8
 8011318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801131e:	4619      	mov	r1, r3
 8011320:	4837      	ldr	r0, [pc, #220]	; (8011400 <HAL_UART_MspInit+0x154>)
 8011322:	f000 ffdf 	bl	80122e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8011326:	e063      	b.n	80113f0 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART1)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a35      	ldr	r2, [pc, #212]	; (8011404 <HAL_UART_MspInit+0x158>)
 801132e:	4293      	cmp	r3, r2
 8011330:	d12d      	bne.n	801138e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8011332:	2300      	movs	r3, #0
 8011334:	61bb      	str	r3, [r7, #24]
 8011336:	4b31      	ldr	r3, [pc, #196]	; (80113fc <HAL_UART_MspInit+0x150>)
 8011338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801133a:	4a30      	ldr	r2, [pc, #192]	; (80113fc <HAL_UART_MspInit+0x150>)
 801133c:	f043 0310 	orr.w	r3, r3, #16
 8011340:	6453      	str	r3, [r2, #68]	; 0x44
 8011342:	4b2e      	ldr	r3, [pc, #184]	; (80113fc <HAL_UART_MspInit+0x150>)
 8011344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011346:	f003 0310 	and.w	r3, r3, #16
 801134a:	61bb      	str	r3, [r7, #24]
 801134c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801134e:	2300      	movs	r3, #0
 8011350:	617b      	str	r3, [r7, #20]
 8011352:	4b2a      	ldr	r3, [pc, #168]	; (80113fc <HAL_UART_MspInit+0x150>)
 8011354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011356:	4a29      	ldr	r2, [pc, #164]	; (80113fc <HAL_UART_MspInit+0x150>)
 8011358:	f043 0301 	orr.w	r3, r3, #1
 801135c:	6313      	str	r3, [r2, #48]	; 0x30
 801135e:	4b27      	ldr	r3, [pc, #156]	; (80113fc <HAL_UART_MspInit+0x150>)
 8011360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011362:	f003 0301 	and.w	r3, r3, #1
 8011366:	617b      	str	r3, [r7, #20]
 8011368:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801136a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801136e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011370:	2302      	movs	r3, #2
 8011372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011374:	2300      	movs	r3, #0
 8011376:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011378:	2303      	movs	r3, #3
 801137a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801137c:	2307      	movs	r3, #7
 801137e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011384:	4619      	mov	r1, r3
 8011386:	481e      	ldr	r0, [pc, #120]	; (8011400 <HAL_UART_MspInit+0x154>)
 8011388:	f000 ffac 	bl	80122e4 <HAL_GPIO_Init>
}
 801138c:	e030      	b.n	80113f0 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	4a1d      	ldr	r2, [pc, #116]	; (8011408 <HAL_UART_MspInit+0x15c>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d12b      	bne.n	80113f0 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART2_CLK_ENABLE();
 8011398:	2300      	movs	r3, #0
 801139a:	613b      	str	r3, [r7, #16]
 801139c:	4b17      	ldr	r3, [pc, #92]	; (80113fc <HAL_UART_MspInit+0x150>)
 801139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113a0:	4a16      	ldr	r2, [pc, #88]	; (80113fc <HAL_UART_MspInit+0x150>)
 80113a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80113a6:	6413      	str	r3, [r2, #64]	; 0x40
 80113a8:	4b14      	ldr	r3, [pc, #80]	; (80113fc <HAL_UART_MspInit+0x150>)
 80113aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113b0:	613b      	str	r3, [r7, #16]
 80113b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80113b4:	2300      	movs	r3, #0
 80113b6:	60fb      	str	r3, [r7, #12]
 80113b8:	4b10      	ldr	r3, [pc, #64]	; (80113fc <HAL_UART_MspInit+0x150>)
 80113ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113bc:	4a0f      	ldr	r2, [pc, #60]	; (80113fc <HAL_UART_MspInit+0x150>)
 80113be:	f043 0301 	orr.w	r3, r3, #1
 80113c2:	6313      	str	r3, [r2, #48]	; 0x30
 80113c4:	4b0d      	ldr	r3, [pc, #52]	; (80113fc <HAL_UART_MspInit+0x150>)
 80113c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113c8:	f003 0301 	and.w	r3, r3, #1
 80113cc:	60fb      	str	r3, [r7, #12]
 80113ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80113d0:	230c      	movs	r3, #12
 80113d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113d4:	2302      	movs	r3, #2
 80113d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113d8:	2300      	movs	r3, #0
 80113da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80113dc:	2303      	movs	r3, #3
 80113de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80113e0:	2307      	movs	r3, #7
 80113e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80113e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80113e8:	4619      	mov	r1, r3
 80113ea:	4805      	ldr	r0, [pc, #20]	; (8011400 <HAL_UART_MspInit+0x154>)
 80113ec:	f000 ff7a 	bl	80122e4 <HAL_GPIO_Init>
}
 80113f0:	bf00      	nop
 80113f2:	3738      	adds	r7, #56	; 0x38
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	40004c00 	.word	0x40004c00
 80113fc:	40023800 	.word	0x40023800
 8011400:	40020000 	.word	0x40020000
 8011404:	40011000 	.word	0x40011000
 8011408:	40004400 	.word	0x40004400

0801140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801140c:	b480      	push	{r7}
 801140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8011410:	e7fe      	b.n	8011410 <NMI_Handler+0x4>

08011412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011412:	b480      	push	{r7}
 8011414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011416:	e7fe      	b.n	8011416 <HardFault_Handler+0x4>

08011418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011418:	b480      	push	{r7}
 801141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801141c:	e7fe      	b.n	801141c <MemManage_Handler+0x4>

0801141e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801141e:	b480      	push	{r7}
 8011420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011422:	e7fe      	b.n	8011422 <BusFault_Handler+0x4>

08011424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011424:	b480      	push	{r7}
 8011426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011428:	e7fe      	b.n	8011428 <UsageFault_Handler+0x4>

0801142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801142a:	b480      	push	{r7}
 801142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801142e:	bf00      	nop
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr

08011438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011438:	b480      	push	{r7}
 801143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801143c:	bf00      	nop
 801143e:	46bd      	mov	sp, r7
 8011440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011444:	4770      	bx	lr

08011446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011446:	b480      	push	{r7}
 8011448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801144a:	bf00      	nop
 801144c:	46bd      	mov	sp, r7
 801144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011452:	4770      	bx	lr

08011454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011458:	f000 fb42 	bl	8011ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801145c:	bf00      	nop
 801145e:	bd80      	pop	{r7, pc}

08011460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8011460:	b480      	push	{r7}
 8011462:	af00      	add	r7, sp, #0
	return 1;
 8011464:	2301      	movs	r3, #1
}
 8011466:	4618      	mov	r0, r3
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr

08011470 <_kill>:

int _kill(int pid, int sig)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801147a:	f006 ffcf 	bl	801841c <__errno>
 801147e:	4603      	mov	r3, r0
 8011480:	2216      	movs	r2, #22
 8011482:	601a      	str	r2, [r3, #0]
	return -1;
 8011484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011488:	4618      	mov	r0, r3
 801148a:	3708      	adds	r7, #8
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <_exit>:

void _exit (int status)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8011498:	f04f 31ff 	mov.w	r1, #4294967295
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f7ff ffe7 	bl	8011470 <_kill>
	while (1) {}		/* Make sure we hang here */
 80114a2:	e7fe      	b.n	80114a2 <_exit+0x12>

080114a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b086      	sub	sp, #24
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	60f8      	str	r0, [r7, #12]
 80114ac:	60b9      	str	r1, [r7, #8]
 80114ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80114b0:	2300      	movs	r3, #0
 80114b2:	617b      	str	r3, [r7, #20]
 80114b4:	e00a      	b.n	80114cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80114b6:	f3af 8000 	nop.w
 80114ba:	4601      	mov	r1, r0
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	1c5a      	adds	r2, r3, #1
 80114c0:	60ba      	str	r2, [r7, #8]
 80114c2:	b2ca      	uxtb	r2, r1
 80114c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	3301      	adds	r3, #1
 80114ca:	617b      	str	r3, [r7, #20]
 80114cc:	697a      	ldr	r2, [r7, #20]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	dbf0      	blt.n	80114b6 <_read+0x12>
	}

return len;
 80114d4:	687b      	ldr	r3, [r7, #4]
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3718      	adds	r7, #24
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}

080114de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80114de:	b580      	push	{r7, lr}
 80114e0:	b086      	sub	sp, #24
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	60f8      	str	r0, [r7, #12]
 80114e6:	60b9      	str	r1, [r7, #8]
 80114e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80114ea:	2300      	movs	r3, #0
 80114ec:	617b      	str	r3, [r7, #20]
 80114ee:	e009      	b.n	8011504 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	1c5a      	adds	r2, r3, #1
 80114f4:	60ba      	str	r2, [r7, #8]
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	4618      	mov	r0, r3
 80114fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	3301      	adds	r3, #1
 8011502:	617b      	str	r3, [r7, #20]
 8011504:	697a      	ldr	r2, [r7, #20]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	429a      	cmp	r2, r3
 801150a:	dbf1      	blt.n	80114f0 <_write+0x12>
	}
	return len;
 801150c:	687b      	ldr	r3, [r7, #4]
}
 801150e:	4618      	mov	r0, r3
 8011510:	3718      	adds	r7, #24
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}

08011516 <_close>:

int _close(int file)
{
 8011516:	b480      	push	{r7}
 8011518:	b083      	sub	sp, #12
 801151a:	af00      	add	r7, sp, #0
 801151c:	6078      	str	r0, [r7, #4]
	return -1;
 801151e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011522:	4618      	mov	r0, r3
 8011524:	370c      	adds	r7, #12
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr

0801152e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801152e:	b480      	push	{r7}
 8011530:	b083      	sub	sp, #12
 8011532:	af00      	add	r7, sp, #0
 8011534:	6078      	str	r0, [r7, #4]
 8011536:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801153e:	605a      	str	r2, [r3, #4]
	return 0;
 8011540:	2300      	movs	r3, #0
}
 8011542:	4618      	mov	r0, r3
 8011544:	370c      	adds	r7, #12
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr

0801154e <_isatty>:

int _isatty(int file)
{
 801154e:	b480      	push	{r7}
 8011550:	b083      	sub	sp, #12
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
	return 1;
 8011556:	2301      	movs	r3, #1
}
 8011558:	4618      	mov	r0, r3
 801155a:	370c      	adds	r7, #12
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011564:	b480      	push	{r7}
 8011566:	b085      	sub	sp, #20
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	607a      	str	r2, [r7, #4]
	return 0;
 8011570:	2300      	movs	r3, #0
}
 8011572:	4618      	mov	r0, r3
 8011574:	3714      	adds	r7, #20
 8011576:	46bd      	mov	sp, r7
 8011578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157c:	4770      	bx	lr
	...

08011580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b086      	sub	sp, #24
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011588:	4a14      	ldr	r2, [pc, #80]	; (80115dc <_sbrk+0x5c>)
 801158a:	4b15      	ldr	r3, [pc, #84]	; (80115e0 <_sbrk+0x60>)
 801158c:	1ad3      	subs	r3, r2, r3
 801158e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8011594:	4b13      	ldr	r3, [pc, #76]	; (80115e4 <_sbrk+0x64>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d102      	bne.n	80115a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801159c:	4b11      	ldr	r3, [pc, #68]	; (80115e4 <_sbrk+0x64>)
 801159e:	4a12      	ldr	r2, [pc, #72]	; (80115e8 <_sbrk+0x68>)
 80115a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80115a2:	4b10      	ldr	r3, [pc, #64]	; (80115e4 <_sbrk+0x64>)
 80115a4:	681a      	ldr	r2, [r3, #0]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	4413      	add	r3, r2
 80115aa:	693a      	ldr	r2, [r7, #16]
 80115ac:	429a      	cmp	r2, r3
 80115ae:	d207      	bcs.n	80115c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80115b0:	f006 ff34 	bl	801841c <__errno>
 80115b4:	4603      	mov	r3, r0
 80115b6:	220c      	movs	r2, #12
 80115b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80115ba:	f04f 33ff 	mov.w	r3, #4294967295
 80115be:	e009      	b.n	80115d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80115c0:	4b08      	ldr	r3, [pc, #32]	; (80115e4 <_sbrk+0x64>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80115c6:	4b07      	ldr	r3, [pc, #28]	; (80115e4 <_sbrk+0x64>)
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	4413      	add	r3, r2
 80115ce:	4a05      	ldr	r2, [pc, #20]	; (80115e4 <_sbrk+0x64>)
 80115d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80115d2:	68fb      	ldr	r3, [r7, #12]
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3718      	adds	r7, #24
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	20020000 	.word	0x20020000
 80115e0:	00000400 	.word	0x00000400
 80115e4:	2000029c 	.word	0x2000029c
 80115e8:	20000b20 	.word	0x20000b20

080115ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80115ec:	b480      	push	{r7}
 80115ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80115f0:	4b06      	ldr	r3, [pc, #24]	; (801160c <SystemInit+0x20>)
 80115f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115f6:	4a05      	ldr	r2, [pc, #20]	; (801160c <SystemInit+0x20>)
 80115f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80115fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8011600:	bf00      	nop
 8011602:	46bd      	mov	sp, r7
 8011604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011608:	4770      	bx	lr
 801160a:	bf00      	nop
 801160c:	e000ed00 	.word	0xe000ed00

08011610 <consttime_equal>:
#include "sha3.h"
#include "sha512.h"
#include "ge.h"
#include "sc.h"
#include "main.h"
static int consttime_equal(const unsigned char *x, const unsigned char *y) {
 8011610:	b480      	push	{r7}
 8011612:	b085      	sub	sp, #20
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	6039      	str	r1, [r7, #0]
    unsigned char r = 0;
 801161a:	2300      	movs	r3, #0
 801161c:	73fb      	strb	r3, [r7, #15]

    r = x[0] ^ y[0];
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	781a      	ldrb	r2, [r3, #0]
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	4053      	eors	r3, r2
 8011628:	73fb      	strb	r3, [r7, #15]
    #define F(i) r |= x[i] ^ y[i]
    F(1);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	3301      	adds	r3, #1
 801162e:	781a      	ldrb	r2, [r3, #0]
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	3301      	adds	r3, #1
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	4053      	eors	r3, r2
 8011638:	b2da      	uxtb	r2, r3
 801163a:	7bfb      	ldrb	r3, [r7, #15]
 801163c:	4313      	orrs	r3, r2
 801163e:	73fb      	strb	r3, [r7, #15]
    F(2);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	3302      	adds	r3, #2
 8011644:	781a      	ldrb	r2, [r3, #0]
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	3302      	adds	r3, #2
 801164a:	781b      	ldrb	r3, [r3, #0]
 801164c:	4053      	eors	r3, r2
 801164e:	b2da      	uxtb	r2, r3
 8011650:	7bfb      	ldrb	r3, [r7, #15]
 8011652:	4313      	orrs	r3, r2
 8011654:	73fb      	strb	r3, [r7, #15]
    F(3);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	3303      	adds	r3, #3
 801165a:	781a      	ldrb	r2, [r3, #0]
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	3303      	adds	r3, #3
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	4053      	eors	r3, r2
 8011664:	b2da      	uxtb	r2, r3
 8011666:	7bfb      	ldrb	r3, [r7, #15]
 8011668:	4313      	orrs	r3, r2
 801166a:	73fb      	strb	r3, [r7, #15]
    F(4);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	3304      	adds	r3, #4
 8011670:	781a      	ldrb	r2, [r3, #0]
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	3304      	adds	r3, #4
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	4053      	eors	r3, r2
 801167a:	b2da      	uxtb	r2, r3
 801167c:	7bfb      	ldrb	r3, [r7, #15]
 801167e:	4313      	orrs	r3, r2
 8011680:	73fb      	strb	r3, [r7, #15]
    F(5);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	3305      	adds	r3, #5
 8011686:	781a      	ldrb	r2, [r3, #0]
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	3305      	adds	r3, #5
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	4053      	eors	r3, r2
 8011690:	b2da      	uxtb	r2, r3
 8011692:	7bfb      	ldrb	r3, [r7, #15]
 8011694:	4313      	orrs	r3, r2
 8011696:	73fb      	strb	r3, [r7, #15]
    F(6);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	3306      	adds	r3, #6
 801169c:	781a      	ldrb	r2, [r3, #0]
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	3306      	adds	r3, #6
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	4053      	eors	r3, r2
 80116a6:	b2da      	uxtb	r2, r3
 80116a8:	7bfb      	ldrb	r3, [r7, #15]
 80116aa:	4313      	orrs	r3, r2
 80116ac:	73fb      	strb	r3, [r7, #15]
    F(7);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	3307      	adds	r3, #7
 80116b2:	781a      	ldrb	r2, [r3, #0]
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	3307      	adds	r3, #7
 80116b8:	781b      	ldrb	r3, [r3, #0]
 80116ba:	4053      	eors	r3, r2
 80116bc:	b2da      	uxtb	r2, r3
 80116be:	7bfb      	ldrb	r3, [r7, #15]
 80116c0:	4313      	orrs	r3, r2
 80116c2:	73fb      	strb	r3, [r7, #15]
    F(8);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	3308      	adds	r3, #8
 80116c8:	781a      	ldrb	r2, [r3, #0]
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	3308      	adds	r3, #8
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	4053      	eors	r3, r2
 80116d2:	b2da      	uxtb	r2, r3
 80116d4:	7bfb      	ldrb	r3, [r7, #15]
 80116d6:	4313      	orrs	r3, r2
 80116d8:	73fb      	strb	r3, [r7, #15]
    F(9);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	3309      	adds	r3, #9
 80116de:	781a      	ldrb	r2, [r3, #0]
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	3309      	adds	r3, #9
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	4053      	eors	r3, r2
 80116e8:	b2da      	uxtb	r2, r3
 80116ea:	7bfb      	ldrb	r3, [r7, #15]
 80116ec:	4313      	orrs	r3, r2
 80116ee:	73fb      	strb	r3, [r7, #15]
    F(10);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	330a      	adds	r3, #10
 80116f4:	781a      	ldrb	r2, [r3, #0]
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	330a      	adds	r3, #10
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	4053      	eors	r3, r2
 80116fe:	b2da      	uxtb	r2, r3
 8011700:	7bfb      	ldrb	r3, [r7, #15]
 8011702:	4313      	orrs	r3, r2
 8011704:	73fb      	strb	r3, [r7, #15]
    F(11);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	330b      	adds	r3, #11
 801170a:	781a      	ldrb	r2, [r3, #0]
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	330b      	adds	r3, #11
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	4053      	eors	r3, r2
 8011714:	b2da      	uxtb	r2, r3
 8011716:	7bfb      	ldrb	r3, [r7, #15]
 8011718:	4313      	orrs	r3, r2
 801171a:	73fb      	strb	r3, [r7, #15]
    F(12);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	330c      	adds	r3, #12
 8011720:	781a      	ldrb	r2, [r3, #0]
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	330c      	adds	r3, #12
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	4053      	eors	r3, r2
 801172a:	b2da      	uxtb	r2, r3
 801172c:	7bfb      	ldrb	r3, [r7, #15]
 801172e:	4313      	orrs	r3, r2
 8011730:	73fb      	strb	r3, [r7, #15]
    F(13);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	330d      	adds	r3, #13
 8011736:	781a      	ldrb	r2, [r3, #0]
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	330d      	adds	r3, #13
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	4053      	eors	r3, r2
 8011740:	b2da      	uxtb	r2, r3
 8011742:	7bfb      	ldrb	r3, [r7, #15]
 8011744:	4313      	orrs	r3, r2
 8011746:	73fb      	strb	r3, [r7, #15]
    F(14);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	330e      	adds	r3, #14
 801174c:	781a      	ldrb	r2, [r3, #0]
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	330e      	adds	r3, #14
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	4053      	eors	r3, r2
 8011756:	b2da      	uxtb	r2, r3
 8011758:	7bfb      	ldrb	r3, [r7, #15]
 801175a:	4313      	orrs	r3, r2
 801175c:	73fb      	strb	r3, [r7, #15]
    F(15);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	330f      	adds	r3, #15
 8011762:	781a      	ldrb	r2, [r3, #0]
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	330f      	adds	r3, #15
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	4053      	eors	r3, r2
 801176c:	b2da      	uxtb	r2, r3
 801176e:	7bfb      	ldrb	r3, [r7, #15]
 8011770:	4313      	orrs	r3, r2
 8011772:	73fb      	strb	r3, [r7, #15]
    F(16);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	3310      	adds	r3, #16
 8011778:	781a      	ldrb	r2, [r3, #0]
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	3310      	adds	r3, #16
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	4053      	eors	r3, r2
 8011782:	b2da      	uxtb	r2, r3
 8011784:	7bfb      	ldrb	r3, [r7, #15]
 8011786:	4313      	orrs	r3, r2
 8011788:	73fb      	strb	r3, [r7, #15]
    F(17);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	3311      	adds	r3, #17
 801178e:	781a      	ldrb	r2, [r3, #0]
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	3311      	adds	r3, #17
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	4053      	eors	r3, r2
 8011798:	b2da      	uxtb	r2, r3
 801179a:	7bfb      	ldrb	r3, [r7, #15]
 801179c:	4313      	orrs	r3, r2
 801179e:	73fb      	strb	r3, [r7, #15]
    F(18);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	3312      	adds	r3, #18
 80117a4:	781a      	ldrb	r2, [r3, #0]
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	3312      	adds	r3, #18
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	4053      	eors	r3, r2
 80117ae:	b2da      	uxtb	r2, r3
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
 80117b2:	4313      	orrs	r3, r2
 80117b4:	73fb      	strb	r3, [r7, #15]
    F(19);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	3313      	adds	r3, #19
 80117ba:	781a      	ldrb	r2, [r3, #0]
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	3313      	adds	r3, #19
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	4053      	eors	r3, r2
 80117c4:	b2da      	uxtb	r2, r3
 80117c6:	7bfb      	ldrb	r3, [r7, #15]
 80117c8:	4313      	orrs	r3, r2
 80117ca:	73fb      	strb	r3, [r7, #15]
    F(20);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	3314      	adds	r3, #20
 80117d0:	781a      	ldrb	r2, [r3, #0]
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	3314      	adds	r3, #20
 80117d6:	781b      	ldrb	r3, [r3, #0]
 80117d8:	4053      	eors	r3, r2
 80117da:	b2da      	uxtb	r2, r3
 80117dc:	7bfb      	ldrb	r3, [r7, #15]
 80117de:	4313      	orrs	r3, r2
 80117e0:	73fb      	strb	r3, [r7, #15]
    F(21);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	3315      	adds	r3, #21
 80117e6:	781a      	ldrb	r2, [r3, #0]
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	3315      	adds	r3, #21
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	4053      	eors	r3, r2
 80117f0:	b2da      	uxtb	r2, r3
 80117f2:	7bfb      	ldrb	r3, [r7, #15]
 80117f4:	4313      	orrs	r3, r2
 80117f6:	73fb      	strb	r3, [r7, #15]
    F(22);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	3316      	adds	r3, #22
 80117fc:	781a      	ldrb	r2, [r3, #0]
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	3316      	adds	r3, #22
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	4053      	eors	r3, r2
 8011806:	b2da      	uxtb	r2, r3
 8011808:	7bfb      	ldrb	r3, [r7, #15]
 801180a:	4313      	orrs	r3, r2
 801180c:	73fb      	strb	r3, [r7, #15]
    F(23);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	3317      	adds	r3, #23
 8011812:	781a      	ldrb	r2, [r3, #0]
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	3317      	adds	r3, #23
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	4053      	eors	r3, r2
 801181c:	b2da      	uxtb	r2, r3
 801181e:	7bfb      	ldrb	r3, [r7, #15]
 8011820:	4313      	orrs	r3, r2
 8011822:	73fb      	strb	r3, [r7, #15]
    F(24);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	3318      	adds	r3, #24
 8011828:	781a      	ldrb	r2, [r3, #0]
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	3318      	adds	r3, #24
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	4053      	eors	r3, r2
 8011832:	b2da      	uxtb	r2, r3
 8011834:	7bfb      	ldrb	r3, [r7, #15]
 8011836:	4313      	orrs	r3, r2
 8011838:	73fb      	strb	r3, [r7, #15]
    F(25);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	3319      	adds	r3, #25
 801183e:	781a      	ldrb	r2, [r3, #0]
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	3319      	adds	r3, #25
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	4053      	eors	r3, r2
 8011848:	b2da      	uxtb	r2, r3
 801184a:	7bfb      	ldrb	r3, [r7, #15]
 801184c:	4313      	orrs	r3, r2
 801184e:	73fb      	strb	r3, [r7, #15]
    F(26);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	331a      	adds	r3, #26
 8011854:	781a      	ldrb	r2, [r3, #0]
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	331a      	adds	r3, #26
 801185a:	781b      	ldrb	r3, [r3, #0]
 801185c:	4053      	eors	r3, r2
 801185e:	b2da      	uxtb	r2, r3
 8011860:	7bfb      	ldrb	r3, [r7, #15]
 8011862:	4313      	orrs	r3, r2
 8011864:	73fb      	strb	r3, [r7, #15]
    F(27);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	331b      	adds	r3, #27
 801186a:	781a      	ldrb	r2, [r3, #0]
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	331b      	adds	r3, #27
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	4053      	eors	r3, r2
 8011874:	b2da      	uxtb	r2, r3
 8011876:	7bfb      	ldrb	r3, [r7, #15]
 8011878:	4313      	orrs	r3, r2
 801187a:	73fb      	strb	r3, [r7, #15]
    F(28);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	331c      	adds	r3, #28
 8011880:	781a      	ldrb	r2, [r3, #0]
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	331c      	adds	r3, #28
 8011886:	781b      	ldrb	r3, [r3, #0]
 8011888:	4053      	eors	r3, r2
 801188a:	b2da      	uxtb	r2, r3
 801188c:	7bfb      	ldrb	r3, [r7, #15]
 801188e:	4313      	orrs	r3, r2
 8011890:	73fb      	strb	r3, [r7, #15]
    F(29);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	331d      	adds	r3, #29
 8011896:	781a      	ldrb	r2, [r3, #0]
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	331d      	adds	r3, #29
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	4053      	eors	r3, r2
 80118a0:	b2da      	uxtb	r2, r3
 80118a2:	7bfb      	ldrb	r3, [r7, #15]
 80118a4:	4313      	orrs	r3, r2
 80118a6:	73fb      	strb	r3, [r7, #15]
    F(30);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	331e      	adds	r3, #30
 80118ac:	781a      	ldrb	r2, [r3, #0]
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	331e      	adds	r3, #30
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	4053      	eors	r3, r2
 80118b6:	b2da      	uxtb	r2, r3
 80118b8:	7bfb      	ldrb	r3, [r7, #15]
 80118ba:	4313      	orrs	r3, r2
 80118bc:	73fb      	strb	r3, [r7, #15]
    F(31);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	331f      	adds	r3, #31
 80118c2:	781a      	ldrb	r2, [r3, #0]
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	331f      	adds	r3, #31
 80118c8:	781b      	ldrb	r3, [r3, #0]
 80118ca:	4053      	eors	r3, r2
 80118cc:	b2da      	uxtb	r2, r3
 80118ce:	7bfb      	ldrb	r3, [r7, #15]
 80118d0:	4313      	orrs	r3, r2
 80118d2:	73fb      	strb	r3, [r7, #15]
    #undef F

    return !r;
 80118d4:	7bfb      	ldrb	r3, [r7, #15]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	bf0c      	ite	eq
 80118da:	2301      	moveq	r3, #1
 80118dc:	2300      	movne	r3, #0
 80118de:	b2db      	uxtb	r3, r3
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3714      	adds	r7, #20
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr

080118ec <ed25519_verify>:

int ed25519_verify(const unsigned char *signature, const unsigned char *message, size_t message_len, const unsigned char *public_key) {
 80118ec:	b590      	push	{r4, r7, lr}
 80118ee:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	f107 040c 	add.w	r4, r7, #12
 80118f8:	6020      	str	r0, [r4, #0]
 80118fa:	f107 0008 	add.w	r0, r7, #8
 80118fe:	6001      	str	r1, [r0, #0]
 8011900:	1d39      	adds	r1, r7, #4
 8011902:	600a      	str	r2, [r1, #0]
 8011904:	463a      	mov	r2, r7
 8011906:	6013      	str	r3, [r2, #0]
    unsigned char checker[32];

    ge_p3 A;
    ge_p2 R;

    if (signature[63] & 224) {
 8011908:	f107 030c 	add.w	r3, r7, #12
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	333f      	adds	r3, #63	; 0x3f
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011916:	2b00      	cmp	r3, #0
 8011918:	d001      	beq.n	801191e <ed25519_verify+0x32>
        return 0;
 801191a:	2300      	movs	r3, #0
 801191c:	e05d      	b.n	80119da <ed25519_verify+0xee>
    }

    if (ge_frombytes_negate_vartime(&A, public_key) != 0) {
 801191e:	463b      	mov	r3, r7
 8011920:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8011924:	6819      	ldr	r1, [r3, #0]
 8011926:	4610      	mov	r0, r2
 8011928:	f7f7 fd1a 	bl	8009360 <ge_frombytes_negate_vartime>
 801192c:	4603      	mov	r3, r0
 801192e:	2b00      	cmp	r3, #0
 8011930:	d001      	beq.n	8011936 <ed25519_verify+0x4a>
        return 0;
 8011932:	2300      	movs	r3, #0
 8011934:	e051      	b.n	80119da <ed25519_verify+0xee>
    }

#ifdef USE_SHA512
    sha512_context hash;
    sha512_init(&hash);
 8011936:	f107 0310 	add.w	r3, r7, #16
 801193a:	4618      	mov	r0, r3
 801193c:	f7ff f94c 	bl	8010bd8 <sha512_init>
    sha512_update(&hash, signature, 32);
 8011940:	f107 030c 	add.w	r3, r7, #12
 8011944:	f107 0010 	add.w	r0, r7, #16
 8011948:	2220      	movs	r2, #32
 801194a:	6819      	ldr	r1, [r3, #0]
 801194c:	f7ff f9b0 	bl	8010cb0 <sha512_update>
    sha512_update(&hash, public_key, 32);
 8011950:	463b      	mov	r3, r7
 8011952:	f107 0010 	add.w	r0, r7, #16
 8011956:	2220      	movs	r2, #32
 8011958:	6819      	ldr	r1, [r3, #0]
 801195a:	f7ff f9a9 	bl	8010cb0 <sha512_update>
    sha512_update(&hash, message, message_len);
 801195e:	1d3a      	adds	r2, r7, #4
 8011960:	f107 0308 	add.w	r3, r7, #8
 8011964:	f107 0010 	add.w	r0, r7, #16
 8011968:	6812      	ldr	r2, [r2, #0]
 801196a:	6819      	ldr	r1, [r3, #0]
 801196c:	f7ff f9a0 	bl	8010cb0 <sha512_update>
    sha512_final(&hash, h);
 8011970:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8011974:	f107 0310 	add.w	r3, r7, #16
 8011978:	4611      	mov	r1, r2
 801197a:	4618      	mov	r0, r3
 801197c:	f7ff fa25 	bl	8010dca <sha512_final>
    sha3_update(&sha3, public_key, 32);
    sha3_update(&sha3, message, message_len);
    sha3_final(h, &sha3);
#endif

    sc_reduce(h);
 8011980:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8011984:	4618      	mov	r0, r3
 8011986:	f7f8 fff3 	bl	800a970 <sc_reduce>
    ge_double_scalarmult_vartime(&R, h, &A, signature + 32);
 801198a:	f107 030c 	add.w	r3, r7, #12
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	3320      	adds	r3, #32
 8011992:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8011996:	f507 7106 	add.w	r1, r7, #536	; 0x218
 801199a:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 801199e:	f7f7 faef 	bl	8008f80 <ge_double_scalarmult_vartime>
    ge_tobytes(checker, &R);
 80119a2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80119a6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80119aa:	4611      	mov	r1, r2
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7f8 f817 	bl	80099e0 <ge_tobytes>

    if (!consttime_equal(checker, signature)) {
 80119b2:	f107 030c 	add.w	r3, r7, #12
 80119b6:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 80119ba:	6819      	ldr	r1, [r3, #0]
 80119bc:	4610      	mov	r0, r2
 80119be:	f7ff fe27 	bl	8011610 <consttime_equal>
 80119c2:	4603      	mov	r3, r0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d107      	bne.n	80119d8 <ed25519_verify+0xec>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80119c8:	2201      	movs	r2, #1
 80119ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80119ce:	4805      	ldr	r0, [pc, #20]	; (80119e4 <ed25519_verify+0xf8>)
 80119d0:	f000 fe24 	bl	801261c <HAL_GPIO_WritePin>
        return 0;
 80119d4:	2300      	movs	r3, #0
 80119d6:	e000      	b.n	80119da <ed25519_verify+0xee>
    }

    return 1;
 80119d8:	2301      	movs	r3, #1
}
 80119da:	4618      	mov	r0, r3
 80119dc:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd90      	pop	{r4, r7, pc}
 80119e4:	40020c00 	.word	0x40020c00

080119e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80119e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011a20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80119ec:	480d      	ldr	r0, [pc, #52]	; (8011a24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80119ee:	490e      	ldr	r1, [pc, #56]	; (8011a28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80119f0:	4a0e      	ldr	r2, [pc, #56]	; (8011a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80119f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80119f4:	e002      	b.n	80119fc <LoopCopyDataInit>

080119f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80119f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80119f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80119fa:	3304      	adds	r3, #4

080119fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80119fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80119fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011a00:	d3f9      	bcc.n	80119f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011a02:	4a0b      	ldr	r2, [pc, #44]	; (8011a30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8011a04:	4c0b      	ldr	r4, [pc, #44]	; (8011a34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8011a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011a08:	e001      	b.n	8011a0e <LoopFillZerobss>

08011a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011a0c:	3204      	adds	r2, #4

08011a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011a10:	d3fb      	bcc.n	8011a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011a12:	f7ff fdeb 	bl	80115ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011a16:	f006 febf 	bl	8018798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011a1a:	f7f8 fb83 	bl	800a124 <main>
  bx  lr    
 8011a1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8011a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8011a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011a28:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8011a2c:	0801c034 	.word	0x0801c034
  ldr r2, =_sbss
 8011a30:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8011a34:	20000b1c 	.word	0x20000b1c

08011a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011a38:	e7fe      	b.n	8011a38 <ADC_IRQHandler>
	...

08011a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011a40:	4b0e      	ldr	r3, [pc, #56]	; (8011a7c <HAL_Init+0x40>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	4a0d      	ldr	r2, [pc, #52]	; (8011a7c <HAL_Init+0x40>)
 8011a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011a4c:	4b0b      	ldr	r3, [pc, #44]	; (8011a7c <HAL_Init+0x40>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	4a0a      	ldr	r2, [pc, #40]	; (8011a7c <HAL_Init+0x40>)
 8011a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011a58:	4b08      	ldr	r3, [pc, #32]	; (8011a7c <HAL_Init+0x40>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	4a07      	ldr	r2, [pc, #28]	; (8011a7c <HAL_Init+0x40>)
 8011a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011a64:	2003      	movs	r0, #3
 8011a66:	f000 f931 	bl	8011ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011a6a:	200f      	movs	r0, #15
 8011a6c:	f000 f808 	bl	8011a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011a70:	f7ff fb22 	bl	80110b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011a74:	2300      	movs	r3, #0
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	bd80      	pop	{r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	40023c00 	.word	0x40023c00

08011a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011a88:	4b12      	ldr	r3, [pc, #72]	; (8011ad4 <HAL_InitTick+0x54>)
 8011a8a:	681a      	ldr	r2, [r3, #0]
 8011a8c:	4b12      	ldr	r3, [pc, #72]	; (8011ad8 <HAL_InitTick+0x58>)
 8011a8e:	781b      	ldrb	r3, [r3, #0]
 8011a90:	4619      	mov	r1, r3
 8011a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f000 f93b 	bl	8011d1a <HAL_SYSTICK_Config>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d001      	beq.n	8011aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8011aaa:	2301      	movs	r3, #1
 8011aac:	e00e      	b.n	8011acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2b0f      	cmp	r3, #15
 8011ab2:	d80a      	bhi.n	8011aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	6879      	ldr	r1, [r7, #4]
 8011ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8011abc:	f000 f911 	bl	8011ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011ac0:	4a06      	ldr	r2, [pc, #24]	; (8011adc <HAL_InitTick+0x5c>)
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	e000      	b.n	8011acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8011aca:	2301      	movs	r3, #1
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3708      	adds	r7, #8
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	20000020 	.word	0x20000020
 8011ad8:	20000028 	.word	0x20000028
 8011adc:	20000024 	.word	0x20000024

08011ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011ae4:	4b06      	ldr	r3, [pc, #24]	; (8011b00 <HAL_IncTick+0x20>)
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	461a      	mov	r2, r3
 8011aea:	4b06      	ldr	r3, [pc, #24]	; (8011b04 <HAL_IncTick+0x24>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	4413      	add	r3, r2
 8011af0:	4a04      	ldr	r2, [pc, #16]	; (8011b04 <HAL_IncTick+0x24>)
 8011af2:	6013      	str	r3, [r2, #0]
}
 8011af4:	bf00      	nop
 8011af6:	46bd      	mov	sp, r7
 8011af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop
 8011b00:	20000028 	.word	0x20000028
 8011b04:	20000680 	.word	0x20000680

08011b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011b08:	b480      	push	{r7}
 8011b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8011b0c:	4b03      	ldr	r3, [pc, #12]	; (8011b1c <HAL_GetTick+0x14>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	46bd      	mov	sp, r7
 8011b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop
 8011b1c:	20000680 	.word	0x20000680

08011b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b084      	sub	sp, #16
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011b28:	f7ff ffee 	bl	8011b08 <HAL_GetTick>
 8011b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b38:	d005      	beq.n	8011b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011b3a:	4b0a      	ldr	r3, [pc, #40]	; (8011b64 <HAL_Delay+0x44>)
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	461a      	mov	r2, r3
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	4413      	add	r3, r2
 8011b44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011b46:	bf00      	nop
 8011b48:	f7ff ffde 	bl	8011b08 <HAL_GetTick>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	1ad3      	subs	r3, r2, r3
 8011b52:	68fa      	ldr	r2, [r7, #12]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d8f7      	bhi.n	8011b48 <HAL_Delay+0x28>
  {
  }
}
 8011b58:	bf00      	nop
 8011b5a:	bf00      	nop
 8011b5c:	3710      	adds	r7, #16
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	20000028 	.word	0x20000028

08011b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011b68:	b480      	push	{r7}
 8011b6a:	b085      	sub	sp, #20
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f003 0307 	and.w	r3, r3, #7
 8011b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011b78:	4b0c      	ldr	r3, [pc, #48]	; (8011bac <__NVIC_SetPriorityGrouping+0x44>)
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011b7e:	68ba      	ldr	r2, [r7, #8]
 8011b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011b84:	4013      	ands	r3, r2
 8011b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011b9a:	4a04      	ldr	r2, [pc, #16]	; (8011bac <__NVIC_SetPriorityGrouping+0x44>)
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	60d3      	str	r3, [r2, #12]
}
 8011ba0:	bf00      	nop
 8011ba2:	3714      	adds	r7, #20
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr
 8011bac:	e000ed00 	.word	0xe000ed00

08011bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011bb4:	4b04      	ldr	r3, [pc, #16]	; (8011bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8011bb6:	68db      	ldr	r3, [r3, #12]
 8011bb8:	0a1b      	lsrs	r3, r3, #8
 8011bba:	f003 0307 	and.w	r3, r3, #7
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr
 8011bc8:	e000ed00 	.word	0xe000ed00

08011bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b083      	sub	sp, #12
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	6039      	str	r1, [r7, #0]
 8011bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	db0a      	blt.n	8011bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	b2da      	uxtb	r2, r3
 8011be4:	490c      	ldr	r1, [pc, #48]	; (8011c18 <__NVIC_SetPriority+0x4c>)
 8011be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011bea:	0112      	lsls	r2, r2, #4
 8011bec:	b2d2      	uxtb	r2, r2
 8011bee:	440b      	add	r3, r1
 8011bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011bf4:	e00a      	b.n	8011c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	b2da      	uxtb	r2, r3
 8011bfa:	4908      	ldr	r1, [pc, #32]	; (8011c1c <__NVIC_SetPriority+0x50>)
 8011bfc:	79fb      	ldrb	r3, [r7, #7]
 8011bfe:	f003 030f 	and.w	r3, r3, #15
 8011c02:	3b04      	subs	r3, #4
 8011c04:	0112      	lsls	r2, r2, #4
 8011c06:	b2d2      	uxtb	r2, r2
 8011c08:	440b      	add	r3, r1
 8011c0a:	761a      	strb	r2, [r3, #24]
}
 8011c0c:	bf00      	nop
 8011c0e:	370c      	adds	r7, #12
 8011c10:	46bd      	mov	sp, r7
 8011c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c16:	4770      	bx	lr
 8011c18:	e000e100 	.word	0xe000e100
 8011c1c:	e000ed00 	.word	0xe000ed00

08011c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011c20:	b480      	push	{r7}
 8011c22:	b089      	sub	sp, #36	; 0x24
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	f003 0307 	and.w	r3, r3, #7
 8011c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011c34:	69fb      	ldr	r3, [r7, #28]
 8011c36:	f1c3 0307 	rsb	r3, r3, #7
 8011c3a:	2b04      	cmp	r3, #4
 8011c3c:	bf28      	it	cs
 8011c3e:	2304      	movcs	r3, #4
 8011c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011c42:	69fb      	ldr	r3, [r7, #28]
 8011c44:	3304      	adds	r3, #4
 8011c46:	2b06      	cmp	r3, #6
 8011c48:	d902      	bls.n	8011c50 <NVIC_EncodePriority+0x30>
 8011c4a:	69fb      	ldr	r3, [r7, #28]
 8011c4c:	3b03      	subs	r3, #3
 8011c4e:	e000      	b.n	8011c52 <NVIC_EncodePriority+0x32>
 8011c50:	2300      	movs	r3, #0
 8011c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011c54:	f04f 32ff 	mov.w	r2, #4294967295
 8011c58:	69bb      	ldr	r3, [r7, #24]
 8011c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c5e:	43da      	mvns	r2, r3
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	401a      	ands	r2, r3
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011c68:	f04f 31ff 	mov.w	r1, #4294967295
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8011c72:	43d9      	mvns	r1, r3
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011c78:	4313      	orrs	r3, r2
         );
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	3724      	adds	r7, #36	; 0x24
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c84:	4770      	bx	lr
	...

08011c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	3b01      	subs	r3, #1
 8011c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011c98:	d301      	bcc.n	8011c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e00f      	b.n	8011cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011c9e:	4a0a      	ldr	r2, [pc, #40]	; (8011cc8 <SysTick_Config+0x40>)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	3b01      	subs	r3, #1
 8011ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011ca6:	210f      	movs	r1, #15
 8011ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cac:	f7ff ff8e 	bl	8011bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011cb0:	4b05      	ldr	r3, [pc, #20]	; (8011cc8 <SysTick_Config+0x40>)
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011cb6:	4b04      	ldr	r3, [pc, #16]	; (8011cc8 <SysTick_Config+0x40>)
 8011cb8:	2207      	movs	r2, #7
 8011cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011cbc:	2300      	movs	r3, #0
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3708      	adds	r7, #8
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	e000e010 	.word	0xe000e010

08011ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f7ff ff47 	bl	8011b68 <__NVIC_SetPriorityGrouping>
}
 8011cda:	bf00      	nop
 8011cdc:	3708      	adds	r7, #8
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}

08011ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011ce2:	b580      	push	{r7, lr}
 8011ce4:	b086      	sub	sp, #24
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	4603      	mov	r3, r0
 8011cea:	60b9      	str	r1, [r7, #8]
 8011cec:	607a      	str	r2, [r7, #4]
 8011cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011cf4:	f7ff ff5c 	bl	8011bb0 <__NVIC_GetPriorityGrouping>
 8011cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011cfa:	687a      	ldr	r2, [r7, #4]
 8011cfc:	68b9      	ldr	r1, [r7, #8]
 8011cfe:	6978      	ldr	r0, [r7, #20]
 8011d00:	f7ff ff8e 	bl	8011c20 <NVIC_EncodePriority>
 8011d04:	4602      	mov	r2, r0
 8011d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d0a:	4611      	mov	r1, r2
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7ff ff5d 	bl	8011bcc <__NVIC_SetPriority>
}
 8011d12:	bf00      	nop
 8011d14:	3718      	adds	r7, #24
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}

08011d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b082      	sub	sp, #8
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f7ff ffb0 	bl	8011c88 <SysTick_Config>
 8011d28:	4603      	mov	r3, r0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3708      	adds	r7, #8
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
	...

08011d34 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b086      	sub	sp, #24
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	60f8      	str	r0, [r7, #12]
 8011d3c:	60b9      	str	r1, [r7, #8]
 8011d3e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011d42:	2301      	movs	r3, #1
 8011d44:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8011d46:	4b23      	ldr	r3, [pc, #140]	; (8011dd4 <HAL_FLASH_Program+0xa0>)
 8011d48:	7e1b      	ldrb	r3, [r3, #24]
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d101      	bne.n	8011d52 <HAL_FLASH_Program+0x1e>
 8011d4e:	2302      	movs	r3, #2
 8011d50:	e03b      	b.n	8011dca <HAL_FLASH_Program+0x96>
 8011d52:	4b20      	ldr	r3, [pc, #128]	; (8011dd4 <HAL_FLASH_Program+0xa0>)
 8011d54:	2201      	movs	r2, #1
 8011d56:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011d58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011d5c:	f000 f870 	bl	8011e40 <FLASH_WaitForLastOperation>
 8011d60:	4603      	mov	r3, r0
 8011d62:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8011d64:	7dfb      	ldrb	r3, [r7, #23]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d12b      	bne.n	8011dc2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d105      	bne.n	8011d7c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8011d70:	783b      	ldrb	r3, [r7, #0]
 8011d72:	4619      	mov	r1, r3
 8011d74:	68b8      	ldr	r0, [r7, #8]
 8011d76:	f000 f91b 	bl	8011fb0 <FLASH_Program_Byte>
 8011d7a:	e016      	b.n	8011daa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d105      	bne.n	8011d8e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8011d82:	883b      	ldrh	r3, [r7, #0]
 8011d84:	4619      	mov	r1, r3
 8011d86:	68b8      	ldr	r0, [r7, #8]
 8011d88:	f000 f8ee 	bl	8011f68 <FLASH_Program_HalfWord>
 8011d8c:	e00d      	b.n	8011daa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2b02      	cmp	r3, #2
 8011d92:	d105      	bne.n	8011da0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	4619      	mov	r1, r3
 8011d98:	68b8      	ldr	r0, [r7, #8]
 8011d9a:	f000 f8c3 	bl	8011f24 <FLASH_Program_Word>
 8011d9e:	e004      	b.n	8011daa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8011da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011da4:	68b8      	ldr	r0, [r7, #8]
 8011da6:	f000 f88b 	bl	8011ec0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011daa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011dae:	f000 f847 	bl	8011e40 <FLASH_WaitForLastOperation>
 8011db2:	4603      	mov	r3, r0
 8011db4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8011db6:	4b08      	ldr	r3, [pc, #32]	; (8011dd8 <HAL_FLASH_Program+0xa4>)
 8011db8:	691b      	ldr	r3, [r3, #16]
 8011dba:	4a07      	ldr	r2, [pc, #28]	; (8011dd8 <HAL_FLASH_Program+0xa4>)
 8011dbc:	f023 0301 	bic.w	r3, r3, #1
 8011dc0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8011dc2:	4b04      	ldr	r3, [pc, #16]	; (8011dd4 <HAL_FLASH_Program+0xa0>)
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8011dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3718      	adds	r7, #24
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	20000684 	.word	0x20000684
 8011dd8:	40023c00 	.word	0x40023c00

08011ddc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8011ddc:	b480      	push	{r7}
 8011dde:	b083      	sub	sp, #12
 8011de0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8011de2:	2300      	movs	r3, #0
 8011de4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011de6:	4b0b      	ldr	r3, [pc, #44]	; (8011e14 <HAL_FLASH_Unlock+0x38>)
 8011de8:	691b      	ldr	r3, [r3, #16]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	da0b      	bge.n	8011e06 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011dee:	4b09      	ldr	r3, [pc, #36]	; (8011e14 <HAL_FLASH_Unlock+0x38>)
 8011df0:	4a09      	ldr	r2, [pc, #36]	; (8011e18 <HAL_FLASH_Unlock+0x3c>)
 8011df2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011df4:	4b07      	ldr	r3, [pc, #28]	; (8011e14 <HAL_FLASH_Unlock+0x38>)
 8011df6:	4a09      	ldr	r2, [pc, #36]	; (8011e1c <HAL_FLASH_Unlock+0x40>)
 8011df8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011dfa:	4b06      	ldr	r3, [pc, #24]	; (8011e14 <HAL_FLASH_Unlock+0x38>)
 8011dfc:	691b      	ldr	r3, [r3, #16]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	da01      	bge.n	8011e06 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8011e02:	2301      	movs	r3, #1
 8011e04:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8011e06:	79fb      	ldrb	r3, [r7, #7]
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	370c      	adds	r7, #12
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr
 8011e14:	40023c00 	.word	0x40023c00
 8011e18:	45670123 	.word	0x45670123
 8011e1c:	cdef89ab 	.word	0xcdef89ab

08011e20 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8011e20:	b480      	push	{r7}
 8011e22:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8011e24:	4b05      	ldr	r3, [pc, #20]	; (8011e3c <HAL_FLASH_Lock+0x1c>)
 8011e26:	691b      	ldr	r3, [r3, #16]
 8011e28:	4a04      	ldr	r2, [pc, #16]	; (8011e3c <HAL_FLASH_Lock+0x1c>)
 8011e2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011e2e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8011e30:	2300      	movs	r3, #0
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr
 8011e3c:	40023c00 	.word	0x40023c00

08011e40 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011e4c:	4b1a      	ldr	r3, [pc, #104]	; (8011eb8 <FLASH_WaitForLastOperation+0x78>)
 8011e4e:	2200      	movs	r2, #0
 8011e50:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8011e52:	f7ff fe59 	bl	8011b08 <HAL_GetTick>
 8011e56:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011e58:	e010      	b.n	8011e7c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e60:	d00c      	beq.n	8011e7c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d007      	beq.n	8011e78 <FLASH_WaitForLastOperation+0x38>
 8011e68:	f7ff fe4e 	bl	8011b08 <HAL_GetTick>
 8011e6c:	4602      	mov	r2, r0
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	1ad3      	subs	r3, r2, r3
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d201      	bcs.n	8011e7c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8011e78:	2303      	movs	r3, #3
 8011e7a:	e019      	b.n	8011eb0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011e7c:	4b0f      	ldr	r3, [pc, #60]	; (8011ebc <FLASH_WaitForLastOperation+0x7c>)
 8011e7e:	68db      	ldr	r3, [r3, #12]
 8011e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d1e8      	bne.n	8011e5a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011e88:	4b0c      	ldr	r3, [pc, #48]	; (8011ebc <FLASH_WaitForLastOperation+0x7c>)
 8011e8a:	68db      	ldr	r3, [r3, #12]
 8011e8c:	f003 0301 	and.w	r3, r3, #1
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d002      	beq.n	8011e9a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011e94:	4b09      	ldr	r3, [pc, #36]	; (8011ebc <FLASH_WaitForLastOperation+0x7c>)
 8011e96:	2201      	movs	r2, #1
 8011e98:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8011e9a:	4b08      	ldr	r3, [pc, #32]	; (8011ebc <FLASH_WaitForLastOperation+0x7c>)
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d003      	beq.n	8011eae <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8011ea6:	f000 f8a5 	bl	8011ff4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011eaa:	2301      	movs	r3, #1
 8011eac:	e000      	b.n	8011eb0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8011eae:	2300      	movs	r3, #0
  
}  
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3710      	adds	r7, #16
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	20000684 	.word	0x20000684
 8011ebc:	40023c00 	.word	0x40023c00

08011ec0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b085      	sub	sp, #20
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011ecc:	4b14      	ldr	r3, [pc, #80]	; (8011f20 <FLASH_Program_DoubleWord+0x60>)
 8011ece:	691b      	ldr	r3, [r3, #16]
 8011ed0:	4a13      	ldr	r2, [pc, #76]	; (8011f20 <FLASH_Program_DoubleWord+0x60>)
 8011ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011ed6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8011ed8:	4b11      	ldr	r3, [pc, #68]	; (8011f20 <FLASH_Program_DoubleWord+0x60>)
 8011eda:	691b      	ldr	r3, [r3, #16]
 8011edc:	4a10      	ldr	r2, [pc, #64]	; (8011f20 <FLASH_Program_DoubleWord+0x60>)
 8011ede:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011ee2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011ee4:	4b0e      	ldr	r3, [pc, #56]	; (8011f20 <FLASH_Program_DoubleWord+0x60>)
 8011ee6:	691b      	ldr	r3, [r3, #16]
 8011ee8:	4a0d      	ldr	r2, [pc, #52]	; (8011f20 <FLASH_Program_DoubleWord+0x60>)
 8011eea:	f043 0301 	orr.w	r3, r3, #1
 8011eee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	683a      	ldr	r2, [r7, #0]
 8011ef4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8011ef6:	f3bf 8f6f 	isb	sy
}
 8011efa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8011efc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011f00:	f04f 0200 	mov.w	r2, #0
 8011f04:	f04f 0300 	mov.w	r3, #0
 8011f08:	000a      	movs	r2, r1
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	68f9      	ldr	r1, [r7, #12]
 8011f0e:	3104      	adds	r1, #4
 8011f10:	4613      	mov	r3, r2
 8011f12:	600b      	str	r3, [r1, #0]
}
 8011f14:	bf00      	nop
 8011f16:	3714      	adds	r7, #20
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr
 8011f20:	40023c00 	.word	0x40023c00

08011f24 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8011f24:	b480      	push	{r7}
 8011f26:	b083      	sub	sp, #12
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011f2e:	4b0d      	ldr	r3, [pc, #52]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f30:	691b      	ldr	r3, [r3, #16]
 8011f32:	4a0c      	ldr	r2, [pc, #48]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8011f3a:	4b0a      	ldr	r3, [pc, #40]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f3c:	691b      	ldr	r3, [r3, #16]
 8011f3e:	4a09      	ldr	r2, [pc, #36]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011f44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011f46:	4b07      	ldr	r3, [pc, #28]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f48:	691b      	ldr	r3, [r3, #16]
 8011f4a:	4a06      	ldr	r2, [pc, #24]	; (8011f64 <FLASH_Program_Word+0x40>)
 8011f4c:	f043 0301 	orr.w	r3, r3, #1
 8011f50:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	683a      	ldr	r2, [r7, #0]
 8011f56:	601a      	str	r2, [r3, #0]
}
 8011f58:	bf00      	nop
 8011f5a:	370c      	adds	r7, #12
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr
 8011f64:	40023c00 	.word	0x40023c00

08011f68 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	460b      	mov	r3, r1
 8011f72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011f74:	4b0d      	ldr	r3, [pc, #52]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f76:	691b      	ldr	r3, [r3, #16]
 8011f78:	4a0c      	ldr	r2, [pc, #48]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8011f80:	4b0a      	ldr	r3, [pc, #40]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f82:	691b      	ldr	r3, [r3, #16]
 8011f84:	4a09      	ldr	r2, [pc, #36]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011f8c:	4b07      	ldr	r3, [pc, #28]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f8e:	691b      	ldr	r3, [r3, #16]
 8011f90:	4a06      	ldr	r2, [pc, #24]	; (8011fac <FLASH_Program_HalfWord+0x44>)
 8011f92:	f043 0301 	orr.w	r3, r3, #1
 8011f96:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	887a      	ldrh	r2, [r7, #2]
 8011f9c:	801a      	strh	r2, [r3, #0]
}
 8011f9e:	bf00      	nop
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr
 8011faa:	bf00      	nop
 8011fac:	40023c00 	.word	0x40023c00

08011fb0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	b083      	sub	sp, #12
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	460b      	mov	r3, r1
 8011fba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011fbc:	4b0c      	ldr	r3, [pc, #48]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fbe:	691b      	ldr	r3, [r3, #16]
 8011fc0:	4a0b      	ldr	r2, [pc, #44]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011fc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8011fc8:	4b09      	ldr	r3, [pc, #36]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fca:	4a09      	ldr	r2, [pc, #36]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fcc:	691b      	ldr	r3, [r3, #16]
 8011fce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011fd0:	4b07      	ldr	r3, [pc, #28]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fd2:	691b      	ldr	r3, [r3, #16]
 8011fd4:	4a06      	ldr	r2, [pc, #24]	; (8011ff0 <FLASH_Program_Byte+0x40>)
 8011fd6:	f043 0301 	orr.w	r3, r3, #1
 8011fda:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	78fa      	ldrb	r2, [r7, #3]
 8011fe0:	701a      	strb	r2, [r3, #0]
}
 8011fe2:	bf00      	nop
 8011fe4:	370c      	adds	r7, #12
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fec:	4770      	bx	lr
 8011fee:	bf00      	nop
 8011ff0:	40023c00 	.word	0x40023c00

08011ff4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8011ff4:	b480      	push	{r7}
 8011ff6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8011ff8:	4b27      	ldr	r3, [pc, #156]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8011ffa:	68db      	ldr	r3, [r3, #12]
 8011ffc:	f003 0310 	and.w	r3, r3, #16
 8012000:	2b00      	cmp	r3, #0
 8012002:	d008      	beq.n	8012016 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8012004:	4b25      	ldr	r3, [pc, #148]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012006:	69db      	ldr	r3, [r3, #28]
 8012008:	f043 0310 	orr.w	r3, r3, #16
 801200c:	4a23      	ldr	r2, [pc, #140]	; (801209c <FLASH_SetErrorCode+0xa8>)
 801200e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8012010:	4b21      	ldr	r3, [pc, #132]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012012:	2210      	movs	r2, #16
 8012014:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8012016:	4b20      	ldr	r3, [pc, #128]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012018:	68db      	ldr	r3, [r3, #12]
 801201a:	f003 0320 	and.w	r3, r3, #32
 801201e:	2b00      	cmp	r3, #0
 8012020:	d008      	beq.n	8012034 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8012022:	4b1e      	ldr	r3, [pc, #120]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012024:	69db      	ldr	r3, [r3, #28]
 8012026:	f043 0308 	orr.w	r3, r3, #8
 801202a:	4a1c      	ldr	r2, [pc, #112]	; (801209c <FLASH_SetErrorCode+0xa8>)
 801202c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801202e:	4b1a      	ldr	r3, [pc, #104]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012030:	2220      	movs	r2, #32
 8012032:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8012034:	4b18      	ldr	r3, [pc, #96]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012036:	68db      	ldr	r3, [r3, #12]
 8012038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801203c:	2b00      	cmp	r3, #0
 801203e:	d008      	beq.n	8012052 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8012040:	4b16      	ldr	r3, [pc, #88]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012042:	69db      	ldr	r3, [r3, #28]
 8012044:	f043 0304 	orr.w	r3, r3, #4
 8012048:	4a14      	ldr	r2, [pc, #80]	; (801209c <FLASH_SetErrorCode+0xa8>)
 801204a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801204c:	4b12      	ldr	r3, [pc, #72]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 801204e:	2240      	movs	r2, #64	; 0x40
 8012050:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8012052:	4b11      	ldr	r3, [pc, #68]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012054:	68db      	ldr	r3, [r3, #12]
 8012056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801205a:	2b00      	cmp	r3, #0
 801205c:	d008      	beq.n	8012070 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801205e:	4b0f      	ldr	r3, [pc, #60]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012060:	69db      	ldr	r3, [r3, #28]
 8012062:	f043 0302 	orr.w	r3, r3, #2
 8012066:	4a0d      	ldr	r2, [pc, #52]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012068:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801206a:	4b0b      	ldr	r3, [pc, #44]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 801206c:	2280      	movs	r2, #128	; 0x80
 801206e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8012070:	4b09      	ldr	r3, [pc, #36]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	f003 0302 	and.w	r3, r3, #2
 8012078:	2b00      	cmp	r3, #0
 801207a:	d008      	beq.n	801208e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801207c:	4b07      	ldr	r3, [pc, #28]	; (801209c <FLASH_SetErrorCode+0xa8>)
 801207e:	69db      	ldr	r3, [r3, #28]
 8012080:	f043 0320 	orr.w	r3, r3, #32
 8012084:	4a05      	ldr	r2, [pc, #20]	; (801209c <FLASH_SetErrorCode+0xa8>)
 8012086:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8012088:	4b03      	ldr	r3, [pc, #12]	; (8012098 <FLASH_SetErrorCode+0xa4>)
 801208a:	2202      	movs	r2, #2
 801208c:	60da      	str	r2, [r3, #12]
  }
}
 801208e:	bf00      	nop
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr
 8012098:	40023c00 	.word	0x40023c00
 801209c:	20000684 	.word	0x20000684

080120a0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80120aa:	2301      	movs	r3, #1
 80120ac:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80120ae:	2300      	movs	r3, #0
 80120b0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80120b2:	4b31      	ldr	r3, [pc, #196]	; (8012178 <HAL_FLASHEx_Erase+0xd8>)
 80120b4:	7e1b      	ldrb	r3, [r3, #24]
 80120b6:	2b01      	cmp	r3, #1
 80120b8:	d101      	bne.n	80120be <HAL_FLASHEx_Erase+0x1e>
 80120ba:	2302      	movs	r3, #2
 80120bc:	e058      	b.n	8012170 <HAL_FLASHEx_Erase+0xd0>
 80120be:	4b2e      	ldr	r3, [pc, #184]	; (8012178 <HAL_FLASHEx_Erase+0xd8>)
 80120c0:	2201      	movs	r2, #1
 80120c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80120c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80120c8:	f7ff feba 	bl	8011e40 <FLASH_WaitForLastOperation>
 80120cc:	4603      	mov	r3, r0
 80120ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80120d0:	7bfb      	ldrb	r3, [r7, #15]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d148      	bne.n	8012168 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	f04f 32ff 	mov.w	r2, #4294967295
 80120dc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b01      	cmp	r3, #1
 80120e4:	d115      	bne.n	8012112 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	691b      	ldr	r3, [r3, #16]
 80120ea:	b2da      	uxtb	r2, r3
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	4619      	mov	r1, r3
 80120f2:	4610      	mov	r0, r2
 80120f4:	f000 f844 	bl	8012180 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80120f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80120fc:	f7ff fea0 	bl	8011e40 <FLASH_WaitForLastOperation>
 8012100:	4603      	mov	r3, r0
 8012102:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8012104:	4b1d      	ldr	r3, [pc, #116]	; (801217c <HAL_FLASHEx_Erase+0xdc>)
 8012106:	691b      	ldr	r3, [r3, #16]
 8012108:	4a1c      	ldr	r2, [pc, #112]	; (801217c <HAL_FLASHEx_Erase+0xdc>)
 801210a:	f023 0304 	bic.w	r3, r3, #4
 801210e:	6113      	str	r3, [r2, #16]
 8012110:	e028      	b.n	8012164 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	689b      	ldr	r3, [r3, #8]
 8012116:	60bb      	str	r3, [r7, #8]
 8012118:	e01c      	b.n	8012154 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	691b      	ldr	r3, [r3, #16]
 801211e:	b2db      	uxtb	r3, r3
 8012120:	4619      	mov	r1, r3
 8012122:	68b8      	ldr	r0, [r7, #8]
 8012124:	f000 f850 	bl	80121c8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012128:	f24c 3050 	movw	r0, #50000	; 0xc350
 801212c:	f7ff fe88 	bl	8011e40 <FLASH_WaitForLastOperation>
 8012130:	4603      	mov	r3, r0
 8012132:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8012134:	4b11      	ldr	r3, [pc, #68]	; (801217c <HAL_FLASHEx_Erase+0xdc>)
 8012136:	691b      	ldr	r3, [r3, #16]
 8012138:	4a10      	ldr	r2, [pc, #64]	; (801217c <HAL_FLASHEx_Erase+0xdc>)
 801213a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801213e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8012140:	7bfb      	ldrb	r3, [r7, #15]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d003      	beq.n	801214e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	601a      	str	r2, [r3, #0]
          break;
 801214c:	e00a      	b.n	8012164 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	3301      	adds	r3, #1
 8012152:	60bb      	str	r3, [r7, #8]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	68da      	ldr	r2, [r3, #12]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	689b      	ldr	r3, [r3, #8]
 801215c:	4413      	add	r3, r2
 801215e:	68ba      	ldr	r2, [r7, #8]
 8012160:	429a      	cmp	r2, r3
 8012162:	d3da      	bcc.n	801211a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8012164:	f000 f878 	bl	8012258 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8012168:	4b03      	ldr	r3, [pc, #12]	; (8012178 <HAL_FLASHEx_Erase+0xd8>)
 801216a:	2200      	movs	r2, #0
 801216c:	761a      	strb	r2, [r3, #24]

  return status;
 801216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012170:	4618      	mov	r0, r3
 8012172:	3710      	adds	r7, #16
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	20000684 	.word	0x20000684
 801217c:	40023c00 	.word	0x40023c00

08012180 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8012180:	b480      	push	{r7}
 8012182:	b083      	sub	sp, #12
 8012184:	af00      	add	r7, sp, #0
 8012186:	4603      	mov	r3, r0
 8012188:	6039      	str	r1, [r7, #0]
 801218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801218c:	4b0d      	ldr	r3, [pc, #52]	; (80121c4 <FLASH_MassErase+0x44>)
 801218e:	691b      	ldr	r3, [r3, #16]
 8012190:	4a0c      	ldr	r2, [pc, #48]	; (80121c4 <FLASH_MassErase+0x44>)
 8012192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012196:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8012198:	4b0a      	ldr	r3, [pc, #40]	; (80121c4 <FLASH_MassErase+0x44>)
 801219a:	691b      	ldr	r3, [r3, #16]
 801219c:	4a09      	ldr	r2, [pc, #36]	; (80121c4 <FLASH_MassErase+0x44>)
 801219e:	f043 0304 	orr.w	r3, r3, #4
 80121a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80121a4:	4b07      	ldr	r3, [pc, #28]	; (80121c4 <FLASH_MassErase+0x44>)
 80121a6:	691a      	ldr	r2, [r3, #16]
 80121a8:	79fb      	ldrb	r3, [r7, #7]
 80121aa:	021b      	lsls	r3, r3, #8
 80121ac:	4313      	orrs	r3, r2
 80121ae:	4a05      	ldr	r2, [pc, #20]	; (80121c4 <FLASH_MassErase+0x44>)
 80121b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80121b4:	6113      	str	r3, [r2, #16]
}
 80121b6:	bf00      	nop
 80121b8:	370c      	adds	r7, #12
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop
 80121c4:	40023c00 	.word	0x40023c00

080121c8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80121c8:	b480      	push	{r7}
 80121ca:	b085      	sub	sp, #20
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	460b      	mov	r3, r1
 80121d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80121d4:	2300      	movs	r3, #0
 80121d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80121d8:	78fb      	ldrb	r3, [r7, #3]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d102      	bne.n	80121e4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80121de:	2300      	movs	r3, #0
 80121e0:	60fb      	str	r3, [r7, #12]
 80121e2:	e010      	b.n	8012206 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80121e4:	78fb      	ldrb	r3, [r7, #3]
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d103      	bne.n	80121f2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80121ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121ee:	60fb      	str	r3, [r7, #12]
 80121f0:	e009      	b.n	8012206 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80121f2:	78fb      	ldrb	r3, [r7, #3]
 80121f4:	2b02      	cmp	r3, #2
 80121f6:	d103      	bne.n	8012200 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80121f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80121fc:	60fb      	str	r3, [r7, #12]
 80121fe:	e002      	b.n	8012206 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8012200:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012204:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8012206:	4b13      	ldr	r3, [pc, #76]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012208:	691b      	ldr	r3, [r3, #16]
 801220a:	4a12      	ldr	r2, [pc, #72]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 801220c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012210:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8012212:	4b10      	ldr	r3, [pc, #64]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012214:	691a      	ldr	r2, [r3, #16]
 8012216:	490f      	ldr	r1, [pc, #60]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	4313      	orrs	r3, r2
 801221c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801221e:	4b0d      	ldr	r3, [pc, #52]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012220:	691b      	ldr	r3, [r3, #16]
 8012222:	4a0c      	ldr	r2, [pc, #48]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012224:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8012228:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801222a:	4b0a      	ldr	r3, [pc, #40]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 801222c:	691a      	ldr	r2, [r3, #16]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	00db      	lsls	r3, r3, #3
 8012232:	4313      	orrs	r3, r2
 8012234:	4a07      	ldr	r2, [pc, #28]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012236:	f043 0302 	orr.w	r3, r3, #2
 801223a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801223c:	4b05      	ldr	r3, [pc, #20]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 801223e:	691b      	ldr	r3, [r3, #16]
 8012240:	4a04      	ldr	r2, [pc, #16]	; (8012254 <FLASH_Erase_Sector+0x8c>)
 8012242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012246:	6113      	str	r3, [r2, #16]
}
 8012248:	bf00      	nop
 801224a:	3714      	adds	r7, #20
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr
 8012254:	40023c00 	.word	0x40023c00

08012258 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8012258:	b480      	push	{r7}
 801225a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 801225c:	4b20      	ldr	r3, [pc, #128]	; (80122e0 <FLASH_FlushCaches+0x88>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012264:	2b00      	cmp	r3, #0
 8012266:	d017      	beq.n	8012298 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8012268:	4b1d      	ldr	r3, [pc, #116]	; (80122e0 <FLASH_FlushCaches+0x88>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	4a1c      	ldr	r2, [pc, #112]	; (80122e0 <FLASH_FlushCaches+0x88>)
 801226e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012272:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8012274:	4b1a      	ldr	r3, [pc, #104]	; (80122e0 <FLASH_FlushCaches+0x88>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4a19      	ldr	r2, [pc, #100]	; (80122e0 <FLASH_FlushCaches+0x88>)
 801227a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801227e:	6013      	str	r3, [r2, #0]
 8012280:	4b17      	ldr	r3, [pc, #92]	; (80122e0 <FLASH_FlushCaches+0x88>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4a16      	ldr	r2, [pc, #88]	; (80122e0 <FLASH_FlushCaches+0x88>)
 8012286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801228a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801228c:	4b14      	ldr	r3, [pc, #80]	; (80122e0 <FLASH_FlushCaches+0x88>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4a13      	ldr	r2, [pc, #76]	; (80122e0 <FLASH_FlushCaches+0x88>)
 8012292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012296:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8012298:	4b11      	ldr	r3, [pc, #68]	; (80122e0 <FLASH_FlushCaches+0x88>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d017      	beq.n	80122d4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80122a4:	4b0e      	ldr	r3, [pc, #56]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4a0d      	ldr	r2, [pc, #52]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80122ae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80122b0:	4b0b      	ldr	r3, [pc, #44]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4a0a      	ldr	r2, [pc, #40]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80122ba:	6013      	str	r3, [r2, #0]
 80122bc:	4b08      	ldr	r3, [pc, #32]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	4a07      	ldr	r2, [pc, #28]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80122c8:	4b05      	ldr	r3, [pc, #20]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	4a04      	ldr	r2, [pc, #16]	; (80122e0 <FLASH_FlushCaches+0x88>)
 80122ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80122d2:	6013      	str	r3, [r2, #0]
  }
}
 80122d4:	bf00      	nop
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr
 80122de:	bf00      	nop
 80122e0:	40023c00 	.word	0x40023c00

080122e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b089      	sub	sp, #36	; 0x24
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80122ee:	2300      	movs	r3, #0
 80122f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80122f2:	2300      	movs	r3, #0
 80122f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80122f6:	2300      	movs	r3, #0
 80122f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80122fa:	2300      	movs	r3, #0
 80122fc:	61fb      	str	r3, [r7, #28]
 80122fe:	e16b      	b.n	80125d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012300:	2201      	movs	r2, #1
 8012302:	69fb      	ldr	r3, [r7, #28]
 8012304:	fa02 f303 	lsl.w	r3, r2, r3
 8012308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	697a      	ldr	r2, [r7, #20]
 8012310:	4013      	ands	r3, r2
 8012312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012314:	693a      	ldr	r2, [r7, #16]
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	429a      	cmp	r2, r3
 801231a:	f040 815a 	bne.w	80125d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	f003 0303 	and.w	r3, r3, #3
 8012326:	2b01      	cmp	r3, #1
 8012328:	d005      	beq.n	8012336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012332:	2b02      	cmp	r3, #2
 8012334:	d130      	bne.n	8012398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	689b      	ldr	r3, [r3, #8]
 801233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	005b      	lsls	r3, r3, #1
 8012340:	2203      	movs	r2, #3
 8012342:	fa02 f303 	lsl.w	r3, r2, r3
 8012346:	43db      	mvns	r3, r3
 8012348:	69ba      	ldr	r2, [r7, #24]
 801234a:	4013      	ands	r3, r2
 801234c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	68da      	ldr	r2, [r3, #12]
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	005b      	lsls	r3, r3, #1
 8012356:	fa02 f303 	lsl.w	r3, r2, r3
 801235a:	69ba      	ldr	r2, [r7, #24]
 801235c:	4313      	orrs	r3, r2
 801235e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	69ba      	ldr	r2, [r7, #24]
 8012364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801236c:	2201      	movs	r2, #1
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	fa02 f303 	lsl.w	r3, r2, r3
 8012374:	43db      	mvns	r3, r3
 8012376:	69ba      	ldr	r2, [r7, #24]
 8012378:	4013      	ands	r3, r2
 801237a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	685b      	ldr	r3, [r3, #4]
 8012380:	091b      	lsrs	r3, r3, #4
 8012382:	f003 0201 	and.w	r2, r3, #1
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	fa02 f303 	lsl.w	r3, r2, r3
 801238c:	69ba      	ldr	r2, [r7, #24]
 801238e:	4313      	orrs	r3, r2
 8012390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	69ba      	ldr	r2, [r7, #24]
 8012396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	685b      	ldr	r3, [r3, #4]
 801239c:	f003 0303 	and.w	r3, r3, #3
 80123a0:	2b03      	cmp	r3, #3
 80123a2:	d017      	beq.n	80123d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	68db      	ldr	r3, [r3, #12]
 80123a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	005b      	lsls	r3, r3, #1
 80123ae:	2203      	movs	r2, #3
 80123b0:	fa02 f303 	lsl.w	r3, r2, r3
 80123b4:	43db      	mvns	r3, r3
 80123b6:	69ba      	ldr	r2, [r7, #24]
 80123b8:	4013      	ands	r3, r2
 80123ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	689a      	ldr	r2, [r3, #8]
 80123c0:	69fb      	ldr	r3, [r7, #28]
 80123c2:	005b      	lsls	r3, r3, #1
 80123c4:	fa02 f303 	lsl.w	r3, r2, r3
 80123c8:	69ba      	ldr	r2, [r7, #24]
 80123ca:	4313      	orrs	r3, r2
 80123cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	69ba      	ldr	r2, [r7, #24]
 80123d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	f003 0303 	and.w	r3, r3, #3
 80123dc:	2b02      	cmp	r3, #2
 80123de:	d123      	bne.n	8012428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	08da      	lsrs	r2, r3, #3
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	3208      	adds	r2, #8
 80123e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80123ee:	69fb      	ldr	r3, [r7, #28]
 80123f0:	f003 0307 	and.w	r3, r3, #7
 80123f4:	009b      	lsls	r3, r3, #2
 80123f6:	220f      	movs	r2, #15
 80123f8:	fa02 f303 	lsl.w	r3, r2, r3
 80123fc:	43db      	mvns	r3, r3
 80123fe:	69ba      	ldr	r2, [r7, #24]
 8012400:	4013      	ands	r3, r2
 8012402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	691a      	ldr	r2, [r3, #16]
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	f003 0307 	and.w	r3, r3, #7
 801240e:	009b      	lsls	r3, r3, #2
 8012410:	fa02 f303 	lsl.w	r3, r2, r3
 8012414:	69ba      	ldr	r2, [r7, #24]
 8012416:	4313      	orrs	r3, r2
 8012418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801241a:	69fb      	ldr	r3, [r7, #28]
 801241c:	08da      	lsrs	r2, r3, #3
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	3208      	adds	r2, #8
 8012422:	69b9      	ldr	r1, [r7, #24]
 8012424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801242e:	69fb      	ldr	r3, [r7, #28]
 8012430:	005b      	lsls	r3, r3, #1
 8012432:	2203      	movs	r2, #3
 8012434:	fa02 f303 	lsl.w	r3, r2, r3
 8012438:	43db      	mvns	r3, r3
 801243a:	69ba      	ldr	r2, [r7, #24]
 801243c:	4013      	ands	r3, r2
 801243e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	f003 0203 	and.w	r2, r3, #3
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	005b      	lsls	r3, r3, #1
 801244c:	fa02 f303 	lsl.w	r3, r2, r3
 8012450:	69ba      	ldr	r2, [r7, #24]
 8012452:	4313      	orrs	r3, r2
 8012454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	69ba      	ldr	r2, [r7, #24]
 801245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012464:	2b00      	cmp	r3, #0
 8012466:	f000 80b4 	beq.w	80125d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801246a:	2300      	movs	r3, #0
 801246c:	60fb      	str	r3, [r7, #12]
 801246e:	4b60      	ldr	r3, [pc, #384]	; (80125f0 <HAL_GPIO_Init+0x30c>)
 8012470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012472:	4a5f      	ldr	r2, [pc, #380]	; (80125f0 <HAL_GPIO_Init+0x30c>)
 8012474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012478:	6453      	str	r3, [r2, #68]	; 0x44
 801247a:	4b5d      	ldr	r3, [pc, #372]	; (80125f0 <HAL_GPIO_Init+0x30c>)
 801247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012482:	60fb      	str	r3, [r7, #12]
 8012484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012486:	4a5b      	ldr	r2, [pc, #364]	; (80125f4 <HAL_GPIO_Init+0x310>)
 8012488:	69fb      	ldr	r3, [r7, #28]
 801248a:	089b      	lsrs	r3, r3, #2
 801248c:	3302      	adds	r3, #2
 801248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	f003 0303 	and.w	r3, r3, #3
 801249a:	009b      	lsls	r3, r3, #2
 801249c:	220f      	movs	r2, #15
 801249e:	fa02 f303 	lsl.w	r3, r2, r3
 80124a2:	43db      	mvns	r3, r3
 80124a4:	69ba      	ldr	r2, [r7, #24]
 80124a6:	4013      	ands	r3, r2
 80124a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4a52      	ldr	r2, [pc, #328]	; (80125f8 <HAL_GPIO_Init+0x314>)
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d02b      	beq.n	801250a <HAL_GPIO_Init+0x226>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	4a51      	ldr	r2, [pc, #324]	; (80125fc <HAL_GPIO_Init+0x318>)
 80124b6:	4293      	cmp	r3, r2
 80124b8:	d025      	beq.n	8012506 <HAL_GPIO_Init+0x222>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	4a50      	ldr	r2, [pc, #320]	; (8012600 <HAL_GPIO_Init+0x31c>)
 80124be:	4293      	cmp	r3, r2
 80124c0:	d01f      	beq.n	8012502 <HAL_GPIO_Init+0x21e>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4a4f      	ldr	r2, [pc, #316]	; (8012604 <HAL_GPIO_Init+0x320>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d019      	beq.n	80124fe <HAL_GPIO_Init+0x21a>
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	4a4e      	ldr	r2, [pc, #312]	; (8012608 <HAL_GPIO_Init+0x324>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d013      	beq.n	80124fa <HAL_GPIO_Init+0x216>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	4a4d      	ldr	r2, [pc, #308]	; (801260c <HAL_GPIO_Init+0x328>)
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d00d      	beq.n	80124f6 <HAL_GPIO_Init+0x212>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4a4c      	ldr	r2, [pc, #304]	; (8012610 <HAL_GPIO_Init+0x32c>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d007      	beq.n	80124f2 <HAL_GPIO_Init+0x20e>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	4a4b      	ldr	r2, [pc, #300]	; (8012614 <HAL_GPIO_Init+0x330>)
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d101      	bne.n	80124ee <HAL_GPIO_Init+0x20a>
 80124ea:	2307      	movs	r3, #7
 80124ec:	e00e      	b.n	801250c <HAL_GPIO_Init+0x228>
 80124ee:	2308      	movs	r3, #8
 80124f0:	e00c      	b.n	801250c <HAL_GPIO_Init+0x228>
 80124f2:	2306      	movs	r3, #6
 80124f4:	e00a      	b.n	801250c <HAL_GPIO_Init+0x228>
 80124f6:	2305      	movs	r3, #5
 80124f8:	e008      	b.n	801250c <HAL_GPIO_Init+0x228>
 80124fa:	2304      	movs	r3, #4
 80124fc:	e006      	b.n	801250c <HAL_GPIO_Init+0x228>
 80124fe:	2303      	movs	r3, #3
 8012500:	e004      	b.n	801250c <HAL_GPIO_Init+0x228>
 8012502:	2302      	movs	r3, #2
 8012504:	e002      	b.n	801250c <HAL_GPIO_Init+0x228>
 8012506:	2301      	movs	r3, #1
 8012508:	e000      	b.n	801250c <HAL_GPIO_Init+0x228>
 801250a:	2300      	movs	r3, #0
 801250c:	69fa      	ldr	r2, [r7, #28]
 801250e:	f002 0203 	and.w	r2, r2, #3
 8012512:	0092      	lsls	r2, r2, #2
 8012514:	4093      	lsls	r3, r2
 8012516:	69ba      	ldr	r2, [r7, #24]
 8012518:	4313      	orrs	r3, r2
 801251a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801251c:	4935      	ldr	r1, [pc, #212]	; (80125f4 <HAL_GPIO_Init+0x310>)
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	089b      	lsrs	r3, r3, #2
 8012522:	3302      	adds	r3, #2
 8012524:	69ba      	ldr	r2, [r7, #24]
 8012526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801252a:	4b3b      	ldr	r3, [pc, #236]	; (8012618 <HAL_GPIO_Init+0x334>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	43db      	mvns	r3, r3
 8012534:	69ba      	ldr	r2, [r7, #24]
 8012536:	4013      	ands	r3, r2
 8012538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012542:	2b00      	cmp	r3, #0
 8012544:	d003      	beq.n	801254e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8012546:	69ba      	ldr	r2, [r7, #24]
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	4313      	orrs	r3, r2
 801254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801254e:	4a32      	ldr	r2, [pc, #200]	; (8012618 <HAL_GPIO_Init+0x334>)
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012554:	4b30      	ldr	r3, [pc, #192]	; (8012618 <HAL_GPIO_Init+0x334>)
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	43db      	mvns	r3, r3
 801255e:	69ba      	ldr	r2, [r7, #24]
 8012560:	4013      	ands	r3, r2
 8012562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801256c:	2b00      	cmp	r3, #0
 801256e:	d003      	beq.n	8012578 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012570:	69ba      	ldr	r2, [r7, #24]
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	4313      	orrs	r3, r2
 8012576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012578:	4a27      	ldr	r2, [pc, #156]	; (8012618 <HAL_GPIO_Init+0x334>)
 801257a:	69bb      	ldr	r3, [r7, #24]
 801257c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801257e:	4b26      	ldr	r3, [pc, #152]	; (8012618 <HAL_GPIO_Init+0x334>)
 8012580:	689b      	ldr	r3, [r3, #8]
 8012582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	43db      	mvns	r3, r3
 8012588:	69ba      	ldr	r2, [r7, #24]
 801258a:	4013      	ands	r3, r2
 801258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012596:	2b00      	cmp	r3, #0
 8012598:	d003      	beq.n	80125a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801259a:	69ba      	ldr	r2, [r7, #24]
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	4313      	orrs	r3, r2
 80125a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80125a2:	4a1d      	ldr	r2, [pc, #116]	; (8012618 <HAL_GPIO_Init+0x334>)
 80125a4:	69bb      	ldr	r3, [r7, #24]
 80125a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80125a8:	4b1b      	ldr	r3, [pc, #108]	; (8012618 <HAL_GPIO_Init+0x334>)
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	43db      	mvns	r3, r3
 80125b2:	69ba      	ldr	r2, [r7, #24]
 80125b4:	4013      	ands	r3, r2
 80125b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d003      	beq.n	80125cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80125c4:	69ba      	ldr	r2, [r7, #24]
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	4313      	orrs	r3, r2
 80125ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80125cc:	4a12      	ldr	r2, [pc, #72]	; (8012618 <HAL_GPIO_Init+0x334>)
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80125d2:	69fb      	ldr	r3, [r7, #28]
 80125d4:	3301      	adds	r3, #1
 80125d6:	61fb      	str	r3, [r7, #28]
 80125d8:	69fb      	ldr	r3, [r7, #28]
 80125da:	2b0f      	cmp	r3, #15
 80125dc:	f67f ae90 	bls.w	8012300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80125e0:	bf00      	nop
 80125e2:	bf00      	nop
 80125e4:	3724      	adds	r7, #36	; 0x24
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	40023800 	.word	0x40023800
 80125f4:	40013800 	.word	0x40013800
 80125f8:	40020000 	.word	0x40020000
 80125fc:	40020400 	.word	0x40020400
 8012600:	40020800 	.word	0x40020800
 8012604:	40020c00 	.word	0x40020c00
 8012608:	40021000 	.word	0x40021000
 801260c:	40021400 	.word	0x40021400
 8012610:	40021800 	.word	0x40021800
 8012614:	40021c00 	.word	0x40021c00
 8012618:	40013c00 	.word	0x40013c00

0801261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801261c:	b480      	push	{r7}
 801261e:	b083      	sub	sp, #12
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
 8012624:	460b      	mov	r3, r1
 8012626:	807b      	strh	r3, [r7, #2]
 8012628:	4613      	mov	r3, r2
 801262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801262c:	787b      	ldrb	r3, [r7, #1]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d003      	beq.n	801263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012632:	887a      	ldrh	r2, [r7, #2]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012638:	e003      	b.n	8012642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801263a:	887b      	ldrh	r3, [r7, #2]
 801263c:	041a      	lsls	r2, r3, #16
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	619a      	str	r2, [r3, #24]
}
 8012642:	bf00      	nop
 8012644:	370c      	adds	r7, #12
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
	...

08012650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b086      	sub	sp, #24
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d101      	bne.n	8012662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801265e:	2301      	movs	r3, #1
 8012660:	e264      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	f003 0301 	and.w	r3, r3, #1
 801266a:	2b00      	cmp	r3, #0
 801266c:	d075      	beq.n	801275a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801266e:	4ba3      	ldr	r3, [pc, #652]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 8012670:	689b      	ldr	r3, [r3, #8]
 8012672:	f003 030c 	and.w	r3, r3, #12
 8012676:	2b04      	cmp	r3, #4
 8012678:	d00c      	beq.n	8012694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801267a:	4ba0      	ldr	r3, [pc, #640]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 801267c:	689b      	ldr	r3, [r3, #8]
 801267e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012682:	2b08      	cmp	r3, #8
 8012684:	d112      	bne.n	80126ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012686:	4b9d      	ldr	r3, [pc, #628]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801268e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012692:	d10b      	bne.n	80126ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012694:	4b99      	ldr	r3, [pc, #612]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801269c:	2b00      	cmp	r3, #0
 801269e:	d05b      	beq.n	8012758 <HAL_RCC_OscConfig+0x108>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d157      	bne.n	8012758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80126a8:	2301      	movs	r3, #1
 80126aa:	e23f      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126b4:	d106      	bne.n	80126c4 <HAL_RCC_OscConfig+0x74>
 80126b6:	4b91      	ldr	r3, [pc, #580]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	4a90      	ldr	r2, [pc, #576]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80126bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80126c0:	6013      	str	r3, [r2, #0]
 80126c2:	e01d      	b.n	8012700 <HAL_RCC_OscConfig+0xb0>
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80126cc:	d10c      	bne.n	80126e8 <HAL_RCC_OscConfig+0x98>
 80126ce:	4b8b      	ldr	r3, [pc, #556]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	4a8a      	ldr	r2, [pc, #552]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80126d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80126d8:	6013      	str	r3, [r2, #0]
 80126da:	4b88      	ldr	r3, [pc, #544]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	4a87      	ldr	r2, [pc, #540]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80126e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80126e4:	6013      	str	r3, [r2, #0]
 80126e6:	e00b      	b.n	8012700 <HAL_RCC_OscConfig+0xb0>
 80126e8:	4b84      	ldr	r3, [pc, #528]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	4a83      	ldr	r2, [pc, #524]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80126ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80126f2:	6013      	str	r3, [r2, #0]
 80126f4:	4b81      	ldr	r3, [pc, #516]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4a80      	ldr	r2, [pc, #512]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80126fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80126fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d013      	beq.n	8012730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012708:	f7ff f9fe 	bl	8011b08 <HAL_GetTick>
 801270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801270e:	e008      	b.n	8012722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012710:	f7ff f9fa 	bl	8011b08 <HAL_GetTick>
 8012714:	4602      	mov	r2, r0
 8012716:	693b      	ldr	r3, [r7, #16]
 8012718:	1ad3      	subs	r3, r2, r3
 801271a:	2b64      	cmp	r3, #100	; 0x64
 801271c:	d901      	bls.n	8012722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801271e:	2303      	movs	r3, #3
 8012720:	e204      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012722:	4b76      	ldr	r3, [pc, #472]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801272a:	2b00      	cmp	r3, #0
 801272c:	d0f0      	beq.n	8012710 <HAL_RCC_OscConfig+0xc0>
 801272e:	e014      	b.n	801275a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012730:	f7ff f9ea 	bl	8011b08 <HAL_GetTick>
 8012734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012736:	e008      	b.n	801274a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012738:	f7ff f9e6 	bl	8011b08 <HAL_GetTick>
 801273c:	4602      	mov	r2, r0
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	1ad3      	subs	r3, r2, r3
 8012742:	2b64      	cmp	r3, #100	; 0x64
 8012744:	d901      	bls.n	801274a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012746:	2303      	movs	r3, #3
 8012748:	e1f0      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801274a:	4b6c      	ldr	r3, [pc, #432]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012752:	2b00      	cmp	r3, #0
 8012754:	d1f0      	bne.n	8012738 <HAL_RCC_OscConfig+0xe8>
 8012756:	e000      	b.n	801275a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f003 0302 	and.w	r3, r3, #2
 8012762:	2b00      	cmp	r3, #0
 8012764:	d063      	beq.n	801282e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012766:	4b65      	ldr	r3, [pc, #404]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 8012768:	689b      	ldr	r3, [r3, #8]
 801276a:	f003 030c 	and.w	r3, r3, #12
 801276e:	2b00      	cmp	r3, #0
 8012770:	d00b      	beq.n	801278a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012772:	4b62      	ldr	r3, [pc, #392]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 8012774:	689b      	ldr	r3, [r3, #8]
 8012776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801277a:	2b08      	cmp	r3, #8
 801277c:	d11c      	bne.n	80127b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801277e:	4b5f      	ldr	r3, [pc, #380]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012786:	2b00      	cmp	r3, #0
 8012788:	d116      	bne.n	80127b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801278a:	4b5c      	ldr	r3, [pc, #368]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	f003 0302 	and.w	r3, r3, #2
 8012792:	2b00      	cmp	r3, #0
 8012794:	d005      	beq.n	80127a2 <HAL_RCC_OscConfig+0x152>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	2b01      	cmp	r3, #1
 801279c:	d001      	beq.n	80127a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801279e:	2301      	movs	r3, #1
 80127a0:	e1c4      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80127a2:	4b56      	ldr	r3, [pc, #344]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	691b      	ldr	r3, [r3, #16]
 80127ae:	00db      	lsls	r3, r3, #3
 80127b0:	4952      	ldr	r1, [pc, #328]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80127b2:	4313      	orrs	r3, r2
 80127b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80127b6:	e03a      	b.n	801282e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d020      	beq.n	8012802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80127c0:	4b4f      	ldr	r3, [pc, #316]	; (8012900 <HAL_RCC_OscConfig+0x2b0>)
 80127c2:	2201      	movs	r2, #1
 80127c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80127c6:	f7ff f99f 	bl	8011b08 <HAL_GetTick>
 80127ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80127cc:	e008      	b.n	80127e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80127ce:	f7ff f99b 	bl	8011b08 <HAL_GetTick>
 80127d2:	4602      	mov	r2, r0
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	1ad3      	subs	r3, r2, r3
 80127d8:	2b02      	cmp	r3, #2
 80127da:	d901      	bls.n	80127e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80127dc:	2303      	movs	r3, #3
 80127de:	e1a5      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80127e0:	4b46      	ldr	r3, [pc, #280]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	f003 0302 	and.w	r3, r3, #2
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d0f0      	beq.n	80127ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80127ec:	4b43      	ldr	r3, [pc, #268]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	691b      	ldr	r3, [r3, #16]
 80127f8:	00db      	lsls	r3, r3, #3
 80127fa:	4940      	ldr	r1, [pc, #256]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80127fc:	4313      	orrs	r3, r2
 80127fe:	600b      	str	r3, [r1, #0]
 8012800:	e015      	b.n	801282e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012802:	4b3f      	ldr	r3, [pc, #252]	; (8012900 <HAL_RCC_OscConfig+0x2b0>)
 8012804:	2200      	movs	r2, #0
 8012806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012808:	f7ff f97e 	bl	8011b08 <HAL_GetTick>
 801280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801280e:	e008      	b.n	8012822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012810:	f7ff f97a 	bl	8011b08 <HAL_GetTick>
 8012814:	4602      	mov	r2, r0
 8012816:	693b      	ldr	r3, [r7, #16]
 8012818:	1ad3      	subs	r3, r2, r3
 801281a:	2b02      	cmp	r3, #2
 801281c:	d901      	bls.n	8012822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801281e:	2303      	movs	r3, #3
 8012820:	e184      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012822:	4b36      	ldr	r3, [pc, #216]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	f003 0302 	and.w	r3, r3, #2
 801282a:	2b00      	cmp	r3, #0
 801282c:	d1f0      	bne.n	8012810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	f003 0308 	and.w	r3, r3, #8
 8012836:	2b00      	cmp	r3, #0
 8012838:	d030      	beq.n	801289c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	695b      	ldr	r3, [r3, #20]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d016      	beq.n	8012870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012842:	4b30      	ldr	r3, [pc, #192]	; (8012904 <HAL_RCC_OscConfig+0x2b4>)
 8012844:	2201      	movs	r2, #1
 8012846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012848:	f7ff f95e 	bl	8011b08 <HAL_GetTick>
 801284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801284e:	e008      	b.n	8012862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012850:	f7ff f95a 	bl	8011b08 <HAL_GetTick>
 8012854:	4602      	mov	r2, r0
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	1ad3      	subs	r3, r2, r3
 801285a:	2b02      	cmp	r3, #2
 801285c:	d901      	bls.n	8012862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801285e:	2303      	movs	r3, #3
 8012860:	e164      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012862:	4b26      	ldr	r3, [pc, #152]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 8012864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012866:	f003 0302 	and.w	r3, r3, #2
 801286a:	2b00      	cmp	r3, #0
 801286c:	d0f0      	beq.n	8012850 <HAL_RCC_OscConfig+0x200>
 801286e:	e015      	b.n	801289c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012870:	4b24      	ldr	r3, [pc, #144]	; (8012904 <HAL_RCC_OscConfig+0x2b4>)
 8012872:	2200      	movs	r2, #0
 8012874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012876:	f7ff f947 	bl	8011b08 <HAL_GetTick>
 801287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801287c:	e008      	b.n	8012890 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801287e:	f7ff f943 	bl	8011b08 <HAL_GetTick>
 8012882:	4602      	mov	r2, r0
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	1ad3      	subs	r3, r2, r3
 8012888:	2b02      	cmp	r3, #2
 801288a:	d901      	bls.n	8012890 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801288c:	2303      	movs	r3, #3
 801288e:	e14d      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012890:	4b1a      	ldr	r3, [pc, #104]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 8012892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012894:	f003 0302 	and.w	r3, r3, #2
 8012898:	2b00      	cmp	r3, #0
 801289a:	d1f0      	bne.n	801287e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	f003 0304 	and.w	r3, r3, #4
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	f000 80a0 	beq.w	80129ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80128aa:	2300      	movs	r3, #0
 80128ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80128ae:	4b13      	ldr	r3, [pc, #76]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80128b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d10f      	bne.n	80128da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80128ba:	2300      	movs	r3, #0
 80128bc:	60bb      	str	r3, [r7, #8]
 80128be:	4b0f      	ldr	r3, [pc, #60]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80128c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128c2:	4a0e      	ldr	r2, [pc, #56]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80128c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128c8:	6413      	str	r3, [r2, #64]	; 0x40
 80128ca:	4b0c      	ldr	r3, [pc, #48]	; (80128fc <HAL_RCC_OscConfig+0x2ac>)
 80128cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80128d2:	60bb      	str	r3, [r7, #8]
 80128d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80128d6:	2301      	movs	r3, #1
 80128d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80128da:	4b0b      	ldr	r3, [pc, #44]	; (8012908 <HAL_RCC_OscConfig+0x2b8>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d121      	bne.n	801292a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80128e6:	4b08      	ldr	r3, [pc, #32]	; (8012908 <HAL_RCC_OscConfig+0x2b8>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	4a07      	ldr	r2, [pc, #28]	; (8012908 <HAL_RCC_OscConfig+0x2b8>)
 80128ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80128f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80128f2:	f7ff f909 	bl	8011b08 <HAL_GetTick>
 80128f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80128f8:	e011      	b.n	801291e <HAL_RCC_OscConfig+0x2ce>
 80128fa:	bf00      	nop
 80128fc:	40023800 	.word	0x40023800
 8012900:	42470000 	.word	0x42470000
 8012904:	42470e80 	.word	0x42470e80
 8012908:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801290c:	f7ff f8fc 	bl	8011b08 <HAL_GetTick>
 8012910:	4602      	mov	r2, r0
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	1ad3      	subs	r3, r2, r3
 8012916:	2b02      	cmp	r3, #2
 8012918:	d901      	bls.n	801291e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801291a:	2303      	movs	r3, #3
 801291c:	e106      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801291e:	4b85      	ldr	r3, [pc, #532]	; (8012b34 <HAL_RCC_OscConfig+0x4e4>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012926:	2b00      	cmp	r3, #0
 8012928:	d0f0      	beq.n	801290c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	689b      	ldr	r3, [r3, #8]
 801292e:	2b01      	cmp	r3, #1
 8012930:	d106      	bne.n	8012940 <HAL_RCC_OscConfig+0x2f0>
 8012932:	4b81      	ldr	r3, [pc, #516]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012936:	4a80      	ldr	r2, [pc, #512]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012938:	f043 0301 	orr.w	r3, r3, #1
 801293c:	6713      	str	r3, [r2, #112]	; 0x70
 801293e:	e01c      	b.n	801297a <HAL_RCC_OscConfig+0x32a>
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	689b      	ldr	r3, [r3, #8]
 8012944:	2b05      	cmp	r3, #5
 8012946:	d10c      	bne.n	8012962 <HAL_RCC_OscConfig+0x312>
 8012948:	4b7b      	ldr	r3, [pc, #492]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 801294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801294c:	4a7a      	ldr	r2, [pc, #488]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 801294e:	f043 0304 	orr.w	r3, r3, #4
 8012952:	6713      	str	r3, [r2, #112]	; 0x70
 8012954:	4b78      	ldr	r3, [pc, #480]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012958:	4a77      	ldr	r2, [pc, #476]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 801295a:	f043 0301 	orr.w	r3, r3, #1
 801295e:	6713      	str	r3, [r2, #112]	; 0x70
 8012960:	e00b      	b.n	801297a <HAL_RCC_OscConfig+0x32a>
 8012962:	4b75      	ldr	r3, [pc, #468]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012966:	4a74      	ldr	r2, [pc, #464]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012968:	f023 0301 	bic.w	r3, r3, #1
 801296c:	6713      	str	r3, [r2, #112]	; 0x70
 801296e:	4b72      	ldr	r3, [pc, #456]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012972:	4a71      	ldr	r2, [pc, #452]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012974:	f023 0304 	bic.w	r3, r3, #4
 8012978:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	689b      	ldr	r3, [r3, #8]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d015      	beq.n	80129ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012982:	f7ff f8c1 	bl	8011b08 <HAL_GetTick>
 8012986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012988:	e00a      	b.n	80129a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801298a:	f7ff f8bd 	bl	8011b08 <HAL_GetTick>
 801298e:	4602      	mov	r2, r0
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	1ad3      	subs	r3, r2, r3
 8012994:	f241 3288 	movw	r2, #5000	; 0x1388
 8012998:	4293      	cmp	r3, r2
 801299a:	d901      	bls.n	80129a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801299c:	2303      	movs	r3, #3
 801299e:	e0c5      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80129a0:	4b65      	ldr	r3, [pc, #404]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 80129a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129a4:	f003 0302 	and.w	r3, r3, #2
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d0ee      	beq.n	801298a <HAL_RCC_OscConfig+0x33a>
 80129ac:	e014      	b.n	80129d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80129ae:	f7ff f8ab 	bl	8011b08 <HAL_GetTick>
 80129b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80129b4:	e00a      	b.n	80129cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80129b6:	f7ff f8a7 	bl	8011b08 <HAL_GetTick>
 80129ba:	4602      	mov	r2, r0
 80129bc:	693b      	ldr	r3, [r7, #16]
 80129be:	1ad3      	subs	r3, r2, r3
 80129c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80129c4:	4293      	cmp	r3, r2
 80129c6:	d901      	bls.n	80129cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80129c8:	2303      	movs	r3, #3
 80129ca:	e0af      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80129cc:	4b5a      	ldr	r3, [pc, #360]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 80129ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129d0:	f003 0302 	and.w	r3, r3, #2
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d1ee      	bne.n	80129b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80129d8:	7dfb      	ldrb	r3, [r7, #23]
 80129da:	2b01      	cmp	r3, #1
 80129dc:	d105      	bne.n	80129ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80129de:	4b56      	ldr	r3, [pc, #344]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 80129e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129e2:	4a55      	ldr	r2, [pc, #340]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 80129e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80129e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	699b      	ldr	r3, [r3, #24]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	f000 809b 	beq.w	8012b2a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80129f4:	4b50      	ldr	r3, [pc, #320]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 80129f6:	689b      	ldr	r3, [r3, #8]
 80129f8:	f003 030c 	and.w	r3, r3, #12
 80129fc:	2b08      	cmp	r3, #8
 80129fe:	d05c      	beq.n	8012aba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	699b      	ldr	r3, [r3, #24]
 8012a04:	2b02      	cmp	r3, #2
 8012a06:	d141      	bne.n	8012a8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012a08:	4b4c      	ldr	r3, [pc, #304]	; (8012b3c <HAL_RCC_OscConfig+0x4ec>)
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012a0e:	f7ff f87b 	bl	8011b08 <HAL_GetTick>
 8012a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012a14:	e008      	b.n	8012a28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012a16:	f7ff f877 	bl	8011b08 <HAL_GetTick>
 8012a1a:	4602      	mov	r2, r0
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	2b02      	cmp	r3, #2
 8012a22:	d901      	bls.n	8012a28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8012a24:	2303      	movs	r3, #3
 8012a26:	e081      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012a28:	4b43      	ldr	r3, [pc, #268]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d1f0      	bne.n	8012a16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	69da      	ldr	r2, [r3, #28]
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6a1b      	ldr	r3, [r3, #32]
 8012a3c:	431a      	orrs	r2, r3
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a42:	019b      	lsls	r3, r3, #6
 8012a44:	431a      	orrs	r2, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a4a:	085b      	lsrs	r3, r3, #1
 8012a4c:	3b01      	subs	r3, #1
 8012a4e:	041b      	lsls	r3, r3, #16
 8012a50:	431a      	orrs	r2, r3
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a56:	061b      	lsls	r3, r3, #24
 8012a58:	4937      	ldr	r1, [pc, #220]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012a5a:	4313      	orrs	r3, r2
 8012a5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012a5e:	4b37      	ldr	r3, [pc, #220]	; (8012b3c <HAL_RCC_OscConfig+0x4ec>)
 8012a60:	2201      	movs	r2, #1
 8012a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012a64:	f7ff f850 	bl	8011b08 <HAL_GetTick>
 8012a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012a6a:	e008      	b.n	8012a7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012a6c:	f7ff f84c 	bl	8011b08 <HAL_GetTick>
 8012a70:	4602      	mov	r2, r0
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	1ad3      	subs	r3, r2, r3
 8012a76:	2b02      	cmp	r3, #2
 8012a78:	d901      	bls.n	8012a7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8012a7a:	2303      	movs	r3, #3
 8012a7c:	e056      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012a7e:	4b2e      	ldr	r3, [pc, #184]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d0f0      	beq.n	8012a6c <HAL_RCC_OscConfig+0x41c>
 8012a8a:	e04e      	b.n	8012b2a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012a8c:	4b2b      	ldr	r3, [pc, #172]	; (8012b3c <HAL_RCC_OscConfig+0x4ec>)
 8012a8e:	2200      	movs	r2, #0
 8012a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012a92:	f7ff f839 	bl	8011b08 <HAL_GetTick>
 8012a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012a98:	e008      	b.n	8012aac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012a9a:	f7ff f835 	bl	8011b08 <HAL_GetTick>
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	1ad3      	subs	r3, r2, r3
 8012aa4:	2b02      	cmp	r3, #2
 8012aa6:	d901      	bls.n	8012aac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012aa8:	2303      	movs	r3, #3
 8012aaa:	e03f      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012aac:	4b22      	ldr	r3, [pc, #136]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d1f0      	bne.n	8012a9a <HAL_RCC_OscConfig+0x44a>
 8012ab8:	e037      	b.n	8012b2a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	699b      	ldr	r3, [r3, #24]
 8012abe:	2b01      	cmp	r3, #1
 8012ac0:	d101      	bne.n	8012ac6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	e032      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012ac6:	4b1c      	ldr	r3, [pc, #112]	; (8012b38 <HAL_RCC_OscConfig+0x4e8>)
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	699b      	ldr	r3, [r3, #24]
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d028      	beq.n	8012b26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d121      	bne.n	8012b26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d11a      	bne.n	8012b26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012af0:	68fa      	ldr	r2, [r7, #12]
 8012af2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012af6:	4013      	ands	r3, r2
 8012af8:	687a      	ldr	r2, [r7, #4]
 8012afa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012afc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012afe:	4293      	cmp	r3, r2
 8012b00:	d111      	bne.n	8012b26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b0c:	085b      	lsrs	r3, r3, #1
 8012b0e:	3b01      	subs	r3, #1
 8012b10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012b12:	429a      	cmp	r2, r3
 8012b14:	d107      	bne.n	8012b26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d001      	beq.n	8012b2a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8012b26:	2301      	movs	r3, #1
 8012b28:	e000      	b.n	8012b2c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8012b2a:	2300      	movs	r3, #0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3718      	adds	r7, #24
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	40007000 	.word	0x40007000
 8012b38:	40023800 	.word	0x40023800
 8012b3c:	42470060 	.word	0x42470060

08012b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b084      	sub	sp, #16
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d101      	bne.n	8012b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012b50:	2301      	movs	r3, #1
 8012b52:	e0cc      	b.n	8012cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012b54:	4b68      	ldr	r3, [pc, #416]	; (8012cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	f003 0307 	and.w	r3, r3, #7
 8012b5c:	683a      	ldr	r2, [r7, #0]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d90c      	bls.n	8012b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012b62:	4b65      	ldr	r3, [pc, #404]	; (8012cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8012b64:	683a      	ldr	r2, [r7, #0]
 8012b66:	b2d2      	uxtb	r2, r2
 8012b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012b6a:	4b63      	ldr	r3, [pc, #396]	; (8012cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	f003 0307 	and.w	r3, r3, #7
 8012b72:	683a      	ldr	r2, [r7, #0]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d001      	beq.n	8012b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012b78:	2301      	movs	r3, #1
 8012b7a:	e0b8      	b.n	8012cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	f003 0302 	and.w	r3, r3, #2
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d020      	beq.n	8012bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	f003 0304 	and.w	r3, r3, #4
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d005      	beq.n	8012ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012b94:	4b59      	ldr	r3, [pc, #356]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012b96:	689b      	ldr	r3, [r3, #8]
 8012b98:	4a58      	ldr	r2, [pc, #352]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012b9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012b9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	f003 0308 	and.w	r3, r3, #8
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d005      	beq.n	8012bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012bac:	4b53      	ldr	r3, [pc, #332]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012bae:	689b      	ldr	r3, [r3, #8]
 8012bb0:	4a52      	ldr	r2, [pc, #328]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012bb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012bb8:	4b50      	ldr	r3, [pc, #320]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012bba:	689b      	ldr	r3, [r3, #8]
 8012bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	689b      	ldr	r3, [r3, #8]
 8012bc4:	494d      	ldr	r1, [pc, #308]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012bc6:	4313      	orrs	r3, r2
 8012bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	f003 0301 	and.w	r3, r3, #1
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d044      	beq.n	8012c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	2b01      	cmp	r3, #1
 8012bdc:	d107      	bne.n	8012bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012bde:	4b47      	ldr	r3, [pc, #284]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d119      	bne.n	8012c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012bea:	2301      	movs	r3, #1
 8012bec:	e07f      	b.n	8012cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	2b02      	cmp	r3, #2
 8012bf4:	d003      	beq.n	8012bfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012bfa:	2b03      	cmp	r3, #3
 8012bfc:	d107      	bne.n	8012c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012bfe:	4b3f      	ldr	r3, [pc, #252]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d109      	bne.n	8012c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	e06f      	b.n	8012cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012c0e:	4b3b      	ldr	r3, [pc, #236]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f003 0302 	and.w	r3, r3, #2
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d101      	bne.n	8012c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	e067      	b.n	8012cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012c1e:	4b37      	ldr	r3, [pc, #220]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012c20:	689b      	ldr	r3, [r3, #8]
 8012c22:	f023 0203 	bic.w	r2, r3, #3
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	4934      	ldr	r1, [pc, #208]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012c2c:	4313      	orrs	r3, r2
 8012c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012c30:	f7fe ff6a 	bl	8011b08 <HAL_GetTick>
 8012c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012c36:	e00a      	b.n	8012c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012c38:	f7fe ff66 	bl	8011b08 <HAL_GetTick>
 8012c3c:	4602      	mov	r2, r0
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	1ad3      	subs	r3, r2, r3
 8012c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d901      	bls.n	8012c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012c4a:	2303      	movs	r3, #3
 8012c4c:	e04f      	b.n	8012cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012c4e:	4b2b      	ldr	r3, [pc, #172]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012c50:	689b      	ldr	r3, [r3, #8]
 8012c52:	f003 020c 	and.w	r2, r3, #12
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	009b      	lsls	r3, r3, #2
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d1eb      	bne.n	8012c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012c60:	4b25      	ldr	r3, [pc, #148]	; (8012cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	f003 0307 	and.w	r3, r3, #7
 8012c68:	683a      	ldr	r2, [r7, #0]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d20c      	bcs.n	8012c88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012c6e:	4b22      	ldr	r3, [pc, #136]	; (8012cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8012c70:	683a      	ldr	r2, [r7, #0]
 8012c72:	b2d2      	uxtb	r2, r2
 8012c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012c76:	4b20      	ldr	r3, [pc, #128]	; (8012cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	f003 0307 	and.w	r3, r3, #7
 8012c7e:	683a      	ldr	r2, [r7, #0]
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d001      	beq.n	8012c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012c84:	2301      	movs	r3, #1
 8012c86:	e032      	b.n	8012cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	f003 0304 	and.w	r3, r3, #4
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d008      	beq.n	8012ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012c94:	4b19      	ldr	r3, [pc, #100]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012c96:	689b      	ldr	r3, [r3, #8]
 8012c98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	68db      	ldr	r3, [r3, #12]
 8012ca0:	4916      	ldr	r1, [pc, #88]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012ca2:	4313      	orrs	r3, r2
 8012ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	f003 0308 	and.w	r3, r3, #8
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d009      	beq.n	8012cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012cb2:	4b12      	ldr	r3, [pc, #72]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012cb4:	689b      	ldr	r3, [r3, #8]
 8012cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	691b      	ldr	r3, [r3, #16]
 8012cbe:	00db      	lsls	r3, r3, #3
 8012cc0:	490e      	ldr	r1, [pc, #56]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012cc2:	4313      	orrs	r3, r2
 8012cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012cc6:	f000 f821 	bl	8012d0c <HAL_RCC_GetSysClockFreq>
 8012cca:	4602      	mov	r2, r0
 8012ccc:	4b0b      	ldr	r3, [pc, #44]	; (8012cfc <HAL_RCC_ClockConfig+0x1bc>)
 8012cce:	689b      	ldr	r3, [r3, #8]
 8012cd0:	091b      	lsrs	r3, r3, #4
 8012cd2:	f003 030f 	and.w	r3, r3, #15
 8012cd6:	490a      	ldr	r1, [pc, #40]	; (8012d00 <HAL_RCC_ClockConfig+0x1c0>)
 8012cd8:	5ccb      	ldrb	r3, [r1, r3]
 8012cda:	fa22 f303 	lsr.w	r3, r2, r3
 8012cde:	4a09      	ldr	r2, [pc, #36]	; (8012d04 <HAL_RCC_ClockConfig+0x1c4>)
 8012ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012ce2:	4b09      	ldr	r3, [pc, #36]	; (8012d08 <HAL_RCC_ClockConfig+0x1c8>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7fe feca 	bl	8011a80 <HAL_InitTick>

  return HAL_OK;
 8012cec:	2300      	movs	r3, #0
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3710      	adds	r7, #16
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	40023c00 	.word	0x40023c00
 8012cfc:	40023800 	.word	0x40023800
 8012d00:	0801bb98 	.word	0x0801bb98
 8012d04:	20000020 	.word	0x20000020
 8012d08:	20000024 	.word	0x20000024

08012d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012d0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012d10:	b084      	sub	sp, #16
 8012d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012d14:	2300      	movs	r3, #0
 8012d16:	607b      	str	r3, [r7, #4]
 8012d18:	2300      	movs	r3, #0
 8012d1a:	60fb      	str	r3, [r7, #12]
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8012d20:	2300      	movs	r3, #0
 8012d22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012d24:	4b67      	ldr	r3, [pc, #412]	; (8012ec4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012d26:	689b      	ldr	r3, [r3, #8]
 8012d28:	f003 030c 	and.w	r3, r3, #12
 8012d2c:	2b08      	cmp	r3, #8
 8012d2e:	d00d      	beq.n	8012d4c <HAL_RCC_GetSysClockFreq+0x40>
 8012d30:	2b08      	cmp	r3, #8
 8012d32:	f200 80bd 	bhi.w	8012eb0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d002      	beq.n	8012d40 <HAL_RCC_GetSysClockFreq+0x34>
 8012d3a:	2b04      	cmp	r3, #4
 8012d3c:	d003      	beq.n	8012d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8012d3e:	e0b7      	b.n	8012eb0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012d40:	4b61      	ldr	r3, [pc, #388]	; (8012ec8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8012d42:	60bb      	str	r3, [r7, #8]
       break;
 8012d44:	e0b7      	b.n	8012eb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012d46:	4b61      	ldr	r3, [pc, #388]	; (8012ecc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8012d48:	60bb      	str	r3, [r7, #8]
      break;
 8012d4a:	e0b4      	b.n	8012eb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012d4c:	4b5d      	ldr	r3, [pc, #372]	; (8012ec4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012d56:	4b5b      	ldr	r3, [pc, #364]	; (8012ec4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012d58:	685b      	ldr	r3, [r3, #4]
 8012d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d04d      	beq.n	8012dfe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012d62:	4b58      	ldr	r3, [pc, #352]	; (8012ec4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	099b      	lsrs	r3, r3, #6
 8012d68:	461a      	mov	r2, r3
 8012d6a:	f04f 0300 	mov.w	r3, #0
 8012d6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012d72:	f04f 0100 	mov.w	r1, #0
 8012d76:	ea02 0800 	and.w	r8, r2, r0
 8012d7a:	ea03 0901 	and.w	r9, r3, r1
 8012d7e:	4640      	mov	r0, r8
 8012d80:	4649      	mov	r1, r9
 8012d82:	f04f 0200 	mov.w	r2, #0
 8012d86:	f04f 0300 	mov.w	r3, #0
 8012d8a:	014b      	lsls	r3, r1, #5
 8012d8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012d90:	0142      	lsls	r2, r0, #5
 8012d92:	4610      	mov	r0, r2
 8012d94:	4619      	mov	r1, r3
 8012d96:	ebb0 0008 	subs.w	r0, r0, r8
 8012d9a:	eb61 0109 	sbc.w	r1, r1, r9
 8012d9e:	f04f 0200 	mov.w	r2, #0
 8012da2:	f04f 0300 	mov.w	r3, #0
 8012da6:	018b      	lsls	r3, r1, #6
 8012da8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8012dac:	0182      	lsls	r2, r0, #6
 8012dae:	1a12      	subs	r2, r2, r0
 8012db0:	eb63 0301 	sbc.w	r3, r3, r1
 8012db4:	f04f 0000 	mov.w	r0, #0
 8012db8:	f04f 0100 	mov.w	r1, #0
 8012dbc:	00d9      	lsls	r1, r3, #3
 8012dbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012dc2:	00d0      	lsls	r0, r2, #3
 8012dc4:	4602      	mov	r2, r0
 8012dc6:	460b      	mov	r3, r1
 8012dc8:	eb12 0208 	adds.w	r2, r2, r8
 8012dcc:	eb43 0309 	adc.w	r3, r3, r9
 8012dd0:	f04f 0000 	mov.w	r0, #0
 8012dd4:	f04f 0100 	mov.w	r1, #0
 8012dd8:	0259      	lsls	r1, r3, #9
 8012dda:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8012dde:	0250      	lsls	r0, r2, #9
 8012de0:	4602      	mov	r2, r0
 8012de2:	460b      	mov	r3, r1
 8012de4:	4610      	mov	r0, r2
 8012de6:	4619      	mov	r1, r3
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	461a      	mov	r2, r3
 8012dec:	f04f 0300 	mov.w	r3, #0
 8012df0:	f7ed feda 	bl	8000ba8 <__aeabi_uldivmod>
 8012df4:	4602      	mov	r2, r0
 8012df6:	460b      	mov	r3, r1
 8012df8:	4613      	mov	r3, r2
 8012dfa:	60fb      	str	r3, [r7, #12]
 8012dfc:	e04a      	b.n	8012e94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012dfe:	4b31      	ldr	r3, [pc, #196]	; (8012ec4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012e00:	685b      	ldr	r3, [r3, #4]
 8012e02:	099b      	lsrs	r3, r3, #6
 8012e04:	461a      	mov	r2, r3
 8012e06:	f04f 0300 	mov.w	r3, #0
 8012e0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012e0e:	f04f 0100 	mov.w	r1, #0
 8012e12:	ea02 0400 	and.w	r4, r2, r0
 8012e16:	ea03 0501 	and.w	r5, r3, r1
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	4629      	mov	r1, r5
 8012e1e:	f04f 0200 	mov.w	r2, #0
 8012e22:	f04f 0300 	mov.w	r3, #0
 8012e26:	014b      	lsls	r3, r1, #5
 8012e28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012e2c:	0142      	lsls	r2, r0, #5
 8012e2e:	4610      	mov	r0, r2
 8012e30:	4619      	mov	r1, r3
 8012e32:	1b00      	subs	r0, r0, r4
 8012e34:	eb61 0105 	sbc.w	r1, r1, r5
 8012e38:	f04f 0200 	mov.w	r2, #0
 8012e3c:	f04f 0300 	mov.w	r3, #0
 8012e40:	018b      	lsls	r3, r1, #6
 8012e42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8012e46:	0182      	lsls	r2, r0, #6
 8012e48:	1a12      	subs	r2, r2, r0
 8012e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8012e4e:	f04f 0000 	mov.w	r0, #0
 8012e52:	f04f 0100 	mov.w	r1, #0
 8012e56:	00d9      	lsls	r1, r3, #3
 8012e58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012e5c:	00d0      	lsls	r0, r2, #3
 8012e5e:	4602      	mov	r2, r0
 8012e60:	460b      	mov	r3, r1
 8012e62:	1912      	adds	r2, r2, r4
 8012e64:	eb45 0303 	adc.w	r3, r5, r3
 8012e68:	f04f 0000 	mov.w	r0, #0
 8012e6c:	f04f 0100 	mov.w	r1, #0
 8012e70:	0299      	lsls	r1, r3, #10
 8012e72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8012e76:	0290      	lsls	r0, r2, #10
 8012e78:	4602      	mov	r2, r0
 8012e7a:	460b      	mov	r3, r1
 8012e7c:	4610      	mov	r0, r2
 8012e7e:	4619      	mov	r1, r3
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	461a      	mov	r2, r3
 8012e84:	f04f 0300 	mov.w	r3, #0
 8012e88:	f7ed fe8e 	bl	8000ba8 <__aeabi_uldivmod>
 8012e8c:	4602      	mov	r2, r0
 8012e8e:	460b      	mov	r3, r1
 8012e90:	4613      	mov	r3, r2
 8012e92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012e94:	4b0b      	ldr	r3, [pc, #44]	; (8012ec4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	0c1b      	lsrs	r3, r3, #16
 8012e9a:	f003 0303 	and.w	r3, r3, #3
 8012e9e:	3301      	adds	r3, #1
 8012ea0:	005b      	lsls	r3, r3, #1
 8012ea2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8012ea4:	68fa      	ldr	r2, [r7, #12]
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8012eac:	60bb      	str	r3, [r7, #8]
      break;
 8012eae:	e002      	b.n	8012eb6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012eb0:	4b05      	ldr	r3, [pc, #20]	; (8012ec8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8012eb2:	60bb      	str	r3, [r7, #8]
      break;
 8012eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012eb6:	68bb      	ldr	r3, [r7, #8]
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3710      	adds	r7, #16
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012ec2:	bf00      	nop
 8012ec4:	40023800 	.word	0x40023800
 8012ec8:	00f42400 	.word	0x00f42400
 8012ecc:	007a1200 	.word	0x007a1200

08012ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012ed4:	4b03      	ldr	r3, [pc, #12]	; (8012ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	46bd      	mov	sp, r7
 8012edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee0:	4770      	bx	lr
 8012ee2:	bf00      	nop
 8012ee4:	20000020 	.word	0x20000020

08012ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012eec:	f7ff fff0 	bl	8012ed0 <HAL_RCC_GetHCLKFreq>
 8012ef0:	4602      	mov	r2, r0
 8012ef2:	4b05      	ldr	r3, [pc, #20]	; (8012f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012ef4:	689b      	ldr	r3, [r3, #8]
 8012ef6:	0a9b      	lsrs	r3, r3, #10
 8012ef8:	f003 0307 	and.w	r3, r3, #7
 8012efc:	4903      	ldr	r1, [pc, #12]	; (8012f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8012efe:	5ccb      	ldrb	r3, [r1, r3]
 8012f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	40023800 	.word	0x40023800
 8012f0c:	0801bba8 	.word	0x0801bba8

08012f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012f14:	f7ff ffdc 	bl	8012ed0 <HAL_RCC_GetHCLKFreq>
 8012f18:	4602      	mov	r2, r0
 8012f1a:	4b05      	ldr	r3, [pc, #20]	; (8012f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8012f1c:	689b      	ldr	r3, [r3, #8]
 8012f1e:	0b5b      	lsrs	r3, r3, #13
 8012f20:	f003 0307 	and.w	r3, r3, #7
 8012f24:	4903      	ldr	r1, [pc, #12]	; (8012f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012f26:	5ccb      	ldrb	r3, [r1, r3]
 8012f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	40023800 	.word	0x40023800
 8012f34:	0801bba8 	.word	0x0801bba8

08012f38 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d101      	bne.n	8012f4a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8012f46:	2301      	movs	r3, #1
 8012f48:	e022      	b.n	8012f90 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f50:	b2db      	uxtb	r3, r3
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d105      	bne.n	8012f62 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7fe f8d3 	bl	8011108 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2203      	movs	r2, #3
 8012f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f000 f814 	bl	8012f98 <HAL_SD_InitCard>
 8012f70:	4603      	mov	r3, r0
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d001      	beq.n	8012f7a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8012f76:	2301      	movs	r3, #1
 8012f78:	e00a      	b.n	8012f90 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2200      	movs	r2, #0
 8012f84:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2201      	movs	r2, #1
 8012f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8012f8e:	2300      	movs	r3, #0
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3708      	adds	r7, #8
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}

08012f98 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8012f98:	b5b0      	push	{r4, r5, r7, lr}
 8012f9a:	b08e      	sub	sp, #56	; 0x38
 8012f9c:	af04      	add	r7, sp, #16
 8012f9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8012fac:	2300      	movs	r3, #0
 8012fae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8012fb4:	2376      	movs	r3, #118	; 0x76
 8012fb6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681d      	ldr	r5, [r3, #0]
 8012fbc:	466c      	mov	r4, sp
 8012fbe:	f107 0314 	add.w	r3, r7, #20
 8012fc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012fc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012fca:	f107 0308 	add.w	r3, r7, #8
 8012fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	f002 f9ed 	bl	80153b0 <SDIO_Init>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8012fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d001      	beq.n	8012fe8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	e04c      	b.n	8013082 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8012fe8:	4b28      	ldr	r3, [pc, #160]	; (801308c <HAL_SD_InitCard+0xf4>)
 8012fea:	2200      	movs	r2, #0
 8012fec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f002 fa25 	bl	8015442 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8012ff8:	4b24      	ldr	r3, [pc, #144]	; (801308c <HAL_SD_InitCard+0xf4>)
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f000 fe68 	bl	8013cd4 <SD_PowerON>
 8013004:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013006:	6a3b      	ldr	r3, [r7, #32]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d00b      	beq.n	8013024 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2201      	movs	r2, #1
 8013010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013018:	6a3b      	ldr	r3, [r7, #32]
 801301a:	431a      	orrs	r2, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8013020:	2301      	movs	r3, #1
 8013022:	e02e      	b.n	8013082 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f000 fd89 	bl	8013b3c <SD_InitCard>
 801302a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801302c:	6a3b      	ldr	r3, [r7, #32]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d00b      	beq.n	801304a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2201      	movs	r2, #1
 8013036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801303e:	6a3b      	ldr	r3, [r7, #32]
 8013040:	431a      	orrs	r2, r3
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8013046:	2301      	movs	r3, #1
 8013048:	e01b      	b.n	8013082 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013052:	4618      	mov	r0, r3
 8013054:	f002 fa88 	bl	8015568 <SDMMC_CmdBlockLength>
 8013058:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801305a:	6a3b      	ldr	r3, [r7, #32]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d00f      	beq.n	8013080 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	4a0a      	ldr	r2, [pc, #40]	; (8013090 <HAL_SD_InitCard+0xf8>)
 8013066:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801306c:	6a3b      	ldr	r3, [r7, #32]
 801306e:	431a      	orrs	r2, r3
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2201      	movs	r2, #1
 8013078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 801307c:	2301      	movs	r3, #1
 801307e:	e000      	b.n	8013082 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8013080:	2300      	movs	r3, #0
}
 8013082:	4618      	mov	r0, r3
 8013084:	3728      	adds	r7, #40	; 0x28
 8013086:	46bd      	mov	sp, r7
 8013088:	bdb0      	pop	{r4, r5, r7, pc}
 801308a:	bf00      	nop
 801308c:	422580a0 	.word	0x422580a0
 8013090:	004005ff 	.word	0x004005ff

08013094 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b092      	sub	sp, #72	; 0x48
 8013098:	af00      	add	r7, sp, #0
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	60b9      	str	r1, [r7, #8]
 801309e:	607a      	str	r2, [r7, #4]
 80130a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80130a2:	f7fe fd31 	bl	8011b08 <HAL_GetTick>
 80130a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d107      	bne.n	80130c6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80130c2:	2301      	movs	r3, #1
 80130c4:	e1bd      	b.n	8013442 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80130cc:	b2db      	uxtb	r3, r3
 80130ce:	2b01      	cmp	r3, #1
 80130d0:	f040 81b0 	bne.w	8013434 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2200      	movs	r2, #0
 80130d8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80130da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	441a      	add	r2, r3
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d907      	bls.n	80130f8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80130f4:	2301      	movs	r3, #1
 80130f6:	e1a4      	b.n	8013442 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2203      	movs	r2, #3
 80130fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	2200      	movs	r2, #0
 8013106:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801310c:	2b01      	cmp	r3, #1
 801310e:	d002      	beq.n	8013116 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8013110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013112:	025b      	lsls	r3, r3, #9
 8013114:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8013116:	f04f 33ff 	mov.w	r3, #4294967295
 801311a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	025b      	lsls	r3, r3, #9
 8013120:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8013122:	2390      	movs	r3, #144	; 0x90
 8013124:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8013126:	2302      	movs	r3, #2
 8013128:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 801312a:	2300      	movs	r3, #0
 801312c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 801312e:	2301      	movs	r3, #1
 8013130:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	f107 0214 	add.w	r2, r7, #20
 801313a:	4611      	mov	r1, r2
 801313c:	4618      	mov	r0, r3
 801313e:	f002 f9e7 	bl	8015510 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	2b01      	cmp	r3, #1
 8013146:	d90a      	bls.n	801315e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2202      	movs	r2, #2
 801314c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013154:	4618      	mov	r0, r3
 8013156:	f002 fa4b 	bl	80155f0 <SDMMC_CmdReadMultiBlock>
 801315a:	6478      	str	r0, [r7, #68]	; 0x44
 801315c:	e009      	b.n	8013172 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	2201      	movs	r2, #1
 8013162:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801316a:	4618      	mov	r0, r3
 801316c:	f002 fa1e 	bl	80155ac <SDMMC_CmdReadSingleBlock>
 8013170:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8013172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013174:	2b00      	cmp	r3, #0
 8013176:	d012      	beq.n	801319e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	4a7a      	ldr	r2, [pc, #488]	; (8013368 <HAL_SD_ReadBlocks+0x2d4>)
 801317e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013186:	431a      	orrs	r2, r3
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2201      	movs	r2, #1
 8013190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2200      	movs	r2, #0
 8013198:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 801319a:	2301      	movs	r3, #1
 801319c:	e151      	b.n	8013442 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80131a2:	e061      	b.n	8013268 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d03c      	beq.n	801322c <HAL_SD_ReadBlocks+0x198>
 80131b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d039      	beq.n	801322c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80131b8:	2300      	movs	r3, #0
 80131ba:	643b      	str	r3, [r7, #64]	; 0x40
 80131bc:	e033      	b.n	8013226 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	4618      	mov	r0, r3
 80131c4:	f002 f91f 	bl	8015406 <SDIO_ReadFIFO>
 80131c8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80131ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131cc:	b2da      	uxtb	r2, r3
 80131ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80131d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131d4:	3301      	adds	r3, #1
 80131d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80131d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131da:	3b01      	subs	r3, #1
 80131dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80131de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e0:	0a1b      	lsrs	r3, r3, #8
 80131e2:	b2da      	uxtb	r2, r3
 80131e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131e6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80131e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ea:	3301      	adds	r3, #1
 80131ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80131ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131f0:	3b01      	subs	r3, #1
 80131f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80131f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f6:	0c1b      	lsrs	r3, r3, #16
 80131f8:	b2da      	uxtb	r2, r3
 80131fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80131fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013200:	3301      	adds	r3, #1
 8013202:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8013204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013206:	3b01      	subs	r3, #1
 8013208:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 801320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320c:	0e1b      	lsrs	r3, r3, #24
 801320e:	b2da      	uxtb	r2, r3
 8013210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013212:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8013214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013216:	3301      	adds	r3, #1
 8013218:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 801321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801321c:	3b01      	subs	r3, #1
 801321e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8013220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013222:	3301      	adds	r3, #1
 8013224:	643b      	str	r3, [r7, #64]	; 0x40
 8013226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013228:	2b07      	cmp	r3, #7
 801322a:	d9c8      	bls.n	80131be <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 801322c:	f7fe fc6c 	bl	8011b08 <HAL_GetTick>
 8013230:	4602      	mov	r2, r0
 8013232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013234:	1ad3      	subs	r3, r2, r3
 8013236:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013238:	429a      	cmp	r2, r3
 801323a:	d902      	bls.n	8013242 <HAL_SD_ReadBlocks+0x1ae>
 801323c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801323e:	2b00      	cmp	r3, #0
 8013240:	d112      	bne.n	8013268 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	4a48      	ldr	r2, [pc, #288]	; (8013368 <HAL_SD_ReadBlocks+0x2d4>)
 8013248:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801324e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	2201      	movs	r2, #1
 801325a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	2200      	movs	r2, #0
 8013262:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8013264:	2303      	movs	r3, #3
 8013266:	e0ec      	b.n	8013442 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801326e:	f240 332a 	movw	r3, #810	; 0x32a
 8013272:	4013      	ands	r3, r2
 8013274:	2b00      	cmp	r3, #0
 8013276:	d095      	beq.n	80131a4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013282:	2b00      	cmp	r3, #0
 8013284:	d022      	beq.n	80132cc <HAL_SD_ReadBlocks+0x238>
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	2b01      	cmp	r3, #1
 801328a:	d91f      	bls.n	80132cc <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013290:	2b03      	cmp	r3, #3
 8013292:	d01b      	beq.n	80132cc <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	4618      	mov	r0, r3
 801329a:	f002 fa0f 	bl	80156bc <SDMMC_CmdStopTransfer>
 801329e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80132a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d012      	beq.n	80132cc <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	4a2f      	ldr	r2, [pc, #188]	; (8013368 <HAL_SD_ReadBlocks+0x2d4>)
 80132ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132b4:	431a      	orrs	r2, r3
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	2201      	movs	r2, #1
 80132be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	2200      	movs	r2, #0
 80132c6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80132c8:	2301      	movs	r3, #1
 80132ca:	e0ba      	b.n	8013442 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132d2:	f003 0308 	and.w	r3, r3, #8
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d012      	beq.n	8013300 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	4a22      	ldr	r2, [pc, #136]	; (8013368 <HAL_SD_ReadBlocks+0x2d4>)
 80132e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132e6:	f043 0208 	orr.w	r2, r3, #8
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2201      	movs	r2, #1
 80132f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	2200      	movs	r2, #0
 80132fa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80132fc:	2301      	movs	r3, #1
 80132fe:	e0a0      	b.n	8013442 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013306:	f003 0302 	and.w	r3, r3, #2
 801330a:	2b00      	cmp	r3, #0
 801330c:	d012      	beq.n	8013334 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	4a15      	ldr	r2, [pc, #84]	; (8013368 <HAL_SD_ReadBlocks+0x2d4>)
 8013314:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801331a:	f043 0202 	orr.w	r2, r3, #2
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	2201      	movs	r2, #1
 8013326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	2200      	movs	r2, #0
 801332e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8013330:	2301      	movs	r3, #1
 8013332:	e086      	b.n	8013442 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801333a:	f003 0320 	and.w	r3, r3, #32
 801333e:	2b00      	cmp	r3, #0
 8013340:	d063      	beq.n	801340a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	4a08      	ldr	r2, [pc, #32]	; (8013368 <HAL_SD_ReadBlocks+0x2d4>)
 8013348:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801334e:	f043 0220 	orr.w	r2, r3, #32
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	2201      	movs	r2, #1
 801335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2200      	movs	r2, #0
 8013362:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8013364:	2301      	movs	r3, #1
 8013366:	e06c      	b.n	8013442 <HAL_SD_ReadBlocks+0x3ae>
 8013368:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	4618      	mov	r0, r3
 8013372:	f002 f848 	bl	8015406 <SDIO_ReadFIFO>
 8013376:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8013378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337a:	b2da      	uxtb	r2, r3
 801337c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801337e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8013380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013382:	3301      	adds	r3, #1
 8013384:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8013386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013388:	3b01      	subs	r3, #1
 801338a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 801338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801338e:	0a1b      	lsrs	r3, r3, #8
 8013390:	b2da      	uxtb	r2, r3
 8013392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013394:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8013396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013398:	3301      	adds	r3, #1
 801339a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 801339c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801339e:	3b01      	subs	r3, #1
 80133a0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80133a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a4:	0c1b      	lsrs	r3, r3, #16
 80133a6:	b2da      	uxtb	r2, r3
 80133a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80133ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ae:	3301      	adds	r3, #1
 80133b0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80133b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133b4:	3b01      	subs	r3, #1
 80133b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80133b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ba:	0e1b      	lsrs	r3, r3, #24
 80133bc:	b2da      	uxtb	r2, r3
 80133be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80133c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133c4:	3301      	adds	r3, #1
 80133c6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80133c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133ca:	3b01      	subs	r3, #1
 80133cc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80133ce:	f7fe fb9b 	bl	8011b08 <HAL_GetTick>
 80133d2:	4602      	mov	r2, r0
 80133d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d6:	1ad3      	subs	r3, r2, r3
 80133d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80133da:	429a      	cmp	r2, r3
 80133dc:	d902      	bls.n	80133e4 <HAL_SD_ReadBlocks+0x350>
 80133de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d112      	bne.n	801340a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	4a18      	ldr	r2, [pc, #96]	; (801344c <HAL_SD_ReadBlocks+0x3b8>)
 80133ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2201      	movs	r2, #1
 80133fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2200      	movs	r2, #0
 8013404:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8013406:	2301      	movs	r3, #1
 8013408:	e01b      	b.n	8013442 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013414:	2b00      	cmp	r3, #0
 8013416:	d002      	beq.n	801341e <HAL_SD_ReadBlocks+0x38a>
 8013418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801341a:	2b00      	cmp	r3, #0
 801341c:	d1a6      	bne.n	801336c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	f240 523a 	movw	r2, #1338	; 0x53a
 8013426:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	2201      	movs	r2, #1
 801342c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8013430:	2300      	movs	r3, #0
 8013432:	e006      	b.n	8013442 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013438:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8013440:	2301      	movs	r3, #1
  }
}
 8013442:	4618      	mov	r0, r3
 8013444:	3748      	adds	r7, #72	; 0x48
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}
 801344a:	bf00      	nop
 801344c:	004005ff 	.word	0x004005ff

08013450 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b092      	sub	sp, #72	; 0x48
 8013454:	af00      	add	r7, sp, #0
 8013456:	60f8      	str	r0, [r7, #12]
 8013458:	60b9      	str	r1, [r7, #8]
 801345a:	607a      	str	r2, [r7, #4]
 801345c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801345e:	f7fe fb53 	bl	8011b08 <HAL_GetTick>
 8013462:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d107      	bne.n	8013482 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013476:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801347e:	2301      	movs	r3, #1
 8013480:	e166      	b.n	8013750 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013488:	b2db      	uxtb	r3, r3
 801348a:	2b01      	cmp	r3, #1
 801348c:	f040 8159 	bne.w	8013742 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2200      	movs	r2, #0
 8013494:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8013496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	441a      	add	r2, r3
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d907      	bls.n	80134b4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80134b0:	2301      	movs	r3, #1
 80134b2:	e14d      	b.n	8013750 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	2203      	movs	r2, #3
 80134b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	2200      	movs	r2, #0
 80134c2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134c8:	2b01      	cmp	r3, #1
 80134ca:	d002      	beq.n	80134d2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80134cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ce:	025b      	lsls	r3, r3, #9
 80134d0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80134d2:	f04f 33ff 	mov.w	r3, #4294967295
 80134d6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	025b      	lsls	r3, r3, #9
 80134dc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80134de:	2390      	movs	r3, #144	; 0x90
 80134e0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80134e2:	2300      	movs	r3, #0
 80134e4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80134e6:	2300      	movs	r3, #0
 80134e8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80134ea:	2301      	movs	r3, #1
 80134ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	f107 0218 	add.w	r2, r7, #24
 80134f6:	4611      	mov	r1, r2
 80134f8:	4618      	mov	r0, r3
 80134fa:	f002 f809 	bl	8015510 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	2b01      	cmp	r3, #1
 8013502:	d90a      	bls.n	801351a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2220      	movs	r2, #32
 8013508:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013510:	4618      	mov	r0, r3
 8013512:	f002 f8b1 	bl	8015678 <SDMMC_CmdWriteMultiBlock>
 8013516:	6478      	str	r0, [r7, #68]	; 0x44
 8013518:	e009      	b.n	801352e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	2210      	movs	r2, #16
 801351e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013526:	4618      	mov	r0, r3
 8013528:	f002 f884 	bl	8015634 <SDMMC_CmdWriteSingleBlock>
 801352c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 801352e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013530:	2b00      	cmp	r3, #0
 8013532:	d012      	beq.n	801355a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	4a87      	ldr	r2, [pc, #540]	; (8013758 <HAL_SD_WriteBlocks+0x308>)
 801353a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013542:	431a      	orrs	r2, r3
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2201      	movs	r2, #1
 801354c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2200      	movs	r2, #0
 8013554:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8013556:	2301      	movs	r3, #1
 8013558:	e0fa      	b.n	8013750 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 801355a:	69fb      	ldr	r3, [r7, #28]
 801355c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 801355e:	e065      	b.n	801362c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801356a:	2b00      	cmp	r3, #0
 801356c:	d040      	beq.n	80135f0 <HAL_SD_WriteBlocks+0x1a0>
 801356e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013570:	2b00      	cmp	r3, #0
 8013572:	d03d      	beq.n	80135f0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8013574:	2300      	movs	r3, #0
 8013576:	643b      	str	r3, [r7, #64]	; 0x40
 8013578:	e037      	b.n	80135ea <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 801357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801357c:	781b      	ldrb	r3, [r3, #0]
 801357e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8013580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013582:	3301      	adds	r3, #1
 8013584:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8013586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013588:	3b01      	subs	r3, #1
 801358a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 801358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	021a      	lsls	r2, r3, #8
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	4313      	orrs	r3, r2
 8013596:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8013598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801359a:	3301      	adds	r3, #1
 801359c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 801359e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135a0:	3b01      	subs	r3, #1
 80135a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80135a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	041a      	lsls	r2, r3, #16
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	4313      	orrs	r3, r2
 80135ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80135b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135b2:	3301      	adds	r3, #1
 80135b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80135b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135b8:	3b01      	subs	r3, #1
 80135ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80135bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	061a      	lsls	r2, r3, #24
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	4313      	orrs	r3, r2
 80135c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80135c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ca:	3301      	adds	r3, #1
 80135cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80135ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135d0:	3b01      	subs	r3, #1
 80135d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f107 0214 	add.w	r2, r7, #20
 80135dc:	4611      	mov	r1, r2
 80135de:	4618      	mov	r0, r3
 80135e0:	f001 ff1e 	bl	8015420 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80135e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135e6:	3301      	adds	r3, #1
 80135e8:	643b      	str	r3, [r7, #64]	; 0x40
 80135ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135ec:	2b07      	cmp	r3, #7
 80135ee:	d9c4      	bls.n	801357a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80135f0:	f7fe fa8a 	bl	8011b08 <HAL_GetTick>
 80135f4:	4602      	mov	r2, r0
 80135f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f8:	1ad3      	subs	r3, r2, r3
 80135fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d902      	bls.n	8013606 <HAL_SD_WriteBlocks+0x1b6>
 8013600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013602:	2b00      	cmp	r3, #0
 8013604:	d112      	bne.n	801362c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	4a53      	ldr	r2, [pc, #332]	; (8013758 <HAL_SD_WriteBlocks+0x308>)
 801360c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013614:	431a      	orrs	r2, r3
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	2201      	movs	r2, #1
 801361e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	2200      	movs	r2, #0
 8013626:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8013628:	2303      	movs	r3, #3
 801362a:	e091      	b.n	8013750 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013632:	f240 331a 	movw	r3, #794	; 0x31a
 8013636:	4013      	ands	r3, r2
 8013638:	2b00      	cmp	r3, #0
 801363a:	d091      	beq.n	8013560 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013646:	2b00      	cmp	r3, #0
 8013648:	d022      	beq.n	8013690 <HAL_SD_WriteBlocks+0x240>
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	2b01      	cmp	r3, #1
 801364e:	d91f      	bls.n	8013690 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013654:	2b03      	cmp	r3, #3
 8013656:	d01b      	beq.n	8013690 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	4618      	mov	r0, r3
 801365e:	f002 f82d 	bl	80156bc <SDMMC_CmdStopTransfer>
 8013662:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8013664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013666:	2b00      	cmp	r3, #0
 8013668:	d012      	beq.n	8013690 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4a3a      	ldr	r2, [pc, #232]	; (8013758 <HAL_SD_WriteBlocks+0x308>)
 8013670:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013678:	431a      	orrs	r2, r3
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	2201      	movs	r2, #1
 8013682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	2200      	movs	r2, #0
 801368a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 801368c:	2301      	movs	r3, #1
 801368e:	e05f      	b.n	8013750 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013696:	f003 0308 	and.w	r3, r3, #8
 801369a:	2b00      	cmp	r3, #0
 801369c:	d012      	beq.n	80136c4 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	4a2d      	ldr	r2, [pc, #180]	; (8013758 <HAL_SD_WriteBlocks+0x308>)
 80136a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136aa:	f043 0208 	orr.w	r2, r3, #8
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	2201      	movs	r2, #1
 80136b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	2200      	movs	r2, #0
 80136be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80136c0:	2301      	movs	r3, #1
 80136c2:	e045      	b.n	8013750 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136ca:	f003 0302 	and.w	r3, r3, #2
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d012      	beq.n	80136f8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	4a20      	ldr	r2, [pc, #128]	; (8013758 <HAL_SD_WriteBlocks+0x308>)
 80136d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136de:	f043 0202 	orr.w	r2, r3, #2
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	2201      	movs	r2, #1
 80136ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2200      	movs	r2, #0
 80136f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80136f4:	2301      	movs	r3, #1
 80136f6:	e02b      	b.n	8013750 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136fe:	f003 0310 	and.w	r3, r3, #16
 8013702:	2b00      	cmp	r3, #0
 8013704:	d012      	beq.n	801372c <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	4a13      	ldr	r2, [pc, #76]	; (8013758 <HAL_SD_WriteBlocks+0x308>)
 801370c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013712:	f043 0210 	orr.w	r2, r3, #16
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	2201      	movs	r2, #1
 801371e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	2200      	movs	r2, #0
 8013726:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8013728:	2301      	movs	r3, #1
 801372a:	e011      	b.n	8013750 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	f240 523a 	movw	r2, #1338	; 0x53a
 8013734:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2201      	movs	r2, #1
 801373a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 801373e:	2300      	movs	r3, #0
 8013740:	e006      	b.n	8013750 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013746:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801374e:	2301      	movs	r3, #1
  }
}
 8013750:	4618      	mov	r0, r3
 8013752:	3748      	adds	r7, #72	; 0x48
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}
 8013758:	004005ff 	.word	0x004005ff

0801375c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 801375c:	b480      	push	{r7}
 801375e:	b083      	sub	sp, #12
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801376a:	0f9b      	lsrs	r3, r3, #30
 801376c:	b2da      	uxtb	r2, r3
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013776:	0e9b      	lsrs	r3, r3, #26
 8013778:	b2db      	uxtb	r3, r3
 801377a:	f003 030f 	and.w	r3, r3, #15
 801377e:	b2da      	uxtb	r2, r3
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013788:	0e1b      	lsrs	r3, r3, #24
 801378a:	b2db      	uxtb	r3, r3
 801378c:	f003 0303 	and.w	r3, r3, #3
 8013790:	b2da      	uxtb	r2, r3
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801379a:	0c1b      	lsrs	r3, r3, #16
 801379c:	b2da      	uxtb	r2, r3
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80137a6:	0a1b      	lsrs	r3, r3, #8
 80137a8:	b2da      	uxtb	r2, r3
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80137b2:	b2da      	uxtb	r2, r3
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137bc:	0d1b      	lsrs	r3, r3, #20
 80137be:	b29a      	uxth	r2, r3
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137c8:	0c1b      	lsrs	r3, r3, #16
 80137ca:	b2db      	uxtb	r3, r3
 80137cc:	f003 030f 	and.w	r3, r3, #15
 80137d0:	b2da      	uxtb	r2, r3
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137da:	0bdb      	lsrs	r3, r3, #15
 80137dc:	b2db      	uxtb	r3, r3
 80137de:	f003 0301 	and.w	r3, r3, #1
 80137e2:	b2da      	uxtb	r2, r3
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137ec:	0b9b      	lsrs	r3, r3, #14
 80137ee:	b2db      	uxtb	r3, r3
 80137f0:	f003 0301 	and.w	r3, r3, #1
 80137f4:	b2da      	uxtb	r2, r3
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80137fe:	0b5b      	lsrs	r3, r3, #13
 8013800:	b2db      	uxtb	r3, r3
 8013802:	f003 0301 	and.w	r3, r3, #1
 8013806:	b2da      	uxtb	r2, r3
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013810:	0b1b      	lsrs	r3, r3, #12
 8013812:	b2db      	uxtb	r3, r3
 8013814:	f003 0301 	and.w	r3, r3, #1
 8013818:	b2da      	uxtb	r2, r3
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	2200      	movs	r2, #0
 8013822:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013828:	2b00      	cmp	r3, #0
 801382a:	d163      	bne.n	80138f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013830:	009a      	lsls	r2, r3, #2
 8013832:	f640 73fc 	movw	r3, #4092	; 0xffc
 8013836:	4013      	ands	r3, r2
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 801383c:	0f92      	lsrs	r2, r2, #30
 801383e:	431a      	orrs	r2, r3
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013848:	0edb      	lsrs	r3, r3, #27
 801384a:	b2db      	uxtb	r3, r3
 801384c:	f003 0307 	and.w	r3, r3, #7
 8013850:	b2da      	uxtb	r2, r3
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801385a:	0e1b      	lsrs	r3, r3, #24
 801385c:	b2db      	uxtb	r3, r3
 801385e:	f003 0307 	and.w	r3, r3, #7
 8013862:	b2da      	uxtb	r2, r3
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801386c:	0d5b      	lsrs	r3, r3, #21
 801386e:	b2db      	uxtb	r3, r3
 8013870:	f003 0307 	and.w	r3, r3, #7
 8013874:	b2da      	uxtb	r2, r3
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801387e:	0c9b      	lsrs	r3, r3, #18
 8013880:	b2db      	uxtb	r3, r3
 8013882:	f003 0307 	and.w	r3, r3, #7
 8013886:	b2da      	uxtb	r2, r3
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013890:	0bdb      	lsrs	r3, r3, #15
 8013892:	b2db      	uxtb	r3, r3
 8013894:	f003 0307 	and.w	r3, r3, #7
 8013898:	b2da      	uxtb	r2, r3
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	691b      	ldr	r3, [r3, #16]
 80138a2:	1c5a      	adds	r2, r3, #1
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	7e1b      	ldrb	r3, [r3, #24]
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	f003 0307 	and.w	r3, r3, #7
 80138b2:	3302      	adds	r3, #2
 80138b4:	2201      	movs	r2, #1
 80138b6:	fa02 f303 	lsl.w	r3, r2, r3
 80138ba:	687a      	ldr	r2, [r7, #4]
 80138bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80138be:	fb02 f203 	mul.w	r2, r2, r3
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	7a1b      	ldrb	r3, [r3, #8]
 80138ca:	b2db      	uxtb	r3, r3
 80138cc:	f003 030f 	and.w	r3, r3, #15
 80138d0:	2201      	movs	r2, #1
 80138d2:	409a      	lsls	r2, r3
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138dc:	687a      	ldr	r2, [r7, #4]
 80138de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80138e0:	0a52      	lsrs	r2, r2, #9
 80138e2:	fb02 f203 	mul.w	r2, r2, r3
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80138f0:	661a      	str	r2, [r3, #96]	; 0x60
 80138f2:	e031      	b.n	8013958 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	d11d      	bne.n	8013938 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013900:	041b      	lsls	r3, r3, #16
 8013902:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801390a:	0c1b      	lsrs	r3, r3, #16
 801390c:	431a      	orrs	r2, r3
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	691b      	ldr	r3, [r3, #16]
 8013916:	3301      	adds	r3, #1
 8013918:	029a      	lsls	r2, r3, #10
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	f44f 7200 	mov.w	r2, #512	; 0x200
 801392c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	661a      	str	r2, [r3, #96]	; 0x60
 8013936:	e00f      	b.n	8013958 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4a58      	ldr	r2, [pc, #352]	; (8013aa0 <HAL_SD_GetCardCSD+0x344>)
 801393e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013944:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2201      	movs	r2, #1
 8013950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8013954:	2301      	movs	r3, #1
 8013956:	e09d      	b.n	8013a94 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801395c:	0b9b      	lsrs	r3, r3, #14
 801395e:	b2db      	uxtb	r3, r3
 8013960:	f003 0301 	and.w	r3, r3, #1
 8013964:	b2da      	uxtb	r2, r3
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801396e:	09db      	lsrs	r3, r3, #7
 8013970:	b2db      	uxtb	r3, r3
 8013972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013976:	b2da      	uxtb	r2, r3
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013980:	b2db      	uxtb	r3, r3
 8013982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013986:	b2da      	uxtb	r2, r3
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013990:	0fdb      	lsrs	r3, r3, #31
 8013992:	b2da      	uxtb	r2, r3
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801399c:	0f5b      	lsrs	r3, r3, #29
 801399e:	b2db      	uxtb	r3, r3
 80139a0:	f003 0303 	and.w	r3, r3, #3
 80139a4:	b2da      	uxtb	r2, r3
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139ae:	0e9b      	lsrs	r3, r3, #26
 80139b0:	b2db      	uxtb	r3, r3
 80139b2:	f003 0307 	and.w	r3, r3, #7
 80139b6:	b2da      	uxtb	r2, r3
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139c0:	0d9b      	lsrs	r3, r3, #22
 80139c2:	b2db      	uxtb	r3, r3
 80139c4:	f003 030f 	and.w	r3, r3, #15
 80139c8:	b2da      	uxtb	r2, r3
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139d2:	0d5b      	lsrs	r3, r3, #21
 80139d4:	b2db      	uxtb	r3, r3
 80139d6:	f003 0301 	and.w	r3, r3, #1
 80139da:	b2da      	uxtb	r2, r3
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	2200      	movs	r2, #0
 80139e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139ee:	0c1b      	lsrs	r3, r3, #16
 80139f0:	b2db      	uxtb	r3, r3
 80139f2:	f003 0301 	and.w	r3, r3, #1
 80139f6:	b2da      	uxtb	r2, r3
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a02:	0bdb      	lsrs	r3, r3, #15
 8013a04:	b2db      	uxtb	r3, r3
 8013a06:	f003 0301 	and.w	r3, r3, #1
 8013a0a:	b2da      	uxtb	r2, r3
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a16:	0b9b      	lsrs	r3, r3, #14
 8013a18:	b2db      	uxtb	r3, r3
 8013a1a:	f003 0301 	and.w	r3, r3, #1
 8013a1e:	b2da      	uxtb	r2, r3
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a2a:	0b5b      	lsrs	r3, r3, #13
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	f003 0301 	and.w	r3, r3, #1
 8013a32:	b2da      	uxtb	r2, r3
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a3e:	0b1b      	lsrs	r3, r3, #12
 8013a40:	b2db      	uxtb	r3, r3
 8013a42:	f003 0301 	and.w	r3, r3, #1
 8013a46:	b2da      	uxtb	r2, r3
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a52:	0a9b      	lsrs	r3, r3, #10
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	f003 0303 	and.w	r3, r3, #3
 8013a5a:	b2da      	uxtb	r2, r3
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a66:	0a1b      	lsrs	r3, r3, #8
 8013a68:	b2db      	uxtb	r3, r3
 8013a6a:	f003 0303 	and.w	r3, r3, #3
 8013a6e:	b2da      	uxtb	r2, r3
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a7a:	085b      	lsrs	r3, r3, #1
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a82:	b2da      	uxtb	r2, r3
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	2201      	movs	r2, #1
 8013a8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8013a92:	2300      	movs	r3, #0
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	370c      	adds	r7, #12
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9e:	4770      	bx	lr
 8013aa0:	004005ff 	.word	0x004005ff

08013aa4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8013aa4:	b480      	push	{r7}
 8013aa6:	b083      	sub	sp, #12
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013ae2:	683b      	ldr	r3, [r7, #0]
 8013ae4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8013aee:	2300      	movs	r3, #0
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	370c      	adds	r7, #12
 8013af4:	46bd      	mov	sp, r7
 8013af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afa:	4770      	bx	lr

08013afc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b086      	sub	sp, #24
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8013b04:	2300      	movs	r3, #0
 8013b06:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8013b08:	f107 030c 	add.w	r3, r7, #12
 8013b0c:	4619      	mov	r1, r3
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f000 f96e 	bl	8013df0 <SD_SendStatus>
 8013b14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d005      	beq.n	8013b28 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	431a      	orrs	r2, r3
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	0a5b      	lsrs	r3, r3, #9
 8013b2c:	f003 030f 	and.w	r3, r3, #15
 8013b30:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8013b32:	693b      	ldr	r3, [r7, #16]
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3718      	adds	r7, #24
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}

08013b3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8013b3c:	b5b0      	push	{r4, r5, r7, lr}
 8013b3e:	b094      	sub	sp, #80	; 0x50
 8013b40:	af04      	add	r7, sp, #16
 8013b42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8013b44:	2301      	movs	r3, #1
 8013b46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f001 fc87 	bl	8015460 <SDIO_GetPowerState>
 8013b52:	4603      	mov	r3, r0
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d102      	bne.n	8013b5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8013b58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8013b5c:	e0b6      	b.n	8013ccc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b62:	2b03      	cmp	r3, #3
 8013b64:	d02f      	beq.n	8013bc6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f001 fe6d 	bl	801584a <SDMMC_CmdSendCID>
 8013b70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8013b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d001      	beq.n	8013b7c <SD_InitCard+0x40>
    {
      return errorstate;
 8013b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b7a:	e0a7      	b.n	8013ccc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	2100      	movs	r1, #0
 8013b82:	4618      	mov	r0, r3
 8013b84:	f001 fcb1 	bl	80154ea <SDIO_GetResponse>
 8013b88:	4602      	mov	r2, r0
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	2104      	movs	r1, #4
 8013b94:	4618      	mov	r0, r3
 8013b96:	f001 fca8 	bl	80154ea <SDIO_GetResponse>
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	2108      	movs	r1, #8
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f001 fc9f 	bl	80154ea <SDIO_GetResponse>
 8013bac:	4602      	mov	r2, r0
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	210c      	movs	r1, #12
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f001 fc96 	bl	80154ea <SDIO_GetResponse>
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bca:	2b03      	cmp	r3, #3
 8013bcc:	d00d      	beq.n	8013bea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	f107 020e 	add.w	r2, r7, #14
 8013bd6:	4611      	mov	r1, r2
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f001 fe73 	bl	80158c4 <SDMMC_CmdSetRelAdd>
 8013bde:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8013be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d001      	beq.n	8013bea <SD_InitCard+0xae>
    {
      return errorstate;
 8013be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013be8:	e070      	b.n	8013ccc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bee:	2b03      	cmp	r3, #3
 8013bf0:	d036      	beq.n	8013c60 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8013bf2:	89fb      	ldrh	r3, [r7, #14]
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681a      	ldr	r2, [r3, #0]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c02:	041b      	lsls	r3, r3, #16
 8013c04:	4619      	mov	r1, r3
 8013c06:	4610      	mov	r0, r2
 8013c08:	f001 fe3d 	bl	8015886 <SDMMC_CmdSendCSD>
 8013c0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8013c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d001      	beq.n	8013c18 <SD_InitCard+0xdc>
    {
      return errorstate;
 8013c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c16:	e059      	b.n	8013ccc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	2100      	movs	r1, #0
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f001 fc63 	bl	80154ea <SDIO_GetResponse>
 8013c24:	4602      	mov	r2, r0
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	2104      	movs	r1, #4
 8013c30:	4618      	mov	r0, r3
 8013c32:	f001 fc5a 	bl	80154ea <SDIO_GetResponse>
 8013c36:	4602      	mov	r2, r0
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	2108      	movs	r1, #8
 8013c42:	4618      	mov	r0, r3
 8013c44:	f001 fc51 	bl	80154ea <SDIO_GetResponse>
 8013c48:	4602      	mov	r2, r0
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	210c      	movs	r1, #12
 8013c54:	4618      	mov	r0, r3
 8013c56:	f001 fc48 	bl	80154ea <SDIO_GetResponse>
 8013c5a:	4602      	mov	r2, r0
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	2104      	movs	r1, #4
 8013c66:	4618      	mov	r0, r3
 8013c68:	f001 fc3f 	bl	80154ea <SDIO_GetResponse>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	0d1a      	lsrs	r2, r3, #20
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8013c74:	f107 0310 	add.w	r3, r7, #16
 8013c78:	4619      	mov	r1, r3
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f7ff fd6e 	bl	801375c <HAL_SD_GetCardCSD>
 8013c80:	4603      	mov	r3, r0
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d002      	beq.n	8013c8c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013c86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013c8a:	e01f      	b.n	8013ccc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	6819      	ldr	r1, [r3, #0]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c94:	041b      	lsls	r3, r3, #16
 8013c96:	461a      	mov	r2, r3
 8013c98:	f04f 0300 	mov.w	r3, #0
 8013c9c:	4608      	mov	r0, r1
 8013c9e:	f001 fd2f 	bl	8015700 <SDMMC_CmdSelDesel>
 8013ca2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8013ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d001      	beq.n	8013cae <SD_InitCard+0x172>
  {
    return errorstate;
 8013caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cac:	e00e      	b.n	8013ccc <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681d      	ldr	r5, [r3, #0]
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	466c      	mov	r4, sp
 8013cb6:	f103 0210 	add.w	r2, r3, #16
 8013cba:	ca07      	ldmia	r2, {r0, r1, r2}
 8013cbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013cc0:	3304      	adds	r3, #4
 8013cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013cc4:	4628      	mov	r0, r5
 8013cc6:	f001 fb73 	bl	80153b0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8013cca:	2300      	movs	r3, #0
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3740      	adds	r7, #64	; 0x40
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bdb0      	pop	{r4, r5, r7, pc}

08013cd4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b086      	sub	sp, #24
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	617b      	str	r3, [r7, #20]
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	4618      	mov	r0, r3
 8013cee:	f001 fd2a 	bl	8015746 <SDMMC_CmdGoIdleState>
 8013cf2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d001      	beq.n	8013cfe <SD_PowerON+0x2a>
  {
    return errorstate;
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	e072      	b.n	8013de4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	4618      	mov	r0, r3
 8013d04:	f001 fd3d 	bl	8015782 <SDMMC_CmdOperCond>
 8013d08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d00d      	beq.n	8013d2c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2200      	movs	r2, #0
 8013d14:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f001 fd13 	bl	8015746 <SDMMC_CmdGoIdleState>
 8013d20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d004      	beq.n	8013d32 <SD_PowerON+0x5e>
    {
      return errorstate;
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	e05b      	b.n	8013de4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2201      	movs	r2, #1
 8013d30:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d36:	2b01      	cmp	r3, #1
 8013d38:	d137      	bne.n	8013daa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	2100      	movs	r1, #0
 8013d40:	4618      	mov	r0, r3
 8013d42:	f001 fd3d 	bl	80157c0 <SDMMC_CmdAppCommand>
 8013d46:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d02d      	beq.n	8013daa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013d4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013d52:	e047      	b.n	8013de4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	2100      	movs	r1, #0
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f001 fd30 	bl	80157c0 <SDMMC_CmdAppCommand>
 8013d60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d001      	beq.n	8013d6c <SD_PowerON+0x98>
    {
      return errorstate;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	e03b      	b.n	8013de4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	491e      	ldr	r1, [pc, #120]	; (8013dec <SD_PowerON+0x118>)
 8013d72:	4618      	mov	r0, r3
 8013d74:	f001 fd46 	bl	8015804 <SDMMC_CmdAppOperCommand>
 8013d78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d002      	beq.n	8013d86 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013d80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013d84:	e02e      	b.n	8013de4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	2100      	movs	r1, #0
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f001 fbac 	bl	80154ea <SDIO_GetResponse>
 8013d92:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	0fdb      	lsrs	r3, r3, #31
 8013d98:	2b01      	cmp	r3, #1
 8013d9a:	d101      	bne.n	8013da0 <SD_PowerON+0xcc>
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	e000      	b.n	8013da2 <SD_PowerON+0xce>
 8013da0:	2300      	movs	r3, #0
 8013da2:	613b      	str	r3, [r7, #16]

    count++;
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	3301      	adds	r3, #1
 8013da8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013db0:	4293      	cmp	r3, r2
 8013db2:	d802      	bhi.n	8013dba <SD_PowerON+0xe6>
 8013db4:	693b      	ldr	r3, [r7, #16]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d0cc      	beq.n	8013d54 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013dc0:	4293      	cmp	r3, r2
 8013dc2:	d902      	bls.n	8013dca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8013dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013dc8:	e00c      	b.n	8013de4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d003      	beq.n	8013ddc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2201      	movs	r2, #1
 8013dd8:	645a      	str	r2, [r3, #68]	; 0x44
 8013dda:	e002      	b.n	8013de2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2200      	movs	r2, #0
 8013de0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8013de2:	2300      	movs	r3, #0
}
 8013de4:	4618      	mov	r0, r3
 8013de6:	3718      	adds	r7, #24
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}
 8013dec:	c1100000 	.word	0xc1100000

08013df0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b084      	sub	sp, #16
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
 8013df8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d102      	bne.n	8013e06 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8013e00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013e04:	e018      	b.n	8013e38 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681a      	ldr	r2, [r3, #0]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013e0e:	041b      	lsls	r3, r3, #16
 8013e10:	4619      	mov	r1, r3
 8013e12:	4610      	mov	r0, r2
 8013e14:	f001 fd77 	bl	8015906 <SDMMC_CmdSendStatus>
 8013e18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d001      	beq.n	8013e24 <SD_SendStatus+0x34>
  {
    return errorstate;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	e009      	b.n	8013e38 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	2100      	movs	r1, #0
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f001 fb5d 	bl	80154ea <SDIO_GetResponse>
 8013e30:	4602      	mov	r2, r0
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8013e36:	2300      	movs	r3, #0
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3710      	adds	r7, #16
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d101      	bne.n	8013e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013e4e:	2301      	movs	r3, #1
 8013e50:	e07b      	b.n	8013f4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d108      	bne.n	8013e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	685b      	ldr	r3, [r3, #4]
 8013e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e62:	d009      	beq.n	8013e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2200      	movs	r2, #0
 8013e68:	61da      	str	r2, [r3, #28]
 8013e6a:	e005      	b.n	8013e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2200      	movs	r2, #0
 8013e76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e84:	b2db      	uxtb	r3, r3
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d106      	bne.n	8013e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f7fd f9a0 	bl	80111d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2202      	movs	r2, #2
 8013e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	681a      	ldr	r2, [r3, #0]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013eae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	685b      	ldr	r3, [r3, #4]
 8013eb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013ec0:	431a      	orrs	r2, r3
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	68db      	ldr	r3, [r3, #12]
 8013ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013eca:	431a      	orrs	r2, r3
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	691b      	ldr	r3, [r3, #16]
 8013ed0:	f003 0302 	and.w	r3, r3, #2
 8013ed4:	431a      	orrs	r2, r3
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	695b      	ldr	r3, [r3, #20]
 8013eda:	f003 0301 	and.w	r3, r3, #1
 8013ede:	431a      	orrs	r2, r3
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	699b      	ldr	r3, [r3, #24]
 8013ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013ee8:	431a      	orrs	r2, r3
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	69db      	ldr	r3, [r3, #28]
 8013eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013ef2:	431a      	orrs	r2, r3
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6a1b      	ldr	r3, [r3, #32]
 8013ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013efc:	ea42 0103 	orr.w	r1, r2, r3
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	430a      	orrs	r2, r1
 8013f0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	699b      	ldr	r3, [r3, #24]
 8013f14:	0c1b      	lsrs	r3, r3, #16
 8013f16:	f003 0104 	and.w	r1, r3, #4
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f1e:	f003 0210 	and.w	r2, r3, #16
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	430a      	orrs	r2, r1
 8013f28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	69da      	ldr	r2, [r3, #28]
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013f38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2201      	movs	r2, #1
 8013f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8013f48:	2300      	movs	r3, #0
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3708      	adds	r7, #8
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}

08013f52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013f52:	b580      	push	{r7, lr}
 8013f54:	b088      	sub	sp, #32
 8013f56:	af02      	add	r7, sp, #8
 8013f58:	60f8      	str	r0, [r7, #12]
 8013f5a:	60b9      	str	r1, [r7, #8]
 8013f5c:	603b      	str	r3, [r7, #0]
 8013f5e:	4613      	mov	r3, r2
 8013f60:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013f62:	2300      	movs	r3, #0
 8013f64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	685b      	ldr	r3, [r3, #4]
 8013f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013f6e:	d112      	bne.n	8013f96 <HAL_SPI_Receive+0x44>
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	689b      	ldr	r3, [r3, #8]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d10e      	bne.n	8013f96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	2204      	movs	r2, #4
 8013f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013f80:	88fa      	ldrh	r2, [r7, #6]
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	9300      	str	r3, [sp, #0]
 8013f86:	4613      	mov	r3, r2
 8013f88:	68ba      	ldr	r2, [r7, #8]
 8013f8a:	68b9      	ldr	r1, [r7, #8]
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	f000 f8f1 	bl	8014174 <HAL_SPI_TransmitReceive>
 8013f92:	4603      	mov	r3, r0
 8013f94:	e0ea      	b.n	801416c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	d101      	bne.n	8013fa4 <HAL_SPI_Receive+0x52>
 8013fa0:	2302      	movs	r3, #2
 8013fa2:	e0e3      	b.n	801416c <HAL_SPI_Receive+0x21a>
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2201      	movs	r2, #1
 8013fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013fac:	f7fd fdac 	bl	8011b08 <HAL_GetTick>
 8013fb0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013fb8:	b2db      	uxtb	r3, r3
 8013fba:	2b01      	cmp	r3, #1
 8013fbc:	d002      	beq.n	8013fc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8013fbe:	2302      	movs	r3, #2
 8013fc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013fc2:	e0ca      	b.n	801415a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d002      	beq.n	8013fd0 <HAL_SPI_Receive+0x7e>
 8013fca:	88fb      	ldrh	r3, [r7, #6]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d102      	bne.n	8013fd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013fd4:	e0c1      	b.n	801415a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	2204      	movs	r2, #4
 8013fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	68ba      	ldr	r2, [r7, #8]
 8013fe8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	88fa      	ldrh	r2, [r7, #6]
 8013fee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	88fa      	ldrh	r2, [r7, #6]
 8013ff4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2200      	movs	r2, #0
 8014000:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	2200      	movs	r2, #0
 8014006:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	2200      	movs	r2, #0
 801400c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	2200      	movs	r2, #0
 8014012:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	689b      	ldr	r3, [r3, #8]
 8014018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801401c:	d10f      	bne.n	801403e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	681a      	ldr	r2, [r3, #0]
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801402c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	681a      	ldr	r2, [r3, #0]
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801403c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014048:	2b40      	cmp	r3, #64	; 0x40
 801404a:	d007      	beq.n	801405c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	681a      	ldr	r2, [r3, #0]
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801405a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d162      	bne.n	801412a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8014064:	e02e      	b.n	80140c4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	689b      	ldr	r3, [r3, #8]
 801406c:	f003 0301 	and.w	r3, r3, #1
 8014070:	2b01      	cmp	r3, #1
 8014072:	d115      	bne.n	80140a0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	f103 020c 	add.w	r2, r3, #12
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014080:	7812      	ldrb	r2, [r2, #0]
 8014082:	b2d2      	uxtb	r2, r2
 8014084:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801408a:	1c5a      	adds	r2, r3, #1
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014094:	b29b      	uxth	r3, r3
 8014096:	3b01      	subs	r3, #1
 8014098:	b29a      	uxth	r2, r3
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801409e:	e011      	b.n	80140c4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80140a0:	f7fd fd32 	bl	8011b08 <HAL_GetTick>
 80140a4:	4602      	mov	r2, r0
 80140a6:	693b      	ldr	r3, [r7, #16]
 80140a8:	1ad3      	subs	r3, r2, r3
 80140aa:	683a      	ldr	r2, [r7, #0]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d803      	bhi.n	80140b8 <HAL_SPI_Receive+0x166>
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b6:	d102      	bne.n	80140be <HAL_SPI_Receive+0x16c>
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d102      	bne.n	80140c4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80140be:	2303      	movs	r3, #3
 80140c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80140c2:	e04a      	b.n	801415a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140c8:	b29b      	uxth	r3, r3
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d1cb      	bne.n	8014066 <HAL_SPI_Receive+0x114>
 80140ce:	e031      	b.n	8014134 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	689b      	ldr	r3, [r3, #8]
 80140d6:	f003 0301 	and.w	r3, r3, #1
 80140da:	2b01      	cmp	r3, #1
 80140dc:	d113      	bne.n	8014106 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	68da      	ldr	r2, [r3, #12]
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140e8:	b292      	uxth	r2, r2
 80140ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140f0:	1c9a      	adds	r2, r3, #2
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	3b01      	subs	r3, #1
 80140fe:	b29a      	uxth	r2, r3
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	87da      	strh	r2, [r3, #62]	; 0x3e
 8014104:	e011      	b.n	801412a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014106:	f7fd fcff 	bl	8011b08 <HAL_GetTick>
 801410a:	4602      	mov	r2, r0
 801410c:	693b      	ldr	r3, [r7, #16]
 801410e:	1ad3      	subs	r3, r2, r3
 8014110:	683a      	ldr	r2, [r7, #0]
 8014112:	429a      	cmp	r2, r3
 8014114:	d803      	bhi.n	801411e <HAL_SPI_Receive+0x1cc>
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801411c:	d102      	bne.n	8014124 <HAL_SPI_Receive+0x1d2>
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d102      	bne.n	801412a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8014124:	2303      	movs	r3, #3
 8014126:	75fb      	strb	r3, [r7, #23]
          goto error;
 8014128:	e017      	b.n	801415a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801412e:	b29b      	uxth	r3, r3
 8014130:	2b00      	cmp	r3, #0
 8014132:	d1cd      	bne.n	80140d0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8014134:	693a      	ldr	r2, [r7, #16]
 8014136:	6839      	ldr	r1, [r7, #0]
 8014138:	68f8      	ldr	r0, [r7, #12]
 801413a:	f000 fa45 	bl	80145c8 <SPI_EndRxTransaction>
 801413e:	4603      	mov	r3, r0
 8014140:	2b00      	cmp	r3, #0
 8014142:	d002      	beq.n	801414a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	2220      	movs	r2, #32
 8014148:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801414e:	2b00      	cmp	r3, #0
 8014150:	d002      	beq.n	8014158 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8014152:	2301      	movs	r3, #1
 8014154:	75fb      	strb	r3, [r7, #23]
 8014156:	e000      	b.n	801415a <HAL_SPI_Receive+0x208>
  }

error :
 8014158:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2201      	movs	r2, #1
 801415e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	2200      	movs	r2, #0
 8014166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801416a:	7dfb      	ldrb	r3, [r7, #23]
}
 801416c:	4618      	mov	r0, r3
 801416e:	3718      	adds	r7, #24
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}

08014174 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b08c      	sub	sp, #48	; 0x30
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
 8014180:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8014182:	2301      	movs	r3, #1
 8014184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8014186:	2300      	movs	r3, #0
 8014188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014192:	2b01      	cmp	r3, #1
 8014194:	d101      	bne.n	801419a <HAL_SPI_TransmitReceive+0x26>
 8014196:	2302      	movs	r3, #2
 8014198:	e18a      	b.n	80144b0 <HAL_SPI_TransmitReceive+0x33c>
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	2201      	movs	r2, #1
 801419e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80141a2:	f7fd fcb1 	bl	8011b08 <HAL_GetTick>
 80141a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80141ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	685b      	ldr	r3, [r3, #4]
 80141b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80141b8:	887b      	ldrh	r3, [r7, #2]
 80141ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80141bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80141c0:	2b01      	cmp	r3, #1
 80141c2:	d00f      	beq.n	80141e4 <HAL_SPI_TransmitReceive+0x70>
 80141c4:	69fb      	ldr	r3, [r7, #28]
 80141c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80141ca:	d107      	bne.n	80141dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	689b      	ldr	r3, [r3, #8]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d103      	bne.n	80141dc <HAL_SPI_TransmitReceive+0x68>
 80141d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80141d8:	2b04      	cmp	r3, #4
 80141da:	d003      	beq.n	80141e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80141dc:	2302      	movs	r3, #2
 80141de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80141e2:	e15b      	b.n	801449c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d005      	beq.n	80141f6 <HAL_SPI_TransmitReceive+0x82>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d002      	beq.n	80141f6 <HAL_SPI_TransmitReceive+0x82>
 80141f0:	887b      	ldrh	r3, [r7, #2]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d103      	bne.n	80141fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80141f6:	2301      	movs	r3, #1
 80141f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80141fc:	e14e      	b.n	801449c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014204:	b2db      	uxtb	r3, r3
 8014206:	2b04      	cmp	r3, #4
 8014208:	d003      	beq.n	8014212 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	2205      	movs	r2, #5
 801420e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	2200      	movs	r2, #0
 8014216:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	687a      	ldr	r2, [r7, #4]
 801421c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	887a      	ldrh	r2, [r7, #2]
 8014222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	887a      	ldrh	r2, [r7, #2]
 8014228:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	68ba      	ldr	r2, [r7, #8]
 801422e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	887a      	ldrh	r2, [r7, #2]
 8014234:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	887a      	ldrh	r2, [r7, #2]
 801423a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	2200      	movs	r2, #0
 8014240:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	2200      	movs	r2, #0
 8014246:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014252:	2b40      	cmp	r3, #64	; 0x40
 8014254:	d007      	beq.n	8014266 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	681a      	ldr	r2, [r3, #0]
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014264:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	68db      	ldr	r3, [r3, #12]
 801426a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801426e:	d178      	bne.n	8014362 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	685b      	ldr	r3, [r3, #4]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d002      	beq.n	801427e <HAL_SPI_TransmitReceive+0x10a>
 8014278:	8b7b      	ldrh	r3, [r7, #26]
 801427a:	2b01      	cmp	r3, #1
 801427c:	d166      	bne.n	801434c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014282:	881a      	ldrh	r2, [r3, #0]
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801428e:	1c9a      	adds	r2, r3, #2
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014298:	b29b      	uxth	r3, r3
 801429a:	3b01      	subs	r3, #1
 801429c:	b29a      	uxth	r2, r3
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80142a2:	e053      	b.n	801434c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	689b      	ldr	r3, [r3, #8]
 80142aa:	f003 0302 	and.w	r3, r3, #2
 80142ae:	2b02      	cmp	r3, #2
 80142b0:	d11b      	bne.n	80142ea <HAL_SPI_TransmitReceive+0x176>
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d016      	beq.n	80142ea <HAL_SPI_TransmitReceive+0x176>
 80142bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d113      	bne.n	80142ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142c6:	881a      	ldrh	r2, [r3, #0]
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142d2:	1c9a      	adds	r2, r3, #2
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80142dc:	b29b      	uxth	r3, r3
 80142de:	3b01      	subs	r3, #1
 80142e0:	b29a      	uxth	r2, r3
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80142e6:	2300      	movs	r3, #0
 80142e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	689b      	ldr	r3, [r3, #8]
 80142f0:	f003 0301 	and.w	r3, r3, #1
 80142f4:	2b01      	cmp	r3, #1
 80142f6:	d119      	bne.n	801432c <HAL_SPI_TransmitReceive+0x1b8>
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d014      	beq.n	801432c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	68da      	ldr	r2, [r3, #12]
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801430c:	b292      	uxth	r2, r2
 801430e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014314:	1c9a      	adds	r2, r3, #2
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801431e:	b29b      	uxth	r3, r3
 8014320:	3b01      	subs	r3, #1
 8014322:	b29a      	uxth	r2, r3
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014328:	2301      	movs	r3, #1
 801432a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801432c:	f7fd fbec 	bl	8011b08 <HAL_GetTick>
 8014330:	4602      	mov	r2, r0
 8014332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014334:	1ad3      	subs	r3, r2, r3
 8014336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014338:	429a      	cmp	r2, r3
 801433a:	d807      	bhi.n	801434c <HAL_SPI_TransmitReceive+0x1d8>
 801433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014342:	d003      	beq.n	801434c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8014344:	2303      	movs	r3, #3
 8014346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801434a:	e0a7      	b.n	801449c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014350:	b29b      	uxth	r3, r3
 8014352:	2b00      	cmp	r3, #0
 8014354:	d1a6      	bne.n	80142a4 <HAL_SPI_TransmitReceive+0x130>
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801435a:	b29b      	uxth	r3, r3
 801435c:	2b00      	cmp	r3, #0
 801435e:	d1a1      	bne.n	80142a4 <HAL_SPI_TransmitReceive+0x130>
 8014360:	e07c      	b.n	801445c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d002      	beq.n	8014370 <HAL_SPI_TransmitReceive+0x1fc>
 801436a:	8b7b      	ldrh	r3, [r7, #26]
 801436c:	2b01      	cmp	r3, #1
 801436e:	d16b      	bne.n	8014448 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	330c      	adds	r3, #12
 801437a:	7812      	ldrb	r2, [r2, #0]
 801437c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014382:	1c5a      	adds	r2, r3, #1
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801438c:	b29b      	uxth	r3, r3
 801438e:	3b01      	subs	r3, #1
 8014390:	b29a      	uxth	r2, r3
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014396:	e057      	b.n	8014448 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	689b      	ldr	r3, [r3, #8]
 801439e:	f003 0302 	and.w	r3, r3, #2
 80143a2:	2b02      	cmp	r3, #2
 80143a4:	d11c      	bne.n	80143e0 <HAL_SPI_TransmitReceive+0x26c>
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80143aa:	b29b      	uxth	r3, r3
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d017      	beq.n	80143e0 <HAL_SPI_TransmitReceive+0x26c>
 80143b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b2:	2b01      	cmp	r3, #1
 80143b4:	d114      	bne.n	80143e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	330c      	adds	r3, #12
 80143c0:	7812      	ldrb	r2, [r2, #0]
 80143c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143c8:	1c5a      	adds	r2, r3, #1
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80143d2:	b29b      	uxth	r3, r3
 80143d4:	3b01      	subs	r3, #1
 80143d6:	b29a      	uxth	r2, r3
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80143dc:	2300      	movs	r3, #0
 80143de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	689b      	ldr	r3, [r3, #8]
 80143e6:	f003 0301 	and.w	r3, r3, #1
 80143ea:	2b01      	cmp	r3, #1
 80143ec:	d119      	bne.n	8014422 <HAL_SPI_TransmitReceive+0x2ae>
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80143f2:	b29b      	uxth	r3, r3
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d014      	beq.n	8014422 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	68da      	ldr	r2, [r3, #12]
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014402:	b2d2      	uxtb	r2, r2
 8014404:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801440a:	1c5a      	adds	r2, r3, #1
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014414:	b29b      	uxth	r3, r3
 8014416:	3b01      	subs	r3, #1
 8014418:	b29a      	uxth	r2, r3
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801441e:	2301      	movs	r3, #1
 8014420:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014422:	f7fd fb71 	bl	8011b08 <HAL_GetTick>
 8014426:	4602      	mov	r2, r0
 8014428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442a:	1ad3      	subs	r3, r2, r3
 801442c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801442e:	429a      	cmp	r2, r3
 8014430:	d803      	bhi.n	801443a <HAL_SPI_TransmitReceive+0x2c6>
 8014432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014438:	d102      	bne.n	8014440 <HAL_SPI_TransmitReceive+0x2cc>
 801443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801443c:	2b00      	cmp	r3, #0
 801443e:	d103      	bne.n	8014448 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8014440:	2303      	movs	r3, #3
 8014442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8014446:	e029      	b.n	801449c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801444c:	b29b      	uxth	r3, r3
 801444e:	2b00      	cmp	r3, #0
 8014450:	d1a2      	bne.n	8014398 <HAL_SPI_TransmitReceive+0x224>
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014456:	b29b      	uxth	r3, r3
 8014458:	2b00      	cmp	r3, #0
 801445a:	d19d      	bne.n	8014398 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801445c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801445e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014460:	68f8      	ldr	r0, [r7, #12]
 8014462:	f000 f917 	bl	8014694 <SPI_EndRxTxTransaction>
 8014466:	4603      	mov	r3, r0
 8014468:	2b00      	cmp	r3, #0
 801446a:	d006      	beq.n	801447a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 801446c:	2301      	movs	r3, #1
 801446e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	2220      	movs	r2, #32
 8014476:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8014478:	e010      	b.n	801449c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	689b      	ldr	r3, [r3, #8]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d10b      	bne.n	801449a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014482:	2300      	movs	r3, #0
 8014484:	617b      	str	r3, [r7, #20]
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	617b      	str	r3, [r7, #20]
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	689b      	ldr	r3, [r3, #8]
 8014494:	617b      	str	r3, [r7, #20]
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	e000      	b.n	801449c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801449a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	2201      	movs	r2, #1
 80144a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	2200      	movs	r2, #0
 80144a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80144ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80144b0:	4618      	mov	r0, r3
 80144b2:	3730      	adds	r7, #48	; 0x30
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b088      	sub	sp, #32
 80144bc:	af00      	add	r7, sp, #0
 80144be:	60f8      	str	r0, [r7, #12]
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	603b      	str	r3, [r7, #0]
 80144c4:	4613      	mov	r3, r2
 80144c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80144c8:	f7fd fb1e 	bl	8011b08 <HAL_GetTick>
 80144cc:	4602      	mov	r2, r0
 80144ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144d0:	1a9b      	subs	r3, r3, r2
 80144d2:	683a      	ldr	r2, [r7, #0]
 80144d4:	4413      	add	r3, r2
 80144d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80144d8:	f7fd fb16 	bl	8011b08 <HAL_GetTick>
 80144dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80144de:	4b39      	ldr	r3, [pc, #228]	; (80145c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	015b      	lsls	r3, r3, #5
 80144e4:	0d1b      	lsrs	r3, r3, #20
 80144e6:	69fa      	ldr	r2, [r7, #28]
 80144e8:	fb02 f303 	mul.w	r3, r2, r3
 80144ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80144ee:	e054      	b.n	801459a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80144f0:	683b      	ldr	r3, [r7, #0]
 80144f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144f6:	d050      	beq.n	801459a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80144f8:	f7fd fb06 	bl	8011b08 <HAL_GetTick>
 80144fc:	4602      	mov	r2, r0
 80144fe:	69bb      	ldr	r3, [r7, #24]
 8014500:	1ad3      	subs	r3, r2, r3
 8014502:	69fa      	ldr	r2, [r7, #28]
 8014504:	429a      	cmp	r2, r3
 8014506:	d902      	bls.n	801450e <SPI_WaitFlagStateUntilTimeout+0x56>
 8014508:	69fb      	ldr	r3, [r7, #28]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d13d      	bne.n	801458a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	685a      	ldr	r2, [r3, #4]
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801451c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	685b      	ldr	r3, [r3, #4]
 8014522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014526:	d111      	bne.n	801454c <SPI_WaitFlagStateUntilTimeout+0x94>
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	689b      	ldr	r3, [r3, #8]
 801452c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014530:	d004      	beq.n	801453c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	689b      	ldr	r3, [r3, #8]
 8014536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801453a:	d107      	bne.n	801454c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	681a      	ldr	r2, [r3, #0]
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801454a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014554:	d10f      	bne.n	8014576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	681a      	ldr	r2, [r3, #0]
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014564:	601a      	str	r2, [r3, #0]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	681a      	ldr	r2, [r3, #0]
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	2201      	movs	r2, #1
 801457a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2200      	movs	r2, #0
 8014582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8014586:	2303      	movs	r3, #3
 8014588:	e017      	b.n	80145ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d101      	bne.n	8014594 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014590:	2300      	movs	r3, #0
 8014592:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014594:	697b      	ldr	r3, [r7, #20]
 8014596:	3b01      	subs	r3, #1
 8014598:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	689a      	ldr	r2, [r3, #8]
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	4013      	ands	r3, r2
 80145a4:	68ba      	ldr	r2, [r7, #8]
 80145a6:	429a      	cmp	r2, r3
 80145a8:	bf0c      	ite	eq
 80145aa:	2301      	moveq	r3, #1
 80145ac:	2300      	movne	r3, #0
 80145ae:	b2db      	uxtb	r3, r3
 80145b0:	461a      	mov	r2, r3
 80145b2:	79fb      	ldrb	r3, [r7, #7]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d19b      	bne.n	80144f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80145b8:	2300      	movs	r3, #0
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	3720      	adds	r7, #32
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}
 80145c2:	bf00      	nop
 80145c4:	20000020 	.word	0x20000020

080145c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b086      	sub	sp, #24
 80145cc:	af02      	add	r7, sp, #8
 80145ce:	60f8      	str	r0, [r7, #12]
 80145d0:	60b9      	str	r1, [r7, #8]
 80145d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80145dc:	d111      	bne.n	8014602 <SPI_EndRxTransaction+0x3a>
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	689b      	ldr	r3, [r3, #8]
 80145e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80145e6:	d004      	beq.n	80145f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	689b      	ldr	r3, [r3, #8]
 80145ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80145f0:	d107      	bne.n	8014602 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	681a      	ldr	r2, [r3, #0]
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014600:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	685b      	ldr	r3, [r3, #4]
 8014606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801460a:	d12a      	bne.n	8014662 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	689b      	ldr	r3, [r3, #8]
 8014610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014614:	d012      	beq.n	801463c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	9300      	str	r3, [sp, #0]
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	2200      	movs	r2, #0
 801461e:	2180      	movs	r1, #128	; 0x80
 8014620:	68f8      	ldr	r0, [r7, #12]
 8014622:	f7ff ff49 	bl	80144b8 <SPI_WaitFlagStateUntilTimeout>
 8014626:	4603      	mov	r3, r0
 8014628:	2b00      	cmp	r3, #0
 801462a:	d02d      	beq.n	8014688 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014630:	f043 0220 	orr.w	r2, r3, #32
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014638:	2303      	movs	r3, #3
 801463a:	e026      	b.n	801468a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	9300      	str	r3, [sp, #0]
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	2200      	movs	r2, #0
 8014644:	2101      	movs	r1, #1
 8014646:	68f8      	ldr	r0, [r7, #12]
 8014648:	f7ff ff36 	bl	80144b8 <SPI_WaitFlagStateUntilTimeout>
 801464c:	4603      	mov	r3, r0
 801464e:	2b00      	cmp	r3, #0
 8014650:	d01a      	beq.n	8014688 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014656:	f043 0220 	orr.w	r2, r3, #32
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801465e:	2303      	movs	r3, #3
 8014660:	e013      	b.n	801468a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	9300      	str	r3, [sp, #0]
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	2200      	movs	r2, #0
 801466a:	2101      	movs	r1, #1
 801466c:	68f8      	ldr	r0, [r7, #12]
 801466e:	f7ff ff23 	bl	80144b8 <SPI_WaitFlagStateUntilTimeout>
 8014672:	4603      	mov	r3, r0
 8014674:	2b00      	cmp	r3, #0
 8014676:	d007      	beq.n	8014688 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801467c:	f043 0220 	orr.w	r2, r3, #32
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014684:	2303      	movs	r3, #3
 8014686:	e000      	b.n	801468a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014688:	2300      	movs	r3, #0
}
 801468a:	4618      	mov	r0, r3
 801468c:	3710      	adds	r7, #16
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}
	...

08014694 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b088      	sub	sp, #32
 8014698:	af02      	add	r7, sp, #8
 801469a:	60f8      	str	r0, [r7, #12]
 801469c:	60b9      	str	r1, [r7, #8]
 801469e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80146a0:	4b1b      	ldr	r3, [pc, #108]	; (8014710 <SPI_EndRxTxTransaction+0x7c>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	4a1b      	ldr	r2, [pc, #108]	; (8014714 <SPI_EndRxTxTransaction+0x80>)
 80146a6:	fba2 2303 	umull	r2, r3, r2, r3
 80146aa:	0d5b      	lsrs	r3, r3, #21
 80146ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80146b0:	fb02 f303 	mul.w	r3, r2, r3
 80146b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	685b      	ldr	r3, [r3, #4]
 80146ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80146be:	d112      	bne.n	80146e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	9300      	str	r3, [sp, #0]
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	2200      	movs	r2, #0
 80146c8:	2180      	movs	r1, #128	; 0x80
 80146ca:	68f8      	ldr	r0, [r7, #12]
 80146cc:	f7ff fef4 	bl	80144b8 <SPI_WaitFlagStateUntilTimeout>
 80146d0:	4603      	mov	r3, r0
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d016      	beq.n	8014704 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146da:	f043 0220 	orr.w	r2, r3, #32
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80146e2:	2303      	movs	r3, #3
 80146e4:	e00f      	b.n	8014706 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d00a      	beq.n	8014702 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	3b01      	subs	r3, #1
 80146f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	689b      	ldr	r3, [r3, #8]
 80146f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80146fc:	2b80      	cmp	r3, #128	; 0x80
 80146fe:	d0f2      	beq.n	80146e6 <SPI_EndRxTxTransaction+0x52>
 8014700:	e000      	b.n	8014704 <SPI_EndRxTxTransaction+0x70>
        break;
 8014702:	bf00      	nop
  }

  return HAL_OK;
 8014704:	2300      	movs	r3, #0
}
 8014706:	4618      	mov	r0, r3
 8014708:	3718      	adds	r7, #24
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	20000020 	.word	0x20000020
 8014714:	165e9f81 	.word	0x165e9f81

08014718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b082      	sub	sp, #8
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d101      	bne.n	801472a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014726:	2301      	movs	r3, #1
 8014728:	e041      	b.n	80147ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014730:	b2db      	uxtb	r3, r3
 8014732:	2b00      	cmp	r3, #0
 8014734:	d106      	bne.n	8014744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2200      	movs	r2, #0
 801473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f7fc fd92 	bl	8011268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2202      	movs	r2, #2
 8014748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	3304      	adds	r3, #4
 8014754:	4619      	mov	r1, r3
 8014756:	4610      	mov	r0, r2
 8014758:	f000 f95e 	bl	8014a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	2201      	movs	r2, #1
 8014760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2201      	movs	r2, #1
 8014768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2201      	movs	r2, #1
 8014770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2201      	movs	r2, #1
 8014778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2201      	movs	r2, #1
 8014780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	2201      	movs	r2, #1
 8014788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2201      	movs	r2, #1
 8014790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2201      	movs	r2, #1
 8014798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2201      	movs	r2, #1
 80147a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2201      	movs	r2, #1
 80147a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80147ac:	2300      	movs	r3, #0
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3708      	adds	r7, #8
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
	...

080147b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80147b8:	b480      	push	{r7}
 80147ba:	b085      	sub	sp, #20
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80147c6:	b2db      	uxtb	r3, r3
 80147c8:	2b01      	cmp	r3, #1
 80147ca:	d001      	beq.n	80147d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80147cc:	2301      	movs	r3, #1
 80147ce:	e046      	b.n	801485e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2202      	movs	r2, #2
 80147d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	4a23      	ldr	r2, [pc, #140]	; (801486c <HAL_TIM_Base_Start+0xb4>)
 80147de:	4293      	cmp	r3, r2
 80147e0:	d022      	beq.n	8014828 <HAL_TIM_Base_Start+0x70>
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80147ea:	d01d      	beq.n	8014828 <HAL_TIM_Base_Start+0x70>
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	4a1f      	ldr	r2, [pc, #124]	; (8014870 <HAL_TIM_Base_Start+0xb8>)
 80147f2:	4293      	cmp	r3, r2
 80147f4:	d018      	beq.n	8014828 <HAL_TIM_Base_Start+0x70>
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	4a1e      	ldr	r2, [pc, #120]	; (8014874 <HAL_TIM_Base_Start+0xbc>)
 80147fc:	4293      	cmp	r3, r2
 80147fe:	d013      	beq.n	8014828 <HAL_TIM_Base_Start+0x70>
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	4a1c      	ldr	r2, [pc, #112]	; (8014878 <HAL_TIM_Base_Start+0xc0>)
 8014806:	4293      	cmp	r3, r2
 8014808:	d00e      	beq.n	8014828 <HAL_TIM_Base_Start+0x70>
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	4a1b      	ldr	r2, [pc, #108]	; (801487c <HAL_TIM_Base_Start+0xc4>)
 8014810:	4293      	cmp	r3, r2
 8014812:	d009      	beq.n	8014828 <HAL_TIM_Base_Start+0x70>
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	4a19      	ldr	r2, [pc, #100]	; (8014880 <HAL_TIM_Base_Start+0xc8>)
 801481a:	4293      	cmp	r3, r2
 801481c:	d004      	beq.n	8014828 <HAL_TIM_Base_Start+0x70>
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	4a18      	ldr	r2, [pc, #96]	; (8014884 <HAL_TIM_Base_Start+0xcc>)
 8014824:	4293      	cmp	r3, r2
 8014826:	d111      	bne.n	801484c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	689b      	ldr	r3, [r3, #8]
 801482e:	f003 0307 	and.w	r3, r3, #7
 8014832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	2b06      	cmp	r3, #6
 8014838:	d010      	beq.n	801485c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	681a      	ldr	r2, [r3, #0]
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	f042 0201 	orr.w	r2, r2, #1
 8014848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801484a:	e007      	b.n	801485c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	681a      	ldr	r2, [r3, #0]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	f042 0201 	orr.w	r2, r2, #1
 801485a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801485c:	2300      	movs	r3, #0
}
 801485e:	4618      	mov	r0, r3
 8014860:	3714      	adds	r7, #20
 8014862:	46bd      	mov	sp, r7
 8014864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014868:	4770      	bx	lr
 801486a:	bf00      	nop
 801486c:	40010000 	.word	0x40010000
 8014870:	40000400 	.word	0x40000400
 8014874:	40000800 	.word	0x40000800
 8014878:	40000c00 	.word	0x40000c00
 801487c:	40010400 	.word	0x40010400
 8014880:	40014000 	.word	0x40014000
 8014884:	40001800 	.word	0x40001800

08014888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b084      	sub	sp, #16
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
 8014890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014892:	2300      	movs	r3, #0
 8014894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801489c:	2b01      	cmp	r3, #1
 801489e:	d101      	bne.n	80148a4 <HAL_TIM_ConfigClockSource+0x1c>
 80148a0:	2302      	movs	r3, #2
 80148a2:	e0b4      	b.n	8014a0e <HAL_TIM_ConfigClockSource+0x186>
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2201      	movs	r2, #1
 80148a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2202      	movs	r2, #2
 80148b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	689b      	ldr	r3, [r3, #8]
 80148ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80148bc:	68bb      	ldr	r3, [r7, #8]
 80148be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80148c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80148ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	68ba      	ldr	r2, [r7, #8]
 80148d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80148dc:	d03e      	beq.n	801495c <HAL_TIM_ConfigClockSource+0xd4>
 80148de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80148e2:	f200 8087 	bhi.w	80149f4 <HAL_TIM_ConfigClockSource+0x16c>
 80148e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80148ea:	f000 8086 	beq.w	80149fa <HAL_TIM_ConfigClockSource+0x172>
 80148ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80148f2:	d87f      	bhi.n	80149f4 <HAL_TIM_ConfigClockSource+0x16c>
 80148f4:	2b70      	cmp	r3, #112	; 0x70
 80148f6:	d01a      	beq.n	801492e <HAL_TIM_ConfigClockSource+0xa6>
 80148f8:	2b70      	cmp	r3, #112	; 0x70
 80148fa:	d87b      	bhi.n	80149f4 <HAL_TIM_ConfigClockSource+0x16c>
 80148fc:	2b60      	cmp	r3, #96	; 0x60
 80148fe:	d050      	beq.n	80149a2 <HAL_TIM_ConfigClockSource+0x11a>
 8014900:	2b60      	cmp	r3, #96	; 0x60
 8014902:	d877      	bhi.n	80149f4 <HAL_TIM_ConfigClockSource+0x16c>
 8014904:	2b50      	cmp	r3, #80	; 0x50
 8014906:	d03c      	beq.n	8014982 <HAL_TIM_ConfigClockSource+0xfa>
 8014908:	2b50      	cmp	r3, #80	; 0x50
 801490a:	d873      	bhi.n	80149f4 <HAL_TIM_ConfigClockSource+0x16c>
 801490c:	2b40      	cmp	r3, #64	; 0x40
 801490e:	d058      	beq.n	80149c2 <HAL_TIM_ConfigClockSource+0x13a>
 8014910:	2b40      	cmp	r3, #64	; 0x40
 8014912:	d86f      	bhi.n	80149f4 <HAL_TIM_ConfigClockSource+0x16c>
 8014914:	2b30      	cmp	r3, #48	; 0x30
 8014916:	d064      	beq.n	80149e2 <HAL_TIM_ConfigClockSource+0x15a>
 8014918:	2b30      	cmp	r3, #48	; 0x30
 801491a:	d86b      	bhi.n	80149f4 <HAL_TIM_ConfigClockSource+0x16c>
 801491c:	2b20      	cmp	r3, #32
 801491e:	d060      	beq.n	80149e2 <HAL_TIM_ConfigClockSource+0x15a>
 8014920:	2b20      	cmp	r3, #32
 8014922:	d867      	bhi.n	80149f4 <HAL_TIM_ConfigClockSource+0x16c>
 8014924:	2b00      	cmp	r3, #0
 8014926:	d05c      	beq.n	80149e2 <HAL_TIM_ConfigClockSource+0x15a>
 8014928:	2b10      	cmp	r3, #16
 801492a:	d05a      	beq.n	80149e2 <HAL_TIM_ConfigClockSource+0x15a>
 801492c:	e062      	b.n	80149f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6818      	ldr	r0, [r3, #0]
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	6899      	ldr	r1, [r3, #8]
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	685a      	ldr	r2, [r3, #4]
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	68db      	ldr	r3, [r3, #12]
 801493e:	f000 f985 	bl	8014c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	689b      	ldr	r3, [r3, #8]
 8014948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	68ba      	ldr	r2, [r7, #8]
 8014958:	609a      	str	r2, [r3, #8]
      break;
 801495a:	e04f      	b.n	80149fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6818      	ldr	r0, [r3, #0]
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	6899      	ldr	r1, [r3, #8]
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	685a      	ldr	r2, [r3, #4]
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	f000 f96e 	bl	8014c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	689a      	ldr	r2, [r3, #8]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801497e:	609a      	str	r2, [r3, #8]
      break;
 8014980:	e03c      	b.n	80149fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	6818      	ldr	r0, [r3, #0]
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	6859      	ldr	r1, [r3, #4]
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	68db      	ldr	r3, [r3, #12]
 801498e:	461a      	mov	r2, r3
 8014990:	f000 f8e2 	bl	8014b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	2150      	movs	r1, #80	; 0x50
 801499a:	4618      	mov	r0, r3
 801499c:	f000 f93b 	bl	8014c16 <TIM_ITRx_SetConfig>
      break;
 80149a0:	e02c      	b.n	80149fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6818      	ldr	r0, [r3, #0]
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	6859      	ldr	r1, [r3, #4]
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	68db      	ldr	r3, [r3, #12]
 80149ae:	461a      	mov	r2, r3
 80149b0:	f000 f901 	bl	8014bb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	2160      	movs	r1, #96	; 0x60
 80149ba:	4618      	mov	r0, r3
 80149bc:	f000 f92b 	bl	8014c16 <TIM_ITRx_SetConfig>
      break;
 80149c0:	e01c      	b.n	80149fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	6818      	ldr	r0, [r3, #0]
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	6859      	ldr	r1, [r3, #4]
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	68db      	ldr	r3, [r3, #12]
 80149ce:	461a      	mov	r2, r3
 80149d0:	f000 f8c2 	bl	8014b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	2140      	movs	r1, #64	; 0x40
 80149da:	4618      	mov	r0, r3
 80149dc:	f000 f91b 	bl	8014c16 <TIM_ITRx_SetConfig>
      break;
 80149e0:	e00c      	b.n	80149fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	681a      	ldr	r2, [r3, #0]
 80149e6:	683b      	ldr	r3, [r7, #0]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	4619      	mov	r1, r3
 80149ec:	4610      	mov	r0, r2
 80149ee:	f000 f912 	bl	8014c16 <TIM_ITRx_SetConfig>
      break;
 80149f2:	e003      	b.n	80149fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80149f4:	2301      	movs	r3, #1
 80149f6:	73fb      	strb	r3, [r7, #15]
      break;
 80149f8:	e000      	b.n	80149fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80149fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2201      	movs	r2, #1
 8014a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2200      	movs	r2, #0
 8014a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a0e:	4618      	mov	r0, r3
 8014a10:	3710      	adds	r7, #16
 8014a12:	46bd      	mov	sp, r7
 8014a14:	bd80      	pop	{r7, pc}
	...

08014a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014a18:	b480      	push	{r7}
 8014a1a:	b085      	sub	sp, #20
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	4a40      	ldr	r2, [pc, #256]	; (8014b2c <TIM_Base_SetConfig+0x114>)
 8014a2c:	4293      	cmp	r3, r2
 8014a2e:	d013      	beq.n	8014a58 <TIM_Base_SetConfig+0x40>
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a36:	d00f      	beq.n	8014a58 <TIM_Base_SetConfig+0x40>
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	4a3d      	ldr	r2, [pc, #244]	; (8014b30 <TIM_Base_SetConfig+0x118>)
 8014a3c:	4293      	cmp	r3, r2
 8014a3e:	d00b      	beq.n	8014a58 <TIM_Base_SetConfig+0x40>
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	4a3c      	ldr	r2, [pc, #240]	; (8014b34 <TIM_Base_SetConfig+0x11c>)
 8014a44:	4293      	cmp	r3, r2
 8014a46:	d007      	beq.n	8014a58 <TIM_Base_SetConfig+0x40>
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	4a3b      	ldr	r2, [pc, #236]	; (8014b38 <TIM_Base_SetConfig+0x120>)
 8014a4c:	4293      	cmp	r3, r2
 8014a4e:	d003      	beq.n	8014a58 <TIM_Base_SetConfig+0x40>
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	4a3a      	ldr	r2, [pc, #232]	; (8014b3c <TIM_Base_SetConfig+0x124>)
 8014a54:	4293      	cmp	r3, r2
 8014a56:	d108      	bne.n	8014a6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	685b      	ldr	r3, [r3, #4]
 8014a64:	68fa      	ldr	r2, [r7, #12]
 8014a66:	4313      	orrs	r3, r2
 8014a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	4a2f      	ldr	r2, [pc, #188]	; (8014b2c <TIM_Base_SetConfig+0x114>)
 8014a6e:	4293      	cmp	r3, r2
 8014a70:	d02b      	beq.n	8014aca <TIM_Base_SetConfig+0xb2>
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a78:	d027      	beq.n	8014aca <TIM_Base_SetConfig+0xb2>
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	4a2c      	ldr	r2, [pc, #176]	; (8014b30 <TIM_Base_SetConfig+0x118>)
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d023      	beq.n	8014aca <TIM_Base_SetConfig+0xb2>
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	4a2b      	ldr	r2, [pc, #172]	; (8014b34 <TIM_Base_SetConfig+0x11c>)
 8014a86:	4293      	cmp	r3, r2
 8014a88:	d01f      	beq.n	8014aca <TIM_Base_SetConfig+0xb2>
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	4a2a      	ldr	r2, [pc, #168]	; (8014b38 <TIM_Base_SetConfig+0x120>)
 8014a8e:	4293      	cmp	r3, r2
 8014a90:	d01b      	beq.n	8014aca <TIM_Base_SetConfig+0xb2>
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	4a29      	ldr	r2, [pc, #164]	; (8014b3c <TIM_Base_SetConfig+0x124>)
 8014a96:	4293      	cmp	r3, r2
 8014a98:	d017      	beq.n	8014aca <TIM_Base_SetConfig+0xb2>
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	4a28      	ldr	r2, [pc, #160]	; (8014b40 <TIM_Base_SetConfig+0x128>)
 8014a9e:	4293      	cmp	r3, r2
 8014aa0:	d013      	beq.n	8014aca <TIM_Base_SetConfig+0xb2>
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	4a27      	ldr	r2, [pc, #156]	; (8014b44 <TIM_Base_SetConfig+0x12c>)
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	d00f      	beq.n	8014aca <TIM_Base_SetConfig+0xb2>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	4a26      	ldr	r2, [pc, #152]	; (8014b48 <TIM_Base_SetConfig+0x130>)
 8014aae:	4293      	cmp	r3, r2
 8014ab0:	d00b      	beq.n	8014aca <TIM_Base_SetConfig+0xb2>
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	4a25      	ldr	r2, [pc, #148]	; (8014b4c <TIM_Base_SetConfig+0x134>)
 8014ab6:	4293      	cmp	r3, r2
 8014ab8:	d007      	beq.n	8014aca <TIM_Base_SetConfig+0xb2>
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	4a24      	ldr	r2, [pc, #144]	; (8014b50 <TIM_Base_SetConfig+0x138>)
 8014abe:	4293      	cmp	r3, r2
 8014ac0:	d003      	beq.n	8014aca <TIM_Base_SetConfig+0xb2>
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	4a23      	ldr	r2, [pc, #140]	; (8014b54 <TIM_Base_SetConfig+0x13c>)
 8014ac6:	4293      	cmp	r3, r2
 8014ac8:	d108      	bne.n	8014adc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	68db      	ldr	r3, [r3, #12]
 8014ad6:	68fa      	ldr	r2, [r7, #12]
 8014ad8:	4313      	orrs	r3, r2
 8014ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	695b      	ldr	r3, [r3, #20]
 8014ae6:	4313      	orrs	r3, r2
 8014ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	68fa      	ldr	r2, [r7, #12]
 8014aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014af0:	683b      	ldr	r3, [r7, #0]
 8014af2:	689a      	ldr	r2, [r3, #8]
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	4a0a      	ldr	r2, [pc, #40]	; (8014b2c <TIM_Base_SetConfig+0x114>)
 8014b04:	4293      	cmp	r3, r2
 8014b06:	d003      	beq.n	8014b10 <TIM_Base_SetConfig+0xf8>
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	4a0c      	ldr	r2, [pc, #48]	; (8014b3c <TIM_Base_SetConfig+0x124>)
 8014b0c:	4293      	cmp	r3, r2
 8014b0e:	d103      	bne.n	8014b18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	691a      	ldr	r2, [r3, #16]
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2201      	movs	r2, #1
 8014b1c:	615a      	str	r2, [r3, #20]
}
 8014b1e:	bf00      	nop
 8014b20:	3714      	adds	r7, #20
 8014b22:	46bd      	mov	sp, r7
 8014b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop
 8014b2c:	40010000 	.word	0x40010000
 8014b30:	40000400 	.word	0x40000400
 8014b34:	40000800 	.word	0x40000800
 8014b38:	40000c00 	.word	0x40000c00
 8014b3c:	40010400 	.word	0x40010400
 8014b40:	40014000 	.word	0x40014000
 8014b44:	40014400 	.word	0x40014400
 8014b48:	40014800 	.word	0x40014800
 8014b4c:	40001800 	.word	0x40001800
 8014b50:	40001c00 	.word	0x40001c00
 8014b54:	40002000 	.word	0x40002000

08014b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014b58:	b480      	push	{r7}
 8014b5a:	b087      	sub	sp, #28
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	60b9      	str	r1, [r7, #8]
 8014b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	6a1b      	ldr	r3, [r3, #32]
 8014b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	6a1b      	ldr	r3, [r3, #32]
 8014b6e:	f023 0201 	bic.w	r2, r3, #1
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	699b      	ldr	r3, [r3, #24]
 8014b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014b7c:	693b      	ldr	r3, [r7, #16]
 8014b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	011b      	lsls	r3, r3, #4
 8014b88:	693a      	ldr	r2, [r7, #16]
 8014b8a:	4313      	orrs	r3, r2
 8014b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	f023 030a 	bic.w	r3, r3, #10
 8014b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014b96:	697a      	ldr	r2, [r7, #20]
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	4313      	orrs	r3, r2
 8014b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	693a      	ldr	r2, [r7, #16]
 8014ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	697a      	ldr	r2, [r7, #20]
 8014ba8:	621a      	str	r2, [r3, #32]
}
 8014baa:	bf00      	nop
 8014bac:	371c      	adds	r7, #28
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb4:	4770      	bx	lr

08014bb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014bb6:	b480      	push	{r7}
 8014bb8:	b087      	sub	sp, #28
 8014bba:	af00      	add	r7, sp, #0
 8014bbc:	60f8      	str	r0, [r7, #12]
 8014bbe:	60b9      	str	r1, [r7, #8]
 8014bc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	6a1b      	ldr	r3, [r3, #32]
 8014bc6:	f023 0210 	bic.w	r2, r3, #16
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	699b      	ldr	r3, [r3, #24]
 8014bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	6a1b      	ldr	r3, [r3, #32]
 8014bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	031b      	lsls	r3, r3, #12
 8014be6:	697a      	ldr	r2, [r7, #20]
 8014be8:	4313      	orrs	r3, r2
 8014bea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014bec:	693b      	ldr	r3, [r7, #16]
 8014bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014bf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	011b      	lsls	r3, r3, #4
 8014bf8:	693a      	ldr	r2, [r7, #16]
 8014bfa:	4313      	orrs	r3, r2
 8014bfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	697a      	ldr	r2, [r7, #20]
 8014c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	693a      	ldr	r2, [r7, #16]
 8014c08:	621a      	str	r2, [r3, #32]
}
 8014c0a:	bf00      	nop
 8014c0c:	371c      	adds	r7, #28
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c14:	4770      	bx	lr

08014c16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014c16:	b480      	push	{r7}
 8014c18:	b085      	sub	sp, #20
 8014c1a:	af00      	add	r7, sp, #0
 8014c1c:	6078      	str	r0, [r7, #4]
 8014c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	689b      	ldr	r3, [r3, #8]
 8014c24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014c2e:	683a      	ldr	r2, [r7, #0]
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	4313      	orrs	r3, r2
 8014c34:	f043 0307 	orr.w	r3, r3, #7
 8014c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	68fa      	ldr	r2, [r7, #12]
 8014c3e:	609a      	str	r2, [r3, #8]
}
 8014c40:	bf00      	nop
 8014c42:	3714      	adds	r7, #20
 8014c44:	46bd      	mov	sp, r7
 8014c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4a:	4770      	bx	lr

08014c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	b087      	sub	sp, #28
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	60f8      	str	r0, [r7, #12]
 8014c54:	60b9      	str	r1, [r7, #8]
 8014c56:	607a      	str	r2, [r7, #4]
 8014c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	689b      	ldr	r3, [r3, #8]
 8014c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	021a      	lsls	r2, r3, #8
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	431a      	orrs	r2, r3
 8014c70:	68bb      	ldr	r3, [r7, #8]
 8014c72:	4313      	orrs	r3, r2
 8014c74:	697a      	ldr	r2, [r7, #20]
 8014c76:	4313      	orrs	r3, r2
 8014c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	697a      	ldr	r2, [r7, #20]
 8014c7e:	609a      	str	r2, [r3, #8]
}
 8014c80:	bf00      	nop
 8014c82:	371c      	adds	r7, #28
 8014c84:	46bd      	mov	sp, r7
 8014c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8a:	4770      	bx	lr

08014c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014c8c:	b480      	push	{r7}
 8014c8e:	b085      	sub	sp, #20
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
 8014c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	d101      	bne.n	8014ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014ca0:	2302      	movs	r3, #2
 8014ca2:	e05a      	b.n	8014d5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	2201      	movs	r2, #1
 8014ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2202      	movs	r2, #2
 8014cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	689b      	ldr	r3, [r3, #8]
 8014cc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	68fa      	ldr	r2, [r7, #12]
 8014cd2:	4313      	orrs	r3, r2
 8014cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	68fa      	ldr	r2, [r7, #12]
 8014cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	4a21      	ldr	r2, [pc, #132]	; (8014d68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8014ce4:	4293      	cmp	r3, r2
 8014ce6:	d022      	beq.n	8014d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014cf0:	d01d      	beq.n	8014d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	4a1d      	ldr	r2, [pc, #116]	; (8014d6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8014cf8:	4293      	cmp	r3, r2
 8014cfa:	d018      	beq.n	8014d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	4a1b      	ldr	r2, [pc, #108]	; (8014d70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8014d02:	4293      	cmp	r3, r2
 8014d04:	d013      	beq.n	8014d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	4a1a      	ldr	r2, [pc, #104]	; (8014d74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8014d0c:	4293      	cmp	r3, r2
 8014d0e:	d00e      	beq.n	8014d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	4a18      	ldr	r2, [pc, #96]	; (8014d78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8014d16:	4293      	cmp	r3, r2
 8014d18:	d009      	beq.n	8014d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	4a17      	ldr	r2, [pc, #92]	; (8014d7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8014d20:	4293      	cmp	r3, r2
 8014d22:	d004      	beq.n	8014d2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	4a15      	ldr	r2, [pc, #84]	; (8014d80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8014d2a:	4293      	cmp	r3, r2
 8014d2c:	d10c      	bne.n	8014d48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014d2e:	68bb      	ldr	r3, [r7, #8]
 8014d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	685b      	ldr	r3, [r3, #4]
 8014d3a:	68ba      	ldr	r2, [r7, #8]
 8014d3c:	4313      	orrs	r3, r2
 8014d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	68ba      	ldr	r2, [r7, #8]
 8014d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2201      	movs	r2, #1
 8014d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2200      	movs	r2, #0
 8014d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014d58:	2300      	movs	r3, #0
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3714      	adds	r7, #20
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d64:	4770      	bx	lr
 8014d66:	bf00      	nop
 8014d68:	40010000 	.word	0x40010000
 8014d6c:	40000400 	.word	0x40000400
 8014d70:	40000800 	.word	0x40000800
 8014d74:	40000c00 	.word	0x40000c00
 8014d78:	40010400 	.word	0x40010400
 8014d7c:	40014000 	.word	0x40014000
 8014d80:	40001800 	.word	0x40001800

08014d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b082      	sub	sp, #8
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d101      	bne.n	8014d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014d92:	2301      	movs	r3, #1
 8014d94:	e03f      	b.n	8014e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014d9c:	b2db      	uxtb	r3, r3
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d106      	bne.n	8014db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2200      	movs	r2, #0
 8014da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f7fc fa7e 	bl	80112ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	2224      	movs	r2, #36	; 0x24
 8014db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	68da      	ldr	r2, [r3, #12]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014dc8:	6878      	ldr	r0, [r7, #4]
 8014dca:	f000 f929 	bl	8015020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	691a      	ldr	r2, [r3, #16]
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	695a      	ldr	r2, [r3, #20]
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	68da      	ldr	r2, [r3, #12]
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2200      	movs	r2, #0
 8014e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2220      	movs	r2, #32
 8014e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2220      	movs	r2, #32
 8014e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014e14:	2300      	movs	r3, #0
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	3708      	adds	r7, #8
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	bd80      	pop	{r7, pc}

08014e1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014e1e:	b580      	push	{r7, lr}
 8014e20:	b08a      	sub	sp, #40	; 0x28
 8014e22:	af02      	add	r7, sp, #8
 8014e24:	60f8      	str	r0, [r7, #12]
 8014e26:	60b9      	str	r1, [r7, #8]
 8014e28:	603b      	str	r3, [r7, #0]
 8014e2a:	4613      	mov	r3, r2
 8014e2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	2b20      	cmp	r3, #32
 8014e3c:	d17c      	bne.n	8014f38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d002      	beq.n	8014e4a <HAL_UART_Transmit+0x2c>
 8014e44:	88fb      	ldrh	r3, [r7, #6]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d101      	bne.n	8014e4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	e075      	b.n	8014f3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014e54:	2b01      	cmp	r3, #1
 8014e56:	d101      	bne.n	8014e5c <HAL_UART_Transmit+0x3e>
 8014e58:	2302      	movs	r3, #2
 8014e5a:	e06e      	b.n	8014f3a <HAL_UART_Transmit+0x11c>
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2201      	movs	r2, #1
 8014e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	2200      	movs	r2, #0
 8014e68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	2221      	movs	r2, #33	; 0x21
 8014e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014e72:	f7fc fe49 	bl	8011b08 <HAL_GetTick>
 8014e76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	88fa      	ldrh	r2, [r7, #6]
 8014e7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	88fa      	ldrh	r2, [r7, #6]
 8014e82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	689b      	ldr	r3, [r3, #8]
 8014e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014e8c:	d108      	bne.n	8014ea0 <HAL_UART_Transmit+0x82>
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	691b      	ldr	r3, [r3, #16]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d104      	bne.n	8014ea0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8014e96:	2300      	movs	r3, #0
 8014e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	61bb      	str	r3, [r7, #24]
 8014e9e:	e003      	b.n	8014ea8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	2200      	movs	r2, #0
 8014eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8014eb0:	e02a      	b.n	8014f08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	9300      	str	r3, [sp, #0]
 8014eb6:	697b      	ldr	r3, [r7, #20]
 8014eb8:	2200      	movs	r2, #0
 8014eba:	2180      	movs	r1, #128	; 0x80
 8014ebc:	68f8      	ldr	r0, [r7, #12]
 8014ebe:	f000 f840 	bl	8014f42 <UART_WaitOnFlagUntilTimeout>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d001      	beq.n	8014ecc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8014ec8:	2303      	movs	r3, #3
 8014eca:	e036      	b.n	8014f3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8014ecc:	69fb      	ldr	r3, [r7, #28]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d10b      	bne.n	8014eea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014ed2:	69bb      	ldr	r3, [r7, #24]
 8014ed4:	881b      	ldrh	r3, [r3, #0]
 8014ed6:	461a      	mov	r2, r3
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014ee0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8014ee2:	69bb      	ldr	r3, [r7, #24]
 8014ee4:	3302      	adds	r3, #2
 8014ee6:	61bb      	str	r3, [r7, #24]
 8014ee8:	e007      	b.n	8014efa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8014eea:	69fb      	ldr	r3, [r7, #28]
 8014eec:	781a      	ldrb	r2, [r3, #0]
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8014ef4:	69fb      	ldr	r3, [r7, #28]
 8014ef6:	3301      	adds	r3, #1
 8014ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014efe:	b29b      	uxth	r3, r3
 8014f00:	3b01      	subs	r3, #1
 8014f02:	b29a      	uxth	r2, r3
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014f0c:	b29b      	uxth	r3, r3
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d1cf      	bne.n	8014eb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	9300      	str	r3, [sp, #0]
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	2200      	movs	r2, #0
 8014f1a:	2140      	movs	r1, #64	; 0x40
 8014f1c:	68f8      	ldr	r0, [r7, #12]
 8014f1e:	f000 f810 	bl	8014f42 <UART_WaitOnFlagUntilTimeout>
 8014f22:	4603      	mov	r3, r0
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d001      	beq.n	8014f2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8014f28:	2303      	movs	r3, #3
 8014f2a:	e006      	b.n	8014f3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	2220      	movs	r2, #32
 8014f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8014f34:	2300      	movs	r3, #0
 8014f36:	e000      	b.n	8014f3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8014f38:	2302      	movs	r3, #2
  }
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	3720      	adds	r7, #32
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}

08014f42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8014f42:	b580      	push	{r7, lr}
 8014f44:	b090      	sub	sp, #64	; 0x40
 8014f46:	af00      	add	r7, sp, #0
 8014f48:	60f8      	str	r0, [r7, #12]
 8014f4a:	60b9      	str	r1, [r7, #8]
 8014f4c:	603b      	str	r3, [r7, #0]
 8014f4e:	4613      	mov	r3, r2
 8014f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014f52:	e050      	b.n	8014ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f5a:	d04c      	beq.n	8014ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8014f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d007      	beq.n	8014f72 <UART_WaitOnFlagUntilTimeout+0x30>
 8014f62:	f7fc fdd1 	bl	8011b08 <HAL_GetTick>
 8014f66:	4602      	mov	r2, r0
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	1ad3      	subs	r3, r2, r3
 8014f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d241      	bcs.n	8014ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	330c      	adds	r3, #12
 8014f78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f7c:	e853 3f00 	ldrex	r3, [r3]
 8014f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	330c      	adds	r3, #12
 8014f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f92:	637a      	str	r2, [r7, #52]	; 0x34
 8014f94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f9a:	e841 2300 	strex	r3, r2, [r1]
 8014f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d1e5      	bne.n	8014f72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	3314      	adds	r3, #20
 8014fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	e853 3f00 	ldrex	r3, [r3]
 8014fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	f023 0301 	bic.w	r3, r3, #1
 8014fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	3314      	adds	r3, #20
 8014fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014fc6:	623a      	str	r2, [r7, #32]
 8014fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fca:	69f9      	ldr	r1, [r7, #28]
 8014fcc:	6a3a      	ldr	r2, [r7, #32]
 8014fce:	e841 2300 	strex	r3, r2, [r1]
 8014fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8014fd4:	69bb      	ldr	r3, [r7, #24]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d1e5      	bne.n	8014fa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	2220      	movs	r2, #32
 8014fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	2220      	movs	r2, #32
 8014fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2200      	movs	r2, #0
 8014fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8014ff2:	2303      	movs	r3, #3
 8014ff4:	e00f      	b.n	8015016 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	681a      	ldr	r2, [r3, #0]
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	4013      	ands	r3, r2
 8015000:	68ba      	ldr	r2, [r7, #8]
 8015002:	429a      	cmp	r2, r3
 8015004:	bf0c      	ite	eq
 8015006:	2301      	moveq	r3, #1
 8015008:	2300      	movne	r3, #0
 801500a:	b2db      	uxtb	r3, r3
 801500c:	461a      	mov	r2, r3
 801500e:	79fb      	ldrb	r3, [r7, #7]
 8015010:	429a      	cmp	r2, r3
 8015012:	d09f      	beq.n	8014f54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8015014:	2300      	movs	r3, #0
}
 8015016:	4618      	mov	r0, r3
 8015018:	3740      	adds	r7, #64	; 0x40
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
	...

08015020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015024:	b09f      	sub	sp, #124	; 0x7c
 8015026:	af00      	add	r7, sp, #0
 8015028:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801502a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	691b      	ldr	r3, [r3, #16]
 8015030:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8015034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015036:	68d9      	ldr	r1, [r3, #12]
 8015038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801503a:	681a      	ldr	r2, [r3, #0]
 801503c:	ea40 0301 	orr.w	r3, r0, r1
 8015040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015044:	689a      	ldr	r2, [r3, #8]
 8015046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015048:	691b      	ldr	r3, [r3, #16]
 801504a:	431a      	orrs	r2, r3
 801504c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801504e:	695b      	ldr	r3, [r3, #20]
 8015050:	431a      	orrs	r2, r3
 8015052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015054:	69db      	ldr	r3, [r3, #28]
 8015056:	4313      	orrs	r3, r2
 8015058:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 801505a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	68db      	ldr	r3, [r3, #12]
 8015060:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8015064:	f021 010c 	bic.w	r1, r1, #12
 8015068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801506a:	681a      	ldr	r2, [r3, #0]
 801506c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801506e:	430b      	orrs	r3, r1
 8015070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8015072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	695b      	ldr	r3, [r3, #20]
 8015078:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801507c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801507e:	6999      	ldr	r1, [r3, #24]
 8015080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	ea40 0301 	orr.w	r3, r0, r1
 8015088:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801508a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801508c:	681a      	ldr	r2, [r3, #0]
 801508e:	4bc5      	ldr	r3, [pc, #788]	; (80153a4 <UART_SetConfig+0x384>)
 8015090:	429a      	cmp	r2, r3
 8015092:	d004      	beq.n	801509e <UART_SetConfig+0x7e>
 8015094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015096:	681a      	ldr	r2, [r3, #0]
 8015098:	4bc3      	ldr	r3, [pc, #780]	; (80153a8 <UART_SetConfig+0x388>)
 801509a:	429a      	cmp	r2, r3
 801509c:	d103      	bne.n	80150a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801509e:	f7fd ff37 	bl	8012f10 <HAL_RCC_GetPCLK2Freq>
 80150a2:	6778      	str	r0, [r7, #116]	; 0x74
 80150a4:	e002      	b.n	80150ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80150a6:	f7fd ff1f 	bl	8012ee8 <HAL_RCC_GetPCLK1Freq>
 80150aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80150ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80150ae:	69db      	ldr	r3, [r3, #28]
 80150b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80150b4:	f040 80b6 	bne.w	8015224 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80150b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80150ba:	461c      	mov	r4, r3
 80150bc:	f04f 0500 	mov.w	r5, #0
 80150c0:	4622      	mov	r2, r4
 80150c2:	462b      	mov	r3, r5
 80150c4:	1891      	adds	r1, r2, r2
 80150c6:	6439      	str	r1, [r7, #64]	; 0x40
 80150c8:	415b      	adcs	r3, r3
 80150ca:	647b      	str	r3, [r7, #68]	; 0x44
 80150cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80150d0:	1912      	adds	r2, r2, r4
 80150d2:	eb45 0303 	adc.w	r3, r5, r3
 80150d6:	f04f 0000 	mov.w	r0, #0
 80150da:	f04f 0100 	mov.w	r1, #0
 80150de:	00d9      	lsls	r1, r3, #3
 80150e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80150e4:	00d0      	lsls	r0, r2, #3
 80150e6:	4602      	mov	r2, r0
 80150e8:	460b      	mov	r3, r1
 80150ea:	1911      	adds	r1, r2, r4
 80150ec:	6639      	str	r1, [r7, #96]	; 0x60
 80150ee:	416b      	adcs	r3, r5
 80150f0:	667b      	str	r3, [r7, #100]	; 0x64
 80150f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80150f4:	685b      	ldr	r3, [r3, #4]
 80150f6:	461a      	mov	r2, r3
 80150f8:	f04f 0300 	mov.w	r3, #0
 80150fc:	1891      	adds	r1, r2, r2
 80150fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8015100:	415b      	adcs	r3, r3
 8015102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015108:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801510c:	f7eb fd4c 	bl	8000ba8 <__aeabi_uldivmod>
 8015110:	4602      	mov	r2, r0
 8015112:	460b      	mov	r3, r1
 8015114:	4ba5      	ldr	r3, [pc, #660]	; (80153ac <UART_SetConfig+0x38c>)
 8015116:	fba3 2302 	umull	r2, r3, r3, r2
 801511a:	095b      	lsrs	r3, r3, #5
 801511c:	011e      	lsls	r6, r3, #4
 801511e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015120:	461c      	mov	r4, r3
 8015122:	f04f 0500 	mov.w	r5, #0
 8015126:	4622      	mov	r2, r4
 8015128:	462b      	mov	r3, r5
 801512a:	1891      	adds	r1, r2, r2
 801512c:	6339      	str	r1, [r7, #48]	; 0x30
 801512e:	415b      	adcs	r3, r3
 8015130:	637b      	str	r3, [r7, #52]	; 0x34
 8015132:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8015136:	1912      	adds	r2, r2, r4
 8015138:	eb45 0303 	adc.w	r3, r5, r3
 801513c:	f04f 0000 	mov.w	r0, #0
 8015140:	f04f 0100 	mov.w	r1, #0
 8015144:	00d9      	lsls	r1, r3, #3
 8015146:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801514a:	00d0      	lsls	r0, r2, #3
 801514c:	4602      	mov	r2, r0
 801514e:	460b      	mov	r3, r1
 8015150:	1911      	adds	r1, r2, r4
 8015152:	65b9      	str	r1, [r7, #88]	; 0x58
 8015154:	416b      	adcs	r3, r5
 8015156:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	461a      	mov	r2, r3
 801515e:	f04f 0300 	mov.w	r3, #0
 8015162:	1891      	adds	r1, r2, r2
 8015164:	62b9      	str	r1, [r7, #40]	; 0x28
 8015166:	415b      	adcs	r3, r3
 8015168:	62fb      	str	r3, [r7, #44]	; 0x2c
 801516a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801516e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8015172:	f7eb fd19 	bl	8000ba8 <__aeabi_uldivmod>
 8015176:	4602      	mov	r2, r0
 8015178:	460b      	mov	r3, r1
 801517a:	4b8c      	ldr	r3, [pc, #560]	; (80153ac <UART_SetConfig+0x38c>)
 801517c:	fba3 1302 	umull	r1, r3, r3, r2
 8015180:	095b      	lsrs	r3, r3, #5
 8015182:	2164      	movs	r1, #100	; 0x64
 8015184:	fb01 f303 	mul.w	r3, r1, r3
 8015188:	1ad3      	subs	r3, r2, r3
 801518a:	00db      	lsls	r3, r3, #3
 801518c:	3332      	adds	r3, #50	; 0x32
 801518e:	4a87      	ldr	r2, [pc, #540]	; (80153ac <UART_SetConfig+0x38c>)
 8015190:	fba2 2303 	umull	r2, r3, r2, r3
 8015194:	095b      	lsrs	r3, r3, #5
 8015196:	005b      	lsls	r3, r3, #1
 8015198:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801519c:	441e      	add	r6, r3
 801519e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151a0:	4618      	mov	r0, r3
 80151a2:	f04f 0100 	mov.w	r1, #0
 80151a6:	4602      	mov	r2, r0
 80151a8:	460b      	mov	r3, r1
 80151aa:	1894      	adds	r4, r2, r2
 80151ac:	623c      	str	r4, [r7, #32]
 80151ae:	415b      	adcs	r3, r3
 80151b0:	627b      	str	r3, [r7, #36]	; 0x24
 80151b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80151b6:	1812      	adds	r2, r2, r0
 80151b8:	eb41 0303 	adc.w	r3, r1, r3
 80151bc:	f04f 0400 	mov.w	r4, #0
 80151c0:	f04f 0500 	mov.w	r5, #0
 80151c4:	00dd      	lsls	r5, r3, #3
 80151c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80151ca:	00d4      	lsls	r4, r2, #3
 80151cc:	4622      	mov	r2, r4
 80151ce:	462b      	mov	r3, r5
 80151d0:	1814      	adds	r4, r2, r0
 80151d2:	653c      	str	r4, [r7, #80]	; 0x50
 80151d4:	414b      	adcs	r3, r1
 80151d6:	657b      	str	r3, [r7, #84]	; 0x54
 80151d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	461a      	mov	r2, r3
 80151de:	f04f 0300 	mov.w	r3, #0
 80151e2:	1891      	adds	r1, r2, r2
 80151e4:	61b9      	str	r1, [r7, #24]
 80151e6:	415b      	adcs	r3, r3
 80151e8:	61fb      	str	r3, [r7, #28]
 80151ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80151ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80151f2:	f7eb fcd9 	bl	8000ba8 <__aeabi_uldivmod>
 80151f6:	4602      	mov	r2, r0
 80151f8:	460b      	mov	r3, r1
 80151fa:	4b6c      	ldr	r3, [pc, #432]	; (80153ac <UART_SetConfig+0x38c>)
 80151fc:	fba3 1302 	umull	r1, r3, r3, r2
 8015200:	095b      	lsrs	r3, r3, #5
 8015202:	2164      	movs	r1, #100	; 0x64
 8015204:	fb01 f303 	mul.w	r3, r1, r3
 8015208:	1ad3      	subs	r3, r2, r3
 801520a:	00db      	lsls	r3, r3, #3
 801520c:	3332      	adds	r3, #50	; 0x32
 801520e:	4a67      	ldr	r2, [pc, #412]	; (80153ac <UART_SetConfig+0x38c>)
 8015210:	fba2 2303 	umull	r2, r3, r2, r3
 8015214:	095b      	lsrs	r3, r3, #5
 8015216:	f003 0207 	and.w	r2, r3, #7
 801521a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	4432      	add	r2, r6
 8015220:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8015222:	e0b9      	b.n	8015398 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015226:	461c      	mov	r4, r3
 8015228:	f04f 0500 	mov.w	r5, #0
 801522c:	4622      	mov	r2, r4
 801522e:	462b      	mov	r3, r5
 8015230:	1891      	adds	r1, r2, r2
 8015232:	6139      	str	r1, [r7, #16]
 8015234:	415b      	adcs	r3, r3
 8015236:	617b      	str	r3, [r7, #20]
 8015238:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801523c:	1912      	adds	r2, r2, r4
 801523e:	eb45 0303 	adc.w	r3, r5, r3
 8015242:	f04f 0000 	mov.w	r0, #0
 8015246:	f04f 0100 	mov.w	r1, #0
 801524a:	00d9      	lsls	r1, r3, #3
 801524c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015250:	00d0      	lsls	r0, r2, #3
 8015252:	4602      	mov	r2, r0
 8015254:	460b      	mov	r3, r1
 8015256:	eb12 0804 	adds.w	r8, r2, r4
 801525a:	eb43 0905 	adc.w	r9, r3, r5
 801525e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015260:	685b      	ldr	r3, [r3, #4]
 8015262:	4618      	mov	r0, r3
 8015264:	f04f 0100 	mov.w	r1, #0
 8015268:	f04f 0200 	mov.w	r2, #0
 801526c:	f04f 0300 	mov.w	r3, #0
 8015270:	008b      	lsls	r3, r1, #2
 8015272:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015276:	0082      	lsls	r2, r0, #2
 8015278:	4640      	mov	r0, r8
 801527a:	4649      	mov	r1, r9
 801527c:	f7eb fc94 	bl	8000ba8 <__aeabi_uldivmod>
 8015280:	4602      	mov	r2, r0
 8015282:	460b      	mov	r3, r1
 8015284:	4b49      	ldr	r3, [pc, #292]	; (80153ac <UART_SetConfig+0x38c>)
 8015286:	fba3 2302 	umull	r2, r3, r3, r2
 801528a:	095b      	lsrs	r3, r3, #5
 801528c:	011e      	lsls	r6, r3, #4
 801528e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015290:	4618      	mov	r0, r3
 8015292:	f04f 0100 	mov.w	r1, #0
 8015296:	4602      	mov	r2, r0
 8015298:	460b      	mov	r3, r1
 801529a:	1894      	adds	r4, r2, r2
 801529c:	60bc      	str	r4, [r7, #8]
 801529e:	415b      	adcs	r3, r3
 80152a0:	60fb      	str	r3, [r7, #12]
 80152a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80152a6:	1812      	adds	r2, r2, r0
 80152a8:	eb41 0303 	adc.w	r3, r1, r3
 80152ac:	f04f 0400 	mov.w	r4, #0
 80152b0:	f04f 0500 	mov.w	r5, #0
 80152b4:	00dd      	lsls	r5, r3, #3
 80152b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80152ba:	00d4      	lsls	r4, r2, #3
 80152bc:	4622      	mov	r2, r4
 80152be:	462b      	mov	r3, r5
 80152c0:	1814      	adds	r4, r2, r0
 80152c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80152c4:	414b      	adcs	r3, r1
 80152c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80152c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80152ca:	685b      	ldr	r3, [r3, #4]
 80152cc:	4618      	mov	r0, r3
 80152ce:	f04f 0100 	mov.w	r1, #0
 80152d2:	f04f 0200 	mov.w	r2, #0
 80152d6:	f04f 0300 	mov.w	r3, #0
 80152da:	008b      	lsls	r3, r1, #2
 80152dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80152e0:	0082      	lsls	r2, r0, #2
 80152e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80152e6:	f7eb fc5f 	bl	8000ba8 <__aeabi_uldivmod>
 80152ea:	4602      	mov	r2, r0
 80152ec:	460b      	mov	r3, r1
 80152ee:	4b2f      	ldr	r3, [pc, #188]	; (80153ac <UART_SetConfig+0x38c>)
 80152f0:	fba3 1302 	umull	r1, r3, r3, r2
 80152f4:	095b      	lsrs	r3, r3, #5
 80152f6:	2164      	movs	r1, #100	; 0x64
 80152f8:	fb01 f303 	mul.w	r3, r1, r3
 80152fc:	1ad3      	subs	r3, r2, r3
 80152fe:	011b      	lsls	r3, r3, #4
 8015300:	3332      	adds	r3, #50	; 0x32
 8015302:	4a2a      	ldr	r2, [pc, #168]	; (80153ac <UART_SetConfig+0x38c>)
 8015304:	fba2 2303 	umull	r2, r3, r2, r3
 8015308:	095b      	lsrs	r3, r3, #5
 801530a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801530e:	441e      	add	r6, r3
 8015310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015312:	4618      	mov	r0, r3
 8015314:	f04f 0100 	mov.w	r1, #0
 8015318:	4602      	mov	r2, r0
 801531a:	460b      	mov	r3, r1
 801531c:	1894      	adds	r4, r2, r2
 801531e:	603c      	str	r4, [r7, #0]
 8015320:	415b      	adcs	r3, r3
 8015322:	607b      	str	r3, [r7, #4]
 8015324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015328:	1812      	adds	r2, r2, r0
 801532a:	eb41 0303 	adc.w	r3, r1, r3
 801532e:	f04f 0400 	mov.w	r4, #0
 8015332:	f04f 0500 	mov.w	r5, #0
 8015336:	00dd      	lsls	r5, r3, #3
 8015338:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801533c:	00d4      	lsls	r4, r2, #3
 801533e:	4622      	mov	r2, r4
 8015340:	462b      	mov	r3, r5
 8015342:	eb12 0a00 	adds.w	sl, r2, r0
 8015346:	eb43 0b01 	adc.w	fp, r3, r1
 801534a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801534c:	685b      	ldr	r3, [r3, #4]
 801534e:	4618      	mov	r0, r3
 8015350:	f04f 0100 	mov.w	r1, #0
 8015354:	f04f 0200 	mov.w	r2, #0
 8015358:	f04f 0300 	mov.w	r3, #0
 801535c:	008b      	lsls	r3, r1, #2
 801535e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015362:	0082      	lsls	r2, r0, #2
 8015364:	4650      	mov	r0, sl
 8015366:	4659      	mov	r1, fp
 8015368:	f7eb fc1e 	bl	8000ba8 <__aeabi_uldivmod>
 801536c:	4602      	mov	r2, r0
 801536e:	460b      	mov	r3, r1
 8015370:	4b0e      	ldr	r3, [pc, #56]	; (80153ac <UART_SetConfig+0x38c>)
 8015372:	fba3 1302 	umull	r1, r3, r3, r2
 8015376:	095b      	lsrs	r3, r3, #5
 8015378:	2164      	movs	r1, #100	; 0x64
 801537a:	fb01 f303 	mul.w	r3, r1, r3
 801537e:	1ad3      	subs	r3, r2, r3
 8015380:	011b      	lsls	r3, r3, #4
 8015382:	3332      	adds	r3, #50	; 0x32
 8015384:	4a09      	ldr	r2, [pc, #36]	; (80153ac <UART_SetConfig+0x38c>)
 8015386:	fba2 2303 	umull	r2, r3, r2, r3
 801538a:	095b      	lsrs	r3, r3, #5
 801538c:	f003 020f 	and.w	r2, r3, #15
 8015390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	4432      	add	r2, r6
 8015396:	609a      	str	r2, [r3, #8]
}
 8015398:	bf00      	nop
 801539a:	377c      	adds	r7, #124	; 0x7c
 801539c:	46bd      	mov	sp, r7
 801539e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153a2:	bf00      	nop
 80153a4:	40011000 	.word	0x40011000
 80153a8:	40011400 	.word	0x40011400
 80153ac:	51eb851f 	.word	0x51eb851f

080153b0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80153b0:	b084      	sub	sp, #16
 80153b2:	b480      	push	{r7}
 80153b4:	b085      	sub	sp, #20
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
 80153ba:	f107 001c 	add.w	r0, r7, #28
 80153be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80153c2:	2300      	movs	r3, #0
 80153c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80153c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80153c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80153ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80153cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80153ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80153d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80153d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80153d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80153d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80153d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80153da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80153dc:	68fa      	ldr	r2, [r7, #12]
 80153de:	4313      	orrs	r3, r2
 80153e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80153ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80153ee:	68fa      	ldr	r2, [r7, #12]
 80153f0:	431a      	orrs	r2, r3
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80153f6:	2300      	movs	r3, #0
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3714      	adds	r7, #20
 80153fc:	46bd      	mov	sp, r7
 80153fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015402:	b004      	add	sp, #16
 8015404:	4770      	bx	lr

08015406 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8015406:	b480      	push	{r7}
 8015408:	b083      	sub	sp, #12
 801540a:	af00      	add	r7, sp, #0
 801540c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8015414:	4618      	mov	r0, r3
 8015416:	370c      	adds	r7, #12
 8015418:	46bd      	mov	sp, r7
 801541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541e:	4770      	bx	lr

08015420 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8015420:	b480      	push	{r7}
 8015422:	b083      	sub	sp, #12
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
 8015428:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	681a      	ldr	r2, [r3, #0]
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015434:	2300      	movs	r3, #0
}
 8015436:	4618      	mov	r0, r3
 8015438:	370c      	adds	r7, #12
 801543a:	46bd      	mov	sp, r7
 801543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015440:	4770      	bx	lr

08015442 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8015442:	b580      	push	{r7, lr}
 8015444:	b082      	sub	sp, #8
 8015446:	af00      	add	r7, sp, #0
 8015448:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2203      	movs	r2, #3
 801544e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8015450:	2002      	movs	r0, #2
 8015452:	f7fc fb65 	bl	8011b20 <HAL_Delay>
  
  return HAL_OK;
 8015456:	2300      	movs	r3, #0
}
 8015458:	4618      	mov	r0, r3
 801545a:	3708      	adds	r7, #8
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}

08015460 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8015460:	b480      	push	{r7}
 8015462:	b083      	sub	sp, #12
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	f003 0303 	and.w	r3, r3, #3
}
 8015470:	4618      	mov	r0, r3
 8015472:	370c      	adds	r7, #12
 8015474:	46bd      	mov	sp, r7
 8015476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547a:	4770      	bx	lr

0801547c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801547c:	b480      	push	{r7}
 801547e:	b085      	sub	sp, #20
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
 8015484:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8015486:	2300      	movs	r3, #0
 8015488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801549a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80154a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80154a2:	683b      	ldr	r3, [r7, #0]
 80154a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80154a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80154a8:	68fa      	ldr	r2, [r7, #12]
 80154aa:	4313      	orrs	r3, r2
 80154ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	68db      	ldr	r3, [r3, #12]
 80154b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80154b6:	f023 030f 	bic.w	r3, r3, #15
 80154ba:	68fa      	ldr	r2, [r7, #12]
 80154bc:	431a      	orrs	r2, r3
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80154c2:	2300      	movs	r3, #0
}
 80154c4:	4618      	mov	r0, r3
 80154c6:	3714      	adds	r7, #20
 80154c8:	46bd      	mov	sp, r7
 80154ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ce:	4770      	bx	lr

080154d0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80154d0:	b480      	push	{r7}
 80154d2:	b083      	sub	sp, #12
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	691b      	ldr	r3, [r3, #16]
 80154dc:	b2db      	uxtb	r3, r3
}
 80154de:	4618      	mov	r0, r3
 80154e0:	370c      	adds	r7, #12
 80154e2:	46bd      	mov	sp, r7
 80154e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e8:	4770      	bx	lr

080154ea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80154ea:	b480      	push	{r7}
 80154ec:	b085      	sub	sp, #20
 80154ee:	af00      	add	r7, sp, #0
 80154f0:	6078      	str	r0, [r7, #4]
 80154f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	3314      	adds	r3, #20
 80154f8:	461a      	mov	r2, r3
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	4413      	add	r3, r2
 80154fe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	681b      	ldr	r3, [r3, #0]
}  
 8015504:	4618      	mov	r0, r3
 8015506:	3714      	adds	r7, #20
 8015508:	46bd      	mov	sp, r7
 801550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550e:	4770      	bx	lr

08015510 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8015510:	b480      	push	{r7}
 8015512:	b085      	sub	sp, #20
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
 8015518:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801551a:	2300      	movs	r3, #0
 801551c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	681a      	ldr	r2, [r3, #0]
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8015526:	683b      	ldr	r3, [r7, #0]
 8015528:	685a      	ldr	r2, [r3, #4]
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8015536:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8015538:	683b      	ldr	r3, [r7, #0]
 801553a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801553c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8015542:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8015544:	68fa      	ldr	r2, [r7, #12]
 8015546:	4313      	orrs	r3, r2
 8015548:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801554e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	431a      	orrs	r2, r3
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801555a:	2300      	movs	r3, #0

}
 801555c:	4618      	mov	r0, r3
 801555e:	3714      	adds	r7, #20
 8015560:	46bd      	mov	sp, r7
 8015562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015566:	4770      	bx	lr

08015568 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b088      	sub	sp, #32
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
 8015570:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8015576:	2310      	movs	r3, #16
 8015578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801557a:	2340      	movs	r3, #64	; 0x40
 801557c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801557e:	2300      	movs	r3, #0
 8015580:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015586:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015588:	f107 0308 	add.w	r3, r7, #8
 801558c:	4619      	mov	r1, r3
 801558e:	6878      	ldr	r0, [r7, #4]
 8015590:	f7ff ff74 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8015594:	f241 3288 	movw	r2, #5000	; 0x1388
 8015598:	2110      	movs	r1, #16
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f000 fa02 	bl	80159a4 <SDMMC_GetCmdResp1>
 80155a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80155a2:	69fb      	ldr	r3, [r7, #28]
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3720      	adds	r7, #32
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}

080155ac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b088      	sub	sp, #32
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	6078      	str	r0, [r7, #4]
 80155b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80155ba:	2311      	movs	r3, #17
 80155bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80155be:	2340      	movs	r3, #64	; 0x40
 80155c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80155c2:	2300      	movs	r3, #0
 80155c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80155c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80155ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80155cc:	f107 0308 	add.w	r3, r7, #8
 80155d0:	4619      	mov	r1, r3
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	f7ff ff52 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80155d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80155dc:	2111      	movs	r1, #17
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	f000 f9e0 	bl	80159a4 <SDMMC_GetCmdResp1>
 80155e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80155e6:	69fb      	ldr	r3, [r7, #28]
}
 80155e8:	4618      	mov	r0, r3
 80155ea:	3720      	adds	r7, #32
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}

080155f0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b088      	sub	sp, #32
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
 80155f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80155fe:	2312      	movs	r3, #18
 8015600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8015602:	2340      	movs	r3, #64	; 0x40
 8015604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8015606:	2300      	movs	r3, #0
 8015608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801560a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801560e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015610:	f107 0308 	add.w	r3, r7, #8
 8015614:	4619      	mov	r1, r3
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f7ff ff30 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801561c:	f241 3288 	movw	r2, #5000	; 0x1388
 8015620:	2112      	movs	r1, #18
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f000 f9be 	bl	80159a4 <SDMMC_GetCmdResp1>
 8015628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801562a:	69fb      	ldr	r3, [r7, #28]
}
 801562c:	4618      	mov	r0, r3
 801562e:	3720      	adds	r7, #32
 8015630:	46bd      	mov	sp, r7
 8015632:	bd80      	pop	{r7, pc}

08015634 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b088      	sub	sp, #32
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8015642:	2318      	movs	r3, #24
 8015644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8015646:	2340      	movs	r3, #64	; 0x40
 8015648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801564a:	2300      	movs	r3, #0
 801564c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801564e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015652:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015654:	f107 0308 	add.w	r3, r7, #8
 8015658:	4619      	mov	r1, r3
 801565a:	6878      	ldr	r0, [r7, #4]
 801565c:	f7ff ff0e 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8015660:	f241 3288 	movw	r2, #5000	; 0x1388
 8015664:	2118      	movs	r1, #24
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f000 f99c 	bl	80159a4 <SDMMC_GetCmdResp1>
 801566c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801566e:	69fb      	ldr	r3, [r7, #28]
}
 8015670:	4618      	mov	r0, r3
 8015672:	3720      	adds	r7, #32
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}

08015678 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b088      	sub	sp, #32
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8015686:	2319      	movs	r3, #25
 8015688:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801568a:	2340      	movs	r3, #64	; 0x40
 801568c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801568e:	2300      	movs	r3, #0
 8015690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015696:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015698:	f107 0308 	add.w	r3, r7, #8
 801569c:	4619      	mov	r1, r3
 801569e:	6878      	ldr	r0, [r7, #4]
 80156a0:	f7ff feec 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80156a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80156a8:	2119      	movs	r1, #25
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f000 f97a 	bl	80159a4 <SDMMC_GetCmdResp1>
 80156b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80156b2:	69fb      	ldr	r3, [r7, #28]
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	3720      	adds	r7, #32
 80156b8:	46bd      	mov	sp, r7
 80156ba:	bd80      	pop	{r7, pc}

080156bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b088      	sub	sp, #32
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80156c4:	2300      	movs	r3, #0
 80156c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80156c8:	230c      	movs	r3, #12
 80156ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80156cc:	2340      	movs	r3, #64	; 0x40
 80156ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80156d0:	2300      	movs	r3, #0
 80156d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80156d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80156da:	f107 0308 	add.w	r3, r7, #8
 80156de:	4619      	mov	r1, r3
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f7ff fecb 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80156e6:	4a05      	ldr	r2, [pc, #20]	; (80156fc <SDMMC_CmdStopTransfer+0x40>)
 80156e8:	210c      	movs	r1, #12
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f000 f95a 	bl	80159a4 <SDMMC_GetCmdResp1>
 80156f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80156f2:	69fb      	ldr	r3, [r7, #28]
}
 80156f4:	4618      	mov	r0, r3
 80156f6:	3720      	adds	r7, #32
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}
 80156fc:	05f5e100 	.word	0x05f5e100

08015700 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b08a      	sub	sp, #40	; 0x28
 8015704:	af00      	add	r7, sp, #0
 8015706:	60f8      	str	r0, [r7, #12]
 8015708:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8015710:	2307      	movs	r3, #7
 8015712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8015714:	2340      	movs	r3, #64	; 0x40
 8015716:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8015718:	2300      	movs	r3, #0
 801571a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801571c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015720:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015722:	f107 0310 	add.w	r3, r7, #16
 8015726:	4619      	mov	r1, r3
 8015728:	68f8      	ldr	r0, [r7, #12]
 801572a:	f7ff fea7 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801572e:	f241 3288 	movw	r2, #5000	; 0x1388
 8015732:	2107      	movs	r1, #7
 8015734:	68f8      	ldr	r0, [r7, #12]
 8015736:	f000 f935 	bl	80159a4 <SDMMC_GetCmdResp1>
 801573a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801573e:	4618      	mov	r0, r3
 8015740:	3728      	adds	r7, #40	; 0x28
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}

08015746 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8015746:	b580      	push	{r7, lr}
 8015748:	b088      	sub	sp, #32
 801574a:	af00      	add	r7, sp, #0
 801574c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801574e:	2300      	movs	r3, #0
 8015750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8015752:	2300      	movs	r3, #0
 8015754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8015756:	2300      	movs	r3, #0
 8015758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801575a:	2300      	movs	r3, #0
 801575c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801575e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015762:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015764:	f107 0308 	add.w	r3, r7, #8
 8015768:	4619      	mov	r1, r3
 801576a:	6878      	ldr	r0, [r7, #4]
 801576c:	f7ff fe86 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f000 f8eb 	bl	801594c <SDMMC_GetCmdError>
 8015776:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015778:	69fb      	ldr	r3, [r7, #28]
}
 801577a:	4618      	mov	r0, r3
 801577c:	3720      	adds	r7, #32
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}

08015782 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8015782:	b580      	push	{r7, lr}
 8015784:	b088      	sub	sp, #32
 8015786:	af00      	add	r7, sp, #0
 8015788:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801578a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801578e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8015790:	2308      	movs	r3, #8
 8015792:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8015794:	2340      	movs	r3, #64	; 0x40
 8015796:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8015798:	2300      	movs	r3, #0
 801579a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801579c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80157a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80157a2:	f107 0308 	add.w	r3, r7, #8
 80157a6:	4619      	mov	r1, r3
 80157a8:	6878      	ldr	r0, [r7, #4]
 80157aa:	f7ff fe67 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80157ae:	6878      	ldr	r0, [r7, #4]
 80157b0:	f000 fae2 	bl	8015d78 <SDMMC_GetCmdResp7>
 80157b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80157b6:	69fb      	ldr	r3, [r7, #28]
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3720      	adds	r7, #32
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}

080157c0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b088      	sub	sp, #32
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
 80157c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80157ce:	2337      	movs	r3, #55	; 0x37
 80157d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80157d2:	2340      	movs	r3, #64	; 0x40
 80157d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80157d6:	2300      	movs	r3, #0
 80157d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80157da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80157de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80157e0:	f107 0308 	add.w	r3, r7, #8
 80157e4:	4619      	mov	r1, r3
 80157e6:	6878      	ldr	r0, [r7, #4]
 80157e8:	f7ff fe48 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80157ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80157f0:	2137      	movs	r1, #55	; 0x37
 80157f2:	6878      	ldr	r0, [r7, #4]
 80157f4:	f000 f8d6 	bl	80159a4 <SDMMC_GetCmdResp1>
 80157f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80157fa:	69fb      	ldr	r3, [r7, #28]
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3720      	adds	r7, #32
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}

08015804 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b088      	sub	sp, #32
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
 801580c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801580e:	683b      	ldr	r3, [r7, #0]
 8015810:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801581a:	2329      	movs	r3, #41	; 0x29
 801581c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801581e:	2340      	movs	r3, #64	; 0x40
 8015820:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8015822:	2300      	movs	r3, #0
 8015824:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801582a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801582c:	f107 0308 	add.w	r3, r7, #8
 8015830:	4619      	mov	r1, r3
 8015832:	6878      	ldr	r0, [r7, #4]
 8015834:	f7ff fe22 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	f000 f9e9 	bl	8015c10 <SDMMC_GetCmdResp3>
 801583e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015840:	69fb      	ldr	r3, [r7, #28]
}
 8015842:	4618      	mov	r0, r3
 8015844:	3720      	adds	r7, #32
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}

0801584a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 801584a:	b580      	push	{r7, lr}
 801584c:	b088      	sub	sp, #32
 801584e:	af00      	add	r7, sp, #0
 8015850:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8015852:	2300      	movs	r3, #0
 8015854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8015856:	2302      	movs	r3, #2
 8015858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801585a:	23c0      	movs	r3, #192	; 0xc0
 801585c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801585e:	2300      	movs	r3, #0
 8015860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015866:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015868:	f107 0308 	add.w	r3, r7, #8
 801586c:	4619      	mov	r1, r3
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f7ff fe04 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f000 f983 	bl	8015b80 <SDMMC_GetCmdResp2>
 801587a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801587c:	69fb      	ldr	r3, [r7, #28]
}
 801587e:	4618      	mov	r0, r3
 8015880:	3720      	adds	r7, #32
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}

08015886 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8015886:	b580      	push	{r7, lr}
 8015888:	b088      	sub	sp, #32
 801588a:	af00      	add	r7, sp, #0
 801588c:	6078      	str	r0, [r7, #4]
 801588e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8015890:	683b      	ldr	r3, [r7, #0]
 8015892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8015894:	2309      	movs	r3, #9
 8015896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8015898:	23c0      	movs	r3, #192	; 0xc0
 801589a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801589c:	2300      	movs	r3, #0
 801589e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80158a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80158a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80158a6:	f107 0308 	add.w	r3, r7, #8
 80158aa:	4619      	mov	r1, r3
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f7ff fde5 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80158b2:	6878      	ldr	r0, [r7, #4]
 80158b4:	f000 f964 	bl	8015b80 <SDMMC_GetCmdResp2>
 80158b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80158ba:	69fb      	ldr	r3, [r7, #28]
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3720      	adds	r7, #32
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b088      	sub	sp, #32
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80158ce:	2300      	movs	r3, #0
 80158d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80158d2:	2303      	movs	r3, #3
 80158d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80158d6:	2340      	movs	r3, #64	; 0x40
 80158d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80158da:	2300      	movs	r3, #0
 80158dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80158de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80158e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80158e4:	f107 0308 	add.w	r3, r7, #8
 80158e8:	4619      	mov	r1, r3
 80158ea:	6878      	ldr	r0, [r7, #4]
 80158ec:	f7ff fdc6 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80158f0:	683a      	ldr	r2, [r7, #0]
 80158f2:	2103      	movs	r1, #3
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f000 f9c9 	bl	8015c8c <SDMMC_GetCmdResp6>
 80158fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80158fc:	69fb      	ldr	r3, [r7, #28]
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3720      	adds	r7, #32
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}

08015906 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8015906:	b580      	push	{r7, lr}
 8015908:	b088      	sub	sp, #32
 801590a:	af00      	add	r7, sp, #0
 801590c:	6078      	str	r0, [r7, #4]
 801590e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8015914:	230d      	movs	r3, #13
 8015916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8015918:	2340      	movs	r3, #64	; 0x40
 801591a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801591c:	2300      	movs	r3, #0
 801591e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8015920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015924:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8015926:	f107 0308 	add.w	r3, r7, #8
 801592a:	4619      	mov	r1, r3
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f7ff fda5 	bl	801547c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8015932:	f241 3288 	movw	r2, #5000	; 0x1388
 8015936:	210d      	movs	r1, #13
 8015938:	6878      	ldr	r0, [r7, #4]
 801593a:	f000 f833 	bl	80159a4 <SDMMC_GetCmdResp1>
 801593e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015940:	69fb      	ldr	r3, [r7, #28]
}
 8015942:	4618      	mov	r0, r3
 8015944:	3720      	adds	r7, #32
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}
	...

0801594c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 801594c:	b480      	push	{r7}
 801594e:	b085      	sub	sp, #20
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015954:	4b11      	ldr	r3, [pc, #68]	; (801599c <SDMMC_GetCmdError+0x50>)
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	4a11      	ldr	r2, [pc, #68]	; (80159a0 <SDMMC_GetCmdError+0x54>)
 801595a:	fba2 2303 	umull	r2, r3, r2, r3
 801595e:	0a5b      	lsrs	r3, r3, #9
 8015960:	f241 3288 	movw	r2, #5000	; 0x1388
 8015964:	fb02 f303 	mul.w	r3, r2, r3
 8015968:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	1e5a      	subs	r2, r3, #1
 801596e:	60fa      	str	r2, [r7, #12]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d102      	bne.n	801597a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015974:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015978:	e009      	b.n	801598e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015982:	2b00      	cmp	r3, #0
 8015984:	d0f1      	beq.n	801596a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	22c5      	movs	r2, #197	; 0xc5
 801598a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801598c:	2300      	movs	r3, #0
}
 801598e:	4618      	mov	r0, r3
 8015990:	3714      	adds	r7, #20
 8015992:	46bd      	mov	sp, r7
 8015994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015998:	4770      	bx	lr
 801599a:	bf00      	nop
 801599c:	20000020 	.word	0x20000020
 80159a0:	10624dd3 	.word	0x10624dd3

080159a4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b088      	sub	sp, #32
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	60f8      	str	r0, [r7, #12]
 80159ac:	460b      	mov	r3, r1
 80159ae:	607a      	str	r2, [r7, #4]
 80159b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80159b2:	4b70      	ldr	r3, [pc, #448]	; (8015b74 <SDMMC_GetCmdResp1+0x1d0>)
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	4a70      	ldr	r2, [pc, #448]	; (8015b78 <SDMMC_GetCmdResp1+0x1d4>)
 80159b8:	fba2 2303 	umull	r2, r3, r2, r3
 80159bc:	0a5a      	lsrs	r2, r3, #9
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	fb02 f303 	mul.w	r3, r2, r3
 80159c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80159c6:	69fb      	ldr	r3, [r7, #28]
 80159c8:	1e5a      	subs	r2, r3, #1
 80159ca:	61fa      	str	r2, [r7, #28]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d102      	bne.n	80159d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80159d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80159d4:	e0c9      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80159dc:	69bb      	ldr	r3, [r7, #24]
 80159de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d0ef      	beq.n	80159c6 <SDMMC_GetCmdResp1+0x22>
 80159e6:	69bb      	ldr	r3, [r7, #24]
 80159e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d1ea      	bne.n	80159c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159f4:	f003 0304 	and.w	r3, r3, #4
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d004      	beq.n	8015a06 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	2204      	movs	r2, #4
 8015a00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015a02:	2304      	movs	r3, #4
 8015a04:	e0b1      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a0a:	f003 0301 	and.w	r3, r3, #1
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d004      	beq.n	8015a1c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	2201      	movs	r2, #1
 8015a16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015a18:	2301      	movs	r3, #1
 8015a1a:	e0a6      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	22c5      	movs	r2, #197	; 0xc5
 8015a20:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8015a22:	68f8      	ldr	r0, [r7, #12]
 8015a24:	f7ff fd54 	bl	80154d0 <SDIO_GetCommandResponse>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	461a      	mov	r2, r3
 8015a2c:	7afb      	ldrb	r3, [r7, #11]
 8015a2e:	4293      	cmp	r3, r2
 8015a30:	d001      	beq.n	8015a36 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015a32:	2301      	movs	r3, #1
 8015a34:	e099      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8015a36:	2100      	movs	r1, #0
 8015a38:	68f8      	ldr	r0, [r7, #12]
 8015a3a:	f7ff fd56 	bl	80154ea <SDIO_GetResponse>
 8015a3e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8015a40:	697a      	ldr	r2, [r7, #20]
 8015a42:	4b4e      	ldr	r3, [pc, #312]	; (8015b7c <SDMMC_GetCmdResp1+0x1d8>)
 8015a44:	4013      	ands	r3, r2
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d101      	bne.n	8015a4e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	e08d      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8015a4e:	697b      	ldr	r3, [r7, #20]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	da02      	bge.n	8015a5a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8015a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015a58:	e087      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d001      	beq.n	8015a68 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8015a64:	2340      	movs	r3, #64	; 0x40
 8015a66:	e080      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8015a68:	697b      	ldr	r3, [r7, #20]
 8015a6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d001      	beq.n	8015a76 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8015a72:	2380      	movs	r3, #128	; 0x80
 8015a74:	e079      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8015a76:	697b      	ldr	r3, [r7, #20]
 8015a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d002      	beq.n	8015a86 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8015a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015a84:	e071      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d002      	beq.n	8015a96 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8015a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015a94:	e069      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8015a96:	697b      	ldr	r3, [r7, #20]
 8015a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d002      	beq.n	8015aa6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8015aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015aa4:	e061      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8015aa6:	697b      	ldr	r3, [r7, #20]
 8015aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d002      	beq.n	8015ab6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8015ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015ab4:	e059      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d002      	beq.n	8015ac6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8015ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015ac4:	e051      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d002      	beq.n	8015ad6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8015ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015ad4:	e049      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d002      	beq.n	8015ae6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8015ae0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015ae4:	e041      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d002      	beq.n	8015af6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8015af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015af4:	e039      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8015af6:	697b      	ldr	r3, [r7, #20]
 8015af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d002      	beq.n	8015b06 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8015b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015b04:	e031      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d002      	beq.n	8015b16 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8015b10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015b14:	e029      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d002      	beq.n	8015b26 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8015b20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015b24:	e021      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d002      	beq.n	8015b36 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8015b30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8015b34:	e019      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d002      	beq.n	8015b46 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8015b40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8015b44:	e011      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8015b46:	697b      	ldr	r3, [r7, #20]
 8015b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d002      	beq.n	8015b56 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8015b50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015b54:	e009      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	f003 0308 	and.w	r3, r3, #8
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d002      	beq.n	8015b66 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8015b60:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8015b64:	e001      	b.n	8015b6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8015b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8015b6a:	4618      	mov	r0, r3
 8015b6c:	3720      	adds	r7, #32
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bd80      	pop	{r7, pc}
 8015b72:	bf00      	nop
 8015b74:	20000020 	.word	0x20000020
 8015b78:	10624dd3 	.word	0x10624dd3
 8015b7c:	fdffe008 	.word	0xfdffe008

08015b80 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8015b80:	b480      	push	{r7}
 8015b82:	b085      	sub	sp, #20
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015b88:	4b1f      	ldr	r3, [pc, #124]	; (8015c08 <SDMMC_GetCmdResp2+0x88>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	4a1f      	ldr	r2, [pc, #124]	; (8015c0c <SDMMC_GetCmdResp2+0x8c>)
 8015b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8015b92:	0a5b      	lsrs	r3, r3, #9
 8015b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8015b98:	fb02 f303 	mul.w	r3, r2, r3
 8015b9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	1e5a      	subs	r2, r3, #1
 8015ba2:	60fa      	str	r2, [r7, #12]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d102      	bne.n	8015bae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015ba8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015bac:	e026      	b.n	8015bfc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bb2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d0ef      	beq.n	8015b9e <SDMMC_GetCmdResp2+0x1e>
 8015bbe:	68bb      	ldr	r3, [r7, #8]
 8015bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d1ea      	bne.n	8015b9e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bcc:	f003 0304 	and.w	r3, r3, #4
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d004      	beq.n	8015bde <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2204      	movs	r2, #4
 8015bd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015bda:	2304      	movs	r3, #4
 8015bdc:	e00e      	b.n	8015bfc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015be2:	f003 0301 	and.w	r3, r3, #1
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d004      	beq.n	8015bf4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2201      	movs	r2, #1
 8015bee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015bf0:	2301      	movs	r3, #1
 8015bf2:	e003      	b.n	8015bfc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	22c5      	movs	r2, #197	; 0xc5
 8015bf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8015bfa:	2300      	movs	r3, #0
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	3714      	adds	r7, #20
 8015c00:	46bd      	mov	sp, r7
 8015c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c06:	4770      	bx	lr
 8015c08:	20000020 	.word	0x20000020
 8015c0c:	10624dd3 	.word	0x10624dd3

08015c10 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8015c10:	b480      	push	{r7}
 8015c12:	b085      	sub	sp, #20
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015c18:	4b1a      	ldr	r3, [pc, #104]	; (8015c84 <SDMMC_GetCmdResp3+0x74>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	4a1a      	ldr	r2, [pc, #104]	; (8015c88 <SDMMC_GetCmdResp3+0x78>)
 8015c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8015c22:	0a5b      	lsrs	r3, r3, #9
 8015c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8015c28:	fb02 f303 	mul.w	r3, r2, r3
 8015c2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	1e5a      	subs	r2, r3, #1
 8015c32:	60fa      	str	r2, [r7, #12]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d102      	bne.n	8015c3e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015c38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015c3c:	e01b      	b.n	8015c76 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015c44:	68bb      	ldr	r3, [r7, #8]
 8015c46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d0ef      	beq.n	8015c2e <SDMMC_GetCmdResp3+0x1e>
 8015c4e:	68bb      	ldr	r3, [r7, #8]
 8015c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d1ea      	bne.n	8015c2e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c5c:	f003 0304 	and.w	r3, r3, #4
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d004      	beq.n	8015c6e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	2204      	movs	r2, #4
 8015c68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015c6a:	2304      	movs	r3, #4
 8015c6c:	e003      	b.n	8015c76 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	22c5      	movs	r2, #197	; 0xc5
 8015c72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8015c74:	2300      	movs	r3, #0
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3714      	adds	r7, #20
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c80:	4770      	bx	lr
 8015c82:	bf00      	nop
 8015c84:	20000020 	.word	0x20000020
 8015c88:	10624dd3 	.word	0x10624dd3

08015c8c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b088      	sub	sp, #32
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	60f8      	str	r0, [r7, #12]
 8015c94:	460b      	mov	r3, r1
 8015c96:	607a      	str	r2, [r7, #4]
 8015c98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015c9a:	4b35      	ldr	r3, [pc, #212]	; (8015d70 <SDMMC_GetCmdResp6+0xe4>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	4a35      	ldr	r2, [pc, #212]	; (8015d74 <SDMMC_GetCmdResp6+0xe8>)
 8015ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8015ca4:	0a5b      	lsrs	r3, r3, #9
 8015ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8015caa:	fb02 f303 	mul.w	r3, r2, r3
 8015cae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8015cb0:	69fb      	ldr	r3, [r7, #28]
 8015cb2:	1e5a      	subs	r2, r3, #1
 8015cb4:	61fa      	str	r2, [r7, #28]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d102      	bne.n	8015cc0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015cba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015cbe:	e052      	b.n	8015d66 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cc4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015cc6:	69bb      	ldr	r3, [r7, #24]
 8015cc8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d0ef      	beq.n	8015cb0 <SDMMC_GetCmdResp6+0x24>
 8015cd0:	69bb      	ldr	r3, [r7, #24]
 8015cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d1ea      	bne.n	8015cb0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cde:	f003 0304 	and.w	r3, r3, #4
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d004      	beq.n	8015cf0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	2204      	movs	r2, #4
 8015cea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015cec:	2304      	movs	r3, #4
 8015cee:	e03a      	b.n	8015d66 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cf4:	f003 0301 	and.w	r3, r3, #1
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d004      	beq.n	8015d06 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2201      	movs	r2, #1
 8015d00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015d02:	2301      	movs	r3, #1
 8015d04:	e02f      	b.n	8015d66 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8015d06:	68f8      	ldr	r0, [r7, #12]
 8015d08:	f7ff fbe2 	bl	80154d0 <SDIO_GetCommandResponse>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	461a      	mov	r2, r3
 8015d10:	7afb      	ldrb	r3, [r7, #11]
 8015d12:	4293      	cmp	r3, r2
 8015d14:	d001      	beq.n	8015d1a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015d16:	2301      	movs	r3, #1
 8015d18:	e025      	b.n	8015d66 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	22c5      	movs	r2, #197	; 0xc5
 8015d1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8015d20:	2100      	movs	r1, #0
 8015d22:	68f8      	ldr	r0, [r7, #12]
 8015d24:	f7ff fbe1 	bl	80154ea <SDIO_GetResponse>
 8015d28:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8015d2a:	697b      	ldr	r3, [r7, #20]
 8015d2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d106      	bne.n	8015d42 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8015d34:	697b      	ldr	r3, [r7, #20]
 8015d36:	0c1b      	lsrs	r3, r3, #16
 8015d38:	b29a      	uxth	r2, r3
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	e011      	b.n	8015d66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d002      	beq.n	8015d52 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8015d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015d50:	e009      	b.n	8015d66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8015d52:	697b      	ldr	r3, [r7, #20]
 8015d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d002      	beq.n	8015d62 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8015d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015d60:	e001      	b.n	8015d66 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8015d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8015d66:	4618      	mov	r0, r3
 8015d68:	3720      	adds	r7, #32
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}
 8015d6e:	bf00      	nop
 8015d70:	20000020 	.word	0x20000020
 8015d74:	10624dd3 	.word	0x10624dd3

08015d78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8015d78:	b480      	push	{r7}
 8015d7a:	b085      	sub	sp, #20
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015d80:	4b22      	ldr	r3, [pc, #136]	; (8015e0c <SDMMC_GetCmdResp7+0x94>)
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	4a22      	ldr	r2, [pc, #136]	; (8015e10 <SDMMC_GetCmdResp7+0x98>)
 8015d86:	fba2 2303 	umull	r2, r3, r2, r3
 8015d8a:	0a5b      	lsrs	r3, r3, #9
 8015d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8015d90:	fb02 f303 	mul.w	r3, r2, r3
 8015d94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	1e5a      	subs	r2, r3, #1
 8015d9a:	60fa      	str	r2, [r7, #12]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d102      	bne.n	8015da6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015da0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015da4:	e02c      	b.n	8015e00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015daa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d0ef      	beq.n	8015d96 <SDMMC_GetCmdResp7+0x1e>
 8015db6:	68bb      	ldr	r3, [r7, #8]
 8015db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d1ea      	bne.n	8015d96 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dc4:	f003 0304 	and.w	r3, r3, #4
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d004      	beq.n	8015dd6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2204      	movs	r2, #4
 8015dd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015dd2:	2304      	movs	r3, #4
 8015dd4:	e014      	b.n	8015e00 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dda:	f003 0301 	and.w	r3, r3, #1
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d004      	beq.n	8015dec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2201      	movs	r2, #1
 8015de6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015de8:	2301      	movs	r3, #1
 8015dea:	e009      	b.n	8015e00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d002      	beq.n	8015dfe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	2240      	movs	r2, #64	; 0x40
 8015dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8015dfe:	2300      	movs	r3, #0
  
}
 8015e00:	4618      	mov	r0, r3
 8015e02:	3714      	adds	r7, #20
 8015e04:	46bd      	mov	sp, r7
 8015e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0a:	4770      	bx	lr
 8015e0c:	20000020 	.word	0x20000020
 8015e10:	10624dd3 	.word	0x10624dd3

08015e14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8015e18:	4904      	ldr	r1, [pc, #16]	; (8015e2c <MX_FATFS_Init+0x18>)
 8015e1a:	4805      	ldr	r0, [pc, #20]	; (8015e30 <MX_FATFS_Init+0x1c>)
 8015e1c:	f002 faee 	bl	80183fc <FATFS_LinkDriver>
 8015e20:	4603      	mov	r3, r0
 8015e22:	461a      	mov	r2, r3
 8015e24:	4b03      	ldr	r3, [pc, #12]	; (8015e34 <MX_FATFS_Init+0x20>)
 8015e26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8015e28:	bf00      	nop
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	200006a8 	.word	0x200006a8
 8015e30:	0801bbb0 	.word	0x0801bbb0
 8015e34:	200006a4 	.word	0x200006a4

08015e38 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8015e38:	b480      	push	{r7}
 8015e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8015e3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	46bd      	mov	sp, r7
 8015e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e46:	4770      	bx	lr

08015e48 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b082      	sub	sp, #8
 8015e4c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8015e52:	f000 f86b 	bl	8015f2c <BSP_SD_IsDetected>
 8015e56:	4603      	mov	r3, r0
 8015e58:	2b01      	cmp	r3, #1
 8015e5a:	d001      	beq.n	8015e60 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8015e5c:	2301      	movs	r3, #1
 8015e5e:	e005      	b.n	8015e6c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8015e60:	4804      	ldr	r0, [pc, #16]	; (8015e74 <BSP_SD_Init+0x2c>)
 8015e62:	f7fd f869 	bl	8012f38 <HAL_SD_Init>
 8015e66:	4603      	mov	r3, r0
 8015e68:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8015e6a:	79fb      	ldrb	r3, [r7, #7]
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3708      	adds	r7, #8
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	20000530 	.word	0x20000530

08015e78 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b088      	sub	sp, #32
 8015e7c:	af02      	add	r7, sp, #8
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	607a      	str	r2, [r7, #4]
 8015e84:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8015e86:	2300      	movs	r3, #0
 8015e88:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	9300      	str	r3, [sp, #0]
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	68ba      	ldr	r2, [r7, #8]
 8015e92:	68f9      	ldr	r1, [r7, #12]
 8015e94:	4806      	ldr	r0, [pc, #24]	; (8015eb0 <BSP_SD_ReadBlocks+0x38>)
 8015e96:	f7fd f8fd 	bl	8013094 <HAL_SD_ReadBlocks>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d001      	beq.n	8015ea4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	3718      	adds	r7, #24
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bd80      	pop	{r7, pc}
 8015eae:	bf00      	nop
 8015eb0:	20000530 	.word	0x20000530

08015eb4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b088      	sub	sp, #32
 8015eb8:	af02      	add	r7, sp, #8
 8015eba:	60f8      	str	r0, [r7, #12]
 8015ebc:	60b9      	str	r1, [r7, #8]
 8015ebe:	607a      	str	r2, [r7, #4]
 8015ec0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	9300      	str	r3, [sp, #0]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	68ba      	ldr	r2, [r7, #8]
 8015ece:	68f9      	ldr	r1, [r7, #12]
 8015ed0:	4806      	ldr	r0, [pc, #24]	; (8015eec <BSP_SD_WriteBlocks+0x38>)
 8015ed2:	f7fd fabd 	bl	8013450 <HAL_SD_WriteBlocks>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d001      	beq.n	8015ee0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8015edc:	2301      	movs	r3, #1
 8015ede:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	3718      	adds	r7, #24
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop
 8015eec:	20000530 	.word	0x20000530

08015ef0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015ef4:	4805      	ldr	r0, [pc, #20]	; (8015f0c <BSP_SD_GetCardState+0x1c>)
 8015ef6:	f7fd fe01 	bl	8013afc <HAL_SD_GetCardState>
 8015efa:	4603      	mov	r3, r0
 8015efc:	2b04      	cmp	r3, #4
 8015efe:	bf14      	ite	ne
 8015f00:	2301      	movne	r3, #1
 8015f02:	2300      	moveq	r3, #0
 8015f04:	b2db      	uxtb	r3, r3
}
 8015f06:	4618      	mov	r0, r3
 8015f08:	bd80      	pop	{r7, pc}
 8015f0a:	bf00      	nop
 8015f0c:	20000530 	.word	0x20000530

08015f10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b082      	sub	sp, #8
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8015f18:	6879      	ldr	r1, [r7, #4]
 8015f1a:	4803      	ldr	r0, [pc, #12]	; (8015f28 <BSP_SD_GetCardInfo+0x18>)
 8015f1c:	f7fd fdc2 	bl	8013aa4 <HAL_SD_GetCardInfo>
}
 8015f20:	bf00      	nop
 8015f22:	3708      	adds	r7, #8
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}
 8015f28:	20000530 	.word	0x20000530

08015f2c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8015f2c:	b480      	push	{r7}
 8015f2e:	b083      	sub	sp, #12
 8015f30:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8015f32:	2301      	movs	r3, #1
 8015f34:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8015f36:	79fb      	ldrb	r3, [r7, #7]
 8015f38:	b2db      	uxtb	r3, r3
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	370c      	adds	r7, #12
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f44:	4770      	bx	lr
	...

08015f48 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b082      	sub	sp, #8
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	4603      	mov	r3, r0
 8015f50:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8015f52:	4b0b      	ldr	r3, [pc, #44]	; (8015f80 <SD_CheckStatus+0x38>)
 8015f54:	2201      	movs	r2, #1
 8015f56:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015f58:	f7ff ffca 	bl	8015ef0 <BSP_SD_GetCardState>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d107      	bne.n	8015f72 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8015f62:	4b07      	ldr	r3, [pc, #28]	; (8015f80 <SD_CheckStatus+0x38>)
 8015f64:	781b      	ldrb	r3, [r3, #0]
 8015f66:	b2db      	uxtb	r3, r3
 8015f68:	f023 0301 	bic.w	r3, r3, #1
 8015f6c:	b2da      	uxtb	r2, r3
 8015f6e:	4b04      	ldr	r3, [pc, #16]	; (8015f80 <SD_CheckStatus+0x38>)
 8015f70:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8015f72:	4b03      	ldr	r3, [pc, #12]	; (8015f80 <SD_CheckStatus+0x38>)
 8015f74:	781b      	ldrb	r3, [r3, #0]
 8015f76:	b2db      	uxtb	r3, r3
}
 8015f78:	4618      	mov	r0, r3
 8015f7a:	3708      	adds	r7, #8
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}
 8015f80:	20000029 	.word	0x20000029

08015f84 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b082      	sub	sp, #8
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8015f8e:	4b0b      	ldr	r3, [pc, #44]	; (8015fbc <SD_initialize+0x38>)
 8015f90:	2201      	movs	r2, #1
 8015f92:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015f94:	f7ff ff58 	bl	8015e48 <BSP_SD_Init>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d107      	bne.n	8015fae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8015f9e:	79fb      	ldrb	r3, [r7, #7]
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f7ff ffd1 	bl	8015f48 <SD_CheckStatus>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	461a      	mov	r2, r3
 8015faa:	4b04      	ldr	r3, [pc, #16]	; (8015fbc <SD_initialize+0x38>)
 8015fac:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8015fae:	4b03      	ldr	r3, [pc, #12]	; (8015fbc <SD_initialize+0x38>)
 8015fb0:	781b      	ldrb	r3, [r3, #0]
 8015fb2:	b2db      	uxtb	r3, r3
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3708      	adds	r7, #8
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	20000029 	.word	0x20000029

08015fc0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b082      	sub	sp, #8
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8015fca:	79fb      	ldrb	r3, [r7, #7]
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f7ff ffbb 	bl	8015f48 <SD_CheckStatus>
 8015fd2:	4603      	mov	r3, r0
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3708      	adds	r7, #8
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b086      	sub	sp, #24
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	60b9      	str	r1, [r7, #8]
 8015fe4:	607a      	str	r2, [r7, #4]
 8015fe6:	603b      	str	r3, [r7, #0]
 8015fe8:	4603      	mov	r3, r0
 8015fea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8015fec:	2301      	movs	r3, #1
 8015fee:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8015ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ff4:	683a      	ldr	r2, [r7, #0]
 8015ff6:	6879      	ldr	r1, [r7, #4]
 8015ff8:	68b8      	ldr	r0, [r7, #8]
 8015ffa:	f7ff ff3d 	bl	8015e78 <BSP_SD_ReadBlocks>
 8015ffe:	4603      	mov	r3, r0
 8016000:	2b00      	cmp	r3, #0
 8016002:	d107      	bne.n	8016014 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8016004:	bf00      	nop
 8016006:	f7ff ff73 	bl	8015ef0 <BSP_SD_GetCardState>
 801600a:	4603      	mov	r3, r0
 801600c:	2b00      	cmp	r3, #0
 801600e:	d1fa      	bne.n	8016006 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8016010:	2300      	movs	r3, #0
 8016012:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8016014:	7dfb      	ldrb	r3, [r7, #23]
}
 8016016:	4618      	mov	r0, r3
 8016018:	3718      	adds	r7, #24
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}

0801601e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801601e:	b580      	push	{r7, lr}
 8016020:	b086      	sub	sp, #24
 8016022:	af00      	add	r7, sp, #0
 8016024:	60b9      	str	r1, [r7, #8]
 8016026:	607a      	str	r2, [r7, #4]
 8016028:	603b      	str	r3, [r7, #0]
 801602a:	4603      	mov	r3, r0
 801602c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801602e:	2301      	movs	r3, #1
 8016030:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8016032:	f04f 33ff 	mov.w	r3, #4294967295
 8016036:	683a      	ldr	r2, [r7, #0]
 8016038:	6879      	ldr	r1, [r7, #4]
 801603a:	68b8      	ldr	r0, [r7, #8]
 801603c:	f7ff ff3a 	bl	8015eb4 <BSP_SD_WriteBlocks>
 8016040:	4603      	mov	r3, r0
 8016042:	2b00      	cmp	r3, #0
 8016044:	d107      	bne.n	8016056 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8016046:	bf00      	nop
 8016048:	f7ff ff52 	bl	8015ef0 <BSP_SD_GetCardState>
 801604c:	4603      	mov	r3, r0
 801604e:	2b00      	cmp	r3, #0
 8016050:	d1fa      	bne.n	8016048 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8016052:	2300      	movs	r3, #0
 8016054:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8016056:	7dfb      	ldrb	r3, [r7, #23]
}
 8016058:	4618      	mov	r0, r3
 801605a:	3718      	adds	r7, #24
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}

08016060 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b08c      	sub	sp, #48	; 0x30
 8016064:	af00      	add	r7, sp, #0
 8016066:	4603      	mov	r3, r0
 8016068:	603a      	str	r2, [r7, #0]
 801606a:	71fb      	strb	r3, [r7, #7]
 801606c:	460b      	mov	r3, r1
 801606e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8016070:	2301      	movs	r3, #1
 8016072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8016076:	4b25      	ldr	r3, [pc, #148]	; (801610c <SD_ioctl+0xac>)
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	b2db      	uxtb	r3, r3
 801607c:	f003 0301 	and.w	r3, r3, #1
 8016080:	2b00      	cmp	r3, #0
 8016082:	d001      	beq.n	8016088 <SD_ioctl+0x28>
 8016084:	2303      	movs	r3, #3
 8016086:	e03c      	b.n	8016102 <SD_ioctl+0xa2>

  switch (cmd)
 8016088:	79bb      	ldrb	r3, [r7, #6]
 801608a:	2b03      	cmp	r3, #3
 801608c:	d834      	bhi.n	80160f8 <SD_ioctl+0x98>
 801608e:	a201      	add	r2, pc, #4	; (adr r2, 8016094 <SD_ioctl+0x34>)
 8016090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016094:	080160a5 	.word	0x080160a5
 8016098:	080160ad 	.word	0x080160ad
 801609c:	080160c5 	.word	0x080160c5
 80160a0:	080160df 	.word	0x080160df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80160a4:	2300      	movs	r3, #0
 80160a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80160aa:	e028      	b.n	80160fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80160ac:	f107 030c 	add.w	r3, r7, #12
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7ff ff2d 	bl	8015f10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80160b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80160bc:	2300      	movs	r3, #0
 80160be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80160c2:	e01c      	b.n	80160fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80160c4:	f107 030c 	add.w	r3, r7, #12
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7ff ff21 	bl	8015f10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80160ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160d0:	b29a      	uxth	r2, r3
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80160d6:	2300      	movs	r3, #0
 80160d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80160dc:	e00f      	b.n	80160fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80160de:	f107 030c 	add.w	r3, r7, #12
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7ff ff14 	bl	8015f10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80160e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ea:	0a5a      	lsrs	r2, r3, #9
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80160f0:	2300      	movs	r3, #0
 80160f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80160f6:	e002      	b.n	80160fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80160f8:	2304      	movs	r3, #4
 80160fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80160fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016102:	4618      	mov	r0, r3
 8016104:	3730      	adds	r7, #48	; 0x30
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}
 801610a:	bf00      	nop
 801610c:	20000029 	.word	0x20000029

08016110 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b084      	sub	sp, #16
 8016114:	af00      	add	r7, sp, #0
 8016116:	4603      	mov	r3, r0
 8016118:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801611a:	79fb      	ldrb	r3, [r7, #7]
 801611c:	4a08      	ldr	r2, [pc, #32]	; (8016140 <disk_status+0x30>)
 801611e:	009b      	lsls	r3, r3, #2
 8016120:	4413      	add	r3, r2
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	685b      	ldr	r3, [r3, #4]
 8016126:	79fa      	ldrb	r2, [r7, #7]
 8016128:	4905      	ldr	r1, [pc, #20]	; (8016140 <disk_status+0x30>)
 801612a:	440a      	add	r2, r1
 801612c:	7a12      	ldrb	r2, [r2, #8]
 801612e:	4610      	mov	r0, r2
 8016130:	4798      	blx	r3
 8016132:	4603      	mov	r3, r0
 8016134:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016136:	7bfb      	ldrb	r3, [r7, #15]
}
 8016138:	4618      	mov	r0, r3
 801613a:	3710      	adds	r7, #16
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}
 8016140:	200002c8 	.word	0x200002c8

08016144 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b084      	sub	sp, #16
 8016148:	af00      	add	r7, sp, #0
 801614a:	4603      	mov	r3, r0
 801614c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801614e:	2300      	movs	r3, #0
 8016150:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016152:	79fb      	ldrb	r3, [r7, #7]
 8016154:	4a0d      	ldr	r2, [pc, #52]	; (801618c <disk_initialize+0x48>)
 8016156:	5cd3      	ldrb	r3, [r2, r3]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d111      	bne.n	8016180 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801615c:	79fb      	ldrb	r3, [r7, #7]
 801615e:	4a0b      	ldr	r2, [pc, #44]	; (801618c <disk_initialize+0x48>)
 8016160:	2101      	movs	r1, #1
 8016162:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016164:	79fb      	ldrb	r3, [r7, #7]
 8016166:	4a09      	ldr	r2, [pc, #36]	; (801618c <disk_initialize+0x48>)
 8016168:	009b      	lsls	r3, r3, #2
 801616a:	4413      	add	r3, r2
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	79fa      	ldrb	r2, [r7, #7]
 8016172:	4906      	ldr	r1, [pc, #24]	; (801618c <disk_initialize+0x48>)
 8016174:	440a      	add	r2, r1
 8016176:	7a12      	ldrb	r2, [r2, #8]
 8016178:	4610      	mov	r0, r2
 801617a:	4798      	blx	r3
 801617c:	4603      	mov	r3, r0
 801617e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016180:	7bfb      	ldrb	r3, [r7, #15]
}
 8016182:	4618      	mov	r0, r3
 8016184:	3710      	adds	r7, #16
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}
 801618a:	bf00      	nop
 801618c:	200002c8 	.word	0x200002c8

08016190 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016190:	b590      	push	{r4, r7, lr}
 8016192:	b087      	sub	sp, #28
 8016194:	af00      	add	r7, sp, #0
 8016196:	60b9      	str	r1, [r7, #8]
 8016198:	607a      	str	r2, [r7, #4]
 801619a:	603b      	str	r3, [r7, #0]
 801619c:	4603      	mov	r3, r0
 801619e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80161a0:	7bfb      	ldrb	r3, [r7, #15]
 80161a2:	4a0a      	ldr	r2, [pc, #40]	; (80161cc <disk_read+0x3c>)
 80161a4:	009b      	lsls	r3, r3, #2
 80161a6:	4413      	add	r3, r2
 80161a8:	685b      	ldr	r3, [r3, #4]
 80161aa:	689c      	ldr	r4, [r3, #8]
 80161ac:	7bfb      	ldrb	r3, [r7, #15]
 80161ae:	4a07      	ldr	r2, [pc, #28]	; (80161cc <disk_read+0x3c>)
 80161b0:	4413      	add	r3, r2
 80161b2:	7a18      	ldrb	r0, [r3, #8]
 80161b4:	683b      	ldr	r3, [r7, #0]
 80161b6:	687a      	ldr	r2, [r7, #4]
 80161b8:	68b9      	ldr	r1, [r7, #8]
 80161ba:	47a0      	blx	r4
 80161bc:	4603      	mov	r3, r0
 80161be:	75fb      	strb	r3, [r7, #23]
  return res;
 80161c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80161c2:	4618      	mov	r0, r3
 80161c4:	371c      	adds	r7, #28
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd90      	pop	{r4, r7, pc}
 80161ca:	bf00      	nop
 80161cc:	200002c8 	.word	0x200002c8

080161d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80161d0:	b590      	push	{r4, r7, lr}
 80161d2:	b087      	sub	sp, #28
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	60b9      	str	r1, [r7, #8]
 80161d8:	607a      	str	r2, [r7, #4]
 80161da:	603b      	str	r3, [r7, #0]
 80161dc:	4603      	mov	r3, r0
 80161de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80161e0:	7bfb      	ldrb	r3, [r7, #15]
 80161e2:	4a0a      	ldr	r2, [pc, #40]	; (801620c <disk_write+0x3c>)
 80161e4:	009b      	lsls	r3, r3, #2
 80161e6:	4413      	add	r3, r2
 80161e8:	685b      	ldr	r3, [r3, #4]
 80161ea:	68dc      	ldr	r4, [r3, #12]
 80161ec:	7bfb      	ldrb	r3, [r7, #15]
 80161ee:	4a07      	ldr	r2, [pc, #28]	; (801620c <disk_write+0x3c>)
 80161f0:	4413      	add	r3, r2
 80161f2:	7a18      	ldrb	r0, [r3, #8]
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	687a      	ldr	r2, [r7, #4]
 80161f8:	68b9      	ldr	r1, [r7, #8]
 80161fa:	47a0      	blx	r4
 80161fc:	4603      	mov	r3, r0
 80161fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8016200:	7dfb      	ldrb	r3, [r7, #23]
}
 8016202:	4618      	mov	r0, r3
 8016204:	371c      	adds	r7, #28
 8016206:	46bd      	mov	sp, r7
 8016208:	bd90      	pop	{r4, r7, pc}
 801620a:	bf00      	nop
 801620c:	200002c8 	.word	0x200002c8

08016210 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b084      	sub	sp, #16
 8016214:	af00      	add	r7, sp, #0
 8016216:	4603      	mov	r3, r0
 8016218:	603a      	str	r2, [r7, #0]
 801621a:	71fb      	strb	r3, [r7, #7]
 801621c:	460b      	mov	r3, r1
 801621e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016220:	79fb      	ldrb	r3, [r7, #7]
 8016222:	4a09      	ldr	r2, [pc, #36]	; (8016248 <disk_ioctl+0x38>)
 8016224:	009b      	lsls	r3, r3, #2
 8016226:	4413      	add	r3, r2
 8016228:	685b      	ldr	r3, [r3, #4]
 801622a:	691b      	ldr	r3, [r3, #16]
 801622c:	79fa      	ldrb	r2, [r7, #7]
 801622e:	4906      	ldr	r1, [pc, #24]	; (8016248 <disk_ioctl+0x38>)
 8016230:	440a      	add	r2, r1
 8016232:	7a10      	ldrb	r0, [r2, #8]
 8016234:	79b9      	ldrb	r1, [r7, #6]
 8016236:	683a      	ldr	r2, [r7, #0]
 8016238:	4798      	blx	r3
 801623a:	4603      	mov	r3, r0
 801623c:	73fb      	strb	r3, [r7, #15]
  return res;
 801623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016240:	4618      	mov	r0, r3
 8016242:	3710      	adds	r7, #16
 8016244:	46bd      	mov	sp, r7
 8016246:	bd80      	pop	{r7, pc}
 8016248:	200002c8 	.word	0x200002c8

0801624c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801624c:	b480      	push	{r7}
 801624e:	b085      	sub	sp, #20
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	3301      	adds	r3, #1
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801625c:	89fb      	ldrh	r3, [r7, #14]
 801625e:	021b      	lsls	r3, r3, #8
 8016260:	b21a      	sxth	r2, r3
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	781b      	ldrb	r3, [r3, #0]
 8016266:	b21b      	sxth	r3, r3
 8016268:	4313      	orrs	r3, r2
 801626a:	b21b      	sxth	r3, r3
 801626c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801626e:	89fb      	ldrh	r3, [r7, #14]
}
 8016270:	4618      	mov	r0, r3
 8016272:	3714      	adds	r7, #20
 8016274:	46bd      	mov	sp, r7
 8016276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627a:	4770      	bx	lr

0801627c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801627c:	b480      	push	{r7}
 801627e:	b085      	sub	sp, #20
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	3303      	adds	r3, #3
 8016288:	781b      	ldrb	r3, [r3, #0]
 801628a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	021b      	lsls	r3, r3, #8
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	3202      	adds	r2, #2
 8016294:	7812      	ldrb	r2, [r2, #0]
 8016296:	4313      	orrs	r3, r2
 8016298:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	021b      	lsls	r3, r3, #8
 801629e:	687a      	ldr	r2, [r7, #4]
 80162a0:	3201      	adds	r2, #1
 80162a2:	7812      	ldrb	r2, [r2, #0]
 80162a4:	4313      	orrs	r3, r2
 80162a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	021b      	lsls	r3, r3, #8
 80162ac:	687a      	ldr	r2, [r7, #4]
 80162ae:	7812      	ldrb	r2, [r2, #0]
 80162b0:	4313      	orrs	r3, r2
 80162b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80162b4:	68fb      	ldr	r3, [r7, #12]
}
 80162b6:	4618      	mov	r0, r3
 80162b8:	3714      	adds	r7, #20
 80162ba:	46bd      	mov	sp, r7
 80162bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c0:	4770      	bx	lr

080162c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80162c2:	b480      	push	{r7}
 80162c4:	b083      	sub	sp, #12
 80162c6:	af00      	add	r7, sp, #0
 80162c8:	6078      	str	r0, [r7, #4]
 80162ca:	460b      	mov	r3, r1
 80162cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	1c5a      	adds	r2, r3, #1
 80162d2:	607a      	str	r2, [r7, #4]
 80162d4:	887a      	ldrh	r2, [r7, #2]
 80162d6:	b2d2      	uxtb	r2, r2
 80162d8:	701a      	strb	r2, [r3, #0]
 80162da:	887b      	ldrh	r3, [r7, #2]
 80162dc:	0a1b      	lsrs	r3, r3, #8
 80162de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	1c5a      	adds	r2, r3, #1
 80162e4:	607a      	str	r2, [r7, #4]
 80162e6:	887a      	ldrh	r2, [r7, #2]
 80162e8:	b2d2      	uxtb	r2, r2
 80162ea:	701a      	strb	r2, [r3, #0]
}
 80162ec:	bf00      	nop
 80162ee:	370c      	adds	r7, #12
 80162f0:	46bd      	mov	sp, r7
 80162f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f6:	4770      	bx	lr

080162f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80162f8:	b480      	push	{r7}
 80162fa:	b083      	sub	sp, #12
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
 8016300:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	1c5a      	adds	r2, r3, #1
 8016306:	607a      	str	r2, [r7, #4]
 8016308:	683a      	ldr	r2, [r7, #0]
 801630a:	b2d2      	uxtb	r2, r2
 801630c:	701a      	strb	r2, [r3, #0]
 801630e:	683b      	ldr	r3, [r7, #0]
 8016310:	0a1b      	lsrs	r3, r3, #8
 8016312:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	1c5a      	adds	r2, r3, #1
 8016318:	607a      	str	r2, [r7, #4]
 801631a:	683a      	ldr	r2, [r7, #0]
 801631c:	b2d2      	uxtb	r2, r2
 801631e:	701a      	strb	r2, [r3, #0]
 8016320:	683b      	ldr	r3, [r7, #0]
 8016322:	0a1b      	lsrs	r3, r3, #8
 8016324:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	1c5a      	adds	r2, r3, #1
 801632a:	607a      	str	r2, [r7, #4]
 801632c:	683a      	ldr	r2, [r7, #0]
 801632e:	b2d2      	uxtb	r2, r2
 8016330:	701a      	strb	r2, [r3, #0]
 8016332:	683b      	ldr	r3, [r7, #0]
 8016334:	0a1b      	lsrs	r3, r3, #8
 8016336:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	1c5a      	adds	r2, r3, #1
 801633c:	607a      	str	r2, [r7, #4]
 801633e:	683a      	ldr	r2, [r7, #0]
 8016340:	b2d2      	uxtb	r2, r2
 8016342:	701a      	strb	r2, [r3, #0]
}
 8016344:	bf00      	nop
 8016346:	370c      	adds	r7, #12
 8016348:	46bd      	mov	sp, r7
 801634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634e:	4770      	bx	lr

08016350 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016350:	b480      	push	{r7}
 8016352:	b087      	sub	sp, #28
 8016354:	af00      	add	r7, sp, #0
 8016356:	60f8      	str	r0, [r7, #12]
 8016358:	60b9      	str	r1, [r7, #8]
 801635a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016360:	68bb      	ldr	r3, [r7, #8]
 8016362:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d00d      	beq.n	8016386 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801636a:	693a      	ldr	r2, [r7, #16]
 801636c:	1c53      	adds	r3, r2, #1
 801636e:	613b      	str	r3, [r7, #16]
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	1c59      	adds	r1, r3, #1
 8016374:	6179      	str	r1, [r7, #20]
 8016376:	7812      	ldrb	r2, [r2, #0]
 8016378:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	3b01      	subs	r3, #1
 801637e:	607b      	str	r3, [r7, #4]
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d1f1      	bne.n	801636a <mem_cpy+0x1a>
	}
}
 8016386:	bf00      	nop
 8016388:	371c      	adds	r7, #28
 801638a:	46bd      	mov	sp, r7
 801638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016390:	4770      	bx	lr

08016392 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016392:	b480      	push	{r7}
 8016394:	b087      	sub	sp, #28
 8016396:	af00      	add	r7, sp, #0
 8016398:	60f8      	str	r0, [r7, #12]
 801639a:	60b9      	str	r1, [r7, #8]
 801639c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80163a2:	697b      	ldr	r3, [r7, #20]
 80163a4:	1c5a      	adds	r2, r3, #1
 80163a6:	617a      	str	r2, [r7, #20]
 80163a8:	68ba      	ldr	r2, [r7, #8]
 80163aa:	b2d2      	uxtb	r2, r2
 80163ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	3b01      	subs	r3, #1
 80163b2:	607b      	str	r3, [r7, #4]
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d1f3      	bne.n	80163a2 <mem_set+0x10>
}
 80163ba:	bf00      	nop
 80163bc:	bf00      	nop
 80163be:	371c      	adds	r7, #28
 80163c0:	46bd      	mov	sp, r7
 80163c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c6:	4770      	bx	lr

080163c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80163c8:	b480      	push	{r7}
 80163ca:	b089      	sub	sp, #36	; 0x24
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	60f8      	str	r0, [r7, #12]
 80163d0:	60b9      	str	r1, [r7, #8]
 80163d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	61fb      	str	r3, [r7, #28]
 80163d8:	68bb      	ldr	r3, [r7, #8]
 80163da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80163dc:	2300      	movs	r3, #0
 80163de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80163e0:	69fb      	ldr	r3, [r7, #28]
 80163e2:	1c5a      	adds	r2, r3, #1
 80163e4:	61fa      	str	r2, [r7, #28]
 80163e6:	781b      	ldrb	r3, [r3, #0]
 80163e8:	4619      	mov	r1, r3
 80163ea:	69bb      	ldr	r3, [r7, #24]
 80163ec:	1c5a      	adds	r2, r3, #1
 80163ee:	61ba      	str	r2, [r7, #24]
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	1acb      	subs	r3, r1, r3
 80163f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	3b01      	subs	r3, #1
 80163fa:	607b      	str	r3, [r7, #4]
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d002      	beq.n	8016408 <mem_cmp+0x40>
 8016402:	697b      	ldr	r3, [r7, #20]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d0eb      	beq.n	80163e0 <mem_cmp+0x18>

	return r;
 8016408:	697b      	ldr	r3, [r7, #20]
}
 801640a:	4618      	mov	r0, r3
 801640c:	3724      	adds	r7, #36	; 0x24
 801640e:	46bd      	mov	sp, r7
 8016410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016414:	4770      	bx	lr

08016416 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016416:	b480      	push	{r7}
 8016418:	b083      	sub	sp, #12
 801641a:	af00      	add	r7, sp, #0
 801641c:	6078      	str	r0, [r7, #4]
 801641e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016420:	e002      	b.n	8016428 <chk_chr+0x12>
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	3301      	adds	r3, #1
 8016426:	607b      	str	r3, [r7, #4]
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	781b      	ldrb	r3, [r3, #0]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d005      	beq.n	801643c <chk_chr+0x26>
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	781b      	ldrb	r3, [r3, #0]
 8016434:	461a      	mov	r2, r3
 8016436:	683b      	ldr	r3, [r7, #0]
 8016438:	4293      	cmp	r3, r2
 801643a:	d1f2      	bne.n	8016422 <chk_chr+0xc>
	return *str;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	781b      	ldrb	r3, [r3, #0]
}
 8016440:	4618      	mov	r0, r3
 8016442:	370c      	adds	r7, #12
 8016444:	46bd      	mov	sp, r7
 8016446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644a:	4770      	bx	lr

0801644c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801644c:	b480      	push	{r7}
 801644e:	b085      	sub	sp, #20
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016456:	2300      	movs	r3, #0
 8016458:	60bb      	str	r3, [r7, #8]
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	60fb      	str	r3, [r7, #12]
 801645e:	e029      	b.n	80164b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016460:	4a27      	ldr	r2, [pc, #156]	; (8016500 <chk_lock+0xb4>)
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	011b      	lsls	r3, r3, #4
 8016466:	4413      	add	r3, r2
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d01d      	beq.n	80164aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801646e:	4a24      	ldr	r2, [pc, #144]	; (8016500 <chk_lock+0xb4>)
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	011b      	lsls	r3, r3, #4
 8016474:	4413      	add	r3, r2
 8016476:	681a      	ldr	r2, [r3, #0]
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	429a      	cmp	r2, r3
 801647e:	d116      	bne.n	80164ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016480:	4a1f      	ldr	r2, [pc, #124]	; (8016500 <chk_lock+0xb4>)
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	011b      	lsls	r3, r3, #4
 8016486:	4413      	add	r3, r2
 8016488:	3304      	adds	r3, #4
 801648a:	681a      	ldr	r2, [r3, #0]
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016490:	429a      	cmp	r2, r3
 8016492:	d10c      	bne.n	80164ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016494:	4a1a      	ldr	r2, [pc, #104]	; (8016500 <chk_lock+0xb4>)
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	011b      	lsls	r3, r3, #4
 801649a:	4413      	add	r3, r2
 801649c:	3308      	adds	r3, #8
 801649e:	681a      	ldr	r2, [r3, #0]
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80164a4:	429a      	cmp	r2, r3
 80164a6:	d102      	bne.n	80164ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80164a8:	e007      	b.n	80164ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80164aa:	2301      	movs	r3, #1
 80164ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	3301      	adds	r3, #1
 80164b2:	60fb      	str	r3, [r7, #12]
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	2b01      	cmp	r3, #1
 80164b8:	d9d2      	bls.n	8016460 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	2b02      	cmp	r3, #2
 80164be:	d109      	bne.n	80164d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d102      	bne.n	80164cc <chk_lock+0x80>
 80164c6:	683b      	ldr	r3, [r7, #0]
 80164c8:	2b02      	cmp	r3, #2
 80164ca:	d101      	bne.n	80164d0 <chk_lock+0x84>
 80164cc:	2300      	movs	r3, #0
 80164ce:	e010      	b.n	80164f2 <chk_lock+0xa6>
 80164d0:	2312      	movs	r3, #18
 80164d2:	e00e      	b.n	80164f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80164d4:	683b      	ldr	r3, [r7, #0]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d108      	bne.n	80164ec <chk_lock+0xa0>
 80164da:	4a09      	ldr	r2, [pc, #36]	; (8016500 <chk_lock+0xb4>)
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	011b      	lsls	r3, r3, #4
 80164e0:	4413      	add	r3, r2
 80164e2:	330c      	adds	r3, #12
 80164e4:	881b      	ldrh	r3, [r3, #0]
 80164e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164ea:	d101      	bne.n	80164f0 <chk_lock+0xa4>
 80164ec:	2310      	movs	r3, #16
 80164ee:	e000      	b.n	80164f2 <chk_lock+0xa6>
 80164f0:	2300      	movs	r3, #0
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3714      	adds	r7, #20
 80164f6:	46bd      	mov	sp, r7
 80164f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fc:	4770      	bx	lr
 80164fe:	bf00      	nop
 8016500:	200002a8 	.word	0x200002a8

08016504 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016504:	b480      	push	{r7}
 8016506:	b083      	sub	sp, #12
 8016508:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801650a:	2300      	movs	r3, #0
 801650c:	607b      	str	r3, [r7, #4]
 801650e:	e002      	b.n	8016516 <enq_lock+0x12>
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	3301      	adds	r3, #1
 8016514:	607b      	str	r3, [r7, #4]
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	2b01      	cmp	r3, #1
 801651a:	d806      	bhi.n	801652a <enq_lock+0x26>
 801651c:	4a09      	ldr	r2, [pc, #36]	; (8016544 <enq_lock+0x40>)
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	011b      	lsls	r3, r3, #4
 8016522:	4413      	add	r3, r2
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d1f2      	bne.n	8016510 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	2b02      	cmp	r3, #2
 801652e:	bf14      	ite	ne
 8016530:	2301      	movne	r3, #1
 8016532:	2300      	moveq	r3, #0
 8016534:	b2db      	uxtb	r3, r3
}
 8016536:	4618      	mov	r0, r3
 8016538:	370c      	adds	r7, #12
 801653a:	46bd      	mov	sp, r7
 801653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016540:	4770      	bx	lr
 8016542:	bf00      	nop
 8016544:	200002a8 	.word	0x200002a8

08016548 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016548:	b480      	push	{r7}
 801654a:	b085      	sub	sp, #20
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
 8016550:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016552:	2300      	movs	r3, #0
 8016554:	60fb      	str	r3, [r7, #12]
 8016556:	e01f      	b.n	8016598 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016558:	4a41      	ldr	r2, [pc, #260]	; (8016660 <inc_lock+0x118>)
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	011b      	lsls	r3, r3, #4
 801655e:	4413      	add	r3, r2
 8016560:	681a      	ldr	r2, [r3, #0]
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	429a      	cmp	r2, r3
 8016568:	d113      	bne.n	8016592 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801656a:	4a3d      	ldr	r2, [pc, #244]	; (8016660 <inc_lock+0x118>)
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	011b      	lsls	r3, r3, #4
 8016570:	4413      	add	r3, r2
 8016572:	3304      	adds	r3, #4
 8016574:	681a      	ldr	r2, [r3, #0]
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801657a:	429a      	cmp	r2, r3
 801657c:	d109      	bne.n	8016592 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801657e:	4a38      	ldr	r2, [pc, #224]	; (8016660 <inc_lock+0x118>)
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	011b      	lsls	r3, r3, #4
 8016584:	4413      	add	r3, r2
 8016586:	3308      	adds	r3, #8
 8016588:	681a      	ldr	r2, [r3, #0]
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801658e:	429a      	cmp	r2, r3
 8016590:	d006      	beq.n	80165a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	3301      	adds	r3, #1
 8016596:	60fb      	str	r3, [r7, #12]
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	2b01      	cmp	r3, #1
 801659c:	d9dc      	bls.n	8016558 <inc_lock+0x10>
 801659e:	e000      	b.n	80165a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80165a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	2b02      	cmp	r3, #2
 80165a6:	d132      	bne.n	801660e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80165a8:	2300      	movs	r3, #0
 80165aa:	60fb      	str	r3, [r7, #12]
 80165ac:	e002      	b.n	80165b4 <inc_lock+0x6c>
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	3301      	adds	r3, #1
 80165b2:	60fb      	str	r3, [r7, #12]
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	2b01      	cmp	r3, #1
 80165b8:	d806      	bhi.n	80165c8 <inc_lock+0x80>
 80165ba:	4a29      	ldr	r2, [pc, #164]	; (8016660 <inc_lock+0x118>)
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	011b      	lsls	r3, r3, #4
 80165c0:	4413      	add	r3, r2
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d1f2      	bne.n	80165ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	2b02      	cmp	r3, #2
 80165cc:	d101      	bne.n	80165d2 <inc_lock+0x8a>
 80165ce:	2300      	movs	r3, #0
 80165d0:	e040      	b.n	8016654 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681a      	ldr	r2, [r3, #0]
 80165d6:	4922      	ldr	r1, [pc, #136]	; (8016660 <inc_lock+0x118>)
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	011b      	lsls	r3, r3, #4
 80165dc:	440b      	add	r3, r1
 80165de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	689a      	ldr	r2, [r3, #8]
 80165e4:	491e      	ldr	r1, [pc, #120]	; (8016660 <inc_lock+0x118>)
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	011b      	lsls	r3, r3, #4
 80165ea:	440b      	add	r3, r1
 80165ec:	3304      	adds	r3, #4
 80165ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	695a      	ldr	r2, [r3, #20]
 80165f4:	491a      	ldr	r1, [pc, #104]	; (8016660 <inc_lock+0x118>)
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	011b      	lsls	r3, r3, #4
 80165fa:	440b      	add	r3, r1
 80165fc:	3308      	adds	r3, #8
 80165fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016600:	4a17      	ldr	r2, [pc, #92]	; (8016660 <inc_lock+0x118>)
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	011b      	lsls	r3, r3, #4
 8016606:	4413      	add	r3, r2
 8016608:	330c      	adds	r3, #12
 801660a:	2200      	movs	r2, #0
 801660c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d009      	beq.n	8016628 <inc_lock+0xe0>
 8016614:	4a12      	ldr	r2, [pc, #72]	; (8016660 <inc_lock+0x118>)
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	011b      	lsls	r3, r3, #4
 801661a:	4413      	add	r3, r2
 801661c:	330c      	adds	r3, #12
 801661e:	881b      	ldrh	r3, [r3, #0]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d001      	beq.n	8016628 <inc_lock+0xe0>
 8016624:	2300      	movs	r3, #0
 8016626:	e015      	b.n	8016654 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016628:	683b      	ldr	r3, [r7, #0]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d108      	bne.n	8016640 <inc_lock+0xf8>
 801662e:	4a0c      	ldr	r2, [pc, #48]	; (8016660 <inc_lock+0x118>)
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	011b      	lsls	r3, r3, #4
 8016634:	4413      	add	r3, r2
 8016636:	330c      	adds	r3, #12
 8016638:	881b      	ldrh	r3, [r3, #0]
 801663a:	3301      	adds	r3, #1
 801663c:	b29a      	uxth	r2, r3
 801663e:	e001      	b.n	8016644 <inc_lock+0xfc>
 8016640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016644:	4906      	ldr	r1, [pc, #24]	; (8016660 <inc_lock+0x118>)
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	011b      	lsls	r3, r3, #4
 801664a:	440b      	add	r3, r1
 801664c:	330c      	adds	r3, #12
 801664e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	3301      	adds	r3, #1
}
 8016654:	4618      	mov	r0, r3
 8016656:	3714      	adds	r7, #20
 8016658:	46bd      	mov	sp, r7
 801665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665e:	4770      	bx	lr
 8016660:	200002a8 	.word	0x200002a8

08016664 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016664:	b480      	push	{r7}
 8016666:	b085      	sub	sp, #20
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	3b01      	subs	r3, #1
 8016670:	607b      	str	r3, [r7, #4]
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	2b01      	cmp	r3, #1
 8016676:	d825      	bhi.n	80166c4 <dec_lock+0x60>
		n = Files[i].ctr;
 8016678:	4a17      	ldr	r2, [pc, #92]	; (80166d8 <dec_lock+0x74>)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	011b      	lsls	r3, r3, #4
 801667e:	4413      	add	r3, r2
 8016680:	330c      	adds	r3, #12
 8016682:	881b      	ldrh	r3, [r3, #0]
 8016684:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016686:	89fb      	ldrh	r3, [r7, #14]
 8016688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801668c:	d101      	bne.n	8016692 <dec_lock+0x2e>
 801668e:	2300      	movs	r3, #0
 8016690:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8016692:	89fb      	ldrh	r3, [r7, #14]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d002      	beq.n	801669e <dec_lock+0x3a>
 8016698:	89fb      	ldrh	r3, [r7, #14]
 801669a:	3b01      	subs	r3, #1
 801669c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801669e:	4a0e      	ldr	r2, [pc, #56]	; (80166d8 <dec_lock+0x74>)
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	011b      	lsls	r3, r3, #4
 80166a4:	4413      	add	r3, r2
 80166a6:	330c      	adds	r3, #12
 80166a8:	89fa      	ldrh	r2, [r7, #14]
 80166aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80166ac:	89fb      	ldrh	r3, [r7, #14]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d105      	bne.n	80166be <dec_lock+0x5a>
 80166b2:	4a09      	ldr	r2, [pc, #36]	; (80166d8 <dec_lock+0x74>)
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	011b      	lsls	r3, r3, #4
 80166b8:	4413      	add	r3, r2
 80166ba:	2200      	movs	r2, #0
 80166bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80166be:	2300      	movs	r3, #0
 80166c0:	737b      	strb	r3, [r7, #13]
 80166c2:	e001      	b.n	80166c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80166c4:	2302      	movs	r3, #2
 80166c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80166c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80166ca:	4618      	mov	r0, r3
 80166cc:	3714      	adds	r7, #20
 80166ce:	46bd      	mov	sp, r7
 80166d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d4:	4770      	bx	lr
 80166d6:	bf00      	nop
 80166d8:	200002a8 	.word	0x200002a8

080166dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80166dc:	b480      	push	{r7}
 80166de:	b085      	sub	sp, #20
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80166e4:	2300      	movs	r3, #0
 80166e6:	60fb      	str	r3, [r7, #12]
 80166e8:	e010      	b.n	801670c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80166ea:	4a0d      	ldr	r2, [pc, #52]	; (8016720 <clear_lock+0x44>)
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	011b      	lsls	r3, r3, #4
 80166f0:	4413      	add	r3, r2
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	687a      	ldr	r2, [r7, #4]
 80166f6:	429a      	cmp	r2, r3
 80166f8:	d105      	bne.n	8016706 <clear_lock+0x2a>
 80166fa:	4a09      	ldr	r2, [pc, #36]	; (8016720 <clear_lock+0x44>)
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	011b      	lsls	r3, r3, #4
 8016700:	4413      	add	r3, r2
 8016702:	2200      	movs	r2, #0
 8016704:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	3301      	adds	r3, #1
 801670a:	60fb      	str	r3, [r7, #12]
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	2b01      	cmp	r3, #1
 8016710:	d9eb      	bls.n	80166ea <clear_lock+0xe>
	}
}
 8016712:	bf00      	nop
 8016714:	bf00      	nop
 8016716:	3714      	adds	r7, #20
 8016718:	46bd      	mov	sp, r7
 801671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671e:	4770      	bx	lr
 8016720:	200002a8 	.word	0x200002a8

08016724 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b086      	sub	sp, #24
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801672c:	2300      	movs	r3, #0
 801672e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	78db      	ldrb	r3, [r3, #3]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d034      	beq.n	80167a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801673c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	7858      	ldrb	r0, [r3, #1]
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016748:	2301      	movs	r3, #1
 801674a:	697a      	ldr	r2, [r7, #20]
 801674c:	f7ff fd40 	bl	80161d0 <disk_write>
 8016750:	4603      	mov	r3, r0
 8016752:	2b00      	cmp	r3, #0
 8016754:	d002      	beq.n	801675c <sync_window+0x38>
			res = FR_DISK_ERR;
 8016756:	2301      	movs	r3, #1
 8016758:	73fb      	strb	r3, [r7, #15]
 801675a:	e022      	b.n	80167a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2200      	movs	r2, #0
 8016760:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6a1b      	ldr	r3, [r3, #32]
 8016766:	697a      	ldr	r2, [r7, #20]
 8016768:	1ad2      	subs	r2, r2, r3
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	699b      	ldr	r3, [r3, #24]
 801676e:	429a      	cmp	r2, r3
 8016770:	d217      	bcs.n	80167a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	789b      	ldrb	r3, [r3, #2]
 8016776:	613b      	str	r3, [r7, #16]
 8016778:	e010      	b.n	801679c <sync_window+0x78>
					wsect += fs->fsize;
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	699b      	ldr	r3, [r3, #24]
 801677e:	697a      	ldr	r2, [r7, #20]
 8016780:	4413      	add	r3, r2
 8016782:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	7858      	ldrb	r0, [r3, #1]
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801678e:	2301      	movs	r3, #1
 8016790:	697a      	ldr	r2, [r7, #20]
 8016792:	f7ff fd1d 	bl	80161d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	3b01      	subs	r3, #1
 801679a:	613b      	str	r3, [r7, #16]
 801679c:	693b      	ldr	r3, [r7, #16]
 801679e:	2b01      	cmp	r3, #1
 80167a0:	d8eb      	bhi.n	801677a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80167a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80167a4:	4618      	mov	r0, r3
 80167a6:	3718      	adds	r7, #24
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}

080167ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b084      	sub	sp, #16
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
 80167b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80167b6:	2300      	movs	r3, #0
 80167b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167be:	683a      	ldr	r2, [r7, #0]
 80167c0:	429a      	cmp	r2, r3
 80167c2:	d01b      	beq.n	80167fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f7ff ffad 	bl	8016724 <sync_window>
 80167ca:	4603      	mov	r3, r0
 80167cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80167ce:	7bfb      	ldrb	r3, [r7, #15]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d113      	bne.n	80167fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	7858      	ldrb	r0, [r3, #1]
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80167de:	2301      	movs	r3, #1
 80167e0:	683a      	ldr	r2, [r7, #0]
 80167e2:	f7ff fcd5 	bl	8016190 <disk_read>
 80167e6:	4603      	mov	r3, r0
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d004      	beq.n	80167f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80167ec:	f04f 33ff 	mov.w	r3, #4294967295
 80167f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80167f2:	2301      	movs	r3, #1
 80167f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	683a      	ldr	r2, [r7, #0]
 80167fa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80167fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80167fe:	4618      	mov	r0, r3
 8016800:	3710      	adds	r7, #16
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}
	...

08016808 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b084      	sub	sp, #16
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016810:	6878      	ldr	r0, [r7, #4]
 8016812:	f7ff ff87 	bl	8016724 <sync_window>
 8016816:	4603      	mov	r3, r0
 8016818:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801681a:	7bfb      	ldrb	r3, [r7, #15]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d158      	bne.n	80168d2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	781b      	ldrb	r3, [r3, #0]
 8016824:	2b03      	cmp	r3, #3
 8016826:	d148      	bne.n	80168ba <sync_fs+0xb2>
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	791b      	ldrb	r3, [r3, #4]
 801682c:	2b01      	cmp	r3, #1
 801682e:	d144      	bne.n	80168ba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	3330      	adds	r3, #48	; 0x30
 8016834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016838:	2100      	movs	r1, #0
 801683a:	4618      	mov	r0, r3
 801683c:	f7ff fda9 	bl	8016392 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	3330      	adds	r3, #48	; 0x30
 8016844:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016848:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801684c:	4618      	mov	r0, r3
 801684e:	f7ff fd38 	bl	80162c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	3330      	adds	r3, #48	; 0x30
 8016856:	4921      	ldr	r1, [pc, #132]	; (80168dc <sync_fs+0xd4>)
 8016858:	4618      	mov	r0, r3
 801685a:	f7ff fd4d 	bl	80162f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	3330      	adds	r3, #48	; 0x30
 8016862:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016866:	491e      	ldr	r1, [pc, #120]	; (80168e0 <sync_fs+0xd8>)
 8016868:	4618      	mov	r0, r3
 801686a:	f7ff fd45 	bl	80162f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	3330      	adds	r3, #48	; 0x30
 8016872:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	691b      	ldr	r3, [r3, #16]
 801687a:	4619      	mov	r1, r3
 801687c:	4610      	mov	r0, r2
 801687e:	f7ff fd3b 	bl	80162f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	3330      	adds	r3, #48	; 0x30
 8016886:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	68db      	ldr	r3, [r3, #12]
 801688e:	4619      	mov	r1, r3
 8016890:	4610      	mov	r0, r2
 8016892:	f7ff fd31 	bl	80162f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	69db      	ldr	r3, [r3, #28]
 801689a:	1c5a      	adds	r2, r3, #1
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	7858      	ldrb	r0, [r3, #1]
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168ae:	2301      	movs	r3, #1
 80168b0:	f7ff fc8e 	bl	80161d0 <disk_write>
			fs->fsi_flag = 0;
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	2200      	movs	r2, #0
 80168b8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	785b      	ldrb	r3, [r3, #1]
 80168be:	2200      	movs	r2, #0
 80168c0:	2100      	movs	r1, #0
 80168c2:	4618      	mov	r0, r3
 80168c4:	f7ff fca4 	bl	8016210 <disk_ioctl>
 80168c8:	4603      	mov	r3, r0
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d001      	beq.n	80168d2 <sync_fs+0xca>
 80168ce:	2301      	movs	r3, #1
 80168d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80168d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	3710      	adds	r7, #16
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}
 80168dc:	41615252 	.word	0x41615252
 80168e0:	61417272 	.word	0x61417272

080168e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80168e4:	b480      	push	{r7}
 80168e6:	b083      	sub	sp, #12
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
 80168ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80168ee:	683b      	ldr	r3, [r7, #0]
 80168f0:	3b02      	subs	r3, #2
 80168f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	695b      	ldr	r3, [r3, #20]
 80168f8:	3b02      	subs	r3, #2
 80168fa:	683a      	ldr	r2, [r7, #0]
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d301      	bcc.n	8016904 <clust2sect+0x20>
 8016900:	2300      	movs	r3, #0
 8016902:	e008      	b.n	8016916 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	895b      	ldrh	r3, [r3, #10]
 8016908:	461a      	mov	r2, r3
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	fb03 f202 	mul.w	r2, r3, r2
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016914:	4413      	add	r3, r2
}
 8016916:	4618      	mov	r0, r3
 8016918:	370c      	adds	r7, #12
 801691a:	46bd      	mov	sp, r7
 801691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016920:	4770      	bx	lr

08016922 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016922:	b580      	push	{r7, lr}
 8016924:	b086      	sub	sp, #24
 8016926:	af00      	add	r7, sp, #0
 8016928:	6078      	str	r0, [r7, #4]
 801692a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	2b01      	cmp	r3, #1
 8016936:	d904      	bls.n	8016942 <get_fat+0x20>
 8016938:	693b      	ldr	r3, [r7, #16]
 801693a:	695b      	ldr	r3, [r3, #20]
 801693c:	683a      	ldr	r2, [r7, #0]
 801693e:	429a      	cmp	r2, r3
 8016940:	d302      	bcc.n	8016948 <get_fat+0x26>
		val = 1;	/* Internal error */
 8016942:	2301      	movs	r3, #1
 8016944:	617b      	str	r3, [r7, #20]
 8016946:	e08f      	b.n	8016a68 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016948:	f04f 33ff 	mov.w	r3, #4294967295
 801694c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801694e:	693b      	ldr	r3, [r7, #16]
 8016950:	781b      	ldrb	r3, [r3, #0]
 8016952:	2b03      	cmp	r3, #3
 8016954:	d062      	beq.n	8016a1c <get_fat+0xfa>
 8016956:	2b03      	cmp	r3, #3
 8016958:	dc7c      	bgt.n	8016a54 <get_fat+0x132>
 801695a:	2b01      	cmp	r3, #1
 801695c:	d002      	beq.n	8016964 <get_fat+0x42>
 801695e:	2b02      	cmp	r3, #2
 8016960:	d042      	beq.n	80169e8 <get_fat+0xc6>
 8016962:	e077      	b.n	8016a54 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016964:	683b      	ldr	r3, [r7, #0]
 8016966:	60fb      	str	r3, [r7, #12]
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	085b      	lsrs	r3, r3, #1
 801696c:	68fa      	ldr	r2, [r7, #12]
 801696e:	4413      	add	r3, r2
 8016970:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016972:	693b      	ldr	r3, [r7, #16]
 8016974:	6a1a      	ldr	r2, [r3, #32]
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	0a5b      	lsrs	r3, r3, #9
 801697a:	4413      	add	r3, r2
 801697c:	4619      	mov	r1, r3
 801697e:	6938      	ldr	r0, [r7, #16]
 8016980:	f7ff ff14 	bl	80167ac <move_window>
 8016984:	4603      	mov	r3, r0
 8016986:	2b00      	cmp	r3, #0
 8016988:	d167      	bne.n	8016a5a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	1c5a      	adds	r2, r3, #1
 801698e:	60fa      	str	r2, [r7, #12]
 8016990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016994:	693a      	ldr	r2, [r7, #16]
 8016996:	4413      	add	r3, r2
 8016998:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801699c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801699e:	693b      	ldr	r3, [r7, #16]
 80169a0:	6a1a      	ldr	r2, [r3, #32]
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	0a5b      	lsrs	r3, r3, #9
 80169a6:	4413      	add	r3, r2
 80169a8:	4619      	mov	r1, r3
 80169aa:	6938      	ldr	r0, [r7, #16]
 80169ac:	f7ff fefe 	bl	80167ac <move_window>
 80169b0:	4603      	mov	r3, r0
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d153      	bne.n	8016a5e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80169bc:	693a      	ldr	r2, [r7, #16]
 80169be:	4413      	add	r3, r2
 80169c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80169c4:	021b      	lsls	r3, r3, #8
 80169c6:	461a      	mov	r2, r3
 80169c8:	68bb      	ldr	r3, [r7, #8]
 80169ca:	4313      	orrs	r3, r2
 80169cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80169ce:	683b      	ldr	r3, [r7, #0]
 80169d0:	f003 0301 	and.w	r3, r3, #1
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d002      	beq.n	80169de <get_fat+0xbc>
 80169d8:	68bb      	ldr	r3, [r7, #8]
 80169da:	091b      	lsrs	r3, r3, #4
 80169dc:	e002      	b.n	80169e4 <get_fat+0xc2>
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80169e4:	617b      	str	r3, [r7, #20]
			break;
 80169e6:	e03f      	b.n	8016a68 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80169e8:	693b      	ldr	r3, [r7, #16]
 80169ea:	6a1a      	ldr	r2, [r3, #32]
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	0a1b      	lsrs	r3, r3, #8
 80169f0:	4413      	add	r3, r2
 80169f2:	4619      	mov	r1, r3
 80169f4:	6938      	ldr	r0, [r7, #16]
 80169f6:	f7ff fed9 	bl	80167ac <move_window>
 80169fa:	4603      	mov	r3, r0
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d130      	bne.n	8016a62 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016a00:	693b      	ldr	r3, [r7, #16]
 8016a02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016a06:	683b      	ldr	r3, [r7, #0]
 8016a08:	005b      	lsls	r3, r3, #1
 8016a0a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016a0e:	4413      	add	r3, r2
 8016a10:	4618      	mov	r0, r3
 8016a12:	f7ff fc1b 	bl	801624c <ld_word>
 8016a16:	4603      	mov	r3, r0
 8016a18:	617b      	str	r3, [r7, #20]
			break;
 8016a1a:	e025      	b.n	8016a68 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016a1c:	693b      	ldr	r3, [r7, #16]
 8016a1e:	6a1a      	ldr	r2, [r3, #32]
 8016a20:	683b      	ldr	r3, [r7, #0]
 8016a22:	09db      	lsrs	r3, r3, #7
 8016a24:	4413      	add	r3, r2
 8016a26:	4619      	mov	r1, r3
 8016a28:	6938      	ldr	r0, [r7, #16]
 8016a2a:	f7ff febf 	bl	80167ac <move_window>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d118      	bne.n	8016a66 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016a34:	693b      	ldr	r3, [r7, #16]
 8016a36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	009b      	lsls	r3, r3, #2
 8016a3e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016a42:	4413      	add	r3, r2
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7ff fc19 	bl	801627c <ld_dword>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016a50:	617b      	str	r3, [r7, #20]
			break;
 8016a52:	e009      	b.n	8016a68 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016a54:	2301      	movs	r3, #1
 8016a56:	617b      	str	r3, [r7, #20]
 8016a58:	e006      	b.n	8016a68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016a5a:	bf00      	nop
 8016a5c:	e004      	b.n	8016a68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016a5e:	bf00      	nop
 8016a60:	e002      	b.n	8016a68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016a62:	bf00      	nop
 8016a64:	e000      	b.n	8016a68 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016a66:	bf00      	nop
		}
	}

	return val;
 8016a68:	697b      	ldr	r3, [r7, #20]
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	3718      	adds	r7, #24
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}

08016a72 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016a72:	b590      	push	{r4, r7, lr}
 8016a74:	b089      	sub	sp, #36	; 0x24
 8016a76:	af00      	add	r7, sp, #0
 8016a78:	60f8      	str	r0, [r7, #12]
 8016a7a:	60b9      	str	r1, [r7, #8]
 8016a7c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016a7e:	2302      	movs	r3, #2
 8016a80:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	2b01      	cmp	r3, #1
 8016a86:	f240 80d2 	bls.w	8016c2e <put_fat+0x1bc>
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	695b      	ldr	r3, [r3, #20]
 8016a8e:	68ba      	ldr	r2, [r7, #8]
 8016a90:	429a      	cmp	r2, r3
 8016a92:	f080 80cc 	bcs.w	8016c2e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	2b03      	cmp	r3, #3
 8016a9c:	f000 8096 	beq.w	8016bcc <put_fat+0x15a>
 8016aa0:	2b03      	cmp	r3, #3
 8016aa2:	f300 80cd 	bgt.w	8016c40 <put_fat+0x1ce>
 8016aa6:	2b01      	cmp	r3, #1
 8016aa8:	d002      	beq.n	8016ab0 <put_fat+0x3e>
 8016aaa:	2b02      	cmp	r3, #2
 8016aac:	d06e      	beq.n	8016b8c <put_fat+0x11a>
 8016aae:	e0c7      	b.n	8016c40 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016ab0:	68bb      	ldr	r3, [r7, #8]
 8016ab2:	61bb      	str	r3, [r7, #24]
 8016ab4:	69bb      	ldr	r3, [r7, #24]
 8016ab6:	085b      	lsrs	r3, r3, #1
 8016ab8:	69ba      	ldr	r2, [r7, #24]
 8016aba:	4413      	add	r3, r2
 8016abc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	6a1a      	ldr	r2, [r3, #32]
 8016ac2:	69bb      	ldr	r3, [r7, #24]
 8016ac4:	0a5b      	lsrs	r3, r3, #9
 8016ac6:	4413      	add	r3, r2
 8016ac8:	4619      	mov	r1, r3
 8016aca:	68f8      	ldr	r0, [r7, #12]
 8016acc:	f7ff fe6e 	bl	80167ac <move_window>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016ad4:	7ffb      	ldrb	r3, [r7, #31]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	f040 80ab 	bne.w	8016c32 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ae2:	69bb      	ldr	r3, [r7, #24]
 8016ae4:	1c59      	adds	r1, r3, #1
 8016ae6:	61b9      	str	r1, [r7, #24]
 8016ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016aec:	4413      	add	r3, r2
 8016aee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016af0:	68bb      	ldr	r3, [r7, #8]
 8016af2:	f003 0301 	and.w	r3, r3, #1
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d00d      	beq.n	8016b16 <put_fat+0xa4>
 8016afa:	697b      	ldr	r3, [r7, #20]
 8016afc:	781b      	ldrb	r3, [r3, #0]
 8016afe:	b25b      	sxtb	r3, r3
 8016b00:	f003 030f 	and.w	r3, r3, #15
 8016b04:	b25a      	sxtb	r2, r3
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	b2db      	uxtb	r3, r3
 8016b0a:	011b      	lsls	r3, r3, #4
 8016b0c:	b25b      	sxtb	r3, r3
 8016b0e:	4313      	orrs	r3, r2
 8016b10:	b25b      	sxtb	r3, r3
 8016b12:	b2db      	uxtb	r3, r3
 8016b14:	e001      	b.n	8016b1a <put_fat+0xa8>
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	b2db      	uxtb	r3, r3
 8016b1a:	697a      	ldr	r2, [r7, #20]
 8016b1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	2201      	movs	r2, #1
 8016b22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	6a1a      	ldr	r2, [r3, #32]
 8016b28:	69bb      	ldr	r3, [r7, #24]
 8016b2a:	0a5b      	lsrs	r3, r3, #9
 8016b2c:	4413      	add	r3, r2
 8016b2e:	4619      	mov	r1, r3
 8016b30:	68f8      	ldr	r0, [r7, #12]
 8016b32:	f7ff fe3b 	bl	80167ac <move_window>
 8016b36:	4603      	mov	r3, r0
 8016b38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016b3a:	7ffb      	ldrb	r3, [r7, #31]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d17a      	bne.n	8016c36 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016b46:	69bb      	ldr	r3, [r7, #24]
 8016b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b4c:	4413      	add	r3, r2
 8016b4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	f003 0301 	and.w	r3, r3, #1
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d003      	beq.n	8016b62 <put_fat+0xf0>
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	091b      	lsrs	r3, r3, #4
 8016b5e:	b2db      	uxtb	r3, r3
 8016b60:	e00e      	b.n	8016b80 <put_fat+0x10e>
 8016b62:	697b      	ldr	r3, [r7, #20]
 8016b64:	781b      	ldrb	r3, [r3, #0]
 8016b66:	b25b      	sxtb	r3, r3
 8016b68:	f023 030f 	bic.w	r3, r3, #15
 8016b6c:	b25a      	sxtb	r2, r3
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	0a1b      	lsrs	r3, r3, #8
 8016b72:	b25b      	sxtb	r3, r3
 8016b74:	f003 030f 	and.w	r3, r3, #15
 8016b78:	b25b      	sxtb	r3, r3
 8016b7a:	4313      	orrs	r3, r2
 8016b7c:	b25b      	sxtb	r3, r3
 8016b7e:	b2db      	uxtb	r3, r3
 8016b80:	697a      	ldr	r2, [r7, #20]
 8016b82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	2201      	movs	r2, #1
 8016b88:	70da      	strb	r2, [r3, #3]
			break;
 8016b8a:	e059      	b.n	8016c40 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	6a1a      	ldr	r2, [r3, #32]
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	0a1b      	lsrs	r3, r3, #8
 8016b94:	4413      	add	r3, r2
 8016b96:	4619      	mov	r1, r3
 8016b98:	68f8      	ldr	r0, [r7, #12]
 8016b9a:	f7ff fe07 	bl	80167ac <move_window>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016ba2:	7ffb      	ldrb	r3, [r7, #31]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d148      	bne.n	8016c3a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016bae:	68bb      	ldr	r3, [r7, #8]
 8016bb0:	005b      	lsls	r3, r3, #1
 8016bb2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016bb6:	4413      	add	r3, r2
 8016bb8:	687a      	ldr	r2, [r7, #4]
 8016bba:	b292      	uxth	r2, r2
 8016bbc:	4611      	mov	r1, r2
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f7ff fb7f 	bl	80162c2 <st_word>
			fs->wflag = 1;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	2201      	movs	r2, #1
 8016bc8:	70da      	strb	r2, [r3, #3]
			break;
 8016bca:	e039      	b.n	8016c40 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	6a1a      	ldr	r2, [r3, #32]
 8016bd0:	68bb      	ldr	r3, [r7, #8]
 8016bd2:	09db      	lsrs	r3, r3, #7
 8016bd4:	4413      	add	r3, r2
 8016bd6:	4619      	mov	r1, r3
 8016bd8:	68f8      	ldr	r0, [r7, #12]
 8016bda:	f7ff fde7 	bl	80167ac <move_window>
 8016bde:	4603      	mov	r3, r0
 8016be0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016be2:	7ffb      	ldrb	r3, [r7, #31]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d12a      	bne.n	8016c3e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016bf4:	68bb      	ldr	r3, [r7, #8]
 8016bf6:	009b      	lsls	r3, r3, #2
 8016bf8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016bfc:	4413      	add	r3, r2
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7ff fb3c 	bl	801627c <ld_dword>
 8016c04:	4603      	mov	r3, r0
 8016c06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016c0a:	4323      	orrs	r3, r4
 8016c0c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016c14:	68bb      	ldr	r3, [r7, #8]
 8016c16:	009b      	lsls	r3, r3, #2
 8016c18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016c1c:	4413      	add	r3, r2
 8016c1e:	6879      	ldr	r1, [r7, #4]
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7ff fb69 	bl	80162f8 <st_dword>
			fs->wflag = 1;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2201      	movs	r2, #1
 8016c2a:	70da      	strb	r2, [r3, #3]
			break;
 8016c2c:	e008      	b.n	8016c40 <put_fat+0x1ce>
		}
	}
 8016c2e:	bf00      	nop
 8016c30:	e006      	b.n	8016c40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8016c32:	bf00      	nop
 8016c34:	e004      	b.n	8016c40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8016c36:	bf00      	nop
 8016c38:	e002      	b.n	8016c40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8016c3a:	bf00      	nop
 8016c3c:	e000      	b.n	8016c40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8016c3e:	bf00      	nop
	return res;
 8016c40:	7ffb      	ldrb	r3, [r7, #31]
}
 8016c42:	4618      	mov	r0, r3
 8016c44:	3724      	adds	r7, #36	; 0x24
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd90      	pop	{r4, r7, pc}

08016c4a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016c4a:	b580      	push	{r7, lr}
 8016c4c:	b088      	sub	sp, #32
 8016c4e:	af00      	add	r7, sp, #0
 8016c50:	60f8      	str	r0, [r7, #12]
 8016c52:	60b9      	str	r1, [r7, #8]
 8016c54:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016c56:	2300      	movs	r3, #0
 8016c58:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016c60:	68bb      	ldr	r3, [r7, #8]
 8016c62:	2b01      	cmp	r3, #1
 8016c64:	d904      	bls.n	8016c70 <remove_chain+0x26>
 8016c66:	69bb      	ldr	r3, [r7, #24]
 8016c68:	695b      	ldr	r3, [r3, #20]
 8016c6a:	68ba      	ldr	r2, [r7, #8]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	d301      	bcc.n	8016c74 <remove_chain+0x2a>
 8016c70:	2302      	movs	r3, #2
 8016c72:	e04b      	b.n	8016d0c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d00c      	beq.n	8016c94 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8016c7e:	6879      	ldr	r1, [r7, #4]
 8016c80:	69b8      	ldr	r0, [r7, #24]
 8016c82:	f7ff fef6 	bl	8016a72 <put_fat>
 8016c86:	4603      	mov	r3, r0
 8016c88:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8016c8a:	7ffb      	ldrb	r3, [r7, #31]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d001      	beq.n	8016c94 <remove_chain+0x4a>
 8016c90:	7ffb      	ldrb	r3, [r7, #31]
 8016c92:	e03b      	b.n	8016d0c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016c94:	68b9      	ldr	r1, [r7, #8]
 8016c96:	68f8      	ldr	r0, [r7, #12]
 8016c98:	f7ff fe43 	bl	8016922 <get_fat>
 8016c9c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8016c9e:	697b      	ldr	r3, [r7, #20]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d031      	beq.n	8016d08 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016ca4:	697b      	ldr	r3, [r7, #20]
 8016ca6:	2b01      	cmp	r3, #1
 8016ca8:	d101      	bne.n	8016cae <remove_chain+0x64>
 8016caa:	2302      	movs	r3, #2
 8016cac:	e02e      	b.n	8016d0c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cb4:	d101      	bne.n	8016cba <remove_chain+0x70>
 8016cb6:	2301      	movs	r3, #1
 8016cb8:	e028      	b.n	8016d0c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016cba:	2200      	movs	r2, #0
 8016cbc:	68b9      	ldr	r1, [r7, #8]
 8016cbe:	69b8      	ldr	r0, [r7, #24]
 8016cc0:	f7ff fed7 	bl	8016a72 <put_fat>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8016cc8:	7ffb      	ldrb	r3, [r7, #31]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d001      	beq.n	8016cd2 <remove_chain+0x88>
 8016cce:	7ffb      	ldrb	r3, [r7, #31]
 8016cd0:	e01c      	b.n	8016d0c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016cd2:	69bb      	ldr	r3, [r7, #24]
 8016cd4:	691a      	ldr	r2, [r3, #16]
 8016cd6:	69bb      	ldr	r3, [r7, #24]
 8016cd8:	695b      	ldr	r3, [r3, #20]
 8016cda:	3b02      	subs	r3, #2
 8016cdc:	429a      	cmp	r2, r3
 8016cde:	d20b      	bcs.n	8016cf8 <remove_chain+0xae>
			fs->free_clst++;
 8016ce0:	69bb      	ldr	r3, [r7, #24]
 8016ce2:	691b      	ldr	r3, [r3, #16]
 8016ce4:	1c5a      	adds	r2, r3, #1
 8016ce6:	69bb      	ldr	r3, [r7, #24]
 8016ce8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8016cea:	69bb      	ldr	r3, [r7, #24]
 8016cec:	791b      	ldrb	r3, [r3, #4]
 8016cee:	f043 0301 	orr.w	r3, r3, #1
 8016cf2:	b2da      	uxtb	r2, r3
 8016cf4:	69bb      	ldr	r3, [r7, #24]
 8016cf6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8016cf8:	697b      	ldr	r3, [r7, #20]
 8016cfa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016cfc:	69bb      	ldr	r3, [r7, #24]
 8016cfe:	695b      	ldr	r3, [r3, #20]
 8016d00:	68ba      	ldr	r2, [r7, #8]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d3c6      	bcc.n	8016c94 <remove_chain+0x4a>
 8016d06:	e000      	b.n	8016d0a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016d08:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8016d0a:	2300      	movs	r3, #0
}
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	3720      	adds	r7, #32
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd80      	pop	{r7, pc}

08016d14 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b088      	sub	sp, #32
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
 8016d1c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016d24:	683b      	ldr	r3, [r7, #0]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d10d      	bne.n	8016d46 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8016d2a:	693b      	ldr	r3, [r7, #16]
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016d30:	69bb      	ldr	r3, [r7, #24]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d004      	beq.n	8016d40 <create_chain+0x2c>
 8016d36:	693b      	ldr	r3, [r7, #16]
 8016d38:	695b      	ldr	r3, [r3, #20]
 8016d3a:	69ba      	ldr	r2, [r7, #24]
 8016d3c:	429a      	cmp	r2, r3
 8016d3e:	d31b      	bcc.n	8016d78 <create_chain+0x64>
 8016d40:	2301      	movs	r3, #1
 8016d42:	61bb      	str	r3, [r7, #24]
 8016d44:	e018      	b.n	8016d78 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016d46:	6839      	ldr	r1, [r7, #0]
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f7ff fdea 	bl	8016922 <get_fat>
 8016d4e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	2b01      	cmp	r3, #1
 8016d54:	d801      	bhi.n	8016d5a <create_chain+0x46>
 8016d56:	2301      	movs	r3, #1
 8016d58:	e070      	b.n	8016e3c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d60:	d101      	bne.n	8016d66 <create_chain+0x52>
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	e06a      	b.n	8016e3c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016d66:	693b      	ldr	r3, [r7, #16]
 8016d68:	695b      	ldr	r3, [r3, #20]
 8016d6a:	68fa      	ldr	r2, [r7, #12]
 8016d6c:	429a      	cmp	r2, r3
 8016d6e:	d201      	bcs.n	8016d74 <create_chain+0x60>
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	e063      	b.n	8016e3c <create_chain+0x128>
		scl = clst;
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8016d78:	69bb      	ldr	r3, [r7, #24]
 8016d7a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8016d7c:	69fb      	ldr	r3, [r7, #28]
 8016d7e:	3301      	adds	r3, #1
 8016d80:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8016d82:	693b      	ldr	r3, [r7, #16]
 8016d84:	695b      	ldr	r3, [r3, #20]
 8016d86:	69fa      	ldr	r2, [r7, #28]
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	d307      	bcc.n	8016d9c <create_chain+0x88>
				ncl = 2;
 8016d8c:	2302      	movs	r3, #2
 8016d8e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8016d90:	69fa      	ldr	r2, [r7, #28]
 8016d92:	69bb      	ldr	r3, [r7, #24]
 8016d94:	429a      	cmp	r2, r3
 8016d96:	d901      	bls.n	8016d9c <create_chain+0x88>
 8016d98:	2300      	movs	r3, #0
 8016d9a:	e04f      	b.n	8016e3c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8016d9c:	69f9      	ldr	r1, [r7, #28]
 8016d9e:	6878      	ldr	r0, [r7, #4]
 8016da0:	f7ff fdbf 	bl	8016922 <get_fat>
 8016da4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d00e      	beq.n	8016dca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	2b01      	cmp	r3, #1
 8016db0:	d003      	beq.n	8016dba <create_chain+0xa6>
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016db8:	d101      	bne.n	8016dbe <create_chain+0xaa>
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	e03e      	b.n	8016e3c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8016dbe:	69fa      	ldr	r2, [r7, #28]
 8016dc0:	69bb      	ldr	r3, [r7, #24]
 8016dc2:	429a      	cmp	r2, r3
 8016dc4:	d1da      	bne.n	8016d7c <create_chain+0x68>
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	e038      	b.n	8016e3c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8016dca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8016dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8016dd0:	69f9      	ldr	r1, [r7, #28]
 8016dd2:	6938      	ldr	r0, [r7, #16]
 8016dd4:	f7ff fe4d 	bl	8016a72 <put_fat>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8016ddc:	7dfb      	ldrb	r3, [r7, #23]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d109      	bne.n	8016df6 <create_chain+0xe2>
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d006      	beq.n	8016df6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8016de8:	69fa      	ldr	r2, [r7, #28]
 8016dea:	6839      	ldr	r1, [r7, #0]
 8016dec:	6938      	ldr	r0, [r7, #16]
 8016dee:	f7ff fe40 	bl	8016a72 <put_fat>
 8016df2:	4603      	mov	r3, r0
 8016df4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8016df6:	7dfb      	ldrb	r3, [r7, #23]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d116      	bne.n	8016e2a <create_chain+0x116>
		fs->last_clst = ncl;
 8016dfc:	693b      	ldr	r3, [r7, #16]
 8016dfe:	69fa      	ldr	r2, [r7, #28]
 8016e00:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016e02:	693b      	ldr	r3, [r7, #16]
 8016e04:	691a      	ldr	r2, [r3, #16]
 8016e06:	693b      	ldr	r3, [r7, #16]
 8016e08:	695b      	ldr	r3, [r3, #20]
 8016e0a:	3b02      	subs	r3, #2
 8016e0c:	429a      	cmp	r2, r3
 8016e0e:	d804      	bhi.n	8016e1a <create_chain+0x106>
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	691b      	ldr	r3, [r3, #16]
 8016e14:	1e5a      	subs	r2, r3, #1
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8016e1a:	693b      	ldr	r3, [r7, #16]
 8016e1c:	791b      	ldrb	r3, [r3, #4]
 8016e1e:	f043 0301 	orr.w	r3, r3, #1
 8016e22:	b2da      	uxtb	r2, r3
 8016e24:	693b      	ldr	r3, [r7, #16]
 8016e26:	711a      	strb	r2, [r3, #4]
 8016e28:	e007      	b.n	8016e3a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8016e2a:	7dfb      	ldrb	r3, [r7, #23]
 8016e2c:	2b01      	cmp	r3, #1
 8016e2e:	d102      	bne.n	8016e36 <create_chain+0x122>
 8016e30:	f04f 33ff 	mov.w	r3, #4294967295
 8016e34:	e000      	b.n	8016e38 <create_chain+0x124>
 8016e36:	2301      	movs	r3, #1
 8016e38:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8016e3a:	69fb      	ldr	r3, [r7, #28]
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	3720      	adds	r7, #32
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}

08016e44 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016e44:	b480      	push	{r7}
 8016e46:	b087      	sub	sp, #28
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
 8016e4c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e58:	3304      	adds	r3, #4
 8016e5a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	0a5b      	lsrs	r3, r3, #9
 8016e60:	68fa      	ldr	r2, [r7, #12]
 8016e62:	8952      	ldrh	r2, [r2, #10]
 8016e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8016e68:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016e6a:	693b      	ldr	r3, [r7, #16]
 8016e6c:	1d1a      	adds	r2, r3, #4
 8016e6e:	613a      	str	r2, [r7, #16]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d101      	bne.n	8016e7e <clmt_clust+0x3a>
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	e010      	b.n	8016ea0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8016e7e:	697a      	ldr	r2, [r7, #20]
 8016e80:	68bb      	ldr	r3, [r7, #8]
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d307      	bcc.n	8016e96 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8016e86:	697a      	ldr	r2, [r7, #20]
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	1ad3      	subs	r3, r2, r3
 8016e8c:	617b      	str	r3, [r7, #20]
 8016e8e:	693b      	ldr	r3, [r7, #16]
 8016e90:	3304      	adds	r3, #4
 8016e92:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016e94:	e7e9      	b.n	8016e6a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8016e96:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8016e98:	693b      	ldr	r3, [r7, #16]
 8016e9a:	681a      	ldr	r2, [r3, #0]
 8016e9c:	697b      	ldr	r3, [r7, #20]
 8016e9e:	4413      	add	r3, r2
}
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	371c      	adds	r7, #28
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eaa:	4770      	bx	lr

08016eac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b086      	sub	sp, #24
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
 8016eb4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8016ebc:	683b      	ldr	r3, [r7, #0]
 8016ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016ec2:	d204      	bcs.n	8016ece <dir_sdi+0x22>
 8016ec4:	683b      	ldr	r3, [r7, #0]
 8016ec6:	f003 031f 	and.w	r3, r3, #31
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d001      	beq.n	8016ed2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8016ece:	2302      	movs	r3, #2
 8016ed0:	e063      	b.n	8016f9a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	683a      	ldr	r2, [r7, #0]
 8016ed6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	689b      	ldr	r3, [r3, #8]
 8016edc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016ede:	697b      	ldr	r3, [r7, #20]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d106      	bne.n	8016ef2 <dir_sdi+0x46>
 8016ee4:	693b      	ldr	r3, [r7, #16]
 8016ee6:	781b      	ldrb	r3, [r3, #0]
 8016ee8:	2b02      	cmp	r3, #2
 8016eea:	d902      	bls.n	8016ef2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8016eec:	693b      	ldr	r3, [r7, #16]
 8016eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ef0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8016ef2:	697b      	ldr	r3, [r7, #20]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d10c      	bne.n	8016f12 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	095b      	lsrs	r3, r3, #5
 8016efc:	693a      	ldr	r2, [r7, #16]
 8016efe:	8912      	ldrh	r2, [r2, #8]
 8016f00:	4293      	cmp	r3, r2
 8016f02:	d301      	bcc.n	8016f08 <dir_sdi+0x5c>
 8016f04:	2302      	movs	r3, #2
 8016f06:	e048      	b.n	8016f9a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8016f08:	693b      	ldr	r3, [r7, #16]
 8016f0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	61da      	str	r2, [r3, #28]
 8016f10:	e029      	b.n	8016f66 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8016f12:	693b      	ldr	r3, [r7, #16]
 8016f14:	895b      	ldrh	r3, [r3, #10]
 8016f16:	025b      	lsls	r3, r3, #9
 8016f18:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016f1a:	e019      	b.n	8016f50 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	6979      	ldr	r1, [r7, #20]
 8016f20:	4618      	mov	r0, r3
 8016f22:	f7ff fcfe 	bl	8016922 <get_fat>
 8016f26:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016f28:	697b      	ldr	r3, [r7, #20]
 8016f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f2e:	d101      	bne.n	8016f34 <dir_sdi+0x88>
 8016f30:	2301      	movs	r3, #1
 8016f32:	e032      	b.n	8016f9a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016f34:	697b      	ldr	r3, [r7, #20]
 8016f36:	2b01      	cmp	r3, #1
 8016f38:	d904      	bls.n	8016f44 <dir_sdi+0x98>
 8016f3a:	693b      	ldr	r3, [r7, #16]
 8016f3c:	695b      	ldr	r3, [r3, #20]
 8016f3e:	697a      	ldr	r2, [r7, #20]
 8016f40:	429a      	cmp	r2, r3
 8016f42:	d301      	bcc.n	8016f48 <dir_sdi+0x9c>
 8016f44:	2302      	movs	r3, #2
 8016f46:	e028      	b.n	8016f9a <dir_sdi+0xee>
			ofs -= csz;
 8016f48:	683a      	ldr	r2, [r7, #0]
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	1ad3      	subs	r3, r2, r3
 8016f4e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016f50:	683a      	ldr	r2, [r7, #0]
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	429a      	cmp	r2, r3
 8016f56:	d2e1      	bcs.n	8016f1c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8016f58:	6979      	ldr	r1, [r7, #20]
 8016f5a:	6938      	ldr	r0, [r7, #16]
 8016f5c:	f7ff fcc2 	bl	80168e4 <clust2sect>
 8016f60:	4602      	mov	r2, r0
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	697a      	ldr	r2, [r7, #20]
 8016f6a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	69db      	ldr	r3, [r3, #28]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d101      	bne.n	8016f78 <dir_sdi+0xcc>
 8016f74:	2302      	movs	r3, #2
 8016f76:	e010      	b.n	8016f9a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	69da      	ldr	r2, [r3, #28]
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	0a5b      	lsrs	r3, r3, #9
 8016f80:	441a      	add	r2, r3
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8016f86:	693b      	ldr	r3, [r7, #16]
 8016f88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016f92:	441a      	add	r2, r3
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016f98:	2300      	movs	r3, #0
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3718      	adds	r7, #24
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}

08016fa2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8016fa2:	b580      	push	{r7, lr}
 8016fa4:	b086      	sub	sp, #24
 8016fa6:	af00      	add	r7, sp, #0
 8016fa8:	6078      	str	r0, [r7, #4]
 8016faa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	695b      	ldr	r3, [r3, #20]
 8016fb6:	3320      	adds	r3, #32
 8016fb8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	69db      	ldr	r3, [r3, #28]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d003      	beq.n	8016fca <dir_next+0x28>
 8016fc2:	68bb      	ldr	r3, [r7, #8]
 8016fc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016fc8:	d301      	bcc.n	8016fce <dir_next+0x2c>
 8016fca:	2304      	movs	r3, #4
 8016fcc:	e0aa      	b.n	8017124 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016fce:	68bb      	ldr	r3, [r7, #8]
 8016fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	f040 8098 	bne.w	801710a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	69db      	ldr	r3, [r3, #28]
 8016fde:	1c5a      	adds	r2, r3, #1
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	699b      	ldr	r3, [r3, #24]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d10b      	bne.n	8017004 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	095b      	lsrs	r3, r3, #5
 8016ff0:	68fa      	ldr	r2, [r7, #12]
 8016ff2:	8912      	ldrh	r2, [r2, #8]
 8016ff4:	4293      	cmp	r3, r2
 8016ff6:	f0c0 8088 	bcc.w	801710a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	61da      	str	r2, [r3, #28]
 8017000:	2304      	movs	r3, #4
 8017002:	e08f      	b.n	8017124 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	0a5b      	lsrs	r3, r3, #9
 8017008:	68fa      	ldr	r2, [r7, #12]
 801700a:	8952      	ldrh	r2, [r2, #10]
 801700c:	3a01      	subs	r2, #1
 801700e:	4013      	ands	r3, r2
 8017010:	2b00      	cmp	r3, #0
 8017012:	d17a      	bne.n	801710a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017014:	687a      	ldr	r2, [r7, #4]
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	699b      	ldr	r3, [r3, #24]
 801701a:	4619      	mov	r1, r3
 801701c:	4610      	mov	r0, r2
 801701e:	f7ff fc80 	bl	8016922 <get_fat>
 8017022:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017024:	697b      	ldr	r3, [r7, #20]
 8017026:	2b01      	cmp	r3, #1
 8017028:	d801      	bhi.n	801702e <dir_next+0x8c>
 801702a:	2302      	movs	r3, #2
 801702c:	e07a      	b.n	8017124 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017034:	d101      	bne.n	801703a <dir_next+0x98>
 8017036:	2301      	movs	r3, #1
 8017038:	e074      	b.n	8017124 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	695b      	ldr	r3, [r3, #20]
 801703e:	697a      	ldr	r2, [r7, #20]
 8017040:	429a      	cmp	r2, r3
 8017042:	d358      	bcc.n	80170f6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d104      	bne.n	8017054 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	2200      	movs	r2, #0
 801704e:	61da      	str	r2, [r3, #28]
 8017050:	2304      	movs	r3, #4
 8017052:	e067      	b.n	8017124 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017054:	687a      	ldr	r2, [r7, #4]
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	699b      	ldr	r3, [r3, #24]
 801705a:	4619      	mov	r1, r3
 801705c:	4610      	mov	r0, r2
 801705e:	f7ff fe59 	bl	8016d14 <create_chain>
 8017062:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017064:	697b      	ldr	r3, [r7, #20]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d101      	bne.n	801706e <dir_next+0xcc>
 801706a:	2307      	movs	r3, #7
 801706c:	e05a      	b.n	8017124 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801706e:	697b      	ldr	r3, [r7, #20]
 8017070:	2b01      	cmp	r3, #1
 8017072:	d101      	bne.n	8017078 <dir_next+0xd6>
 8017074:	2302      	movs	r3, #2
 8017076:	e055      	b.n	8017124 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801707e:	d101      	bne.n	8017084 <dir_next+0xe2>
 8017080:	2301      	movs	r3, #1
 8017082:	e04f      	b.n	8017124 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017084:	68f8      	ldr	r0, [r7, #12]
 8017086:	f7ff fb4d 	bl	8016724 <sync_window>
 801708a:	4603      	mov	r3, r0
 801708c:	2b00      	cmp	r3, #0
 801708e:	d001      	beq.n	8017094 <dir_next+0xf2>
 8017090:	2301      	movs	r3, #1
 8017092:	e047      	b.n	8017124 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	3330      	adds	r3, #48	; 0x30
 8017098:	f44f 7200 	mov.w	r2, #512	; 0x200
 801709c:	2100      	movs	r1, #0
 801709e:	4618      	mov	r0, r3
 80170a0:	f7ff f977 	bl	8016392 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80170a4:	2300      	movs	r3, #0
 80170a6:	613b      	str	r3, [r7, #16]
 80170a8:	6979      	ldr	r1, [r7, #20]
 80170aa:	68f8      	ldr	r0, [r7, #12]
 80170ac:	f7ff fc1a 	bl	80168e4 <clust2sect>
 80170b0:	4602      	mov	r2, r0
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80170b6:	e012      	b.n	80170de <dir_next+0x13c>
						fs->wflag = 1;
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	2201      	movs	r2, #1
 80170bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80170be:	68f8      	ldr	r0, [r7, #12]
 80170c0:	f7ff fb30 	bl	8016724 <sync_window>
 80170c4:	4603      	mov	r3, r0
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d001      	beq.n	80170ce <dir_next+0x12c>
 80170ca:	2301      	movs	r3, #1
 80170cc:	e02a      	b.n	8017124 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80170ce:	693b      	ldr	r3, [r7, #16]
 80170d0:	3301      	adds	r3, #1
 80170d2:	613b      	str	r3, [r7, #16]
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170d8:	1c5a      	adds	r2, r3, #1
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	895b      	ldrh	r3, [r3, #10]
 80170e2:	461a      	mov	r2, r3
 80170e4:	693b      	ldr	r3, [r7, #16]
 80170e6:	4293      	cmp	r3, r2
 80170e8:	d3e6      	bcc.n	80170b8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170ee:	693b      	ldr	r3, [r7, #16]
 80170f0:	1ad2      	subs	r2, r2, r3
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	697a      	ldr	r2, [r7, #20]
 80170fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80170fc:	6979      	ldr	r1, [r7, #20]
 80170fe:	68f8      	ldr	r0, [r7, #12]
 8017100:	f7ff fbf0 	bl	80168e4 <clust2sect>
 8017104:	4602      	mov	r2, r0
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	68ba      	ldr	r2, [r7, #8]
 801710e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017116:	68bb      	ldr	r3, [r7, #8]
 8017118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801711c:	441a      	add	r2, r3
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017122:	2300      	movs	r3, #0
}
 8017124:	4618      	mov	r0, r3
 8017126:	3718      	adds	r7, #24
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}

0801712c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b086      	sub	sp, #24
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
 8017134:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801713c:	2100      	movs	r1, #0
 801713e:	6878      	ldr	r0, [r7, #4]
 8017140:	f7ff feb4 	bl	8016eac <dir_sdi>
 8017144:	4603      	mov	r3, r0
 8017146:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017148:	7dfb      	ldrb	r3, [r7, #23]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d12b      	bne.n	80171a6 <dir_alloc+0x7a>
		n = 0;
 801714e:	2300      	movs	r3, #0
 8017150:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	69db      	ldr	r3, [r3, #28]
 8017156:	4619      	mov	r1, r3
 8017158:	68f8      	ldr	r0, [r7, #12]
 801715a:	f7ff fb27 	bl	80167ac <move_window>
 801715e:	4603      	mov	r3, r0
 8017160:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017162:	7dfb      	ldrb	r3, [r7, #23]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d11d      	bne.n	80171a4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6a1b      	ldr	r3, [r3, #32]
 801716c:	781b      	ldrb	r3, [r3, #0]
 801716e:	2be5      	cmp	r3, #229	; 0xe5
 8017170:	d004      	beq.n	801717c <dir_alloc+0x50>
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	6a1b      	ldr	r3, [r3, #32]
 8017176:	781b      	ldrb	r3, [r3, #0]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d107      	bne.n	801718c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801717c:	693b      	ldr	r3, [r7, #16]
 801717e:	3301      	adds	r3, #1
 8017180:	613b      	str	r3, [r7, #16]
 8017182:	693a      	ldr	r2, [r7, #16]
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	429a      	cmp	r2, r3
 8017188:	d102      	bne.n	8017190 <dir_alloc+0x64>
 801718a:	e00c      	b.n	80171a6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801718c:	2300      	movs	r3, #0
 801718e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017190:	2101      	movs	r1, #1
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f7ff ff05 	bl	8016fa2 <dir_next>
 8017198:	4603      	mov	r3, r0
 801719a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801719c:	7dfb      	ldrb	r3, [r7, #23]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d0d7      	beq.n	8017152 <dir_alloc+0x26>
 80171a2:	e000      	b.n	80171a6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80171a4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80171a6:	7dfb      	ldrb	r3, [r7, #23]
 80171a8:	2b04      	cmp	r3, #4
 80171aa:	d101      	bne.n	80171b0 <dir_alloc+0x84>
 80171ac:	2307      	movs	r3, #7
 80171ae:	75fb      	strb	r3, [r7, #23]
	return res;
 80171b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80171b2:	4618      	mov	r0, r3
 80171b4:	3718      	adds	r7, #24
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}

080171ba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80171ba:	b580      	push	{r7, lr}
 80171bc:	b084      	sub	sp, #16
 80171be:	af00      	add	r7, sp, #0
 80171c0:	6078      	str	r0, [r7, #4]
 80171c2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80171c4:	683b      	ldr	r3, [r7, #0]
 80171c6:	331a      	adds	r3, #26
 80171c8:	4618      	mov	r0, r3
 80171ca:	f7ff f83f 	bl	801624c <ld_word>
 80171ce:	4603      	mov	r3, r0
 80171d0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	781b      	ldrb	r3, [r3, #0]
 80171d6:	2b03      	cmp	r3, #3
 80171d8:	d109      	bne.n	80171ee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80171da:	683b      	ldr	r3, [r7, #0]
 80171dc:	3314      	adds	r3, #20
 80171de:	4618      	mov	r0, r3
 80171e0:	f7ff f834 	bl	801624c <ld_word>
 80171e4:	4603      	mov	r3, r0
 80171e6:	041b      	lsls	r3, r3, #16
 80171e8:	68fa      	ldr	r2, [r7, #12]
 80171ea:	4313      	orrs	r3, r2
 80171ec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80171ee:	68fb      	ldr	r3, [r7, #12]
}
 80171f0:	4618      	mov	r0, r3
 80171f2:	3710      	adds	r7, #16
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}

080171f8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b084      	sub	sp, #16
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	60f8      	str	r0, [r7, #12]
 8017200:	60b9      	str	r1, [r7, #8]
 8017202:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017204:	68bb      	ldr	r3, [r7, #8]
 8017206:	331a      	adds	r3, #26
 8017208:	687a      	ldr	r2, [r7, #4]
 801720a:	b292      	uxth	r2, r2
 801720c:	4611      	mov	r1, r2
 801720e:	4618      	mov	r0, r3
 8017210:	f7ff f857 	bl	80162c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	781b      	ldrb	r3, [r3, #0]
 8017218:	2b03      	cmp	r3, #3
 801721a:	d109      	bne.n	8017230 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801721c:	68bb      	ldr	r3, [r7, #8]
 801721e:	f103 0214 	add.w	r2, r3, #20
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	0c1b      	lsrs	r3, r3, #16
 8017226:	b29b      	uxth	r3, r3
 8017228:	4619      	mov	r1, r3
 801722a:	4610      	mov	r0, r2
 801722c:	f7ff f849 	bl	80162c2 <st_word>
	}
}
 8017230:	bf00      	nop
 8017232:	3710      	adds	r7, #16
 8017234:	46bd      	mov	sp, r7
 8017236:	bd80      	pop	{r7, pc}

08017238 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017238:	b580      	push	{r7, lr}
 801723a:	b086      	sub	sp, #24
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017246:	2100      	movs	r1, #0
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f7ff fe2f 	bl	8016eac <dir_sdi>
 801724e:	4603      	mov	r3, r0
 8017250:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017252:	7dfb      	ldrb	r3, [r7, #23]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d001      	beq.n	801725c <dir_find+0x24>
 8017258:	7dfb      	ldrb	r3, [r7, #23]
 801725a:	e03e      	b.n	80172da <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	69db      	ldr	r3, [r3, #28]
 8017260:	4619      	mov	r1, r3
 8017262:	6938      	ldr	r0, [r7, #16]
 8017264:	f7ff faa2 	bl	80167ac <move_window>
 8017268:	4603      	mov	r3, r0
 801726a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801726c:	7dfb      	ldrb	r3, [r7, #23]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d12f      	bne.n	80172d2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	6a1b      	ldr	r3, [r3, #32]
 8017276:	781b      	ldrb	r3, [r3, #0]
 8017278:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801727a:	7bfb      	ldrb	r3, [r7, #15]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d102      	bne.n	8017286 <dir_find+0x4e>
 8017280:	2304      	movs	r3, #4
 8017282:	75fb      	strb	r3, [r7, #23]
 8017284:	e028      	b.n	80172d8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	6a1b      	ldr	r3, [r3, #32]
 801728a:	330b      	adds	r3, #11
 801728c:	781b      	ldrb	r3, [r3, #0]
 801728e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017292:	b2da      	uxtb	r2, r3
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	6a1b      	ldr	r3, [r3, #32]
 801729c:	330b      	adds	r3, #11
 801729e:	781b      	ldrb	r3, [r3, #0]
 80172a0:	f003 0308 	and.w	r3, r3, #8
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d10a      	bne.n	80172be <dir_find+0x86>
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	6a18      	ldr	r0, [r3, #32]
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	3324      	adds	r3, #36	; 0x24
 80172b0:	220b      	movs	r2, #11
 80172b2:	4619      	mov	r1, r3
 80172b4:	f7ff f888 	bl	80163c8 <mem_cmp>
 80172b8:	4603      	mov	r3, r0
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d00b      	beq.n	80172d6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80172be:	2100      	movs	r1, #0
 80172c0:	6878      	ldr	r0, [r7, #4]
 80172c2:	f7ff fe6e 	bl	8016fa2 <dir_next>
 80172c6:	4603      	mov	r3, r0
 80172c8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80172ca:	7dfb      	ldrb	r3, [r7, #23]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d0c5      	beq.n	801725c <dir_find+0x24>
 80172d0:	e002      	b.n	80172d8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80172d2:	bf00      	nop
 80172d4:	e000      	b.n	80172d8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80172d6:	bf00      	nop

	return res;
 80172d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80172da:	4618      	mov	r0, r3
 80172dc:	3718      	adds	r7, #24
 80172de:	46bd      	mov	sp, r7
 80172e0:	bd80      	pop	{r7, pc}

080172e2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80172e2:	b580      	push	{r7, lr}
 80172e4:	b084      	sub	sp, #16
 80172e6:	af00      	add	r7, sp, #0
 80172e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80172f0:	2101      	movs	r1, #1
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f7ff ff1a 	bl	801712c <dir_alloc>
 80172f8:	4603      	mov	r3, r0
 80172fa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80172fc:	7bfb      	ldrb	r3, [r7, #15]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d11c      	bne.n	801733c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	69db      	ldr	r3, [r3, #28]
 8017306:	4619      	mov	r1, r3
 8017308:	68b8      	ldr	r0, [r7, #8]
 801730a:	f7ff fa4f 	bl	80167ac <move_window>
 801730e:	4603      	mov	r3, r0
 8017310:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017312:	7bfb      	ldrb	r3, [r7, #15]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d111      	bne.n	801733c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	6a1b      	ldr	r3, [r3, #32]
 801731c:	2220      	movs	r2, #32
 801731e:	2100      	movs	r1, #0
 8017320:	4618      	mov	r0, r3
 8017322:	f7ff f836 	bl	8016392 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	6a18      	ldr	r0, [r3, #32]
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	3324      	adds	r3, #36	; 0x24
 801732e:	220b      	movs	r2, #11
 8017330:	4619      	mov	r1, r3
 8017332:	f7ff f80d 	bl	8016350 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8017336:	68bb      	ldr	r3, [r7, #8]
 8017338:	2201      	movs	r2, #1
 801733a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801733c:	7bfb      	ldrb	r3, [r7, #15]
}
 801733e:	4618      	mov	r0, r3
 8017340:	3710      	adds	r7, #16
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}
	...

08017348 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b088      	sub	sp, #32
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
 8017350:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8017352:	683b      	ldr	r3, [r7, #0]
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	60fb      	str	r3, [r7, #12]
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	3324      	adds	r3, #36	; 0x24
 801735c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801735e:	220b      	movs	r2, #11
 8017360:	2120      	movs	r1, #32
 8017362:	68b8      	ldr	r0, [r7, #8]
 8017364:	f7ff f815 	bl	8016392 <mem_set>
	si = i = 0; ni = 8;
 8017368:	2300      	movs	r3, #0
 801736a:	613b      	str	r3, [r7, #16]
 801736c:	693b      	ldr	r3, [r7, #16]
 801736e:	61fb      	str	r3, [r7, #28]
 8017370:	2308      	movs	r3, #8
 8017372:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017374:	69fb      	ldr	r3, [r7, #28]
 8017376:	1c5a      	adds	r2, r3, #1
 8017378:	61fa      	str	r2, [r7, #28]
 801737a:	68fa      	ldr	r2, [r7, #12]
 801737c:	4413      	add	r3, r2
 801737e:	781b      	ldrb	r3, [r3, #0]
 8017380:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017382:	7efb      	ldrb	r3, [r7, #27]
 8017384:	2b20      	cmp	r3, #32
 8017386:	d94e      	bls.n	8017426 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8017388:	7efb      	ldrb	r3, [r7, #27]
 801738a:	2b2f      	cmp	r3, #47	; 0x2f
 801738c:	d006      	beq.n	801739c <create_name+0x54>
 801738e:	7efb      	ldrb	r3, [r7, #27]
 8017390:	2b5c      	cmp	r3, #92	; 0x5c
 8017392:	d110      	bne.n	80173b6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017394:	e002      	b.n	801739c <create_name+0x54>
 8017396:	69fb      	ldr	r3, [r7, #28]
 8017398:	3301      	adds	r3, #1
 801739a:	61fb      	str	r3, [r7, #28]
 801739c:	68fa      	ldr	r2, [r7, #12]
 801739e:	69fb      	ldr	r3, [r7, #28]
 80173a0:	4413      	add	r3, r2
 80173a2:	781b      	ldrb	r3, [r3, #0]
 80173a4:	2b2f      	cmp	r3, #47	; 0x2f
 80173a6:	d0f6      	beq.n	8017396 <create_name+0x4e>
 80173a8:	68fa      	ldr	r2, [r7, #12]
 80173aa:	69fb      	ldr	r3, [r7, #28]
 80173ac:	4413      	add	r3, r2
 80173ae:	781b      	ldrb	r3, [r3, #0]
 80173b0:	2b5c      	cmp	r3, #92	; 0x5c
 80173b2:	d0f0      	beq.n	8017396 <create_name+0x4e>
			break;
 80173b4:	e038      	b.n	8017428 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80173b6:	7efb      	ldrb	r3, [r7, #27]
 80173b8:	2b2e      	cmp	r3, #46	; 0x2e
 80173ba:	d003      	beq.n	80173c4 <create_name+0x7c>
 80173bc:	693a      	ldr	r2, [r7, #16]
 80173be:	697b      	ldr	r3, [r7, #20]
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d30c      	bcc.n	80173de <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80173c4:	697b      	ldr	r3, [r7, #20]
 80173c6:	2b0b      	cmp	r3, #11
 80173c8:	d002      	beq.n	80173d0 <create_name+0x88>
 80173ca:	7efb      	ldrb	r3, [r7, #27]
 80173cc:	2b2e      	cmp	r3, #46	; 0x2e
 80173ce:	d001      	beq.n	80173d4 <create_name+0x8c>
 80173d0:	2306      	movs	r3, #6
 80173d2:	e044      	b.n	801745e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80173d4:	2308      	movs	r3, #8
 80173d6:	613b      	str	r3, [r7, #16]
 80173d8:	230b      	movs	r3, #11
 80173da:	617b      	str	r3, [r7, #20]
			continue;
 80173dc:	e022      	b.n	8017424 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80173de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	da04      	bge.n	80173f0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80173e6:	7efb      	ldrb	r3, [r7, #27]
 80173e8:	3b80      	subs	r3, #128	; 0x80
 80173ea:	4a1f      	ldr	r2, [pc, #124]	; (8017468 <create_name+0x120>)
 80173ec:	5cd3      	ldrb	r3, [r2, r3]
 80173ee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80173f0:	7efb      	ldrb	r3, [r7, #27]
 80173f2:	4619      	mov	r1, r3
 80173f4:	481d      	ldr	r0, [pc, #116]	; (801746c <create_name+0x124>)
 80173f6:	f7ff f80e 	bl	8016416 <chk_chr>
 80173fa:	4603      	mov	r3, r0
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d001      	beq.n	8017404 <create_name+0xbc>
 8017400:	2306      	movs	r3, #6
 8017402:	e02c      	b.n	801745e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017404:	7efb      	ldrb	r3, [r7, #27]
 8017406:	2b60      	cmp	r3, #96	; 0x60
 8017408:	d905      	bls.n	8017416 <create_name+0xce>
 801740a:	7efb      	ldrb	r3, [r7, #27]
 801740c:	2b7a      	cmp	r3, #122	; 0x7a
 801740e:	d802      	bhi.n	8017416 <create_name+0xce>
 8017410:	7efb      	ldrb	r3, [r7, #27]
 8017412:	3b20      	subs	r3, #32
 8017414:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8017416:	693b      	ldr	r3, [r7, #16]
 8017418:	1c5a      	adds	r2, r3, #1
 801741a:	613a      	str	r2, [r7, #16]
 801741c:	68ba      	ldr	r2, [r7, #8]
 801741e:	4413      	add	r3, r2
 8017420:	7efa      	ldrb	r2, [r7, #27]
 8017422:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017424:	e7a6      	b.n	8017374 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017426:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017428:	68fa      	ldr	r2, [r7, #12]
 801742a:	69fb      	ldr	r3, [r7, #28]
 801742c:	441a      	add	r2, r3
 801742e:	683b      	ldr	r3, [r7, #0]
 8017430:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017432:	693b      	ldr	r3, [r7, #16]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d101      	bne.n	801743c <create_name+0xf4>
 8017438:	2306      	movs	r3, #6
 801743a:	e010      	b.n	801745e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801743c:	68bb      	ldr	r3, [r7, #8]
 801743e:	781b      	ldrb	r3, [r3, #0]
 8017440:	2be5      	cmp	r3, #229	; 0xe5
 8017442:	d102      	bne.n	801744a <create_name+0x102>
 8017444:	68bb      	ldr	r3, [r7, #8]
 8017446:	2205      	movs	r2, #5
 8017448:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801744a:	7efb      	ldrb	r3, [r7, #27]
 801744c:	2b20      	cmp	r3, #32
 801744e:	d801      	bhi.n	8017454 <create_name+0x10c>
 8017450:	2204      	movs	r2, #4
 8017452:	e000      	b.n	8017456 <create_name+0x10e>
 8017454:	2200      	movs	r2, #0
 8017456:	68bb      	ldr	r3, [r7, #8]
 8017458:	330b      	adds	r3, #11
 801745a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801745c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801745e:	4618      	mov	r0, r3
 8017460:	3720      	adds	r7, #32
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}
 8017466:	bf00      	nop
 8017468:	0801bbc4 	.word	0x0801bbc4
 801746c:	0801b478 	.word	0x0801b478

08017470 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b086      	sub	sp, #24
 8017474:	af00      	add	r7, sp, #0
 8017476:	6078      	str	r0, [r7, #4]
 8017478:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801747e:	693b      	ldr	r3, [r7, #16]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017484:	e002      	b.n	801748c <follow_path+0x1c>
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	3301      	adds	r3, #1
 801748a:	603b      	str	r3, [r7, #0]
 801748c:	683b      	ldr	r3, [r7, #0]
 801748e:	781b      	ldrb	r3, [r3, #0]
 8017490:	2b2f      	cmp	r3, #47	; 0x2f
 8017492:	d0f8      	beq.n	8017486 <follow_path+0x16>
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	781b      	ldrb	r3, [r3, #0]
 8017498:	2b5c      	cmp	r3, #92	; 0x5c
 801749a:	d0f4      	beq.n	8017486 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801749c:	693b      	ldr	r3, [r7, #16]
 801749e:	2200      	movs	r2, #0
 80174a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80174a2:	683b      	ldr	r3, [r7, #0]
 80174a4:	781b      	ldrb	r3, [r3, #0]
 80174a6:	2b1f      	cmp	r3, #31
 80174a8:	d80a      	bhi.n	80174c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	2280      	movs	r2, #128	; 0x80
 80174ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80174b2:	2100      	movs	r1, #0
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f7ff fcf9 	bl	8016eac <dir_sdi>
 80174ba:	4603      	mov	r3, r0
 80174bc:	75fb      	strb	r3, [r7, #23]
 80174be:	e043      	b.n	8017548 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80174c0:	463b      	mov	r3, r7
 80174c2:	4619      	mov	r1, r3
 80174c4:	6878      	ldr	r0, [r7, #4]
 80174c6:	f7ff ff3f 	bl	8017348 <create_name>
 80174ca:	4603      	mov	r3, r0
 80174cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80174ce:	7dfb      	ldrb	r3, [r7, #23]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d134      	bne.n	801753e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80174d4:	6878      	ldr	r0, [r7, #4]
 80174d6:	f7ff feaf 	bl	8017238 <dir_find>
 80174da:	4603      	mov	r3, r0
 80174dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80174e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80174e6:	7dfb      	ldrb	r3, [r7, #23]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d00a      	beq.n	8017502 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80174ec:	7dfb      	ldrb	r3, [r7, #23]
 80174ee:	2b04      	cmp	r3, #4
 80174f0:	d127      	bne.n	8017542 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80174f2:	7afb      	ldrb	r3, [r7, #11]
 80174f4:	f003 0304 	and.w	r3, r3, #4
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d122      	bne.n	8017542 <follow_path+0xd2>
 80174fc:	2305      	movs	r3, #5
 80174fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017500:	e01f      	b.n	8017542 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017502:	7afb      	ldrb	r3, [r7, #11]
 8017504:	f003 0304 	and.w	r3, r3, #4
 8017508:	2b00      	cmp	r3, #0
 801750a:	d11c      	bne.n	8017546 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801750c:	693b      	ldr	r3, [r7, #16]
 801750e:	799b      	ldrb	r3, [r3, #6]
 8017510:	f003 0310 	and.w	r3, r3, #16
 8017514:	2b00      	cmp	r3, #0
 8017516:	d102      	bne.n	801751e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017518:	2305      	movs	r3, #5
 801751a:	75fb      	strb	r3, [r7, #23]
 801751c:	e014      	b.n	8017548 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	695b      	ldr	r3, [r3, #20]
 8017528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801752c:	4413      	add	r3, r2
 801752e:	4619      	mov	r1, r3
 8017530:	68f8      	ldr	r0, [r7, #12]
 8017532:	f7ff fe42 	bl	80171ba <ld_clust>
 8017536:	4602      	mov	r2, r0
 8017538:	693b      	ldr	r3, [r7, #16]
 801753a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801753c:	e7c0      	b.n	80174c0 <follow_path+0x50>
			if (res != FR_OK) break;
 801753e:	bf00      	nop
 8017540:	e002      	b.n	8017548 <follow_path+0xd8>
				break;
 8017542:	bf00      	nop
 8017544:	e000      	b.n	8017548 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017546:	bf00      	nop
			}
		}
	}

	return res;
 8017548:	7dfb      	ldrb	r3, [r7, #23]
}
 801754a:	4618      	mov	r0, r3
 801754c:	3718      	adds	r7, #24
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}

08017552 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017552:	b480      	push	{r7}
 8017554:	b087      	sub	sp, #28
 8017556:	af00      	add	r7, sp, #0
 8017558:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801755a:	f04f 33ff 	mov.w	r3, #4294967295
 801755e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d031      	beq.n	80175cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	617b      	str	r3, [r7, #20]
 801756e:	e002      	b.n	8017576 <get_ldnumber+0x24>
 8017570:	697b      	ldr	r3, [r7, #20]
 8017572:	3301      	adds	r3, #1
 8017574:	617b      	str	r3, [r7, #20]
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	781b      	ldrb	r3, [r3, #0]
 801757a:	2b20      	cmp	r3, #32
 801757c:	d903      	bls.n	8017586 <get_ldnumber+0x34>
 801757e:	697b      	ldr	r3, [r7, #20]
 8017580:	781b      	ldrb	r3, [r3, #0]
 8017582:	2b3a      	cmp	r3, #58	; 0x3a
 8017584:	d1f4      	bne.n	8017570 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017586:	697b      	ldr	r3, [r7, #20]
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	2b3a      	cmp	r3, #58	; 0x3a
 801758c:	d11c      	bne.n	80175c8 <get_ldnumber+0x76>
			tp = *path;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	1c5a      	adds	r2, r3, #1
 8017598:	60fa      	str	r2, [r7, #12]
 801759a:	781b      	ldrb	r3, [r3, #0]
 801759c:	3b30      	subs	r3, #48	; 0x30
 801759e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80175a0:	68bb      	ldr	r3, [r7, #8]
 80175a2:	2b09      	cmp	r3, #9
 80175a4:	d80e      	bhi.n	80175c4 <get_ldnumber+0x72>
 80175a6:	68fa      	ldr	r2, [r7, #12]
 80175a8:	697b      	ldr	r3, [r7, #20]
 80175aa:	429a      	cmp	r2, r3
 80175ac:	d10a      	bne.n	80175c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80175ae:	68bb      	ldr	r3, [r7, #8]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d107      	bne.n	80175c4 <get_ldnumber+0x72>
					vol = (int)i;
 80175b4:	68bb      	ldr	r3, [r7, #8]
 80175b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80175b8:	697b      	ldr	r3, [r7, #20]
 80175ba:	3301      	adds	r3, #1
 80175bc:	617b      	str	r3, [r7, #20]
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	697a      	ldr	r2, [r7, #20]
 80175c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80175c4:	693b      	ldr	r3, [r7, #16]
 80175c6:	e002      	b.n	80175ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80175c8:	2300      	movs	r3, #0
 80175ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80175cc:	693b      	ldr	r3, [r7, #16]
}
 80175ce:	4618      	mov	r0, r3
 80175d0:	371c      	adds	r7, #28
 80175d2:	46bd      	mov	sp, r7
 80175d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d8:	4770      	bx	lr
	...

080175dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b082      	sub	sp, #8
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
 80175e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	2200      	movs	r2, #0
 80175ea:	70da      	strb	r2, [r3, #3]
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	f04f 32ff 	mov.w	r2, #4294967295
 80175f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80175f4:	6839      	ldr	r1, [r7, #0]
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f7ff f8d8 	bl	80167ac <move_window>
 80175fc:	4603      	mov	r3, r0
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d001      	beq.n	8017606 <check_fs+0x2a>
 8017602:	2304      	movs	r3, #4
 8017604:	e038      	b.n	8017678 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	3330      	adds	r3, #48	; 0x30
 801760a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801760e:	4618      	mov	r0, r3
 8017610:	f7fe fe1c 	bl	801624c <ld_word>
 8017614:	4603      	mov	r3, r0
 8017616:	461a      	mov	r2, r3
 8017618:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801761c:	429a      	cmp	r2, r3
 801761e:	d001      	beq.n	8017624 <check_fs+0x48>
 8017620:	2303      	movs	r3, #3
 8017622:	e029      	b.n	8017678 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801762a:	2be9      	cmp	r3, #233	; 0xe9
 801762c:	d009      	beq.n	8017642 <check_fs+0x66>
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017634:	2beb      	cmp	r3, #235	; 0xeb
 8017636:	d11e      	bne.n	8017676 <check_fs+0x9a>
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801763e:	2b90      	cmp	r3, #144	; 0x90
 8017640:	d119      	bne.n	8017676 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	3330      	adds	r3, #48	; 0x30
 8017646:	3336      	adds	r3, #54	; 0x36
 8017648:	4618      	mov	r0, r3
 801764a:	f7fe fe17 	bl	801627c <ld_dword>
 801764e:	4603      	mov	r3, r0
 8017650:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017654:	4a0a      	ldr	r2, [pc, #40]	; (8017680 <check_fs+0xa4>)
 8017656:	4293      	cmp	r3, r2
 8017658:	d101      	bne.n	801765e <check_fs+0x82>
 801765a:	2300      	movs	r3, #0
 801765c:	e00c      	b.n	8017678 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	3330      	adds	r3, #48	; 0x30
 8017662:	3352      	adds	r3, #82	; 0x52
 8017664:	4618      	mov	r0, r3
 8017666:	f7fe fe09 	bl	801627c <ld_dword>
 801766a:	4603      	mov	r3, r0
 801766c:	4a05      	ldr	r2, [pc, #20]	; (8017684 <check_fs+0xa8>)
 801766e:	4293      	cmp	r3, r2
 8017670:	d101      	bne.n	8017676 <check_fs+0x9a>
 8017672:	2300      	movs	r3, #0
 8017674:	e000      	b.n	8017678 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017676:	2302      	movs	r3, #2
}
 8017678:	4618      	mov	r0, r3
 801767a:	3708      	adds	r7, #8
 801767c:	46bd      	mov	sp, r7
 801767e:	bd80      	pop	{r7, pc}
 8017680:	00544146 	.word	0x00544146
 8017684:	33544146 	.word	0x33544146

08017688 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b096      	sub	sp, #88	; 0x58
 801768c:	af00      	add	r7, sp, #0
 801768e:	60f8      	str	r0, [r7, #12]
 8017690:	60b9      	str	r1, [r7, #8]
 8017692:	4613      	mov	r3, r2
 8017694:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017696:	68bb      	ldr	r3, [r7, #8]
 8017698:	2200      	movs	r2, #0
 801769a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801769c:	68f8      	ldr	r0, [r7, #12]
 801769e:	f7ff ff58 	bl	8017552 <get_ldnumber>
 80176a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80176a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	da01      	bge.n	80176ae <find_volume+0x26>
 80176aa:	230b      	movs	r3, #11
 80176ac:	e22e      	b.n	8017b0c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80176ae:	4aa8      	ldr	r2, [pc, #672]	; (8017950 <find_volume+0x2c8>)
 80176b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80176b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80176b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d101      	bne.n	80176c2 <find_volume+0x3a>
 80176be:	230c      	movs	r3, #12
 80176c0:	e224      	b.n	8017b0c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80176c2:	68bb      	ldr	r3, [r7, #8]
 80176c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80176c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80176c8:	79fb      	ldrb	r3, [r7, #7]
 80176ca:	f023 0301 	bic.w	r3, r3, #1
 80176ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80176d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176d2:	781b      	ldrb	r3, [r3, #0]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d01a      	beq.n	801770e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80176d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176da:	785b      	ldrb	r3, [r3, #1]
 80176dc:	4618      	mov	r0, r3
 80176de:	f7fe fd17 	bl	8016110 <disk_status>
 80176e2:	4603      	mov	r3, r0
 80176e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80176e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80176ec:	f003 0301 	and.w	r3, r3, #1
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d10c      	bne.n	801770e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80176f4:	79fb      	ldrb	r3, [r7, #7]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d007      	beq.n	801770a <find_volume+0x82>
 80176fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80176fe:	f003 0304 	and.w	r3, r3, #4
 8017702:	2b00      	cmp	r3, #0
 8017704:	d001      	beq.n	801770a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8017706:	230a      	movs	r3, #10
 8017708:	e200      	b.n	8017b0c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 801770a:	2300      	movs	r3, #0
 801770c:	e1fe      	b.n	8017b0c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017710:	2200      	movs	r2, #0
 8017712:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017716:	b2da      	uxtb	r2, r3
 8017718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801771a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801771e:	785b      	ldrb	r3, [r3, #1]
 8017720:	4618      	mov	r0, r3
 8017722:	f7fe fd0f 	bl	8016144 <disk_initialize>
 8017726:	4603      	mov	r3, r0
 8017728:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801772c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017730:	f003 0301 	and.w	r3, r3, #1
 8017734:	2b00      	cmp	r3, #0
 8017736:	d001      	beq.n	801773c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017738:	2303      	movs	r3, #3
 801773a:	e1e7      	b.n	8017b0c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801773c:	79fb      	ldrb	r3, [r7, #7]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d007      	beq.n	8017752 <find_volume+0xca>
 8017742:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017746:	f003 0304 	and.w	r3, r3, #4
 801774a:	2b00      	cmp	r3, #0
 801774c:	d001      	beq.n	8017752 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801774e:	230a      	movs	r3, #10
 8017750:	e1dc      	b.n	8017b0c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017752:	2300      	movs	r3, #0
 8017754:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017756:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017758:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801775a:	f7ff ff3f 	bl	80175dc <check_fs>
 801775e:	4603      	mov	r3, r0
 8017760:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017768:	2b02      	cmp	r3, #2
 801776a:	d14b      	bne.n	8017804 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801776c:	2300      	movs	r3, #0
 801776e:	643b      	str	r3, [r7, #64]	; 0x40
 8017770:	e01f      	b.n	80177b2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017774:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801777a:	011b      	lsls	r3, r3, #4
 801777c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017780:	4413      	add	r3, r2
 8017782:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017786:	3304      	adds	r3, #4
 8017788:	781b      	ldrb	r3, [r3, #0]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d006      	beq.n	801779c <find_volume+0x114>
 801778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017790:	3308      	adds	r3, #8
 8017792:	4618      	mov	r0, r3
 8017794:	f7fe fd72 	bl	801627c <ld_dword>
 8017798:	4602      	mov	r2, r0
 801779a:	e000      	b.n	801779e <find_volume+0x116>
 801779c:	2200      	movs	r2, #0
 801779e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177a0:	009b      	lsls	r3, r3, #2
 80177a2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80177a6:	440b      	add	r3, r1
 80177a8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80177ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177ae:	3301      	adds	r3, #1
 80177b0:	643b      	str	r3, [r7, #64]	; 0x40
 80177b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177b4:	2b03      	cmp	r3, #3
 80177b6:	d9dc      	bls.n	8017772 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80177b8:	2300      	movs	r3, #0
 80177ba:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80177bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d002      	beq.n	80177c8 <find_volume+0x140>
 80177c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177c4:	3b01      	subs	r3, #1
 80177c6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80177c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177ca:	009b      	lsls	r3, r3, #2
 80177cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80177d0:	4413      	add	r3, r2
 80177d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80177d6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80177d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d005      	beq.n	80177ea <find_volume+0x162>
 80177de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80177e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80177e2:	f7ff fefb 	bl	80175dc <check_fs>
 80177e6:	4603      	mov	r3, r0
 80177e8:	e000      	b.n	80177ec <find_volume+0x164>
 80177ea:	2303      	movs	r3, #3
 80177ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80177f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80177f4:	2b01      	cmp	r3, #1
 80177f6:	d905      	bls.n	8017804 <find_volume+0x17c>
 80177f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177fa:	3301      	adds	r3, #1
 80177fc:	643b      	str	r3, [r7, #64]	; 0x40
 80177fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017800:	2b03      	cmp	r3, #3
 8017802:	d9e1      	bls.n	80177c8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017808:	2b04      	cmp	r3, #4
 801780a:	d101      	bne.n	8017810 <find_volume+0x188>
 801780c:	2301      	movs	r3, #1
 801780e:	e17d      	b.n	8017b0c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017810:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017814:	2b01      	cmp	r3, #1
 8017816:	d901      	bls.n	801781c <find_volume+0x194>
 8017818:	230d      	movs	r3, #13
 801781a:	e177      	b.n	8017b0c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801781e:	3330      	adds	r3, #48	; 0x30
 8017820:	330b      	adds	r3, #11
 8017822:	4618      	mov	r0, r3
 8017824:	f7fe fd12 	bl	801624c <ld_word>
 8017828:	4603      	mov	r3, r0
 801782a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801782e:	d001      	beq.n	8017834 <find_volume+0x1ac>
 8017830:	230d      	movs	r3, #13
 8017832:	e16b      	b.n	8017b0c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017836:	3330      	adds	r3, #48	; 0x30
 8017838:	3316      	adds	r3, #22
 801783a:	4618      	mov	r0, r3
 801783c:	f7fe fd06 	bl	801624c <ld_word>
 8017840:	4603      	mov	r3, r0
 8017842:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017846:	2b00      	cmp	r3, #0
 8017848:	d106      	bne.n	8017858 <find_volume+0x1d0>
 801784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801784c:	3330      	adds	r3, #48	; 0x30
 801784e:	3324      	adds	r3, #36	; 0x24
 8017850:	4618      	mov	r0, r3
 8017852:	f7fe fd13 	bl	801627c <ld_dword>
 8017856:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801785a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801785c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017860:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8017864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017866:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801786a:	789b      	ldrb	r3, [r3, #2]
 801786c:	2b01      	cmp	r3, #1
 801786e:	d005      	beq.n	801787c <find_volume+0x1f4>
 8017870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017872:	789b      	ldrb	r3, [r3, #2]
 8017874:	2b02      	cmp	r3, #2
 8017876:	d001      	beq.n	801787c <find_volume+0x1f4>
 8017878:	230d      	movs	r3, #13
 801787a:	e147      	b.n	8017b0c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801787e:	789b      	ldrb	r3, [r3, #2]
 8017880:	461a      	mov	r2, r3
 8017882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017884:	fb02 f303 	mul.w	r3, r2, r3
 8017888:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801788c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017890:	b29a      	uxth	r2, r3
 8017892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017894:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017898:	895b      	ldrh	r3, [r3, #10]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d008      	beq.n	80178b0 <find_volume+0x228>
 801789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178a0:	895b      	ldrh	r3, [r3, #10]
 80178a2:	461a      	mov	r2, r3
 80178a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178a6:	895b      	ldrh	r3, [r3, #10]
 80178a8:	3b01      	subs	r3, #1
 80178aa:	4013      	ands	r3, r2
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d001      	beq.n	80178b4 <find_volume+0x22c>
 80178b0:	230d      	movs	r3, #13
 80178b2:	e12b      	b.n	8017b0c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80178b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178b6:	3330      	adds	r3, #48	; 0x30
 80178b8:	3311      	adds	r3, #17
 80178ba:	4618      	mov	r0, r3
 80178bc:	f7fe fcc6 	bl	801624c <ld_word>
 80178c0:	4603      	mov	r3, r0
 80178c2:	461a      	mov	r2, r3
 80178c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80178c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178ca:	891b      	ldrh	r3, [r3, #8]
 80178cc:	f003 030f 	and.w	r3, r3, #15
 80178d0:	b29b      	uxth	r3, r3
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d001      	beq.n	80178da <find_volume+0x252>
 80178d6:	230d      	movs	r3, #13
 80178d8:	e118      	b.n	8017b0c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80178da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178dc:	3330      	adds	r3, #48	; 0x30
 80178de:	3313      	adds	r3, #19
 80178e0:	4618      	mov	r0, r3
 80178e2:	f7fe fcb3 	bl	801624c <ld_word>
 80178e6:	4603      	mov	r3, r0
 80178e8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80178ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d106      	bne.n	80178fe <find_volume+0x276>
 80178f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178f2:	3330      	adds	r3, #48	; 0x30
 80178f4:	3320      	adds	r3, #32
 80178f6:	4618      	mov	r0, r3
 80178f8:	f7fe fcc0 	bl	801627c <ld_dword>
 80178fc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80178fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017900:	3330      	adds	r3, #48	; 0x30
 8017902:	330e      	adds	r3, #14
 8017904:	4618      	mov	r0, r3
 8017906:	f7fe fca1 	bl	801624c <ld_word>
 801790a:	4603      	mov	r3, r0
 801790c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801790e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017910:	2b00      	cmp	r3, #0
 8017912:	d101      	bne.n	8017918 <find_volume+0x290>
 8017914:	230d      	movs	r3, #13
 8017916:	e0f9      	b.n	8017b0c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017918:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801791a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801791c:	4413      	add	r3, r2
 801791e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017920:	8912      	ldrh	r2, [r2, #8]
 8017922:	0912      	lsrs	r2, r2, #4
 8017924:	b292      	uxth	r2, r2
 8017926:	4413      	add	r3, r2
 8017928:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801792a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801792c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801792e:	429a      	cmp	r2, r3
 8017930:	d201      	bcs.n	8017936 <find_volume+0x2ae>
 8017932:	230d      	movs	r3, #13
 8017934:	e0ea      	b.n	8017b0c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801793a:	1ad3      	subs	r3, r2, r3
 801793c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801793e:	8952      	ldrh	r2, [r2, #10]
 8017940:	fbb3 f3f2 	udiv	r3, r3, r2
 8017944:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017948:	2b00      	cmp	r3, #0
 801794a:	d103      	bne.n	8017954 <find_volume+0x2cc>
 801794c:	230d      	movs	r3, #13
 801794e:	e0dd      	b.n	8017b0c <find_volume+0x484>
 8017950:	200002a0 	.word	0x200002a0
		fmt = FS_FAT32;
 8017954:	2303      	movs	r3, #3
 8017956:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801795c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017960:	4293      	cmp	r3, r2
 8017962:	d802      	bhi.n	801796a <find_volume+0x2e2>
 8017964:	2302      	movs	r3, #2
 8017966:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017970:	4293      	cmp	r3, r2
 8017972:	d802      	bhi.n	801797a <find_volume+0x2f2>
 8017974:	2301      	movs	r3, #1
 8017976:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801797c:	1c9a      	adds	r2, r3, #2
 801797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017980:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8017982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017984:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017986:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017988:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801798a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801798c:	441a      	add	r2, r3
 801798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017990:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8017992:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017996:	441a      	add	r2, r3
 8017998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801799a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 801799c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80179a0:	2b03      	cmp	r3, #3
 80179a2:	d11e      	bne.n	80179e2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80179a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179a6:	3330      	adds	r3, #48	; 0x30
 80179a8:	332a      	adds	r3, #42	; 0x2a
 80179aa:	4618      	mov	r0, r3
 80179ac:	f7fe fc4e 	bl	801624c <ld_word>
 80179b0:	4603      	mov	r3, r0
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d001      	beq.n	80179ba <find_volume+0x332>
 80179b6:	230d      	movs	r3, #13
 80179b8:	e0a8      	b.n	8017b0c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80179ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179bc:	891b      	ldrh	r3, [r3, #8]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d001      	beq.n	80179c6 <find_volume+0x33e>
 80179c2:	230d      	movs	r3, #13
 80179c4:	e0a2      	b.n	8017b0c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80179c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179c8:	3330      	adds	r3, #48	; 0x30
 80179ca:	332c      	adds	r3, #44	; 0x2c
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7fe fc55 	bl	801627c <ld_dword>
 80179d2:	4602      	mov	r2, r0
 80179d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179d6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80179d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179da:	695b      	ldr	r3, [r3, #20]
 80179dc:	009b      	lsls	r3, r3, #2
 80179de:	647b      	str	r3, [r7, #68]	; 0x44
 80179e0:	e01f      	b.n	8017a22 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80179e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179e4:	891b      	ldrh	r3, [r3, #8]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d101      	bne.n	80179ee <find_volume+0x366>
 80179ea:	230d      	movs	r3, #13
 80179ec:	e08e      	b.n	8017b0c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80179ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179f0:	6a1a      	ldr	r2, [r3, #32]
 80179f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80179f4:	441a      	add	r2, r3
 80179f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179f8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80179fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80179fe:	2b02      	cmp	r3, #2
 8017a00:	d103      	bne.n	8017a0a <find_volume+0x382>
 8017a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a04:	695b      	ldr	r3, [r3, #20]
 8017a06:	005b      	lsls	r3, r3, #1
 8017a08:	e00a      	b.n	8017a20 <find_volume+0x398>
 8017a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a0c:	695a      	ldr	r2, [r3, #20]
 8017a0e:	4613      	mov	r3, r2
 8017a10:	005b      	lsls	r3, r3, #1
 8017a12:	4413      	add	r3, r2
 8017a14:	085a      	lsrs	r2, r3, #1
 8017a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a18:	695b      	ldr	r3, [r3, #20]
 8017a1a:	f003 0301 	and.w	r3, r3, #1
 8017a1e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017a20:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a24:	699a      	ldr	r2, [r3, #24]
 8017a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a28:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017a2c:	0a5b      	lsrs	r3, r3, #9
 8017a2e:	429a      	cmp	r2, r3
 8017a30:	d201      	bcs.n	8017a36 <find_volume+0x3ae>
 8017a32:	230d      	movs	r3, #13
 8017a34:	e06a      	b.n	8017b0c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a38:	f04f 32ff 	mov.w	r2, #4294967295
 8017a3c:	611a      	str	r2, [r3, #16]
 8017a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a40:	691a      	ldr	r2, [r3, #16]
 8017a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a44:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8017a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a48:	2280      	movs	r2, #128	; 0x80
 8017a4a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a50:	2b03      	cmp	r3, #3
 8017a52:	d149      	bne.n	8017ae8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a56:	3330      	adds	r3, #48	; 0x30
 8017a58:	3330      	adds	r3, #48	; 0x30
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	f7fe fbf6 	bl	801624c <ld_word>
 8017a60:	4603      	mov	r3, r0
 8017a62:	2b01      	cmp	r3, #1
 8017a64:	d140      	bne.n	8017ae8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a68:	3301      	adds	r3, #1
 8017a6a:	4619      	mov	r1, r3
 8017a6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017a6e:	f7fe fe9d 	bl	80167ac <move_window>
 8017a72:	4603      	mov	r3, r0
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d137      	bne.n	8017ae8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8017a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a80:	3330      	adds	r3, #48	; 0x30
 8017a82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017a86:	4618      	mov	r0, r3
 8017a88:	f7fe fbe0 	bl	801624c <ld_word>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	461a      	mov	r2, r3
 8017a90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d127      	bne.n	8017ae8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a9a:	3330      	adds	r3, #48	; 0x30
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f7fe fbed 	bl	801627c <ld_dword>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	4a1b      	ldr	r2, [pc, #108]	; (8017b14 <find_volume+0x48c>)
 8017aa6:	4293      	cmp	r3, r2
 8017aa8:	d11e      	bne.n	8017ae8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aac:	3330      	adds	r3, #48	; 0x30
 8017aae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7fe fbe2 	bl	801627c <ld_dword>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	4a17      	ldr	r2, [pc, #92]	; (8017b18 <find_volume+0x490>)
 8017abc:	4293      	cmp	r3, r2
 8017abe:	d113      	bne.n	8017ae8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ac2:	3330      	adds	r3, #48	; 0x30
 8017ac4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f7fe fbd7 	bl	801627c <ld_dword>
 8017ace:	4602      	mov	r2, r0
 8017ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ad2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8017ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ad6:	3330      	adds	r3, #48	; 0x30
 8017ad8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017adc:	4618      	mov	r0, r3
 8017ade:	f7fe fbcd 	bl	801627c <ld_dword>
 8017ae2:	4602      	mov	r2, r0
 8017ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ae6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017aee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017af0:	4b0a      	ldr	r3, [pc, #40]	; (8017b1c <find_volume+0x494>)
 8017af2:	881b      	ldrh	r3, [r3, #0]
 8017af4:	3301      	adds	r3, #1
 8017af6:	b29a      	uxth	r2, r3
 8017af8:	4b08      	ldr	r3, [pc, #32]	; (8017b1c <find_volume+0x494>)
 8017afa:	801a      	strh	r2, [r3, #0]
 8017afc:	4b07      	ldr	r3, [pc, #28]	; (8017b1c <find_volume+0x494>)
 8017afe:	881a      	ldrh	r2, [r3, #0]
 8017b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b02:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017b04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017b06:	f7fe fde9 	bl	80166dc <clear_lock>
#endif
	return FR_OK;
 8017b0a:	2300      	movs	r3, #0
}
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	3758      	adds	r7, #88	; 0x58
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}
 8017b14:	41615252 	.word	0x41615252
 8017b18:	61417272 	.word	0x61417272
 8017b1c:	200002a4 	.word	0x200002a4

08017b20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	b084      	sub	sp, #16
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
 8017b28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017b2a:	2309      	movs	r3, #9
 8017b2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d01c      	beq.n	8017b6e <validate+0x4e>
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d018      	beq.n	8017b6e <validate+0x4e>
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	781b      	ldrb	r3, [r3, #0]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d013      	beq.n	8017b6e <validate+0x4e>
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	889a      	ldrh	r2, [r3, #4]
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	88db      	ldrh	r3, [r3, #6]
 8017b50:	429a      	cmp	r2, r3
 8017b52:	d10c      	bne.n	8017b6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	785b      	ldrb	r3, [r3, #1]
 8017b5a:	4618      	mov	r0, r3
 8017b5c:	f7fe fad8 	bl	8016110 <disk_status>
 8017b60:	4603      	mov	r3, r0
 8017b62:	f003 0301 	and.w	r3, r3, #1
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d101      	bne.n	8017b6e <validate+0x4e>
			res = FR_OK;
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017b6e:	7bfb      	ldrb	r3, [r7, #15]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d102      	bne.n	8017b7a <validate+0x5a>
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	e000      	b.n	8017b7c <validate+0x5c>
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	683a      	ldr	r2, [r7, #0]
 8017b7e:	6013      	str	r3, [r2, #0]
	return res;
 8017b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	3710      	adds	r7, #16
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}
	...

08017b8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b088      	sub	sp, #32
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	60f8      	str	r0, [r7, #12]
 8017b94:	60b9      	str	r1, [r7, #8]
 8017b96:	4613      	mov	r3, r2
 8017b98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017b9a:	68bb      	ldr	r3, [r7, #8]
 8017b9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017b9e:	f107 0310 	add.w	r3, r7, #16
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f7ff fcd5 	bl	8017552 <get_ldnumber>
 8017ba8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017baa:	69fb      	ldr	r3, [r7, #28]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	da01      	bge.n	8017bb4 <f_mount+0x28>
 8017bb0:	230b      	movs	r3, #11
 8017bb2:	e02b      	b.n	8017c0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017bb4:	4a17      	ldr	r2, [pc, #92]	; (8017c14 <f_mount+0x88>)
 8017bb6:	69fb      	ldr	r3, [r7, #28]
 8017bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017bbc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8017bbe:	69bb      	ldr	r3, [r7, #24]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d005      	beq.n	8017bd0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017bc4:	69b8      	ldr	r0, [r7, #24]
 8017bc6:	f7fe fd89 	bl	80166dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017bca:	69bb      	ldr	r3, [r7, #24]
 8017bcc:	2200      	movs	r2, #0
 8017bce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d002      	beq.n	8017bdc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	2200      	movs	r2, #0
 8017bda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017bdc:	68fa      	ldr	r2, [r7, #12]
 8017bde:	490d      	ldr	r1, [pc, #52]	; (8017c14 <f_mount+0x88>)
 8017be0:	69fb      	ldr	r3, [r7, #28]
 8017be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d002      	beq.n	8017bf2 <f_mount+0x66>
 8017bec:	79fb      	ldrb	r3, [r7, #7]
 8017bee:	2b01      	cmp	r3, #1
 8017bf0:	d001      	beq.n	8017bf6 <f_mount+0x6a>
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	e00a      	b.n	8017c0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017bf6:	f107 010c 	add.w	r1, r7, #12
 8017bfa:	f107 0308 	add.w	r3, r7, #8
 8017bfe:	2200      	movs	r2, #0
 8017c00:	4618      	mov	r0, r3
 8017c02:	f7ff fd41 	bl	8017688 <find_volume>
 8017c06:	4603      	mov	r3, r0
 8017c08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	3720      	adds	r7, #32
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}
 8017c14:	200002a0 	.word	0x200002a0

08017c18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b098      	sub	sp, #96	; 0x60
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	60f8      	str	r0, [r7, #12]
 8017c20:	60b9      	str	r1, [r7, #8]
 8017c22:	4613      	mov	r3, r2
 8017c24:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d101      	bne.n	8017c30 <f_open+0x18>
 8017c2c:	2309      	movs	r3, #9
 8017c2e:	e1ad      	b.n	8017f8c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017c30:	79fb      	ldrb	r3, [r7, #7]
 8017c32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017c36:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017c38:	79fa      	ldrb	r2, [r7, #7]
 8017c3a:	f107 0110 	add.w	r1, r7, #16
 8017c3e:	f107 0308 	add.w	r3, r7, #8
 8017c42:	4618      	mov	r0, r3
 8017c44:	f7ff fd20 	bl	8017688 <find_volume>
 8017c48:	4603      	mov	r3, r0
 8017c4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8017c4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	f040 8191 	bne.w	8017f7a <f_open+0x362>
		dj.obj.fs = fs;
 8017c58:	693b      	ldr	r3, [r7, #16]
 8017c5a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017c5c:	68ba      	ldr	r2, [r7, #8]
 8017c5e:	f107 0314 	add.w	r3, r7, #20
 8017c62:	4611      	mov	r1, r2
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7ff fc03 	bl	8017470 <follow_path>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017c70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d11a      	bne.n	8017cae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017c78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017c7c:	b25b      	sxtb	r3, r3
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	da03      	bge.n	8017c8a <f_open+0x72>
				res = FR_INVALID_NAME;
 8017c82:	2306      	movs	r3, #6
 8017c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017c88:	e011      	b.n	8017cae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017c8a:	79fb      	ldrb	r3, [r7, #7]
 8017c8c:	f023 0301 	bic.w	r3, r3, #1
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	bf14      	ite	ne
 8017c94:	2301      	movne	r3, #1
 8017c96:	2300      	moveq	r3, #0
 8017c98:	b2db      	uxtb	r3, r3
 8017c9a:	461a      	mov	r2, r3
 8017c9c:	f107 0314 	add.w	r3, r7, #20
 8017ca0:	4611      	mov	r1, r2
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7fe fbd2 	bl	801644c <chk_lock>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017cae:	79fb      	ldrb	r3, [r7, #7]
 8017cb0:	f003 031c 	and.w	r3, r3, #28
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d07f      	beq.n	8017db8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8017cb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d017      	beq.n	8017cf0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017cc4:	2b04      	cmp	r3, #4
 8017cc6:	d10e      	bne.n	8017ce6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017cc8:	f7fe fc1c 	bl	8016504 <enq_lock>
 8017ccc:	4603      	mov	r3, r0
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d006      	beq.n	8017ce0 <f_open+0xc8>
 8017cd2:	f107 0314 	add.w	r3, r7, #20
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7ff fb03 	bl	80172e2 <dir_register>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	e000      	b.n	8017ce2 <f_open+0xca>
 8017ce0:	2312      	movs	r3, #18
 8017ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017ce6:	79fb      	ldrb	r3, [r7, #7]
 8017ce8:	f043 0308 	orr.w	r3, r3, #8
 8017cec:	71fb      	strb	r3, [r7, #7]
 8017cee:	e010      	b.n	8017d12 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017cf0:	7ebb      	ldrb	r3, [r7, #26]
 8017cf2:	f003 0311 	and.w	r3, r3, #17
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d003      	beq.n	8017d02 <f_open+0xea>
					res = FR_DENIED;
 8017cfa:	2307      	movs	r3, #7
 8017cfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017d00:	e007      	b.n	8017d12 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017d02:	79fb      	ldrb	r3, [r7, #7]
 8017d04:	f003 0304 	and.w	r3, r3, #4
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d002      	beq.n	8017d12 <f_open+0xfa>
 8017d0c:	2308      	movs	r3, #8
 8017d0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017d12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d168      	bne.n	8017dec <f_open+0x1d4>
 8017d1a:	79fb      	ldrb	r3, [r7, #7]
 8017d1c:	f003 0308 	and.w	r3, r3, #8
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d063      	beq.n	8017dec <f_open+0x1d4>
				dw = GET_FATTIME();
 8017d24:	f7fe f888 	bl	8015e38 <get_fattime>
 8017d28:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8017d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d2c:	330e      	adds	r3, #14
 8017d2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7fe fae1 	bl	80162f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d38:	3316      	adds	r3, #22
 8017d3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f7fe fadb 	bl	80162f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d44:	330b      	adds	r3, #11
 8017d46:	2220      	movs	r2, #32
 8017d48:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017d4a:	693b      	ldr	r3, [r7, #16]
 8017d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017d4e:	4611      	mov	r1, r2
 8017d50:	4618      	mov	r0, r3
 8017d52:	f7ff fa32 	bl	80171ba <ld_clust>
 8017d56:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017d58:	693b      	ldr	r3, [r7, #16]
 8017d5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f7ff fa4a 	bl	80171f8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8017d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d66:	331c      	adds	r3, #28
 8017d68:	2100      	movs	r1, #0
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f7fe fac4 	bl	80162f8 <st_dword>
					fs->wflag = 1;
 8017d70:	693b      	ldr	r3, [r7, #16]
 8017d72:	2201      	movs	r2, #1
 8017d74:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8017d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d037      	beq.n	8017dec <f_open+0x1d4>
						dw = fs->winsect;
 8017d7c:	693b      	ldr	r3, [r7, #16]
 8017d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d80:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8017d82:	f107 0314 	add.w	r3, r7, #20
 8017d86:	2200      	movs	r2, #0
 8017d88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7fe ff5d 	bl	8016c4a <remove_chain>
 8017d90:	4603      	mov	r3, r0
 8017d92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8017d96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d126      	bne.n	8017dec <f_open+0x1d4>
							res = move_window(fs, dw);
 8017d9e:	693b      	ldr	r3, [r7, #16]
 8017da0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fe fd02 	bl	80167ac <move_window>
 8017da8:	4603      	mov	r3, r0
 8017daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8017dae:	693b      	ldr	r3, [r7, #16]
 8017db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017db2:	3a01      	subs	r2, #1
 8017db4:	60da      	str	r2, [r3, #12]
 8017db6:	e019      	b.n	8017dec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8017db8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d115      	bne.n	8017dec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8017dc0:	7ebb      	ldrb	r3, [r7, #26]
 8017dc2:	f003 0310 	and.w	r3, r3, #16
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d003      	beq.n	8017dd2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8017dca:	2304      	movs	r3, #4
 8017dcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017dd0:	e00c      	b.n	8017dec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8017dd2:	79fb      	ldrb	r3, [r7, #7]
 8017dd4:	f003 0302 	and.w	r3, r3, #2
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d007      	beq.n	8017dec <f_open+0x1d4>
 8017ddc:	7ebb      	ldrb	r3, [r7, #26]
 8017dde:	f003 0301 	and.w	r3, r3, #1
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d002      	beq.n	8017dec <f_open+0x1d4>
						res = FR_DENIED;
 8017de6:	2307      	movs	r3, #7
 8017de8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8017dec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d128      	bne.n	8017e46 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8017df4:	79fb      	ldrb	r3, [r7, #7]
 8017df6:	f003 0308 	and.w	r3, r3, #8
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d003      	beq.n	8017e06 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8017dfe:	79fb      	ldrb	r3, [r7, #7]
 8017e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e04:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8017e06:	693b      	ldr	r3, [r7, #16]
 8017e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8017e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017e14:	79fb      	ldrb	r3, [r7, #7]
 8017e16:	f023 0301 	bic.w	r3, r3, #1
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	bf14      	ite	ne
 8017e1e:	2301      	movne	r3, #1
 8017e20:	2300      	moveq	r3, #0
 8017e22:	b2db      	uxtb	r3, r3
 8017e24:	461a      	mov	r2, r3
 8017e26:	f107 0314 	add.w	r3, r7, #20
 8017e2a:	4611      	mov	r1, r2
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f7fe fb8b 	bl	8016548 <inc_lock>
 8017e32:	4602      	mov	r2, r0
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	691b      	ldr	r3, [r3, #16]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d102      	bne.n	8017e46 <f_open+0x22e>
 8017e40:	2302      	movs	r3, #2
 8017e42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8017e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	f040 8095 	bne.w	8017f7a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8017e50:	693b      	ldr	r3, [r7, #16]
 8017e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017e54:	4611      	mov	r1, r2
 8017e56:	4618      	mov	r0, r3
 8017e58:	f7ff f9af 	bl	80171ba <ld_clust>
 8017e5c:	4602      	mov	r2, r0
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8017e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e64:	331c      	adds	r3, #28
 8017e66:	4618      	mov	r0, r3
 8017e68:	f7fe fa08 	bl	801627c <ld_dword>
 8017e6c:	4602      	mov	r2, r0
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	2200      	movs	r2, #0
 8017e76:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8017e78:	693a      	ldr	r2, [r7, #16]
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8017e7e:	693b      	ldr	r3, [r7, #16]
 8017e80:	88da      	ldrh	r2, [r3, #6]
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	79fa      	ldrb	r2, [r7, #7]
 8017e8a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	2200      	movs	r2, #0
 8017e90:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	2200      	movs	r2, #0
 8017e96:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	3330      	adds	r3, #48	; 0x30
 8017ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017ea6:	2100      	movs	r1, #0
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f7fe fa72 	bl	8016392 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8017eae:	79fb      	ldrb	r3, [r7, #7]
 8017eb0:	f003 0320 	and.w	r3, r3, #32
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d060      	beq.n	8017f7a <f_open+0x362>
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	68db      	ldr	r3, [r3, #12]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d05c      	beq.n	8017f7a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	68da      	ldr	r2, [r3, #12]
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017ec8:	693b      	ldr	r3, [r7, #16]
 8017eca:	895b      	ldrh	r3, [r3, #10]
 8017ecc:	025b      	lsls	r3, r3, #9
 8017ece:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	689b      	ldr	r3, [r3, #8]
 8017ed4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	68db      	ldr	r3, [r3, #12]
 8017eda:	657b      	str	r3, [r7, #84]	; 0x54
 8017edc:	e016      	b.n	8017f0c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017ee2:	4618      	mov	r0, r3
 8017ee4:	f7fe fd1d 	bl	8016922 <get_fat>
 8017ee8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8017eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017eec:	2b01      	cmp	r3, #1
 8017eee:	d802      	bhi.n	8017ef6 <f_open+0x2de>
 8017ef0:	2302      	movs	r3, #2
 8017ef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017efc:	d102      	bne.n	8017f04 <f_open+0x2ec>
 8017efe:	2301      	movs	r3, #1
 8017f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017f04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f08:	1ad3      	subs	r3, r2, r3
 8017f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8017f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d103      	bne.n	8017f1c <f_open+0x304>
 8017f14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f18:	429a      	cmp	r2, r3
 8017f1a:	d8e0      	bhi.n	8017ede <f_open+0x2c6>
				}
				fp->clust = clst;
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017f20:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8017f22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d127      	bne.n	8017f7a <f_open+0x362>
 8017f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d022      	beq.n	8017f7a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8017f34:	693b      	ldr	r3, [r7, #16]
 8017f36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f7fe fcd3 	bl	80168e4 <clust2sect>
 8017f3e:	6478      	str	r0, [r7, #68]	; 0x44
 8017f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d103      	bne.n	8017f4e <f_open+0x336>
						res = FR_INT_ERR;
 8017f46:	2302      	movs	r3, #2
 8017f48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017f4c:	e015      	b.n	8017f7a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8017f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f50:	0a5a      	lsrs	r2, r3, #9
 8017f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f54:	441a      	add	r2, r3
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017f5a:	693b      	ldr	r3, [r7, #16]
 8017f5c:	7858      	ldrb	r0, [r3, #1]
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	6a1a      	ldr	r2, [r3, #32]
 8017f68:	2301      	movs	r3, #1
 8017f6a:	f7fe f911 	bl	8016190 <disk_read>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d002      	beq.n	8017f7a <f_open+0x362>
 8017f74:	2301      	movs	r3, #1
 8017f76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d002      	beq.n	8017f88 <f_open+0x370>
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	2200      	movs	r2, #0
 8017f86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	3760      	adds	r7, #96	; 0x60
 8017f90:	46bd      	mov	sp, r7
 8017f92:	bd80      	pop	{r7, pc}

08017f94 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b08e      	sub	sp, #56	; 0x38
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	60f8      	str	r0, [r7, #12]
 8017f9c:	60b9      	str	r1, [r7, #8]
 8017f9e:	607a      	str	r2, [r7, #4]
 8017fa0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8017fa2:	68bb      	ldr	r3, [r7, #8]
 8017fa4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8017fa6:	683b      	ldr	r3, [r7, #0]
 8017fa8:	2200      	movs	r2, #0
 8017faa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	f107 0214 	add.w	r2, r7, #20
 8017fb2:	4611      	mov	r1, r2
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f7ff fdb3 	bl	8017b20 <validate>
 8017fba:	4603      	mov	r3, r0
 8017fbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017fc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d107      	bne.n	8017fd8 <f_read+0x44>
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	7d5b      	ldrb	r3, [r3, #21]
 8017fcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8017fd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d002      	beq.n	8017fde <f_read+0x4a>
 8017fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017fdc:	e115      	b.n	801820a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	7d1b      	ldrb	r3, [r3, #20]
 8017fe2:	f003 0301 	and.w	r3, r3, #1
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d101      	bne.n	8017fee <f_read+0x5a>
 8017fea:	2307      	movs	r3, #7
 8017fec:	e10d      	b.n	801820a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	68da      	ldr	r2, [r3, #12]
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	699b      	ldr	r3, [r3, #24]
 8017ff6:	1ad3      	subs	r3, r2, r3
 8017ff8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8017ffa:	687a      	ldr	r2, [r7, #4]
 8017ffc:	6a3b      	ldr	r3, [r7, #32]
 8017ffe:	429a      	cmp	r2, r3
 8018000:	f240 80fe 	bls.w	8018200 <f_read+0x26c>
 8018004:	6a3b      	ldr	r3, [r7, #32]
 8018006:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8018008:	e0fa      	b.n	8018200 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	699b      	ldr	r3, [r3, #24]
 801800e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018012:	2b00      	cmp	r3, #0
 8018014:	f040 80c6 	bne.w	80181a4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	699b      	ldr	r3, [r3, #24]
 801801c:	0a5b      	lsrs	r3, r3, #9
 801801e:	697a      	ldr	r2, [r7, #20]
 8018020:	8952      	ldrh	r2, [r2, #10]
 8018022:	3a01      	subs	r2, #1
 8018024:	4013      	ands	r3, r2
 8018026:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8018028:	69fb      	ldr	r3, [r7, #28]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d12f      	bne.n	801808e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	699b      	ldr	r3, [r3, #24]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d103      	bne.n	801803e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	689b      	ldr	r3, [r3, #8]
 801803a:	633b      	str	r3, [r7, #48]	; 0x30
 801803c:	e013      	b.n	8018066 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018042:	2b00      	cmp	r3, #0
 8018044:	d007      	beq.n	8018056 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	699b      	ldr	r3, [r3, #24]
 801804a:	4619      	mov	r1, r3
 801804c:	68f8      	ldr	r0, [r7, #12]
 801804e:	f7fe fef9 	bl	8016e44 <clmt_clust>
 8018052:	6338      	str	r0, [r7, #48]	; 0x30
 8018054:	e007      	b.n	8018066 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8018056:	68fa      	ldr	r2, [r7, #12]
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	69db      	ldr	r3, [r3, #28]
 801805c:	4619      	mov	r1, r3
 801805e:	4610      	mov	r0, r2
 8018060:	f7fe fc5f 	bl	8016922 <get_fat>
 8018064:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8018066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018068:	2b01      	cmp	r3, #1
 801806a:	d804      	bhi.n	8018076 <f_read+0xe2>
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	2202      	movs	r2, #2
 8018070:	755a      	strb	r2, [r3, #21]
 8018072:	2302      	movs	r3, #2
 8018074:	e0c9      	b.n	801820a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801807c:	d104      	bne.n	8018088 <f_read+0xf4>
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	2201      	movs	r2, #1
 8018082:	755a      	strb	r2, [r3, #21]
 8018084:	2301      	movs	r3, #1
 8018086:	e0c0      	b.n	801820a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801808c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801808e:	697a      	ldr	r2, [r7, #20]
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	69db      	ldr	r3, [r3, #28]
 8018094:	4619      	mov	r1, r3
 8018096:	4610      	mov	r0, r2
 8018098:	f7fe fc24 	bl	80168e4 <clust2sect>
 801809c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801809e:	69bb      	ldr	r3, [r7, #24]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d104      	bne.n	80180ae <f_read+0x11a>
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	2202      	movs	r2, #2
 80180a8:	755a      	strb	r2, [r3, #21]
 80180aa:	2302      	movs	r3, #2
 80180ac:	e0ad      	b.n	801820a <f_read+0x276>
			sect += csect;
 80180ae:	69ba      	ldr	r2, [r7, #24]
 80180b0:	69fb      	ldr	r3, [r7, #28]
 80180b2:	4413      	add	r3, r2
 80180b4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	0a5b      	lsrs	r3, r3, #9
 80180ba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80180bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d039      	beq.n	8018136 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80180c2:	69fa      	ldr	r2, [r7, #28]
 80180c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c6:	4413      	add	r3, r2
 80180c8:	697a      	ldr	r2, [r7, #20]
 80180ca:	8952      	ldrh	r2, [r2, #10]
 80180cc:	4293      	cmp	r3, r2
 80180ce:	d905      	bls.n	80180dc <f_read+0x148>
					cc = fs->csize - csect;
 80180d0:	697b      	ldr	r3, [r7, #20]
 80180d2:	895b      	ldrh	r3, [r3, #10]
 80180d4:	461a      	mov	r2, r3
 80180d6:	69fb      	ldr	r3, [r7, #28]
 80180d8:	1ad3      	subs	r3, r2, r3
 80180da:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80180dc:	697b      	ldr	r3, [r7, #20]
 80180de:	7858      	ldrb	r0, [r3, #1]
 80180e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180e2:	69ba      	ldr	r2, [r7, #24]
 80180e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80180e6:	f7fe f853 	bl	8016190 <disk_read>
 80180ea:	4603      	mov	r3, r0
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d004      	beq.n	80180fa <f_read+0x166>
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	2201      	movs	r2, #1
 80180f4:	755a      	strb	r2, [r3, #21]
 80180f6:	2301      	movs	r3, #1
 80180f8:	e087      	b.n	801820a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	7d1b      	ldrb	r3, [r3, #20]
 80180fe:	b25b      	sxtb	r3, r3
 8018100:	2b00      	cmp	r3, #0
 8018102:	da14      	bge.n	801812e <f_read+0x19a>
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	6a1a      	ldr	r2, [r3, #32]
 8018108:	69bb      	ldr	r3, [r7, #24]
 801810a:	1ad3      	subs	r3, r2, r3
 801810c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801810e:	429a      	cmp	r2, r3
 8018110:	d90d      	bls.n	801812e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	6a1a      	ldr	r2, [r3, #32]
 8018116:	69bb      	ldr	r3, [r7, #24]
 8018118:	1ad3      	subs	r3, r2, r3
 801811a:	025b      	lsls	r3, r3, #9
 801811c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801811e:	18d0      	adds	r0, r2, r3
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	3330      	adds	r3, #48	; 0x30
 8018124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018128:	4619      	mov	r1, r3
 801812a:	f7fe f911 	bl	8016350 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018130:	025b      	lsls	r3, r3, #9
 8018132:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8018134:	e050      	b.n	80181d8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	6a1b      	ldr	r3, [r3, #32]
 801813a:	69ba      	ldr	r2, [r7, #24]
 801813c:	429a      	cmp	r2, r3
 801813e:	d02e      	beq.n	801819e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	7d1b      	ldrb	r3, [r3, #20]
 8018144:	b25b      	sxtb	r3, r3
 8018146:	2b00      	cmp	r3, #0
 8018148:	da18      	bge.n	801817c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801814a:	697b      	ldr	r3, [r7, #20]
 801814c:	7858      	ldrb	r0, [r3, #1]
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	6a1a      	ldr	r2, [r3, #32]
 8018158:	2301      	movs	r3, #1
 801815a:	f7fe f839 	bl	80161d0 <disk_write>
 801815e:	4603      	mov	r3, r0
 8018160:	2b00      	cmp	r3, #0
 8018162:	d004      	beq.n	801816e <f_read+0x1da>
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	2201      	movs	r2, #1
 8018168:	755a      	strb	r2, [r3, #21]
 801816a:	2301      	movs	r3, #1
 801816c:	e04d      	b.n	801820a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	7d1b      	ldrb	r3, [r3, #20]
 8018172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018176:	b2da      	uxtb	r2, r3
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801817c:	697b      	ldr	r3, [r7, #20]
 801817e:	7858      	ldrb	r0, [r3, #1]
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018186:	2301      	movs	r3, #1
 8018188:	69ba      	ldr	r2, [r7, #24]
 801818a:	f7fe f801 	bl	8016190 <disk_read>
 801818e:	4603      	mov	r3, r0
 8018190:	2b00      	cmp	r3, #0
 8018192:	d004      	beq.n	801819e <f_read+0x20a>
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	2201      	movs	r2, #1
 8018198:	755a      	strb	r2, [r3, #21]
 801819a:	2301      	movs	r3, #1
 801819c:	e035      	b.n	801820a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	69ba      	ldr	r2, [r7, #24]
 80181a2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	699b      	ldr	r3, [r3, #24]
 80181a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80181ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80181b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80181b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	429a      	cmp	r2, r3
 80181b8:	d901      	bls.n	80181be <f_read+0x22a>
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	699b      	ldr	r3, [r3, #24]
 80181c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80181cc:	4413      	add	r3, r2
 80181ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181d0:	4619      	mov	r1, r3
 80181d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181d4:	f7fe f8bc 	bl	8016350 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80181d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181dc:	4413      	add	r3, r2
 80181de:	627b      	str	r3, [r7, #36]	; 0x24
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	699a      	ldr	r2, [r3, #24]
 80181e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181e6:	441a      	add	r2, r3
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	619a      	str	r2, [r3, #24]
 80181ec:	683b      	ldr	r3, [r7, #0]
 80181ee:	681a      	ldr	r2, [r3, #0]
 80181f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181f2:	441a      	add	r2, r3
 80181f4:	683b      	ldr	r3, [r7, #0]
 80181f6:	601a      	str	r2, [r3, #0]
 80181f8:	687a      	ldr	r2, [r7, #4]
 80181fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181fc:	1ad3      	subs	r3, r2, r3
 80181fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	2b00      	cmp	r3, #0
 8018204:	f47f af01 	bne.w	801800a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8018208:	2300      	movs	r3, #0
}
 801820a:	4618      	mov	r0, r3
 801820c:	3738      	adds	r7, #56	; 0x38
 801820e:	46bd      	mov	sp, r7
 8018210:	bd80      	pop	{r7, pc}

08018212 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018212:	b580      	push	{r7, lr}
 8018214:	b086      	sub	sp, #24
 8018216:	af00      	add	r7, sp, #0
 8018218:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	f107 0208 	add.w	r2, r7, #8
 8018220:	4611      	mov	r1, r2
 8018222:	4618      	mov	r0, r3
 8018224:	f7ff fc7c 	bl	8017b20 <validate>
 8018228:	4603      	mov	r3, r0
 801822a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801822c:	7dfb      	ldrb	r3, [r7, #23]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d168      	bne.n	8018304 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	7d1b      	ldrb	r3, [r3, #20]
 8018236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801823a:	2b00      	cmp	r3, #0
 801823c:	d062      	beq.n	8018304 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	7d1b      	ldrb	r3, [r3, #20]
 8018242:	b25b      	sxtb	r3, r3
 8018244:	2b00      	cmp	r3, #0
 8018246:	da15      	bge.n	8018274 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018248:	68bb      	ldr	r3, [r7, #8]
 801824a:	7858      	ldrb	r0, [r3, #1]
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	6a1a      	ldr	r2, [r3, #32]
 8018256:	2301      	movs	r3, #1
 8018258:	f7fd ffba 	bl	80161d0 <disk_write>
 801825c:	4603      	mov	r3, r0
 801825e:	2b00      	cmp	r3, #0
 8018260:	d001      	beq.n	8018266 <f_sync+0x54>
 8018262:	2301      	movs	r3, #1
 8018264:	e04f      	b.n	8018306 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	7d1b      	ldrb	r3, [r3, #20]
 801826a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801826e:	b2da      	uxtb	r2, r3
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8018274:	f7fd fde0 	bl	8015e38 <get_fattime>
 8018278:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801827a:	68ba      	ldr	r2, [r7, #8]
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018280:	4619      	mov	r1, r3
 8018282:	4610      	mov	r0, r2
 8018284:	f7fe fa92 	bl	80167ac <move_window>
 8018288:	4603      	mov	r3, r0
 801828a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801828c:	7dfb      	ldrb	r3, [r7, #23]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d138      	bne.n	8018304 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018296:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	330b      	adds	r3, #11
 801829c:	781a      	ldrb	r2, [r3, #0]
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	330b      	adds	r3, #11
 80182a2:	f042 0220 	orr.w	r2, r2, #32
 80182a6:	b2d2      	uxtb	r2, r2
 80182a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	6818      	ldr	r0, [r3, #0]
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	689b      	ldr	r3, [r3, #8]
 80182b2:	461a      	mov	r2, r3
 80182b4:	68f9      	ldr	r1, [r7, #12]
 80182b6:	f7fe ff9f 	bl	80171f8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	f103 021c 	add.w	r2, r3, #28
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	68db      	ldr	r3, [r3, #12]
 80182c4:	4619      	mov	r1, r3
 80182c6:	4610      	mov	r0, r2
 80182c8:	f7fe f816 	bl	80162f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	3316      	adds	r3, #22
 80182d0:	6939      	ldr	r1, [r7, #16]
 80182d2:	4618      	mov	r0, r3
 80182d4:	f7fe f810 	bl	80162f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	3312      	adds	r3, #18
 80182dc:	2100      	movs	r1, #0
 80182de:	4618      	mov	r0, r3
 80182e0:	f7fd ffef 	bl	80162c2 <st_word>
					fs->wflag = 1;
 80182e4:	68bb      	ldr	r3, [r7, #8]
 80182e6:	2201      	movs	r2, #1
 80182e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80182ea:	68bb      	ldr	r3, [r7, #8]
 80182ec:	4618      	mov	r0, r3
 80182ee:	f7fe fa8b 	bl	8016808 <sync_fs>
 80182f2:	4603      	mov	r3, r0
 80182f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	7d1b      	ldrb	r3, [r3, #20]
 80182fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80182fe:	b2da      	uxtb	r2, r3
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8018304:	7dfb      	ldrb	r3, [r7, #23]
}
 8018306:	4618      	mov	r0, r3
 8018308:	3718      	adds	r7, #24
 801830a:	46bd      	mov	sp, r7
 801830c:	bd80      	pop	{r7, pc}

0801830e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801830e:	b580      	push	{r7, lr}
 8018310:	b084      	sub	sp, #16
 8018312:	af00      	add	r7, sp, #0
 8018314:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	f7ff ff7b 	bl	8018212 <f_sync>
 801831c:	4603      	mov	r3, r0
 801831e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8018320:	7bfb      	ldrb	r3, [r7, #15]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d118      	bne.n	8018358 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	f107 0208 	add.w	r2, r7, #8
 801832c:	4611      	mov	r1, r2
 801832e:	4618      	mov	r0, r3
 8018330:	f7ff fbf6 	bl	8017b20 <validate>
 8018334:	4603      	mov	r3, r0
 8018336:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8018338:	7bfb      	ldrb	r3, [r7, #15]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d10c      	bne.n	8018358 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	691b      	ldr	r3, [r3, #16]
 8018342:	4618      	mov	r0, r3
 8018344:	f7fe f98e 	bl	8016664 <dec_lock>
 8018348:	4603      	mov	r3, r0
 801834a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801834c:	7bfb      	ldrb	r3, [r7, #15]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d102      	bne.n	8018358 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	2200      	movs	r2, #0
 8018356:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8018358:	7bfb      	ldrb	r3, [r7, #15]
}
 801835a:	4618      	mov	r0, r3
 801835c:	3710      	adds	r7, #16
 801835e:	46bd      	mov	sp, r7
 8018360:	bd80      	pop	{r7, pc}
	...

08018364 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018364:	b480      	push	{r7}
 8018366:	b087      	sub	sp, #28
 8018368:	af00      	add	r7, sp, #0
 801836a:	60f8      	str	r0, [r7, #12]
 801836c:	60b9      	str	r1, [r7, #8]
 801836e:	4613      	mov	r3, r2
 8018370:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8018372:	2301      	movs	r3, #1
 8018374:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8018376:	2300      	movs	r3, #0
 8018378:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801837a:	4b1f      	ldr	r3, [pc, #124]	; (80183f8 <FATFS_LinkDriverEx+0x94>)
 801837c:	7a5b      	ldrb	r3, [r3, #9]
 801837e:	b2db      	uxtb	r3, r3
 8018380:	2b00      	cmp	r3, #0
 8018382:	d131      	bne.n	80183e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018384:	4b1c      	ldr	r3, [pc, #112]	; (80183f8 <FATFS_LinkDriverEx+0x94>)
 8018386:	7a5b      	ldrb	r3, [r3, #9]
 8018388:	b2db      	uxtb	r3, r3
 801838a:	461a      	mov	r2, r3
 801838c:	4b1a      	ldr	r3, [pc, #104]	; (80183f8 <FATFS_LinkDriverEx+0x94>)
 801838e:	2100      	movs	r1, #0
 8018390:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018392:	4b19      	ldr	r3, [pc, #100]	; (80183f8 <FATFS_LinkDriverEx+0x94>)
 8018394:	7a5b      	ldrb	r3, [r3, #9]
 8018396:	b2db      	uxtb	r3, r3
 8018398:	4a17      	ldr	r2, [pc, #92]	; (80183f8 <FATFS_LinkDriverEx+0x94>)
 801839a:	009b      	lsls	r3, r3, #2
 801839c:	4413      	add	r3, r2
 801839e:	68fa      	ldr	r2, [r7, #12]
 80183a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80183a2:	4b15      	ldr	r3, [pc, #84]	; (80183f8 <FATFS_LinkDriverEx+0x94>)
 80183a4:	7a5b      	ldrb	r3, [r3, #9]
 80183a6:	b2db      	uxtb	r3, r3
 80183a8:	461a      	mov	r2, r3
 80183aa:	4b13      	ldr	r3, [pc, #76]	; (80183f8 <FATFS_LinkDriverEx+0x94>)
 80183ac:	4413      	add	r3, r2
 80183ae:	79fa      	ldrb	r2, [r7, #7]
 80183b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80183b2:	4b11      	ldr	r3, [pc, #68]	; (80183f8 <FATFS_LinkDriverEx+0x94>)
 80183b4:	7a5b      	ldrb	r3, [r3, #9]
 80183b6:	b2db      	uxtb	r3, r3
 80183b8:	1c5a      	adds	r2, r3, #1
 80183ba:	b2d1      	uxtb	r1, r2
 80183bc:	4a0e      	ldr	r2, [pc, #56]	; (80183f8 <FATFS_LinkDriverEx+0x94>)
 80183be:	7251      	strb	r1, [r2, #9]
 80183c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80183c2:	7dbb      	ldrb	r3, [r7, #22]
 80183c4:	3330      	adds	r3, #48	; 0x30
 80183c6:	b2da      	uxtb	r2, r3
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80183cc:	68bb      	ldr	r3, [r7, #8]
 80183ce:	3301      	adds	r3, #1
 80183d0:	223a      	movs	r2, #58	; 0x3a
 80183d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80183d4:	68bb      	ldr	r3, [r7, #8]
 80183d6:	3302      	adds	r3, #2
 80183d8:	222f      	movs	r2, #47	; 0x2f
 80183da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	3303      	adds	r3, #3
 80183e0:	2200      	movs	r2, #0
 80183e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80183e4:	2300      	movs	r3, #0
 80183e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80183e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80183ea:	4618      	mov	r0, r3
 80183ec:	371c      	adds	r7, #28
 80183ee:	46bd      	mov	sp, r7
 80183f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f4:	4770      	bx	lr
 80183f6:	bf00      	nop
 80183f8:	200002c8 	.word	0x200002c8

080183fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b082      	sub	sp, #8
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
 8018404:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018406:	2200      	movs	r2, #0
 8018408:	6839      	ldr	r1, [r7, #0]
 801840a:	6878      	ldr	r0, [r7, #4]
 801840c:	f7ff ffaa 	bl	8018364 <FATFS_LinkDriverEx>
 8018410:	4603      	mov	r3, r0
}
 8018412:	4618      	mov	r0, r3
 8018414:	3708      	adds	r7, #8
 8018416:	46bd      	mov	sp, r7
 8018418:	bd80      	pop	{r7, pc}
	...

0801841c <__errno>:
 801841c:	4b01      	ldr	r3, [pc, #4]	; (8018424 <__errno+0x8>)
 801841e:	6818      	ldr	r0, [r3, #0]
 8018420:	4770      	bx	lr
 8018422:	bf00      	nop
 8018424:	2000002c 	.word	0x2000002c

08018428 <__sflush_r>:
 8018428:	898a      	ldrh	r2, [r1, #12]
 801842a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801842e:	4605      	mov	r5, r0
 8018430:	0710      	lsls	r0, r2, #28
 8018432:	460c      	mov	r4, r1
 8018434:	d458      	bmi.n	80184e8 <__sflush_r+0xc0>
 8018436:	684b      	ldr	r3, [r1, #4]
 8018438:	2b00      	cmp	r3, #0
 801843a:	dc05      	bgt.n	8018448 <__sflush_r+0x20>
 801843c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801843e:	2b00      	cmp	r3, #0
 8018440:	dc02      	bgt.n	8018448 <__sflush_r+0x20>
 8018442:	2000      	movs	r0, #0
 8018444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801844a:	2e00      	cmp	r6, #0
 801844c:	d0f9      	beq.n	8018442 <__sflush_r+0x1a>
 801844e:	2300      	movs	r3, #0
 8018450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018454:	682f      	ldr	r7, [r5, #0]
 8018456:	602b      	str	r3, [r5, #0]
 8018458:	d032      	beq.n	80184c0 <__sflush_r+0x98>
 801845a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801845c:	89a3      	ldrh	r3, [r4, #12]
 801845e:	075a      	lsls	r2, r3, #29
 8018460:	d505      	bpl.n	801846e <__sflush_r+0x46>
 8018462:	6863      	ldr	r3, [r4, #4]
 8018464:	1ac0      	subs	r0, r0, r3
 8018466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018468:	b10b      	cbz	r3, 801846e <__sflush_r+0x46>
 801846a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801846c:	1ac0      	subs	r0, r0, r3
 801846e:	2300      	movs	r3, #0
 8018470:	4602      	mov	r2, r0
 8018472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018474:	6a21      	ldr	r1, [r4, #32]
 8018476:	4628      	mov	r0, r5
 8018478:	47b0      	blx	r6
 801847a:	1c43      	adds	r3, r0, #1
 801847c:	89a3      	ldrh	r3, [r4, #12]
 801847e:	d106      	bne.n	801848e <__sflush_r+0x66>
 8018480:	6829      	ldr	r1, [r5, #0]
 8018482:	291d      	cmp	r1, #29
 8018484:	d82c      	bhi.n	80184e0 <__sflush_r+0xb8>
 8018486:	4a2a      	ldr	r2, [pc, #168]	; (8018530 <__sflush_r+0x108>)
 8018488:	40ca      	lsrs	r2, r1
 801848a:	07d6      	lsls	r6, r2, #31
 801848c:	d528      	bpl.n	80184e0 <__sflush_r+0xb8>
 801848e:	2200      	movs	r2, #0
 8018490:	6062      	str	r2, [r4, #4]
 8018492:	04d9      	lsls	r1, r3, #19
 8018494:	6922      	ldr	r2, [r4, #16]
 8018496:	6022      	str	r2, [r4, #0]
 8018498:	d504      	bpl.n	80184a4 <__sflush_r+0x7c>
 801849a:	1c42      	adds	r2, r0, #1
 801849c:	d101      	bne.n	80184a2 <__sflush_r+0x7a>
 801849e:	682b      	ldr	r3, [r5, #0]
 80184a0:	b903      	cbnz	r3, 80184a4 <__sflush_r+0x7c>
 80184a2:	6560      	str	r0, [r4, #84]	; 0x54
 80184a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184a6:	602f      	str	r7, [r5, #0]
 80184a8:	2900      	cmp	r1, #0
 80184aa:	d0ca      	beq.n	8018442 <__sflush_r+0x1a>
 80184ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184b0:	4299      	cmp	r1, r3
 80184b2:	d002      	beq.n	80184ba <__sflush_r+0x92>
 80184b4:	4628      	mov	r0, r5
 80184b6:	f000 fa11 	bl	80188dc <_free_r>
 80184ba:	2000      	movs	r0, #0
 80184bc:	6360      	str	r0, [r4, #52]	; 0x34
 80184be:	e7c1      	b.n	8018444 <__sflush_r+0x1c>
 80184c0:	6a21      	ldr	r1, [r4, #32]
 80184c2:	2301      	movs	r3, #1
 80184c4:	4628      	mov	r0, r5
 80184c6:	47b0      	blx	r6
 80184c8:	1c41      	adds	r1, r0, #1
 80184ca:	d1c7      	bne.n	801845c <__sflush_r+0x34>
 80184cc:	682b      	ldr	r3, [r5, #0]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d0c4      	beq.n	801845c <__sflush_r+0x34>
 80184d2:	2b1d      	cmp	r3, #29
 80184d4:	d001      	beq.n	80184da <__sflush_r+0xb2>
 80184d6:	2b16      	cmp	r3, #22
 80184d8:	d101      	bne.n	80184de <__sflush_r+0xb6>
 80184da:	602f      	str	r7, [r5, #0]
 80184dc:	e7b1      	b.n	8018442 <__sflush_r+0x1a>
 80184de:	89a3      	ldrh	r3, [r4, #12]
 80184e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184e4:	81a3      	strh	r3, [r4, #12]
 80184e6:	e7ad      	b.n	8018444 <__sflush_r+0x1c>
 80184e8:	690f      	ldr	r7, [r1, #16]
 80184ea:	2f00      	cmp	r7, #0
 80184ec:	d0a9      	beq.n	8018442 <__sflush_r+0x1a>
 80184ee:	0793      	lsls	r3, r2, #30
 80184f0:	680e      	ldr	r6, [r1, #0]
 80184f2:	bf08      	it	eq
 80184f4:	694b      	ldreq	r3, [r1, #20]
 80184f6:	600f      	str	r7, [r1, #0]
 80184f8:	bf18      	it	ne
 80184fa:	2300      	movne	r3, #0
 80184fc:	eba6 0807 	sub.w	r8, r6, r7
 8018500:	608b      	str	r3, [r1, #8]
 8018502:	f1b8 0f00 	cmp.w	r8, #0
 8018506:	dd9c      	ble.n	8018442 <__sflush_r+0x1a>
 8018508:	6a21      	ldr	r1, [r4, #32]
 801850a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801850c:	4643      	mov	r3, r8
 801850e:	463a      	mov	r2, r7
 8018510:	4628      	mov	r0, r5
 8018512:	47b0      	blx	r6
 8018514:	2800      	cmp	r0, #0
 8018516:	dc06      	bgt.n	8018526 <__sflush_r+0xfe>
 8018518:	89a3      	ldrh	r3, [r4, #12]
 801851a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801851e:	81a3      	strh	r3, [r4, #12]
 8018520:	f04f 30ff 	mov.w	r0, #4294967295
 8018524:	e78e      	b.n	8018444 <__sflush_r+0x1c>
 8018526:	4407      	add	r7, r0
 8018528:	eba8 0800 	sub.w	r8, r8, r0
 801852c:	e7e9      	b.n	8018502 <__sflush_r+0xda>
 801852e:	bf00      	nop
 8018530:	20400001 	.word	0x20400001

08018534 <_fflush_r>:
 8018534:	b538      	push	{r3, r4, r5, lr}
 8018536:	690b      	ldr	r3, [r1, #16]
 8018538:	4605      	mov	r5, r0
 801853a:	460c      	mov	r4, r1
 801853c:	b913      	cbnz	r3, 8018544 <_fflush_r+0x10>
 801853e:	2500      	movs	r5, #0
 8018540:	4628      	mov	r0, r5
 8018542:	bd38      	pop	{r3, r4, r5, pc}
 8018544:	b118      	cbz	r0, 801854e <_fflush_r+0x1a>
 8018546:	6983      	ldr	r3, [r0, #24]
 8018548:	b90b      	cbnz	r3, 801854e <_fflush_r+0x1a>
 801854a:	f000 f887 	bl	801865c <__sinit>
 801854e:	4b14      	ldr	r3, [pc, #80]	; (80185a0 <_fflush_r+0x6c>)
 8018550:	429c      	cmp	r4, r3
 8018552:	d11b      	bne.n	801858c <_fflush_r+0x58>
 8018554:	686c      	ldr	r4, [r5, #4]
 8018556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d0ef      	beq.n	801853e <_fflush_r+0xa>
 801855e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018560:	07d0      	lsls	r0, r2, #31
 8018562:	d404      	bmi.n	801856e <_fflush_r+0x3a>
 8018564:	0599      	lsls	r1, r3, #22
 8018566:	d402      	bmi.n	801856e <_fflush_r+0x3a>
 8018568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801856a:	f000 f93a 	bl	80187e2 <__retarget_lock_acquire_recursive>
 801856e:	4628      	mov	r0, r5
 8018570:	4621      	mov	r1, r4
 8018572:	f7ff ff59 	bl	8018428 <__sflush_r>
 8018576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018578:	07da      	lsls	r2, r3, #31
 801857a:	4605      	mov	r5, r0
 801857c:	d4e0      	bmi.n	8018540 <_fflush_r+0xc>
 801857e:	89a3      	ldrh	r3, [r4, #12]
 8018580:	059b      	lsls	r3, r3, #22
 8018582:	d4dd      	bmi.n	8018540 <_fflush_r+0xc>
 8018584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018586:	f000 f92d 	bl	80187e4 <__retarget_lock_release_recursive>
 801858a:	e7d9      	b.n	8018540 <_fflush_r+0xc>
 801858c:	4b05      	ldr	r3, [pc, #20]	; (80185a4 <_fflush_r+0x70>)
 801858e:	429c      	cmp	r4, r3
 8018590:	d101      	bne.n	8018596 <_fflush_r+0x62>
 8018592:	68ac      	ldr	r4, [r5, #8]
 8018594:	e7df      	b.n	8018556 <_fflush_r+0x22>
 8018596:	4b04      	ldr	r3, [pc, #16]	; (80185a8 <_fflush_r+0x74>)
 8018598:	429c      	cmp	r4, r3
 801859a:	bf08      	it	eq
 801859c:	68ec      	ldreq	r4, [r5, #12]
 801859e:	e7da      	b.n	8018556 <_fflush_r+0x22>
 80185a0:	0801bc64 	.word	0x0801bc64
 80185a4:	0801bc84 	.word	0x0801bc84
 80185a8:	0801bc44 	.word	0x0801bc44

080185ac <std>:
 80185ac:	2300      	movs	r3, #0
 80185ae:	b510      	push	{r4, lr}
 80185b0:	4604      	mov	r4, r0
 80185b2:	e9c0 3300 	strd	r3, r3, [r0]
 80185b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80185ba:	6083      	str	r3, [r0, #8]
 80185bc:	8181      	strh	r1, [r0, #12]
 80185be:	6643      	str	r3, [r0, #100]	; 0x64
 80185c0:	81c2      	strh	r2, [r0, #14]
 80185c2:	6183      	str	r3, [r0, #24]
 80185c4:	4619      	mov	r1, r3
 80185c6:	2208      	movs	r2, #8
 80185c8:	305c      	adds	r0, #92	; 0x5c
 80185ca:	f000 f97f 	bl	80188cc <memset>
 80185ce:	4b05      	ldr	r3, [pc, #20]	; (80185e4 <std+0x38>)
 80185d0:	6263      	str	r3, [r4, #36]	; 0x24
 80185d2:	4b05      	ldr	r3, [pc, #20]	; (80185e8 <std+0x3c>)
 80185d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80185d6:	4b05      	ldr	r3, [pc, #20]	; (80185ec <std+0x40>)
 80185d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80185da:	4b05      	ldr	r3, [pc, #20]	; (80185f0 <std+0x44>)
 80185dc:	6224      	str	r4, [r4, #32]
 80185de:	6323      	str	r3, [r4, #48]	; 0x30
 80185e0:	bd10      	pop	{r4, pc}
 80185e2:	bf00      	nop
 80185e4:	08019365 	.word	0x08019365
 80185e8:	08019387 	.word	0x08019387
 80185ec:	080193bf 	.word	0x080193bf
 80185f0:	080193e3 	.word	0x080193e3

080185f4 <_cleanup_r>:
 80185f4:	4901      	ldr	r1, [pc, #4]	; (80185fc <_cleanup_r+0x8>)
 80185f6:	f000 b8af 	b.w	8018758 <_fwalk_reent>
 80185fa:	bf00      	nop
 80185fc:	08018535 	.word	0x08018535

08018600 <__sfmoreglue>:
 8018600:	b570      	push	{r4, r5, r6, lr}
 8018602:	1e4a      	subs	r2, r1, #1
 8018604:	2568      	movs	r5, #104	; 0x68
 8018606:	4355      	muls	r5, r2
 8018608:	460e      	mov	r6, r1
 801860a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801860e:	f000 f9b5 	bl	801897c <_malloc_r>
 8018612:	4604      	mov	r4, r0
 8018614:	b140      	cbz	r0, 8018628 <__sfmoreglue+0x28>
 8018616:	2100      	movs	r1, #0
 8018618:	e9c0 1600 	strd	r1, r6, [r0]
 801861c:	300c      	adds	r0, #12
 801861e:	60a0      	str	r0, [r4, #8]
 8018620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018624:	f000 f952 	bl	80188cc <memset>
 8018628:	4620      	mov	r0, r4
 801862a:	bd70      	pop	{r4, r5, r6, pc}

0801862c <__sfp_lock_acquire>:
 801862c:	4801      	ldr	r0, [pc, #4]	; (8018634 <__sfp_lock_acquire+0x8>)
 801862e:	f000 b8d8 	b.w	80187e2 <__retarget_lock_acquire_recursive>
 8018632:	bf00      	nop
 8018634:	20000b14 	.word	0x20000b14

08018638 <__sfp_lock_release>:
 8018638:	4801      	ldr	r0, [pc, #4]	; (8018640 <__sfp_lock_release+0x8>)
 801863a:	f000 b8d3 	b.w	80187e4 <__retarget_lock_release_recursive>
 801863e:	bf00      	nop
 8018640:	20000b14 	.word	0x20000b14

08018644 <__sinit_lock_acquire>:
 8018644:	4801      	ldr	r0, [pc, #4]	; (801864c <__sinit_lock_acquire+0x8>)
 8018646:	f000 b8cc 	b.w	80187e2 <__retarget_lock_acquire_recursive>
 801864a:	bf00      	nop
 801864c:	20000b0f 	.word	0x20000b0f

08018650 <__sinit_lock_release>:
 8018650:	4801      	ldr	r0, [pc, #4]	; (8018658 <__sinit_lock_release+0x8>)
 8018652:	f000 b8c7 	b.w	80187e4 <__retarget_lock_release_recursive>
 8018656:	bf00      	nop
 8018658:	20000b0f 	.word	0x20000b0f

0801865c <__sinit>:
 801865c:	b510      	push	{r4, lr}
 801865e:	4604      	mov	r4, r0
 8018660:	f7ff fff0 	bl	8018644 <__sinit_lock_acquire>
 8018664:	69a3      	ldr	r3, [r4, #24]
 8018666:	b11b      	cbz	r3, 8018670 <__sinit+0x14>
 8018668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801866c:	f7ff bff0 	b.w	8018650 <__sinit_lock_release>
 8018670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018674:	6523      	str	r3, [r4, #80]	; 0x50
 8018676:	4b13      	ldr	r3, [pc, #76]	; (80186c4 <__sinit+0x68>)
 8018678:	4a13      	ldr	r2, [pc, #76]	; (80186c8 <__sinit+0x6c>)
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	62a2      	str	r2, [r4, #40]	; 0x28
 801867e:	42a3      	cmp	r3, r4
 8018680:	bf04      	itt	eq
 8018682:	2301      	moveq	r3, #1
 8018684:	61a3      	streq	r3, [r4, #24]
 8018686:	4620      	mov	r0, r4
 8018688:	f000 f820 	bl	80186cc <__sfp>
 801868c:	6060      	str	r0, [r4, #4]
 801868e:	4620      	mov	r0, r4
 8018690:	f000 f81c 	bl	80186cc <__sfp>
 8018694:	60a0      	str	r0, [r4, #8]
 8018696:	4620      	mov	r0, r4
 8018698:	f000 f818 	bl	80186cc <__sfp>
 801869c:	2200      	movs	r2, #0
 801869e:	60e0      	str	r0, [r4, #12]
 80186a0:	2104      	movs	r1, #4
 80186a2:	6860      	ldr	r0, [r4, #4]
 80186a4:	f7ff ff82 	bl	80185ac <std>
 80186a8:	68a0      	ldr	r0, [r4, #8]
 80186aa:	2201      	movs	r2, #1
 80186ac:	2109      	movs	r1, #9
 80186ae:	f7ff ff7d 	bl	80185ac <std>
 80186b2:	68e0      	ldr	r0, [r4, #12]
 80186b4:	2202      	movs	r2, #2
 80186b6:	2112      	movs	r1, #18
 80186b8:	f7ff ff78 	bl	80185ac <std>
 80186bc:	2301      	movs	r3, #1
 80186be:	61a3      	str	r3, [r4, #24]
 80186c0:	e7d2      	b.n	8018668 <__sinit+0xc>
 80186c2:	bf00      	nop
 80186c4:	0801bca4 	.word	0x0801bca4
 80186c8:	080185f5 	.word	0x080185f5

080186cc <__sfp>:
 80186cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ce:	4607      	mov	r7, r0
 80186d0:	f7ff ffac 	bl	801862c <__sfp_lock_acquire>
 80186d4:	4b1e      	ldr	r3, [pc, #120]	; (8018750 <__sfp+0x84>)
 80186d6:	681e      	ldr	r6, [r3, #0]
 80186d8:	69b3      	ldr	r3, [r6, #24]
 80186da:	b913      	cbnz	r3, 80186e2 <__sfp+0x16>
 80186dc:	4630      	mov	r0, r6
 80186de:	f7ff ffbd 	bl	801865c <__sinit>
 80186e2:	3648      	adds	r6, #72	; 0x48
 80186e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80186e8:	3b01      	subs	r3, #1
 80186ea:	d503      	bpl.n	80186f4 <__sfp+0x28>
 80186ec:	6833      	ldr	r3, [r6, #0]
 80186ee:	b30b      	cbz	r3, 8018734 <__sfp+0x68>
 80186f0:	6836      	ldr	r6, [r6, #0]
 80186f2:	e7f7      	b.n	80186e4 <__sfp+0x18>
 80186f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80186f8:	b9d5      	cbnz	r5, 8018730 <__sfp+0x64>
 80186fa:	4b16      	ldr	r3, [pc, #88]	; (8018754 <__sfp+0x88>)
 80186fc:	60e3      	str	r3, [r4, #12]
 80186fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018702:	6665      	str	r5, [r4, #100]	; 0x64
 8018704:	f000 f86c 	bl	80187e0 <__retarget_lock_init_recursive>
 8018708:	f7ff ff96 	bl	8018638 <__sfp_lock_release>
 801870c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018714:	6025      	str	r5, [r4, #0]
 8018716:	61a5      	str	r5, [r4, #24]
 8018718:	2208      	movs	r2, #8
 801871a:	4629      	mov	r1, r5
 801871c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018720:	f000 f8d4 	bl	80188cc <memset>
 8018724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801872c:	4620      	mov	r0, r4
 801872e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018730:	3468      	adds	r4, #104	; 0x68
 8018732:	e7d9      	b.n	80186e8 <__sfp+0x1c>
 8018734:	2104      	movs	r1, #4
 8018736:	4638      	mov	r0, r7
 8018738:	f7ff ff62 	bl	8018600 <__sfmoreglue>
 801873c:	4604      	mov	r4, r0
 801873e:	6030      	str	r0, [r6, #0]
 8018740:	2800      	cmp	r0, #0
 8018742:	d1d5      	bne.n	80186f0 <__sfp+0x24>
 8018744:	f7ff ff78 	bl	8018638 <__sfp_lock_release>
 8018748:	230c      	movs	r3, #12
 801874a:	603b      	str	r3, [r7, #0]
 801874c:	e7ee      	b.n	801872c <__sfp+0x60>
 801874e:	bf00      	nop
 8018750:	0801bca4 	.word	0x0801bca4
 8018754:	ffff0001 	.word	0xffff0001

08018758 <_fwalk_reent>:
 8018758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801875c:	4606      	mov	r6, r0
 801875e:	4688      	mov	r8, r1
 8018760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018764:	2700      	movs	r7, #0
 8018766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801876a:	f1b9 0901 	subs.w	r9, r9, #1
 801876e:	d505      	bpl.n	801877c <_fwalk_reent+0x24>
 8018770:	6824      	ldr	r4, [r4, #0]
 8018772:	2c00      	cmp	r4, #0
 8018774:	d1f7      	bne.n	8018766 <_fwalk_reent+0xe>
 8018776:	4638      	mov	r0, r7
 8018778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801877c:	89ab      	ldrh	r3, [r5, #12]
 801877e:	2b01      	cmp	r3, #1
 8018780:	d907      	bls.n	8018792 <_fwalk_reent+0x3a>
 8018782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018786:	3301      	adds	r3, #1
 8018788:	d003      	beq.n	8018792 <_fwalk_reent+0x3a>
 801878a:	4629      	mov	r1, r5
 801878c:	4630      	mov	r0, r6
 801878e:	47c0      	blx	r8
 8018790:	4307      	orrs	r7, r0
 8018792:	3568      	adds	r5, #104	; 0x68
 8018794:	e7e9      	b.n	801876a <_fwalk_reent+0x12>
	...

08018798 <__libc_init_array>:
 8018798:	b570      	push	{r4, r5, r6, lr}
 801879a:	4d0d      	ldr	r5, [pc, #52]	; (80187d0 <__libc_init_array+0x38>)
 801879c:	4c0d      	ldr	r4, [pc, #52]	; (80187d4 <__libc_init_array+0x3c>)
 801879e:	1b64      	subs	r4, r4, r5
 80187a0:	10a4      	asrs	r4, r4, #2
 80187a2:	2600      	movs	r6, #0
 80187a4:	42a6      	cmp	r6, r4
 80187a6:	d109      	bne.n	80187bc <__libc_init_array+0x24>
 80187a8:	4d0b      	ldr	r5, [pc, #44]	; (80187d8 <__libc_init_array+0x40>)
 80187aa:	4c0c      	ldr	r4, [pc, #48]	; (80187dc <__libc_init_array+0x44>)
 80187ac:	f002 fcfc 	bl	801b1a8 <_init>
 80187b0:	1b64      	subs	r4, r4, r5
 80187b2:	10a4      	asrs	r4, r4, #2
 80187b4:	2600      	movs	r6, #0
 80187b6:	42a6      	cmp	r6, r4
 80187b8:	d105      	bne.n	80187c6 <__libc_init_array+0x2e>
 80187ba:	bd70      	pop	{r4, r5, r6, pc}
 80187bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80187c0:	4798      	blx	r3
 80187c2:	3601      	adds	r6, #1
 80187c4:	e7ee      	b.n	80187a4 <__libc_init_array+0xc>
 80187c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80187ca:	4798      	blx	r3
 80187cc:	3601      	adds	r6, #1
 80187ce:	e7f2      	b.n	80187b6 <__libc_init_array+0x1e>
 80187d0:	0801c02c 	.word	0x0801c02c
 80187d4:	0801c02c 	.word	0x0801c02c
 80187d8:	0801c02c 	.word	0x0801c02c
 80187dc:	0801c030 	.word	0x0801c030

080187e0 <__retarget_lock_init_recursive>:
 80187e0:	4770      	bx	lr

080187e2 <__retarget_lock_acquire_recursive>:
 80187e2:	4770      	bx	lr

080187e4 <__retarget_lock_release_recursive>:
 80187e4:	4770      	bx	lr

080187e6 <__swhatbuf_r>:
 80187e6:	b570      	push	{r4, r5, r6, lr}
 80187e8:	460e      	mov	r6, r1
 80187ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187ee:	2900      	cmp	r1, #0
 80187f0:	b096      	sub	sp, #88	; 0x58
 80187f2:	4614      	mov	r4, r2
 80187f4:	461d      	mov	r5, r3
 80187f6:	da07      	bge.n	8018808 <__swhatbuf_r+0x22>
 80187f8:	2300      	movs	r3, #0
 80187fa:	602b      	str	r3, [r5, #0]
 80187fc:	89b3      	ldrh	r3, [r6, #12]
 80187fe:	061a      	lsls	r2, r3, #24
 8018800:	d410      	bmi.n	8018824 <__swhatbuf_r+0x3e>
 8018802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018806:	e00e      	b.n	8018826 <__swhatbuf_r+0x40>
 8018808:	466a      	mov	r2, sp
 801880a:	f001 fc89 	bl	801a120 <_fstat_r>
 801880e:	2800      	cmp	r0, #0
 8018810:	dbf2      	blt.n	80187f8 <__swhatbuf_r+0x12>
 8018812:	9a01      	ldr	r2, [sp, #4]
 8018814:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018818:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801881c:	425a      	negs	r2, r3
 801881e:	415a      	adcs	r2, r3
 8018820:	602a      	str	r2, [r5, #0]
 8018822:	e7ee      	b.n	8018802 <__swhatbuf_r+0x1c>
 8018824:	2340      	movs	r3, #64	; 0x40
 8018826:	2000      	movs	r0, #0
 8018828:	6023      	str	r3, [r4, #0]
 801882a:	b016      	add	sp, #88	; 0x58
 801882c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018830 <__smakebuf_r>:
 8018830:	898b      	ldrh	r3, [r1, #12]
 8018832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018834:	079d      	lsls	r5, r3, #30
 8018836:	4606      	mov	r6, r0
 8018838:	460c      	mov	r4, r1
 801883a:	d507      	bpl.n	801884c <__smakebuf_r+0x1c>
 801883c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018840:	6023      	str	r3, [r4, #0]
 8018842:	6123      	str	r3, [r4, #16]
 8018844:	2301      	movs	r3, #1
 8018846:	6163      	str	r3, [r4, #20]
 8018848:	b002      	add	sp, #8
 801884a:	bd70      	pop	{r4, r5, r6, pc}
 801884c:	ab01      	add	r3, sp, #4
 801884e:	466a      	mov	r2, sp
 8018850:	f7ff ffc9 	bl	80187e6 <__swhatbuf_r>
 8018854:	9900      	ldr	r1, [sp, #0]
 8018856:	4605      	mov	r5, r0
 8018858:	4630      	mov	r0, r6
 801885a:	f000 f88f 	bl	801897c <_malloc_r>
 801885e:	b948      	cbnz	r0, 8018874 <__smakebuf_r+0x44>
 8018860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018864:	059a      	lsls	r2, r3, #22
 8018866:	d4ef      	bmi.n	8018848 <__smakebuf_r+0x18>
 8018868:	f023 0303 	bic.w	r3, r3, #3
 801886c:	f043 0302 	orr.w	r3, r3, #2
 8018870:	81a3      	strh	r3, [r4, #12]
 8018872:	e7e3      	b.n	801883c <__smakebuf_r+0xc>
 8018874:	4b0d      	ldr	r3, [pc, #52]	; (80188ac <__smakebuf_r+0x7c>)
 8018876:	62b3      	str	r3, [r6, #40]	; 0x28
 8018878:	89a3      	ldrh	r3, [r4, #12]
 801887a:	6020      	str	r0, [r4, #0]
 801887c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018880:	81a3      	strh	r3, [r4, #12]
 8018882:	9b00      	ldr	r3, [sp, #0]
 8018884:	6163      	str	r3, [r4, #20]
 8018886:	9b01      	ldr	r3, [sp, #4]
 8018888:	6120      	str	r0, [r4, #16]
 801888a:	b15b      	cbz	r3, 80188a4 <__smakebuf_r+0x74>
 801888c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018890:	4630      	mov	r0, r6
 8018892:	f001 fc57 	bl	801a144 <_isatty_r>
 8018896:	b128      	cbz	r0, 80188a4 <__smakebuf_r+0x74>
 8018898:	89a3      	ldrh	r3, [r4, #12]
 801889a:	f023 0303 	bic.w	r3, r3, #3
 801889e:	f043 0301 	orr.w	r3, r3, #1
 80188a2:	81a3      	strh	r3, [r4, #12]
 80188a4:	89a0      	ldrh	r0, [r4, #12]
 80188a6:	4305      	orrs	r5, r0
 80188a8:	81a5      	strh	r5, [r4, #12]
 80188aa:	e7cd      	b.n	8018848 <__smakebuf_r+0x18>
 80188ac:	080185f5 	.word	0x080185f5

080188b0 <memcpy>:
 80188b0:	440a      	add	r2, r1
 80188b2:	4291      	cmp	r1, r2
 80188b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80188b8:	d100      	bne.n	80188bc <memcpy+0xc>
 80188ba:	4770      	bx	lr
 80188bc:	b510      	push	{r4, lr}
 80188be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80188c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80188c6:	4291      	cmp	r1, r2
 80188c8:	d1f9      	bne.n	80188be <memcpy+0xe>
 80188ca:	bd10      	pop	{r4, pc}

080188cc <memset>:
 80188cc:	4402      	add	r2, r0
 80188ce:	4603      	mov	r3, r0
 80188d0:	4293      	cmp	r3, r2
 80188d2:	d100      	bne.n	80188d6 <memset+0xa>
 80188d4:	4770      	bx	lr
 80188d6:	f803 1b01 	strb.w	r1, [r3], #1
 80188da:	e7f9      	b.n	80188d0 <memset+0x4>

080188dc <_free_r>:
 80188dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188de:	2900      	cmp	r1, #0
 80188e0:	d048      	beq.n	8018974 <_free_r+0x98>
 80188e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188e6:	9001      	str	r0, [sp, #4]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	f1a1 0404 	sub.w	r4, r1, #4
 80188ee:	bfb8      	it	lt
 80188f0:	18e4      	addlt	r4, r4, r3
 80188f2:	f001 fc55 	bl	801a1a0 <__malloc_lock>
 80188f6:	4a20      	ldr	r2, [pc, #128]	; (8018978 <_free_r+0x9c>)
 80188f8:	9801      	ldr	r0, [sp, #4]
 80188fa:	6813      	ldr	r3, [r2, #0]
 80188fc:	4615      	mov	r5, r2
 80188fe:	b933      	cbnz	r3, 801890e <_free_r+0x32>
 8018900:	6063      	str	r3, [r4, #4]
 8018902:	6014      	str	r4, [r2, #0]
 8018904:	b003      	add	sp, #12
 8018906:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801890a:	f001 bc4f 	b.w	801a1ac <__malloc_unlock>
 801890e:	42a3      	cmp	r3, r4
 8018910:	d90b      	bls.n	801892a <_free_r+0x4e>
 8018912:	6821      	ldr	r1, [r4, #0]
 8018914:	1862      	adds	r2, r4, r1
 8018916:	4293      	cmp	r3, r2
 8018918:	bf04      	itt	eq
 801891a:	681a      	ldreq	r2, [r3, #0]
 801891c:	685b      	ldreq	r3, [r3, #4]
 801891e:	6063      	str	r3, [r4, #4]
 8018920:	bf04      	itt	eq
 8018922:	1852      	addeq	r2, r2, r1
 8018924:	6022      	streq	r2, [r4, #0]
 8018926:	602c      	str	r4, [r5, #0]
 8018928:	e7ec      	b.n	8018904 <_free_r+0x28>
 801892a:	461a      	mov	r2, r3
 801892c:	685b      	ldr	r3, [r3, #4]
 801892e:	b10b      	cbz	r3, 8018934 <_free_r+0x58>
 8018930:	42a3      	cmp	r3, r4
 8018932:	d9fa      	bls.n	801892a <_free_r+0x4e>
 8018934:	6811      	ldr	r1, [r2, #0]
 8018936:	1855      	adds	r5, r2, r1
 8018938:	42a5      	cmp	r5, r4
 801893a:	d10b      	bne.n	8018954 <_free_r+0x78>
 801893c:	6824      	ldr	r4, [r4, #0]
 801893e:	4421      	add	r1, r4
 8018940:	1854      	adds	r4, r2, r1
 8018942:	42a3      	cmp	r3, r4
 8018944:	6011      	str	r1, [r2, #0]
 8018946:	d1dd      	bne.n	8018904 <_free_r+0x28>
 8018948:	681c      	ldr	r4, [r3, #0]
 801894a:	685b      	ldr	r3, [r3, #4]
 801894c:	6053      	str	r3, [r2, #4]
 801894e:	4421      	add	r1, r4
 8018950:	6011      	str	r1, [r2, #0]
 8018952:	e7d7      	b.n	8018904 <_free_r+0x28>
 8018954:	d902      	bls.n	801895c <_free_r+0x80>
 8018956:	230c      	movs	r3, #12
 8018958:	6003      	str	r3, [r0, #0]
 801895a:	e7d3      	b.n	8018904 <_free_r+0x28>
 801895c:	6825      	ldr	r5, [r4, #0]
 801895e:	1961      	adds	r1, r4, r5
 8018960:	428b      	cmp	r3, r1
 8018962:	bf04      	itt	eq
 8018964:	6819      	ldreq	r1, [r3, #0]
 8018966:	685b      	ldreq	r3, [r3, #4]
 8018968:	6063      	str	r3, [r4, #4]
 801896a:	bf04      	itt	eq
 801896c:	1949      	addeq	r1, r1, r5
 801896e:	6021      	streq	r1, [r4, #0]
 8018970:	6054      	str	r4, [r2, #4]
 8018972:	e7c7      	b.n	8018904 <_free_r+0x28>
 8018974:	b003      	add	sp, #12
 8018976:	bd30      	pop	{r4, r5, pc}
 8018978:	200002d4 	.word	0x200002d4

0801897c <_malloc_r>:
 801897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801897e:	1ccd      	adds	r5, r1, #3
 8018980:	f025 0503 	bic.w	r5, r5, #3
 8018984:	3508      	adds	r5, #8
 8018986:	2d0c      	cmp	r5, #12
 8018988:	bf38      	it	cc
 801898a:	250c      	movcc	r5, #12
 801898c:	2d00      	cmp	r5, #0
 801898e:	4606      	mov	r6, r0
 8018990:	db01      	blt.n	8018996 <_malloc_r+0x1a>
 8018992:	42a9      	cmp	r1, r5
 8018994:	d903      	bls.n	801899e <_malloc_r+0x22>
 8018996:	230c      	movs	r3, #12
 8018998:	6033      	str	r3, [r6, #0]
 801899a:	2000      	movs	r0, #0
 801899c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801899e:	f001 fbff 	bl	801a1a0 <__malloc_lock>
 80189a2:	4921      	ldr	r1, [pc, #132]	; (8018a28 <_malloc_r+0xac>)
 80189a4:	680a      	ldr	r2, [r1, #0]
 80189a6:	4614      	mov	r4, r2
 80189a8:	b99c      	cbnz	r4, 80189d2 <_malloc_r+0x56>
 80189aa:	4f20      	ldr	r7, [pc, #128]	; (8018a2c <_malloc_r+0xb0>)
 80189ac:	683b      	ldr	r3, [r7, #0]
 80189ae:	b923      	cbnz	r3, 80189ba <_malloc_r+0x3e>
 80189b0:	4621      	mov	r1, r4
 80189b2:	4630      	mov	r0, r6
 80189b4:	f000 fca6 	bl	8019304 <_sbrk_r>
 80189b8:	6038      	str	r0, [r7, #0]
 80189ba:	4629      	mov	r1, r5
 80189bc:	4630      	mov	r0, r6
 80189be:	f000 fca1 	bl	8019304 <_sbrk_r>
 80189c2:	1c43      	adds	r3, r0, #1
 80189c4:	d123      	bne.n	8018a0e <_malloc_r+0x92>
 80189c6:	230c      	movs	r3, #12
 80189c8:	6033      	str	r3, [r6, #0]
 80189ca:	4630      	mov	r0, r6
 80189cc:	f001 fbee 	bl	801a1ac <__malloc_unlock>
 80189d0:	e7e3      	b.n	801899a <_malloc_r+0x1e>
 80189d2:	6823      	ldr	r3, [r4, #0]
 80189d4:	1b5b      	subs	r3, r3, r5
 80189d6:	d417      	bmi.n	8018a08 <_malloc_r+0x8c>
 80189d8:	2b0b      	cmp	r3, #11
 80189da:	d903      	bls.n	80189e4 <_malloc_r+0x68>
 80189dc:	6023      	str	r3, [r4, #0]
 80189de:	441c      	add	r4, r3
 80189e0:	6025      	str	r5, [r4, #0]
 80189e2:	e004      	b.n	80189ee <_malloc_r+0x72>
 80189e4:	6863      	ldr	r3, [r4, #4]
 80189e6:	42a2      	cmp	r2, r4
 80189e8:	bf0c      	ite	eq
 80189ea:	600b      	streq	r3, [r1, #0]
 80189ec:	6053      	strne	r3, [r2, #4]
 80189ee:	4630      	mov	r0, r6
 80189f0:	f001 fbdc 	bl	801a1ac <__malloc_unlock>
 80189f4:	f104 000b 	add.w	r0, r4, #11
 80189f8:	1d23      	adds	r3, r4, #4
 80189fa:	f020 0007 	bic.w	r0, r0, #7
 80189fe:	1ac2      	subs	r2, r0, r3
 8018a00:	d0cc      	beq.n	801899c <_malloc_r+0x20>
 8018a02:	1a1b      	subs	r3, r3, r0
 8018a04:	50a3      	str	r3, [r4, r2]
 8018a06:	e7c9      	b.n	801899c <_malloc_r+0x20>
 8018a08:	4622      	mov	r2, r4
 8018a0a:	6864      	ldr	r4, [r4, #4]
 8018a0c:	e7cc      	b.n	80189a8 <_malloc_r+0x2c>
 8018a0e:	1cc4      	adds	r4, r0, #3
 8018a10:	f024 0403 	bic.w	r4, r4, #3
 8018a14:	42a0      	cmp	r0, r4
 8018a16:	d0e3      	beq.n	80189e0 <_malloc_r+0x64>
 8018a18:	1a21      	subs	r1, r4, r0
 8018a1a:	4630      	mov	r0, r6
 8018a1c:	f000 fc72 	bl	8019304 <_sbrk_r>
 8018a20:	3001      	adds	r0, #1
 8018a22:	d1dd      	bne.n	80189e0 <_malloc_r+0x64>
 8018a24:	e7cf      	b.n	80189c6 <_malloc_r+0x4a>
 8018a26:	bf00      	nop
 8018a28:	200002d4 	.word	0x200002d4
 8018a2c:	200002d8 	.word	0x200002d8

08018a30 <__cvt>:
 8018a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018a34:	ec55 4b10 	vmov	r4, r5, d0
 8018a38:	2d00      	cmp	r5, #0
 8018a3a:	460e      	mov	r6, r1
 8018a3c:	4619      	mov	r1, r3
 8018a3e:	462b      	mov	r3, r5
 8018a40:	bfbb      	ittet	lt
 8018a42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8018a46:	461d      	movlt	r5, r3
 8018a48:	2300      	movge	r3, #0
 8018a4a:	232d      	movlt	r3, #45	; 0x2d
 8018a4c:	700b      	strb	r3, [r1, #0]
 8018a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8018a54:	4691      	mov	r9, r2
 8018a56:	f023 0820 	bic.w	r8, r3, #32
 8018a5a:	bfbc      	itt	lt
 8018a5c:	4622      	movlt	r2, r4
 8018a5e:	4614      	movlt	r4, r2
 8018a60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018a64:	d005      	beq.n	8018a72 <__cvt+0x42>
 8018a66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8018a6a:	d100      	bne.n	8018a6e <__cvt+0x3e>
 8018a6c:	3601      	adds	r6, #1
 8018a6e:	2102      	movs	r1, #2
 8018a70:	e000      	b.n	8018a74 <__cvt+0x44>
 8018a72:	2103      	movs	r1, #3
 8018a74:	ab03      	add	r3, sp, #12
 8018a76:	9301      	str	r3, [sp, #4]
 8018a78:	ab02      	add	r3, sp, #8
 8018a7a:	9300      	str	r3, [sp, #0]
 8018a7c:	ec45 4b10 	vmov	d0, r4, r5
 8018a80:	4653      	mov	r3, sl
 8018a82:	4632      	mov	r2, r6
 8018a84:	f000 fd60 	bl	8019548 <_dtoa_r>
 8018a88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8018a8c:	4607      	mov	r7, r0
 8018a8e:	d102      	bne.n	8018a96 <__cvt+0x66>
 8018a90:	f019 0f01 	tst.w	r9, #1
 8018a94:	d022      	beq.n	8018adc <__cvt+0xac>
 8018a96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018a9a:	eb07 0906 	add.w	r9, r7, r6
 8018a9e:	d110      	bne.n	8018ac2 <__cvt+0x92>
 8018aa0:	783b      	ldrb	r3, [r7, #0]
 8018aa2:	2b30      	cmp	r3, #48	; 0x30
 8018aa4:	d10a      	bne.n	8018abc <__cvt+0x8c>
 8018aa6:	2200      	movs	r2, #0
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	4620      	mov	r0, r4
 8018aac:	4629      	mov	r1, r5
 8018aae:	f7e8 f80b 	bl	8000ac8 <__aeabi_dcmpeq>
 8018ab2:	b918      	cbnz	r0, 8018abc <__cvt+0x8c>
 8018ab4:	f1c6 0601 	rsb	r6, r6, #1
 8018ab8:	f8ca 6000 	str.w	r6, [sl]
 8018abc:	f8da 3000 	ldr.w	r3, [sl]
 8018ac0:	4499      	add	r9, r3
 8018ac2:	2200      	movs	r2, #0
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	4620      	mov	r0, r4
 8018ac8:	4629      	mov	r1, r5
 8018aca:	f7e7 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8018ace:	b108      	cbz	r0, 8018ad4 <__cvt+0xa4>
 8018ad0:	f8cd 900c 	str.w	r9, [sp, #12]
 8018ad4:	2230      	movs	r2, #48	; 0x30
 8018ad6:	9b03      	ldr	r3, [sp, #12]
 8018ad8:	454b      	cmp	r3, r9
 8018ada:	d307      	bcc.n	8018aec <__cvt+0xbc>
 8018adc:	9b03      	ldr	r3, [sp, #12]
 8018ade:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018ae0:	1bdb      	subs	r3, r3, r7
 8018ae2:	4638      	mov	r0, r7
 8018ae4:	6013      	str	r3, [r2, #0]
 8018ae6:	b004      	add	sp, #16
 8018ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018aec:	1c59      	adds	r1, r3, #1
 8018aee:	9103      	str	r1, [sp, #12]
 8018af0:	701a      	strb	r2, [r3, #0]
 8018af2:	e7f0      	b.n	8018ad6 <__cvt+0xa6>

08018af4 <__exponent>:
 8018af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018af6:	4603      	mov	r3, r0
 8018af8:	2900      	cmp	r1, #0
 8018afa:	bfb8      	it	lt
 8018afc:	4249      	neglt	r1, r1
 8018afe:	f803 2b02 	strb.w	r2, [r3], #2
 8018b02:	bfb4      	ite	lt
 8018b04:	222d      	movlt	r2, #45	; 0x2d
 8018b06:	222b      	movge	r2, #43	; 0x2b
 8018b08:	2909      	cmp	r1, #9
 8018b0a:	7042      	strb	r2, [r0, #1]
 8018b0c:	dd2a      	ble.n	8018b64 <__exponent+0x70>
 8018b0e:	f10d 0407 	add.w	r4, sp, #7
 8018b12:	46a4      	mov	ip, r4
 8018b14:	270a      	movs	r7, #10
 8018b16:	46a6      	mov	lr, r4
 8018b18:	460a      	mov	r2, r1
 8018b1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8018b1e:	fb07 1516 	mls	r5, r7, r6, r1
 8018b22:	3530      	adds	r5, #48	; 0x30
 8018b24:	2a63      	cmp	r2, #99	; 0x63
 8018b26:	f104 34ff 	add.w	r4, r4, #4294967295
 8018b2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8018b2e:	4631      	mov	r1, r6
 8018b30:	dcf1      	bgt.n	8018b16 <__exponent+0x22>
 8018b32:	3130      	adds	r1, #48	; 0x30
 8018b34:	f1ae 0502 	sub.w	r5, lr, #2
 8018b38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8018b3c:	1c44      	adds	r4, r0, #1
 8018b3e:	4629      	mov	r1, r5
 8018b40:	4561      	cmp	r1, ip
 8018b42:	d30a      	bcc.n	8018b5a <__exponent+0x66>
 8018b44:	f10d 0209 	add.w	r2, sp, #9
 8018b48:	eba2 020e 	sub.w	r2, r2, lr
 8018b4c:	4565      	cmp	r5, ip
 8018b4e:	bf88      	it	hi
 8018b50:	2200      	movhi	r2, #0
 8018b52:	4413      	add	r3, r2
 8018b54:	1a18      	subs	r0, r3, r0
 8018b56:	b003      	add	sp, #12
 8018b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018b5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8018b62:	e7ed      	b.n	8018b40 <__exponent+0x4c>
 8018b64:	2330      	movs	r3, #48	; 0x30
 8018b66:	3130      	adds	r1, #48	; 0x30
 8018b68:	7083      	strb	r3, [r0, #2]
 8018b6a:	70c1      	strb	r1, [r0, #3]
 8018b6c:	1d03      	adds	r3, r0, #4
 8018b6e:	e7f1      	b.n	8018b54 <__exponent+0x60>

08018b70 <_printf_float>:
 8018b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b74:	ed2d 8b02 	vpush	{d8}
 8018b78:	b08d      	sub	sp, #52	; 0x34
 8018b7a:	460c      	mov	r4, r1
 8018b7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018b80:	4616      	mov	r6, r2
 8018b82:	461f      	mov	r7, r3
 8018b84:	4605      	mov	r5, r0
 8018b86:	f001 faed 	bl	801a164 <_localeconv_r>
 8018b8a:	f8d0 a000 	ldr.w	sl, [r0]
 8018b8e:	4650      	mov	r0, sl
 8018b90:	f7e7 fb1e 	bl	80001d0 <strlen>
 8018b94:	2300      	movs	r3, #0
 8018b96:	930a      	str	r3, [sp, #40]	; 0x28
 8018b98:	6823      	ldr	r3, [r4, #0]
 8018b9a:	9305      	str	r3, [sp, #20]
 8018b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8018ba0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8018ba4:	3307      	adds	r3, #7
 8018ba6:	f023 0307 	bic.w	r3, r3, #7
 8018baa:	f103 0208 	add.w	r2, r3, #8
 8018bae:	f8c8 2000 	str.w	r2, [r8]
 8018bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8018bba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8018bbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018bc2:	9307      	str	r3, [sp, #28]
 8018bc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8018bc8:	ee08 0a10 	vmov	s16, r0
 8018bcc:	4b9f      	ldr	r3, [pc, #636]	; (8018e4c <_printf_float+0x2dc>)
 8018bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8018bd6:	f7e7 ffa9 	bl	8000b2c <__aeabi_dcmpun>
 8018bda:	bb88      	cbnz	r0, 8018c40 <_printf_float+0xd0>
 8018bdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018be0:	4b9a      	ldr	r3, [pc, #616]	; (8018e4c <_printf_float+0x2dc>)
 8018be2:	f04f 32ff 	mov.w	r2, #4294967295
 8018be6:	f7e7 ff83 	bl	8000af0 <__aeabi_dcmple>
 8018bea:	bb48      	cbnz	r0, 8018c40 <_printf_float+0xd0>
 8018bec:	2200      	movs	r2, #0
 8018bee:	2300      	movs	r3, #0
 8018bf0:	4640      	mov	r0, r8
 8018bf2:	4649      	mov	r1, r9
 8018bf4:	f7e7 ff72 	bl	8000adc <__aeabi_dcmplt>
 8018bf8:	b110      	cbz	r0, 8018c00 <_printf_float+0x90>
 8018bfa:	232d      	movs	r3, #45	; 0x2d
 8018bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018c00:	4b93      	ldr	r3, [pc, #588]	; (8018e50 <_printf_float+0x2e0>)
 8018c02:	4894      	ldr	r0, [pc, #592]	; (8018e54 <_printf_float+0x2e4>)
 8018c04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8018c08:	bf94      	ite	ls
 8018c0a:	4698      	movls	r8, r3
 8018c0c:	4680      	movhi	r8, r0
 8018c0e:	2303      	movs	r3, #3
 8018c10:	6123      	str	r3, [r4, #16]
 8018c12:	9b05      	ldr	r3, [sp, #20]
 8018c14:	f023 0204 	bic.w	r2, r3, #4
 8018c18:	6022      	str	r2, [r4, #0]
 8018c1a:	f04f 0900 	mov.w	r9, #0
 8018c1e:	9700      	str	r7, [sp, #0]
 8018c20:	4633      	mov	r3, r6
 8018c22:	aa0b      	add	r2, sp, #44	; 0x2c
 8018c24:	4621      	mov	r1, r4
 8018c26:	4628      	mov	r0, r5
 8018c28:	f000 f9d8 	bl	8018fdc <_printf_common>
 8018c2c:	3001      	adds	r0, #1
 8018c2e:	f040 8090 	bne.w	8018d52 <_printf_float+0x1e2>
 8018c32:	f04f 30ff 	mov.w	r0, #4294967295
 8018c36:	b00d      	add	sp, #52	; 0x34
 8018c38:	ecbd 8b02 	vpop	{d8}
 8018c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c40:	4642      	mov	r2, r8
 8018c42:	464b      	mov	r3, r9
 8018c44:	4640      	mov	r0, r8
 8018c46:	4649      	mov	r1, r9
 8018c48:	f7e7 ff70 	bl	8000b2c <__aeabi_dcmpun>
 8018c4c:	b140      	cbz	r0, 8018c60 <_printf_float+0xf0>
 8018c4e:	464b      	mov	r3, r9
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	bfbc      	itt	lt
 8018c54:	232d      	movlt	r3, #45	; 0x2d
 8018c56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018c5a:	487f      	ldr	r0, [pc, #508]	; (8018e58 <_printf_float+0x2e8>)
 8018c5c:	4b7f      	ldr	r3, [pc, #508]	; (8018e5c <_printf_float+0x2ec>)
 8018c5e:	e7d1      	b.n	8018c04 <_printf_float+0x94>
 8018c60:	6863      	ldr	r3, [r4, #4]
 8018c62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8018c66:	9206      	str	r2, [sp, #24]
 8018c68:	1c5a      	adds	r2, r3, #1
 8018c6a:	d13f      	bne.n	8018cec <_printf_float+0x17c>
 8018c6c:	2306      	movs	r3, #6
 8018c6e:	6063      	str	r3, [r4, #4]
 8018c70:	9b05      	ldr	r3, [sp, #20]
 8018c72:	6861      	ldr	r1, [r4, #4]
 8018c74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018c78:	2300      	movs	r3, #0
 8018c7a:	9303      	str	r3, [sp, #12]
 8018c7c:	ab0a      	add	r3, sp, #40	; 0x28
 8018c7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8018c82:	ab09      	add	r3, sp, #36	; 0x24
 8018c84:	ec49 8b10 	vmov	d0, r8, r9
 8018c88:	9300      	str	r3, [sp, #0]
 8018c8a:	6022      	str	r2, [r4, #0]
 8018c8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018c90:	4628      	mov	r0, r5
 8018c92:	f7ff fecd 	bl	8018a30 <__cvt>
 8018c96:	9b06      	ldr	r3, [sp, #24]
 8018c98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018c9a:	2b47      	cmp	r3, #71	; 0x47
 8018c9c:	4680      	mov	r8, r0
 8018c9e:	d108      	bne.n	8018cb2 <_printf_float+0x142>
 8018ca0:	1cc8      	adds	r0, r1, #3
 8018ca2:	db02      	blt.n	8018caa <_printf_float+0x13a>
 8018ca4:	6863      	ldr	r3, [r4, #4]
 8018ca6:	4299      	cmp	r1, r3
 8018ca8:	dd41      	ble.n	8018d2e <_printf_float+0x1be>
 8018caa:	f1ab 0b02 	sub.w	fp, fp, #2
 8018cae:	fa5f fb8b 	uxtb.w	fp, fp
 8018cb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018cb6:	d820      	bhi.n	8018cfa <_printf_float+0x18a>
 8018cb8:	3901      	subs	r1, #1
 8018cba:	465a      	mov	r2, fp
 8018cbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018cc0:	9109      	str	r1, [sp, #36]	; 0x24
 8018cc2:	f7ff ff17 	bl	8018af4 <__exponent>
 8018cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018cc8:	1813      	adds	r3, r2, r0
 8018cca:	2a01      	cmp	r2, #1
 8018ccc:	4681      	mov	r9, r0
 8018cce:	6123      	str	r3, [r4, #16]
 8018cd0:	dc02      	bgt.n	8018cd8 <_printf_float+0x168>
 8018cd2:	6822      	ldr	r2, [r4, #0]
 8018cd4:	07d2      	lsls	r2, r2, #31
 8018cd6:	d501      	bpl.n	8018cdc <_printf_float+0x16c>
 8018cd8:	3301      	adds	r3, #1
 8018cda:	6123      	str	r3, [r4, #16]
 8018cdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d09c      	beq.n	8018c1e <_printf_float+0xae>
 8018ce4:	232d      	movs	r3, #45	; 0x2d
 8018ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018cea:	e798      	b.n	8018c1e <_printf_float+0xae>
 8018cec:	9a06      	ldr	r2, [sp, #24]
 8018cee:	2a47      	cmp	r2, #71	; 0x47
 8018cf0:	d1be      	bne.n	8018c70 <_printf_float+0x100>
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d1bc      	bne.n	8018c70 <_printf_float+0x100>
 8018cf6:	2301      	movs	r3, #1
 8018cf8:	e7b9      	b.n	8018c6e <_printf_float+0xfe>
 8018cfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8018cfe:	d118      	bne.n	8018d32 <_printf_float+0x1c2>
 8018d00:	2900      	cmp	r1, #0
 8018d02:	6863      	ldr	r3, [r4, #4]
 8018d04:	dd0b      	ble.n	8018d1e <_printf_float+0x1ae>
 8018d06:	6121      	str	r1, [r4, #16]
 8018d08:	b913      	cbnz	r3, 8018d10 <_printf_float+0x1a0>
 8018d0a:	6822      	ldr	r2, [r4, #0]
 8018d0c:	07d0      	lsls	r0, r2, #31
 8018d0e:	d502      	bpl.n	8018d16 <_printf_float+0x1a6>
 8018d10:	3301      	adds	r3, #1
 8018d12:	440b      	add	r3, r1
 8018d14:	6123      	str	r3, [r4, #16]
 8018d16:	65a1      	str	r1, [r4, #88]	; 0x58
 8018d18:	f04f 0900 	mov.w	r9, #0
 8018d1c:	e7de      	b.n	8018cdc <_printf_float+0x16c>
 8018d1e:	b913      	cbnz	r3, 8018d26 <_printf_float+0x1b6>
 8018d20:	6822      	ldr	r2, [r4, #0]
 8018d22:	07d2      	lsls	r2, r2, #31
 8018d24:	d501      	bpl.n	8018d2a <_printf_float+0x1ba>
 8018d26:	3302      	adds	r3, #2
 8018d28:	e7f4      	b.n	8018d14 <_printf_float+0x1a4>
 8018d2a:	2301      	movs	r3, #1
 8018d2c:	e7f2      	b.n	8018d14 <_printf_float+0x1a4>
 8018d2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8018d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d34:	4299      	cmp	r1, r3
 8018d36:	db05      	blt.n	8018d44 <_printf_float+0x1d4>
 8018d38:	6823      	ldr	r3, [r4, #0]
 8018d3a:	6121      	str	r1, [r4, #16]
 8018d3c:	07d8      	lsls	r0, r3, #31
 8018d3e:	d5ea      	bpl.n	8018d16 <_printf_float+0x1a6>
 8018d40:	1c4b      	adds	r3, r1, #1
 8018d42:	e7e7      	b.n	8018d14 <_printf_float+0x1a4>
 8018d44:	2900      	cmp	r1, #0
 8018d46:	bfd4      	ite	le
 8018d48:	f1c1 0202 	rsble	r2, r1, #2
 8018d4c:	2201      	movgt	r2, #1
 8018d4e:	4413      	add	r3, r2
 8018d50:	e7e0      	b.n	8018d14 <_printf_float+0x1a4>
 8018d52:	6823      	ldr	r3, [r4, #0]
 8018d54:	055a      	lsls	r2, r3, #21
 8018d56:	d407      	bmi.n	8018d68 <_printf_float+0x1f8>
 8018d58:	6923      	ldr	r3, [r4, #16]
 8018d5a:	4642      	mov	r2, r8
 8018d5c:	4631      	mov	r1, r6
 8018d5e:	4628      	mov	r0, r5
 8018d60:	47b8      	blx	r7
 8018d62:	3001      	adds	r0, #1
 8018d64:	d12c      	bne.n	8018dc0 <_printf_float+0x250>
 8018d66:	e764      	b.n	8018c32 <_printf_float+0xc2>
 8018d68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018d6c:	f240 80e0 	bls.w	8018f30 <_printf_float+0x3c0>
 8018d70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018d74:	2200      	movs	r2, #0
 8018d76:	2300      	movs	r3, #0
 8018d78:	f7e7 fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 8018d7c:	2800      	cmp	r0, #0
 8018d7e:	d034      	beq.n	8018dea <_printf_float+0x27a>
 8018d80:	4a37      	ldr	r2, [pc, #220]	; (8018e60 <_printf_float+0x2f0>)
 8018d82:	2301      	movs	r3, #1
 8018d84:	4631      	mov	r1, r6
 8018d86:	4628      	mov	r0, r5
 8018d88:	47b8      	blx	r7
 8018d8a:	3001      	adds	r0, #1
 8018d8c:	f43f af51 	beq.w	8018c32 <_printf_float+0xc2>
 8018d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018d94:	429a      	cmp	r2, r3
 8018d96:	db02      	blt.n	8018d9e <_printf_float+0x22e>
 8018d98:	6823      	ldr	r3, [r4, #0]
 8018d9a:	07d8      	lsls	r0, r3, #31
 8018d9c:	d510      	bpl.n	8018dc0 <_printf_float+0x250>
 8018d9e:	ee18 3a10 	vmov	r3, s16
 8018da2:	4652      	mov	r2, sl
 8018da4:	4631      	mov	r1, r6
 8018da6:	4628      	mov	r0, r5
 8018da8:	47b8      	blx	r7
 8018daa:	3001      	adds	r0, #1
 8018dac:	f43f af41 	beq.w	8018c32 <_printf_float+0xc2>
 8018db0:	f04f 0800 	mov.w	r8, #0
 8018db4:	f104 091a 	add.w	r9, r4, #26
 8018db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018dba:	3b01      	subs	r3, #1
 8018dbc:	4543      	cmp	r3, r8
 8018dbe:	dc09      	bgt.n	8018dd4 <_printf_float+0x264>
 8018dc0:	6823      	ldr	r3, [r4, #0]
 8018dc2:	079b      	lsls	r3, r3, #30
 8018dc4:	f100 8105 	bmi.w	8018fd2 <_printf_float+0x462>
 8018dc8:	68e0      	ldr	r0, [r4, #12]
 8018dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018dcc:	4298      	cmp	r0, r3
 8018dce:	bfb8      	it	lt
 8018dd0:	4618      	movlt	r0, r3
 8018dd2:	e730      	b.n	8018c36 <_printf_float+0xc6>
 8018dd4:	2301      	movs	r3, #1
 8018dd6:	464a      	mov	r2, r9
 8018dd8:	4631      	mov	r1, r6
 8018dda:	4628      	mov	r0, r5
 8018ddc:	47b8      	blx	r7
 8018dde:	3001      	adds	r0, #1
 8018de0:	f43f af27 	beq.w	8018c32 <_printf_float+0xc2>
 8018de4:	f108 0801 	add.w	r8, r8, #1
 8018de8:	e7e6      	b.n	8018db8 <_printf_float+0x248>
 8018dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	dc39      	bgt.n	8018e64 <_printf_float+0x2f4>
 8018df0:	4a1b      	ldr	r2, [pc, #108]	; (8018e60 <_printf_float+0x2f0>)
 8018df2:	2301      	movs	r3, #1
 8018df4:	4631      	mov	r1, r6
 8018df6:	4628      	mov	r0, r5
 8018df8:	47b8      	blx	r7
 8018dfa:	3001      	adds	r0, #1
 8018dfc:	f43f af19 	beq.w	8018c32 <_printf_float+0xc2>
 8018e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018e04:	4313      	orrs	r3, r2
 8018e06:	d102      	bne.n	8018e0e <_printf_float+0x29e>
 8018e08:	6823      	ldr	r3, [r4, #0]
 8018e0a:	07d9      	lsls	r1, r3, #31
 8018e0c:	d5d8      	bpl.n	8018dc0 <_printf_float+0x250>
 8018e0e:	ee18 3a10 	vmov	r3, s16
 8018e12:	4652      	mov	r2, sl
 8018e14:	4631      	mov	r1, r6
 8018e16:	4628      	mov	r0, r5
 8018e18:	47b8      	blx	r7
 8018e1a:	3001      	adds	r0, #1
 8018e1c:	f43f af09 	beq.w	8018c32 <_printf_float+0xc2>
 8018e20:	f04f 0900 	mov.w	r9, #0
 8018e24:	f104 0a1a 	add.w	sl, r4, #26
 8018e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e2a:	425b      	negs	r3, r3
 8018e2c:	454b      	cmp	r3, r9
 8018e2e:	dc01      	bgt.n	8018e34 <_printf_float+0x2c4>
 8018e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e32:	e792      	b.n	8018d5a <_printf_float+0x1ea>
 8018e34:	2301      	movs	r3, #1
 8018e36:	4652      	mov	r2, sl
 8018e38:	4631      	mov	r1, r6
 8018e3a:	4628      	mov	r0, r5
 8018e3c:	47b8      	blx	r7
 8018e3e:	3001      	adds	r0, #1
 8018e40:	f43f aef7 	beq.w	8018c32 <_printf_float+0xc2>
 8018e44:	f109 0901 	add.w	r9, r9, #1
 8018e48:	e7ee      	b.n	8018e28 <_printf_float+0x2b8>
 8018e4a:	bf00      	nop
 8018e4c:	7fefffff 	.word	0x7fefffff
 8018e50:	0801bca8 	.word	0x0801bca8
 8018e54:	0801bcac 	.word	0x0801bcac
 8018e58:	0801bcb4 	.word	0x0801bcb4
 8018e5c:	0801bcb0 	.word	0x0801bcb0
 8018e60:	0801bcb8 	.word	0x0801bcb8
 8018e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018e68:	429a      	cmp	r2, r3
 8018e6a:	bfa8      	it	ge
 8018e6c:	461a      	movge	r2, r3
 8018e6e:	2a00      	cmp	r2, #0
 8018e70:	4691      	mov	r9, r2
 8018e72:	dc37      	bgt.n	8018ee4 <_printf_float+0x374>
 8018e74:	f04f 0b00 	mov.w	fp, #0
 8018e78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018e7c:	f104 021a 	add.w	r2, r4, #26
 8018e80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018e82:	9305      	str	r3, [sp, #20]
 8018e84:	eba3 0309 	sub.w	r3, r3, r9
 8018e88:	455b      	cmp	r3, fp
 8018e8a:	dc33      	bgt.n	8018ef4 <_printf_float+0x384>
 8018e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018e90:	429a      	cmp	r2, r3
 8018e92:	db3b      	blt.n	8018f0c <_printf_float+0x39c>
 8018e94:	6823      	ldr	r3, [r4, #0]
 8018e96:	07da      	lsls	r2, r3, #31
 8018e98:	d438      	bmi.n	8018f0c <_printf_float+0x39c>
 8018e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e9c:	9b05      	ldr	r3, [sp, #20]
 8018e9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018ea0:	1ad3      	subs	r3, r2, r3
 8018ea2:	eba2 0901 	sub.w	r9, r2, r1
 8018ea6:	4599      	cmp	r9, r3
 8018ea8:	bfa8      	it	ge
 8018eaa:	4699      	movge	r9, r3
 8018eac:	f1b9 0f00 	cmp.w	r9, #0
 8018eb0:	dc35      	bgt.n	8018f1e <_printf_float+0x3ae>
 8018eb2:	f04f 0800 	mov.w	r8, #0
 8018eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018eba:	f104 0a1a 	add.w	sl, r4, #26
 8018ebe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018ec2:	1a9b      	subs	r3, r3, r2
 8018ec4:	eba3 0309 	sub.w	r3, r3, r9
 8018ec8:	4543      	cmp	r3, r8
 8018eca:	f77f af79 	ble.w	8018dc0 <_printf_float+0x250>
 8018ece:	2301      	movs	r3, #1
 8018ed0:	4652      	mov	r2, sl
 8018ed2:	4631      	mov	r1, r6
 8018ed4:	4628      	mov	r0, r5
 8018ed6:	47b8      	blx	r7
 8018ed8:	3001      	adds	r0, #1
 8018eda:	f43f aeaa 	beq.w	8018c32 <_printf_float+0xc2>
 8018ede:	f108 0801 	add.w	r8, r8, #1
 8018ee2:	e7ec      	b.n	8018ebe <_printf_float+0x34e>
 8018ee4:	4613      	mov	r3, r2
 8018ee6:	4631      	mov	r1, r6
 8018ee8:	4642      	mov	r2, r8
 8018eea:	4628      	mov	r0, r5
 8018eec:	47b8      	blx	r7
 8018eee:	3001      	adds	r0, #1
 8018ef0:	d1c0      	bne.n	8018e74 <_printf_float+0x304>
 8018ef2:	e69e      	b.n	8018c32 <_printf_float+0xc2>
 8018ef4:	2301      	movs	r3, #1
 8018ef6:	4631      	mov	r1, r6
 8018ef8:	4628      	mov	r0, r5
 8018efa:	9205      	str	r2, [sp, #20]
 8018efc:	47b8      	blx	r7
 8018efe:	3001      	adds	r0, #1
 8018f00:	f43f ae97 	beq.w	8018c32 <_printf_float+0xc2>
 8018f04:	9a05      	ldr	r2, [sp, #20]
 8018f06:	f10b 0b01 	add.w	fp, fp, #1
 8018f0a:	e7b9      	b.n	8018e80 <_printf_float+0x310>
 8018f0c:	ee18 3a10 	vmov	r3, s16
 8018f10:	4652      	mov	r2, sl
 8018f12:	4631      	mov	r1, r6
 8018f14:	4628      	mov	r0, r5
 8018f16:	47b8      	blx	r7
 8018f18:	3001      	adds	r0, #1
 8018f1a:	d1be      	bne.n	8018e9a <_printf_float+0x32a>
 8018f1c:	e689      	b.n	8018c32 <_printf_float+0xc2>
 8018f1e:	9a05      	ldr	r2, [sp, #20]
 8018f20:	464b      	mov	r3, r9
 8018f22:	4442      	add	r2, r8
 8018f24:	4631      	mov	r1, r6
 8018f26:	4628      	mov	r0, r5
 8018f28:	47b8      	blx	r7
 8018f2a:	3001      	adds	r0, #1
 8018f2c:	d1c1      	bne.n	8018eb2 <_printf_float+0x342>
 8018f2e:	e680      	b.n	8018c32 <_printf_float+0xc2>
 8018f30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f32:	2a01      	cmp	r2, #1
 8018f34:	dc01      	bgt.n	8018f3a <_printf_float+0x3ca>
 8018f36:	07db      	lsls	r3, r3, #31
 8018f38:	d538      	bpl.n	8018fac <_printf_float+0x43c>
 8018f3a:	2301      	movs	r3, #1
 8018f3c:	4642      	mov	r2, r8
 8018f3e:	4631      	mov	r1, r6
 8018f40:	4628      	mov	r0, r5
 8018f42:	47b8      	blx	r7
 8018f44:	3001      	adds	r0, #1
 8018f46:	f43f ae74 	beq.w	8018c32 <_printf_float+0xc2>
 8018f4a:	ee18 3a10 	vmov	r3, s16
 8018f4e:	4652      	mov	r2, sl
 8018f50:	4631      	mov	r1, r6
 8018f52:	4628      	mov	r0, r5
 8018f54:	47b8      	blx	r7
 8018f56:	3001      	adds	r0, #1
 8018f58:	f43f ae6b 	beq.w	8018c32 <_printf_float+0xc2>
 8018f5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018f60:	2200      	movs	r2, #0
 8018f62:	2300      	movs	r3, #0
 8018f64:	f7e7 fdb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8018f68:	b9d8      	cbnz	r0, 8018fa2 <_printf_float+0x432>
 8018f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f6c:	f108 0201 	add.w	r2, r8, #1
 8018f70:	3b01      	subs	r3, #1
 8018f72:	4631      	mov	r1, r6
 8018f74:	4628      	mov	r0, r5
 8018f76:	47b8      	blx	r7
 8018f78:	3001      	adds	r0, #1
 8018f7a:	d10e      	bne.n	8018f9a <_printf_float+0x42a>
 8018f7c:	e659      	b.n	8018c32 <_printf_float+0xc2>
 8018f7e:	2301      	movs	r3, #1
 8018f80:	4652      	mov	r2, sl
 8018f82:	4631      	mov	r1, r6
 8018f84:	4628      	mov	r0, r5
 8018f86:	47b8      	blx	r7
 8018f88:	3001      	adds	r0, #1
 8018f8a:	f43f ae52 	beq.w	8018c32 <_printf_float+0xc2>
 8018f8e:	f108 0801 	add.w	r8, r8, #1
 8018f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f94:	3b01      	subs	r3, #1
 8018f96:	4543      	cmp	r3, r8
 8018f98:	dcf1      	bgt.n	8018f7e <_printf_float+0x40e>
 8018f9a:	464b      	mov	r3, r9
 8018f9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018fa0:	e6dc      	b.n	8018d5c <_printf_float+0x1ec>
 8018fa2:	f04f 0800 	mov.w	r8, #0
 8018fa6:	f104 0a1a 	add.w	sl, r4, #26
 8018faa:	e7f2      	b.n	8018f92 <_printf_float+0x422>
 8018fac:	2301      	movs	r3, #1
 8018fae:	4642      	mov	r2, r8
 8018fb0:	e7df      	b.n	8018f72 <_printf_float+0x402>
 8018fb2:	2301      	movs	r3, #1
 8018fb4:	464a      	mov	r2, r9
 8018fb6:	4631      	mov	r1, r6
 8018fb8:	4628      	mov	r0, r5
 8018fba:	47b8      	blx	r7
 8018fbc:	3001      	adds	r0, #1
 8018fbe:	f43f ae38 	beq.w	8018c32 <_printf_float+0xc2>
 8018fc2:	f108 0801 	add.w	r8, r8, #1
 8018fc6:	68e3      	ldr	r3, [r4, #12]
 8018fc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018fca:	1a5b      	subs	r3, r3, r1
 8018fcc:	4543      	cmp	r3, r8
 8018fce:	dcf0      	bgt.n	8018fb2 <_printf_float+0x442>
 8018fd0:	e6fa      	b.n	8018dc8 <_printf_float+0x258>
 8018fd2:	f04f 0800 	mov.w	r8, #0
 8018fd6:	f104 0919 	add.w	r9, r4, #25
 8018fda:	e7f4      	b.n	8018fc6 <_printf_float+0x456>

08018fdc <_printf_common>:
 8018fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fe0:	4616      	mov	r6, r2
 8018fe2:	4699      	mov	r9, r3
 8018fe4:	688a      	ldr	r2, [r1, #8]
 8018fe6:	690b      	ldr	r3, [r1, #16]
 8018fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018fec:	4293      	cmp	r3, r2
 8018fee:	bfb8      	it	lt
 8018ff0:	4613      	movlt	r3, r2
 8018ff2:	6033      	str	r3, [r6, #0]
 8018ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018ff8:	4607      	mov	r7, r0
 8018ffa:	460c      	mov	r4, r1
 8018ffc:	b10a      	cbz	r2, 8019002 <_printf_common+0x26>
 8018ffe:	3301      	adds	r3, #1
 8019000:	6033      	str	r3, [r6, #0]
 8019002:	6823      	ldr	r3, [r4, #0]
 8019004:	0699      	lsls	r1, r3, #26
 8019006:	bf42      	ittt	mi
 8019008:	6833      	ldrmi	r3, [r6, #0]
 801900a:	3302      	addmi	r3, #2
 801900c:	6033      	strmi	r3, [r6, #0]
 801900e:	6825      	ldr	r5, [r4, #0]
 8019010:	f015 0506 	ands.w	r5, r5, #6
 8019014:	d106      	bne.n	8019024 <_printf_common+0x48>
 8019016:	f104 0a19 	add.w	sl, r4, #25
 801901a:	68e3      	ldr	r3, [r4, #12]
 801901c:	6832      	ldr	r2, [r6, #0]
 801901e:	1a9b      	subs	r3, r3, r2
 8019020:	42ab      	cmp	r3, r5
 8019022:	dc26      	bgt.n	8019072 <_printf_common+0x96>
 8019024:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019028:	1e13      	subs	r3, r2, #0
 801902a:	6822      	ldr	r2, [r4, #0]
 801902c:	bf18      	it	ne
 801902e:	2301      	movne	r3, #1
 8019030:	0692      	lsls	r2, r2, #26
 8019032:	d42b      	bmi.n	801908c <_printf_common+0xb0>
 8019034:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019038:	4649      	mov	r1, r9
 801903a:	4638      	mov	r0, r7
 801903c:	47c0      	blx	r8
 801903e:	3001      	adds	r0, #1
 8019040:	d01e      	beq.n	8019080 <_printf_common+0xa4>
 8019042:	6823      	ldr	r3, [r4, #0]
 8019044:	68e5      	ldr	r5, [r4, #12]
 8019046:	6832      	ldr	r2, [r6, #0]
 8019048:	f003 0306 	and.w	r3, r3, #6
 801904c:	2b04      	cmp	r3, #4
 801904e:	bf08      	it	eq
 8019050:	1aad      	subeq	r5, r5, r2
 8019052:	68a3      	ldr	r3, [r4, #8]
 8019054:	6922      	ldr	r2, [r4, #16]
 8019056:	bf0c      	ite	eq
 8019058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801905c:	2500      	movne	r5, #0
 801905e:	4293      	cmp	r3, r2
 8019060:	bfc4      	itt	gt
 8019062:	1a9b      	subgt	r3, r3, r2
 8019064:	18ed      	addgt	r5, r5, r3
 8019066:	2600      	movs	r6, #0
 8019068:	341a      	adds	r4, #26
 801906a:	42b5      	cmp	r5, r6
 801906c:	d11a      	bne.n	80190a4 <_printf_common+0xc8>
 801906e:	2000      	movs	r0, #0
 8019070:	e008      	b.n	8019084 <_printf_common+0xa8>
 8019072:	2301      	movs	r3, #1
 8019074:	4652      	mov	r2, sl
 8019076:	4649      	mov	r1, r9
 8019078:	4638      	mov	r0, r7
 801907a:	47c0      	blx	r8
 801907c:	3001      	adds	r0, #1
 801907e:	d103      	bne.n	8019088 <_printf_common+0xac>
 8019080:	f04f 30ff 	mov.w	r0, #4294967295
 8019084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019088:	3501      	adds	r5, #1
 801908a:	e7c6      	b.n	801901a <_printf_common+0x3e>
 801908c:	18e1      	adds	r1, r4, r3
 801908e:	1c5a      	adds	r2, r3, #1
 8019090:	2030      	movs	r0, #48	; 0x30
 8019092:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019096:	4422      	add	r2, r4
 8019098:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801909c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80190a0:	3302      	adds	r3, #2
 80190a2:	e7c7      	b.n	8019034 <_printf_common+0x58>
 80190a4:	2301      	movs	r3, #1
 80190a6:	4622      	mov	r2, r4
 80190a8:	4649      	mov	r1, r9
 80190aa:	4638      	mov	r0, r7
 80190ac:	47c0      	blx	r8
 80190ae:	3001      	adds	r0, #1
 80190b0:	d0e6      	beq.n	8019080 <_printf_common+0xa4>
 80190b2:	3601      	adds	r6, #1
 80190b4:	e7d9      	b.n	801906a <_printf_common+0x8e>
	...

080190b8 <_printf_i>:
 80190b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80190bc:	460c      	mov	r4, r1
 80190be:	4691      	mov	r9, r2
 80190c0:	7e27      	ldrb	r7, [r4, #24]
 80190c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80190c4:	2f78      	cmp	r7, #120	; 0x78
 80190c6:	4680      	mov	r8, r0
 80190c8:	469a      	mov	sl, r3
 80190ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80190ce:	d807      	bhi.n	80190e0 <_printf_i+0x28>
 80190d0:	2f62      	cmp	r7, #98	; 0x62
 80190d2:	d80a      	bhi.n	80190ea <_printf_i+0x32>
 80190d4:	2f00      	cmp	r7, #0
 80190d6:	f000 80d8 	beq.w	801928a <_printf_i+0x1d2>
 80190da:	2f58      	cmp	r7, #88	; 0x58
 80190dc:	f000 80a3 	beq.w	8019226 <_printf_i+0x16e>
 80190e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80190e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80190e8:	e03a      	b.n	8019160 <_printf_i+0xa8>
 80190ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80190ee:	2b15      	cmp	r3, #21
 80190f0:	d8f6      	bhi.n	80190e0 <_printf_i+0x28>
 80190f2:	a001      	add	r0, pc, #4	; (adr r0, 80190f8 <_printf_i+0x40>)
 80190f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80190f8:	08019151 	.word	0x08019151
 80190fc:	08019165 	.word	0x08019165
 8019100:	080190e1 	.word	0x080190e1
 8019104:	080190e1 	.word	0x080190e1
 8019108:	080190e1 	.word	0x080190e1
 801910c:	080190e1 	.word	0x080190e1
 8019110:	08019165 	.word	0x08019165
 8019114:	080190e1 	.word	0x080190e1
 8019118:	080190e1 	.word	0x080190e1
 801911c:	080190e1 	.word	0x080190e1
 8019120:	080190e1 	.word	0x080190e1
 8019124:	08019271 	.word	0x08019271
 8019128:	08019195 	.word	0x08019195
 801912c:	08019253 	.word	0x08019253
 8019130:	080190e1 	.word	0x080190e1
 8019134:	080190e1 	.word	0x080190e1
 8019138:	08019293 	.word	0x08019293
 801913c:	080190e1 	.word	0x080190e1
 8019140:	08019195 	.word	0x08019195
 8019144:	080190e1 	.word	0x080190e1
 8019148:	080190e1 	.word	0x080190e1
 801914c:	0801925b 	.word	0x0801925b
 8019150:	680b      	ldr	r3, [r1, #0]
 8019152:	1d1a      	adds	r2, r3, #4
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	600a      	str	r2, [r1, #0]
 8019158:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801915c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019160:	2301      	movs	r3, #1
 8019162:	e0a3      	b.n	80192ac <_printf_i+0x1f4>
 8019164:	6825      	ldr	r5, [r4, #0]
 8019166:	6808      	ldr	r0, [r1, #0]
 8019168:	062e      	lsls	r6, r5, #24
 801916a:	f100 0304 	add.w	r3, r0, #4
 801916e:	d50a      	bpl.n	8019186 <_printf_i+0xce>
 8019170:	6805      	ldr	r5, [r0, #0]
 8019172:	600b      	str	r3, [r1, #0]
 8019174:	2d00      	cmp	r5, #0
 8019176:	da03      	bge.n	8019180 <_printf_i+0xc8>
 8019178:	232d      	movs	r3, #45	; 0x2d
 801917a:	426d      	negs	r5, r5
 801917c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019180:	485e      	ldr	r0, [pc, #376]	; (80192fc <_printf_i+0x244>)
 8019182:	230a      	movs	r3, #10
 8019184:	e019      	b.n	80191ba <_printf_i+0x102>
 8019186:	f015 0f40 	tst.w	r5, #64	; 0x40
 801918a:	6805      	ldr	r5, [r0, #0]
 801918c:	600b      	str	r3, [r1, #0]
 801918e:	bf18      	it	ne
 8019190:	b22d      	sxthne	r5, r5
 8019192:	e7ef      	b.n	8019174 <_printf_i+0xbc>
 8019194:	680b      	ldr	r3, [r1, #0]
 8019196:	6825      	ldr	r5, [r4, #0]
 8019198:	1d18      	adds	r0, r3, #4
 801919a:	6008      	str	r0, [r1, #0]
 801919c:	0628      	lsls	r0, r5, #24
 801919e:	d501      	bpl.n	80191a4 <_printf_i+0xec>
 80191a0:	681d      	ldr	r5, [r3, #0]
 80191a2:	e002      	b.n	80191aa <_printf_i+0xf2>
 80191a4:	0669      	lsls	r1, r5, #25
 80191a6:	d5fb      	bpl.n	80191a0 <_printf_i+0xe8>
 80191a8:	881d      	ldrh	r5, [r3, #0]
 80191aa:	4854      	ldr	r0, [pc, #336]	; (80192fc <_printf_i+0x244>)
 80191ac:	2f6f      	cmp	r7, #111	; 0x6f
 80191ae:	bf0c      	ite	eq
 80191b0:	2308      	moveq	r3, #8
 80191b2:	230a      	movne	r3, #10
 80191b4:	2100      	movs	r1, #0
 80191b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80191ba:	6866      	ldr	r6, [r4, #4]
 80191bc:	60a6      	str	r6, [r4, #8]
 80191be:	2e00      	cmp	r6, #0
 80191c0:	bfa2      	ittt	ge
 80191c2:	6821      	ldrge	r1, [r4, #0]
 80191c4:	f021 0104 	bicge.w	r1, r1, #4
 80191c8:	6021      	strge	r1, [r4, #0]
 80191ca:	b90d      	cbnz	r5, 80191d0 <_printf_i+0x118>
 80191cc:	2e00      	cmp	r6, #0
 80191ce:	d04d      	beq.n	801926c <_printf_i+0x1b4>
 80191d0:	4616      	mov	r6, r2
 80191d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80191d6:	fb03 5711 	mls	r7, r3, r1, r5
 80191da:	5dc7      	ldrb	r7, [r0, r7]
 80191dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80191e0:	462f      	mov	r7, r5
 80191e2:	42bb      	cmp	r3, r7
 80191e4:	460d      	mov	r5, r1
 80191e6:	d9f4      	bls.n	80191d2 <_printf_i+0x11a>
 80191e8:	2b08      	cmp	r3, #8
 80191ea:	d10b      	bne.n	8019204 <_printf_i+0x14c>
 80191ec:	6823      	ldr	r3, [r4, #0]
 80191ee:	07df      	lsls	r7, r3, #31
 80191f0:	d508      	bpl.n	8019204 <_printf_i+0x14c>
 80191f2:	6923      	ldr	r3, [r4, #16]
 80191f4:	6861      	ldr	r1, [r4, #4]
 80191f6:	4299      	cmp	r1, r3
 80191f8:	bfde      	ittt	le
 80191fa:	2330      	movle	r3, #48	; 0x30
 80191fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019200:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019204:	1b92      	subs	r2, r2, r6
 8019206:	6122      	str	r2, [r4, #16]
 8019208:	f8cd a000 	str.w	sl, [sp]
 801920c:	464b      	mov	r3, r9
 801920e:	aa03      	add	r2, sp, #12
 8019210:	4621      	mov	r1, r4
 8019212:	4640      	mov	r0, r8
 8019214:	f7ff fee2 	bl	8018fdc <_printf_common>
 8019218:	3001      	adds	r0, #1
 801921a:	d14c      	bne.n	80192b6 <_printf_i+0x1fe>
 801921c:	f04f 30ff 	mov.w	r0, #4294967295
 8019220:	b004      	add	sp, #16
 8019222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019226:	4835      	ldr	r0, [pc, #212]	; (80192fc <_printf_i+0x244>)
 8019228:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801922c:	6823      	ldr	r3, [r4, #0]
 801922e:	680e      	ldr	r6, [r1, #0]
 8019230:	061f      	lsls	r7, r3, #24
 8019232:	f856 5b04 	ldr.w	r5, [r6], #4
 8019236:	600e      	str	r6, [r1, #0]
 8019238:	d514      	bpl.n	8019264 <_printf_i+0x1ac>
 801923a:	07d9      	lsls	r1, r3, #31
 801923c:	bf44      	itt	mi
 801923e:	f043 0320 	orrmi.w	r3, r3, #32
 8019242:	6023      	strmi	r3, [r4, #0]
 8019244:	b91d      	cbnz	r5, 801924e <_printf_i+0x196>
 8019246:	6823      	ldr	r3, [r4, #0]
 8019248:	f023 0320 	bic.w	r3, r3, #32
 801924c:	6023      	str	r3, [r4, #0]
 801924e:	2310      	movs	r3, #16
 8019250:	e7b0      	b.n	80191b4 <_printf_i+0xfc>
 8019252:	6823      	ldr	r3, [r4, #0]
 8019254:	f043 0320 	orr.w	r3, r3, #32
 8019258:	6023      	str	r3, [r4, #0]
 801925a:	2378      	movs	r3, #120	; 0x78
 801925c:	4828      	ldr	r0, [pc, #160]	; (8019300 <_printf_i+0x248>)
 801925e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019262:	e7e3      	b.n	801922c <_printf_i+0x174>
 8019264:	065e      	lsls	r6, r3, #25
 8019266:	bf48      	it	mi
 8019268:	b2ad      	uxthmi	r5, r5
 801926a:	e7e6      	b.n	801923a <_printf_i+0x182>
 801926c:	4616      	mov	r6, r2
 801926e:	e7bb      	b.n	80191e8 <_printf_i+0x130>
 8019270:	680b      	ldr	r3, [r1, #0]
 8019272:	6826      	ldr	r6, [r4, #0]
 8019274:	6960      	ldr	r0, [r4, #20]
 8019276:	1d1d      	adds	r5, r3, #4
 8019278:	600d      	str	r5, [r1, #0]
 801927a:	0635      	lsls	r5, r6, #24
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	d501      	bpl.n	8019284 <_printf_i+0x1cc>
 8019280:	6018      	str	r0, [r3, #0]
 8019282:	e002      	b.n	801928a <_printf_i+0x1d2>
 8019284:	0671      	lsls	r1, r6, #25
 8019286:	d5fb      	bpl.n	8019280 <_printf_i+0x1c8>
 8019288:	8018      	strh	r0, [r3, #0]
 801928a:	2300      	movs	r3, #0
 801928c:	6123      	str	r3, [r4, #16]
 801928e:	4616      	mov	r6, r2
 8019290:	e7ba      	b.n	8019208 <_printf_i+0x150>
 8019292:	680b      	ldr	r3, [r1, #0]
 8019294:	1d1a      	adds	r2, r3, #4
 8019296:	600a      	str	r2, [r1, #0]
 8019298:	681e      	ldr	r6, [r3, #0]
 801929a:	6862      	ldr	r2, [r4, #4]
 801929c:	2100      	movs	r1, #0
 801929e:	4630      	mov	r0, r6
 80192a0:	f7e6 ff9e 	bl	80001e0 <memchr>
 80192a4:	b108      	cbz	r0, 80192aa <_printf_i+0x1f2>
 80192a6:	1b80      	subs	r0, r0, r6
 80192a8:	6060      	str	r0, [r4, #4]
 80192aa:	6863      	ldr	r3, [r4, #4]
 80192ac:	6123      	str	r3, [r4, #16]
 80192ae:	2300      	movs	r3, #0
 80192b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80192b4:	e7a8      	b.n	8019208 <_printf_i+0x150>
 80192b6:	6923      	ldr	r3, [r4, #16]
 80192b8:	4632      	mov	r2, r6
 80192ba:	4649      	mov	r1, r9
 80192bc:	4640      	mov	r0, r8
 80192be:	47d0      	blx	sl
 80192c0:	3001      	adds	r0, #1
 80192c2:	d0ab      	beq.n	801921c <_printf_i+0x164>
 80192c4:	6823      	ldr	r3, [r4, #0]
 80192c6:	079b      	lsls	r3, r3, #30
 80192c8:	d413      	bmi.n	80192f2 <_printf_i+0x23a>
 80192ca:	68e0      	ldr	r0, [r4, #12]
 80192cc:	9b03      	ldr	r3, [sp, #12]
 80192ce:	4298      	cmp	r0, r3
 80192d0:	bfb8      	it	lt
 80192d2:	4618      	movlt	r0, r3
 80192d4:	e7a4      	b.n	8019220 <_printf_i+0x168>
 80192d6:	2301      	movs	r3, #1
 80192d8:	4632      	mov	r2, r6
 80192da:	4649      	mov	r1, r9
 80192dc:	4640      	mov	r0, r8
 80192de:	47d0      	blx	sl
 80192e0:	3001      	adds	r0, #1
 80192e2:	d09b      	beq.n	801921c <_printf_i+0x164>
 80192e4:	3501      	adds	r5, #1
 80192e6:	68e3      	ldr	r3, [r4, #12]
 80192e8:	9903      	ldr	r1, [sp, #12]
 80192ea:	1a5b      	subs	r3, r3, r1
 80192ec:	42ab      	cmp	r3, r5
 80192ee:	dcf2      	bgt.n	80192d6 <_printf_i+0x21e>
 80192f0:	e7eb      	b.n	80192ca <_printf_i+0x212>
 80192f2:	2500      	movs	r5, #0
 80192f4:	f104 0619 	add.w	r6, r4, #25
 80192f8:	e7f5      	b.n	80192e6 <_printf_i+0x22e>
 80192fa:	bf00      	nop
 80192fc:	0801bcba 	.word	0x0801bcba
 8019300:	0801bccb 	.word	0x0801bccb

08019304 <_sbrk_r>:
 8019304:	b538      	push	{r3, r4, r5, lr}
 8019306:	4d06      	ldr	r5, [pc, #24]	; (8019320 <_sbrk_r+0x1c>)
 8019308:	2300      	movs	r3, #0
 801930a:	4604      	mov	r4, r0
 801930c:	4608      	mov	r0, r1
 801930e:	602b      	str	r3, [r5, #0]
 8019310:	f7f8 f936 	bl	8011580 <_sbrk>
 8019314:	1c43      	adds	r3, r0, #1
 8019316:	d102      	bne.n	801931e <_sbrk_r+0x1a>
 8019318:	682b      	ldr	r3, [r5, #0]
 801931a:	b103      	cbz	r3, 801931e <_sbrk_r+0x1a>
 801931c:	6023      	str	r3, [r4, #0]
 801931e:	bd38      	pop	{r3, r4, r5, pc}
 8019320:	20000b18 	.word	0x20000b18

08019324 <siprintf>:
 8019324:	b40e      	push	{r1, r2, r3}
 8019326:	b500      	push	{lr}
 8019328:	b09c      	sub	sp, #112	; 0x70
 801932a:	ab1d      	add	r3, sp, #116	; 0x74
 801932c:	9002      	str	r0, [sp, #8]
 801932e:	9006      	str	r0, [sp, #24]
 8019330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019334:	4809      	ldr	r0, [pc, #36]	; (801935c <siprintf+0x38>)
 8019336:	9107      	str	r1, [sp, #28]
 8019338:	9104      	str	r1, [sp, #16]
 801933a:	4909      	ldr	r1, [pc, #36]	; (8019360 <siprintf+0x3c>)
 801933c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019340:	9105      	str	r1, [sp, #20]
 8019342:	6800      	ldr	r0, [r0, #0]
 8019344:	9301      	str	r3, [sp, #4]
 8019346:	a902      	add	r1, sp, #8
 8019348:	f001 fb1e 	bl	801a988 <_svfiprintf_r>
 801934c:	9b02      	ldr	r3, [sp, #8]
 801934e:	2200      	movs	r2, #0
 8019350:	701a      	strb	r2, [r3, #0]
 8019352:	b01c      	add	sp, #112	; 0x70
 8019354:	f85d eb04 	ldr.w	lr, [sp], #4
 8019358:	b003      	add	sp, #12
 801935a:	4770      	bx	lr
 801935c:	2000002c 	.word	0x2000002c
 8019360:	ffff0208 	.word	0xffff0208

08019364 <__sread>:
 8019364:	b510      	push	{r4, lr}
 8019366:	460c      	mov	r4, r1
 8019368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801936c:	f001 fc0c 	bl	801ab88 <_read_r>
 8019370:	2800      	cmp	r0, #0
 8019372:	bfab      	itete	ge
 8019374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019376:	89a3      	ldrhlt	r3, [r4, #12]
 8019378:	181b      	addge	r3, r3, r0
 801937a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801937e:	bfac      	ite	ge
 8019380:	6563      	strge	r3, [r4, #84]	; 0x54
 8019382:	81a3      	strhlt	r3, [r4, #12]
 8019384:	bd10      	pop	{r4, pc}

08019386 <__swrite>:
 8019386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801938a:	461f      	mov	r7, r3
 801938c:	898b      	ldrh	r3, [r1, #12]
 801938e:	05db      	lsls	r3, r3, #23
 8019390:	4605      	mov	r5, r0
 8019392:	460c      	mov	r4, r1
 8019394:	4616      	mov	r6, r2
 8019396:	d505      	bpl.n	80193a4 <__swrite+0x1e>
 8019398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801939c:	2302      	movs	r3, #2
 801939e:	2200      	movs	r2, #0
 80193a0:	f000 fee4 	bl	801a16c <_lseek_r>
 80193a4:	89a3      	ldrh	r3, [r4, #12]
 80193a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80193aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80193ae:	81a3      	strh	r3, [r4, #12]
 80193b0:	4632      	mov	r2, r6
 80193b2:	463b      	mov	r3, r7
 80193b4:	4628      	mov	r0, r5
 80193b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80193ba:	f000 b817 	b.w	80193ec <_write_r>

080193be <__sseek>:
 80193be:	b510      	push	{r4, lr}
 80193c0:	460c      	mov	r4, r1
 80193c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80193c6:	f000 fed1 	bl	801a16c <_lseek_r>
 80193ca:	1c43      	adds	r3, r0, #1
 80193cc:	89a3      	ldrh	r3, [r4, #12]
 80193ce:	bf15      	itete	ne
 80193d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80193d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80193d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80193da:	81a3      	strheq	r3, [r4, #12]
 80193dc:	bf18      	it	ne
 80193de:	81a3      	strhne	r3, [r4, #12]
 80193e0:	bd10      	pop	{r4, pc}

080193e2 <__sclose>:
 80193e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80193e6:	f000 b813 	b.w	8019410 <_close_r>
	...

080193ec <_write_r>:
 80193ec:	b538      	push	{r3, r4, r5, lr}
 80193ee:	4d07      	ldr	r5, [pc, #28]	; (801940c <_write_r+0x20>)
 80193f0:	4604      	mov	r4, r0
 80193f2:	4608      	mov	r0, r1
 80193f4:	4611      	mov	r1, r2
 80193f6:	2200      	movs	r2, #0
 80193f8:	602a      	str	r2, [r5, #0]
 80193fa:	461a      	mov	r2, r3
 80193fc:	f7f8 f86f 	bl	80114de <_write>
 8019400:	1c43      	adds	r3, r0, #1
 8019402:	d102      	bne.n	801940a <_write_r+0x1e>
 8019404:	682b      	ldr	r3, [r5, #0]
 8019406:	b103      	cbz	r3, 801940a <_write_r+0x1e>
 8019408:	6023      	str	r3, [r4, #0]
 801940a:	bd38      	pop	{r3, r4, r5, pc}
 801940c:	20000b18 	.word	0x20000b18

08019410 <_close_r>:
 8019410:	b538      	push	{r3, r4, r5, lr}
 8019412:	4d06      	ldr	r5, [pc, #24]	; (801942c <_close_r+0x1c>)
 8019414:	2300      	movs	r3, #0
 8019416:	4604      	mov	r4, r0
 8019418:	4608      	mov	r0, r1
 801941a:	602b      	str	r3, [r5, #0]
 801941c:	f7f8 f87b 	bl	8011516 <_close>
 8019420:	1c43      	adds	r3, r0, #1
 8019422:	d102      	bne.n	801942a <_close_r+0x1a>
 8019424:	682b      	ldr	r3, [r5, #0]
 8019426:	b103      	cbz	r3, 801942a <_close_r+0x1a>
 8019428:	6023      	str	r3, [r4, #0]
 801942a:	bd38      	pop	{r3, r4, r5, pc}
 801942c:	20000b18 	.word	0x20000b18

08019430 <quorem>:
 8019430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019434:	6903      	ldr	r3, [r0, #16]
 8019436:	690c      	ldr	r4, [r1, #16]
 8019438:	42a3      	cmp	r3, r4
 801943a:	4607      	mov	r7, r0
 801943c:	f2c0 8081 	blt.w	8019542 <quorem+0x112>
 8019440:	3c01      	subs	r4, #1
 8019442:	f101 0814 	add.w	r8, r1, #20
 8019446:	f100 0514 	add.w	r5, r0, #20
 801944a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801944e:	9301      	str	r3, [sp, #4]
 8019450:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019454:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019458:	3301      	adds	r3, #1
 801945a:	429a      	cmp	r2, r3
 801945c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019460:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019464:	fbb2 f6f3 	udiv	r6, r2, r3
 8019468:	d331      	bcc.n	80194ce <quorem+0x9e>
 801946a:	f04f 0e00 	mov.w	lr, #0
 801946e:	4640      	mov	r0, r8
 8019470:	46ac      	mov	ip, r5
 8019472:	46f2      	mov	sl, lr
 8019474:	f850 2b04 	ldr.w	r2, [r0], #4
 8019478:	b293      	uxth	r3, r2
 801947a:	fb06 e303 	mla	r3, r6, r3, lr
 801947e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8019482:	b29b      	uxth	r3, r3
 8019484:	ebaa 0303 	sub.w	r3, sl, r3
 8019488:	0c12      	lsrs	r2, r2, #16
 801948a:	f8dc a000 	ldr.w	sl, [ip]
 801948e:	fb06 e202 	mla	r2, r6, r2, lr
 8019492:	fa13 f38a 	uxtah	r3, r3, sl
 8019496:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801949a:	fa1f fa82 	uxth.w	sl, r2
 801949e:	f8dc 2000 	ldr.w	r2, [ip]
 80194a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80194a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80194aa:	b29b      	uxth	r3, r3
 80194ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80194b0:	4581      	cmp	r9, r0
 80194b2:	f84c 3b04 	str.w	r3, [ip], #4
 80194b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80194ba:	d2db      	bcs.n	8019474 <quorem+0x44>
 80194bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80194c0:	b92b      	cbnz	r3, 80194ce <quorem+0x9e>
 80194c2:	9b01      	ldr	r3, [sp, #4]
 80194c4:	3b04      	subs	r3, #4
 80194c6:	429d      	cmp	r5, r3
 80194c8:	461a      	mov	r2, r3
 80194ca:	d32e      	bcc.n	801952a <quorem+0xfa>
 80194cc:	613c      	str	r4, [r7, #16]
 80194ce:	4638      	mov	r0, r7
 80194d0:	f001 f8f0 	bl	801a6b4 <__mcmp>
 80194d4:	2800      	cmp	r0, #0
 80194d6:	db24      	blt.n	8019522 <quorem+0xf2>
 80194d8:	3601      	adds	r6, #1
 80194da:	4628      	mov	r0, r5
 80194dc:	f04f 0c00 	mov.w	ip, #0
 80194e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80194e4:	f8d0 e000 	ldr.w	lr, [r0]
 80194e8:	b293      	uxth	r3, r2
 80194ea:	ebac 0303 	sub.w	r3, ip, r3
 80194ee:	0c12      	lsrs	r2, r2, #16
 80194f0:	fa13 f38e 	uxtah	r3, r3, lr
 80194f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80194f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80194fc:	b29b      	uxth	r3, r3
 80194fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019502:	45c1      	cmp	r9, r8
 8019504:	f840 3b04 	str.w	r3, [r0], #4
 8019508:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801950c:	d2e8      	bcs.n	80194e0 <quorem+0xb0>
 801950e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019516:	b922      	cbnz	r2, 8019522 <quorem+0xf2>
 8019518:	3b04      	subs	r3, #4
 801951a:	429d      	cmp	r5, r3
 801951c:	461a      	mov	r2, r3
 801951e:	d30a      	bcc.n	8019536 <quorem+0x106>
 8019520:	613c      	str	r4, [r7, #16]
 8019522:	4630      	mov	r0, r6
 8019524:	b003      	add	sp, #12
 8019526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801952a:	6812      	ldr	r2, [r2, #0]
 801952c:	3b04      	subs	r3, #4
 801952e:	2a00      	cmp	r2, #0
 8019530:	d1cc      	bne.n	80194cc <quorem+0x9c>
 8019532:	3c01      	subs	r4, #1
 8019534:	e7c7      	b.n	80194c6 <quorem+0x96>
 8019536:	6812      	ldr	r2, [r2, #0]
 8019538:	3b04      	subs	r3, #4
 801953a:	2a00      	cmp	r2, #0
 801953c:	d1f0      	bne.n	8019520 <quorem+0xf0>
 801953e:	3c01      	subs	r4, #1
 8019540:	e7eb      	b.n	801951a <quorem+0xea>
 8019542:	2000      	movs	r0, #0
 8019544:	e7ee      	b.n	8019524 <quorem+0xf4>
	...

08019548 <_dtoa_r>:
 8019548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801954c:	ed2d 8b02 	vpush	{d8}
 8019550:	ec57 6b10 	vmov	r6, r7, d0
 8019554:	b095      	sub	sp, #84	; 0x54
 8019556:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019558:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801955c:	9105      	str	r1, [sp, #20]
 801955e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8019562:	4604      	mov	r4, r0
 8019564:	9209      	str	r2, [sp, #36]	; 0x24
 8019566:	930f      	str	r3, [sp, #60]	; 0x3c
 8019568:	b975      	cbnz	r5, 8019588 <_dtoa_r+0x40>
 801956a:	2010      	movs	r0, #16
 801956c:	f000 fe10 	bl	801a190 <malloc>
 8019570:	4602      	mov	r2, r0
 8019572:	6260      	str	r0, [r4, #36]	; 0x24
 8019574:	b920      	cbnz	r0, 8019580 <_dtoa_r+0x38>
 8019576:	4bb2      	ldr	r3, [pc, #712]	; (8019840 <_dtoa_r+0x2f8>)
 8019578:	21ea      	movs	r1, #234	; 0xea
 801957a:	48b2      	ldr	r0, [pc, #712]	; (8019844 <_dtoa_r+0x2fc>)
 801957c:	f001 fb16 	bl	801abac <__assert_func>
 8019580:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019584:	6005      	str	r5, [r0, #0]
 8019586:	60c5      	str	r5, [r0, #12]
 8019588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801958a:	6819      	ldr	r1, [r3, #0]
 801958c:	b151      	cbz	r1, 80195a4 <_dtoa_r+0x5c>
 801958e:	685a      	ldr	r2, [r3, #4]
 8019590:	604a      	str	r2, [r1, #4]
 8019592:	2301      	movs	r3, #1
 8019594:	4093      	lsls	r3, r2
 8019596:	608b      	str	r3, [r1, #8]
 8019598:	4620      	mov	r0, r4
 801959a:	f000 fe4d 	bl	801a238 <_Bfree>
 801959e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80195a0:	2200      	movs	r2, #0
 80195a2:	601a      	str	r2, [r3, #0]
 80195a4:	1e3b      	subs	r3, r7, #0
 80195a6:	bfb9      	ittee	lt
 80195a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80195ac:	9303      	strlt	r3, [sp, #12]
 80195ae:	2300      	movge	r3, #0
 80195b0:	f8c8 3000 	strge.w	r3, [r8]
 80195b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80195b8:	4ba3      	ldr	r3, [pc, #652]	; (8019848 <_dtoa_r+0x300>)
 80195ba:	bfbc      	itt	lt
 80195bc:	2201      	movlt	r2, #1
 80195be:	f8c8 2000 	strlt.w	r2, [r8]
 80195c2:	ea33 0309 	bics.w	r3, r3, r9
 80195c6:	d11b      	bne.n	8019600 <_dtoa_r+0xb8>
 80195c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80195ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80195ce:	6013      	str	r3, [r2, #0]
 80195d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80195d4:	4333      	orrs	r3, r6
 80195d6:	f000 857a 	beq.w	801a0ce <_dtoa_r+0xb86>
 80195da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80195dc:	b963      	cbnz	r3, 80195f8 <_dtoa_r+0xb0>
 80195de:	4b9b      	ldr	r3, [pc, #620]	; (801984c <_dtoa_r+0x304>)
 80195e0:	e024      	b.n	801962c <_dtoa_r+0xe4>
 80195e2:	4b9b      	ldr	r3, [pc, #620]	; (8019850 <_dtoa_r+0x308>)
 80195e4:	9300      	str	r3, [sp, #0]
 80195e6:	3308      	adds	r3, #8
 80195e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80195ea:	6013      	str	r3, [r2, #0]
 80195ec:	9800      	ldr	r0, [sp, #0]
 80195ee:	b015      	add	sp, #84	; 0x54
 80195f0:	ecbd 8b02 	vpop	{d8}
 80195f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195f8:	4b94      	ldr	r3, [pc, #592]	; (801984c <_dtoa_r+0x304>)
 80195fa:	9300      	str	r3, [sp, #0]
 80195fc:	3303      	adds	r3, #3
 80195fe:	e7f3      	b.n	80195e8 <_dtoa_r+0xa0>
 8019600:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019604:	2200      	movs	r2, #0
 8019606:	ec51 0b17 	vmov	r0, r1, d7
 801960a:	2300      	movs	r3, #0
 801960c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8019610:	f7e7 fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8019614:	4680      	mov	r8, r0
 8019616:	b158      	cbz	r0, 8019630 <_dtoa_r+0xe8>
 8019618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801961a:	2301      	movs	r3, #1
 801961c:	6013      	str	r3, [r2, #0]
 801961e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019620:	2b00      	cmp	r3, #0
 8019622:	f000 8551 	beq.w	801a0c8 <_dtoa_r+0xb80>
 8019626:	488b      	ldr	r0, [pc, #556]	; (8019854 <_dtoa_r+0x30c>)
 8019628:	6018      	str	r0, [r3, #0]
 801962a:	1e43      	subs	r3, r0, #1
 801962c:	9300      	str	r3, [sp, #0]
 801962e:	e7dd      	b.n	80195ec <_dtoa_r+0xa4>
 8019630:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8019634:	aa12      	add	r2, sp, #72	; 0x48
 8019636:	a913      	add	r1, sp, #76	; 0x4c
 8019638:	4620      	mov	r0, r4
 801963a:	f001 f8df 	bl	801a7fc <__d2b>
 801963e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019642:	4683      	mov	fp, r0
 8019644:	2d00      	cmp	r5, #0
 8019646:	d07c      	beq.n	8019742 <_dtoa_r+0x1fa>
 8019648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801964a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801964e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019652:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8019656:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801965a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801965e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019662:	4b7d      	ldr	r3, [pc, #500]	; (8019858 <_dtoa_r+0x310>)
 8019664:	2200      	movs	r2, #0
 8019666:	4630      	mov	r0, r6
 8019668:	4639      	mov	r1, r7
 801966a:	f7e6 fe0d 	bl	8000288 <__aeabi_dsub>
 801966e:	a36e      	add	r3, pc, #440	; (adr r3, 8019828 <_dtoa_r+0x2e0>)
 8019670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019674:	f7e6 ffc0 	bl	80005f8 <__aeabi_dmul>
 8019678:	a36d      	add	r3, pc, #436	; (adr r3, 8019830 <_dtoa_r+0x2e8>)
 801967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801967e:	f7e6 fe05 	bl	800028c <__adddf3>
 8019682:	4606      	mov	r6, r0
 8019684:	4628      	mov	r0, r5
 8019686:	460f      	mov	r7, r1
 8019688:	f7e6 ff4c 	bl	8000524 <__aeabi_i2d>
 801968c:	a36a      	add	r3, pc, #424	; (adr r3, 8019838 <_dtoa_r+0x2f0>)
 801968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019692:	f7e6 ffb1 	bl	80005f8 <__aeabi_dmul>
 8019696:	4602      	mov	r2, r0
 8019698:	460b      	mov	r3, r1
 801969a:	4630      	mov	r0, r6
 801969c:	4639      	mov	r1, r7
 801969e:	f7e6 fdf5 	bl	800028c <__adddf3>
 80196a2:	4606      	mov	r6, r0
 80196a4:	460f      	mov	r7, r1
 80196a6:	f7e7 fa57 	bl	8000b58 <__aeabi_d2iz>
 80196aa:	2200      	movs	r2, #0
 80196ac:	4682      	mov	sl, r0
 80196ae:	2300      	movs	r3, #0
 80196b0:	4630      	mov	r0, r6
 80196b2:	4639      	mov	r1, r7
 80196b4:	f7e7 fa12 	bl	8000adc <__aeabi_dcmplt>
 80196b8:	b148      	cbz	r0, 80196ce <_dtoa_r+0x186>
 80196ba:	4650      	mov	r0, sl
 80196bc:	f7e6 ff32 	bl	8000524 <__aeabi_i2d>
 80196c0:	4632      	mov	r2, r6
 80196c2:	463b      	mov	r3, r7
 80196c4:	f7e7 fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 80196c8:	b908      	cbnz	r0, 80196ce <_dtoa_r+0x186>
 80196ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80196ce:	f1ba 0f16 	cmp.w	sl, #22
 80196d2:	d854      	bhi.n	801977e <_dtoa_r+0x236>
 80196d4:	4b61      	ldr	r3, [pc, #388]	; (801985c <_dtoa_r+0x314>)
 80196d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80196da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80196e2:	f7e7 f9fb 	bl	8000adc <__aeabi_dcmplt>
 80196e6:	2800      	cmp	r0, #0
 80196e8:	d04b      	beq.n	8019782 <_dtoa_r+0x23a>
 80196ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80196ee:	2300      	movs	r3, #0
 80196f0:	930e      	str	r3, [sp, #56]	; 0x38
 80196f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80196f4:	1b5d      	subs	r5, r3, r5
 80196f6:	1e6b      	subs	r3, r5, #1
 80196f8:	9304      	str	r3, [sp, #16]
 80196fa:	bf43      	ittte	mi
 80196fc:	2300      	movmi	r3, #0
 80196fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8019702:	9304      	strmi	r3, [sp, #16]
 8019704:	f04f 0800 	movpl.w	r8, #0
 8019708:	f1ba 0f00 	cmp.w	sl, #0
 801970c:	db3b      	blt.n	8019786 <_dtoa_r+0x23e>
 801970e:	9b04      	ldr	r3, [sp, #16]
 8019710:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8019714:	4453      	add	r3, sl
 8019716:	9304      	str	r3, [sp, #16]
 8019718:	2300      	movs	r3, #0
 801971a:	9306      	str	r3, [sp, #24]
 801971c:	9b05      	ldr	r3, [sp, #20]
 801971e:	2b09      	cmp	r3, #9
 8019720:	d869      	bhi.n	80197f6 <_dtoa_r+0x2ae>
 8019722:	2b05      	cmp	r3, #5
 8019724:	bfc4      	itt	gt
 8019726:	3b04      	subgt	r3, #4
 8019728:	9305      	strgt	r3, [sp, #20]
 801972a:	9b05      	ldr	r3, [sp, #20]
 801972c:	f1a3 0302 	sub.w	r3, r3, #2
 8019730:	bfcc      	ite	gt
 8019732:	2500      	movgt	r5, #0
 8019734:	2501      	movle	r5, #1
 8019736:	2b03      	cmp	r3, #3
 8019738:	d869      	bhi.n	801980e <_dtoa_r+0x2c6>
 801973a:	e8df f003 	tbb	[pc, r3]
 801973e:	4e2c      	.short	0x4e2c
 8019740:	5a4c      	.short	0x5a4c
 8019742:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8019746:	441d      	add	r5, r3
 8019748:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801974c:	2b20      	cmp	r3, #32
 801974e:	bfc1      	itttt	gt
 8019750:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8019754:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8019758:	fa09 f303 	lslgt.w	r3, r9, r3
 801975c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8019760:	bfda      	itte	le
 8019762:	f1c3 0320 	rsble	r3, r3, #32
 8019766:	fa06 f003 	lslle.w	r0, r6, r3
 801976a:	4318      	orrgt	r0, r3
 801976c:	f7e6 feca 	bl	8000504 <__aeabi_ui2d>
 8019770:	2301      	movs	r3, #1
 8019772:	4606      	mov	r6, r0
 8019774:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8019778:	3d01      	subs	r5, #1
 801977a:	9310      	str	r3, [sp, #64]	; 0x40
 801977c:	e771      	b.n	8019662 <_dtoa_r+0x11a>
 801977e:	2301      	movs	r3, #1
 8019780:	e7b6      	b.n	80196f0 <_dtoa_r+0x1a8>
 8019782:	900e      	str	r0, [sp, #56]	; 0x38
 8019784:	e7b5      	b.n	80196f2 <_dtoa_r+0x1aa>
 8019786:	f1ca 0300 	rsb	r3, sl, #0
 801978a:	9306      	str	r3, [sp, #24]
 801978c:	2300      	movs	r3, #0
 801978e:	eba8 080a 	sub.w	r8, r8, sl
 8019792:	930d      	str	r3, [sp, #52]	; 0x34
 8019794:	e7c2      	b.n	801971c <_dtoa_r+0x1d4>
 8019796:	2300      	movs	r3, #0
 8019798:	9308      	str	r3, [sp, #32]
 801979a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801979c:	2b00      	cmp	r3, #0
 801979e:	dc39      	bgt.n	8019814 <_dtoa_r+0x2cc>
 80197a0:	f04f 0901 	mov.w	r9, #1
 80197a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80197a8:	464b      	mov	r3, r9
 80197aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80197ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80197b0:	2200      	movs	r2, #0
 80197b2:	6042      	str	r2, [r0, #4]
 80197b4:	2204      	movs	r2, #4
 80197b6:	f102 0614 	add.w	r6, r2, #20
 80197ba:	429e      	cmp	r6, r3
 80197bc:	6841      	ldr	r1, [r0, #4]
 80197be:	d92f      	bls.n	8019820 <_dtoa_r+0x2d8>
 80197c0:	4620      	mov	r0, r4
 80197c2:	f000 fcf9 	bl	801a1b8 <_Balloc>
 80197c6:	9000      	str	r0, [sp, #0]
 80197c8:	2800      	cmp	r0, #0
 80197ca:	d14b      	bne.n	8019864 <_dtoa_r+0x31c>
 80197cc:	4b24      	ldr	r3, [pc, #144]	; (8019860 <_dtoa_r+0x318>)
 80197ce:	4602      	mov	r2, r0
 80197d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80197d4:	e6d1      	b.n	801957a <_dtoa_r+0x32>
 80197d6:	2301      	movs	r3, #1
 80197d8:	e7de      	b.n	8019798 <_dtoa_r+0x250>
 80197da:	2300      	movs	r3, #0
 80197dc:	9308      	str	r3, [sp, #32]
 80197de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197e0:	eb0a 0903 	add.w	r9, sl, r3
 80197e4:	f109 0301 	add.w	r3, r9, #1
 80197e8:	2b01      	cmp	r3, #1
 80197ea:	9301      	str	r3, [sp, #4]
 80197ec:	bfb8      	it	lt
 80197ee:	2301      	movlt	r3, #1
 80197f0:	e7dd      	b.n	80197ae <_dtoa_r+0x266>
 80197f2:	2301      	movs	r3, #1
 80197f4:	e7f2      	b.n	80197dc <_dtoa_r+0x294>
 80197f6:	2501      	movs	r5, #1
 80197f8:	2300      	movs	r3, #0
 80197fa:	9305      	str	r3, [sp, #20]
 80197fc:	9508      	str	r5, [sp, #32]
 80197fe:	f04f 39ff 	mov.w	r9, #4294967295
 8019802:	2200      	movs	r2, #0
 8019804:	f8cd 9004 	str.w	r9, [sp, #4]
 8019808:	2312      	movs	r3, #18
 801980a:	9209      	str	r2, [sp, #36]	; 0x24
 801980c:	e7cf      	b.n	80197ae <_dtoa_r+0x266>
 801980e:	2301      	movs	r3, #1
 8019810:	9308      	str	r3, [sp, #32]
 8019812:	e7f4      	b.n	80197fe <_dtoa_r+0x2b6>
 8019814:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019818:	f8cd 9004 	str.w	r9, [sp, #4]
 801981c:	464b      	mov	r3, r9
 801981e:	e7c6      	b.n	80197ae <_dtoa_r+0x266>
 8019820:	3101      	adds	r1, #1
 8019822:	6041      	str	r1, [r0, #4]
 8019824:	0052      	lsls	r2, r2, #1
 8019826:	e7c6      	b.n	80197b6 <_dtoa_r+0x26e>
 8019828:	636f4361 	.word	0x636f4361
 801982c:	3fd287a7 	.word	0x3fd287a7
 8019830:	8b60c8b3 	.word	0x8b60c8b3
 8019834:	3fc68a28 	.word	0x3fc68a28
 8019838:	509f79fb 	.word	0x509f79fb
 801983c:	3fd34413 	.word	0x3fd34413
 8019840:	0801bce9 	.word	0x0801bce9
 8019844:	0801bd00 	.word	0x0801bd00
 8019848:	7ff00000 	.word	0x7ff00000
 801984c:	0801bce5 	.word	0x0801bce5
 8019850:	0801bcdc 	.word	0x0801bcdc
 8019854:	0801bcb9 	.word	0x0801bcb9
 8019858:	3ff80000 	.word	0x3ff80000
 801985c:	0801bdf8 	.word	0x0801bdf8
 8019860:	0801bd5f 	.word	0x0801bd5f
 8019864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019866:	9a00      	ldr	r2, [sp, #0]
 8019868:	601a      	str	r2, [r3, #0]
 801986a:	9b01      	ldr	r3, [sp, #4]
 801986c:	2b0e      	cmp	r3, #14
 801986e:	f200 80ad 	bhi.w	80199cc <_dtoa_r+0x484>
 8019872:	2d00      	cmp	r5, #0
 8019874:	f000 80aa 	beq.w	80199cc <_dtoa_r+0x484>
 8019878:	f1ba 0f00 	cmp.w	sl, #0
 801987c:	dd36      	ble.n	80198ec <_dtoa_r+0x3a4>
 801987e:	4ac3      	ldr	r2, [pc, #780]	; (8019b8c <_dtoa_r+0x644>)
 8019880:	f00a 030f 	and.w	r3, sl, #15
 8019884:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019888:	ed93 7b00 	vldr	d7, [r3]
 801988c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8019890:	ea4f 172a 	mov.w	r7, sl, asr #4
 8019894:	eeb0 8a47 	vmov.f32	s16, s14
 8019898:	eef0 8a67 	vmov.f32	s17, s15
 801989c:	d016      	beq.n	80198cc <_dtoa_r+0x384>
 801989e:	4bbc      	ldr	r3, [pc, #752]	; (8019b90 <_dtoa_r+0x648>)
 80198a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80198a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80198a8:	f7e6 ffd0 	bl	800084c <__aeabi_ddiv>
 80198ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80198b0:	f007 070f 	and.w	r7, r7, #15
 80198b4:	2503      	movs	r5, #3
 80198b6:	4eb6      	ldr	r6, [pc, #728]	; (8019b90 <_dtoa_r+0x648>)
 80198b8:	b957      	cbnz	r7, 80198d0 <_dtoa_r+0x388>
 80198ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80198be:	ec53 2b18 	vmov	r2, r3, d8
 80198c2:	f7e6 ffc3 	bl	800084c <__aeabi_ddiv>
 80198c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80198ca:	e029      	b.n	8019920 <_dtoa_r+0x3d8>
 80198cc:	2502      	movs	r5, #2
 80198ce:	e7f2      	b.n	80198b6 <_dtoa_r+0x36e>
 80198d0:	07f9      	lsls	r1, r7, #31
 80198d2:	d508      	bpl.n	80198e6 <_dtoa_r+0x39e>
 80198d4:	ec51 0b18 	vmov	r0, r1, d8
 80198d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80198dc:	f7e6 fe8c 	bl	80005f8 <__aeabi_dmul>
 80198e0:	ec41 0b18 	vmov	d8, r0, r1
 80198e4:	3501      	adds	r5, #1
 80198e6:	107f      	asrs	r7, r7, #1
 80198e8:	3608      	adds	r6, #8
 80198ea:	e7e5      	b.n	80198b8 <_dtoa_r+0x370>
 80198ec:	f000 80a6 	beq.w	8019a3c <_dtoa_r+0x4f4>
 80198f0:	f1ca 0600 	rsb	r6, sl, #0
 80198f4:	4ba5      	ldr	r3, [pc, #660]	; (8019b8c <_dtoa_r+0x644>)
 80198f6:	4fa6      	ldr	r7, [pc, #664]	; (8019b90 <_dtoa_r+0x648>)
 80198f8:	f006 020f 	and.w	r2, r6, #15
 80198fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019904:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019908:	f7e6 fe76 	bl	80005f8 <__aeabi_dmul>
 801990c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019910:	1136      	asrs	r6, r6, #4
 8019912:	2300      	movs	r3, #0
 8019914:	2502      	movs	r5, #2
 8019916:	2e00      	cmp	r6, #0
 8019918:	f040 8085 	bne.w	8019a26 <_dtoa_r+0x4de>
 801991c:	2b00      	cmp	r3, #0
 801991e:	d1d2      	bne.n	80198c6 <_dtoa_r+0x37e>
 8019920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019922:	2b00      	cmp	r3, #0
 8019924:	f000 808c 	beq.w	8019a40 <_dtoa_r+0x4f8>
 8019928:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801992c:	4b99      	ldr	r3, [pc, #612]	; (8019b94 <_dtoa_r+0x64c>)
 801992e:	2200      	movs	r2, #0
 8019930:	4630      	mov	r0, r6
 8019932:	4639      	mov	r1, r7
 8019934:	f7e7 f8d2 	bl	8000adc <__aeabi_dcmplt>
 8019938:	2800      	cmp	r0, #0
 801993a:	f000 8081 	beq.w	8019a40 <_dtoa_r+0x4f8>
 801993e:	9b01      	ldr	r3, [sp, #4]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d07d      	beq.n	8019a40 <_dtoa_r+0x4f8>
 8019944:	f1b9 0f00 	cmp.w	r9, #0
 8019948:	dd3c      	ble.n	80199c4 <_dtoa_r+0x47c>
 801994a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801994e:	9307      	str	r3, [sp, #28]
 8019950:	2200      	movs	r2, #0
 8019952:	4b91      	ldr	r3, [pc, #580]	; (8019b98 <_dtoa_r+0x650>)
 8019954:	4630      	mov	r0, r6
 8019956:	4639      	mov	r1, r7
 8019958:	f7e6 fe4e 	bl	80005f8 <__aeabi_dmul>
 801995c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019960:	3501      	adds	r5, #1
 8019962:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8019966:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801996a:	4628      	mov	r0, r5
 801996c:	f7e6 fdda 	bl	8000524 <__aeabi_i2d>
 8019970:	4632      	mov	r2, r6
 8019972:	463b      	mov	r3, r7
 8019974:	f7e6 fe40 	bl	80005f8 <__aeabi_dmul>
 8019978:	4b88      	ldr	r3, [pc, #544]	; (8019b9c <_dtoa_r+0x654>)
 801997a:	2200      	movs	r2, #0
 801997c:	f7e6 fc86 	bl	800028c <__adddf3>
 8019980:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8019984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019988:	9303      	str	r3, [sp, #12]
 801998a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801998c:	2b00      	cmp	r3, #0
 801998e:	d15c      	bne.n	8019a4a <_dtoa_r+0x502>
 8019990:	4b83      	ldr	r3, [pc, #524]	; (8019ba0 <_dtoa_r+0x658>)
 8019992:	2200      	movs	r2, #0
 8019994:	4630      	mov	r0, r6
 8019996:	4639      	mov	r1, r7
 8019998:	f7e6 fc76 	bl	8000288 <__aeabi_dsub>
 801999c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80199a0:	4606      	mov	r6, r0
 80199a2:	460f      	mov	r7, r1
 80199a4:	f7e7 f8b8 	bl	8000b18 <__aeabi_dcmpgt>
 80199a8:	2800      	cmp	r0, #0
 80199aa:	f040 8296 	bne.w	8019eda <_dtoa_r+0x992>
 80199ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80199b2:	4630      	mov	r0, r6
 80199b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80199b8:	4639      	mov	r1, r7
 80199ba:	f7e7 f88f 	bl	8000adc <__aeabi_dcmplt>
 80199be:	2800      	cmp	r0, #0
 80199c0:	f040 8288 	bne.w	8019ed4 <_dtoa_r+0x98c>
 80199c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80199c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80199cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	f2c0 8158 	blt.w	8019c84 <_dtoa_r+0x73c>
 80199d4:	f1ba 0f0e 	cmp.w	sl, #14
 80199d8:	f300 8154 	bgt.w	8019c84 <_dtoa_r+0x73c>
 80199dc:	4b6b      	ldr	r3, [pc, #428]	; (8019b8c <_dtoa_r+0x644>)
 80199de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80199e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80199e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	f280 80e3 	bge.w	8019bb4 <_dtoa_r+0x66c>
 80199ee:	9b01      	ldr	r3, [sp, #4]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	f300 80df 	bgt.w	8019bb4 <_dtoa_r+0x66c>
 80199f6:	f040 826d 	bne.w	8019ed4 <_dtoa_r+0x98c>
 80199fa:	4b69      	ldr	r3, [pc, #420]	; (8019ba0 <_dtoa_r+0x658>)
 80199fc:	2200      	movs	r2, #0
 80199fe:	4640      	mov	r0, r8
 8019a00:	4649      	mov	r1, r9
 8019a02:	f7e6 fdf9 	bl	80005f8 <__aeabi_dmul>
 8019a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019a0a:	f7e7 f87b 	bl	8000b04 <__aeabi_dcmpge>
 8019a0e:	9e01      	ldr	r6, [sp, #4]
 8019a10:	4637      	mov	r7, r6
 8019a12:	2800      	cmp	r0, #0
 8019a14:	f040 8243 	bne.w	8019e9e <_dtoa_r+0x956>
 8019a18:	9d00      	ldr	r5, [sp, #0]
 8019a1a:	2331      	movs	r3, #49	; 0x31
 8019a1c:	f805 3b01 	strb.w	r3, [r5], #1
 8019a20:	f10a 0a01 	add.w	sl, sl, #1
 8019a24:	e23f      	b.n	8019ea6 <_dtoa_r+0x95e>
 8019a26:	07f2      	lsls	r2, r6, #31
 8019a28:	d505      	bpl.n	8019a36 <_dtoa_r+0x4ee>
 8019a2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019a2e:	f7e6 fde3 	bl	80005f8 <__aeabi_dmul>
 8019a32:	3501      	adds	r5, #1
 8019a34:	2301      	movs	r3, #1
 8019a36:	1076      	asrs	r6, r6, #1
 8019a38:	3708      	adds	r7, #8
 8019a3a:	e76c      	b.n	8019916 <_dtoa_r+0x3ce>
 8019a3c:	2502      	movs	r5, #2
 8019a3e:	e76f      	b.n	8019920 <_dtoa_r+0x3d8>
 8019a40:	9b01      	ldr	r3, [sp, #4]
 8019a42:	f8cd a01c 	str.w	sl, [sp, #28]
 8019a46:	930c      	str	r3, [sp, #48]	; 0x30
 8019a48:	e78d      	b.n	8019966 <_dtoa_r+0x41e>
 8019a4a:	9900      	ldr	r1, [sp, #0]
 8019a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019a50:	4b4e      	ldr	r3, [pc, #312]	; (8019b8c <_dtoa_r+0x644>)
 8019a52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019a56:	4401      	add	r1, r0
 8019a58:	9102      	str	r1, [sp, #8]
 8019a5a:	9908      	ldr	r1, [sp, #32]
 8019a5c:	eeb0 8a47 	vmov.f32	s16, s14
 8019a60:	eef0 8a67 	vmov.f32	s17, s15
 8019a64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019a68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019a6c:	2900      	cmp	r1, #0
 8019a6e:	d045      	beq.n	8019afc <_dtoa_r+0x5b4>
 8019a70:	494c      	ldr	r1, [pc, #304]	; (8019ba4 <_dtoa_r+0x65c>)
 8019a72:	2000      	movs	r0, #0
 8019a74:	f7e6 feea 	bl	800084c <__aeabi_ddiv>
 8019a78:	ec53 2b18 	vmov	r2, r3, d8
 8019a7c:	f7e6 fc04 	bl	8000288 <__aeabi_dsub>
 8019a80:	9d00      	ldr	r5, [sp, #0]
 8019a82:	ec41 0b18 	vmov	d8, r0, r1
 8019a86:	4639      	mov	r1, r7
 8019a88:	4630      	mov	r0, r6
 8019a8a:	f7e7 f865 	bl	8000b58 <__aeabi_d2iz>
 8019a8e:	900c      	str	r0, [sp, #48]	; 0x30
 8019a90:	f7e6 fd48 	bl	8000524 <__aeabi_i2d>
 8019a94:	4602      	mov	r2, r0
 8019a96:	460b      	mov	r3, r1
 8019a98:	4630      	mov	r0, r6
 8019a9a:	4639      	mov	r1, r7
 8019a9c:	f7e6 fbf4 	bl	8000288 <__aeabi_dsub>
 8019aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019aa2:	3330      	adds	r3, #48	; 0x30
 8019aa4:	f805 3b01 	strb.w	r3, [r5], #1
 8019aa8:	ec53 2b18 	vmov	r2, r3, d8
 8019aac:	4606      	mov	r6, r0
 8019aae:	460f      	mov	r7, r1
 8019ab0:	f7e7 f814 	bl	8000adc <__aeabi_dcmplt>
 8019ab4:	2800      	cmp	r0, #0
 8019ab6:	d165      	bne.n	8019b84 <_dtoa_r+0x63c>
 8019ab8:	4632      	mov	r2, r6
 8019aba:	463b      	mov	r3, r7
 8019abc:	4935      	ldr	r1, [pc, #212]	; (8019b94 <_dtoa_r+0x64c>)
 8019abe:	2000      	movs	r0, #0
 8019ac0:	f7e6 fbe2 	bl	8000288 <__aeabi_dsub>
 8019ac4:	ec53 2b18 	vmov	r2, r3, d8
 8019ac8:	f7e7 f808 	bl	8000adc <__aeabi_dcmplt>
 8019acc:	2800      	cmp	r0, #0
 8019ace:	f040 80b9 	bne.w	8019c44 <_dtoa_r+0x6fc>
 8019ad2:	9b02      	ldr	r3, [sp, #8]
 8019ad4:	429d      	cmp	r5, r3
 8019ad6:	f43f af75 	beq.w	80199c4 <_dtoa_r+0x47c>
 8019ada:	4b2f      	ldr	r3, [pc, #188]	; (8019b98 <_dtoa_r+0x650>)
 8019adc:	ec51 0b18 	vmov	r0, r1, d8
 8019ae0:	2200      	movs	r2, #0
 8019ae2:	f7e6 fd89 	bl	80005f8 <__aeabi_dmul>
 8019ae6:	4b2c      	ldr	r3, [pc, #176]	; (8019b98 <_dtoa_r+0x650>)
 8019ae8:	ec41 0b18 	vmov	d8, r0, r1
 8019aec:	2200      	movs	r2, #0
 8019aee:	4630      	mov	r0, r6
 8019af0:	4639      	mov	r1, r7
 8019af2:	f7e6 fd81 	bl	80005f8 <__aeabi_dmul>
 8019af6:	4606      	mov	r6, r0
 8019af8:	460f      	mov	r7, r1
 8019afa:	e7c4      	b.n	8019a86 <_dtoa_r+0x53e>
 8019afc:	ec51 0b17 	vmov	r0, r1, d7
 8019b00:	f7e6 fd7a 	bl	80005f8 <__aeabi_dmul>
 8019b04:	9b02      	ldr	r3, [sp, #8]
 8019b06:	9d00      	ldr	r5, [sp, #0]
 8019b08:	930c      	str	r3, [sp, #48]	; 0x30
 8019b0a:	ec41 0b18 	vmov	d8, r0, r1
 8019b0e:	4639      	mov	r1, r7
 8019b10:	4630      	mov	r0, r6
 8019b12:	f7e7 f821 	bl	8000b58 <__aeabi_d2iz>
 8019b16:	9011      	str	r0, [sp, #68]	; 0x44
 8019b18:	f7e6 fd04 	bl	8000524 <__aeabi_i2d>
 8019b1c:	4602      	mov	r2, r0
 8019b1e:	460b      	mov	r3, r1
 8019b20:	4630      	mov	r0, r6
 8019b22:	4639      	mov	r1, r7
 8019b24:	f7e6 fbb0 	bl	8000288 <__aeabi_dsub>
 8019b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019b2a:	3330      	adds	r3, #48	; 0x30
 8019b2c:	f805 3b01 	strb.w	r3, [r5], #1
 8019b30:	9b02      	ldr	r3, [sp, #8]
 8019b32:	429d      	cmp	r5, r3
 8019b34:	4606      	mov	r6, r0
 8019b36:	460f      	mov	r7, r1
 8019b38:	f04f 0200 	mov.w	r2, #0
 8019b3c:	d134      	bne.n	8019ba8 <_dtoa_r+0x660>
 8019b3e:	4b19      	ldr	r3, [pc, #100]	; (8019ba4 <_dtoa_r+0x65c>)
 8019b40:	ec51 0b18 	vmov	r0, r1, d8
 8019b44:	f7e6 fba2 	bl	800028c <__adddf3>
 8019b48:	4602      	mov	r2, r0
 8019b4a:	460b      	mov	r3, r1
 8019b4c:	4630      	mov	r0, r6
 8019b4e:	4639      	mov	r1, r7
 8019b50:	f7e6 ffe2 	bl	8000b18 <__aeabi_dcmpgt>
 8019b54:	2800      	cmp	r0, #0
 8019b56:	d175      	bne.n	8019c44 <_dtoa_r+0x6fc>
 8019b58:	ec53 2b18 	vmov	r2, r3, d8
 8019b5c:	4911      	ldr	r1, [pc, #68]	; (8019ba4 <_dtoa_r+0x65c>)
 8019b5e:	2000      	movs	r0, #0
 8019b60:	f7e6 fb92 	bl	8000288 <__aeabi_dsub>
 8019b64:	4602      	mov	r2, r0
 8019b66:	460b      	mov	r3, r1
 8019b68:	4630      	mov	r0, r6
 8019b6a:	4639      	mov	r1, r7
 8019b6c:	f7e6 ffb6 	bl	8000adc <__aeabi_dcmplt>
 8019b70:	2800      	cmp	r0, #0
 8019b72:	f43f af27 	beq.w	80199c4 <_dtoa_r+0x47c>
 8019b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019b78:	1e6b      	subs	r3, r5, #1
 8019b7a:	930c      	str	r3, [sp, #48]	; 0x30
 8019b7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019b80:	2b30      	cmp	r3, #48	; 0x30
 8019b82:	d0f8      	beq.n	8019b76 <_dtoa_r+0x62e>
 8019b84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019b88:	e04a      	b.n	8019c20 <_dtoa_r+0x6d8>
 8019b8a:	bf00      	nop
 8019b8c:	0801bdf8 	.word	0x0801bdf8
 8019b90:	0801bdd0 	.word	0x0801bdd0
 8019b94:	3ff00000 	.word	0x3ff00000
 8019b98:	40240000 	.word	0x40240000
 8019b9c:	401c0000 	.word	0x401c0000
 8019ba0:	40140000 	.word	0x40140000
 8019ba4:	3fe00000 	.word	0x3fe00000
 8019ba8:	4baf      	ldr	r3, [pc, #700]	; (8019e68 <_dtoa_r+0x920>)
 8019baa:	f7e6 fd25 	bl	80005f8 <__aeabi_dmul>
 8019bae:	4606      	mov	r6, r0
 8019bb0:	460f      	mov	r7, r1
 8019bb2:	e7ac      	b.n	8019b0e <_dtoa_r+0x5c6>
 8019bb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019bb8:	9d00      	ldr	r5, [sp, #0]
 8019bba:	4642      	mov	r2, r8
 8019bbc:	464b      	mov	r3, r9
 8019bbe:	4630      	mov	r0, r6
 8019bc0:	4639      	mov	r1, r7
 8019bc2:	f7e6 fe43 	bl	800084c <__aeabi_ddiv>
 8019bc6:	f7e6 ffc7 	bl	8000b58 <__aeabi_d2iz>
 8019bca:	9002      	str	r0, [sp, #8]
 8019bcc:	f7e6 fcaa 	bl	8000524 <__aeabi_i2d>
 8019bd0:	4642      	mov	r2, r8
 8019bd2:	464b      	mov	r3, r9
 8019bd4:	f7e6 fd10 	bl	80005f8 <__aeabi_dmul>
 8019bd8:	4602      	mov	r2, r0
 8019bda:	460b      	mov	r3, r1
 8019bdc:	4630      	mov	r0, r6
 8019bde:	4639      	mov	r1, r7
 8019be0:	f7e6 fb52 	bl	8000288 <__aeabi_dsub>
 8019be4:	9e02      	ldr	r6, [sp, #8]
 8019be6:	9f01      	ldr	r7, [sp, #4]
 8019be8:	3630      	adds	r6, #48	; 0x30
 8019bea:	f805 6b01 	strb.w	r6, [r5], #1
 8019bee:	9e00      	ldr	r6, [sp, #0]
 8019bf0:	1bae      	subs	r6, r5, r6
 8019bf2:	42b7      	cmp	r7, r6
 8019bf4:	4602      	mov	r2, r0
 8019bf6:	460b      	mov	r3, r1
 8019bf8:	d137      	bne.n	8019c6a <_dtoa_r+0x722>
 8019bfa:	f7e6 fb47 	bl	800028c <__adddf3>
 8019bfe:	4642      	mov	r2, r8
 8019c00:	464b      	mov	r3, r9
 8019c02:	4606      	mov	r6, r0
 8019c04:	460f      	mov	r7, r1
 8019c06:	f7e6 ff87 	bl	8000b18 <__aeabi_dcmpgt>
 8019c0a:	b9c8      	cbnz	r0, 8019c40 <_dtoa_r+0x6f8>
 8019c0c:	4642      	mov	r2, r8
 8019c0e:	464b      	mov	r3, r9
 8019c10:	4630      	mov	r0, r6
 8019c12:	4639      	mov	r1, r7
 8019c14:	f7e6 ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 8019c18:	b110      	cbz	r0, 8019c20 <_dtoa_r+0x6d8>
 8019c1a:	9b02      	ldr	r3, [sp, #8]
 8019c1c:	07d9      	lsls	r1, r3, #31
 8019c1e:	d40f      	bmi.n	8019c40 <_dtoa_r+0x6f8>
 8019c20:	4620      	mov	r0, r4
 8019c22:	4659      	mov	r1, fp
 8019c24:	f000 fb08 	bl	801a238 <_Bfree>
 8019c28:	2300      	movs	r3, #0
 8019c2a:	702b      	strb	r3, [r5, #0]
 8019c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c2e:	f10a 0001 	add.w	r0, sl, #1
 8019c32:	6018      	str	r0, [r3, #0]
 8019c34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	f43f acd8 	beq.w	80195ec <_dtoa_r+0xa4>
 8019c3c:	601d      	str	r5, [r3, #0]
 8019c3e:	e4d5      	b.n	80195ec <_dtoa_r+0xa4>
 8019c40:	f8cd a01c 	str.w	sl, [sp, #28]
 8019c44:	462b      	mov	r3, r5
 8019c46:	461d      	mov	r5, r3
 8019c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019c4c:	2a39      	cmp	r2, #57	; 0x39
 8019c4e:	d108      	bne.n	8019c62 <_dtoa_r+0x71a>
 8019c50:	9a00      	ldr	r2, [sp, #0]
 8019c52:	429a      	cmp	r2, r3
 8019c54:	d1f7      	bne.n	8019c46 <_dtoa_r+0x6fe>
 8019c56:	9a07      	ldr	r2, [sp, #28]
 8019c58:	9900      	ldr	r1, [sp, #0]
 8019c5a:	3201      	adds	r2, #1
 8019c5c:	9207      	str	r2, [sp, #28]
 8019c5e:	2230      	movs	r2, #48	; 0x30
 8019c60:	700a      	strb	r2, [r1, #0]
 8019c62:	781a      	ldrb	r2, [r3, #0]
 8019c64:	3201      	adds	r2, #1
 8019c66:	701a      	strb	r2, [r3, #0]
 8019c68:	e78c      	b.n	8019b84 <_dtoa_r+0x63c>
 8019c6a:	4b7f      	ldr	r3, [pc, #508]	; (8019e68 <_dtoa_r+0x920>)
 8019c6c:	2200      	movs	r2, #0
 8019c6e:	f7e6 fcc3 	bl	80005f8 <__aeabi_dmul>
 8019c72:	2200      	movs	r2, #0
 8019c74:	2300      	movs	r3, #0
 8019c76:	4606      	mov	r6, r0
 8019c78:	460f      	mov	r7, r1
 8019c7a:	f7e6 ff25 	bl	8000ac8 <__aeabi_dcmpeq>
 8019c7e:	2800      	cmp	r0, #0
 8019c80:	d09b      	beq.n	8019bba <_dtoa_r+0x672>
 8019c82:	e7cd      	b.n	8019c20 <_dtoa_r+0x6d8>
 8019c84:	9a08      	ldr	r2, [sp, #32]
 8019c86:	2a00      	cmp	r2, #0
 8019c88:	f000 80c4 	beq.w	8019e14 <_dtoa_r+0x8cc>
 8019c8c:	9a05      	ldr	r2, [sp, #20]
 8019c8e:	2a01      	cmp	r2, #1
 8019c90:	f300 80a8 	bgt.w	8019de4 <_dtoa_r+0x89c>
 8019c94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019c96:	2a00      	cmp	r2, #0
 8019c98:	f000 80a0 	beq.w	8019ddc <_dtoa_r+0x894>
 8019c9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019ca0:	9e06      	ldr	r6, [sp, #24]
 8019ca2:	4645      	mov	r5, r8
 8019ca4:	9a04      	ldr	r2, [sp, #16]
 8019ca6:	2101      	movs	r1, #1
 8019ca8:	441a      	add	r2, r3
 8019caa:	4620      	mov	r0, r4
 8019cac:	4498      	add	r8, r3
 8019cae:	9204      	str	r2, [sp, #16]
 8019cb0:	f000 fb7e 	bl	801a3b0 <__i2b>
 8019cb4:	4607      	mov	r7, r0
 8019cb6:	2d00      	cmp	r5, #0
 8019cb8:	dd0b      	ble.n	8019cd2 <_dtoa_r+0x78a>
 8019cba:	9b04      	ldr	r3, [sp, #16]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	dd08      	ble.n	8019cd2 <_dtoa_r+0x78a>
 8019cc0:	42ab      	cmp	r3, r5
 8019cc2:	9a04      	ldr	r2, [sp, #16]
 8019cc4:	bfa8      	it	ge
 8019cc6:	462b      	movge	r3, r5
 8019cc8:	eba8 0803 	sub.w	r8, r8, r3
 8019ccc:	1aed      	subs	r5, r5, r3
 8019cce:	1ad3      	subs	r3, r2, r3
 8019cd0:	9304      	str	r3, [sp, #16]
 8019cd2:	9b06      	ldr	r3, [sp, #24]
 8019cd4:	b1fb      	cbz	r3, 8019d16 <_dtoa_r+0x7ce>
 8019cd6:	9b08      	ldr	r3, [sp, #32]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	f000 809f 	beq.w	8019e1c <_dtoa_r+0x8d4>
 8019cde:	2e00      	cmp	r6, #0
 8019ce0:	dd11      	ble.n	8019d06 <_dtoa_r+0x7be>
 8019ce2:	4639      	mov	r1, r7
 8019ce4:	4632      	mov	r2, r6
 8019ce6:	4620      	mov	r0, r4
 8019ce8:	f000 fc1e 	bl	801a528 <__pow5mult>
 8019cec:	465a      	mov	r2, fp
 8019cee:	4601      	mov	r1, r0
 8019cf0:	4607      	mov	r7, r0
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	f000 fb72 	bl	801a3dc <__multiply>
 8019cf8:	4659      	mov	r1, fp
 8019cfa:	9007      	str	r0, [sp, #28]
 8019cfc:	4620      	mov	r0, r4
 8019cfe:	f000 fa9b 	bl	801a238 <_Bfree>
 8019d02:	9b07      	ldr	r3, [sp, #28]
 8019d04:	469b      	mov	fp, r3
 8019d06:	9b06      	ldr	r3, [sp, #24]
 8019d08:	1b9a      	subs	r2, r3, r6
 8019d0a:	d004      	beq.n	8019d16 <_dtoa_r+0x7ce>
 8019d0c:	4659      	mov	r1, fp
 8019d0e:	4620      	mov	r0, r4
 8019d10:	f000 fc0a 	bl	801a528 <__pow5mult>
 8019d14:	4683      	mov	fp, r0
 8019d16:	2101      	movs	r1, #1
 8019d18:	4620      	mov	r0, r4
 8019d1a:	f000 fb49 	bl	801a3b0 <__i2b>
 8019d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	4606      	mov	r6, r0
 8019d24:	dd7c      	ble.n	8019e20 <_dtoa_r+0x8d8>
 8019d26:	461a      	mov	r2, r3
 8019d28:	4601      	mov	r1, r0
 8019d2a:	4620      	mov	r0, r4
 8019d2c:	f000 fbfc 	bl	801a528 <__pow5mult>
 8019d30:	9b05      	ldr	r3, [sp, #20]
 8019d32:	2b01      	cmp	r3, #1
 8019d34:	4606      	mov	r6, r0
 8019d36:	dd76      	ble.n	8019e26 <_dtoa_r+0x8de>
 8019d38:	2300      	movs	r3, #0
 8019d3a:	9306      	str	r3, [sp, #24]
 8019d3c:	6933      	ldr	r3, [r6, #16]
 8019d3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019d42:	6918      	ldr	r0, [r3, #16]
 8019d44:	f000 fae4 	bl	801a310 <__hi0bits>
 8019d48:	f1c0 0020 	rsb	r0, r0, #32
 8019d4c:	9b04      	ldr	r3, [sp, #16]
 8019d4e:	4418      	add	r0, r3
 8019d50:	f010 001f 	ands.w	r0, r0, #31
 8019d54:	f000 8086 	beq.w	8019e64 <_dtoa_r+0x91c>
 8019d58:	f1c0 0320 	rsb	r3, r0, #32
 8019d5c:	2b04      	cmp	r3, #4
 8019d5e:	dd7f      	ble.n	8019e60 <_dtoa_r+0x918>
 8019d60:	f1c0 001c 	rsb	r0, r0, #28
 8019d64:	9b04      	ldr	r3, [sp, #16]
 8019d66:	4403      	add	r3, r0
 8019d68:	4480      	add	r8, r0
 8019d6a:	4405      	add	r5, r0
 8019d6c:	9304      	str	r3, [sp, #16]
 8019d6e:	f1b8 0f00 	cmp.w	r8, #0
 8019d72:	dd05      	ble.n	8019d80 <_dtoa_r+0x838>
 8019d74:	4659      	mov	r1, fp
 8019d76:	4642      	mov	r2, r8
 8019d78:	4620      	mov	r0, r4
 8019d7a:	f000 fc2f 	bl	801a5dc <__lshift>
 8019d7e:	4683      	mov	fp, r0
 8019d80:	9b04      	ldr	r3, [sp, #16]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	dd05      	ble.n	8019d92 <_dtoa_r+0x84a>
 8019d86:	4631      	mov	r1, r6
 8019d88:	461a      	mov	r2, r3
 8019d8a:	4620      	mov	r0, r4
 8019d8c:	f000 fc26 	bl	801a5dc <__lshift>
 8019d90:	4606      	mov	r6, r0
 8019d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d069      	beq.n	8019e6c <_dtoa_r+0x924>
 8019d98:	4631      	mov	r1, r6
 8019d9a:	4658      	mov	r0, fp
 8019d9c:	f000 fc8a 	bl	801a6b4 <__mcmp>
 8019da0:	2800      	cmp	r0, #0
 8019da2:	da63      	bge.n	8019e6c <_dtoa_r+0x924>
 8019da4:	2300      	movs	r3, #0
 8019da6:	4659      	mov	r1, fp
 8019da8:	220a      	movs	r2, #10
 8019daa:	4620      	mov	r0, r4
 8019dac:	f000 fa66 	bl	801a27c <__multadd>
 8019db0:	9b08      	ldr	r3, [sp, #32]
 8019db2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019db6:	4683      	mov	fp, r0
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	f000 818f 	beq.w	801a0dc <_dtoa_r+0xb94>
 8019dbe:	4639      	mov	r1, r7
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	220a      	movs	r2, #10
 8019dc4:	4620      	mov	r0, r4
 8019dc6:	f000 fa59 	bl	801a27c <__multadd>
 8019dca:	f1b9 0f00 	cmp.w	r9, #0
 8019dce:	4607      	mov	r7, r0
 8019dd0:	f300 808e 	bgt.w	8019ef0 <_dtoa_r+0x9a8>
 8019dd4:	9b05      	ldr	r3, [sp, #20]
 8019dd6:	2b02      	cmp	r3, #2
 8019dd8:	dc50      	bgt.n	8019e7c <_dtoa_r+0x934>
 8019dda:	e089      	b.n	8019ef0 <_dtoa_r+0x9a8>
 8019ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019dde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019de2:	e75d      	b.n	8019ca0 <_dtoa_r+0x758>
 8019de4:	9b01      	ldr	r3, [sp, #4]
 8019de6:	1e5e      	subs	r6, r3, #1
 8019de8:	9b06      	ldr	r3, [sp, #24]
 8019dea:	42b3      	cmp	r3, r6
 8019dec:	bfbf      	itttt	lt
 8019dee:	9b06      	ldrlt	r3, [sp, #24]
 8019df0:	9606      	strlt	r6, [sp, #24]
 8019df2:	1af2      	sublt	r2, r6, r3
 8019df4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8019df6:	bfb6      	itet	lt
 8019df8:	189b      	addlt	r3, r3, r2
 8019dfa:	1b9e      	subge	r6, r3, r6
 8019dfc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8019dfe:	9b01      	ldr	r3, [sp, #4]
 8019e00:	bfb8      	it	lt
 8019e02:	2600      	movlt	r6, #0
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	bfb5      	itete	lt
 8019e08:	eba8 0503 	sublt.w	r5, r8, r3
 8019e0c:	9b01      	ldrge	r3, [sp, #4]
 8019e0e:	2300      	movlt	r3, #0
 8019e10:	4645      	movge	r5, r8
 8019e12:	e747      	b.n	8019ca4 <_dtoa_r+0x75c>
 8019e14:	9e06      	ldr	r6, [sp, #24]
 8019e16:	9f08      	ldr	r7, [sp, #32]
 8019e18:	4645      	mov	r5, r8
 8019e1a:	e74c      	b.n	8019cb6 <_dtoa_r+0x76e>
 8019e1c:	9a06      	ldr	r2, [sp, #24]
 8019e1e:	e775      	b.n	8019d0c <_dtoa_r+0x7c4>
 8019e20:	9b05      	ldr	r3, [sp, #20]
 8019e22:	2b01      	cmp	r3, #1
 8019e24:	dc18      	bgt.n	8019e58 <_dtoa_r+0x910>
 8019e26:	9b02      	ldr	r3, [sp, #8]
 8019e28:	b9b3      	cbnz	r3, 8019e58 <_dtoa_r+0x910>
 8019e2a:	9b03      	ldr	r3, [sp, #12]
 8019e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019e30:	b9a3      	cbnz	r3, 8019e5c <_dtoa_r+0x914>
 8019e32:	9b03      	ldr	r3, [sp, #12]
 8019e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019e38:	0d1b      	lsrs	r3, r3, #20
 8019e3a:	051b      	lsls	r3, r3, #20
 8019e3c:	b12b      	cbz	r3, 8019e4a <_dtoa_r+0x902>
 8019e3e:	9b04      	ldr	r3, [sp, #16]
 8019e40:	3301      	adds	r3, #1
 8019e42:	9304      	str	r3, [sp, #16]
 8019e44:	f108 0801 	add.w	r8, r8, #1
 8019e48:	2301      	movs	r3, #1
 8019e4a:	9306      	str	r3, [sp, #24]
 8019e4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	f47f af74 	bne.w	8019d3c <_dtoa_r+0x7f4>
 8019e54:	2001      	movs	r0, #1
 8019e56:	e779      	b.n	8019d4c <_dtoa_r+0x804>
 8019e58:	2300      	movs	r3, #0
 8019e5a:	e7f6      	b.n	8019e4a <_dtoa_r+0x902>
 8019e5c:	9b02      	ldr	r3, [sp, #8]
 8019e5e:	e7f4      	b.n	8019e4a <_dtoa_r+0x902>
 8019e60:	d085      	beq.n	8019d6e <_dtoa_r+0x826>
 8019e62:	4618      	mov	r0, r3
 8019e64:	301c      	adds	r0, #28
 8019e66:	e77d      	b.n	8019d64 <_dtoa_r+0x81c>
 8019e68:	40240000 	.word	0x40240000
 8019e6c:	9b01      	ldr	r3, [sp, #4]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	dc38      	bgt.n	8019ee4 <_dtoa_r+0x99c>
 8019e72:	9b05      	ldr	r3, [sp, #20]
 8019e74:	2b02      	cmp	r3, #2
 8019e76:	dd35      	ble.n	8019ee4 <_dtoa_r+0x99c>
 8019e78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019e7c:	f1b9 0f00 	cmp.w	r9, #0
 8019e80:	d10d      	bne.n	8019e9e <_dtoa_r+0x956>
 8019e82:	4631      	mov	r1, r6
 8019e84:	464b      	mov	r3, r9
 8019e86:	2205      	movs	r2, #5
 8019e88:	4620      	mov	r0, r4
 8019e8a:	f000 f9f7 	bl	801a27c <__multadd>
 8019e8e:	4601      	mov	r1, r0
 8019e90:	4606      	mov	r6, r0
 8019e92:	4658      	mov	r0, fp
 8019e94:	f000 fc0e 	bl	801a6b4 <__mcmp>
 8019e98:	2800      	cmp	r0, #0
 8019e9a:	f73f adbd 	bgt.w	8019a18 <_dtoa_r+0x4d0>
 8019e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ea0:	9d00      	ldr	r5, [sp, #0]
 8019ea2:	ea6f 0a03 	mvn.w	sl, r3
 8019ea6:	f04f 0800 	mov.w	r8, #0
 8019eaa:	4631      	mov	r1, r6
 8019eac:	4620      	mov	r0, r4
 8019eae:	f000 f9c3 	bl	801a238 <_Bfree>
 8019eb2:	2f00      	cmp	r7, #0
 8019eb4:	f43f aeb4 	beq.w	8019c20 <_dtoa_r+0x6d8>
 8019eb8:	f1b8 0f00 	cmp.w	r8, #0
 8019ebc:	d005      	beq.n	8019eca <_dtoa_r+0x982>
 8019ebe:	45b8      	cmp	r8, r7
 8019ec0:	d003      	beq.n	8019eca <_dtoa_r+0x982>
 8019ec2:	4641      	mov	r1, r8
 8019ec4:	4620      	mov	r0, r4
 8019ec6:	f000 f9b7 	bl	801a238 <_Bfree>
 8019eca:	4639      	mov	r1, r7
 8019ecc:	4620      	mov	r0, r4
 8019ece:	f000 f9b3 	bl	801a238 <_Bfree>
 8019ed2:	e6a5      	b.n	8019c20 <_dtoa_r+0x6d8>
 8019ed4:	2600      	movs	r6, #0
 8019ed6:	4637      	mov	r7, r6
 8019ed8:	e7e1      	b.n	8019e9e <_dtoa_r+0x956>
 8019eda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019edc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019ee0:	4637      	mov	r7, r6
 8019ee2:	e599      	b.n	8019a18 <_dtoa_r+0x4d0>
 8019ee4:	9b08      	ldr	r3, [sp, #32]
 8019ee6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	f000 80fd 	beq.w	801a0ea <_dtoa_r+0xba2>
 8019ef0:	2d00      	cmp	r5, #0
 8019ef2:	dd05      	ble.n	8019f00 <_dtoa_r+0x9b8>
 8019ef4:	4639      	mov	r1, r7
 8019ef6:	462a      	mov	r2, r5
 8019ef8:	4620      	mov	r0, r4
 8019efa:	f000 fb6f 	bl	801a5dc <__lshift>
 8019efe:	4607      	mov	r7, r0
 8019f00:	9b06      	ldr	r3, [sp, #24]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d05c      	beq.n	8019fc0 <_dtoa_r+0xa78>
 8019f06:	6879      	ldr	r1, [r7, #4]
 8019f08:	4620      	mov	r0, r4
 8019f0a:	f000 f955 	bl	801a1b8 <_Balloc>
 8019f0e:	4605      	mov	r5, r0
 8019f10:	b928      	cbnz	r0, 8019f1e <_dtoa_r+0x9d6>
 8019f12:	4b80      	ldr	r3, [pc, #512]	; (801a114 <_dtoa_r+0xbcc>)
 8019f14:	4602      	mov	r2, r0
 8019f16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8019f1a:	f7ff bb2e 	b.w	801957a <_dtoa_r+0x32>
 8019f1e:	693a      	ldr	r2, [r7, #16]
 8019f20:	3202      	adds	r2, #2
 8019f22:	0092      	lsls	r2, r2, #2
 8019f24:	f107 010c 	add.w	r1, r7, #12
 8019f28:	300c      	adds	r0, #12
 8019f2a:	f7fe fcc1 	bl	80188b0 <memcpy>
 8019f2e:	2201      	movs	r2, #1
 8019f30:	4629      	mov	r1, r5
 8019f32:	4620      	mov	r0, r4
 8019f34:	f000 fb52 	bl	801a5dc <__lshift>
 8019f38:	9b00      	ldr	r3, [sp, #0]
 8019f3a:	3301      	adds	r3, #1
 8019f3c:	9301      	str	r3, [sp, #4]
 8019f3e:	9b00      	ldr	r3, [sp, #0]
 8019f40:	444b      	add	r3, r9
 8019f42:	9307      	str	r3, [sp, #28]
 8019f44:	9b02      	ldr	r3, [sp, #8]
 8019f46:	f003 0301 	and.w	r3, r3, #1
 8019f4a:	46b8      	mov	r8, r7
 8019f4c:	9306      	str	r3, [sp, #24]
 8019f4e:	4607      	mov	r7, r0
 8019f50:	9b01      	ldr	r3, [sp, #4]
 8019f52:	4631      	mov	r1, r6
 8019f54:	3b01      	subs	r3, #1
 8019f56:	4658      	mov	r0, fp
 8019f58:	9302      	str	r3, [sp, #8]
 8019f5a:	f7ff fa69 	bl	8019430 <quorem>
 8019f5e:	4603      	mov	r3, r0
 8019f60:	3330      	adds	r3, #48	; 0x30
 8019f62:	9004      	str	r0, [sp, #16]
 8019f64:	4641      	mov	r1, r8
 8019f66:	4658      	mov	r0, fp
 8019f68:	9308      	str	r3, [sp, #32]
 8019f6a:	f000 fba3 	bl	801a6b4 <__mcmp>
 8019f6e:	463a      	mov	r2, r7
 8019f70:	4681      	mov	r9, r0
 8019f72:	4631      	mov	r1, r6
 8019f74:	4620      	mov	r0, r4
 8019f76:	f000 fbb9 	bl	801a6ec <__mdiff>
 8019f7a:	68c2      	ldr	r2, [r0, #12]
 8019f7c:	9b08      	ldr	r3, [sp, #32]
 8019f7e:	4605      	mov	r5, r0
 8019f80:	bb02      	cbnz	r2, 8019fc4 <_dtoa_r+0xa7c>
 8019f82:	4601      	mov	r1, r0
 8019f84:	4658      	mov	r0, fp
 8019f86:	f000 fb95 	bl	801a6b4 <__mcmp>
 8019f8a:	9b08      	ldr	r3, [sp, #32]
 8019f8c:	4602      	mov	r2, r0
 8019f8e:	4629      	mov	r1, r5
 8019f90:	4620      	mov	r0, r4
 8019f92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8019f96:	f000 f94f 	bl	801a238 <_Bfree>
 8019f9a:	9b05      	ldr	r3, [sp, #20]
 8019f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f9e:	9d01      	ldr	r5, [sp, #4]
 8019fa0:	ea43 0102 	orr.w	r1, r3, r2
 8019fa4:	9b06      	ldr	r3, [sp, #24]
 8019fa6:	430b      	orrs	r3, r1
 8019fa8:	9b08      	ldr	r3, [sp, #32]
 8019faa:	d10d      	bne.n	8019fc8 <_dtoa_r+0xa80>
 8019fac:	2b39      	cmp	r3, #57	; 0x39
 8019fae:	d029      	beq.n	801a004 <_dtoa_r+0xabc>
 8019fb0:	f1b9 0f00 	cmp.w	r9, #0
 8019fb4:	dd01      	ble.n	8019fba <_dtoa_r+0xa72>
 8019fb6:	9b04      	ldr	r3, [sp, #16]
 8019fb8:	3331      	adds	r3, #49	; 0x31
 8019fba:	9a02      	ldr	r2, [sp, #8]
 8019fbc:	7013      	strb	r3, [r2, #0]
 8019fbe:	e774      	b.n	8019eaa <_dtoa_r+0x962>
 8019fc0:	4638      	mov	r0, r7
 8019fc2:	e7b9      	b.n	8019f38 <_dtoa_r+0x9f0>
 8019fc4:	2201      	movs	r2, #1
 8019fc6:	e7e2      	b.n	8019f8e <_dtoa_r+0xa46>
 8019fc8:	f1b9 0f00 	cmp.w	r9, #0
 8019fcc:	db06      	blt.n	8019fdc <_dtoa_r+0xa94>
 8019fce:	9905      	ldr	r1, [sp, #20]
 8019fd0:	ea41 0909 	orr.w	r9, r1, r9
 8019fd4:	9906      	ldr	r1, [sp, #24]
 8019fd6:	ea59 0101 	orrs.w	r1, r9, r1
 8019fda:	d120      	bne.n	801a01e <_dtoa_r+0xad6>
 8019fdc:	2a00      	cmp	r2, #0
 8019fde:	ddec      	ble.n	8019fba <_dtoa_r+0xa72>
 8019fe0:	4659      	mov	r1, fp
 8019fe2:	2201      	movs	r2, #1
 8019fe4:	4620      	mov	r0, r4
 8019fe6:	9301      	str	r3, [sp, #4]
 8019fe8:	f000 faf8 	bl	801a5dc <__lshift>
 8019fec:	4631      	mov	r1, r6
 8019fee:	4683      	mov	fp, r0
 8019ff0:	f000 fb60 	bl	801a6b4 <__mcmp>
 8019ff4:	2800      	cmp	r0, #0
 8019ff6:	9b01      	ldr	r3, [sp, #4]
 8019ff8:	dc02      	bgt.n	801a000 <_dtoa_r+0xab8>
 8019ffa:	d1de      	bne.n	8019fba <_dtoa_r+0xa72>
 8019ffc:	07da      	lsls	r2, r3, #31
 8019ffe:	d5dc      	bpl.n	8019fba <_dtoa_r+0xa72>
 801a000:	2b39      	cmp	r3, #57	; 0x39
 801a002:	d1d8      	bne.n	8019fb6 <_dtoa_r+0xa6e>
 801a004:	9a02      	ldr	r2, [sp, #8]
 801a006:	2339      	movs	r3, #57	; 0x39
 801a008:	7013      	strb	r3, [r2, #0]
 801a00a:	462b      	mov	r3, r5
 801a00c:	461d      	mov	r5, r3
 801a00e:	3b01      	subs	r3, #1
 801a010:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801a014:	2a39      	cmp	r2, #57	; 0x39
 801a016:	d050      	beq.n	801a0ba <_dtoa_r+0xb72>
 801a018:	3201      	adds	r2, #1
 801a01a:	701a      	strb	r2, [r3, #0]
 801a01c:	e745      	b.n	8019eaa <_dtoa_r+0x962>
 801a01e:	2a00      	cmp	r2, #0
 801a020:	dd03      	ble.n	801a02a <_dtoa_r+0xae2>
 801a022:	2b39      	cmp	r3, #57	; 0x39
 801a024:	d0ee      	beq.n	801a004 <_dtoa_r+0xabc>
 801a026:	3301      	adds	r3, #1
 801a028:	e7c7      	b.n	8019fba <_dtoa_r+0xa72>
 801a02a:	9a01      	ldr	r2, [sp, #4]
 801a02c:	9907      	ldr	r1, [sp, #28]
 801a02e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a032:	428a      	cmp	r2, r1
 801a034:	d02a      	beq.n	801a08c <_dtoa_r+0xb44>
 801a036:	4659      	mov	r1, fp
 801a038:	2300      	movs	r3, #0
 801a03a:	220a      	movs	r2, #10
 801a03c:	4620      	mov	r0, r4
 801a03e:	f000 f91d 	bl	801a27c <__multadd>
 801a042:	45b8      	cmp	r8, r7
 801a044:	4683      	mov	fp, r0
 801a046:	f04f 0300 	mov.w	r3, #0
 801a04a:	f04f 020a 	mov.w	r2, #10
 801a04e:	4641      	mov	r1, r8
 801a050:	4620      	mov	r0, r4
 801a052:	d107      	bne.n	801a064 <_dtoa_r+0xb1c>
 801a054:	f000 f912 	bl	801a27c <__multadd>
 801a058:	4680      	mov	r8, r0
 801a05a:	4607      	mov	r7, r0
 801a05c:	9b01      	ldr	r3, [sp, #4]
 801a05e:	3301      	adds	r3, #1
 801a060:	9301      	str	r3, [sp, #4]
 801a062:	e775      	b.n	8019f50 <_dtoa_r+0xa08>
 801a064:	f000 f90a 	bl	801a27c <__multadd>
 801a068:	4639      	mov	r1, r7
 801a06a:	4680      	mov	r8, r0
 801a06c:	2300      	movs	r3, #0
 801a06e:	220a      	movs	r2, #10
 801a070:	4620      	mov	r0, r4
 801a072:	f000 f903 	bl	801a27c <__multadd>
 801a076:	4607      	mov	r7, r0
 801a078:	e7f0      	b.n	801a05c <_dtoa_r+0xb14>
 801a07a:	f1b9 0f00 	cmp.w	r9, #0
 801a07e:	9a00      	ldr	r2, [sp, #0]
 801a080:	bfcc      	ite	gt
 801a082:	464d      	movgt	r5, r9
 801a084:	2501      	movle	r5, #1
 801a086:	4415      	add	r5, r2
 801a088:	f04f 0800 	mov.w	r8, #0
 801a08c:	4659      	mov	r1, fp
 801a08e:	2201      	movs	r2, #1
 801a090:	4620      	mov	r0, r4
 801a092:	9301      	str	r3, [sp, #4]
 801a094:	f000 faa2 	bl	801a5dc <__lshift>
 801a098:	4631      	mov	r1, r6
 801a09a:	4683      	mov	fp, r0
 801a09c:	f000 fb0a 	bl	801a6b4 <__mcmp>
 801a0a0:	2800      	cmp	r0, #0
 801a0a2:	dcb2      	bgt.n	801a00a <_dtoa_r+0xac2>
 801a0a4:	d102      	bne.n	801a0ac <_dtoa_r+0xb64>
 801a0a6:	9b01      	ldr	r3, [sp, #4]
 801a0a8:	07db      	lsls	r3, r3, #31
 801a0aa:	d4ae      	bmi.n	801a00a <_dtoa_r+0xac2>
 801a0ac:	462b      	mov	r3, r5
 801a0ae:	461d      	mov	r5, r3
 801a0b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a0b4:	2a30      	cmp	r2, #48	; 0x30
 801a0b6:	d0fa      	beq.n	801a0ae <_dtoa_r+0xb66>
 801a0b8:	e6f7      	b.n	8019eaa <_dtoa_r+0x962>
 801a0ba:	9a00      	ldr	r2, [sp, #0]
 801a0bc:	429a      	cmp	r2, r3
 801a0be:	d1a5      	bne.n	801a00c <_dtoa_r+0xac4>
 801a0c0:	f10a 0a01 	add.w	sl, sl, #1
 801a0c4:	2331      	movs	r3, #49	; 0x31
 801a0c6:	e779      	b.n	8019fbc <_dtoa_r+0xa74>
 801a0c8:	4b13      	ldr	r3, [pc, #76]	; (801a118 <_dtoa_r+0xbd0>)
 801a0ca:	f7ff baaf 	b.w	801962c <_dtoa_r+0xe4>
 801a0ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	f47f aa86 	bne.w	80195e2 <_dtoa_r+0x9a>
 801a0d6:	4b11      	ldr	r3, [pc, #68]	; (801a11c <_dtoa_r+0xbd4>)
 801a0d8:	f7ff baa8 	b.w	801962c <_dtoa_r+0xe4>
 801a0dc:	f1b9 0f00 	cmp.w	r9, #0
 801a0e0:	dc03      	bgt.n	801a0ea <_dtoa_r+0xba2>
 801a0e2:	9b05      	ldr	r3, [sp, #20]
 801a0e4:	2b02      	cmp	r3, #2
 801a0e6:	f73f aec9 	bgt.w	8019e7c <_dtoa_r+0x934>
 801a0ea:	9d00      	ldr	r5, [sp, #0]
 801a0ec:	4631      	mov	r1, r6
 801a0ee:	4658      	mov	r0, fp
 801a0f0:	f7ff f99e 	bl	8019430 <quorem>
 801a0f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801a0f8:	f805 3b01 	strb.w	r3, [r5], #1
 801a0fc:	9a00      	ldr	r2, [sp, #0]
 801a0fe:	1aaa      	subs	r2, r5, r2
 801a100:	4591      	cmp	r9, r2
 801a102:	ddba      	ble.n	801a07a <_dtoa_r+0xb32>
 801a104:	4659      	mov	r1, fp
 801a106:	2300      	movs	r3, #0
 801a108:	220a      	movs	r2, #10
 801a10a:	4620      	mov	r0, r4
 801a10c:	f000 f8b6 	bl	801a27c <__multadd>
 801a110:	4683      	mov	fp, r0
 801a112:	e7eb      	b.n	801a0ec <_dtoa_r+0xba4>
 801a114:	0801bd5f 	.word	0x0801bd5f
 801a118:	0801bcb8 	.word	0x0801bcb8
 801a11c:	0801bcdc 	.word	0x0801bcdc

0801a120 <_fstat_r>:
 801a120:	b538      	push	{r3, r4, r5, lr}
 801a122:	4d07      	ldr	r5, [pc, #28]	; (801a140 <_fstat_r+0x20>)
 801a124:	2300      	movs	r3, #0
 801a126:	4604      	mov	r4, r0
 801a128:	4608      	mov	r0, r1
 801a12a:	4611      	mov	r1, r2
 801a12c:	602b      	str	r3, [r5, #0]
 801a12e:	f7f7 f9fe 	bl	801152e <_fstat>
 801a132:	1c43      	adds	r3, r0, #1
 801a134:	d102      	bne.n	801a13c <_fstat_r+0x1c>
 801a136:	682b      	ldr	r3, [r5, #0]
 801a138:	b103      	cbz	r3, 801a13c <_fstat_r+0x1c>
 801a13a:	6023      	str	r3, [r4, #0]
 801a13c:	bd38      	pop	{r3, r4, r5, pc}
 801a13e:	bf00      	nop
 801a140:	20000b18 	.word	0x20000b18

0801a144 <_isatty_r>:
 801a144:	b538      	push	{r3, r4, r5, lr}
 801a146:	4d06      	ldr	r5, [pc, #24]	; (801a160 <_isatty_r+0x1c>)
 801a148:	2300      	movs	r3, #0
 801a14a:	4604      	mov	r4, r0
 801a14c:	4608      	mov	r0, r1
 801a14e:	602b      	str	r3, [r5, #0]
 801a150:	f7f7 f9fd 	bl	801154e <_isatty>
 801a154:	1c43      	adds	r3, r0, #1
 801a156:	d102      	bne.n	801a15e <_isatty_r+0x1a>
 801a158:	682b      	ldr	r3, [r5, #0]
 801a15a:	b103      	cbz	r3, 801a15e <_isatty_r+0x1a>
 801a15c:	6023      	str	r3, [r4, #0]
 801a15e:	bd38      	pop	{r3, r4, r5, pc}
 801a160:	20000b18 	.word	0x20000b18

0801a164 <_localeconv_r>:
 801a164:	4800      	ldr	r0, [pc, #0]	; (801a168 <_localeconv_r+0x4>)
 801a166:	4770      	bx	lr
 801a168:	20000180 	.word	0x20000180

0801a16c <_lseek_r>:
 801a16c:	b538      	push	{r3, r4, r5, lr}
 801a16e:	4d07      	ldr	r5, [pc, #28]	; (801a18c <_lseek_r+0x20>)
 801a170:	4604      	mov	r4, r0
 801a172:	4608      	mov	r0, r1
 801a174:	4611      	mov	r1, r2
 801a176:	2200      	movs	r2, #0
 801a178:	602a      	str	r2, [r5, #0]
 801a17a:	461a      	mov	r2, r3
 801a17c:	f7f7 f9f2 	bl	8011564 <_lseek>
 801a180:	1c43      	adds	r3, r0, #1
 801a182:	d102      	bne.n	801a18a <_lseek_r+0x1e>
 801a184:	682b      	ldr	r3, [r5, #0]
 801a186:	b103      	cbz	r3, 801a18a <_lseek_r+0x1e>
 801a188:	6023      	str	r3, [r4, #0]
 801a18a:	bd38      	pop	{r3, r4, r5, pc}
 801a18c:	20000b18 	.word	0x20000b18

0801a190 <malloc>:
 801a190:	4b02      	ldr	r3, [pc, #8]	; (801a19c <malloc+0xc>)
 801a192:	4601      	mov	r1, r0
 801a194:	6818      	ldr	r0, [r3, #0]
 801a196:	f7fe bbf1 	b.w	801897c <_malloc_r>
 801a19a:	bf00      	nop
 801a19c:	2000002c 	.word	0x2000002c

0801a1a0 <__malloc_lock>:
 801a1a0:	4801      	ldr	r0, [pc, #4]	; (801a1a8 <__malloc_lock+0x8>)
 801a1a2:	f7fe bb1e 	b.w	80187e2 <__retarget_lock_acquire_recursive>
 801a1a6:	bf00      	nop
 801a1a8:	20000b10 	.word	0x20000b10

0801a1ac <__malloc_unlock>:
 801a1ac:	4801      	ldr	r0, [pc, #4]	; (801a1b4 <__malloc_unlock+0x8>)
 801a1ae:	f7fe bb19 	b.w	80187e4 <__retarget_lock_release_recursive>
 801a1b2:	bf00      	nop
 801a1b4:	20000b10 	.word	0x20000b10

0801a1b8 <_Balloc>:
 801a1b8:	b570      	push	{r4, r5, r6, lr}
 801a1ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a1bc:	4604      	mov	r4, r0
 801a1be:	460d      	mov	r5, r1
 801a1c0:	b976      	cbnz	r6, 801a1e0 <_Balloc+0x28>
 801a1c2:	2010      	movs	r0, #16
 801a1c4:	f7ff ffe4 	bl	801a190 <malloc>
 801a1c8:	4602      	mov	r2, r0
 801a1ca:	6260      	str	r0, [r4, #36]	; 0x24
 801a1cc:	b920      	cbnz	r0, 801a1d8 <_Balloc+0x20>
 801a1ce:	4b18      	ldr	r3, [pc, #96]	; (801a230 <_Balloc+0x78>)
 801a1d0:	4818      	ldr	r0, [pc, #96]	; (801a234 <_Balloc+0x7c>)
 801a1d2:	2166      	movs	r1, #102	; 0x66
 801a1d4:	f000 fcea 	bl	801abac <__assert_func>
 801a1d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a1dc:	6006      	str	r6, [r0, #0]
 801a1de:	60c6      	str	r6, [r0, #12]
 801a1e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a1e2:	68f3      	ldr	r3, [r6, #12]
 801a1e4:	b183      	cbz	r3, 801a208 <_Balloc+0x50>
 801a1e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a1e8:	68db      	ldr	r3, [r3, #12]
 801a1ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a1ee:	b9b8      	cbnz	r0, 801a220 <_Balloc+0x68>
 801a1f0:	2101      	movs	r1, #1
 801a1f2:	fa01 f605 	lsl.w	r6, r1, r5
 801a1f6:	1d72      	adds	r2, r6, #5
 801a1f8:	0092      	lsls	r2, r2, #2
 801a1fa:	4620      	mov	r0, r4
 801a1fc:	f000 fb5a 	bl	801a8b4 <_calloc_r>
 801a200:	b160      	cbz	r0, 801a21c <_Balloc+0x64>
 801a202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a206:	e00e      	b.n	801a226 <_Balloc+0x6e>
 801a208:	2221      	movs	r2, #33	; 0x21
 801a20a:	2104      	movs	r1, #4
 801a20c:	4620      	mov	r0, r4
 801a20e:	f000 fb51 	bl	801a8b4 <_calloc_r>
 801a212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a214:	60f0      	str	r0, [r6, #12]
 801a216:	68db      	ldr	r3, [r3, #12]
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d1e4      	bne.n	801a1e6 <_Balloc+0x2e>
 801a21c:	2000      	movs	r0, #0
 801a21e:	bd70      	pop	{r4, r5, r6, pc}
 801a220:	6802      	ldr	r2, [r0, #0]
 801a222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a226:	2300      	movs	r3, #0
 801a228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a22c:	e7f7      	b.n	801a21e <_Balloc+0x66>
 801a22e:	bf00      	nop
 801a230:	0801bce9 	.word	0x0801bce9
 801a234:	0801bd70 	.word	0x0801bd70

0801a238 <_Bfree>:
 801a238:	b570      	push	{r4, r5, r6, lr}
 801a23a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a23c:	4605      	mov	r5, r0
 801a23e:	460c      	mov	r4, r1
 801a240:	b976      	cbnz	r6, 801a260 <_Bfree+0x28>
 801a242:	2010      	movs	r0, #16
 801a244:	f7ff ffa4 	bl	801a190 <malloc>
 801a248:	4602      	mov	r2, r0
 801a24a:	6268      	str	r0, [r5, #36]	; 0x24
 801a24c:	b920      	cbnz	r0, 801a258 <_Bfree+0x20>
 801a24e:	4b09      	ldr	r3, [pc, #36]	; (801a274 <_Bfree+0x3c>)
 801a250:	4809      	ldr	r0, [pc, #36]	; (801a278 <_Bfree+0x40>)
 801a252:	218a      	movs	r1, #138	; 0x8a
 801a254:	f000 fcaa 	bl	801abac <__assert_func>
 801a258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a25c:	6006      	str	r6, [r0, #0]
 801a25e:	60c6      	str	r6, [r0, #12]
 801a260:	b13c      	cbz	r4, 801a272 <_Bfree+0x3a>
 801a262:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a264:	6862      	ldr	r2, [r4, #4]
 801a266:	68db      	ldr	r3, [r3, #12]
 801a268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a26c:	6021      	str	r1, [r4, #0]
 801a26e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a272:	bd70      	pop	{r4, r5, r6, pc}
 801a274:	0801bce9 	.word	0x0801bce9
 801a278:	0801bd70 	.word	0x0801bd70

0801a27c <__multadd>:
 801a27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a280:	690e      	ldr	r6, [r1, #16]
 801a282:	4607      	mov	r7, r0
 801a284:	4698      	mov	r8, r3
 801a286:	460c      	mov	r4, r1
 801a288:	f101 0014 	add.w	r0, r1, #20
 801a28c:	2300      	movs	r3, #0
 801a28e:	6805      	ldr	r5, [r0, #0]
 801a290:	b2a9      	uxth	r1, r5
 801a292:	fb02 8101 	mla	r1, r2, r1, r8
 801a296:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801a29a:	0c2d      	lsrs	r5, r5, #16
 801a29c:	fb02 c505 	mla	r5, r2, r5, ip
 801a2a0:	b289      	uxth	r1, r1
 801a2a2:	3301      	adds	r3, #1
 801a2a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801a2a8:	429e      	cmp	r6, r3
 801a2aa:	f840 1b04 	str.w	r1, [r0], #4
 801a2ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801a2b2:	dcec      	bgt.n	801a28e <__multadd+0x12>
 801a2b4:	f1b8 0f00 	cmp.w	r8, #0
 801a2b8:	d022      	beq.n	801a300 <__multadd+0x84>
 801a2ba:	68a3      	ldr	r3, [r4, #8]
 801a2bc:	42b3      	cmp	r3, r6
 801a2be:	dc19      	bgt.n	801a2f4 <__multadd+0x78>
 801a2c0:	6861      	ldr	r1, [r4, #4]
 801a2c2:	4638      	mov	r0, r7
 801a2c4:	3101      	adds	r1, #1
 801a2c6:	f7ff ff77 	bl	801a1b8 <_Balloc>
 801a2ca:	4605      	mov	r5, r0
 801a2cc:	b928      	cbnz	r0, 801a2da <__multadd+0x5e>
 801a2ce:	4602      	mov	r2, r0
 801a2d0:	4b0d      	ldr	r3, [pc, #52]	; (801a308 <__multadd+0x8c>)
 801a2d2:	480e      	ldr	r0, [pc, #56]	; (801a30c <__multadd+0x90>)
 801a2d4:	21b5      	movs	r1, #181	; 0xb5
 801a2d6:	f000 fc69 	bl	801abac <__assert_func>
 801a2da:	6922      	ldr	r2, [r4, #16]
 801a2dc:	3202      	adds	r2, #2
 801a2de:	f104 010c 	add.w	r1, r4, #12
 801a2e2:	0092      	lsls	r2, r2, #2
 801a2e4:	300c      	adds	r0, #12
 801a2e6:	f7fe fae3 	bl	80188b0 <memcpy>
 801a2ea:	4621      	mov	r1, r4
 801a2ec:	4638      	mov	r0, r7
 801a2ee:	f7ff ffa3 	bl	801a238 <_Bfree>
 801a2f2:	462c      	mov	r4, r5
 801a2f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a2f8:	3601      	adds	r6, #1
 801a2fa:	f8c3 8014 	str.w	r8, [r3, #20]
 801a2fe:	6126      	str	r6, [r4, #16]
 801a300:	4620      	mov	r0, r4
 801a302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a306:	bf00      	nop
 801a308:	0801bd5f 	.word	0x0801bd5f
 801a30c:	0801bd70 	.word	0x0801bd70

0801a310 <__hi0bits>:
 801a310:	0c03      	lsrs	r3, r0, #16
 801a312:	041b      	lsls	r3, r3, #16
 801a314:	b9d3      	cbnz	r3, 801a34c <__hi0bits+0x3c>
 801a316:	0400      	lsls	r0, r0, #16
 801a318:	2310      	movs	r3, #16
 801a31a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a31e:	bf04      	itt	eq
 801a320:	0200      	lsleq	r0, r0, #8
 801a322:	3308      	addeq	r3, #8
 801a324:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a328:	bf04      	itt	eq
 801a32a:	0100      	lsleq	r0, r0, #4
 801a32c:	3304      	addeq	r3, #4
 801a32e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a332:	bf04      	itt	eq
 801a334:	0080      	lsleq	r0, r0, #2
 801a336:	3302      	addeq	r3, #2
 801a338:	2800      	cmp	r0, #0
 801a33a:	db05      	blt.n	801a348 <__hi0bits+0x38>
 801a33c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a340:	f103 0301 	add.w	r3, r3, #1
 801a344:	bf08      	it	eq
 801a346:	2320      	moveq	r3, #32
 801a348:	4618      	mov	r0, r3
 801a34a:	4770      	bx	lr
 801a34c:	2300      	movs	r3, #0
 801a34e:	e7e4      	b.n	801a31a <__hi0bits+0xa>

0801a350 <__lo0bits>:
 801a350:	6803      	ldr	r3, [r0, #0]
 801a352:	f013 0207 	ands.w	r2, r3, #7
 801a356:	4601      	mov	r1, r0
 801a358:	d00b      	beq.n	801a372 <__lo0bits+0x22>
 801a35a:	07da      	lsls	r2, r3, #31
 801a35c:	d424      	bmi.n	801a3a8 <__lo0bits+0x58>
 801a35e:	0798      	lsls	r0, r3, #30
 801a360:	bf49      	itett	mi
 801a362:	085b      	lsrmi	r3, r3, #1
 801a364:	089b      	lsrpl	r3, r3, #2
 801a366:	2001      	movmi	r0, #1
 801a368:	600b      	strmi	r3, [r1, #0]
 801a36a:	bf5c      	itt	pl
 801a36c:	600b      	strpl	r3, [r1, #0]
 801a36e:	2002      	movpl	r0, #2
 801a370:	4770      	bx	lr
 801a372:	b298      	uxth	r0, r3
 801a374:	b9b0      	cbnz	r0, 801a3a4 <__lo0bits+0x54>
 801a376:	0c1b      	lsrs	r3, r3, #16
 801a378:	2010      	movs	r0, #16
 801a37a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a37e:	bf04      	itt	eq
 801a380:	0a1b      	lsreq	r3, r3, #8
 801a382:	3008      	addeq	r0, #8
 801a384:	071a      	lsls	r2, r3, #28
 801a386:	bf04      	itt	eq
 801a388:	091b      	lsreq	r3, r3, #4
 801a38a:	3004      	addeq	r0, #4
 801a38c:	079a      	lsls	r2, r3, #30
 801a38e:	bf04      	itt	eq
 801a390:	089b      	lsreq	r3, r3, #2
 801a392:	3002      	addeq	r0, #2
 801a394:	07da      	lsls	r2, r3, #31
 801a396:	d403      	bmi.n	801a3a0 <__lo0bits+0x50>
 801a398:	085b      	lsrs	r3, r3, #1
 801a39a:	f100 0001 	add.w	r0, r0, #1
 801a39e:	d005      	beq.n	801a3ac <__lo0bits+0x5c>
 801a3a0:	600b      	str	r3, [r1, #0]
 801a3a2:	4770      	bx	lr
 801a3a4:	4610      	mov	r0, r2
 801a3a6:	e7e8      	b.n	801a37a <__lo0bits+0x2a>
 801a3a8:	2000      	movs	r0, #0
 801a3aa:	4770      	bx	lr
 801a3ac:	2020      	movs	r0, #32
 801a3ae:	4770      	bx	lr

0801a3b0 <__i2b>:
 801a3b0:	b510      	push	{r4, lr}
 801a3b2:	460c      	mov	r4, r1
 801a3b4:	2101      	movs	r1, #1
 801a3b6:	f7ff feff 	bl	801a1b8 <_Balloc>
 801a3ba:	4602      	mov	r2, r0
 801a3bc:	b928      	cbnz	r0, 801a3ca <__i2b+0x1a>
 801a3be:	4b05      	ldr	r3, [pc, #20]	; (801a3d4 <__i2b+0x24>)
 801a3c0:	4805      	ldr	r0, [pc, #20]	; (801a3d8 <__i2b+0x28>)
 801a3c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a3c6:	f000 fbf1 	bl	801abac <__assert_func>
 801a3ca:	2301      	movs	r3, #1
 801a3cc:	6144      	str	r4, [r0, #20]
 801a3ce:	6103      	str	r3, [r0, #16]
 801a3d0:	bd10      	pop	{r4, pc}
 801a3d2:	bf00      	nop
 801a3d4:	0801bd5f 	.word	0x0801bd5f
 801a3d8:	0801bd70 	.word	0x0801bd70

0801a3dc <__multiply>:
 801a3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3e0:	4614      	mov	r4, r2
 801a3e2:	690a      	ldr	r2, [r1, #16]
 801a3e4:	6923      	ldr	r3, [r4, #16]
 801a3e6:	429a      	cmp	r2, r3
 801a3e8:	bfb8      	it	lt
 801a3ea:	460b      	movlt	r3, r1
 801a3ec:	460d      	mov	r5, r1
 801a3ee:	bfbc      	itt	lt
 801a3f0:	4625      	movlt	r5, r4
 801a3f2:	461c      	movlt	r4, r3
 801a3f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a3f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a3fc:	68ab      	ldr	r3, [r5, #8]
 801a3fe:	6869      	ldr	r1, [r5, #4]
 801a400:	eb0a 0709 	add.w	r7, sl, r9
 801a404:	42bb      	cmp	r3, r7
 801a406:	b085      	sub	sp, #20
 801a408:	bfb8      	it	lt
 801a40a:	3101      	addlt	r1, #1
 801a40c:	f7ff fed4 	bl	801a1b8 <_Balloc>
 801a410:	b930      	cbnz	r0, 801a420 <__multiply+0x44>
 801a412:	4602      	mov	r2, r0
 801a414:	4b42      	ldr	r3, [pc, #264]	; (801a520 <__multiply+0x144>)
 801a416:	4843      	ldr	r0, [pc, #268]	; (801a524 <__multiply+0x148>)
 801a418:	f240 115d 	movw	r1, #349	; 0x15d
 801a41c:	f000 fbc6 	bl	801abac <__assert_func>
 801a420:	f100 0614 	add.w	r6, r0, #20
 801a424:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801a428:	4633      	mov	r3, r6
 801a42a:	2200      	movs	r2, #0
 801a42c:	4543      	cmp	r3, r8
 801a42e:	d31e      	bcc.n	801a46e <__multiply+0x92>
 801a430:	f105 0c14 	add.w	ip, r5, #20
 801a434:	f104 0314 	add.w	r3, r4, #20
 801a438:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801a43c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801a440:	9202      	str	r2, [sp, #8]
 801a442:	ebac 0205 	sub.w	r2, ip, r5
 801a446:	3a15      	subs	r2, #21
 801a448:	f022 0203 	bic.w	r2, r2, #3
 801a44c:	3204      	adds	r2, #4
 801a44e:	f105 0115 	add.w	r1, r5, #21
 801a452:	458c      	cmp	ip, r1
 801a454:	bf38      	it	cc
 801a456:	2204      	movcc	r2, #4
 801a458:	9201      	str	r2, [sp, #4]
 801a45a:	9a02      	ldr	r2, [sp, #8]
 801a45c:	9303      	str	r3, [sp, #12]
 801a45e:	429a      	cmp	r2, r3
 801a460:	d808      	bhi.n	801a474 <__multiply+0x98>
 801a462:	2f00      	cmp	r7, #0
 801a464:	dc55      	bgt.n	801a512 <__multiply+0x136>
 801a466:	6107      	str	r7, [r0, #16]
 801a468:	b005      	add	sp, #20
 801a46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a46e:	f843 2b04 	str.w	r2, [r3], #4
 801a472:	e7db      	b.n	801a42c <__multiply+0x50>
 801a474:	f8b3 a000 	ldrh.w	sl, [r3]
 801a478:	f1ba 0f00 	cmp.w	sl, #0
 801a47c:	d020      	beq.n	801a4c0 <__multiply+0xe4>
 801a47e:	f105 0e14 	add.w	lr, r5, #20
 801a482:	46b1      	mov	r9, r6
 801a484:	2200      	movs	r2, #0
 801a486:	f85e 4b04 	ldr.w	r4, [lr], #4
 801a48a:	f8d9 b000 	ldr.w	fp, [r9]
 801a48e:	b2a1      	uxth	r1, r4
 801a490:	fa1f fb8b 	uxth.w	fp, fp
 801a494:	fb0a b101 	mla	r1, sl, r1, fp
 801a498:	4411      	add	r1, r2
 801a49a:	f8d9 2000 	ldr.w	r2, [r9]
 801a49e:	0c24      	lsrs	r4, r4, #16
 801a4a0:	0c12      	lsrs	r2, r2, #16
 801a4a2:	fb0a 2404 	mla	r4, sl, r4, r2
 801a4a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801a4aa:	b289      	uxth	r1, r1
 801a4ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a4b0:	45f4      	cmp	ip, lr
 801a4b2:	f849 1b04 	str.w	r1, [r9], #4
 801a4b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801a4ba:	d8e4      	bhi.n	801a486 <__multiply+0xaa>
 801a4bc:	9901      	ldr	r1, [sp, #4]
 801a4be:	5072      	str	r2, [r6, r1]
 801a4c0:	9a03      	ldr	r2, [sp, #12]
 801a4c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a4c6:	3304      	adds	r3, #4
 801a4c8:	f1b9 0f00 	cmp.w	r9, #0
 801a4cc:	d01f      	beq.n	801a50e <__multiply+0x132>
 801a4ce:	6834      	ldr	r4, [r6, #0]
 801a4d0:	f105 0114 	add.w	r1, r5, #20
 801a4d4:	46b6      	mov	lr, r6
 801a4d6:	f04f 0a00 	mov.w	sl, #0
 801a4da:	880a      	ldrh	r2, [r1, #0]
 801a4dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 801a4e0:	fb09 b202 	mla	r2, r9, r2, fp
 801a4e4:	4492      	add	sl, r2
 801a4e6:	b2a4      	uxth	r4, r4
 801a4e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a4ec:	f84e 4b04 	str.w	r4, [lr], #4
 801a4f0:	f851 4b04 	ldr.w	r4, [r1], #4
 801a4f4:	f8be 2000 	ldrh.w	r2, [lr]
 801a4f8:	0c24      	lsrs	r4, r4, #16
 801a4fa:	fb09 2404 	mla	r4, r9, r4, r2
 801a4fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801a502:	458c      	cmp	ip, r1
 801a504:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a508:	d8e7      	bhi.n	801a4da <__multiply+0xfe>
 801a50a:	9a01      	ldr	r2, [sp, #4]
 801a50c:	50b4      	str	r4, [r6, r2]
 801a50e:	3604      	adds	r6, #4
 801a510:	e7a3      	b.n	801a45a <__multiply+0x7e>
 801a512:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a516:	2b00      	cmp	r3, #0
 801a518:	d1a5      	bne.n	801a466 <__multiply+0x8a>
 801a51a:	3f01      	subs	r7, #1
 801a51c:	e7a1      	b.n	801a462 <__multiply+0x86>
 801a51e:	bf00      	nop
 801a520:	0801bd5f 	.word	0x0801bd5f
 801a524:	0801bd70 	.word	0x0801bd70

0801a528 <__pow5mult>:
 801a528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a52c:	4615      	mov	r5, r2
 801a52e:	f012 0203 	ands.w	r2, r2, #3
 801a532:	4606      	mov	r6, r0
 801a534:	460f      	mov	r7, r1
 801a536:	d007      	beq.n	801a548 <__pow5mult+0x20>
 801a538:	4c25      	ldr	r4, [pc, #148]	; (801a5d0 <__pow5mult+0xa8>)
 801a53a:	3a01      	subs	r2, #1
 801a53c:	2300      	movs	r3, #0
 801a53e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a542:	f7ff fe9b 	bl	801a27c <__multadd>
 801a546:	4607      	mov	r7, r0
 801a548:	10ad      	asrs	r5, r5, #2
 801a54a:	d03d      	beq.n	801a5c8 <__pow5mult+0xa0>
 801a54c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a54e:	b97c      	cbnz	r4, 801a570 <__pow5mult+0x48>
 801a550:	2010      	movs	r0, #16
 801a552:	f7ff fe1d 	bl	801a190 <malloc>
 801a556:	4602      	mov	r2, r0
 801a558:	6270      	str	r0, [r6, #36]	; 0x24
 801a55a:	b928      	cbnz	r0, 801a568 <__pow5mult+0x40>
 801a55c:	4b1d      	ldr	r3, [pc, #116]	; (801a5d4 <__pow5mult+0xac>)
 801a55e:	481e      	ldr	r0, [pc, #120]	; (801a5d8 <__pow5mult+0xb0>)
 801a560:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a564:	f000 fb22 	bl	801abac <__assert_func>
 801a568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a56c:	6004      	str	r4, [r0, #0]
 801a56e:	60c4      	str	r4, [r0, #12]
 801a570:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a578:	b94c      	cbnz	r4, 801a58e <__pow5mult+0x66>
 801a57a:	f240 2171 	movw	r1, #625	; 0x271
 801a57e:	4630      	mov	r0, r6
 801a580:	f7ff ff16 	bl	801a3b0 <__i2b>
 801a584:	2300      	movs	r3, #0
 801a586:	f8c8 0008 	str.w	r0, [r8, #8]
 801a58a:	4604      	mov	r4, r0
 801a58c:	6003      	str	r3, [r0, #0]
 801a58e:	f04f 0900 	mov.w	r9, #0
 801a592:	07eb      	lsls	r3, r5, #31
 801a594:	d50a      	bpl.n	801a5ac <__pow5mult+0x84>
 801a596:	4639      	mov	r1, r7
 801a598:	4622      	mov	r2, r4
 801a59a:	4630      	mov	r0, r6
 801a59c:	f7ff ff1e 	bl	801a3dc <__multiply>
 801a5a0:	4639      	mov	r1, r7
 801a5a2:	4680      	mov	r8, r0
 801a5a4:	4630      	mov	r0, r6
 801a5a6:	f7ff fe47 	bl	801a238 <_Bfree>
 801a5aa:	4647      	mov	r7, r8
 801a5ac:	106d      	asrs	r5, r5, #1
 801a5ae:	d00b      	beq.n	801a5c8 <__pow5mult+0xa0>
 801a5b0:	6820      	ldr	r0, [r4, #0]
 801a5b2:	b938      	cbnz	r0, 801a5c4 <__pow5mult+0x9c>
 801a5b4:	4622      	mov	r2, r4
 801a5b6:	4621      	mov	r1, r4
 801a5b8:	4630      	mov	r0, r6
 801a5ba:	f7ff ff0f 	bl	801a3dc <__multiply>
 801a5be:	6020      	str	r0, [r4, #0]
 801a5c0:	f8c0 9000 	str.w	r9, [r0]
 801a5c4:	4604      	mov	r4, r0
 801a5c6:	e7e4      	b.n	801a592 <__pow5mult+0x6a>
 801a5c8:	4638      	mov	r0, r7
 801a5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a5ce:	bf00      	nop
 801a5d0:	0801bec0 	.word	0x0801bec0
 801a5d4:	0801bce9 	.word	0x0801bce9
 801a5d8:	0801bd70 	.word	0x0801bd70

0801a5dc <__lshift>:
 801a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5e0:	460c      	mov	r4, r1
 801a5e2:	6849      	ldr	r1, [r1, #4]
 801a5e4:	6923      	ldr	r3, [r4, #16]
 801a5e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a5ea:	68a3      	ldr	r3, [r4, #8]
 801a5ec:	4607      	mov	r7, r0
 801a5ee:	4691      	mov	r9, r2
 801a5f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a5f4:	f108 0601 	add.w	r6, r8, #1
 801a5f8:	42b3      	cmp	r3, r6
 801a5fa:	db0b      	blt.n	801a614 <__lshift+0x38>
 801a5fc:	4638      	mov	r0, r7
 801a5fe:	f7ff fddb 	bl	801a1b8 <_Balloc>
 801a602:	4605      	mov	r5, r0
 801a604:	b948      	cbnz	r0, 801a61a <__lshift+0x3e>
 801a606:	4602      	mov	r2, r0
 801a608:	4b28      	ldr	r3, [pc, #160]	; (801a6ac <__lshift+0xd0>)
 801a60a:	4829      	ldr	r0, [pc, #164]	; (801a6b0 <__lshift+0xd4>)
 801a60c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a610:	f000 facc 	bl	801abac <__assert_func>
 801a614:	3101      	adds	r1, #1
 801a616:	005b      	lsls	r3, r3, #1
 801a618:	e7ee      	b.n	801a5f8 <__lshift+0x1c>
 801a61a:	2300      	movs	r3, #0
 801a61c:	f100 0114 	add.w	r1, r0, #20
 801a620:	f100 0210 	add.w	r2, r0, #16
 801a624:	4618      	mov	r0, r3
 801a626:	4553      	cmp	r3, sl
 801a628:	db33      	blt.n	801a692 <__lshift+0xb6>
 801a62a:	6920      	ldr	r0, [r4, #16]
 801a62c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a630:	f104 0314 	add.w	r3, r4, #20
 801a634:	f019 091f 	ands.w	r9, r9, #31
 801a638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a63c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a640:	d02b      	beq.n	801a69a <__lshift+0xbe>
 801a642:	f1c9 0e20 	rsb	lr, r9, #32
 801a646:	468a      	mov	sl, r1
 801a648:	2200      	movs	r2, #0
 801a64a:	6818      	ldr	r0, [r3, #0]
 801a64c:	fa00 f009 	lsl.w	r0, r0, r9
 801a650:	4302      	orrs	r2, r0
 801a652:	f84a 2b04 	str.w	r2, [sl], #4
 801a656:	f853 2b04 	ldr.w	r2, [r3], #4
 801a65a:	459c      	cmp	ip, r3
 801a65c:	fa22 f20e 	lsr.w	r2, r2, lr
 801a660:	d8f3      	bhi.n	801a64a <__lshift+0x6e>
 801a662:	ebac 0304 	sub.w	r3, ip, r4
 801a666:	3b15      	subs	r3, #21
 801a668:	f023 0303 	bic.w	r3, r3, #3
 801a66c:	3304      	adds	r3, #4
 801a66e:	f104 0015 	add.w	r0, r4, #21
 801a672:	4584      	cmp	ip, r0
 801a674:	bf38      	it	cc
 801a676:	2304      	movcc	r3, #4
 801a678:	50ca      	str	r2, [r1, r3]
 801a67a:	b10a      	cbz	r2, 801a680 <__lshift+0xa4>
 801a67c:	f108 0602 	add.w	r6, r8, #2
 801a680:	3e01      	subs	r6, #1
 801a682:	4638      	mov	r0, r7
 801a684:	612e      	str	r6, [r5, #16]
 801a686:	4621      	mov	r1, r4
 801a688:	f7ff fdd6 	bl	801a238 <_Bfree>
 801a68c:	4628      	mov	r0, r5
 801a68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a692:	f842 0f04 	str.w	r0, [r2, #4]!
 801a696:	3301      	adds	r3, #1
 801a698:	e7c5      	b.n	801a626 <__lshift+0x4a>
 801a69a:	3904      	subs	r1, #4
 801a69c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6a0:	f841 2f04 	str.w	r2, [r1, #4]!
 801a6a4:	459c      	cmp	ip, r3
 801a6a6:	d8f9      	bhi.n	801a69c <__lshift+0xc0>
 801a6a8:	e7ea      	b.n	801a680 <__lshift+0xa4>
 801a6aa:	bf00      	nop
 801a6ac:	0801bd5f 	.word	0x0801bd5f
 801a6b0:	0801bd70 	.word	0x0801bd70

0801a6b4 <__mcmp>:
 801a6b4:	b530      	push	{r4, r5, lr}
 801a6b6:	6902      	ldr	r2, [r0, #16]
 801a6b8:	690c      	ldr	r4, [r1, #16]
 801a6ba:	1b12      	subs	r2, r2, r4
 801a6bc:	d10e      	bne.n	801a6dc <__mcmp+0x28>
 801a6be:	f100 0314 	add.w	r3, r0, #20
 801a6c2:	3114      	adds	r1, #20
 801a6c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a6c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a6cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a6d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a6d4:	42a5      	cmp	r5, r4
 801a6d6:	d003      	beq.n	801a6e0 <__mcmp+0x2c>
 801a6d8:	d305      	bcc.n	801a6e6 <__mcmp+0x32>
 801a6da:	2201      	movs	r2, #1
 801a6dc:	4610      	mov	r0, r2
 801a6de:	bd30      	pop	{r4, r5, pc}
 801a6e0:	4283      	cmp	r3, r0
 801a6e2:	d3f3      	bcc.n	801a6cc <__mcmp+0x18>
 801a6e4:	e7fa      	b.n	801a6dc <__mcmp+0x28>
 801a6e6:	f04f 32ff 	mov.w	r2, #4294967295
 801a6ea:	e7f7      	b.n	801a6dc <__mcmp+0x28>

0801a6ec <__mdiff>:
 801a6ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6f0:	460c      	mov	r4, r1
 801a6f2:	4606      	mov	r6, r0
 801a6f4:	4611      	mov	r1, r2
 801a6f6:	4620      	mov	r0, r4
 801a6f8:	4617      	mov	r7, r2
 801a6fa:	f7ff ffdb 	bl	801a6b4 <__mcmp>
 801a6fe:	1e05      	subs	r5, r0, #0
 801a700:	d110      	bne.n	801a724 <__mdiff+0x38>
 801a702:	4629      	mov	r1, r5
 801a704:	4630      	mov	r0, r6
 801a706:	f7ff fd57 	bl	801a1b8 <_Balloc>
 801a70a:	b930      	cbnz	r0, 801a71a <__mdiff+0x2e>
 801a70c:	4b39      	ldr	r3, [pc, #228]	; (801a7f4 <__mdiff+0x108>)
 801a70e:	4602      	mov	r2, r0
 801a710:	f240 2132 	movw	r1, #562	; 0x232
 801a714:	4838      	ldr	r0, [pc, #224]	; (801a7f8 <__mdiff+0x10c>)
 801a716:	f000 fa49 	bl	801abac <__assert_func>
 801a71a:	2301      	movs	r3, #1
 801a71c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a724:	bfa4      	itt	ge
 801a726:	463b      	movge	r3, r7
 801a728:	4627      	movge	r7, r4
 801a72a:	4630      	mov	r0, r6
 801a72c:	6879      	ldr	r1, [r7, #4]
 801a72e:	bfa6      	itte	ge
 801a730:	461c      	movge	r4, r3
 801a732:	2500      	movge	r5, #0
 801a734:	2501      	movlt	r5, #1
 801a736:	f7ff fd3f 	bl	801a1b8 <_Balloc>
 801a73a:	b920      	cbnz	r0, 801a746 <__mdiff+0x5a>
 801a73c:	4b2d      	ldr	r3, [pc, #180]	; (801a7f4 <__mdiff+0x108>)
 801a73e:	4602      	mov	r2, r0
 801a740:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a744:	e7e6      	b.n	801a714 <__mdiff+0x28>
 801a746:	693e      	ldr	r6, [r7, #16]
 801a748:	60c5      	str	r5, [r0, #12]
 801a74a:	6925      	ldr	r5, [r4, #16]
 801a74c:	f107 0114 	add.w	r1, r7, #20
 801a750:	f104 0914 	add.w	r9, r4, #20
 801a754:	f100 0e14 	add.w	lr, r0, #20
 801a758:	f107 0210 	add.w	r2, r7, #16
 801a75c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a760:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a764:	46f2      	mov	sl, lr
 801a766:	2700      	movs	r7, #0
 801a768:	f859 3b04 	ldr.w	r3, [r9], #4
 801a76c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a770:	fa1f f883 	uxth.w	r8, r3
 801a774:	fa17 f78b 	uxtah	r7, r7, fp
 801a778:	0c1b      	lsrs	r3, r3, #16
 801a77a:	eba7 0808 	sub.w	r8, r7, r8
 801a77e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a782:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a786:	fa1f f888 	uxth.w	r8, r8
 801a78a:	141f      	asrs	r7, r3, #16
 801a78c:	454d      	cmp	r5, r9
 801a78e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a792:	f84a 3b04 	str.w	r3, [sl], #4
 801a796:	d8e7      	bhi.n	801a768 <__mdiff+0x7c>
 801a798:	1b2b      	subs	r3, r5, r4
 801a79a:	3b15      	subs	r3, #21
 801a79c:	f023 0303 	bic.w	r3, r3, #3
 801a7a0:	3304      	adds	r3, #4
 801a7a2:	3415      	adds	r4, #21
 801a7a4:	42a5      	cmp	r5, r4
 801a7a6:	bf38      	it	cc
 801a7a8:	2304      	movcc	r3, #4
 801a7aa:	4419      	add	r1, r3
 801a7ac:	4473      	add	r3, lr
 801a7ae:	469e      	mov	lr, r3
 801a7b0:	460d      	mov	r5, r1
 801a7b2:	4565      	cmp	r5, ip
 801a7b4:	d30e      	bcc.n	801a7d4 <__mdiff+0xe8>
 801a7b6:	f10c 0203 	add.w	r2, ip, #3
 801a7ba:	1a52      	subs	r2, r2, r1
 801a7bc:	f022 0203 	bic.w	r2, r2, #3
 801a7c0:	3903      	subs	r1, #3
 801a7c2:	458c      	cmp	ip, r1
 801a7c4:	bf38      	it	cc
 801a7c6:	2200      	movcc	r2, #0
 801a7c8:	441a      	add	r2, r3
 801a7ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a7ce:	b17b      	cbz	r3, 801a7f0 <__mdiff+0x104>
 801a7d0:	6106      	str	r6, [r0, #16]
 801a7d2:	e7a5      	b.n	801a720 <__mdiff+0x34>
 801a7d4:	f855 8b04 	ldr.w	r8, [r5], #4
 801a7d8:	fa17 f488 	uxtah	r4, r7, r8
 801a7dc:	1422      	asrs	r2, r4, #16
 801a7de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a7e2:	b2a4      	uxth	r4, r4
 801a7e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a7e8:	f84e 4b04 	str.w	r4, [lr], #4
 801a7ec:	1417      	asrs	r7, r2, #16
 801a7ee:	e7e0      	b.n	801a7b2 <__mdiff+0xc6>
 801a7f0:	3e01      	subs	r6, #1
 801a7f2:	e7ea      	b.n	801a7ca <__mdiff+0xde>
 801a7f4:	0801bd5f 	.word	0x0801bd5f
 801a7f8:	0801bd70 	.word	0x0801bd70

0801a7fc <__d2b>:
 801a7fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a800:	4689      	mov	r9, r1
 801a802:	2101      	movs	r1, #1
 801a804:	ec57 6b10 	vmov	r6, r7, d0
 801a808:	4690      	mov	r8, r2
 801a80a:	f7ff fcd5 	bl	801a1b8 <_Balloc>
 801a80e:	4604      	mov	r4, r0
 801a810:	b930      	cbnz	r0, 801a820 <__d2b+0x24>
 801a812:	4602      	mov	r2, r0
 801a814:	4b25      	ldr	r3, [pc, #148]	; (801a8ac <__d2b+0xb0>)
 801a816:	4826      	ldr	r0, [pc, #152]	; (801a8b0 <__d2b+0xb4>)
 801a818:	f240 310a 	movw	r1, #778	; 0x30a
 801a81c:	f000 f9c6 	bl	801abac <__assert_func>
 801a820:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a824:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a828:	bb35      	cbnz	r5, 801a878 <__d2b+0x7c>
 801a82a:	2e00      	cmp	r6, #0
 801a82c:	9301      	str	r3, [sp, #4]
 801a82e:	d028      	beq.n	801a882 <__d2b+0x86>
 801a830:	4668      	mov	r0, sp
 801a832:	9600      	str	r6, [sp, #0]
 801a834:	f7ff fd8c 	bl	801a350 <__lo0bits>
 801a838:	9900      	ldr	r1, [sp, #0]
 801a83a:	b300      	cbz	r0, 801a87e <__d2b+0x82>
 801a83c:	9a01      	ldr	r2, [sp, #4]
 801a83e:	f1c0 0320 	rsb	r3, r0, #32
 801a842:	fa02 f303 	lsl.w	r3, r2, r3
 801a846:	430b      	orrs	r3, r1
 801a848:	40c2      	lsrs	r2, r0
 801a84a:	6163      	str	r3, [r4, #20]
 801a84c:	9201      	str	r2, [sp, #4]
 801a84e:	9b01      	ldr	r3, [sp, #4]
 801a850:	61a3      	str	r3, [r4, #24]
 801a852:	2b00      	cmp	r3, #0
 801a854:	bf14      	ite	ne
 801a856:	2202      	movne	r2, #2
 801a858:	2201      	moveq	r2, #1
 801a85a:	6122      	str	r2, [r4, #16]
 801a85c:	b1d5      	cbz	r5, 801a894 <__d2b+0x98>
 801a85e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a862:	4405      	add	r5, r0
 801a864:	f8c9 5000 	str.w	r5, [r9]
 801a868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a86c:	f8c8 0000 	str.w	r0, [r8]
 801a870:	4620      	mov	r0, r4
 801a872:	b003      	add	sp, #12
 801a874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a87c:	e7d5      	b.n	801a82a <__d2b+0x2e>
 801a87e:	6161      	str	r1, [r4, #20]
 801a880:	e7e5      	b.n	801a84e <__d2b+0x52>
 801a882:	a801      	add	r0, sp, #4
 801a884:	f7ff fd64 	bl	801a350 <__lo0bits>
 801a888:	9b01      	ldr	r3, [sp, #4]
 801a88a:	6163      	str	r3, [r4, #20]
 801a88c:	2201      	movs	r2, #1
 801a88e:	6122      	str	r2, [r4, #16]
 801a890:	3020      	adds	r0, #32
 801a892:	e7e3      	b.n	801a85c <__d2b+0x60>
 801a894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a89c:	f8c9 0000 	str.w	r0, [r9]
 801a8a0:	6918      	ldr	r0, [r3, #16]
 801a8a2:	f7ff fd35 	bl	801a310 <__hi0bits>
 801a8a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a8aa:	e7df      	b.n	801a86c <__d2b+0x70>
 801a8ac:	0801bd5f 	.word	0x0801bd5f
 801a8b0:	0801bd70 	.word	0x0801bd70

0801a8b4 <_calloc_r>:
 801a8b4:	b513      	push	{r0, r1, r4, lr}
 801a8b6:	434a      	muls	r2, r1
 801a8b8:	4611      	mov	r1, r2
 801a8ba:	9201      	str	r2, [sp, #4]
 801a8bc:	f7fe f85e 	bl	801897c <_malloc_r>
 801a8c0:	4604      	mov	r4, r0
 801a8c2:	b118      	cbz	r0, 801a8cc <_calloc_r+0x18>
 801a8c4:	9a01      	ldr	r2, [sp, #4]
 801a8c6:	2100      	movs	r1, #0
 801a8c8:	f7fe f800 	bl	80188cc <memset>
 801a8cc:	4620      	mov	r0, r4
 801a8ce:	b002      	add	sp, #8
 801a8d0:	bd10      	pop	{r4, pc}

0801a8d2 <__ssputs_r>:
 801a8d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8d6:	688e      	ldr	r6, [r1, #8]
 801a8d8:	429e      	cmp	r6, r3
 801a8da:	4682      	mov	sl, r0
 801a8dc:	460c      	mov	r4, r1
 801a8de:	4690      	mov	r8, r2
 801a8e0:	461f      	mov	r7, r3
 801a8e2:	d838      	bhi.n	801a956 <__ssputs_r+0x84>
 801a8e4:	898a      	ldrh	r2, [r1, #12]
 801a8e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a8ea:	d032      	beq.n	801a952 <__ssputs_r+0x80>
 801a8ec:	6825      	ldr	r5, [r4, #0]
 801a8ee:	6909      	ldr	r1, [r1, #16]
 801a8f0:	eba5 0901 	sub.w	r9, r5, r1
 801a8f4:	6965      	ldr	r5, [r4, #20]
 801a8f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a8fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a8fe:	3301      	adds	r3, #1
 801a900:	444b      	add	r3, r9
 801a902:	106d      	asrs	r5, r5, #1
 801a904:	429d      	cmp	r5, r3
 801a906:	bf38      	it	cc
 801a908:	461d      	movcc	r5, r3
 801a90a:	0553      	lsls	r3, r2, #21
 801a90c:	d531      	bpl.n	801a972 <__ssputs_r+0xa0>
 801a90e:	4629      	mov	r1, r5
 801a910:	f7fe f834 	bl	801897c <_malloc_r>
 801a914:	4606      	mov	r6, r0
 801a916:	b950      	cbnz	r0, 801a92e <__ssputs_r+0x5c>
 801a918:	230c      	movs	r3, #12
 801a91a:	f8ca 3000 	str.w	r3, [sl]
 801a91e:	89a3      	ldrh	r3, [r4, #12]
 801a920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a924:	81a3      	strh	r3, [r4, #12]
 801a926:	f04f 30ff 	mov.w	r0, #4294967295
 801a92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a92e:	6921      	ldr	r1, [r4, #16]
 801a930:	464a      	mov	r2, r9
 801a932:	f7fd ffbd 	bl	80188b0 <memcpy>
 801a936:	89a3      	ldrh	r3, [r4, #12]
 801a938:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a940:	81a3      	strh	r3, [r4, #12]
 801a942:	6126      	str	r6, [r4, #16]
 801a944:	6165      	str	r5, [r4, #20]
 801a946:	444e      	add	r6, r9
 801a948:	eba5 0509 	sub.w	r5, r5, r9
 801a94c:	6026      	str	r6, [r4, #0]
 801a94e:	60a5      	str	r5, [r4, #8]
 801a950:	463e      	mov	r6, r7
 801a952:	42be      	cmp	r6, r7
 801a954:	d900      	bls.n	801a958 <__ssputs_r+0x86>
 801a956:	463e      	mov	r6, r7
 801a958:	4632      	mov	r2, r6
 801a95a:	6820      	ldr	r0, [r4, #0]
 801a95c:	4641      	mov	r1, r8
 801a95e:	f000 f967 	bl	801ac30 <memmove>
 801a962:	68a3      	ldr	r3, [r4, #8]
 801a964:	6822      	ldr	r2, [r4, #0]
 801a966:	1b9b      	subs	r3, r3, r6
 801a968:	4432      	add	r2, r6
 801a96a:	60a3      	str	r3, [r4, #8]
 801a96c:	6022      	str	r2, [r4, #0]
 801a96e:	2000      	movs	r0, #0
 801a970:	e7db      	b.n	801a92a <__ssputs_r+0x58>
 801a972:	462a      	mov	r2, r5
 801a974:	f000 f976 	bl	801ac64 <_realloc_r>
 801a978:	4606      	mov	r6, r0
 801a97a:	2800      	cmp	r0, #0
 801a97c:	d1e1      	bne.n	801a942 <__ssputs_r+0x70>
 801a97e:	6921      	ldr	r1, [r4, #16]
 801a980:	4650      	mov	r0, sl
 801a982:	f7fd ffab 	bl	80188dc <_free_r>
 801a986:	e7c7      	b.n	801a918 <__ssputs_r+0x46>

0801a988 <_svfiprintf_r>:
 801a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a98c:	4698      	mov	r8, r3
 801a98e:	898b      	ldrh	r3, [r1, #12]
 801a990:	061b      	lsls	r3, r3, #24
 801a992:	b09d      	sub	sp, #116	; 0x74
 801a994:	4607      	mov	r7, r0
 801a996:	460d      	mov	r5, r1
 801a998:	4614      	mov	r4, r2
 801a99a:	d50e      	bpl.n	801a9ba <_svfiprintf_r+0x32>
 801a99c:	690b      	ldr	r3, [r1, #16]
 801a99e:	b963      	cbnz	r3, 801a9ba <_svfiprintf_r+0x32>
 801a9a0:	2140      	movs	r1, #64	; 0x40
 801a9a2:	f7fd ffeb 	bl	801897c <_malloc_r>
 801a9a6:	6028      	str	r0, [r5, #0]
 801a9a8:	6128      	str	r0, [r5, #16]
 801a9aa:	b920      	cbnz	r0, 801a9b6 <_svfiprintf_r+0x2e>
 801a9ac:	230c      	movs	r3, #12
 801a9ae:	603b      	str	r3, [r7, #0]
 801a9b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a9b4:	e0d1      	b.n	801ab5a <_svfiprintf_r+0x1d2>
 801a9b6:	2340      	movs	r3, #64	; 0x40
 801a9b8:	616b      	str	r3, [r5, #20]
 801a9ba:	2300      	movs	r3, #0
 801a9bc:	9309      	str	r3, [sp, #36]	; 0x24
 801a9be:	2320      	movs	r3, #32
 801a9c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a9c4:	f8cd 800c 	str.w	r8, [sp, #12]
 801a9c8:	2330      	movs	r3, #48	; 0x30
 801a9ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ab74 <_svfiprintf_r+0x1ec>
 801a9ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a9d2:	f04f 0901 	mov.w	r9, #1
 801a9d6:	4623      	mov	r3, r4
 801a9d8:	469a      	mov	sl, r3
 801a9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a9de:	b10a      	cbz	r2, 801a9e4 <_svfiprintf_r+0x5c>
 801a9e0:	2a25      	cmp	r2, #37	; 0x25
 801a9e2:	d1f9      	bne.n	801a9d8 <_svfiprintf_r+0x50>
 801a9e4:	ebba 0b04 	subs.w	fp, sl, r4
 801a9e8:	d00b      	beq.n	801aa02 <_svfiprintf_r+0x7a>
 801a9ea:	465b      	mov	r3, fp
 801a9ec:	4622      	mov	r2, r4
 801a9ee:	4629      	mov	r1, r5
 801a9f0:	4638      	mov	r0, r7
 801a9f2:	f7ff ff6e 	bl	801a8d2 <__ssputs_r>
 801a9f6:	3001      	adds	r0, #1
 801a9f8:	f000 80aa 	beq.w	801ab50 <_svfiprintf_r+0x1c8>
 801a9fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a9fe:	445a      	add	r2, fp
 801aa00:	9209      	str	r2, [sp, #36]	; 0x24
 801aa02:	f89a 3000 	ldrb.w	r3, [sl]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	f000 80a2 	beq.w	801ab50 <_svfiprintf_r+0x1c8>
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	f04f 32ff 	mov.w	r2, #4294967295
 801aa12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aa16:	f10a 0a01 	add.w	sl, sl, #1
 801aa1a:	9304      	str	r3, [sp, #16]
 801aa1c:	9307      	str	r3, [sp, #28]
 801aa1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aa22:	931a      	str	r3, [sp, #104]	; 0x68
 801aa24:	4654      	mov	r4, sl
 801aa26:	2205      	movs	r2, #5
 801aa28:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa2c:	4851      	ldr	r0, [pc, #324]	; (801ab74 <_svfiprintf_r+0x1ec>)
 801aa2e:	f7e5 fbd7 	bl	80001e0 <memchr>
 801aa32:	9a04      	ldr	r2, [sp, #16]
 801aa34:	b9d8      	cbnz	r0, 801aa6e <_svfiprintf_r+0xe6>
 801aa36:	06d0      	lsls	r0, r2, #27
 801aa38:	bf44      	itt	mi
 801aa3a:	2320      	movmi	r3, #32
 801aa3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa40:	0711      	lsls	r1, r2, #28
 801aa42:	bf44      	itt	mi
 801aa44:	232b      	movmi	r3, #43	; 0x2b
 801aa46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa4a:	f89a 3000 	ldrb.w	r3, [sl]
 801aa4e:	2b2a      	cmp	r3, #42	; 0x2a
 801aa50:	d015      	beq.n	801aa7e <_svfiprintf_r+0xf6>
 801aa52:	9a07      	ldr	r2, [sp, #28]
 801aa54:	4654      	mov	r4, sl
 801aa56:	2000      	movs	r0, #0
 801aa58:	f04f 0c0a 	mov.w	ip, #10
 801aa5c:	4621      	mov	r1, r4
 801aa5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa62:	3b30      	subs	r3, #48	; 0x30
 801aa64:	2b09      	cmp	r3, #9
 801aa66:	d94e      	bls.n	801ab06 <_svfiprintf_r+0x17e>
 801aa68:	b1b0      	cbz	r0, 801aa98 <_svfiprintf_r+0x110>
 801aa6a:	9207      	str	r2, [sp, #28]
 801aa6c:	e014      	b.n	801aa98 <_svfiprintf_r+0x110>
 801aa6e:	eba0 0308 	sub.w	r3, r0, r8
 801aa72:	fa09 f303 	lsl.w	r3, r9, r3
 801aa76:	4313      	orrs	r3, r2
 801aa78:	9304      	str	r3, [sp, #16]
 801aa7a:	46a2      	mov	sl, r4
 801aa7c:	e7d2      	b.n	801aa24 <_svfiprintf_r+0x9c>
 801aa7e:	9b03      	ldr	r3, [sp, #12]
 801aa80:	1d19      	adds	r1, r3, #4
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	9103      	str	r1, [sp, #12]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	bfbb      	ittet	lt
 801aa8a:	425b      	neglt	r3, r3
 801aa8c:	f042 0202 	orrlt.w	r2, r2, #2
 801aa90:	9307      	strge	r3, [sp, #28]
 801aa92:	9307      	strlt	r3, [sp, #28]
 801aa94:	bfb8      	it	lt
 801aa96:	9204      	strlt	r2, [sp, #16]
 801aa98:	7823      	ldrb	r3, [r4, #0]
 801aa9a:	2b2e      	cmp	r3, #46	; 0x2e
 801aa9c:	d10c      	bne.n	801aab8 <_svfiprintf_r+0x130>
 801aa9e:	7863      	ldrb	r3, [r4, #1]
 801aaa0:	2b2a      	cmp	r3, #42	; 0x2a
 801aaa2:	d135      	bne.n	801ab10 <_svfiprintf_r+0x188>
 801aaa4:	9b03      	ldr	r3, [sp, #12]
 801aaa6:	1d1a      	adds	r2, r3, #4
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	9203      	str	r2, [sp, #12]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	bfb8      	it	lt
 801aab0:	f04f 33ff 	movlt.w	r3, #4294967295
 801aab4:	3402      	adds	r4, #2
 801aab6:	9305      	str	r3, [sp, #20]
 801aab8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ab84 <_svfiprintf_r+0x1fc>
 801aabc:	7821      	ldrb	r1, [r4, #0]
 801aabe:	2203      	movs	r2, #3
 801aac0:	4650      	mov	r0, sl
 801aac2:	f7e5 fb8d 	bl	80001e0 <memchr>
 801aac6:	b140      	cbz	r0, 801aada <_svfiprintf_r+0x152>
 801aac8:	2340      	movs	r3, #64	; 0x40
 801aaca:	eba0 000a 	sub.w	r0, r0, sl
 801aace:	fa03 f000 	lsl.w	r0, r3, r0
 801aad2:	9b04      	ldr	r3, [sp, #16]
 801aad4:	4303      	orrs	r3, r0
 801aad6:	3401      	adds	r4, #1
 801aad8:	9304      	str	r3, [sp, #16]
 801aada:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aade:	4826      	ldr	r0, [pc, #152]	; (801ab78 <_svfiprintf_r+0x1f0>)
 801aae0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aae4:	2206      	movs	r2, #6
 801aae6:	f7e5 fb7b 	bl	80001e0 <memchr>
 801aaea:	2800      	cmp	r0, #0
 801aaec:	d038      	beq.n	801ab60 <_svfiprintf_r+0x1d8>
 801aaee:	4b23      	ldr	r3, [pc, #140]	; (801ab7c <_svfiprintf_r+0x1f4>)
 801aaf0:	bb1b      	cbnz	r3, 801ab3a <_svfiprintf_r+0x1b2>
 801aaf2:	9b03      	ldr	r3, [sp, #12]
 801aaf4:	3307      	adds	r3, #7
 801aaf6:	f023 0307 	bic.w	r3, r3, #7
 801aafa:	3308      	adds	r3, #8
 801aafc:	9303      	str	r3, [sp, #12]
 801aafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab00:	4433      	add	r3, r6
 801ab02:	9309      	str	r3, [sp, #36]	; 0x24
 801ab04:	e767      	b.n	801a9d6 <_svfiprintf_r+0x4e>
 801ab06:	fb0c 3202 	mla	r2, ip, r2, r3
 801ab0a:	460c      	mov	r4, r1
 801ab0c:	2001      	movs	r0, #1
 801ab0e:	e7a5      	b.n	801aa5c <_svfiprintf_r+0xd4>
 801ab10:	2300      	movs	r3, #0
 801ab12:	3401      	adds	r4, #1
 801ab14:	9305      	str	r3, [sp, #20]
 801ab16:	4619      	mov	r1, r3
 801ab18:	f04f 0c0a 	mov.w	ip, #10
 801ab1c:	4620      	mov	r0, r4
 801ab1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ab22:	3a30      	subs	r2, #48	; 0x30
 801ab24:	2a09      	cmp	r2, #9
 801ab26:	d903      	bls.n	801ab30 <_svfiprintf_r+0x1a8>
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d0c5      	beq.n	801aab8 <_svfiprintf_r+0x130>
 801ab2c:	9105      	str	r1, [sp, #20]
 801ab2e:	e7c3      	b.n	801aab8 <_svfiprintf_r+0x130>
 801ab30:	fb0c 2101 	mla	r1, ip, r1, r2
 801ab34:	4604      	mov	r4, r0
 801ab36:	2301      	movs	r3, #1
 801ab38:	e7f0      	b.n	801ab1c <_svfiprintf_r+0x194>
 801ab3a:	ab03      	add	r3, sp, #12
 801ab3c:	9300      	str	r3, [sp, #0]
 801ab3e:	462a      	mov	r2, r5
 801ab40:	4b0f      	ldr	r3, [pc, #60]	; (801ab80 <_svfiprintf_r+0x1f8>)
 801ab42:	a904      	add	r1, sp, #16
 801ab44:	4638      	mov	r0, r7
 801ab46:	f7fe f813 	bl	8018b70 <_printf_float>
 801ab4a:	1c42      	adds	r2, r0, #1
 801ab4c:	4606      	mov	r6, r0
 801ab4e:	d1d6      	bne.n	801aafe <_svfiprintf_r+0x176>
 801ab50:	89ab      	ldrh	r3, [r5, #12]
 801ab52:	065b      	lsls	r3, r3, #25
 801ab54:	f53f af2c 	bmi.w	801a9b0 <_svfiprintf_r+0x28>
 801ab58:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab5a:	b01d      	add	sp, #116	; 0x74
 801ab5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab60:	ab03      	add	r3, sp, #12
 801ab62:	9300      	str	r3, [sp, #0]
 801ab64:	462a      	mov	r2, r5
 801ab66:	4b06      	ldr	r3, [pc, #24]	; (801ab80 <_svfiprintf_r+0x1f8>)
 801ab68:	a904      	add	r1, sp, #16
 801ab6a:	4638      	mov	r0, r7
 801ab6c:	f7fe faa4 	bl	80190b8 <_printf_i>
 801ab70:	e7eb      	b.n	801ab4a <_svfiprintf_r+0x1c2>
 801ab72:	bf00      	nop
 801ab74:	0801becc 	.word	0x0801becc
 801ab78:	0801bed6 	.word	0x0801bed6
 801ab7c:	08018b71 	.word	0x08018b71
 801ab80:	0801a8d3 	.word	0x0801a8d3
 801ab84:	0801bed2 	.word	0x0801bed2

0801ab88 <_read_r>:
 801ab88:	b538      	push	{r3, r4, r5, lr}
 801ab8a:	4d07      	ldr	r5, [pc, #28]	; (801aba8 <_read_r+0x20>)
 801ab8c:	4604      	mov	r4, r0
 801ab8e:	4608      	mov	r0, r1
 801ab90:	4611      	mov	r1, r2
 801ab92:	2200      	movs	r2, #0
 801ab94:	602a      	str	r2, [r5, #0]
 801ab96:	461a      	mov	r2, r3
 801ab98:	f7f6 fc84 	bl	80114a4 <_read>
 801ab9c:	1c43      	adds	r3, r0, #1
 801ab9e:	d102      	bne.n	801aba6 <_read_r+0x1e>
 801aba0:	682b      	ldr	r3, [r5, #0]
 801aba2:	b103      	cbz	r3, 801aba6 <_read_r+0x1e>
 801aba4:	6023      	str	r3, [r4, #0]
 801aba6:	bd38      	pop	{r3, r4, r5, pc}
 801aba8:	20000b18 	.word	0x20000b18

0801abac <__assert_func>:
 801abac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801abae:	4614      	mov	r4, r2
 801abb0:	461a      	mov	r2, r3
 801abb2:	4b09      	ldr	r3, [pc, #36]	; (801abd8 <__assert_func+0x2c>)
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	4605      	mov	r5, r0
 801abb8:	68d8      	ldr	r0, [r3, #12]
 801abba:	b14c      	cbz	r4, 801abd0 <__assert_func+0x24>
 801abbc:	4b07      	ldr	r3, [pc, #28]	; (801abdc <__assert_func+0x30>)
 801abbe:	9100      	str	r1, [sp, #0]
 801abc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801abc4:	4906      	ldr	r1, [pc, #24]	; (801abe0 <__assert_func+0x34>)
 801abc6:	462b      	mov	r3, r5
 801abc8:	f000 f80e 	bl	801abe8 <fiprintf>
 801abcc:	f000 fa98 	bl	801b100 <abort>
 801abd0:	4b04      	ldr	r3, [pc, #16]	; (801abe4 <__assert_func+0x38>)
 801abd2:	461c      	mov	r4, r3
 801abd4:	e7f3      	b.n	801abbe <__assert_func+0x12>
 801abd6:	bf00      	nop
 801abd8:	2000002c 	.word	0x2000002c
 801abdc:	0801bedd 	.word	0x0801bedd
 801abe0:	0801beea 	.word	0x0801beea
 801abe4:	0801bf18 	.word	0x0801bf18

0801abe8 <fiprintf>:
 801abe8:	b40e      	push	{r1, r2, r3}
 801abea:	b503      	push	{r0, r1, lr}
 801abec:	4601      	mov	r1, r0
 801abee:	ab03      	add	r3, sp, #12
 801abf0:	4805      	ldr	r0, [pc, #20]	; (801ac08 <fiprintf+0x20>)
 801abf2:	f853 2b04 	ldr.w	r2, [r3], #4
 801abf6:	6800      	ldr	r0, [r0, #0]
 801abf8:	9301      	str	r3, [sp, #4]
 801abfa:	f000 f883 	bl	801ad04 <_vfiprintf_r>
 801abfe:	b002      	add	sp, #8
 801ac00:	f85d eb04 	ldr.w	lr, [sp], #4
 801ac04:	b003      	add	sp, #12
 801ac06:	4770      	bx	lr
 801ac08:	2000002c 	.word	0x2000002c

0801ac0c <__ascii_mbtowc>:
 801ac0c:	b082      	sub	sp, #8
 801ac0e:	b901      	cbnz	r1, 801ac12 <__ascii_mbtowc+0x6>
 801ac10:	a901      	add	r1, sp, #4
 801ac12:	b142      	cbz	r2, 801ac26 <__ascii_mbtowc+0x1a>
 801ac14:	b14b      	cbz	r3, 801ac2a <__ascii_mbtowc+0x1e>
 801ac16:	7813      	ldrb	r3, [r2, #0]
 801ac18:	600b      	str	r3, [r1, #0]
 801ac1a:	7812      	ldrb	r2, [r2, #0]
 801ac1c:	1e10      	subs	r0, r2, #0
 801ac1e:	bf18      	it	ne
 801ac20:	2001      	movne	r0, #1
 801ac22:	b002      	add	sp, #8
 801ac24:	4770      	bx	lr
 801ac26:	4610      	mov	r0, r2
 801ac28:	e7fb      	b.n	801ac22 <__ascii_mbtowc+0x16>
 801ac2a:	f06f 0001 	mvn.w	r0, #1
 801ac2e:	e7f8      	b.n	801ac22 <__ascii_mbtowc+0x16>

0801ac30 <memmove>:
 801ac30:	4288      	cmp	r0, r1
 801ac32:	b510      	push	{r4, lr}
 801ac34:	eb01 0402 	add.w	r4, r1, r2
 801ac38:	d902      	bls.n	801ac40 <memmove+0x10>
 801ac3a:	4284      	cmp	r4, r0
 801ac3c:	4623      	mov	r3, r4
 801ac3e:	d807      	bhi.n	801ac50 <memmove+0x20>
 801ac40:	1e43      	subs	r3, r0, #1
 801ac42:	42a1      	cmp	r1, r4
 801ac44:	d008      	beq.n	801ac58 <memmove+0x28>
 801ac46:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ac4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ac4e:	e7f8      	b.n	801ac42 <memmove+0x12>
 801ac50:	4402      	add	r2, r0
 801ac52:	4601      	mov	r1, r0
 801ac54:	428a      	cmp	r2, r1
 801ac56:	d100      	bne.n	801ac5a <memmove+0x2a>
 801ac58:	bd10      	pop	{r4, pc}
 801ac5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ac5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ac62:	e7f7      	b.n	801ac54 <memmove+0x24>

0801ac64 <_realloc_r>:
 801ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac66:	4607      	mov	r7, r0
 801ac68:	4614      	mov	r4, r2
 801ac6a:	460e      	mov	r6, r1
 801ac6c:	b921      	cbnz	r1, 801ac78 <_realloc_r+0x14>
 801ac6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ac72:	4611      	mov	r1, r2
 801ac74:	f7fd be82 	b.w	801897c <_malloc_r>
 801ac78:	b922      	cbnz	r2, 801ac84 <_realloc_r+0x20>
 801ac7a:	f7fd fe2f 	bl	80188dc <_free_r>
 801ac7e:	4625      	mov	r5, r4
 801ac80:	4628      	mov	r0, r5
 801ac82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac84:	f000 fa43 	bl	801b10e <_malloc_usable_size_r>
 801ac88:	42a0      	cmp	r0, r4
 801ac8a:	d20f      	bcs.n	801acac <_realloc_r+0x48>
 801ac8c:	4621      	mov	r1, r4
 801ac8e:	4638      	mov	r0, r7
 801ac90:	f7fd fe74 	bl	801897c <_malloc_r>
 801ac94:	4605      	mov	r5, r0
 801ac96:	2800      	cmp	r0, #0
 801ac98:	d0f2      	beq.n	801ac80 <_realloc_r+0x1c>
 801ac9a:	4631      	mov	r1, r6
 801ac9c:	4622      	mov	r2, r4
 801ac9e:	f7fd fe07 	bl	80188b0 <memcpy>
 801aca2:	4631      	mov	r1, r6
 801aca4:	4638      	mov	r0, r7
 801aca6:	f7fd fe19 	bl	80188dc <_free_r>
 801acaa:	e7e9      	b.n	801ac80 <_realloc_r+0x1c>
 801acac:	4635      	mov	r5, r6
 801acae:	e7e7      	b.n	801ac80 <_realloc_r+0x1c>

0801acb0 <__sfputc_r>:
 801acb0:	6893      	ldr	r3, [r2, #8]
 801acb2:	3b01      	subs	r3, #1
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	b410      	push	{r4}
 801acb8:	6093      	str	r3, [r2, #8]
 801acba:	da08      	bge.n	801acce <__sfputc_r+0x1e>
 801acbc:	6994      	ldr	r4, [r2, #24]
 801acbe:	42a3      	cmp	r3, r4
 801acc0:	db01      	blt.n	801acc6 <__sfputc_r+0x16>
 801acc2:	290a      	cmp	r1, #10
 801acc4:	d103      	bne.n	801acce <__sfputc_r+0x1e>
 801acc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801acca:	f000 b94b 	b.w	801af64 <__swbuf_r>
 801acce:	6813      	ldr	r3, [r2, #0]
 801acd0:	1c58      	adds	r0, r3, #1
 801acd2:	6010      	str	r0, [r2, #0]
 801acd4:	7019      	strb	r1, [r3, #0]
 801acd6:	4608      	mov	r0, r1
 801acd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801acdc:	4770      	bx	lr

0801acde <__sfputs_r>:
 801acde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ace0:	4606      	mov	r6, r0
 801ace2:	460f      	mov	r7, r1
 801ace4:	4614      	mov	r4, r2
 801ace6:	18d5      	adds	r5, r2, r3
 801ace8:	42ac      	cmp	r4, r5
 801acea:	d101      	bne.n	801acf0 <__sfputs_r+0x12>
 801acec:	2000      	movs	r0, #0
 801acee:	e007      	b.n	801ad00 <__sfputs_r+0x22>
 801acf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acf4:	463a      	mov	r2, r7
 801acf6:	4630      	mov	r0, r6
 801acf8:	f7ff ffda 	bl	801acb0 <__sfputc_r>
 801acfc:	1c43      	adds	r3, r0, #1
 801acfe:	d1f3      	bne.n	801ace8 <__sfputs_r+0xa>
 801ad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ad04 <_vfiprintf_r>:
 801ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad08:	460d      	mov	r5, r1
 801ad0a:	b09d      	sub	sp, #116	; 0x74
 801ad0c:	4614      	mov	r4, r2
 801ad0e:	4698      	mov	r8, r3
 801ad10:	4606      	mov	r6, r0
 801ad12:	b118      	cbz	r0, 801ad1c <_vfiprintf_r+0x18>
 801ad14:	6983      	ldr	r3, [r0, #24]
 801ad16:	b90b      	cbnz	r3, 801ad1c <_vfiprintf_r+0x18>
 801ad18:	f7fd fca0 	bl	801865c <__sinit>
 801ad1c:	4b89      	ldr	r3, [pc, #548]	; (801af44 <_vfiprintf_r+0x240>)
 801ad1e:	429d      	cmp	r5, r3
 801ad20:	d11b      	bne.n	801ad5a <_vfiprintf_r+0x56>
 801ad22:	6875      	ldr	r5, [r6, #4]
 801ad24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad26:	07d9      	lsls	r1, r3, #31
 801ad28:	d405      	bmi.n	801ad36 <_vfiprintf_r+0x32>
 801ad2a:	89ab      	ldrh	r3, [r5, #12]
 801ad2c:	059a      	lsls	r2, r3, #22
 801ad2e:	d402      	bmi.n	801ad36 <_vfiprintf_r+0x32>
 801ad30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad32:	f7fd fd56 	bl	80187e2 <__retarget_lock_acquire_recursive>
 801ad36:	89ab      	ldrh	r3, [r5, #12]
 801ad38:	071b      	lsls	r3, r3, #28
 801ad3a:	d501      	bpl.n	801ad40 <_vfiprintf_r+0x3c>
 801ad3c:	692b      	ldr	r3, [r5, #16]
 801ad3e:	b9eb      	cbnz	r3, 801ad7c <_vfiprintf_r+0x78>
 801ad40:	4629      	mov	r1, r5
 801ad42:	4630      	mov	r0, r6
 801ad44:	f000 f96e 	bl	801b024 <__swsetup_r>
 801ad48:	b1c0      	cbz	r0, 801ad7c <_vfiprintf_r+0x78>
 801ad4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad4c:	07dc      	lsls	r4, r3, #31
 801ad4e:	d50e      	bpl.n	801ad6e <_vfiprintf_r+0x6a>
 801ad50:	f04f 30ff 	mov.w	r0, #4294967295
 801ad54:	b01d      	add	sp, #116	; 0x74
 801ad56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad5a:	4b7b      	ldr	r3, [pc, #492]	; (801af48 <_vfiprintf_r+0x244>)
 801ad5c:	429d      	cmp	r5, r3
 801ad5e:	d101      	bne.n	801ad64 <_vfiprintf_r+0x60>
 801ad60:	68b5      	ldr	r5, [r6, #8]
 801ad62:	e7df      	b.n	801ad24 <_vfiprintf_r+0x20>
 801ad64:	4b79      	ldr	r3, [pc, #484]	; (801af4c <_vfiprintf_r+0x248>)
 801ad66:	429d      	cmp	r5, r3
 801ad68:	bf08      	it	eq
 801ad6a:	68f5      	ldreq	r5, [r6, #12]
 801ad6c:	e7da      	b.n	801ad24 <_vfiprintf_r+0x20>
 801ad6e:	89ab      	ldrh	r3, [r5, #12]
 801ad70:	0598      	lsls	r0, r3, #22
 801ad72:	d4ed      	bmi.n	801ad50 <_vfiprintf_r+0x4c>
 801ad74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad76:	f7fd fd35 	bl	80187e4 <__retarget_lock_release_recursive>
 801ad7a:	e7e9      	b.n	801ad50 <_vfiprintf_r+0x4c>
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	9309      	str	r3, [sp, #36]	; 0x24
 801ad80:	2320      	movs	r3, #32
 801ad82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ad86:	f8cd 800c 	str.w	r8, [sp, #12]
 801ad8a:	2330      	movs	r3, #48	; 0x30
 801ad8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801af50 <_vfiprintf_r+0x24c>
 801ad90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ad94:	f04f 0901 	mov.w	r9, #1
 801ad98:	4623      	mov	r3, r4
 801ad9a:	469a      	mov	sl, r3
 801ad9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ada0:	b10a      	cbz	r2, 801ada6 <_vfiprintf_r+0xa2>
 801ada2:	2a25      	cmp	r2, #37	; 0x25
 801ada4:	d1f9      	bne.n	801ad9a <_vfiprintf_r+0x96>
 801ada6:	ebba 0b04 	subs.w	fp, sl, r4
 801adaa:	d00b      	beq.n	801adc4 <_vfiprintf_r+0xc0>
 801adac:	465b      	mov	r3, fp
 801adae:	4622      	mov	r2, r4
 801adb0:	4629      	mov	r1, r5
 801adb2:	4630      	mov	r0, r6
 801adb4:	f7ff ff93 	bl	801acde <__sfputs_r>
 801adb8:	3001      	adds	r0, #1
 801adba:	f000 80aa 	beq.w	801af12 <_vfiprintf_r+0x20e>
 801adbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801adc0:	445a      	add	r2, fp
 801adc2:	9209      	str	r2, [sp, #36]	; 0x24
 801adc4:	f89a 3000 	ldrb.w	r3, [sl]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	f000 80a2 	beq.w	801af12 <_vfiprintf_r+0x20e>
 801adce:	2300      	movs	r3, #0
 801add0:	f04f 32ff 	mov.w	r2, #4294967295
 801add4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801add8:	f10a 0a01 	add.w	sl, sl, #1
 801addc:	9304      	str	r3, [sp, #16]
 801adde:	9307      	str	r3, [sp, #28]
 801ade0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ade4:	931a      	str	r3, [sp, #104]	; 0x68
 801ade6:	4654      	mov	r4, sl
 801ade8:	2205      	movs	r2, #5
 801adea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801adee:	4858      	ldr	r0, [pc, #352]	; (801af50 <_vfiprintf_r+0x24c>)
 801adf0:	f7e5 f9f6 	bl	80001e0 <memchr>
 801adf4:	9a04      	ldr	r2, [sp, #16]
 801adf6:	b9d8      	cbnz	r0, 801ae30 <_vfiprintf_r+0x12c>
 801adf8:	06d1      	lsls	r1, r2, #27
 801adfa:	bf44      	itt	mi
 801adfc:	2320      	movmi	r3, #32
 801adfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae02:	0713      	lsls	r3, r2, #28
 801ae04:	bf44      	itt	mi
 801ae06:	232b      	movmi	r3, #43	; 0x2b
 801ae08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ae0c:	f89a 3000 	ldrb.w	r3, [sl]
 801ae10:	2b2a      	cmp	r3, #42	; 0x2a
 801ae12:	d015      	beq.n	801ae40 <_vfiprintf_r+0x13c>
 801ae14:	9a07      	ldr	r2, [sp, #28]
 801ae16:	4654      	mov	r4, sl
 801ae18:	2000      	movs	r0, #0
 801ae1a:	f04f 0c0a 	mov.w	ip, #10
 801ae1e:	4621      	mov	r1, r4
 801ae20:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ae24:	3b30      	subs	r3, #48	; 0x30
 801ae26:	2b09      	cmp	r3, #9
 801ae28:	d94e      	bls.n	801aec8 <_vfiprintf_r+0x1c4>
 801ae2a:	b1b0      	cbz	r0, 801ae5a <_vfiprintf_r+0x156>
 801ae2c:	9207      	str	r2, [sp, #28]
 801ae2e:	e014      	b.n	801ae5a <_vfiprintf_r+0x156>
 801ae30:	eba0 0308 	sub.w	r3, r0, r8
 801ae34:	fa09 f303 	lsl.w	r3, r9, r3
 801ae38:	4313      	orrs	r3, r2
 801ae3a:	9304      	str	r3, [sp, #16]
 801ae3c:	46a2      	mov	sl, r4
 801ae3e:	e7d2      	b.n	801ade6 <_vfiprintf_r+0xe2>
 801ae40:	9b03      	ldr	r3, [sp, #12]
 801ae42:	1d19      	adds	r1, r3, #4
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	9103      	str	r1, [sp, #12]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	bfbb      	ittet	lt
 801ae4c:	425b      	neglt	r3, r3
 801ae4e:	f042 0202 	orrlt.w	r2, r2, #2
 801ae52:	9307      	strge	r3, [sp, #28]
 801ae54:	9307      	strlt	r3, [sp, #28]
 801ae56:	bfb8      	it	lt
 801ae58:	9204      	strlt	r2, [sp, #16]
 801ae5a:	7823      	ldrb	r3, [r4, #0]
 801ae5c:	2b2e      	cmp	r3, #46	; 0x2e
 801ae5e:	d10c      	bne.n	801ae7a <_vfiprintf_r+0x176>
 801ae60:	7863      	ldrb	r3, [r4, #1]
 801ae62:	2b2a      	cmp	r3, #42	; 0x2a
 801ae64:	d135      	bne.n	801aed2 <_vfiprintf_r+0x1ce>
 801ae66:	9b03      	ldr	r3, [sp, #12]
 801ae68:	1d1a      	adds	r2, r3, #4
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	9203      	str	r2, [sp, #12]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	bfb8      	it	lt
 801ae72:	f04f 33ff 	movlt.w	r3, #4294967295
 801ae76:	3402      	adds	r4, #2
 801ae78:	9305      	str	r3, [sp, #20]
 801ae7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801af60 <_vfiprintf_r+0x25c>
 801ae7e:	7821      	ldrb	r1, [r4, #0]
 801ae80:	2203      	movs	r2, #3
 801ae82:	4650      	mov	r0, sl
 801ae84:	f7e5 f9ac 	bl	80001e0 <memchr>
 801ae88:	b140      	cbz	r0, 801ae9c <_vfiprintf_r+0x198>
 801ae8a:	2340      	movs	r3, #64	; 0x40
 801ae8c:	eba0 000a 	sub.w	r0, r0, sl
 801ae90:	fa03 f000 	lsl.w	r0, r3, r0
 801ae94:	9b04      	ldr	r3, [sp, #16]
 801ae96:	4303      	orrs	r3, r0
 801ae98:	3401      	adds	r4, #1
 801ae9a:	9304      	str	r3, [sp, #16]
 801ae9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aea0:	482c      	ldr	r0, [pc, #176]	; (801af54 <_vfiprintf_r+0x250>)
 801aea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aea6:	2206      	movs	r2, #6
 801aea8:	f7e5 f99a 	bl	80001e0 <memchr>
 801aeac:	2800      	cmp	r0, #0
 801aeae:	d03f      	beq.n	801af30 <_vfiprintf_r+0x22c>
 801aeb0:	4b29      	ldr	r3, [pc, #164]	; (801af58 <_vfiprintf_r+0x254>)
 801aeb2:	bb1b      	cbnz	r3, 801aefc <_vfiprintf_r+0x1f8>
 801aeb4:	9b03      	ldr	r3, [sp, #12]
 801aeb6:	3307      	adds	r3, #7
 801aeb8:	f023 0307 	bic.w	r3, r3, #7
 801aebc:	3308      	adds	r3, #8
 801aebe:	9303      	str	r3, [sp, #12]
 801aec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aec2:	443b      	add	r3, r7
 801aec4:	9309      	str	r3, [sp, #36]	; 0x24
 801aec6:	e767      	b.n	801ad98 <_vfiprintf_r+0x94>
 801aec8:	fb0c 3202 	mla	r2, ip, r2, r3
 801aecc:	460c      	mov	r4, r1
 801aece:	2001      	movs	r0, #1
 801aed0:	e7a5      	b.n	801ae1e <_vfiprintf_r+0x11a>
 801aed2:	2300      	movs	r3, #0
 801aed4:	3401      	adds	r4, #1
 801aed6:	9305      	str	r3, [sp, #20]
 801aed8:	4619      	mov	r1, r3
 801aeda:	f04f 0c0a 	mov.w	ip, #10
 801aede:	4620      	mov	r0, r4
 801aee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aee4:	3a30      	subs	r2, #48	; 0x30
 801aee6:	2a09      	cmp	r2, #9
 801aee8:	d903      	bls.n	801aef2 <_vfiprintf_r+0x1ee>
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d0c5      	beq.n	801ae7a <_vfiprintf_r+0x176>
 801aeee:	9105      	str	r1, [sp, #20]
 801aef0:	e7c3      	b.n	801ae7a <_vfiprintf_r+0x176>
 801aef2:	fb0c 2101 	mla	r1, ip, r1, r2
 801aef6:	4604      	mov	r4, r0
 801aef8:	2301      	movs	r3, #1
 801aefa:	e7f0      	b.n	801aede <_vfiprintf_r+0x1da>
 801aefc:	ab03      	add	r3, sp, #12
 801aefe:	9300      	str	r3, [sp, #0]
 801af00:	462a      	mov	r2, r5
 801af02:	4b16      	ldr	r3, [pc, #88]	; (801af5c <_vfiprintf_r+0x258>)
 801af04:	a904      	add	r1, sp, #16
 801af06:	4630      	mov	r0, r6
 801af08:	f7fd fe32 	bl	8018b70 <_printf_float>
 801af0c:	4607      	mov	r7, r0
 801af0e:	1c78      	adds	r0, r7, #1
 801af10:	d1d6      	bne.n	801aec0 <_vfiprintf_r+0x1bc>
 801af12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af14:	07d9      	lsls	r1, r3, #31
 801af16:	d405      	bmi.n	801af24 <_vfiprintf_r+0x220>
 801af18:	89ab      	ldrh	r3, [r5, #12]
 801af1a:	059a      	lsls	r2, r3, #22
 801af1c:	d402      	bmi.n	801af24 <_vfiprintf_r+0x220>
 801af1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af20:	f7fd fc60 	bl	80187e4 <__retarget_lock_release_recursive>
 801af24:	89ab      	ldrh	r3, [r5, #12]
 801af26:	065b      	lsls	r3, r3, #25
 801af28:	f53f af12 	bmi.w	801ad50 <_vfiprintf_r+0x4c>
 801af2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af2e:	e711      	b.n	801ad54 <_vfiprintf_r+0x50>
 801af30:	ab03      	add	r3, sp, #12
 801af32:	9300      	str	r3, [sp, #0]
 801af34:	462a      	mov	r2, r5
 801af36:	4b09      	ldr	r3, [pc, #36]	; (801af5c <_vfiprintf_r+0x258>)
 801af38:	a904      	add	r1, sp, #16
 801af3a:	4630      	mov	r0, r6
 801af3c:	f7fe f8bc 	bl	80190b8 <_printf_i>
 801af40:	e7e4      	b.n	801af0c <_vfiprintf_r+0x208>
 801af42:	bf00      	nop
 801af44:	0801bc64 	.word	0x0801bc64
 801af48:	0801bc84 	.word	0x0801bc84
 801af4c:	0801bc44 	.word	0x0801bc44
 801af50:	0801becc 	.word	0x0801becc
 801af54:	0801bed6 	.word	0x0801bed6
 801af58:	08018b71 	.word	0x08018b71
 801af5c:	0801acdf 	.word	0x0801acdf
 801af60:	0801bed2 	.word	0x0801bed2

0801af64 <__swbuf_r>:
 801af64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af66:	460e      	mov	r6, r1
 801af68:	4614      	mov	r4, r2
 801af6a:	4605      	mov	r5, r0
 801af6c:	b118      	cbz	r0, 801af76 <__swbuf_r+0x12>
 801af6e:	6983      	ldr	r3, [r0, #24]
 801af70:	b90b      	cbnz	r3, 801af76 <__swbuf_r+0x12>
 801af72:	f7fd fb73 	bl	801865c <__sinit>
 801af76:	4b21      	ldr	r3, [pc, #132]	; (801affc <__swbuf_r+0x98>)
 801af78:	429c      	cmp	r4, r3
 801af7a:	d12b      	bne.n	801afd4 <__swbuf_r+0x70>
 801af7c:	686c      	ldr	r4, [r5, #4]
 801af7e:	69a3      	ldr	r3, [r4, #24]
 801af80:	60a3      	str	r3, [r4, #8]
 801af82:	89a3      	ldrh	r3, [r4, #12]
 801af84:	071a      	lsls	r2, r3, #28
 801af86:	d52f      	bpl.n	801afe8 <__swbuf_r+0x84>
 801af88:	6923      	ldr	r3, [r4, #16]
 801af8a:	b36b      	cbz	r3, 801afe8 <__swbuf_r+0x84>
 801af8c:	6923      	ldr	r3, [r4, #16]
 801af8e:	6820      	ldr	r0, [r4, #0]
 801af90:	1ac0      	subs	r0, r0, r3
 801af92:	6963      	ldr	r3, [r4, #20]
 801af94:	b2f6      	uxtb	r6, r6
 801af96:	4283      	cmp	r3, r0
 801af98:	4637      	mov	r7, r6
 801af9a:	dc04      	bgt.n	801afa6 <__swbuf_r+0x42>
 801af9c:	4621      	mov	r1, r4
 801af9e:	4628      	mov	r0, r5
 801afa0:	f7fd fac8 	bl	8018534 <_fflush_r>
 801afa4:	bb30      	cbnz	r0, 801aff4 <__swbuf_r+0x90>
 801afa6:	68a3      	ldr	r3, [r4, #8]
 801afa8:	3b01      	subs	r3, #1
 801afaa:	60a3      	str	r3, [r4, #8]
 801afac:	6823      	ldr	r3, [r4, #0]
 801afae:	1c5a      	adds	r2, r3, #1
 801afb0:	6022      	str	r2, [r4, #0]
 801afb2:	701e      	strb	r6, [r3, #0]
 801afb4:	6963      	ldr	r3, [r4, #20]
 801afb6:	3001      	adds	r0, #1
 801afb8:	4283      	cmp	r3, r0
 801afba:	d004      	beq.n	801afc6 <__swbuf_r+0x62>
 801afbc:	89a3      	ldrh	r3, [r4, #12]
 801afbe:	07db      	lsls	r3, r3, #31
 801afc0:	d506      	bpl.n	801afd0 <__swbuf_r+0x6c>
 801afc2:	2e0a      	cmp	r6, #10
 801afc4:	d104      	bne.n	801afd0 <__swbuf_r+0x6c>
 801afc6:	4621      	mov	r1, r4
 801afc8:	4628      	mov	r0, r5
 801afca:	f7fd fab3 	bl	8018534 <_fflush_r>
 801afce:	b988      	cbnz	r0, 801aff4 <__swbuf_r+0x90>
 801afd0:	4638      	mov	r0, r7
 801afd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afd4:	4b0a      	ldr	r3, [pc, #40]	; (801b000 <__swbuf_r+0x9c>)
 801afd6:	429c      	cmp	r4, r3
 801afd8:	d101      	bne.n	801afde <__swbuf_r+0x7a>
 801afda:	68ac      	ldr	r4, [r5, #8]
 801afdc:	e7cf      	b.n	801af7e <__swbuf_r+0x1a>
 801afde:	4b09      	ldr	r3, [pc, #36]	; (801b004 <__swbuf_r+0xa0>)
 801afe0:	429c      	cmp	r4, r3
 801afe2:	bf08      	it	eq
 801afe4:	68ec      	ldreq	r4, [r5, #12]
 801afe6:	e7ca      	b.n	801af7e <__swbuf_r+0x1a>
 801afe8:	4621      	mov	r1, r4
 801afea:	4628      	mov	r0, r5
 801afec:	f000 f81a 	bl	801b024 <__swsetup_r>
 801aff0:	2800      	cmp	r0, #0
 801aff2:	d0cb      	beq.n	801af8c <__swbuf_r+0x28>
 801aff4:	f04f 37ff 	mov.w	r7, #4294967295
 801aff8:	e7ea      	b.n	801afd0 <__swbuf_r+0x6c>
 801affa:	bf00      	nop
 801affc:	0801bc64 	.word	0x0801bc64
 801b000:	0801bc84 	.word	0x0801bc84
 801b004:	0801bc44 	.word	0x0801bc44

0801b008 <__ascii_wctomb>:
 801b008:	b149      	cbz	r1, 801b01e <__ascii_wctomb+0x16>
 801b00a:	2aff      	cmp	r2, #255	; 0xff
 801b00c:	bf85      	ittet	hi
 801b00e:	238a      	movhi	r3, #138	; 0x8a
 801b010:	6003      	strhi	r3, [r0, #0]
 801b012:	700a      	strbls	r2, [r1, #0]
 801b014:	f04f 30ff 	movhi.w	r0, #4294967295
 801b018:	bf98      	it	ls
 801b01a:	2001      	movls	r0, #1
 801b01c:	4770      	bx	lr
 801b01e:	4608      	mov	r0, r1
 801b020:	4770      	bx	lr
	...

0801b024 <__swsetup_r>:
 801b024:	4b32      	ldr	r3, [pc, #200]	; (801b0f0 <__swsetup_r+0xcc>)
 801b026:	b570      	push	{r4, r5, r6, lr}
 801b028:	681d      	ldr	r5, [r3, #0]
 801b02a:	4606      	mov	r6, r0
 801b02c:	460c      	mov	r4, r1
 801b02e:	b125      	cbz	r5, 801b03a <__swsetup_r+0x16>
 801b030:	69ab      	ldr	r3, [r5, #24]
 801b032:	b913      	cbnz	r3, 801b03a <__swsetup_r+0x16>
 801b034:	4628      	mov	r0, r5
 801b036:	f7fd fb11 	bl	801865c <__sinit>
 801b03a:	4b2e      	ldr	r3, [pc, #184]	; (801b0f4 <__swsetup_r+0xd0>)
 801b03c:	429c      	cmp	r4, r3
 801b03e:	d10f      	bne.n	801b060 <__swsetup_r+0x3c>
 801b040:	686c      	ldr	r4, [r5, #4]
 801b042:	89a3      	ldrh	r3, [r4, #12]
 801b044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b048:	0719      	lsls	r1, r3, #28
 801b04a:	d42c      	bmi.n	801b0a6 <__swsetup_r+0x82>
 801b04c:	06dd      	lsls	r5, r3, #27
 801b04e:	d411      	bmi.n	801b074 <__swsetup_r+0x50>
 801b050:	2309      	movs	r3, #9
 801b052:	6033      	str	r3, [r6, #0]
 801b054:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b058:	81a3      	strh	r3, [r4, #12]
 801b05a:	f04f 30ff 	mov.w	r0, #4294967295
 801b05e:	e03e      	b.n	801b0de <__swsetup_r+0xba>
 801b060:	4b25      	ldr	r3, [pc, #148]	; (801b0f8 <__swsetup_r+0xd4>)
 801b062:	429c      	cmp	r4, r3
 801b064:	d101      	bne.n	801b06a <__swsetup_r+0x46>
 801b066:	68ac      	ldr	r4, [r5, #8]
 801b068:	e7eb      	b.n	801b042 <__swsetup_r+0x1e>
 801b06a:	4b24      	ldr	r3, [pc, #144]	; (801b0fc <__swsetup_r+0xd8>)
 801b06c:	429c      	cmp	r4, r3
 801b06e:	bf08      	it	eq
 801b070:	68ec      	ldreq	r4, [r5, #12]
 801b072:	e7e6      	b.n	801b042 <__swsetup_r+0x1e>
 801b074:	0758      	lsls	r0, r3, #29
 801b076:	d512      	bpl.n	801b09e <__swsetup_r+0x7a>
 801b078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b07a:	b141      	cbz	r1, 801b08e <__swsetup_r+0x6a>
 801b07c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b080:	4299      	cmp	r1, r3
 801b082:	d002      	beq.n	801b08a <__swsetup_r+0x66>
 801b084:	4630      	mov	r0, r6
 801b086:	f7fd fc29 	bl	80188dc <_free_r>
 801b08a:	2300      	movs	r3, #0
 801b08c:	6363      	str	r3, [r4, #52]	; 0x34
 801b08e:	89a3      	ldrh	r3, [r4, #12]
 801b090:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b094:	81a3      	strh	r3, [r4, #12]
 801b096:	2300      	movs	r3, #0
 801b098:	6063      	str	r3, [r4, #4]
 801b09a:	6923      	ldr	r3, [r4, #16]
 801b09c:	6023      	str	r3, [r4, #0]
 801b09e:	89a3      	ldrh	r3, [r4, #12]
 801b0a0:	f043 0308 	orr.w	r3, r3, #8
 801b0a4:	81a3      	strh	r3, [r4, #12]
 801b0a6:	6923      	ldr	r3, [r4, #16]
 801b0a8:	b94b      	cbnz	r3, 801b0be <__swsetup_r+0x9a>
 801b0aa:	89a3      	ldrh	r3, [r4, #12]
 801b0ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b0b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b0b4:	d003      	beq.n	801b0be <__swsetup_r+0x9a>
 801b0b6:	4621      	mov	r1, r4
 801b0b8:	4630      	mov	r0, r6
 801b0ba:	f7fd fbb9 	bl	8018830 <__smakebuf_r>
 801b0be:	89a0      	ldrh	r0, [r4, #12]
 801b0c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b0c4:	f010 0301 	ands.w	r3, r0, #1
 801b0c8:	d00a      	beq.n	801b0e0 <__swsetup_r+0xbc>
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	60a3      	str	r3, [r4, #8]
 801b0ce:	6963      	ldr	r3, [r4, #20]
 801b0d0:	425b      	negs	r3, r3
 801b0d2:	61a3      	str	r3, [r4, #24]
 801b0d4:	6923      	ldr	r3, [r4, #16]
 801b0d6:	b943      	cbnz	r3, 801b0ea <__swsetup_r+0xc6>
 801b0d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b0dc:	d1ba      	bne.n	801b054 <__swsetup_r+0x30>
 801b0de:	bd70      	pop	{r4, r5, r6, pc}
 801b0e0:	0781      	lsls	r1, r0, #30
 801b0e2:	bf58      	it	pl
 801b0e4:	6963      	ldrpl	r3, [r4, #20]
 801b0e6:	60a3      	str	r3, [r4, #8]
 801b0e8:	e7f4      	b.n	801b0d4 <__swsetup_r+0xb0>
 801b0ea:	2000      	movs	r0, #0
 801b0ec:	e7f7      	b.n	801b0de <__swsetup_r+0xba>
 801b0ee:	bf00      	nop
 801b0f0:	2000002c 	.word	0x2000002c
 801b0f4:	0801bc64 	.word	0x0801bc64
 801b0f8:	0801bc84 	.word	0x0801bc84
 801b0fc:	0801bc44 	.word	0x0801bc44

0801b100 <abort>:
 801b100:	b508      	push	{r3, lr}
 801b102:	2006      	movs	r0, #6
 801b104:	f000 f834 	bl	801b170 <raise>
 801b108:	2001      	movs	r0, #1
 801b10a:	f7f6 f9c1 	bl	8011490 <_exit>

0801b10e <_malloc_usable_size_r>:
 801b10e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b112:	1f18      	subs	r0, r3, #4
 801b114:	2b00      	cmp	r3, #0
 801b116:	bfbc      	itt	lt
 801b118:	580b      	ldrlt	r3, [r1, r0]
 801b11a:	18c0      	addlt	r0, r0, r3
 801b11c:	4770      	bx	lr

0801b11e <_raise_r>:
 801b11e:	291f      	cmp	r1, #31
 801b120:	b538      	push	{r3, r4, r5, lr}
 801b122:	4604      	mov	r4, r0
 801b124:	460d      	mov	r5, r1
 801b126:	d904      	bls.n	801b132 <_raise_r+0x14>
 801b128:	2316      	movs	r3, #22
 801b12a:	6003      	str	r3, [r0, #0]
 801b12c:	f04f 30ff 	mov.w	r0, #4294967295
 801b130:	bd38      	pop	{r3, r4, r5, pc}
 801b132:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b134:	b112      	cbz	r2, 801b13c <_raise_r+0x1e>
 801b136:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b13a:	b94b      	cbnz	r3, 801b150 <_raise_r+0x32>
 801b13c:	4620      	mov	r0, r4
 801b13e:	f000 f831 	bl	801b1a4 <_getpid_r>
 801b142:	462a      	mov	r2, r5
 801b144:	4601      	mov	r1, r0
 801b146:	4620      	mov	r0, r4
 801b148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b14c:	f000 b818 	b.w	801b180 <_kill_r>
 801b150:	2b01      	cmp	r3, #1
 801b152:	d00a      	beq.n	801b16a <_raise_r+0x4c>
 801b154:	1c59      	adds	r1, r3, #1
 801b156:	d103      	bne.n	801b160 <_raise_r+0x42>
 801b158:	2316      	movs	r3, #22
 801b15a:	6003      	str	r3, [r0, #0]
 801b15c:	2001      	movs	r0, #1
 801b15e:	e7e7      	b.n	801b130 <_raise_r+0x12>
 801b160:	2400      	movs	r4, #0
 801b162:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b166:	4628      	mov	r0, r5
 801b168:	4798      	blx	r3
 801b16a:	2000      	movs	r0, #0
 801b16c:	e7e0      	b.n	801b130 <_raise_r+0x12>
	...

0801b170 <raise>:
 801b170:	4b02      	ldr	r3, [pc, #8]	; (801b17c <raise+0xc>)
 801b172:	4601      	mov	r1, r0
 801b174:	6818      	ldr	r0, [r3, #0]
 801b176:	f7ff bfd2 	b.w	801b11e <_raise_r>
 801b17a:	bf00      	nop
 801b17c:	2000002c 	.word	0x2000002c

0801b180 <_kill_r>:
 801b180:	b538      	push	{r3, r4, r5, lr}
 801b182:	4d07      	ldr	r5, [pc, #28]	; (801b1a0 <_kill_r+0x20>)
 801b184:	2300      	movs	r3, #0
 801b186:	4604      	mov	r4, r0
 801b188:	4608      	mov	r0, r1
 801b18a:	4611      	mov	r1, r2
 801b18c:	602b      	str	r3, [r5, #0]
 801b18e:	f7f6 f96f 	bl	8011470 <_kill>
 801b192:	1c43      	adds	r3, r0, #1
 801b194:	d102      	bne.n	801b19c <_kill_r+0x1c>
 801b196:	682b      	ldr	r3, [r5, #0]
 801b198:	b103      	cbz	r3, 801b19c <_kill_r+0x1c>
 801b19a:	6023      	str	r3, [r4, #0]
 801b19c:	bd38      	pop	{r3, r4, r5, pc}
 801b19e:	bf00      	nop
 801b1a0:	20000b18 	.word	0x20000b18

0801b1a4 <_getpid_r>:
 801b1a4:	f7f6 b95c 	b.w	8011460 <_getpid>

0801b1a8 <_init>:
 801b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1aa:	bf00      	nop
 801b1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1ae:	bc08      	pop	{r3}
 801b1b0:	469e      	mov	lr, r3
 801b1b2:	4770      	bx	lr

0801b1b4 <_fini>:
 801b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1b6:	bf00      	nop
 801b1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1ba:	bc08      	pop	{r3}
 801b1bc:	469e      	mov	lr, r3
 801b1be:	4770      	bx	lr
